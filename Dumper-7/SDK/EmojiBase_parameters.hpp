#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: EmojiBase

#include "Basic.hpp"

#include "AkAudio_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "Engine_structs.hpp"


namespace SDK::Params
{

// Function EmojiBase.EmojiBase_C.ExecuteUbergraph_EmojiBase
// 0x0138 (0x0138 - 0x0000)
struct EmojiBase_C_ExecuteUbergraph_EmojiBase final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         K2Node_Event_DeltaSeconds;                         // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetComponentLocation_ReturnValue;      // 0x000C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UUserWidget*                            CallFunc_GetUserWidgetObject_ReturnValue;          // 0x0018(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UEmojiWI_C*                             K2Node_DynamicCast_AsEmoji_WI;                     // 0x0020(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_29[0x3];                                       // 0x0029(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         K2Node_CustomEvent_Duration;                       // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsDedicatedServer_ReturnValue;            // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsDedicatedServer_ReturnValue_1;          // 0x0031(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_32[0x2];                                       // 0x0032(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void(EAkCallbackType CallbackType, class UAkCallbackInfo* CallbackInfo)> Temp_delegate_Variable;                            // 0x0034(0x0010)(ConstParm, ZeroConstructor, NoDestructor)
	uint8                                         Pad_44[0x4];                                       // 0x0044(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FAkExternalSourceInfo>          Temp_struct_Variable;                              // 0x0048(0x0010)(ConstParm, ReferenceParm)
	class APlayerController*                      CallFunc_GetPlayerController_ReturnValue;          // 0x0058(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_PostAkEvent_ReturnValue;                  // 0x0060(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsLocalController_ReturnValue;            // 0x0064(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_65[0x3];                                       // 0x0065(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_GetCameraLocation_ReturnValue;            // 0x0068(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_FindLookAtRotation_ReturnValue;           // 0x0074(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	TDelegate<void(EAkCallbackType CallbackType, class UAkCallbackInfo* CallbackInfo)> Temp_delegate_Variable_1;                          // 0x0080(0x0010)(ConstParm, ZeroConstructor, NoDestructor)
	struct FHitResult                             CallFunc_K2_SetWorldRotation_SweepHitResult;       // 0x0090(0x008C)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	uint8                                         Pad_11C[0x4];                                      // 0x011C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FAkExternalSourceInfo>          Temp_struct_Variable_1;                            // 0x0120(0x0010)(ConstParm, ReferenceParm)
	int32                                         CallFunc_PostAkEvent_ReturnValue_1;                // 0x0130(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(EmojiBase_C_ExecuteUbergraph_EmojiBase) == 0x000008, "Wrong alignment on EmojiBase_C_ExecuteUbergraph_EmojiBase");
static_assert(sizeof(EmojiBase_C_ExecuteUbergraph_EmojiBase) == 0x000138, "Wrong size on EmojiBase_C_ExecuteUbergraph_EmojiBase");
static_assert(offsetof(EmojiBase_C_ExecuteUbergraph_EmojiBase, EntryPoint) == 0x000000, "Member 'EmojiBase_C_ExecuteUbergraph_EmojiBase::EntryPoint' has a wrong offset!");
static_assert(offsetof(EmojiBase_C_ExecuteUbergraph_EmojiBase, CallFunc_IsValid_ReturnValue) == 0x000004, "Member 'EmojiBase_C_ExecuteUbergraph_EmojiBase::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(EmojiBase_C_ExecuteUbergraph_EmojiBase, K2Node_Event_DeltaSeconds) == 0x000008, "Member 'EmojiBase_C_ExecuteUbergraph_EmojiBase::K2Node_Event_DeltaSeconds' has a wrong offset!");
static_assert(offsetof(EmojiBase_C_ExecuteUbergraph_EmojiBase, CallFunc_K2_GetComponentLocation_ReturnValue) == 0x00000C, "Member 'EmojiBase_C_ExecuteUbergraph_EmojiBase::CallFunc_K2_GetComponentLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(EmojiBase_C_ExecuteUbergraph_EmojiBase, CallFunc_GetUserWidgetObject_ReturnValue) == 0x000018, "Member 'EmojiBase_C_ExecuteUbergraph_EmojiBase::CallFunc_GetUserWidgetObject_ReturnValue' has a wrong offset!");
static_assert(offsetof(EmojiBase_C_ExecuteUbergraph_EmojiBase, K2Node_DynamicCast_AsEmoji_WI) == 0x000020, "Member 'EmojiBase_C_ExecuteUbergraph_EmojiBase::K2Node_DynamicCast_AsEmoji_WI' has a wrong offset!");
static_assert(offsetof(EmojiBase_C_ExecuteUbergraph_EmojiBase, K2Node_DynamicCast_bSuccess) == 0x000028, "Member 'EmojiBase_C_ExecuteUbergraph_EmojiBase::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(EmojiBase_C_ExecuteUbergraph_EmojiBase, K2Node_CustomEvent_Duration) == 0x00002C, "Member 'EmojiBase_C_ExecuteUbergraph_EmojiBase::K2Node_CustomEvent_Duration' has a wrong offset!");
static_assert(offsetof(EmojiBase_C_ExecuteUbergraph_EmojiBase, CallFunc_IsDedicatedServer_ReturnValue) == 0x000030, "Member 'EmojiBase_C_ExecuteUbergraph_EmojiBase::CallFunc_IsDedicatedServer_ReturnValue' has a wrong offset!");
static_assert(offsetof(EmojiBase_C_ExecuteUbergraph_EmojiBase, CallFunc_IsDedicatedServer_ReturnValue_1) == 0x000031, "Member 'EmojiBase_C_ExecuteUbergraph_EmojiBase::CallFunc_IsDedicatedServer_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(EmojiBase_C_ExecuteUbergraph_EmojiBase, Temp_delegate_Variable) == 0x000034, "Member 'EmojiBase_C_ExecuteUbergraph_EmojiBase::Temp_delegate_Variable' has a wrong offset!");
static_assert(offsetof(EmojiBase_C_ExecuteUbergraph_EmojiBase, Temp_struct_Variable) == 0x000048, "Member 'EmojiBase_C_ExecuteUbergraph_EmojiBase::Temp_struct_Variable' has a wrong offset!");
static_assert(offsetof(EmojiBase_C_ExecuteUbergraph_EmojiBase, CallFunc_GetPlayerController_ReturnValue) == 0x000058, "Member 'EmojiBase_C_ExecuteUbergraph_EmojiBase::CallFunc_GetPlayerController_ReturnValue' has a wrong offset!");
static_assert(offsetof(EmojiBase_C_ExecuteUbergraph_EmojiBase, CallFunc_PostAkEvent_ReturnValue) == 0x000060, "Member 'EmojiBase_C_ExecuteUbergraph_EmojiBase::CallFunc_PostAkEvent_ReturnValue' has a wrong offset!");
static_assert(offsetof(EmojiBase_C_ExecuteUbergraph_EmojiBase, CallFunc_IsLocalController_ReturnValue) == 0x000064, "Member 'EmojiBase_C_ExecuteUbergraph_EmojiBase::CallFunc_IsLocalController_ReturnValue' has a wrong offset!");
static_assert(offsetof(EmojiBase_C_ExecuteUbergraph_EmojiBase, CallFunc_GetCameraLocation_ReturnValue) == 0x000068, "Member 'EmojiBase_C_ExecuteUbergraph_EmojiBase::CallFunc_GetCameraLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(EmojiBase_C_ExecuteUbergraph_EmojiBase, CallFunc_FindLookAtRotation_ReturnValue) == 0x000074, "Member 'EmojiBase_C_ExecuteUbergraph_EmojiBase::CallFunc_FindLookAtRotation_ReturnValue' has a wrong offset!");
static_assert(offsetof(EmojiBase_C_ExecuteUbergraph_EmojiBase, Temp_delegate_Variable_1) == 0x000080, "Member 'EmojiBase_C_ExecuteUbergraph_EmojiBase::Temp_delegate_Variable_1' has a wrong offset!");
static_assert(offsetof(EmojiBase_C_ExecuteUbergraph_EmojiBase, CallFunc_K2_SetWorldRotation_SweepHitResult) == 0x000090, "Member 'EmojiBase_C_ExecuteUbergraph_EmojiBase::CallFunc_K2_SetWorldRotation_SweepHitResult' has a wrong offset!");
static_assert(offsetof(EmojiBase_C_ExecuteUbergraph_EmojiBase, Temp_struct_Variable_1) == 0x000120, "Member 'EmojiBase_C_ExecuteUbergraph_EmojiBase::Temp_struct_Variable_1' has a wrong offset!");
static_assert(offsetof(EmojiBase_C_ExecuteUbergraph_EmojiBase, CallFunc_PostAkEvent_ReturnValue_1) == 0x000130, "Member 'EmojiBase_C_ExecuteUbergraph_EmojiBase::CallFunc_PostAkEvent_ReturnValue_1' has a wrong offset!");

// Function EmojiBase.EmojiBase_C.Play Emoji
// 0x0004 (0x0004 - 0x0000)
struct EmojiBase_C_Play_Emoji final
{
public:
	float                                         Duration;                                          // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(EmojiBase_C_Play_Emoji) == 0x000004, "Wrong alignment on EmojiBase_C_Play_Emoji");
static_assert(sizeof(EmojiBase_C_Play_Emoji) == 0x000004, "Wrong size on EmojiBase_C_Play_Emoji");
static_assert(offsetof(EmojiBase_C_Play_Emoji, Duration) == 0x000000, "Member 'EmojiBase_C_Play_Emoji::Duration' has a wrong offset!");

// Function EmojiBase.EmojiBase_C.ReceiveTick
// 0x0004 (0x0004 - 0x0000)
struct EmojiBase_C_ReceiveTick final
{
public:
	float                                         DeltaSeconds;                                      // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(EmojiBase_C_ReceiveTick) == 0x000004, "Wrong alignment on EmojiBase_C_ReceiveTick");
static_assert(sizeof(EmojiBase_C_ReceiveTick) == 0x000004, "Wrong size on EmojiBase_C_ReceiveTick");
static_assert(offsetof(EmojiBase_C_ReceiveTick, DeltaSeconds) == 0x000000, "Member 'EmojiBase_C_ReceiveTick::DeltaSeconds' has a wrong offset!");

}

