#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: GamepadCompatibleButton

#include "Basic.hpp"

#include "SlateCore_structs.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK::Params
{

// Function GamepadCompatibleButton.GamepadCompatibleButton_C.ExecuteUbergraph_GamepadCompatibleButton
// 0x0328 (0x0328 - 0x0000)
struct GamepadCompatibleButton_C_ExecuteUbergraph_GamepadCompatibleButton final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UAkComponent*                           CallFunc_SpawnAkComponentAtLocation_ReturnValue;   // 0x0008(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FFocusEvent                            K2Node_Event_InFocusEvent_1;                       // 0x0010(0x0008)(NoDestructor)
	bool                                          K2Node_Event_IsDesignTime;                         // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FFocusEvent                            K2Node_Event_InFocusEvent;                         // 0x001C(0x0008)(NoDestructor)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FButtonStyle                           K2Node_MakeStruct_ButtonStyle;                     // 0x0028(0x0278)(UObjectWrapper)
	struct FPointerEvent                          K2Node_Event_MouseEvent;                           // 0x02A0(0x0070)(ConstParm)
	bool                                          CallFunc_IsUsingGamepad_ReturnValue;               // 0x0310(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_311[0x7];                                      // 0x0311(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UAkComponent*                           CallFunc_SpawnAkComponentAtLocation_ReturnValue_1; // 0x0318(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0320(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(GamepadCompatibleButton_C_ExecuteUbergraph_GamepadCompatibleButton) == 0x000008, "Wrong alignment on GamepadCompatibleButton_C_ExecuteUbergraph_GamepadCompatibleButton");
static_assert(sizeof(GamepadCompatibleButton_C_ExecuteUbergraph_GamepadCompatibleButton) == 0x000328, "Wrong size on GamepadCompatibleButton_C_ExecuteUbergraph_GamepadCompatibleButton");
static_assert(offsetof(GamepadCompatibleButton_C_ExecuteUbergraph_GamepadCompatibleButton, EntryPoint) == 0x000000, "Member 'GamepadCompatibleButton_C_ExecuteUbergraph_GamepadCompatibleButton::EntryPoint' has a wrong offset!");
static_assert(offsetof(GamepadCompatibleButton_C_ExecuteUbergraph_GamepadCompatibleButton, CallFunc_SpawnAkComponentAtLocation_ReturnValue) == 0x000008, "Member 'GamepadCompatibleButton_C_ExecuteUbergraph_GamepadCompatibleButton::CallFunc_SpawnAkComponentAtLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(GamepadCompatibleButton_C_ExecuteUbergraph_GamepadCompatibleButton, K2Node_Event_InFocusEvent_1) == 0x000010, "Member 'GamepadCompatibleButton_C_ExecuteUbergraph_GamepadCompatibleButton::K2Node_Event_InFocusEvent_1' has a wrong offset!");
static_assert(offsetof(GamepadCompatibleButton_C_ExecuteUbergraph_GamepadCompatibleButton, K2Node_Event_IsDesignTime) == 0x000018, "Member 'GamepadCompatibleButton_C_ExecuteUbergraph_GamepadCompatibleButton::K2Node_Event_IsDesignTime' has a wrong offset!");
static_assert(offsetof(GamepadCompatibleButton_C_ExecuteUbergraph_GamepadCompatibleButton, K2Node_Event_InFocusEvent) == 0x00001C, "Member 'GamepadCompatibleButton_C_ExecuteUbergraph_GamepadCompatibleButton::K2Node_Event_InFocusEvent' has a wrong offset!");
static_assert(offsetof(GamepadCompatibleButton_C_ExecuteUbergraph_GamepadCompatibleButton, K2Node_MakeStruct_ButtonStyle) == 0x000028, "Member 'GamepadCompatibleButton_C_ExecuteUbergraph_GamepadCompatibleButton::K2Node_MakeStruct_ButtonStyle' has a wrong offset!");
static_assert(offsetof(GamepadCompatibleButton_C_ExecuteUbergraph_GamepadCompatibleButton, K2Node_Event_MouseEvent) == 0x0002A0, "Member 'GamepadCompatibleButton_C_ExecuteUbergraph_GamepadCompatibleButton::K2Node_Event_MouseEvent' has a wrong offset!");
static_assert(offsetof(GamepadCompatibleButton_C_ExecuteUbergraph_GamepadCompatibleButton, CallFunc_IsUsingGamepad_ReturnValue) == 0x000310, "Member 'GamepadCompatibleButton_C_ExecuteUbergraph_GamepadCompatibleButton::CallFunc_IsUsingGamepad_ReturnValue' has a wrong offset!");
static_assert(offsetof(GamepadCompatibleButton_C_ExecuteUbergraph_GamepadCompatibleButton, CallFunc_SpawnAkComponentAtLocation_ReturnValue_1) == 0x000318, "Member 'GamepadCompatibleButton_C_ExecuteUbergraph_GamepadCompatibleButton::CallFunc_SpawnAkComponentAtLocation_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(GamepadCompatibleButton_C_ExecuteUbergraph_GamepadCompatibleButton, CallFunc_BooleanAND_ReturnValue) == 0x000320, "Member 'GamepadCompatibleButton_C_ExecuteUbergraph_GamepadCompatibleButton::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");

// Function GamepadCompatibleButton.GamepadCompatibleButton_C.OnMouseLeave
// 0x0070 (0x0070 - 0x0000)
struct GamepadCompatibleButton_C_OnMouseLeave final
{
public:
	struct FPointerEvent                          MouseEvent;                                        // 0x0000(0x0070)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
};
static_assert(alignof(GamepadCompatibleButton_C_OnMouseLeave) == 0x000008, "Wrong alignment on GamepadCompatibleButton_C_OnMouseLeave");
static_assert(sizeof(GamepadCompatibleButton_C_OnMouseLeave) == 0x000070, "Wrong size on GamepadCompatibleButton_C_OnMouseLeave");
static_assert(offsetof(GamepadCompatibleButton_C_OnMouseLeave, MouseEvent) == 0x000000, "Member 'GamepadCompatibleButton_C_OnMouseLeave::MouseEvent' has a wrong offset!");

// Function GamepadCompatibleButton.GamepadCompatibleButton_C.OnRemovedFromFocusPath
// 0x0008 (0x0008 - 0x0000)
struct GamepadCompatibleButton_C_OnRemovedFromFocusPath final
{
public:
	struct FFocusEvent                            InFocusEvent;                                      // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)
};
static_assert(alignof(GamepadCompatibleButton_C_OnRemovedFromFocusPath) == 0x000004, "Wrong alignment on GamepadCompatibleButton_C_OnRemovedFromFocusPath");
static_assert(sizeof(GamepadCompatibleButton_C_OnRemovedFromFocusPath) == 0x000008, "Wrong size on GamepadCompatibleButton_C_OnRemovedFromFocusPath");
static_assert(offsetof(GamepadCompatibleButton_C_OnRemovedFromFocusPath, InFocusEvent) == 0x000000, "Member 'GamepadCompatibleButton_C_OnRemovedFromFocusPath::InFocusEvent' has a wrong offset!");

// Function GamepadCompatibleButton.GamepadCompatibleButton_C.PreConstruct
// 0x0001 (0x0001 - 0x0000)
struct GamepadCompatibleButton_C_PreConstruct final
{
public:
	bool                                          IsDesignTime;                                      // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(GamepadCompatibleButton_C_PreConstruct) == 0x000001, "Wrong alignment on GamepadCompatibleButton_C_PreConstruct");
static_assert(sizeof(GamepadCompatibleButton_C_PreConstruct) == 0x000001, "Wrong size on GamepadCompatibleButton_C_PreConstruct");
static_assert(offsetof(GamepadCompatibleButton_C_PreConstruct, IsDesignTime) == 0x000000, "Member 'GamepadCompatibleButton_C_PreConstruct::IsDesignTime' has a wrong offset!");

// Function GamepadCompatibleButton.GamepadCompatibleButton_C.OnAddedToFocusPath
// 0x0008 (0x0008 - 0x0000)
struct GamepadCompatibleButton_C_OnAddedToFocusPath final
{
public:
	struct FFocusEvent                            InFocusEvent;                                      // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)
};
static_assert(alignof(GamepadCompatibleButton_C_OnAddedToFocusPath) == 0x000004, "Wrong alignment on GamepadCompatibleButton_C_OnAddedToFocusPath");
static_assert(sizeof(GamepadCompatibleButton_C_OnAddedToFocusPath) == 0x000008, "Wrong size on GamepadCompatibleButton_C_OnAddedToFocusPath");
static_assert(offsetof(GamepadCompatibleButton_C_OnAddedToFocusPath, InFocusEvent) == 0x000000, "Member 'GamepadCompatibleButton_C_OnAddedToFocusPath::InFocusEvent' has a wrong offset!");

// Function GamepadCompatibleButton.GamepadCompatibleButton_C.SetMouseToFocus
// 0x0078 (0x0078 - 0x0000)
struct GamepadCompatibleButton_C_SetMouseToFocus final
{
public:
	class APlayerController*                      CallFunc_GetPlayerController_ReturnValue;          // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FGeometry                              CallFunc_GetCachedGeometry_ReturnValue;            // 0x0008(0x0038)(ConstParm, IsPlainOldData, NoDestructor)
	struct FVector2D                              CallFunc_GetAbsoluteSize_ReturnValue;              // 0x0040(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_LocalToViewport_PixelPosition;            // 0x0048(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_LocalToViewport_ViewportPosition;         // 0x0050(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_Multiply_Vector2DFloat_ReturnValue;       // 0x0058(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_Add_Vector2DVector2D_ReturnValue;         // 0x0060(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector2D_X;                          // 0x0068(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector2D_Y;                          // 0x006C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_FTrunc_ReturnValue;                       // 0x0070(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_FTrunc_ReturnValue_1;                     // 0x0074(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(GamepadCompatibleButton_C_SetMouseToFocus) == 0x000008, "Wrong alignment on GamepadCompatibleButton_C_SetMouseToFocus");
static_assert(sizeof(GamepadCompatibleButton_C_SetMouseToFocus) == 0x000078, "Wrong size on GamepadCompatibleButton_C_SetMouseToFocus");
static_assert(offsetof(GamepadCompatibleButton_C_SetMouseToFocus, CallFunc_GetPlayerController_ReturnValue) == 0x000000, "Member 'GamepadCompatibleButton_C_SetMouseToFocus::CallFunc_GetPlayerController_ReturnValue' has a wrong offset!");
static_assert(offsetof(GamepadCompatibleButton_C_SetMouseToFocus, CallFunc_GetCachedGeometry_ReturnValue) == 0x000008, "Member 'GamepadCompatibleButton_C_SetMouseToFocus::CallFunc_GetCachedGeometry_ReturnValue' has a wrong offset!");
static_assert(offsetof(GamepadCompatibleButton_C_SetMouseToFocus, CallFunc_GetAbsoluteSize_ReturnValue) == 0x000040, "Member 'GamepadCompatibleButton_C_SetMouseToFocus::CallFunc_GetAbsoluteSize_ReturnValue' has a wrong offset!");
static_assert(offsetof(GamepadCompatibleButton_C_SetMouseToFocus, CallFunc_LocalToViewport_PixelPosition) == 0x000048, "Member 'GamepadCompatibleButton_C_SetMouseToFocus::CallFunc_LocalToViewport_PixelPosition' has a wrong offset!");
static_assert(offsetof(GamepadCompatibleButton_C_SetMouseToFocus, CallFunc_LocalToViewport_ViewportPosition) == 0x000050, "Member 'GamepadCompatibleButton_C_SetMouseToFocus::CallFunc_LocalToViewport_ViewportPosition' has a wrong offset!");
static_assert(offsetof(GamepadCompatibleButton_C_SetMouseToFocus, CallFunc_Multiply_Vector2DFloat_ReturnValue) == 0x000058, "Member 'GamepadCompatibleButton_C_SetMouseToFocus::CallFunc_Multiply_Vector2DFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(GamepadCompatibleButton_C_SetMouseToFocus, CallFunc_Add_Vector2DVector2D_ReturnValue) == 0x000060, "Member 'GamepadCompatibleButton_C_SetMouseToFocus::CallFunc_Add_Vector2DVector2D_ReturnValue' has a wrong offset!");
static_assert(offsetof(GamepadCompatibleButton_C_SetMouseToFocus, CallFunc_BreakVector2D_X) == 0x000068, "Member 'GamepadCompatibleButton_C_SetMouseToFocus::CallFunc_BreakVector2D_X' has a wrong offset!");
static_assert(offsetof(GamepadCompatibleButton_C_SetMouseToFocus, CallFunc_BreakVector2D_Y) == 0x00006C, "Member 'GamepadCompatibleButton_C_SetMouseToFocus::CallFunc_BreakVector2D_Y' has a wrong offset!");
static_assert(offsetof(GamepadCompatibleButton_C_SetMouseToFocus, CallFunc_FTrunc_ReturnValue) == 0x000070, "Member 'GamepadCompatibleButton_C_SetMouseToFocus::CallFunc_FTrunc_ReturnValue' has a wrong offset!");
static_assert(offsetof(GamepadCompatibleButton_C_SetMouseToFocus, CallFunc_FTrunc_ReturnValue_1) == 0x000074, "Member 'GamepadCompatibleButton_C_SetMouseToFocus::CallFunc_FTrunc_ReturnValue_1' has a wrong offset!");

// Function GamepadCompatibleButton.GamepadCompatibleButton_C.UpdateFocusHandler
// 0x0038 (0x0038 - 0x0000)
struct GamepadCompatibleButton_C_UpdateFocusHandler final
{
public:
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UFocusHandlerWI_C*>              CallFunc_GetAllWidgetsOfClass_FoundWidgets;        // 0x0010(0x0010)(ReferenceParm, ContainsInstancedReference)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UFocusHandlerWI_C*                      CallFunc_Array_Get_Item;                           // 0x0028(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(GamepadCompatibleButton_C_UpdateFocusHandler) == 0x000008, "Wrong alignment on GamepadCompatibleButton_C_UpdateFocusHandler");
static_assert(sizeof(GamepadCompatibleButton_C_UpdateFocusHandler) == 0x000038, "Wrong size on GamepadCompatibleButton_C_UpdateFocusHandler");
static_assert(offsetof(GamepadCompatibleButton_C_UpdateFocusHandler, Temp_int_Array_Index_Variable) == 0x000000, "Member 'GamepadCompatibleButton_C_UpdateFocusHandler::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(GamepadCompatibleButton_C_UpdateFocusHandler, Temp_int_Loop_Counter_Variable) == 0x000004, "Member 'GamepadCompatibleButton_C_UpdateFocusHandler::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(GamepadCompatibleButton_C_UpdateFocusHandler, CallFunc_Add_IntInt_ReturnValue) == 0x000008, "Member 'GamepadCompatibleButton_C_UpdateFocusHandler::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(GamepadCompatibleButton_C_UpdateFocusHandler, CallFunc_GetAllWidgetsOfClass_FoundWidgets) == 0x000010, "Member 'GamepadCompatibleButton_C_UpdateFocusHandler::CallFunc_GetAllWidgetsOfClass_FoundWidgets' has a wrong offset!");
static_assert(offsetof(GamepadCompatibleButton_C_UpdateFocusHandler, CallFunc_Array_Length_ReturnValue) == 0x000020, "Member 'GamepadCompatibleButton_C_UpdateFocusHandler::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(GamepadCompatibleButton_C_UpdateFocusHandler, CallFunc_Array_Get_Item) == 0x000028, "Member 'GamepadCompatibleButton_C_UpdateFocusHandler::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(GamepadCompatibleButton_C_UpdateFocusHandler, CallFunc_Less_IntInt_ReturnValue) == 0x000030, "Member 'GamepadCompatibleButton_C_UpdateFocusHandler::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");

}

