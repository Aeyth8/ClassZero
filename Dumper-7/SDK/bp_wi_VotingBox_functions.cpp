#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: bp_wi_VotingBox

#include "Basic.hpp"

#include "bp_wi_VotingBox_classes.hpp"
#include "bp_wi_VotingBox_parameters.hpp"


namespace SDK
{

// Function bp_wi_VotingBox.bp_wi_VotingBox_C.OnVoteCast__DelegateSignature
// (Public, Delegate, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   VotingOptionIndex                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void Ubp_wi_VotingBox_C::OnVoteCast__DelegateSignature(int32 VotingOptionIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("bp_wi_VotingBox_C", "OnVoteCast__DelegateSignature");

	Params::bp_wi_VotingBox_C_OnVoteCast__DelegateSignature Parms{};

	Parms.VotingOptionIndex = VotingOptionIndex;

	UObject::ProcessEvent(Func, &Parms);
}


// Function bp_wi_VotingBox.bp_wi_VotingBox_C.ExecuteUbergraph_bp_wi_VotingBox
// (Final, UbergraphFunction, HasDefaults)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void Ubp_wi_VotingBox_C::ExecuteUbergraph_bp_wi_VotingBox(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("bp_wi_VotingBox_C", "ExecuteUbergraph_bp_wi_VotingBox");

	Params::bp_wi_VotingBox_C_ExecuteUbergraph_bp_wi_VotingBox Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function bp_wi_VotingBox.bp_wi_VotingBox_C.State_Shut Down Cain?
// (BlueprintCallable, BlueprintEvent)

void Ubp_wi_VotingBox_C::State_Shut_Down_Cain_()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("bp_wi_VotingBox_C", "State_Shut Down Cain?");

	UObject::ProcessEvent(Func, nullptr);
}


// Function bp_wi_VotingBox.bp_wi_VotingBox_C.Anim Blink Description
// (BlueprintCallable, BlueprintEvent)

void Ubp_wi_VotingBox_C::Anim_Blink_Description()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("bp_wi_VotingBox_C", "Anim Blink Description");

	UObject::ProcessEvent(Func, nullptr);
}


// Function bp_wi_VotingBox.bp_wi_VotingBox_C.CountTime
// (BlueprintCallable, BlueprintEvent)

void Ubp_wi_VotingBox_C::CountTime()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("bp_wi_VotingBox_C", "CountTime");

	UObject::ProcessEvent(Func, nullptr);
}


// Function bp_wi_VotingBox.bp_wi_VotingBox_C.HandleSubVotingButtonClicked
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   VotingOptionIndex                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void Ubp_wi_VotingBox_C::HandleSubVotingButtonClicked(int32 VotingOptionIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("bp_wi_VotingBox_C", "HandleSubVotingButtonClicked");

	Params::bp_wi_VotingBox_C_HandleSubVotingButtonClicked Parms{};

	Parms.VotingOptionIndex = VotingOptionIndex;

	UObject::ProcessEvent(Func, &Parms);
}


// Function bp_wi_VotingBox.bp_wi_VotingBox_C.Set Stage
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   Stage                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void Ubp_wi_VotingBox_C::Set_Stage(int32 Stage)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("bp_wi_VotingBox_C", "Set Stage");

	Params::bp_wi_VotingBox_C_Set_Stage Parms{};

	Parms.Stage = Stage;

	UObject::ProcessEvent(Func, &Parms);
}


// Function bp_wi_VotingBox.bp_wi_VotingBox_C.State_Who Should Die
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Only_One_Should_Die                                    (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void Ubp_wi_VotingBox_C::State_Who_Should_Die(const bool Only_One_Should_Die)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("bp_wi_VotingBox_C", "State_Who Should Die");

	Params::bp_wi_VotingBox_C_State_Who_Should_Die Parms{};

	Parms.Only_One_Should_Die = Only_One_Should_Die;

	UObject::ProcessEvent(Func, &Parms);
}


// Function bp_wi_VotingBox.bp_wi_VotingBox_C.Sate_Do You Trust Everyone
// (BlueprintCallable, BlueprintEvent)

void Ubp_wi_VotingBox_C::Sate_Do_You_Trust_Everyone()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("bp_wi_VotingBox_C", "Sate_Do You Trust Everyone");

	UObject::ProcessEvent(Func, nullptr);
}


// Function bp_wi_VotingBox.bp_wi_VotingBox_C.Construct
// (BlueprintCosmetic, Event, Public, BlueprintEvent)

void Ubp_wi_VotingBox_C::Construct()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("bp_wi_VotingBox_C", "Construct");

	UObject::ProcessEvent(Func, nullptr);
}


// Function bp_wi_VotingBox.bp_wi_VotingBox_C.PreConstruct
// (BlueprintCosmetic, Event, Public, BlueprintEvent)
// Parameters:
// bool                                    IsDesignTime                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void Ubp_wi_VotingBox_C::PreConstruct(bool IsDesignTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("bp_wi_VotingBox_C", "PreConstruct");

	Params::bp_wi_VotingBox_C_PreConstruct Parms{};

	Parms.IsDesignTime = IsDesignTime;

	UObject::ProcessEvent(Func, &Parms);
}


// Function bp_wi_VotingBox.bp_wi_VotingBox_C.Set Revealing Log State
// (BlueprintCallable, BlueprintEvent)

void Ubp_wi_VotingBox_C::Set_Revealing_Log_State()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("bp_wi_VotingBox_C", "Set Revealing Log State");

	UObject::ProcessEvent(Func, nullptr);
}


// Function bp_wi_VotingBox.bp_wi_VotingBox_C.State_Which Log To See
// (BlueprintCallable, BlueprintEvent)

void Ubp_wi_VotingBox_C::State_Which_Log_To_See()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("bp_wi_VotingBox_C", "State_Which Log To See");

	UObject::ProcessEvent(Func, nullptr);
}


// Function bp_wi_VotingBox.bp_wi_VotingBox_C.SetHeadline
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// class FText                             New_Headline                                           (BlueprintVisible, BlueprintReadOnly, Parm)

void Ubp_wi_VotingBox_C::SetHeadline(const class FText& New_Headline)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("bp_wi_VotingBox_C", "SetHeadline");

	Params::bp_wi_VotingBox_C_SetHeadline Parms{};

	Parms.New_Headline = std::move(New_Headline);

	UObject::ProcessEvent(Func, &Parms);
}


// Function bp_wi_VotingBox.bp_wi_VotingBox_C.Update
// (HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FString                           New_Headline                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// TArray<class FName>                     New_Voting_Entries                                     (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// bool                                    Play_Pop_Up_Sound                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// E_AirLockVotes                          E_AirLockVotes                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// TArray<class UTextureRenderTarget2D*>   PlayerImages                                           (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// bool                                    OneShouldDie                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void Ubp_wi_VotingBox_C::Update(const class FString& New_Headline, const TArray<class FName>& New_Voting_Entries, bool Play_Pop_Up_Sound, E_AirLockVotes E_AirLockVotes, const TArray<class UTextureRenderTarget2D*>& PlayerImages, bool OneShouldDie)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("bp_wi_VotingBox_C", "Update");

	Params::bp_wi_VotingBox_C_Update Parms{};

	Parms.New_Headline = std::move(New_Headline);
	Parms.New_Voting_Entries = std::move(New_Voting_Entries);
	Parms.Play_Pop_Up_Sound = Play_Pop_Up_Sound;
	Parms.E_AirLockVotes = E_AirLockVotes;
	Parms.PlayerImages = std::move(PlayerImages);
	Parms.OneShouldDie = OneShouldDie;

	UObject::ProcessEvent(Func, &Parms);
}


// Function bp_wi_VotingBox.bp_wi_VotingBox_C.CleanVoteEntries
// (BlueprintCallable, BlueprintEvent)

void Ubp_wi_VotingBox_C::CleanVoteEntries()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("bp_wi_VotingBox_C", "CleanVoteEntries");

	UObject::ProcessEvent(Func, nullptr);
}


// Function bp_wi_VotingBox.bp_wi_VotingBox_C.PlayPopUpSound
// (BlueprintCallable, BlueprintEvent)

void Ubp_wi_VotingBox_C::PlayPopUpSound()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("bp_wi_VotingBox_C", "PlayPopUpSound");

	UObject::ProcessEvent(Func, nullptr);
}


// Function bp_wi_VotingBox.bp_wi_VotingBox_C.Get_Time_Text
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class FText                             ReturnValue                                            (Parm, OutParm, ReturnParm)

class FText Ubp_wi_VotingBox_C::Get_Time_Text()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("bp_wi_VotingBox_C", "Get_Time_Text");

	Params::bp_wi_VotingBox_C_Get_Time_Text Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function bp_wi_VotingBox.bp_wi_VotingBox_C.SetCharacterNameBasedOnCainwoodCharWidget
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void Ubp_wi_VotingBox_C::SetCharacterNameBasedOnCainwoodCharWidget()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("bp_wi_VotingBox_C", "SetCharacterNameBasedOnCainwoodCharWidget");

	UObject::ProcessEvent(Func, nullptr);
}


// Function bp_wi_VotingBox.bp_wi_VotingBox_C.StartCountdown
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   CountdownTime                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void Ubp_wi_VotingBox_C::StartCountdown(float CountdownTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("bp_wi_VotingBox_C", "StartCountdown");

	Params::bp_wi_VotingBox_C_StartCountdown Parms{};

	Parms.CountdownTime = CountdownTime;

	UObject::ProcessEvent(Func, &Parms);
}


// Function bp_wi_VotingBox.bp_wi_VotingBox_C.Countdown
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void Ubp_wi_VotingBox_C::Countdown()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("bp_wi_VotingBox_C", "Countdown");

	UObject::ProcessEvent(Func, nullptr);
}


// Function bp_wi_VotingBox.bp_wi_VotingBox_C.StopCountdown
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void Ubp_wi_VotingBox_C::StopCountdown()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("bp_wi_VotingBox_C", "StopCountdown");

	UObject::ProcessEvent(Func, nullptr);
}

}

