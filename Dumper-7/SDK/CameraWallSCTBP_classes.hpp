#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: CameraWallSCTBP

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "BaseInteractableSCTBP_classes.hpp"
#include "AkAudio_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass CameraWallSCTBP.CameraWallSCTBP_C
// 0x00C0 (0x0310 - 0x0250)
class ACameraWallSCTBP_C final : public ABaseInteractableSCTBP_C
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame_CameraWallSCTBP_C;                  // 0x0250(0x0008)(ZeroConstructor, Transient, DuplicateTransient, UObjectWrapper)
	class UAkComponent*                           Ak;                                                // 0x0258(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneCaptureComponent2D*               SceneCaptureComponent2D;                           // 0x0260(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBoxComponent*                          RenderCollision;                                   // 0x0268(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	uint8                                         ActiveCamera;                                      // 0x0270(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_271[0x7];                                      // 0x0271(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class ASurveilanceCameraSCTBP_C*>      Cameras;                                           // 0x0278(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate)
	uint8                                         Pad_288[0x8];                                      // 0x0288(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             RenderTargetActivator;                             // 0x0290(0x0030)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor)
	bool                                          ExperimentalFullScreen;                            // 0x02C0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2C1[0x3];                                      // 0x02C1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CurrentCamera;                                     // 0x02C4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2C8[0x8];                                      // 0x02C8(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             PictureTransform;                                  // 0x02D0(0x0030)(Edit, BlueprintVisible, Net, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor)
	uint8                                         PreviousCamera;                                    // 0x0300(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsOn;                                              // 0x0301(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)

public:
	void ExecuteUbergraph_CameraWallSCTBP(int32 EntryPoint);
	void Audio_Switch_Camera();
	void TakePictureReroute(const struct FTransform& CaptureTargetTransform);
	void EndFullScreenMulticast(class ACharacter* Character);
	void EndFullScreenReroute(class ACharacter* Character);
	void StartFullScreenMulticast(class ACharacter* Character);
	void StartFullScreenServer(class ACharacter* InteractingCharacter);
	void ReceiveTick(float DeltaSeconds);
	void BndEvt__Interaction_K2Node_ComponentBoundEvent_2_InteractionDelegate__DelegateSignature(const struct FInteractionPayload& Payload);
	void ReceiveBeginPlay();
	void BndEvt__RenderCollision_K2Node_ComponentBoundEvent_1_ComponentEndOverlapSignature__DelegateSignature(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex);
	void BndEvt__RenderCollision_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult);
	void StopLocalRender();
	void StartLocalRender();
	void SwitchCameraServer();
	void InpActEvt_LeftMouseButton_K2Node_InputKeyEvent_0(const struct FKey& Key);
	void InpActEvt_F_K2Node_InputKeyEvent_1(const struct FKey& Key);
	void InpActEvt_A_K2Node_InputKeyEvent_2(const struct FKey& Key);
	void InpActEvt_D_K2Node_InputKeyEvent_3(const struct FKey& Key);
	void UserConstructionScript();
	void OnRep_ActiveCamera();
	void SwitchCamera(bool SetCameraActive);
	void UpdateViewTarget();
	void UpdateViewIndex(int32 Increment);
	void LocalEndFullScreen();
	void ServerEndFullScreen();
	void ServerTakePicture();
	void OnRep_PictureTransform();
	void SetActiveCamera(uint8 Index_0, bool Active);
	void CanShowDot();
	void CanHideDot();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"CameraWallSCTBP_C">();
	}
	static class ACameraWallSCTBP_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ACameraWallSCTBP_C>();
	}
};
static_assert(alignof(ACameraWallSCTBP_C) == 0x000010, "Wrong alignment on ACameraWallSCTBP_C");
static_assert(sizeof(ACameraWallSCTBP_C) == 0x000310, "Wrong size on ACameraWallSCTBP_C");
static_assert(offsetof(ACameraWallSCTBP_C, UberGraphFrame_CameraWallSCTBP_C) == 0x000250, "Member 'ACameraWallSCTBP_C::UberGraphFrame_CameraWallSCTBP_C' has a wrong offset!");
static_assert(offsetof(ACameraWallSCTBP_C, Ak) == 0x000258, "Member 'ACameraWallSCTBP_C::Ak' has a wrong offset!");
static_assert(offsetof(ACameraWallSCTBP_C, SceneCaptureComponent2D) == 0x000260, "Member 'ACameraWallSCTBP_C::SceneCaptureComponent2D' has a wrong offset!");
static_assert(offsetof(ACameraWallSCTBP_C, RenderCollision) == 0x000268, "Member 'ACameraWallSCTBP_C::RenderCollision' has a wrong offset!");
static_assert(offsetof(ACameraWallSCTBP_C, ActiveCamera) == 0x000270, "Member 'ACameraWallSCTBP_C::ActiveCamera' has a wrong offset!");
static_assert(offsetof(ACameraWallSCTBP_C, Cameras) == 0x000278, "Member 'ACameraWallSCTBP_C::Cameras' has a wrong offset!");
static_assert(offsetof(ACameraWallSCTBP_C, RenderTargetActivator) == 0x000290, "Member 'ACameraWallSCTBP_C::RenderTargetActivator' has a wrong offset!");
static_assert(offsetof(ACameraWallSCTBP_C, ExperimentalFullScreen) == 0x0002C0, "Member 'ACameraWallSCTBP_C::ExperimentalFullScreen' has a wrong offset!");
static_assert(offsetof(ACameraWallSCTBP_C, CurrentCamera) == 0x0002C4, "Member 'ACameraWallSCTBP_C::CurrentCamera' has a wrong offset!");
static_assert(offsetof(ACameraWallSCTBP_C, PictureTransform) == 0x0002D0, "Member 'ACameraWallSCTBP_C::PictureTransform' has a wrong offset!");
static_assert(offsetof(ACameraWallSCTBP_C, PreviousCamera) == 0x000300, "Member 'ACameraWallSCTBP_C::PreviousCamera' has a wrong offset!");
static_assert(offsetof(ACameraWallSCTBP_C, IsOn) == 0x000301, "Member 'ACameraWallSCTBP_C::IsOn' has a wrong offset!");

}

