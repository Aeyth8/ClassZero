#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: EmergencyMeetingSCTBP

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "CoreUObject_structs.hpp"
#include "SCT_structs.hpp"
#include "AkAudio_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass EmergencyMeetingSCTBP.EmergencyMeetingSCTBP_C
// 0x0270 (0x0490 - 0x0220)
class AEmergencyMeetingSCTBP_C : public AActor
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0220(0x0008)(ZeroConstructor, Transient, DuplicateTransient, UObjectWrapper)
	class UAkComponent*                           Ak;                                                // 0x0228(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UArrowComponent*                        PlayerPosition6;                                   // 0x0230(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UArrowComponent*                        PlayerPosition5;                                   // 0x0238(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UArrowComponent*                        PlayerPosition4;                                   // 0x0240(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UArrowComponent*                        PlayerPosition3;                                   // 0x0248(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UArrowComponent*                        PlayerPosition2;                                   // 0x0250(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UArrowComponent*                        PlayerPosition1;                                   // 0x0258(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBillboardComponent*                    Billboard;                                         // 0x0260(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBoxComponent*                          WhoStartedMeeting;                                 // 0x0268(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UCameraComponent*                       Camera;                                            // 0x0270(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UEmergencyMeetingWI_C*                  EmergencyVotingWidget;                             // 0x0278(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<bool>                                  TrustVotes;                                        // 0x0280(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	float                                         InfoStageDuration;                                 // 0x0290(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         InfoStageFadeDuration;                             // 0x0294(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          TrustVoteCompleted;                                // 0x0298(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_299[0x7];                                      // 0x0299(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class ACharacter*>                     CharactersVotedFor;                                // 0x02A0(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance)
	bool                                          EliminationVoteInProgress;                         // 0x02B0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          TrustVoteInProgress;                               // 0x02B1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2B2[0x6];                                      // 0x02B2(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class ACharacter*                             VotedOutCharacter;                                 // 0x02B8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class ACharacter*>                     AllAliveCharacters;                                // 0x02C0(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance)
	int32                                         ExpectedVotes;                                     // 0x02D0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         OpeningStatementDuration;                          // 0x02D4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         EliminationVoteDuration;                           // 0x02D8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         TrustVoteDuration;                                 // 0x02DC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         OpenDiscussionDuration;                            // 0x02E0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2E4[0x4];                                      // 0x02E4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FText>                           PlayerWasKilledText;                               // 0x02E8(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<class FText>                           DeadlockedVoteText;                                // 0x02F8(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	bool                                          LastWasDeadlocked;                                 // 0x0308(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_309[0x3];                                      // 0x0309(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         InterviewRoundDuration;                            // 0x030C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         InterviewCounter;                                  // 0x0310(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_314[0xC];                                      // 0x0314(0x000C)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CameraInitialTransform;                            // 0x0320(0x0030)(Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          DebugStart;                                        // 0x0350(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_351[0x7];                                      // 0x0351(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class ACharacter*>                     CurrentVoteOptions;                                // 0x0358(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance)
	uint8                                         Pad_368[0x8];                                      // 0x0368(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             WhoStartedMeetingDetector;                         // 0x0370(0x0030)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor)
	class AAirlockFlushSCTBP_C*                   SendDoomedTo;                                      // 0x03A0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 DoorToOpen;                                        // 0x03A8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         FadeToBlackDuration;                               // 0x03B0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         FadeToBlackTransitionDuration;                     // 0x03B4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         PassengerLogDuration;                              // 0x03B8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         NoPassengerLogDuration;                            // 0x03BC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FText                                   VoteWasSkippedText;                                // 0x03C0(0x0018)(Edit, BlueprintVisible, DisableEditOnInstance)
	class FText                                   TrustVoteSuccessText;                              // 0x03D8(0x0018)(Edit, BlueprintVisible, DisableEditOnInstance)
	class FText                                   TrustVoteFailedText;                               // 0x03F0(0x0018)(Edit, BlueprintVisible, DisableEditOnInstance)
	class FText                                   TrustVoteStartedText;                              // 0x0408(0x0018)(Edit, BlueprintVisible, DisableEditOnInstance)
	class FText                                   MeetingOverText;                                   // 0x0420(0x0018)(Edit, BlueprintVisible, DisableEditOnInstance)
	class FText                                   EliminationVoteStartText;                          // 0x0438(0x0018)(Edit, BlueprintVisible, DisableEditOnInstance)
	int32                                         EndMeetingDuration;                                // 0x0450(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MeetingDuration;                                   // 0x0454(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MeetingEndingDuration;                             // 0x0458(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_45C[0x4];                                      // 0x045C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class ACharacter*>                     MeetingCallers;                                    // 0x0460(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance)
	bool                                          FadeCameraOnMeetingStart;                          // 0x0470(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          IsGoingToSameLevelServerRoom;                      // 0x0471(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_472[0x2];                                      // 0x0472(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         PassengerLogRevealChance;                          // 0x0474(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         SpawnPointMaxSquaredDistanceAllowed;               // 0x0478(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_47C[0x4];                                      // 0x047C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	FMulticastInlineDelegateProperty_             On_EndMeeting;                                     // 0x0480(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)

public:
	void On_EndMeeting__DelegateSignature();
	void ExecuteUbergraph_EmergencyMeetingSCTBP(int32 EntryPoint);
	void StartArtisticFade();
	void TrySettingCamera();
	void OnMatchHasStarted();
	void Audio_No_Player_Was_Doomed();
	void Audio_Player_Was_Doomed();
	void InitiateTrustEndVote(class ACharacter* CharacterVotedOut);
	void InvalidateEndTimer();
	void EndVoteExpired();
	void InitiateResultScreen(class ACharacter* CharacterVotedOut, int32 ExpectedVotes_0);
	void EliminationVoteEnded(class ACharacter* VotedOut);
	void InvalidateMeetingTimer();
	void MeetingExpired();
	void InitiateEliminationVote();
	void MeetingWidgetV2(TArray<class ACharacter*>& CharactersForVote, int32 ExpectedVotes_0, int32 Countdown, const TArray<class ACharacter*>& PassengerLogs, int32 TargetPassengerLog, const struct FPassengerLogInformation& PassengerLogInfo, const TArray<int32>& MeetingCallers_0, int32 LottoSeed);
	void MatchEnded(EEndConditions End_Condition);
	void SetInterviewCamera(class ACharacter* ViewTarget);
	void ReceiveBeginPlay();
	void ForceEndTrust();
	void ForceEndElimination();
	void DisableVotedOutWidget(class ACharacter* VotedOut);
	void Start();
	void EliminationVoteMULTICAST(class ACharacter* VoteFrom, class ACharacter* VoteFor);
	void EliminationVoteSERVER(class ACharacter* VoteComesFrom, class ACharacter* Vote);
	void TrustVoteMULTICAST(bool TrustYes);
	void TrustVoteServer(bool Vote);
	void InitiateEndMeetingMULTICAST();
	void InitiateEndMeeting();
	void InitiateEmergencyMeeting();
	void UserConstructionScript();
	void ResetBetweenVoteVariables();
	void SetupMeetingReferences();
	void GetVoteEligibleCount(int32* VoteEligiblePlayers);
	void CountEliminationVotes(bool* WasDeadlocked, TArray<class ACharacter*>* Deadlocked, class ACharacter** VotedOut);
	class FText NamesToText(TArray<class ACharacter*>& Characters);
	void GetRandomTextFromArray(TArray<class FText>& Array, TArray<class ACharacter*>& Characters, class FText* Result);
	void Remove_Meeting_References();
	void GetEmergencyWidget(bool* IsValid, TArray<class UEmergencyMeetingWI_C*>* EmergencyMeetingWI);
	void SetWidgetActorReferences(TArray<class UEmergencyMeetingWI_C*>& Widgets);
	void SetCameraView(class ACharacter* Target);
	void InvalidateExpirationTimers();
	void FindAnyPassengerLogs(bool* PassengerLogAvailable, TArray<class ACharacter*>* PlayerWithLog, int32* TargetLog, struct FPassengerLogInformation* PassengerLog);
	int32 RandomIntInRange(int32 Min, int32 Max);
	void GetInitiatingCharacters(TArray<class ACharacter*>* Characters);
	void AddMissingEliminationVotes();
	void AttemptToExecutePlayer(class ACharacter* Target);
	void AttemptToMoveToExecution(class ACharacter* Target);
	void AnyPersonoidsAlive(bool* PersonoidAlive);
	void MoveToMeetingPosition(class ACharacter* Character, class UArrowComponent* Target);
	void AttemptToOpenDoor();
	void GetVoteIneligiblePlayers(class UObject* OptionalVotedOut, bool* VoteIneligible);
	void MeetingCallerToIndex(TArray<int32>* MeetingCallersArray);
	void RemoveLightningEffects();
	void HideCertainWidgets();
	void GetCharactersToTeleport(TArray<class ACharacter*>* Characters);
	void GrantScoreToPassedPlayers();
	void GrantScoreForVoting(class ACharacter* VoteComesFrom, class ACharacter* Vote);
	void RemoveAllPassengerLogs();
	void Move_Characters_to_Meeting(TArray<class ACharacter*>& Characters);
	void RotateToMeetingPosition(class ACharacter* Character, class UArrowComponent* Position);
	void BlockModals();
	void RemoveModalBlock();
	void ForceSense();
	void Server_LatentInteractionSuccess(bool InteractingActorIsCharacter, class AActor* InteractingInstigator, class AActor* InteractionFacilitator, bool* Void);
	void InteractReleased(bool InteractingActorIsCharacter, class AActor* InteractingActor, bool* Void);
	void GetCanInteract(bool IsSimulated, bool InteractingActorIsCharacter, class AActor* InteractingActor, bool* CanInteract);
	void InteractPressed(bool InteractingActorIsCharacter, class AActor* InteractingActor, const struct FHitResult& InteractedHitResult, bool* Success);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"EmergencyMeetingSCTBP_C">();
	}
	static class AEmergencyMeetingSCTBP_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<AEmergencyMeetingSCTBP_C>();
	}
};
static_assert(alignof(AEmergencyMeetingSCTBP_C) == 0x000010, "Wrong alignment on AEmergencyMeetingSCTBP_C");
static_assert(sizeof(AEmergencyMeetingSCTBP_C) == 0x000490, "Wrong size on AEmergencyMeetingSCTBP_C");
static_assert(offsetof(AEmergencyMeetingSCTBP_C, UberGraphFrame) == 0x000220, "Member 'AEmergencyMeetingSCTBP_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(AEmergencyMeetingSCTBP_C, Ak) == 0x000228, "Member 'AEmergencyMeetingSCTBP_C::Ak' has a wrong offset!");
static_assert(offsetof(AEmergencyMeetingSCTBP_C, PlayerPosition6) == 0x000230, "Member 'AEmergencyMeetingSCTBP_C::PlayerPosition6' has a wrong offset!");
static_assert(offsetof(AEmergencyMeetingSCTBP_C, PlayerPosition5) == 0x000238, "Member 'AEmergencyMeetingSCTBP_C::PlayerPosition5' has a wrong offset!");
static_assert(offsetof(AEmergencyMeetingSCTBP_C, PlayerPosition4) == 0x000240, "Member 'AEmergencyMeetingSCTBP_C::PlayerPosition4' has a wrong offset!");
static_assert(offsetof(AEmergencyMeetingSCTBP_C, PlayerPosition3) == 0x000248, "Member 'AEmergencyMeetingSCTBP_C::PlayerPosition3' has a wrong offset!");
static_assert(offsetof(AEmergencyMeetingSCTBP_C, PlayerPosition2) == 0x000250, "Member 'AEmergencyMeetingSCTBP_C::PlayerPosition2' has a wrong offset!");
static_assert(offsetof(AEmergencyMeetingSCTBP_C, PlayerPosition1) == 0x000258, "Member 'AEmergencyMeetingSCTBP_C::PlayerPosition1' has a wrong offset!");
static_assert(offsetof(AEmergencyMeetingSCTBP_C, Billboard) == 0x000260, "Member 'AEmergencyMeetingSCTBP_C::Billboard' has a wrong offset!");
static_assert(offsetof(AEmergencyMeetingSCTBP_C, WhoStartedMeeting) == 0x000268, "Member 'AEmergencyMeetingSCTBP_C::WhoStartedMeeting' has a wrong offset!");
static_assert(offsetof(AEmergencyMeetingSCTBP_C, Camera) == 0x000270, "Member 'AEmergencyMeetingSCTBP_C::Camera' has a wrong offset!");
static_assert(offsetof(AEmergencyMeetingSCTBP_C, EmergencyVotingWidget) == 0x000278, "Member 'AEmergencyMeetingSCTBP_C::EmergencyVotingWidget' has a wrong offset!");
static_assert(offsetof(AEmergencyMeetingSCTBP_C, TrustVotes) == 0x000280, "Member 'AEmergencyMeetingSCTBP_C::TrustVotes' has a wrong offset!");
static_assert(offsetof(AEmergencyMeetingSCTBP_C, InfoStageDuration) == 0x000290, "Member 'AEmergencyMeetingSCTBP_C::InfoStageDuration' has a wrong offset!");
static_assert(offsetof(AEmergencyMeetingSCTBP_C, InfoStageFadeDuration) == 0x000294, "Member 'AEmergencyMeetingSCTBP_C::InfoStageFadeDuration' has a wrong offset!");
static_assert(offsetof(AEmergencyMeetingSCTBP_C, TrustVoteCompleted) == 0x000298, "Member 'AEmergencyMeetingSCTBP_C::TrustVoteCompleted' has a wrong offset!");
static_assert(offsetof(AEmergencyMeetingSCTBP_C, CharactersVotedFor) == 0x0002A0, "Member 'AEmergencyMeetingSCTBP_C::CharactersVotedFor' has a wrong offset!");
static_assert(offsetof(AEmergencyMeetingSCTBP_C, EliminationVoteInProgress) == 0x0002B0, "Member 'AEmergencyMeetingSCTBP_C::EliminationVoteInProgress' has a wrong offset!");
static_assert(offsetof(AEmergencyMeetingSCTBP_C, TrustVoteInProgress) == 0x0002B1, "Member 'AEmergencyMeetingSCTBP_C::TrustVoteInProgress' has a wrong offset!");
static_assert(offsetof(AEmergencyMeetingSCTBP_C, VotedOutCharacter) == 0x0002B8, "Member 'AEmergencyMeetingSCTBP_C::VotedOutCharacter' has a wrong offset!");
static_assert(offsetof(AEmergencyMeetingSCTBP_C, AllAliveCharacters) == 0x0002C0, "Member 'AEmergencyMeetingSCTBP_C::AllAliveCharacters' has a wrong offset!");
static_assert(offsetof(AEmergencyMeetingSCTBP_C, ExpectedVotes) == 0x0002D0, "Member 'AEmergencyMeetingSCTBP_C::ExpectedVotes' has a wrong offset!");
static_assert(offsetof(AEmergencyMeetingSCTBP_C, OpeningStatementDuration) == 0x0002D4, "Member 'AEmergencyMeetingSCTBP_C::OpeningStatementDuration' has a wrong offset!");
static_assert(offsetof(AEmergencyMeetingSCTBP_C, EliminationVoteDuration) == 0x0002D8, "Member 'AEmergencyMeetingSCTBP_C::EliminationVoteDuration' has a wrong offset!");
static_assert(offsetof(AEmergencyMeetingSCTBP_C, TrustVoteDuration) == 0x0002DC, "Member 'AEmergencyMeetingSCTBP_C::TrustVoteDuration' has a wrong offset!");
static_assert(offsetof(AEmergencyMeetingSCTBP_C, OpenDiscussionDuration) == 0x0002E0, "Member 'AEmergencyMeetingSCTBP_C::OpenDiscussionDuration' has a wrong offset!");
static_assert(offsetof(AEmergencyMeetingSCTBP_C, PlayerWasKilledText) == 0x0002E8, "Member 'AEmergencyMeetingSCTBP_C::PlayerWasKilledText' has a wrong offset!");
static_assert(offsetof(AEmergencyMeetingSCTBP_C, DeadlockedVoteText) == 0x0002F8, "Member 'AEmergencyMeetingSCTBP_C::DeadlockedVoteText' has a wrong offset!");
static_assert(offsetof(AEmergencyMeetingSCTBP_C, LastWasDeadlocked) == 0x000308, "Member 'AEmergencyMeetingSCTBP_C::LastWasDeadlocked' has a wrong offset!");
static_assert(offsetof(AEmergencyMeetingSCTBP_C, InterviewRoundDuration) == 0x00030C, "Member 'AEmergencyMeetingSCTBP_C::InterviewRoundDuration' has a wrong offset!");
static_assert(offsetof(AEmergencyMeetingSCTBP_C, InterviewCounter) == 0x000310, "Member 'AEmergencyMeetingSCTBP_C::InterviewCounter' has a wrong offset!");
static_assert(offsetof(AEmergencyMeetingSCTBP_C, CameraInitialTransform) == 0x000320, "Member 'AEmergencyMeetingSCTBP_C::CameraInitialTransform' has a wrong offset!");
static_assert(offsetof(AEmergencyMeetingSCTBP_C, DebugStart) == 0x000350, "Member 'AEmergencyMeetingSCTBP_C::DebugStart' has a wrong offset!");
static_assert(offsetof(AEmergencyMeetingSCTBP_C, CurrentVoteOptions) == 0x000358, "Member 'AEmergencyMeetingSCTBP_C::CurrentVoteOptions' has a wrong offset!");
static_assert(offsetof(AEmergencyMeetingSCTBP_C, WhoStartedMeetingDetector) == 0x000370, "Member 'AEmergencyMeetingSCTBP_C::WhoStartedMeetingDetector' has a wrong offset!");
static_assert(offsetof(AEmergencyMeetingSCTBP_C, SendDoomedTo) == 0x0003A0, "Member 'AEmergencyMeetingSCTBP_C::SendDoomedTo' has a wrong offset!");
static_assert(offsetof(AEmergencyMeetingSCTBP_C, DoorToOpen) == 0x0003A8, "Member 'AEmergencyMeetingSCTBP_C::DoorToOpen' has a wrong offset!");
static_assert(offsetof(AEmergencyMeetingSCTBP_C, FadeToBlackDuration) == 0x0003B0, "Member 'AEmergencyMeetingSCTBP_C::FadeToBlackDuration' has a wrong offset!");
static_assert(offsetof(AEmergencyMeetingSCTBP_C, FadeToBlackTransitionDuration) == 0x0003B4, "Member 'AEmergencyMeetingSCTBP_C::FadeToBlackTransitionDuration' has a wrong offset!");
static_assert(offsetof(AEmergencyMeetingSCTBP_C, PassengerLogDuration) == 0x0003B8, "Member 'AEmergencyMeetingSCTBP_C::PassengerLogDuration' has a wrong offset!");
static_assert(offsetof(AEmergencyMeetingSCTBP_C, NoPassengerLogDuration) == 0x0003BC, "Member 'AEmergencyMeetingSCTBP_C::NoPassengerLogDuration' has a wrong offset!");
static_assert(offsetof(AEmergencyMeetingSCTBP_C, VoteWasSkippedText) == 0x0003C0, "Member 'AEmergencyMeetingSCTBP_C::VoteWasSkippedText' has a wrong offset!");
static_assert(offsetof(AEmergencyMeetingSCTBP_C, TrustVoteSuccessText) == 0x0003D8, "Member 'AEmergencyMeetingSCTBP_C::TrustVoteSuccessText' has a wrong offset!");
static_assert(offsetof(AEmergencyMeetingSCTBP_C, TrustVoteFailedText) == 0x0003F0, "Member 'AEmergencyMeetingSCTBP_C::TrustVoteFailedText' has a wrong offset!");
static_assert(offsetof(AEmergencyMeetingSCTBP_C, TrustVoteStartedText) == 0x000408, "Member 'AEmergencyMeetingSCTBP_C::TrustVoteStartedText' has a wrong offset!");
static_assert(offsetof(AEmergencyMeetingSCTBP_C, MeetingOverText) == 0x000420, "Member 'AEmergencyMeetingSCTBP_C::MeetingOverText' has a wrong offset!");
static_assert(offsetof(AEmergencyMeetingSCTBP_C, EliminationVoteStartText) == 0x000438, "Member 'AEmergencyMeetingSCTBP_C::EliminationVoteStartText' has a wrong offset!");
static_assert(offsetof(AEmergencyMeetingSCTBP_C, EndMeetingDuration) == 0x000450, "Member 'AEmergencyMeetingSCTBP_C::EndMeetingDuration' has a wrong offset!");
static_assert(offsetof(AEmergencyMeetingSCTBP_C, MeetingDuration) == 0x000454, "Member 'AEmergencyMeetingSCTBP_C::MeetingDuration' has a wrong offset!");
static_assert(offsetof(AEmergencyMeetingSCTBP_C, MeetingEndingDuration) == 0x000458, "Member 'AEmergencyMeetingSCTBP_C::MeetingEndingDuration' has a wrong offset!");
static_assert(offsetof(AEmergencyMeetingSCTBP_C, MeetingCallers) == 0x000460, "Member 'AEmergencyMeetingSCTBP_C::MeetingCallers' has a wrong offset!");
static_assert(offsetof(AEmergencyMeetingSCTBP_C, FadeCameraOnMeetingStart) == 0x000470, "Member 'AEmergencyMeetingSCTBP_C::FadeCameraOnMeetingStart' has a wrong offset!");
static_assert(offsetof(AEmergencyMeetingSCTBP_C, IsGoingToSameLevelServerRoom) == 0x000471, "Member 'AEmergencyMeetingSCTBP_C::IsGoingToSameLevelServerRoom' has a wrong offset!");
static_assert(offsetof(AEmergencyMeetingSCTBP_C, PassengerLogRevealChance) == 0x000474, "Member 'AEmergencyMeetingSCTBP_C::PassengerLogRevealChance' has a wrong offset!");
static_assert(offsetof(AEmergencyMeetingSCTBP_C, SpawnPointMaxSquaredDistanceAllowed) == 0x000478, "Member 'AEmergencyMeetingSCTBP_C::SpawnPointMaxSquaredDistanceAllowed' has a wrong offset!");
static_assert(offsetof(AEmergencyMeetingSCTBP_C, On_EndMeeting) == 0x000480, "Member 'AEmergencyMeetingSCTBP_C::On_EndMeeting' has a wrong offset!");

}

