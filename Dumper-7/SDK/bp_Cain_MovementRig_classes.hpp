#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: bp_Cain_MovementRig

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "AkAudio_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass bp_Cain_MovementRig.bp_Cain_MovementRig_C
// 0x0118 (0x0338 - 0x0220)
class Abp_Cain_MovementRig_C final : public AActor
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0220(0x0008)(ZeroConstructor, Transient, DuplicateTransient, UObjectWrapper)
	class UAkComponent*                           Ak;                                                // 0x0228(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   StaticMesh1;                                       // 0x0230(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UPointLightComponent*                   PointLight;                                        // 0x0238(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UPointLightComponent*                   PointLight1;                                       // 0x0240(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USpotLightComponent*                    SpotLight;                                         // 0x0248(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   StaticMesh;                                        // 0x0250(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USplineComponent*                       Spline;                                            // 0x0258(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UInstancedStaticMeshComponent*          ServerWall;                                        // 0x0260(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   PillarLeft;                                        // 0x0268(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   PulleyLeft;                                        // 0x0270(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   PulleyRight;                                       // 0x0278(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   PillarRight;                                       // 0x0280(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        RotationPoint;                                     // 0x0288(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        HeightPoint;                                       // 0x0290(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   TerminalMesh;                                      // 0x0298(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        PivotPoint;                                        // 0x02A0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        DefaultSceneRoot;                                  // 0x02A8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	float                                         ChangeColumn_Percent_CBAE832C49F349DD41DB5DAB7D68CEC2; // 0x02B0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            ChangeColumn__Direction_CBAE832C49F349DD41DB5DAB7D68CEC2; // 0x02B4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	uint8                                         Pad_2B5[0x3];                                      // 0x02B5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     ChangeColumn;                                      // 0x02B8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ChangeRow_Percent_3E03E17646CEC697BB2074A179F8C946; // 0x02C0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            ChangeRow__Direction_3E03E17646CEC697BB2074A179F8C946; // 0x02C4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	uint8                                         Pad_2C5[0x3];                                      // 0x02C5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     ChangeRow;                                         // 0x02C8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MovementRadius;                                    // 0x02D0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         RotationStep;                                      // 0x02D4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         RotationLimit;                                     // 0x02D8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         StartHeight;                                       // 0x02DC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         TargetHeight;                                      // 0x02E0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         StartRotation;                                     // 0x02E4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         TargetRotation;                                    // 0x02E8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Seed;                                              // 0x02EC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         HeightStep;                                        // 0x02F0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         HeightLimit;                                       // 0x02F4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         WallOffsetDepth;                                   // 0x02F8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         WallOffsetHeight;                                  // 0x02FC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         PillarOffsetRadius;                                // 0x0300(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         PillarOffsetHeight;                                // 0x0304(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         AnimationSpeedRotate;                              // 0x0308(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         AnimationDurationHeight;                           // 0x030C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         SubD;                                              // 0x0310(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ConstructRail;                                     // 0x0314(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_315[0x3];                                      // 0x0315(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         RailRadiusAdjust;                                  // 0x0318(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ForcedMovement;                                    // 0x031C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          StayOnSameHeight;                                  // 0x031D(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_31E[0x2];                                      // 0x031E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class UAkRtpc*                                RTPC_CainTerminalSpeed;                            // 0x0320(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               MI_CAINTerminal;                                   // 0x0328(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               MI_ServerWall;                                     // 0x0330(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_bp_Cain_MovementRig(int32 EntryPoint);
	void Audio_Stop_Alarm();
	void Audio_Start_Alarm();
	void ReceiveTick(float DeltaSeconds);
	void Audio_Stop_Move_Vertical();
	void Audio_Start_Move_Vertical();
	void Audio_Stop_Move_Horizontal();
	void Audio_Start_Move_Horizontal();
	void StopRotationMovement();
	void StopHeightMovement();
	void MoveToTerminalRotation();
	void MoveToTerminalHeight(bool ForceMovement, int32 X, int32 Y);
	void ReceiveBeginPlay();
	void ChangeColumn__UpdateFunc();
	void ChangeColumn__FinishedFunc();
	void ChangeRow__UpdateFunc();
	void ChangeRow__FinishedFunc();
	void UserConstructionScript();
	void SetTimelineDuration(class UTimelineComponent* Target, float Duration);
	void DrawDebugLines();
	void SetMovementTarget(float RotationTarget, float HeightTarget);
	float RandomMovementRotation();
	float RandomMovementHeight();
	float ToColumnRotation(int32 Column);
	float ToRowHeight(int32 A);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"bp_Cain_MovementRig_C">();
	}
	static class Abp_Cain_MovementRig_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<Abp_Cain_MovementRig_C>();
	}
};
static_assert(alignof(Abp_Cain_MovementRig_C) == 0x000008, "Wrong alignment on Abp_Cain_MovementRig_C");
static_assert(sizeof(Abp_Cain_MovementRig_C) == 0x000338, "Wrong size on Abp_Cain_MovementRig_C");
static_assert(offsetof(Abp_Cain_MovementRig_C, UberGraphFrame) == 0x000220, "Member 'Abp_Cain_MovementRig_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(Abp_Cain_MovementRig_C, Ak) == 0x000228, "Member 'Abp_Cain_MovementRig_C::Ak' has a wrong offset!");
static_assert(offsetof(Abp_Cain_MovementRig_C, StaticMesh1) == 0x000230, "Member 'Abp_Cain_MovementRig_C::StaticMesh1' has a wrong offset!");
static_assert(offsetof(Abp_Cain_MovementRig_C, PointLight) == 0x000238, "Member 'Abp_Cain_MovementRig_C::PointLight' has a wrong offset!");
static_assert(offsetof(Abp_Cain_MovementRig_C, PointLight1) == 0x000240, "Member 'Abp_Cain_MovementRig_C::PointLight1' has a wrong offset!");
static_assert(offsetof(Abp_Cain_MovementRig_C, SpotLight) == 0x000248, "Member 'Abp_Cain_MovementRig_C::SpotLight' has a wrong offset!");
static_assert(offsetof(Abp_Cain_MovementRig_C, StaticMesh) == 0x000250, "Member 'Abp_Cain_MovementRig_C::StaticMesh' has a wrong offset!");
static_assert(offsetof(Abp_Cain_MovementRig_C, Spline) == 0x000258, "Member 'Abp_Cain_MovementRig_C::Spline' has a wrong offset!");
static_assert(offsetof(Abp_Cain_MovementRig_C, ServerWall) == 0x000260, "Member 'Abp_Cain_MovementRig_C::ServerWall' has a wrong offset!");
static_assert(offsetof(Abp_Cain_MovementRig_C, PillarLeft) == 0x000268, "Member 'Abp_Cain_MovementRig_C::PillarLeft' has a wrong offset!");
static_assert(offsetof(Abp_Cain_MovementRig_C, PulleyLeft) == 0x000270, "Member 'Abp_Cain_MovementRig_C::PulleyLeft' has a wrong offset!");
static_assert(offsetof(Abp_Cain_MovementRig_C, PulleyRight) == 0x000278, "Member 'Abp_Cain_MovementRig_C::PulleyRight' has a wrong offset!");
static_assert(offsetof(Abp_Cain_MovementRig_C, PillarRight) == 0x000280, "Member 'Abp_Cain_MovementRig_C::PillarRight' has a wrong offset!");
static_assert(offsetof(Abp_Cain_MovementRig_C, RotationPoint) == 0x000288, "Member 'Abp_Cain_MovementRig_C::RotationPoint' has a wrong offset!");
static_assert(offsetof(Abp_Cain_MovementRig_C, HeightPoint) == 0x000290, "Member 'Abp_Cain_MovementRig_C::HeightPoint' has a wrong offset!");
static_assert(offsetof(Abp_Cain_MovementRig_C, TerminalMesh) == 0x000298, "Member 'Abp_Cain_MovementRig_C::TerminalMesh' has a wrong offset!");
static_assert(offsetof(Abp_Cain_MovementRig_C, PivotPoint) == 0x0002A0, "Member 'Abp_Cain_MovementRig_C::PivotPoint' has a wrong offset!");
static_assert(offsetof(Abp_Cain_MovementRig_C, DefaultSceneRoot) == 0x0002A8, "Member 'Abp_Cain_MovementRig_C::DefaultSceneRoot' has a wrong offset!");
static_assert(offsetof(Abp_Cain_MovementRig_C, ChangeColumn_Percent_CBAE832C49F349DD41DB5DAB7D68CEC2) == 0x0002B0, "Member 'Abp_Cain_MovementRig_C::ChangeColumn_Percent_CBAE832C49F349DD41DB5DAB7D68CEC2' has a wrong offset!");
static_assert(offsetof(Abp_Cain_MovementRig_C, ChangeColumn__Direction_CBAE832C49F349DD41DB5DAB7D68CEC2) == 0x0002B4, "Member 'Abp_Cain_MovementRig_C::ChangeColumn__Direction_CBAE832C49F349DD41DB5DAB7D68CEC2' has a wrong offset!");
static_assert(offsetof(Abp_Cain_MovementRig_C, ChangeColumn) == 0x0002B8, "Member 'Abp_Cain_MovementRig_C::ChangeColumn' has a wrong offset!");
static_assert(offsetof(Abp_Cain_MovementRig_C, ChangeRow_Percent_3E03E17646CEC697BB2074A179F8C946) == 0x0002C0, "Member 'Abp_Cain_MovementRig_C::ChangeRow_Percent_3E03E17646CEC697BB2074A179F8C946' has a wrong offset!");
static_assert(offsetof(Abp_Cain_MovementRig_C, ChangeRow__Direction_3E03E17646CEC697BB2074A179F8C946) == 0x0002C4, "Member 'Abp_Cain_MovementRig_C::ChangeRow__Direction_3E03E17646CEC697BB2074A179F8C946' has a wrong offset!");
static_assert(offsetof(Abp_Cain_MovementRig_C, ChangeRow) == 0x0002C8, "Member 'Abp_Cain_MovementRig_C::ChangeRow' has a wrong offset!");
static_assert(offsetof(Abp_Cain_MovementRig_C, MovementRadius) == 0x0002D0, "Member 'Abp_Cain_MovementRig_C::MovementRadius' has a wrong offset!");
static_assert(offsetof(Abp_Cain_MovementRig_C, RotationStep) == 0x0002D4, "Member 'Abp_Cain_MovementRig_C::RotationStep' has a wrong offset!");
static_assert(offsetof(Abp_Cain_MovementRig_C, RotationLimit) == 0x0002D8, "Member 'Abp_Cain_MovementRig_C::RotationLimit' has a wrong offset!");
static_assert(offsetof(Abp_Cain_MovementRig_C, StartHeight) == 0x0002DC, "Member 'Abp_Cain_MovementRig_C::StartHeight' has a wrong offset!");
static_assert(offsetof(Abp_Cain_MovementRig_C, TargetHeight) == 0x0002E0, "Member 'Abp_Cain_MovementRig_C::TargetHeight' has a wrong offset!");
static_assert(offsetof(Abp_Cain_MovementRig_C, StartRotation) == 0x0002E4, "Member 'Abp_Cain_MovementRig_C::StartRotation' has a wrong offset!");
static_assert(offsetof(Abp_Cain_MovementRig_C, TargetRotation) == 0x0002E8, "Member 'Abp_Cain_MovementRig_C::TargetRotation' has a wrong offset!");
static_assert(offsetof(Abp_Cain_MovementRig_C, Seed) == 0x0002EC, "Member 'Abp_Cain_MovementRig_C::Seed' has a wrong offset!");
static_assert(offsetof(Abp_Cain_MovementRig_C, HeightStep) == 0x0002F0, "Member 'Abp_Cain_MovementRig_C::HeightStep' has a wrong offset!");
static_assert(offsetof(Abp_Cain_MovementRig_C, HeightLimit) == 0x0002F4, "Member 'Abp_Cain_MovementRig_C::HeightLimit' has a wrong offset!");
static_assert(offsetof(Abp_Cain_MovementRig_C, WallOffsetDepth) == 0x0002F8, "Member 'Abp_Cain_MovementRig_C::WallOffsetDepth' has a wrong offset!");
static_assert(offsetof(Abp_Cain_MovementRig_C, WallOffsetHeight) == 0x0002FC, "Member 'Abp_Cain_MovementRig_C::WallOffsetHeight' has a wrong offset!");
static_assert(offsetof(Abp_Cain_MovementRig_C, PillarOffsetRadius) == 0x000300, "Member 'Abp_Cain_MovementRig_C::PillarOffsetRadius' has a wrong offset!");
static_assert(offsetof(Abp_Cain_MovementRig_C, PillarOffsetHeight) == 0x000304, "Member 'Abp_Cain_MovementRig_C::PillarOffsetHeight' has a wrong offset!");
static_assert(offsetof(Abp_Cain_MovementRig_C, AnimationSpeedRotate) == 0x000308, "Member 'Abp_Cain_MovementRig_C::AnimationSpeedRotate' has a wrong offset!");
static_assert(offsetof(Abp_Cain_MovementRig_C, AnimationDurationHeight) == 0x00030C, "Member 'Abp_Cain_MovementRig_C::AnimationDurationHeight' has a wrong offset!");
static_assert(offsetof(Abp_Cain_MovementRig_C, SubD) == 0x000310, "Member 'Abp_Cain_MovementRig_C::SubD' has a wrong offset!");
static_assert(offsetof(Abp_Cain_MovementRig_C, ConstructRail) == 0x000314, "Member 'Abp_Cain_MovementRig_C::ConstructRail' has a wrong offset!");
static_assert(offsetof(Abp_Cain_MovementRig_C, RailRadiusAdjust) == 0x000318, "Member 'Abp_Cain_MovementRig_C::RailRadiusAdjust' has a wrong offset!");
static_assert(offsetof(Abp_Cain_MovementRig_C, ForcedMovement) == 0x00031C, "Member 'Abp_Cain_MovementRig_C::ForcedMovement' has a wrong offset!");
static_assert(offsetof(Abp_Cain_MovementRig_C, StayOnSameHeight) == 0x00031D, "Member 'Abp_Cain_MovementRig_C::StayOnSameHeight' has a wrong offset!");
static_assert(offsetof(Abp_Cain_MovementRig_C, RTPC_CainTerminalSpeed) == 0x000320, "Member 'Abp_Cain_MovementRig_C::RTPC_CainTerminalSpeed' has a wrong offset!");
static_assert(offsetof(Abp_Cain_MovementRig_C, MI_CAINTerminal) == 0x000328, "Member 'Abp_Cain_MovementRig_C::MI_CAINTerminal' has a wrong offset!");
static_assert(offsetof(Abp_Cain_MovementRig_C, MI_ServerWall) == 0x000330, "Member 'Abp_Cain_MovementRig_C::MI_ServerWall' has a wrong offset!");

}

