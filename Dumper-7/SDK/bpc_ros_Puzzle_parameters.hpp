#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: bpc_ros_Puzzle

#include "Basic.hpp"


namespace SDK::Params
{

// Function bpc_ros_Puzzle.bpc_ros_Puzzle_C.ExecuteUbergraph_bpc_ros_Puzzle
// 0x0058 (0x0058 - 0x0000)
struct bpc_ros_Puzzle_C_ExecuteUbergraph_bpc_ros_Puzzle final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                K2Node_CustomEvent_CabinScreen_1;                  // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class APlayerState*                           K2Node_CustomEvent_SolvingPlayerPlayerState_1;     // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UObject*                                K2Node_CustomEvent_CabinScreen;                    // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class APlayerState*                           K2Node_CustomEvent_SolvingPlayerPlayerState;       // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TScriptInterface<class IIPuzzleSolved_C>      K2Node_DynamicCast_AsIPuzzle_Solved;               // 0x0028(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IIPuzzleSolved_C>      K2Node_DynamicCast_AsIPuzzle_Solved_1;             // 0x0040(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x0050(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(bpc_ros_Puzzle_C_ExecuteUbergraph_bpc_ros_Puzzle) == 0x000008, "Wrong alignment on bpc_ros_Puzzle_C_ExecuteUbergraph_bpc_ros_Puzzle");
static_assert(sizeof(bpc_ros_Puzzle_C_ExecuteUbergraph_bpc_ros_Puzzle) == 0x000058, "Wrong size on bpc_ros_Puzzle_C_ExecuteUbergraph_bpc_ros_Puzzle");
static_assert(offsetof(bpc_ros_Puzzle_C_ExecuteUbergraph_bpc_ros_Puzzle, EntryPoint) == 0x000000, "Member 'bpc_ros_Puzzle_C_ExecuteUbergraph_bpc_ros_Puzzle::EntryPoint' has a wrong offset!");
static_assert(offsetof(bpc_ros_Puzzle_C_ExecuteUbergraph_bpc_ros_Puzzle, K2Node_CustomEvent_CabinScreen_1) == 0x000008, "Member 'bpc_ros_Puzzle_C_ExecuteUbergraph_bpc_ros_Puzzle::K2Node_CustomEvent_CabinScreen_1' has a wrong offset!");
static_assert(offsetof(bpc_ros_Puzzle_C_ExecuteUbergraph_bpc_ros_Puzzle, K2Node_CustomEvent_SolvingPlayerPlayerState_1) == 0x000010, "Member 'bpc_ros_Puzzle_C_ExecuteUbergraph_bpc_ros_Puzzle::K2Node_CustomEvent_SolvingPlayerPlayerState_1' has a wrong offset!");
static_assert(offsetof(bpc_ros_Puzzle_C_ExecuteUbergraph_bpc_ros_Puzzle, K2Node_CustomEvent_CabinScreen) == 0x000018, "Member 'bpc_ros_Puzzle_C_ExecuteUbergraph_bpc_ros_Puzzle::K2Node_CustomEvent_CabinScreen' has a wrong offset!");
static_assert(offsetof(bpc_ros_Puzzle_C_ExecuteUbergraph_bpc_ros_Puzzle, K2Node_CustomEvent_SolvingPlayerPlayerState) == 0x000020, "Member 'bpc_ros_Puzzle_C_ExecuteUbergraph_bpc_ros_Puzzle::K2Node_CustomEvent_SolvingPlayerPlayerState' has a wrong offset!");
static_assert(offsetof(bpc_ros_Puzzle_C_ExecuteUbergraph_bpc_ros_Puzzle, K2Node_DynamicCast_AsIPuzzle_Solved) == 0x000028, "Member 'bpc_ros_Puzzle_C_ExecuteUbergraph_bpc_ros_Puzzle::K2Node_DynamicCast_AsIPuzzle_Solved' has a wrong offset!");
static_assert(offsetof(bpc_ros_Puzzle_C_ExecuteUbergraph_bpc_ros_Puzzle, K2Node_DynamicCast_bSuccess) == 0x000038, "Member 'bpc_ros_Puzzle_C_ExecuteUbergraph_bpc_ros_Puzzle::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(bpc_ros_Puzzle_C_ExecuteUbergraph_bpc_ros_Puzzle, K2Node_DynamicCast_AsIPuzzle_Solved_1) == 0x000040, "Member 'bpc_ros_Puzzle_C_ExecuteUbergraph_bpc_ros_Puzzle::K2Node_DynamicCast_AsIPuzzle_Solved_1' has a wrong offset!");
static_assert(offsetof(bpc_ros_Puzzle_C_ExecuteUbergraph_bpc_ros_Puzzle, K2Node_DynamicCast_bSuccess_1) == 0x000050, "Member 'bpc_ros_Puzzle_C_ExecuteUbergraph_bpc_ros_Puzzle::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");

// Function bpc_ros_Puzzle.bpc_ros_Puzzle_C.Server_SolvedIncorrectly
// 0x0010 (0x0010 - 0x0000)
struct bpc_ros_Puzzle_C_Server_SolvedIncorrectly final
{
public:
	class UObject*                                CabinScreen;                                       // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class APlayerState*                           SolvingPlayerPlayerState;                          // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(bpc_ros_Puzzle_C_Server_SolvedIncorrectly) == 0x000008, "Wrong alignment on bpc_ros_Puzzle_C_Server_SolvedIncorrectly");
static_assert(sizeof(bpc_ros_Puzzle_C_Server_SolvedIncorrectly) == 0x000010, "Wrong size on bpc_ros_Puzzle_C_Server_SolvedIncorrectly");
static_assert(offsetof(bpc_ros_Puzzle_C_Server_SolvedIncorrectly, CabinScreen) == 0x000000, "Member 'bpc_ros_Puzzle_C_Server_SolvedIncorrectly::CabinScreen' has a wrong offset!");
static_assert(offsetof(bpc_ros_Puzzle_C_Server_SolvedIncorrectly, SolvingPlayerPlayerState) == 0x000008, "Member 'bpc_ros_Puzzle_C_Server_SolvedIncorrectly::SolvingPlayerPlayerState' has a wrong offset!");

// Function bpc_ros_Puzzle.bpc_ros_Puzzle_C.Server_SolvedCorrectly
// 0x0010 (0x0010 - 0x0000)
struct bpc_ros_Puzzle_C_Server_SolvedCorrectly final
{
public:
	class UObject*                                CabinScreen;                                       // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class APlayerState*                           SolvingPlayerPlayerState;                          // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(bpc_ros_Puzzle_C_Server_SolvedCorrectly) == 0x000008, "Wrong alignment on bpc_ros_Puzzle_C_Server_SolvedCorrectly");
static_assert(sizeof(bpc_ros_Puzzle_C_Server_SolvedCorrectly) == 0x000010, "Wrong size on bpc_ros_Puzzle_C_Server_SolvedCorrectly");
static_assert(offsetof(bpc_ros_Puzzle_C_Server_SolvedCorrectly, CabinScreen) == 0x000000, "Member 'bpc_ros_Puzzle_C_Server_SolvedCorrectly::CabinScreen' has a wrong offset!");
static_assert(offsetof(bpc_ros_Puzzle_C_Server_SolvedCorrectly, SolvingPlayerPlayerState) == 0x000008, "Member 'bpc_ros_Puzzle_C_Server_SolvedCorrectly::SolvingPlayerPlayerState' has a wrong offset!");

}

