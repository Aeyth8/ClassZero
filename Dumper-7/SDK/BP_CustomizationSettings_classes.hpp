#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_CustomizationSettings

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "SCT_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_CustomizationSettings.BP_CustomizationSettings_C
// 0x0360 (0x0580 - 0x0220)
class ABP_CustomizationSettings_C : public AActor
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0220(0x0008)(ZeroConstructor, Transient, DuplicateTransient, UObjectWrapper)
	class USceneComponent*                        DefaultSceneRoot;                                  // 0x0228(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	struct FFCTCloudCustomizationGender           CurrentCloudCustomizationGender;                   // 0x0230(0x00B0)(Edit, BlueprintVisible)
	struct FFCTCloudCustomizationGender           TempCloudCustomizationGender;                      // 0x02E0(0x00B0)(Edit, BlueprintVisible)
	class USkeletalMeshComponent*                 LegsComponent;                                     // 0x0390(0x0008)(Edit, BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	int32                                         HeadEntitlementsBegin;                             // 0x0398(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         HeadEntitlementsEnd;                               // 0x039C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         BodyEntitlementsBegin;                             // 0x03A0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         BodyEntitlementsEnd;                               // 0x03A4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         LegsEntitlementsBegin;                             // 0x03A8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         LegsEntitlementsEnd;                               // 0x03AC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         FeetEntitlementsBegin;                             // 0x03B0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         FeetEntitlementsEnd;                               // 0x03B4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TMap<EPlayerCustomizationType, int32>         EntitlementEndPositions;                           // 0x03B8(0x0050)(Edit, BlueprintVisible)
	TMap<EPlayerCustomizationType, int32>         EntitlementBeginPositions;                         // 0x0408(0x0050)(Edit, BlueprintVisible)
	class USkeletalMeshComponent*                 FeetComponent;                                     // 0x0458(0x0008)(Edit, BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	struct FFCTCloudCustomizationGender           PreviewCloudCustomizationGender;                   // 0x0460(0x00B0)(Edit, BlueprintVisible)
	TArray<class FString>                         BodyItems;                                         // 0x0510(0x0010)(Edit, BlueprintVisible)
	TArray<class FString>                         HeadItems;                                         // 0x0520(0x0010)(Edit, BlueprintVisible)
	TArray<class FString>                         LegItems;                                          // 0x0530(0x0010)(Edit, BlueprintVisible)
	TArray<class FString>                         FeetItems;                                         // 0x0540(0x0010)(Edit, BlueprintVisible)
	TArray<class FString>                         EyewearItems;                                      // 0x0550(0x0010)(Edit, BlueprintVisible)
	TArray<class FString>                         AccessoryItems;                                    // 0x0560(0x0010)(Edit, BlueprintVisible)
	TArray<class FString>                         FacialHairItems;                                   // 0x0570(0x0010)(Edit, BlueprintVisible)

public:
	void ExecuteUbergraph_BP_CustomizationSettings(int32 EntryPoint);
	void ReceiveBeginPlay();
	void OnSuccess_9E6F33F14E3462DDFBFE84B52FBABDE1(const struct FAccelByteModelsEntitlementPagingSlicedResult& Entitlements, int32 Code, const class FString& Message);
	void OnFail_9E6F33F14E3462DDFBFE84B52FBABDE1(int32 Code, const class FString& Message);
	void GetHeadItemFromDT(const class FString& TableKey, struct FPlayerCustomizationItemTableRow* Item);
	void GetBodyItemFromDT(const class FString& TableKey, struct FPlayerCustomizationItemTableRow* Item);
	void GetLegsItemFromDT(const class FString& TableKey, struct FPlayerCustomizationItemTableRow* Item);
	void Get_Category_DTRow_Names(EPlayerCustomizationType Type, TArray<class FName>* RowNames);
	void GetFeetItemFromDT(const class FString& TableKey, struct FPlayerCustomizationItemTableRow* Item);
	void GetFacialHairItemFromDT(const class FString& TableKey, struct FPlayerCustomizationItemTableRow* Item);
	void GetSkinColorFromDT(const class FString& RowName, struct FPlayerCustomizationColorMaterial* OutRow);
	void GetEyewearItemFromDT(const class FString& TableKey, struct FPlayerCustomizationItemTableRow* Item);
	void GetAccessoryItemFromDT(const class FString& TableKey, struct FPlayerCustomizationItemTableRow* Item);
	void GetActiveCustomizationMasks(TMap<class FString, class UTexture2D*>* OutMasks, bool* DoMaskLegs, bool* bDoMaskFeet);
	void GetEyeColorFromDT(const class FString& RowName, struct FPlayerCustomizationColorMaterial* Out_Row);
	void GetPresetFromDT(const class FString& RowName, struct FPlayerCustomizationPreset* OutRow);
	void Get_Current_Item_by_Category(EPlayerCustomizationType Type, struct FPlayerCustomizationItemTableRow* Item, class FString* RowName);
	void InitDefaultConfig(EPlayerCustomizationGender Gender);
	void GetHairColorFromDT(const class FString& RowName, struct FPlayerCustomizationColor* Out_Row);
	void InitCurrentConfig(const struct FFCTCloudCustomizationGender& GenderConfig);
	void Get_Eye_Color_Info(TArray<class FName>* OutRowNames, class UDataTable** DataTable, class FString* Selected);
	void GetSkinColorInfo(TArray<class FName>* OutRowNames, class UDataTable** DataTable, class FString* Selected);
	void GetHairColorInfo(TArray<class FName>* OutRowNames, class UDataTable** DataTable, class FString* Selected);
	void GetPresetInfo(TArray<class FName>* OutRowNames, class UDataTable** DataTable, class FString* Selected);
	void GetCurrentEyeColor(struct FPlayerCustomizationColorMaterial* Out_Row);
	void ConfirmGenderSettings(struct FFCTCloudCustomizationGender* UpdatedSetting);
	void RevertGenderSettings();
	void Apply_Preset_to_Character(const class FString& RowName, class USkeletalMeshComponent* Character);
	void ApplyItemToCharacter(EPlayerCustomizationType Type, const class FString& RowName, class USkeletalMeshComponent* SkeletalMeshComponent);
	void ApplyFullCustomization(class USkeletalMeshComponent* SkeletalMesh, class USkeletalMeshComponent* HeadMesh, class USkeletalMeshComponent* BodyMesh, class USkeletalMeshComponent* LegsMesh, class USkeletalMeshComponent* FeetMesh, class USkeletalMeshComponent* EyewearMesh, class USkeletalMeshComponent* AccessoryMesh, class USkeletalMeshComponent* FacialHairMesh, bool SetCurrent);
	void ApplyEyeColorToCharacter(const class FString& RowName, class USkeletalMeshComponent* Character);
	void ApplySkinColorToCharacter(const class FString& RowName, class USkeletalMeshComponent* Character);
	void ApplyCustomizationToPreviewer(class ACharacterPreviewerSCTBP_C* Character, bool SetCurrent);
	void ApplyCustomizationToGameCharacter(class ACharacterSCTBP_C* Character);
	void RefreshMasks(class USkeletalMeshComponent* CharacterMesh, bool Preview, bool* MaskLegs, bool* MaskFeet);
	void GetItemByCategory(EPlayerCustomizationType Type, const class FString& Table_Key, struct FPlayerCustomizationItemTableRow* Item, class FString* MaskName);
	void ApplyHairColorToCharacter(const class FString& RowName, class USkeletalMeshComponent* Head);
	void Get_Audio_Event_by_Category(EPlayerCustomizationType Type, TArray<class UAkAudioEvent*>* OutAudioEvent);
	void GetGender(EPlayerCustomizationGender* Gender);
	void Get_Mask_Feet(bool bBodyMasksFeet, bool bLegsMasksFeet, bool* bDoMaskFeet);
	void Mask_Character_Mesh_Component(class USkinnedMeshComponent* Mesh, class UMaterialInstanceDynamic* MaterialInstance, class FName MaskName);
	void UnmaskCharacterMeshComponent(const struct FPlayerCustomizationItemTableRow& PlayerCustomizationItemTableRow, class UMeshComponent* Mesh, class UMaterialInstanceDynamic* MaterialInstance, class UTexture* Mask, class FName MaskName);
	void CreateEntitlementRange(EPlayerCustomizationType Type);
	void GetActivePreviewMasks(TMap<class FString, class UTexture2D*>* OutMasks, bool* DoMaskLegs, bool* bDoMaskFeet);
	void InitializeItemList(TArray<class FString>& ItemList, TArray<struct FAccelByteModelsEntitlementInfo>& UnlockedEntitlements, class UDataTable* DataTable);
	void UserOwnsEntitlement(TArray<struct FAccelByteModelsEntitlementInfo>& Entitlements, const class FString& QueryID, bool* bFound);
	int32 GetCurrentLevel();
	void Get_List_Info_by_Item_Category(EPlayerCustomizationType ItemCategory, TArray<class FString>* OutItemList, class FString* SelectedRowName);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_CustomizationSettings_C">();
	}
	static class ABP_CustomizationSettings_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_CustomizationSettings_C>();
	}
};
static_assert(alignof(ABP_CustomizationSettings_C) == 0x000008, "Wrong alignment on ABP_CustomizationSettings_C");
static_assert(sizeof(ABP_CustomizationSettings_C) == 0x000580, "Wrong size on ABP_CustomizationSettings_C");
static_assert(offsetof(ABP_CustomizationSettings_C, UberGraphFrame) == 0x000220, "Member 'ABP_CustomizationSettings_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_CustomizationSettings_C, DefaultSceneRoot) == 0x000228, "Member 'ABP_CustomizationSettings_C::DefaultSceneRoot' has a wrong offset!");
static_assert(offsetof(ABP_CustomizationSettings_C, CurrentCloudCustomizationGender) == 0x000230, "Member 'ABP_CustomizationSettings_C::CurrentCloudCustomizationGender' has a wrong offset!");
static_assert(offsetof(ABP_CustomizationSettings_C, TempCloudCustomizationGender) == 0x0002E0, "Member 'ABP_CustomizationSettings_C::TempCloudCustomizationGender' has a wrong offset!");
static_assert(offsetof(ABP_CustomizationSettings_C, LegsComponent) == 0x000390, "Member 'ABP_CustomizationSettings_C::LegsComponent' has a wrong offset!");
static_assert(offsetof(ABP_CustomizationSettings_C, HeadEntitlementsBegin) == 0x000398, "Member 'ABP_CustomizationSettings_C::HeadEntitlementsBegin' has a wrong offset!");
static_assert(offsetof(ABP_CustomizationSettings_C, HeadEntitlementsEnd) == 0x00039C, "Member 'ABP_CustomizationSettings_C::HeadEntitlementsEnd' has a wrong offset!");
static_assert(offsetof(ABP_CustomizationSettings_C, BodyEntitlementsBegin) == 0x0003A0, "Member 'ABP_CustomizationSettings_C::BodyEntitlementsBegin' has a wrong offset!");
static_assert(offsetof(ABP_CustomizationSettings_C, BodyEntitlementsEnd) == 0x0003A4, "Member 'ABP_CustomizationSettings_C::BodyEntitlementsEnd' has a wrong offset!");
static_assert(offsetof(ABP_CustomizationSettings_C, LegsEntitlementsBegin) == 0x0003A8, "Member 'ABP_CustomizationSettings_C::LegsEntitlementsBegin' has a wrong offset!");
static_assert(offsetof(ABP_CustomizationSettings_C, LegsEntitlementsEnd) == 0x0003AC, "Member 'ABP_CustomizationSettings_C::LegsEntitlementsEnd' has a wrong offset!");
static_assert(offsetof(ABP_CustomizationSettings_C, FeetEntitlementsBegin) == 0x0003B0, "Member 'ABP_CustomizationSettings_C::FeetEntitlementsBegin' has a wrong offset!");
static_assert(offsetof(ABP_CustomizationSettings_C, FeetEntitlementsEnd) == 0x0003B4, "Member 'ABP_CustomizationSettings_C::FeetEntitlementsEnd' has a wrong offset!");
static_assert(offsetof(ABP_CustomizationSettings_C, EntitlementEndPositions) == 0x0003B8, "Member 'ABP_CustomizationSettings_C::EntitlementEndPositions' has a wrong offset!");
static_assert(offsetof(ABP_CustomizationSettings_C, EntitlementBeginPositions) == 0x000408, "Member 'ABP_CustomizationSettings_C::EntitlementBeginPositions' has a wrong offset!");
static_assert(offsetof(ABP_CustomizationSettings_C, FeetComponent) == 0x000458, "Member 'ABP_CustomizationSettings_C::FeetComponent' has a wrong offset!");
static_assert(offsetof(ABP_CustomizationSettings_C, PreviewCloudCustomizationGender) == 0x000460, "Member 'ABP_CustomizationSettings_C::PreviewCloudCustomizationGender' has a wrong offset!");
static_assert(offsetof(ABP_CustomizationSettings_C, BodyItems) == 0x000510, "Member 'ABP_CustomizationSettings_C::BodyItems' has a wrong offset!");
static_assert(offsetof(ABP_CustomizationSettings_C, HeadItems) == 0x000520, "Member 'ABP_CustomizationSettings_C::HeadItems' has a wrong offset!");
static_assert(offsetof(ABP_CustomizationSettings_C, LegItems) == 0x000530, "Member 'ABP_CustomizationSettings_C::LegItems' has a wrong offset!");
static_assert(offsetof(ABP_CustomizationSettings_C, FeetItems) == 0x000540, "Member 'ABP_CustomizationSettings_C::FeetItems' has a wrong offset!");
static_assert(offsetof(ABP_CustomizationSettings_C, EyewearItems) == 0x000550, "Member 'ABP_CustomizationSettings_C::EyewearItems' has a wrong offset!");
static_assert(offsetof(ABP_CustomizationSettings_C, AccessoryItems) == 0x000560, "Member 'ABP_CustomizationSettings_C::AccessoryItems' has a wrong offset!");
static_assert(offsetof(ABP_CustomizationSettings_C, FacialHairItems) == 0x000570, "Member 'ABP_CustomizationSettings_C::FacialHairItems' has a wrong offset!");

}

