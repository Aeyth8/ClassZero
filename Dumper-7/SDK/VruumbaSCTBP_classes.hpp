#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: VruumbaSCTBP

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "SCT_structs.hpp"
#include "SCT_classes.hpp"
#include "AkAudio_structs.hpp"
#include "PassengerLogFactType_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass VruumbaSCTBP.VruumbaSCTBP_C
// 0x0160 (0x0700 - 0x05A0)
#pragma pack(push, 0x1)
class alignas(0x10) AVruumbaSCTBP_C : public ARoombaCharacter
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x05A0(0x0008)(ZeroConstructor, Transient, DuplicateTransient, UObjectWrapper)
	class USkeletalMeshComponent*                 Antenna;                                           // 0x05A8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   FlagHolder;                                        // 0x05B0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        GlassesLocation;                                   // 0x05B8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        Scene;                                             // 0x05C0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        VacuumOrigin;                                      // 0x05C8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBoxComponent*                          Box;                                               // 0x05D0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        Spawn;                                             // 0x05D8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UAkComponent*                           Ak;                                                // 0x05E0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	float                                         Flyspeed_Alpha_11D68C11445FDCA380F73F965EC78D47;   // 0x05E8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	ETimelineDirection                            Flyspeed__Direction_11D68C11445FDCA380F73F965EC78D47; // 0x05EC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	uint8                                         Pad_5ED[0x3];                                      // 0x05ED(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     Flyspeed;                                          // 0x05F0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	float                                         Timeline_0_Alpha_1B09E40F4CE5A7B2F2FD2F93BE4FE3B5; // 0x05F8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	ETimelineDirection                            Timeline_0__Direction_1B09E40F4CE5A7B2F2FD2F93BE4FE3B5; // 0x05FC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	uint8                                         Pad_5FD[0x3];                                      // 0x05FD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     Timeline_0;                                        // 0x0600(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	float                                         MovementMultiplier;                                // 0x0608(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         BounceCoefficient;                                 // 0x060C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UUserWidget*                            WidgetRef;                                         // 0x0610(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          VacuumOn;                                          // 0x0618(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_619[0x3];                                      // 0x0619(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         TrashScore;                                        // 0x061C(0x0004)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash)
	float                                         MaxTrash;                                          // 0x0620(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CurrentRotation;                                   // 0x0624(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FRotator                               ThrusterRotation;                                  // 0x0630(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FRotator                               InitialRotation;                                   // 0x063C(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          JumpHeld;                                          // 0x0648(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	Engine::EMovementMode                         OldMovementMode;                                   // 0x0649(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CalculateFloor;                                    // 0x064A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_64B[0x1];                                      // 0x064B(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         RTPC_Roomba_Volume;                                // 0x064C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          DebugMode;                                         // 0x0650(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_651[0x7];                                      // 0x0651(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UTextChatComponent_C*                   TextChat;                                          // 0x0658(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UVruumbaWI_C*                           SpectatorWidget;                                   // 0x0660(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAkRtpc*                                RTPC_RoombaMove;                                   // 0x0668(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAkRtpc*                                RTPC_Roomba_Vacuum;                                // 0x0670(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAkRtpc*                                RTPC_RoombaVolume;                                 // 0x0678(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ProjectileCost;                                    // 0x0680(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ProjectileOnCD;                                    // 0x0684(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          TeleportOnCD;                                      // 0x0685(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_686[0x2];                                      // 0x0686(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         FlagScore;                                         // 0x0688(0x0004)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash)
	bool                                          CarryingFlag;                                      // 0x068C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_68D[0x3];                                      // 0x068D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CameraGoal;                                        // 0x0690(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ScrollAmount;                                      // 0x0694(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Delta;                                             // 0x0698(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         VruumbaMesh;                                       // 0x069C(0x0004)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         RaceTime;                                          // 0x06A0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         BestPersonalRaceTime;                              // 0x06A4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AVruumbaRace_C*                         VruumbaRace;                                       // 0x06A8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          LeadingRacer;                                      // 0x06B0(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6B1[0x3];                                      // 0x06B1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         DoubleJumpForce;                                   // 0x06B4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          DoubleJumping;                                     // 0x06B8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6B9[0x3];                                      // 0x06B9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         BoostNumber;                                       // 0x06BC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         BarrellRollForce;                                  // 0x06C0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6C4[0x4];                                      // 0x06C4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UParticleSystem*                        ExhaustParticles;                                  // 0x06C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class UParticleSystemComponent*>       ExhaustParticleSystems;                            // 0x06D0(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, ContainsInstancedReference)
	class UClass*                                 AntennaAnimBP;                                     // 0x06E0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USkeletalMeshComponent*                 AntennaMeshComponent;                              // 0x06E8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CustomizationSet;                                  // 0x06F0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)

public:
	void ExecuteUbergraph_VruumbaSCTBP(int32 EntryPoint);
	void Speed_Boost_Timeline();
	void Server_New_Speed_Boost();
	void Audio_No_Ammo();
	void Audio_Teleport_Pressed();
	void Audio_Teleport();
	void K2_OnSetCustomization(const class FString& PlayerAccelByteID);
	void MultiSetAppearance();
	void ServerSetAppearance();
	void VruumbaRaceScoreReroute(class AVruumbaRace_C* In_Vruumba_Race);
	void New_Speed_Boost();
	void Audio_Race_New_Global_Best();
	void AudioSpeedBoost();
	void Audio_Boost();
	void DoubleJumpMulticast();
	void DoubleJumpServer();
	void DisableDoubleJump();
	void VruumbaRaceReroute(float Time, class AVruumbaRace_C* InVruumbaRace);
	void Update_Race_Time(float Actual_Race_Time);
	void Audio_Race_ended();
	void Audio_Race_Started();
	void Audio_New_personal_best();
	void Audio_Lead_Change();
	void Not_Carrying_Flag();
	void Carrying_Flag();
	void Audio_Steal_Flag();
	void Audio_Leading_Player();
	void Audio_Lose_Flag();
	void UpdateFlagScore();
	void OwnerProjectileHit();
	void Audio_Suck_Stop();
	void Audio_Suck_Start();
	void ServerTrashUpdate(float TrashScore_0);
	void Audio_Become_Roomba();
	void RTPCs();
	void DisplayAirlockWidgetBPI(bool Show);
	void OnLaunched(const struct FVector& LaunchVelocity, bool bXYOverride, bool bZOverride);
	void OwningPossessed();
	void ReceivePossessed(class AController* NewController);
	void YouHitTheFloor(float RTPC_Roomba_Volume_0);
	void K2_OnMovementModeChanged(Engine::EMovementMode PrevMovementMode, Engine::EMovementMode NewMovementMode, uint8 PrevCustomMode, uint8 NewCustomMode);
	void Audio_state_lose_traction();
	void Audio_state_gain_traction();
	void Started_Falling();
	void Started_Flying();
	void Started_Walking();
	void Audio_Flying_Boost();
	void Audio_Fire_Torpedo();
	void Audio_Jump();
	void Audio_Grounded_Impact();
	void Audio_Falling_Mode();
	void Audio_Flying_Mode();
	void Audio_Driving_Mode();
	void SpawnProjectileServer(const struct FTransform& SpawnTransform);
	void SetFlyingModeMulticast(bool Flying);
	void SetFlyingModeServer(bool Flying);
	void StopAllTrash();
	void ServerSpectatorMode();
	void InitiateTrashSpawn();
	void VacuumServer(bool VacuumOn_0);
	void SpawnTrashClients(const struct FVector& Spawn_Transform_Location);
	void SpawnDebrisServer();
	void ServerTeleport();
	void ServerGravity(float GravityScale);
	void ReceiveTick(float DeltaSeconds);
	void ReceiveBeginPlay();
	void LogOutBPI();
	void AddAlcoholBPI(float InputValue, bool Delay);
	void TeleportLocationRotationBPI(const struct FVector& TargetLocation, const struct FRotator& TargetRotation);
	void EnableIK_AimDelayBPI();
	void SetDestinyBPI(EFate Fate, const struct FVector& Impulse);
	void PassengerLogVoteBPI(class AActor* AirlockTarget, class ACharacter* TargetCharacter, class ACharacter* VotingCharacter);
	void TrustVoteBPI(class AActor* TargetAirlock, bool Yes, class ACharacter* VotingCharacter);
	void EliminationVoteBPI(class AActor* AirlockTarget, class ACharacter* VotedCharacter, class ACharacter* VotingCharacter);
	void InitiateAirlockSequenceBPI();
	void StartElevatorBPI();
	void SetAimingStateBPI(bool Aiming, uint8 AimType);
	void RagdollCharacterBPI(bool ToRagdoll, float Duration, const struct FVector& OptionalImpulse, bool Force);
	void InpActEvt_VruumbaFly_K2Node_InputActionEvent_0(const struct FKey& Key);
	void InpActEvt_VruumbaHoover_K2Node_InputActionEvent_1(const struct FKey& Key);
	void InpActEvt_VruumbaHoover_K2Node_InputActionEvent_2(const struct FKey& Key);
	void InpActEvt_PrimaryUseRoleItem_K2Node_InputActionEvent_3(const struct FKey& Key);
	void OnSuccess_19CA9B374C71051C12033894EF38DCA4(const struct FFCTCloudCustomizationVruumba& Payload, int32 Code, const class FString& Message);
	void OnError_19CA9B374C71051C12033894EF38DCA4(const struct FFCTCloudCustomizationVruumba& Payload, int32 Code, const class FString& Message);
	void InpActEvt_MouseScrollDown_K2Node_InputKeyEvent_0(const struct FKey& Key);
	void InpActEvt_MouseScrollUp_K2Node_InputKeyEvent_1(const struct FKey& Key);
	void InpActEvt_U_K2Node_InputKeyEvent_2(const struct FKey& Key);
	void InpActEvt_Crouch_K2Node_InputActionEvent_4(const struct FKey& Key);
	void InpActEvt_Jump_K2Node_InputActionEvent_5(const struct FKey& Key);
	void InpActEvt_Jump_K2Node_InputActionEvent_6(const struct FKey& Key);
	void Flyspeed__UpdateFunc();
	void Flyspeed__FinishedFunc();
	void Timeline_0__UpdateFunc();
	void Timeline_0__FinishedFunc();
	void UserConstructionScript();
	void OnRep_BounceCoefficient();
	void SetIsVisibleAndPhysical(bool bNewVisibility);
	void AddWidget(class UClass* Class_0);
	void OrientToMovement();
	void CalculateFloorDistance();
	void CalcCameraDistance(float* Distance);
	void GetAlivePlayers(TArray<class ACharacter*>* Players);
	void SetTrashVisible();
	void WidgetProjectileCooldown(bool OnCooldown);
	void WidgetTeleportCooldown(bool OnCooldown);
	void TryUpdateProjectilWidget();
	void Trash_Display_Update();
	void OnRep_TrashScore();
	void Set_Flag_Visible();
	void OnRep_FlagScore();
	void Audio_Set_3D_RTPC();
	void Set_Race_Visible();
	void Check_Best_Personal_Race_Time(float* BestPersonalTime);
	void Select_Vroomba_Mesh();
	void Randomize_Vroomba_Mesh();
	void FadeFromBlack();
	void InitiateCharacterHider();
	void Double_Jump_Launch();
	void Double_Jump_Boosts();
	void Jump_WI();
	void Set_Boosters_Visible();
	void QueryShouldHide();
	void UpdateLocalTrashWidget();
	void CreateBodyCustomization(class USkeletalMesh* NewBodyMesh, class UClass* NewAnimBP, TArray<class UMaterialInterface*>& NewBodyMaterials);
	void Create_Exhaust_Particle_Systems(class UParticleSystem* NewParticleSystem);
	void TryAddSocketParticle(class FName InSocketName, class UParticleSystem* InParticleSystem);
	void OLDAntenna(class USkeletalMesh* NewAntennaMesh, class UClass* InAntennaAnimBP);
	void TryAddSocketAntenna(class FName InSocketName, class USkeletalMesh* InAntennaMesh, class UClass* InAntennaAnimBP);
	void Update_Flag_Holder();
	void CreateAllCustomization(class USkeletalMesh* InBodyMesh, class UClass* InBodyAnimBP, TArray<class UMaterialInterface*>& InBodyMaterials, class USkeletalMesh* InAntennaMesh, class UClass* InAntennaAnimBP, class UParticleSystem* InExhaustParticle);
	void CustomizationPayloadToVariables(const struct FFCTCloudCustomizationVruumba& FCTCloudCustomizationVruumba, class USkeletalMesh** OutBodyMesh, TArray<class UMaterialInterface*>* OutBodyMaterials, class USkeletalMesh** OutAntennaMesh, class UClass** OutAntennaAnimBP, class UParticleSystem** OutExhaustParticle);
	void StartExhaustParticles();
	void StopExhaustParticles();
	void CreateAntennaSocket(class USkeletalMesh* NewAntennaMesh, class UClass* NewAntennaAnimBP);
	void UpdateAntenna();
	void Recreate_Exhaust_Particle_Systems();
	void UpdateExhaustParticleSystems(class UParticleSystem* NewParticleSystem);
	void ParticleBurst();
	void IsAliveBPI(bool* Alive);
	void GetHeldLogInfoBPI(EPassengerLogFactType* FactType, TArray<struct FPlayerData>* Players, bool* HasLog);
	void IsPersonoidBPI(bool* IsPersonoid);
	void GetPlayerNameBPI(class FString* Name_0);
	bool IsFemaleBPI();
	class UAbilitySystemComponent* GetAbilitySystemComponentBPI();
	class UTexture2D* GetPortrait();
	class USceneComponent* GetHomingTargetBPI();
	void IsPlayerBlocked(class APlayerState* Player, bool* bLocked);
	void IsPlayerConsoleCommunicationBlocked(class APlayerState* Player, bool* bLocked);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"VruumbaSCTBP_C">();
	}
	static class AVruumbaSCTBP_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<AVruumbaSCTBP_C>();
	}
};
#pragma pack(pop)
static_assert(alignof(AVruumbaSCTBP_C) == 0x000010, "Wrong alignment on AVruumbaSCTBP_C");
static_assert(sizeof(AVruumbaSCTBP_C) == 0x000700, "Wrong size on AVruumbaSCTBP_C");
static_assert(offsetof(AVruumbaSCTBP_C, UberGraphFrame) == 0x0005A0, "Member 'AVruumbaSCTBP_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(AVruumbaSCTBP_C, Antenna) == 0x0005A8, "Member 'AVruumbaSCTBP_C::Antenna' has a wrong offset!");
static_assert(offsetof(AVruumbaSCTBP_C, FlagHolder) == 0x0005B0, "Member 'AVruumbaSCTBP_C::FlagHolder' has a wrong offset!");
static_assert(offsetof(AVruumbaSCTBP_C, GlassesLocation) == 0x0005B8, "Member 'AVruumbaSCTBP_C::GlassesLocation' has a wrong offset!");
static_assert(offsetof(AVruumbaSCTBP_C, Scene) == 0x0005C0, "Member 'AVruumbaSCTBP_C::Scene' has a wrong offset!");
static_assert(offsetof(AVruumbaSCTBP_C, VacuumOrigin) == 0x0005C8, "Member 'AVruumbaSCTBP_C::VacuumOrigin' has a wrong offset!");
static_assert(offsetof(AVruumbaSCTBP_C, Box) == 0x0005D0, "Member 'AVruumbaSCTBP_C::Box' has a wrong offset!");
static_assert(offsetof(AVruumbaSCTBP_C, Spawn) == 0x0005D8, "Member 'AVruumbaSCTBP_C::Spawn' has a wrong offset!");
static_assert(offsetof(AVruumbaSCTBP_C, Ak) == 0x0005E0, "Member 'AVruumbaSCTBP_C::Ak' has a wrong offset!");
static_assert(offsetof(AVruumbaSCTBP_C, Flyspeed_Alpha_11D68C11445FDCA380F73F965EC78D47) == 0x0005E8, "Member 'AVruumbaSCTBP_C::Flyspeed_Alpha_11D68C11445FDCA380F73F965EC78D47' has a wrong offset!");
static_assert(offsetof(AVruumbaSCTBP_C, Flyspeed__Direction_11D68C11445FDCA380F73F965EC78D47) == 0x0005EC, "Member 'AVruumbaSCTBP_C::Flyspeed__Direction_11D68C11445FDCA380F73F965EC78D47' has a wrong offset!");
static_assert(offsetof(AVruumbaSCTBP_C, Flyspeed) == 0x0005F0, "Member 'AVruumbaSCTBP_C::Flyspeed' has a wrong offset!");
static_assert(offsetof(AVruumbaSCTBP_C, Timeline_0_Alpha_1B09E40F4CE5A7B2F2FD2F93BE4FE3B5) == 0x0005F8, "Member 'AVruumbaSCTBP_C::Timeline_0_Alpha_1B09E40F4CE5A7B2F2FD2F93BE4FE3B5' has a wrong offset!");
static_assert(offsetof(AVruumbaSCTBP_C, Timeline_0__Direction_1B09E40F4CE5A7B2F2FD2F93BE4FE3B5) == 0x0005FC, "Member 'AVruumbaSCTBP_C::Timeline_0__Direction_1B09E40F4CE5A7B2F2FD2F93BE4FE3B5' has a wrong offset!");
static_assert(offsetof(AVruumbaSCTBP_C, Timeline_0) == 0x000600, "Member 'AVruumbaSCTBP_C::Timeline_0' has a wrong offset!");
static_assert(offsetof(AVruumbaSCTBP_C, MovementMultiplier) == 0x000608, "Member 'AVruumbaSCTBP_C::MovementMultiplier' has a wrong offset!");
static_assert(offsetof(AVruumbaSCTBP_C, BounceCoefficient) == 0x00060C, "Member 'AVruumbaSCTBP_C::BounceCoefficient' has a wrong offset!");
static_assert(offsetof(AVruumbaSCTBP_C, WidgetRef) == 0x000610, "Member 'AVruumbaSCTBP_C::WidgetRef' has a wrong offset!");
static_assert(offsetof(AVruumbaSCTBP_C, VacuumOn) == 0x000618, "Member 'AVruumbaSCTBP_C::VacuumOn' has a wrong offset!");
static_assert(offsetof(AVruumbaSCTBP_C, TrashScore) == 0x00061C, "Member 'AVruumbaSCTBP_C::TrashScore' has a wrong offset!");
static_assert(offsetof(AVruumbaSCTBP_C, MaxTrash) == 0x000620, "Member 'AVruumbaSCTBP_C::MaxTrash' has a wrong offset!");
static_assert(offsetof(AVruumbaSCTBP_C, CurrentRotation) == 0x000624, "Member 'AVruumbaSCTBP_C::CurrentRotation' has a wrong offset!");
static_assert(offsetof(AVruumbaSCTBP_C, ThrusterRotation) == 0x000630, "Member 'AVruumbaSCTBP_C::ThrusterRotation' has a wrong offset!");
static_assert(offsetof(AVruumbaSCTBP_C, InitialRotation) == 0x00063C, "Member 'AVruumbaSCTBP_C::InitialRotation' has a wrong offset!");
static_assert(offsetof(AVruumbaSCTBP_C, JumpHeld) == 0x000648, "Member 'AVruumbaSCTBP_C::JumpHeld' has a wrong offset!");
static_assert(offsetof(AVruumbaSCTBP_C, OldMovementMode) == 0x000649, "Member 'AVruumbaSCTBP_C::OldMovementMode' has a wrong offset!");
static_assert(offsetof(AVruumbaSCTBP_C, CalculateFloor) == 0x00064A, "Member 'AVruumbaSCTBP_C::CalculateFloor' has a wrong offset!");
static_assert(offsetof(AVruumbaSCTBP_C, RTPC_Roomba_Volume) == 0x00064C, "Member 'AVruumbaSCTBP_C::RTPC_Roomba_Volume' has a wrong offset!");
static_assert(offsetof(AVruumbaSCTBP_C, DebugMode) == 0x000650, "Member 'AVruumbaSCTBP_C::DebugMode' has a wrong offset!");
static_assert(offsetof(AVruumbaSCTBP_C, TextChat) == 0x000658, "Member 'AVruumbaSCTBP_C::TextChat' has a wrong offset!");
static_assert(offsetof(AVruumbaSCTBP_C, SpectatorWidget) == 0x000660, "Member 'AVruumbaSCTBP_C::SpectatorWidget' has a wrong offset!");
static_assert(offsetof(AVruumbaSCTBP_C, RTPC_RoombaMove) == 0x000668, "Member 'AVruumbaSCTBP_C::RTPC_RoombaMove' has a wrong offset!");
static_assert(offsetof(AVruumbaSCTBP_C, RTPC_Roomba_Vacuum) == 0x000670, "Member 'AVruumbaSCTBP_C::RTPC_Roomba_Vacuum' has a wrong offset!");
static_assert(offsetof(AVruumbaSCTBP_C, RTPC_RoombaVolume) == 0x000678, "Member 'AVruumbaSCTBP_C::RTPC_RoombaVolume' has a wrong offset!");
static_assert(offsetof(AVruumbaSCTBP_C, ProjectileCost) == 0x000680, "Member 'AVruumbaSCTBP_C::ProjectileCost' has a wrong offset!");
static_assert(offsetof(AVruumbaSCTBP_C, ProjectileOnCD) == 0x000684, "Member 'AVruumbaSCTBP_C::ProjectileOnCD' has a wrong offset!");
static_assert(offsetof(AVruumbaSCTBP_C, TeleportOnCD) == 0x000685, "Member 'AVruumbaSCTBP_C::TeleportOnCD' has a wrong offset!");
static_assert(offsetof(AVruumbaSCTBP_C, FlagScore) == 0x000688, "Member 'AVruumbaSCTBP_C::FlagScore' has a wrong offset!");
static_assert(offsetof(AVruumbaSCTBP_C, CarryingFlag) == 0x00068C, "Member 'AVruumbaSCTBP_C::CarryingFlag' has a wrong offset!");
static_assert(offsetof(AVruumbaSCTBP_C, CameraGoal) == 0x000690, "Member 'AVruumbaSCTBP_C::CameraGoal' has a wrong offset!");
static_assert(offsetof(AVruumbaSCTBP_C, ScrollAmount) == 0x000694, "Member 'AVruumbaSCTBP_C::ScrollAmount' has a wrong offset!");
static_assert(offsetof(AVruumbaSCTBP_C, Delta) == 0x000698, "Member 'AVruumbaSCTBP_C::Delta' has a wrong offset!");
static_assert(offsetof(AVruumbaSCTBP_C, VruumbaMesh) == 0x00069C, "Member 'AVruumbaSCTBP_C::VruumbaMesh' has a wrong offset!");
static_assert(offsetof(AVruumbaSCTBP_C, RaceTime) == 0x0006A0, "Member 'AVruumbaSCTBP_C::RaceTime' has a wrong offset!");
static_assert(offsetof(AVruumbaSCTBP_C, BestPersonalRaceTime) == 0x0006A4, "Member 'AVruumbaSCTBP_C::BestPersonalRaceTime' has a wrong offset!");
static_assert(offsetof(AVruumbaSCTBP_C, VruumbaRace) == 0x0006A8, "Member 'AVruumbaSCTBP_C::VruumbaRace' has a wrong offset!");
static_assert(offsetof(AVruumbaSCTBP_C, LeadingRacer) == 0x0006B0, "Member 'AVruumbaSCTBP_C::LeadingRacer' has a wrong offset!");
static_assert(offsetof(AVruumbaSCTBP_C, DoubleJumpForce) == 0x0006B4, "Member 'AVruumbaSCTBP_C::DoubleJumpForce' has a wrong offset!");
static_assert(offsetof(AVruumbaSCTBP_C, DoubleJumping) == 0x0006B8, "Member 'AVruumbaSCTBP_C::DoubleJumping' has a wrong offset!");
static_assert(offsetof(AVruumbaSCTBP_C, BoostNumber) == 0x0006BC, "Member 'AVruumbaSCTBP_C::BoostNumber' has a wrong offset!");
static_assert(offsetof(AVruumbaSCTBP_C, BarrellRollForce) == 0x0006C0, "Member 'AVruumbaSCTBP_C::BarrellRollForce' has a wrong offset!");
static_assert(offsetof(AVruumbaSCTBP_C, ExhaustParticles) == 0x0006C8, "Member 'AVruumbaSCTBP_C::ExhaustParticles' has a wrong offset!");
static_assert(offsetof(AVruumbaSCTBP_C, ExhaustParticleSystems) == 0x0006D0, "Member 'AVruumbaSCTBP_C::ExhaustParticleSystems' has a wrong offset!");
static_assert(offsetof(AVruumbaSCTBP_C, AntennaAnimBP) == 0x0006E0, "Member 'AVruumbaSCTBP_C::AntennaAnimBP' has a wrong offset!");
static_assert(offsetof(AVruumbaSCTBP_C, AntennaMeshComponent) == 0x0006E8, "Member 'AVruumbaSCTBP_C::AntennaMeshComponent' has a wrong offset!");
static_assert(offsetof(AVruumbaSCTBP_C, CustomizationSet) == 0x0006F0, "Member 'AVruumbaSCTBP_C::CustomizationSet' has a wrong offset!");

}

