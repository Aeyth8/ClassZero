#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: IAnimBp

#include "Basic.hpp"

#include "PivotParams_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "IdleEntryState_structs.hpp"
#include "Engine_structs.hpp"
#include "Gait_structs.hpp"
#include "MovementMode_structs.hpp"
#include "RPC_Enum_structs.hpp"
#include "Stance_structs.hpp"


namespace SDK::Params
{

// Function IAnimBp.IAnimBp_C.GetSetupValuesBPI
// 0x0028 (0x0028 - 0x0000)
struct IAnimBp_C_GetSetupValuesBPI final
{
public:
	float                                         InCrouchSpeed;                                     // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         InWalkSpeed;                                       // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         InRunSpeed;                                        // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         InSprintSpeed;                                     // 0x000C(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          InFemale;                                          // 0x0010(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CrouchSpeed;                                       // 0x0014(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         WalkSpeed;                                         // 0x0018(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         RunSpeed;                                          // 0x001C(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         SprintSpeed;                                       // 0x0020(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Female;                                            // 0x0024(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(IAnimBp_C_GetSetupValuesBPI) == 0x000004, "Wrong alignment on IAnimBp_C_GetSetupValuesBPI");
static_assert(sizeof(IAnimBp_C_GetSetupValuesBPI) == 0x000028, "Wrong size on IAnimBp_C_GetSetupValuesBPI");
static_assert(offsetof(IAnimBp_C_GetSetupValuesBPI, InCrouchSpeed) == 0x000000, "Member 'IAnimBp_C_GetSetupValuesBPI::InCrouchSpeed' has a wrong offset!");
static_assert(offsetof(IAnimBp_C_GetSetupValuesBPI, InWalkSpeed) == 0x000004, "Member 'IAnimBp_C_GetSetupValuesBPI::InWalkSpeed' has a wrong offset!");
static_assert(offsetof(IAnimBp_C_GetSetupValuesBPI, InRunSpeed) == 0x000008, "Member 'IAnimBp_C_GetSetupValuesBPI::InRunSpeed' has a wrong offset!");
static_assert(offsetof(IAnimBp_C_GetSetupValuesBPI, InSprintSpeed) == 0x00000C, "Member 'IAnimBp_C_GetSetupValuesBPI::InSprintSpeed' has a wrong offset!");
static_assert(offsetof(IAnimBp_C_GetSetupValuesBPI, InFemale) == 0x000010, "Member 'IAnimBp_C_GetSetupValuesBPI::InFemale' has a wrong offset!");
static_assert(offsetof(IAnimBp_C_GetSetupValuesBPI, CrouchSpeed) == 0x000014, "Member 'IAnimBp_C_GetSetupValuesBPI::CrouchSpeed' has a wrong offset!");
static_assert(offsetof(IAnimBp_C_GetSetupValuesBPI, WalkSpeed) == 0x000018, "Member 'IAnimBp_C_GetSetupValuesBPI::WalkSpeed' has a wrong offset!");
static_assert(offsetof(IAnimBp_C_GetSetupValuesBPI, RunSpeed) == 0x00001C, "Member 'IAnimBp_C_GetSetupValuesBPI::RunSpeed' has a wrong offset!");
static_assert(offsetof(IAnimBp_C_GetSetupValuesBPI, SprintSpeed) == 0x000020, "Member 'IAnimBp_C_GetSetupValuesBPI::SprintSpeed' has a wrong offset!");
static_assert(offsetof(IAnimBp_C_GetSetupValuesBPI, Female) == 0x000024, "Member 'IAnimBp_C_GetSetupValuesBPI::Female' has a wrong offset!");

// Function IAnimBp.IAnimBp_C.GetEssentialValuesBPI
// 0x00B8 (0x00B8 - 0x0000)
struct IAnimBp_C_GetEssentialValuesBPI final
{
public:
	struct FVector                                InVelocity;                                        // 0x0000(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          InIsMoving;                                        // 0x000C(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          InHasMovementInput;                                // 0x000D(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          InIsAiming;                                        // 0x000E(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         InAimType;                                         // 0x000F(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         InDirection;                                       // 0x0010(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         InCharacterRotationDifference;                     // 0x0014(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         InVelocityDifference;                              // 0x0018(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         InAimYawDelta;                                     // 0x001C(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         InAimYawRate;                                      // 0x0020(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               InCharacterRotation;                               // 0x0024(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FRotator                               InLookingRotation;                                 // 0x0030(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FRotator                               InLastVelocityRotation;                            // 0x003C(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FRotator                               InLastMovementInputRotation;                       // 0x0048(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          InCarryingCorpse;                                  // 0x0054(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          InBeingCarriedCorpse;                              // 0x0055(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_56[0x2];                                       // 0x0056(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         InAlcoholPercent;                                  // 0x0058(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Velocity;                                          // 0x005C(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsMoving;                                          // 0x0068(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          HasMovementInput;                                  // 0x0069(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          IsAiming;                                          // 0x006A(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         AimType;                                           // 0x006B(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Direction;                                         // 0x006C(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CharacterRotationDifference;                       // 0x0070(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         VelocityDifference;                                // 0x0074(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         AimYawDelta;                                       // 0x0078(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         AimYawRate;                                        // 0x007C(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CharacterRotation;                                 // 0x0080(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FRotator                               LookingRotation;                                   // 0x008C(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FRotator                               LastVelocityRotation;                              // 0x0098(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FRotator                               LastMovementInputRotation;                         // 0x00A4(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CarryingCorpse;                                    // 0x00B0(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          BeingCarriedCorpse;                                // 0x00B1(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_B2[0x2];                                       // 0x00B2(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         AlcoholPercent;                                    // 0x00B4(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(IAnimBp_C_GetEssentialValuesBPI) == 0x000004, "Wrong alignment on IAnimBp_C_GetEssentialValuesBPI");
static_assert(sizeof(IAnimBp_C_GetEssentialValuesBPI) == 0x0000B8, "Wrong size on IAnimBp_C_GetEssentialValuesBPI");
static_assert(offsetof(IAnimBp_C_GetEssentialValuesBPI, InVelocity) == 0x000000, "Member 'IAnimBp_C_GetEssentialValuesBPI::InVelocity' has a wrong offset!");
static_assert(offsetof(IAnimBp_C_GetEssentialValuesBPI, InIsMoving) == 0x00000C, "Member 'IAnimBp_C_GetEssentialValuesBPI::InIsMoving' has a wrong offset!");
static_assert(offsetof(IAnimBp_C_GetEssentialValuesBPI, InHasMovementInput) == 0x00000D, "Member 'IAnimBp_C_GetEssentialValuesBPI::InHasMovementInput' has a wrong offset!");
static_assert(offsetof(IAnimBp_C_GetEssentialValuesBPI, InIsAiming) == 0x00000E, "Member 'IAnimBp_C_GetEssentialValuesBPI::InIsAiming' has a wrong offset!");
static_assert(offsetof(IAnimBp_C_GetEssentialValuesBPI, InAimType) == 0x00000F, "Member 'IAnimBp_C_GetEssentialValuesBPI::InAimType' has a wrong offset!");
static_assert(offsetof(IAnimBp_C_GetEssentialValuesBPI, InDirection) == 0x000010, "Member 'IAnimBp_C_GetEssentialValuesBPI::InDirection' has a wrong offset!");
static_assert(offsetof(IAnimBp_C_GetEssentialValuesBPI, InCharacterRotationDifference) == 0x000014, "Member 'IAnimBp_C_GetEssentialValuesBPI::InCharacterRotationDifference' has a wrong offset!");
static_assert(offsetof(IAnimBp_C_GetEssentialValuesBPI, InVelocityDifference) == 0x000018, "Member 'IAnimBp_C_GetEssentialValuesBPI::InVelocityDifference' has a wrong offset!");
static_assert(offsetof(IAnimBp_C_GetEssentialValuesBPI, InAimYawDelta) == 0x00001C, "Member 'IAnimBp_C_GetEssentialValuesBPI::InAimYawDelta' has a wrong offset!");
static_assert(offsetof(IAnimBp_C_GetEssentialValuesBPI, InAimYawRate) == 0x000020, "Member 'IAnimBp_C_GetEssentialValuesBPI::InAimYawRate' has a wrong offset!");
static_assert(offsetof(IAnimBp_C_GetEssentialValuesBPI, InCharacterRotation) == 0x000024, "Member 'IAnimBp_C_GetEssentialValuesBPI::InCharacterRotation' has a wrong offset!");
static_assert(offsetof(IAnimBp_C_GetEssentialValuesBPI, InLookingRotation) == 0x000030, "Member 'IAnimBp_C_GetEssentialValuesBPI::InLookingRotation' has a wrong offset!");
static_assert(offsetof(IAnimBp_C_GetEssentialValuesBPI, InLastVelocityRotation) == 0x00003C, "Member 'IAnimBp_C_GetEssentialValuesBPI::InLastVelocityRotation' has a wrong offset!");
static_assert(offsetof(IAnimBp_C_GetEssentialValuesBPI, InLastMovementInputRotation) == 0x000048, "Member 'IAnimBp_C_GetEssentialValuesBPI::InLastMovementInputRotation' has a wrong offset!");
static_assert(offsetof(IAnimBp_C_GetEssentialValuesBPI, InCarryingCorpse) == 0x000054, "Member 'IAnimBp_C_GetEssentialValuesBPI::InCarryingCorpse' has a wrong offset!");
static_assert(offsetof(IAnimBp_C_GetEssentialValuesBPI, InBeingCarriedCorpse) == 0x000055, "Member 'IAnimBp_C_GetEssentialValuesBPI::InBeingCarriedCorpse' has a wrong offset!");
static_assert(offsetof(IAnimBp_C_GetEssentialValuesBPI, InAlcoholPercent) == 0x000058, "Member 'IAnimBp_C_GetEssentialValuesBPI::InAlcoholPercent' has a wrong offset!");
static_assert(offsetof(IAnimBp_C_GetEssentialValuesBPI, Velocity) == 0x00005C, "Member 'IAnimBp_C_GetEssentialValuesBPI::Velocity' has a wrong offset!");
static_assert(offsetof(IAnimBp_C_GetEssentialValuesBPI, IsMoving) == 0x000068, "Member 'IAnimBp_C_GetEssentialValuesBPI::IsMoving' has a wrong offset!");
static_assert(offsetof(IAnimBp_C_GetEssentialValuesBPI, HasMovementInput) == 0x000069, "Member 'IAnimBp_C_GetEssentialValuesBPI::HasMovementInput' has a wrong offset!");
static_assert(offsetof(IAnimBp_C_GetEssentialValuesBPI, IsAiming) == 0x00006A, "Member 'IAnimBp_C_GetEssentialValuesBPI::IsAiming' has a wrong offset!");
static_assert(offsetof(IAnimBp_C_GetEssentialValuesBPI, AimType) == 0x00006B, "Member 'IAnimBp_C_GetEssentialValuesBPI::AimType' has a wrong offset!");
static_assert(offsetof(IAnimBp_C_GetEssentialValuesBPI, Direction) == 0x00006C, "Member 'IAnimBp_C_GetEssentialValuesBPI::Direction' has a wrong offset!");
static_assert(offsetof(IAnimBp_C_GetEssentialValuesBPI, CharacterRotationDifference) == 0x000070, "Member 'IAnimBp_C_GetEssentialValuesBPI::CharacterRotationDifference' has a wrong offset!");
static_assert(offsetof(IAnimBp_C_GetEssentialValuesBPI, VelocityDifference) == 0x000074, "Member 'IAnimBp_C_GetEssentialValuesBPI::VelocityDifference' has a wrong offset!");
static_assert(offsetof(IAnimBp_C_GetEssentialValuesBPI, AimYawDelta) == 0x000078, "Member 'IAnimBp_C_GetEssentialValuesBPI::AimYawDelta' has a wrong offset!");
static_assert(offsetof(IAnimBp_C_GetEssentialValuesBPI, AimYawRate) == 0x00007C, "Member 'IAnimBp_C_GetEssentialValuesBPI::AimYawRate' has a wrong offset!");
static_assert(offsetof(IAnimBp_C_GetEssentialValuesBPI, CharacterRotation) == 0x000080, "Member 'IAnimBp_C_GetEssentialValuesBPI::CharacterRotation' has a wrong offset!");
static_assert(offsetof(IAnimBp_C_GetEssentialValuesBPI, LookingRotation) == 0x00008C, "Member 'IAnimBp_C_GetEssentialValuesBPI::LookingRotation' has a wrong offset!");
static_assert(offsetof(IAnimBp_C_GetEssentialValuesBPI, LastVelocityRotation) == 0x000098, "Member 'IAnimBp_C_GetEssentialValuesBPI::LastVelocityRotation' has a wrong offset!");
static_assert(offsetof(IAnimBp_C_GetEssentialValuesBPI, LastMovementInputRotation) == 0x0000A4, "Member 'IAnimBp_C_GetEssentialValuesBPI::LastMovementInputRotation' has a wrong offset!");
static_assert(offsetof(IAnimBp_C_GetEssentialValuesBPI, CarryingCorpse) == 0x0000B0, "Member 'IAnimBp_C_GetEssentialValuesBPI::CarryingCorpse' has a wrong offset!");
static_assert(offsetof(IAnimBp_C_GetEssentialValuesBPI, BeingCarriedCorpse) == 0x0000B1, "Member 'IAnimBp_C_GetEssentialValuesBPI::BeingCarriedCorpse' has a wrong offset!");
static_assert(offsetof(IAnimBp_C_GetEssentialValuesBPI, AlcoholPercent) == 0x0000B4, "Member 'IAnimBp_C_GetEssentialValuesBPI::AlcoholPercent' has a wrong offset!");

// Function IAnimBp.IAnimBp_C.AddCharacterRotationBPI
// 0x000C (0x000C - 0x0000)
struct IAnimBp_C_AddCharacterRotationBPI final
{
public:
	struct FRotator                               AddAmount;                                         // 0x0000(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(IAnimBp_C_AddCharacterRotationBPI) == 0x000004, "Wrong alignment on IAnimBp_C_AddCharacterRotationBPI");
static_assert(sizeof(IAnimBp_C_AddCharacterRotationBPI) == 0x00000C, "Wrong size on IAnimBp_C_AddCharacterRotationBPI");
static_assert(offsetof(IAnimBp_C_AddCharacterRotationBPI, AddAmount) == 0x000000, "Member 'IAnimBp_C_AddCharacterRotationBPI::AddAmount' has a wrong offset!");

// Function IAnimBp.IAnimBp_C.MovementModeChangedBPI
// 0x0004 (0x0004 - 0x0000)
struct IAnimBp_C_MovementModeChangedBPI final
{
public:
	Engine::EMovementMode                         PrevMovementMode;                                  // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	Engine::EMovementMode                         NewMovementMode;                                   // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         PrevCustomMode;                                    // 0x0002(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         NewCustomMode;                                     // 0x0003(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(IAnimBp_C_MovementModeChangedBPI) == 0x000001, "Wrong alignment on IAnimBp_C_MovementModeChangedBPI");
static_assert(sizeof(IAnimBp_C_MovementModeChangedBPI) == 0x000004, "Wrong size on IAnimBp_C_MovementModeChangedBPI");
static_assert(offsetof(IAnimBp_C_MovementModeChangedBPI, PrevMovementMode) == 0x000000, "Member 'IAnimBp_C_MovementModeChangedBPI::PrevMovementMode' has a wrong offset!");
static_assert(offsetof(IAnimBp_C_MovementModeChangedBPI, NewMovementMode) == 0x000001, "Member 'IAnimBp_C_MovementModeChangedBPI::NewMovementMode' has a wrong offset!");
static_assert(offsetof(IAnimBp_C_MovementModeChangedBPI, PrevCustomMode) == 0x000002, "Member 'IAnimBp_C_MovementModeChangedBPI::PrevCustomMode' has a wrong offset!");
static_assert(offsetof(IAnimBp_C_MovementModeChangedBPI, NewCustomMode) == 0x000003, "Member 'IAnimBp_C_MovementModeChangedBPI::NewCustomMode' has a wrong offset!");

// Function IAnimBp.IAnimBp_C.SetStanceBPI
// 0x0001 (0x0001 - 0x0000)
struct IAnimBp_C_SetStanceBPI final
{
public:
	EStance                                       NewStance;                                         // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(IAnimBp_C_SetStanceBPI) == 0x000001, "Wrong alignment on IAnimBp_C_SetStanceBPI");
static_assert(sizeof(IAnimBp_C_SetStanceBPI) == 0x000001, "Wrong size on IAnimBp_C_SetStanceBPI");
static_assert(offsetof(IAnimBp_C_SetStanceBPI, NewStance) == 0x000000, "Member 'IAnimBp_C_SetStanceBPI::NewStance' has a wrong offset!");

// Function IAnimBp.IAnimBp_C.LandedBPI
// 0x008C (0x008C - 0x0000)
struct IAnimBp_C_LandedBPI final
{
public:
	struct FHitResult                             Hit;                                               // 0x0000(0x008C)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
};
static_assert(alignof(IAnimBp_C_LandedBPI) == 0x000004, "Wrong alignment on IAnimBp_C_LandedBPI");
static_assert(sizeof(IAnimBp_C_LandedBPI) == 0x00008C, "Wrong size on IAnimBp_C_LandedBPI");
static_assert(offsetof(IAnimBp_C_LandedBPI, Hit) == 0x000000, "Member 'IAnimBp_C_LandedBPI::Hit' has a wrong offset!");

// Function IAnimBp.IAnimBp_C.ShouldSprintBPI
// 0x0001 (0x0001 - 0x0000)
struct IAnimBp_C_ShouldSprintBPI final
{
public:
	bool                                          ShouldSprint;                                      // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(IAnimBp_C_ShouldSprintBPI) == 0x000001, "Wrong alignment on IAnimBp_C_ShouldSprintBPI");
static_assert(sizeof(IAnimBp_C_ShouldSprintBPI) == 0x000001, "Wrong size on IAnimBp_C_ShouldSprintBPI");
static_assert(offsetof(IAnimBp_C_ShouldSprintBPI, ShouldSprint) == 0x000000, "Member 'IAnimBp_C_ShouldSprintBPI::ShouldSprint' has a wrong offset!");

// Function IAnimBp.IAnimBp_C.ToRagdollBPI
// 0x0014 (0x0014 - 0x0000)
struct IAnimBp_C_ToRagdollBPI final
{
public:
	bool                                          ToRagdoll;                                         // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                OptionalImpulse;                                   // 0x0004(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Force;                                             // 0x0010(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(IAnimBp_C_ToRagdollBPI) == 0x000004, "Wrong alignment on IAnimBp_C_ToRagdollBPI");
static_assert(sizeof(IAnimBp_C_ToRagdollBPI) == 0x000014, "Wrong size on IAnimBp_C_ToRagdollBPI");
static_assert(offsetof(IAnimBp_C_ToRagdollBPI, ToRagdoll) == 0x000000, "Member 'IAnimBp_C_ToRagdollBPI::ToRagdoll' has a wrong offset!");
static_assert(offsetof(IAnimBp_C_ToRagdollBPI, OptionalImpulse) == 0x000004, "Member 'IAnimBp_C_ToRagdollBPI::OptionalImpulse' has a wrong offset!");
static_assert(offsetof(IAnimBp_C_ToRagdollBPI, Force) == 0x000010, "Member 'IAnimBp_C_ToRagdollBPI::Force' has a wrong offset!");

// Function IAnimBp.IAnimBp_C.SetCharacterRotationBPI
// 0x0010 (0x0010 - 0x0000)
struct IAnimBp_C_SetCharacterRotationBPI final
{
public:
	ERPC_Enum                                     RPC;                                               // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          EnableRotationOverride;                            // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2[0x2];                                        // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               Rotation;                                          // 0x0004(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(IAnimBp_C_SetCharacterRotationBPI) == 0x000004, "Wrong alignment on IAnimBp_C_SetCharacterRotationBPI");
static_assert(sizeof(IAnimBp_C_SetCharacterRotationBPI) == 0x000010, "Wrong size on IAnimBp_C_SetCharacterRotationBPI");
static_assert(offsetof(IAnimBp_C_SetCharacterRotationBPI, RPC) == 0x000000, "Member 'IAnimBp_C_SetCharacterRotationBPI::RPC' has a wrong offset!");
static_assert(offsetof(IAnimBp_C_SetCharacterRotationBPI, EnableRotationOverride) == 0x000001, "Member 'IAnimBp_C_SetCharacterRotationBPI::EnableRotationOverride' has a wrong offset!");
static_assert(offsetof(IAnimBp_C_SetCharacterRotationBPI, Rotation) == 0x000004, "Member 'IAnimBp_C_SetCharacterRotationBPI::Rotation' has a wrong offset!");

// Function IAnimBp.IAnimBp_C.PlayEmoteBPI
// 0x0001 (0x0001 - 0x0000)
struct IAnimBp_C_PlayEmoteBPI final
{
public:
	uint8                                         EmoteID;                                           // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(IAnimBp_C_PlayEmoteBPI) == 0x000001, "Wrong alignment on IAnimBp_C_PlayEmoteBPI");
static_assert(sizeof(IAnimBp_C_PlayEmoteBPI) == 0x000001, "Wrong size on IAnimBp_C_PlayEmoteBPI");
static_assert(offsetof(IAnimBp_C_PlayEmoteBPI, EmoteID) == 0x000000, "Member 'IAnimBp_C_PlayEmoteBPI::EmoteID' has a wrong offset!");

// Function IAnimBp.IAnimBp_C.SetAimingBPI
// 0x0002 (0x0002 - 0x0000)
struct IAnimBp_C_SetAimingBPI final
{
public:
	bool                                          Aiming;                                            // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         AimType;                                           // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(IAnimBp_C_SetAimingBPI) == 0x000001, "Wrong alignment on IAnimBp_C_SetAimingBPI");
static_assert(sizeof(IAnimBp_C_SetAimingBPI) == 0x000002, "Wrong size on IAnimBp_C_SetAimingBPI");
static_assert(offsetof(IAnimBp_C_SetAimingBPI, Aiming) == 0x000000, "Member 'IAnimBp_C_SetAimingBPI::Aiming' has a wrong offset!");
static_assert(offsetof(IAnimBp_C_SetAimingBPI, AimType) == 0x000001, "Member 'IAnimBp_C_SetAimingBPI::AimType' has a wrong offset!");

// Function IAnimBp.IAnimBp_C.SetMovementModeBPI
// 0x0001 (0x0001 - 0x0000)
struct IAnimBp_C_SetMovementModeBPI final
{
public:
	MovementMode::EMovementMode                   NewMovementMode;                                   // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(IAnimBp_C_SetMovementModeBPI) == 0x000001, "Wrong alignment on IAnimBp_C_SetMovementModeBPI");
static_assert(sizeof(IAnimBp_C_SetMovementModeBPI) == 0x000001, "Wrong size on IAnimBp_C_SetMovementModeBPI");
static_assert(offsetof(IAnimBp_C_SetMovementModeBPI, NewMovementMode) == 0x000000, "Member 'IAnimBp_C_SetMovementModeBPI::NewMovementMode' has a wrong offset!");

// Function IAnimBp.IAnimBp_C.SetGaitBPI
// 0x0001 (0x0001 - 0x0000)
struct IAnimBp_C_SetGaitBPI final
{
public:
	EGait                                         NewGait;                                           // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(IAnimBp_C_SetGaitBPI) == 0x000001, "Wrong alignment on IAnimBp_C_SetGaitBPI");
static_assert(sizeof(IAnimBp_C_SetGaitBPI) == 0x000001, "Wrong size on IAnimBp_C_SetGaitBPI");
static_assert(offsetof(IAnimBp_C_SetGaitBPI, NewGait) == 0x000000, "Member 'IAnimBp_C_SetGaitBPI::NewGait' has a wrong offset!");

// Function IAnimBp.IAnimBp_C.SavePoseSnapshotBPI
// 0x0008 (0x0008 - 0x0000)
struct IAnimBp_C_SavePoseSnapshotBPI final
{
public:
	class FName                                   PoseName;                                          // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(IAnimBp_C_SavePoseSnapshotBPI) == 0x000004, "Wrong alignment on IAnimBp_C_SavePoseSnapshotBPI");
static_assert(sizeof(IAnimBp_C_SavePoseSnapshotBPI) == 0x000008, "Wrong size on IAnimBp_C_SavePoseSnapshotBPI");
static_assert(offsetof(IAnimBp_C_SavePoseSnapshotBPI, PoseName) == 0x000000, "Member 'IAnimBp_C_SavePoseSnapshotBPI::PoseName' has a wrong offset!");

// Function IAnimBp.IAnimBp_C.PlayGetUpAnimBPI
// 0x0001 (0x0001 - 0x0000)
struct IAnimBp_C_PlayGetUpAnimBPI final
{
public:
	bool                                          FaceDown;                                          // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(IAnimBp_C_PlayGetUpAnimBPI) == 0x000001, "Wrong alignment on IAnimBp_C_PlayGetUpAnimBPI");
static_assert(sizeof(IAnimBp_C_PlayGetUpAnimBPI) == 0x000001, "Wrong size on IAnimBp_C_PlayGetUpAnimBPI");
static_assert(offsetof(IAnimBp_C_PlayGetUpAnimBPI, FaceDown) == 0x000000, "Member 'IAnimBp_C_PlayGetUpAnimBPI::FaceDown' has a wrong offset!");

// Function IAnimBp.IAnimBp_C.AnimNotifyPivotBPI
// 0x0014 (0x0014 - 0x0000)
struct IAnimBp_C_AnimNotifyPivotBPI final
{
public:
	struct FPivotParams                           PivotParameters;                                   // 0x0000(0x0014)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(IAnimBp_C_AnimNotifyPivotBPI) == 0x000004, "Wrong alignment on IAnimBp_C_AnimNotifyPivotBPI");
static_assert(sizeof(IAnimBp_C_AnimNotifyPivotBPI) == 0x000014, "Wrong size on IAnimBp_C_AnimNotifyPivotBPI");
static_assert(offsetof(IAnimBp_C_AnimNotifyPivotBPI, PivotParameters) == 0x000000, "Member 'IAnimBp_C_AnimNotifyPivotBPI::PivotParameters' has a wrong offset!");

// Function IAnimBp.IAnimBp_C.AnimNotifyTurnInPlaceBPI
// 0x0010 (0x0010 - 0x0000)
struct IAnimBp_C_AnimNotifyTurnInPlaceBPI final
{
public:
	class UAnimMontage*                           TurnInPlaceMontage;                                // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ShouldTurnInPlace;                                 // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          TurningInPlace;                                    // 0x0009(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          TurningRight;                                      // 0x000A(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(IAnimBp_C_AnimNotifyTurnInPlaceBPI) == 0x000008, "Wrong alignment on IAnimBp_C_AnimNotifyTurnInPlaceBPI");
static_assert(sizeof(IAnimBp_C_AnimNotifyTurnInPlaceBPI) == 0x000010, "Wrong size on IAnimBp_C_AnimNotifyTurnInPlaceBPI");
static_assert(offsetof(IAnimBp_C_AnimNotifyTurnInPlaceBPI, TurnInPlaceMontage) == 0x000000, "Member 'IAnimBp_C_AnimNotifyTurnInPlaceBPI::TurnInPlaceMontage' has a wrong offset!");
static_assert(offsetof(IAnimBp_C_AnimNotifyTurnInPlaceBPI, ShouldTurnInPlace) == 0x000008, "Member 'IAnimBp_C_AnimNotifyTurnInPlaceBPI::ShouldTurnInPlace' has a wrong offset!");
static_assert(offsetof(IAnimBp_C_AnimNotifyTurnInPlaceBPI, TurningInPlace) == 0x000009, "Member 'IAnimBp_C_AnimNotifyTurnInPlaceBPI::TurningInPlace' has a wrong offset!");
static_assert(offsetof(IAnimBp_C_AnimNotifyTurnInPlaceBPI, TurningRight) == 0x00000A, "Member 'IAnimBp_C_AnimNotifyTurnInPlaceBPI::TurningRight' has a wrong offset!");

// Function IAnimBp.IAnimBp_C.AnimNotifyIdleEntryStateBPI
// 0x0001 (0x0001 - 0x0000)
struct IAnimBp_C_AnimNotifyIdleEntryStateBPI final
{
public:
	EIdleEntryState                               IdleEntryState;                                    // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(IAnimBp_C_AnimNotifyIdleEntryStateBPI) == 0x000001, "Wrong alignment on IAnimBp_C_AnimNotifyIdleEntryStateBPI");
static_assert(sizeof(IAnimBp_C_AnimNotifyIdleEntryStateBPI) == 0x000001, "Wrong size on IAnimBp_C_AnimNotifyIdleEntryStateBPI");
static_assert(offsetof(IAnimBp_C_AnimNotifyIdleEntryStateBPI, IdleEntryState) == 0x000000, "Member 'IAnimBp_C_AnimNotifyIdleEntryStateBPI::IdleEntryState' has a wrong offset!");

// Function IAnimBp.IAnimBp_C.EnableIKandAimOffsetBPI
// 0x0001 (0x0001 - 0x0000)
struct IAnimBp_C_EnableIKandAimOffsetBPI final
{
public:
	bool                                          Enable;                                            // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(IAnimBp_C_EnableIKandAimOffsetBPI) == 0x000001, "Wrong alignment on IAnimBp_C_EnableIKandAimOffsetBPI");
static_assert(sizeof(IAnimBp_C_EnableIKandAimOffsetBPI) == 0x000001, "Wrong size on IAnimBp_C_EnableIKandAimOffsetBPI");
static_assert(offsetof(IAnimBp_C_EnableIKandAimOffsetBPI, Enable) == 0x000000, "Member 'IAnimBp_C_EnableIKandAimOffsetBPI::Enable' has a wrong offset!");

// Function IAnimBp.IAnimBp_C.LaunchRagdollBPI
// 0x0018 (0x0018 - 0x0000)
struct IAnimBp_C_LaunchRagdollBPI final
{
public:
	struct FVector                                TargetLocation;                                    // 0x0000(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Direction;                                         // 0x000C(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(IAnimBp_C_LaunchRagdollBPI) == 0x000004, "Wrong alignment on IAnimBp_C_LaunchRagdollBPI");
static_assert(sizeof(IAnimBp_C_LaunchRagdollBPI) == 0x000018, "Wrong size on IAnimBp_C_LaunchRagdollBPI");
static_assert(offsetof(IAnimBp_C_LaunchRagdollBPI, TargetLocation) == 0x000000, "Member 'IAnimBp_C_LaunchRagdollBPI::TargetLocation' has a wrong offset!");
static_assert(offsetof(IAnimBp_C_LaunchRagdollBPI, Direction) == 0x00000C, "Member 'IAnimBp_C_LaunchRagdollBPI::Direction' has a wrong offset!");

// Function IAnimBp.IAnimBp_C.BeingCarriedCorpseBPI
// 0x0001 (0x0001 - 0x0000)
struct IAnimBp_C_BeingCarriedCorpseBPI final
{
public:
	bool                                          InputValue;                                        // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(IAnimBp_C_BeingCarriedCorpseBPI) == 0x000001, "Wrong alignment on IAnimBp_C_BeingCarriedCorpseBPI");
static_assert(sizeof(IAnimBp_C_BeingCarriedCorpseBPI) == 0x000001, "Wrong size on IAnimBp_C_BeingCarriedCorpseBPI");
static_assert(offsetof(IAnimBp_C_BeingCarriedCorpseBPI, InputValue) == 0x000000, "Member 'IAnimBp_C_BeingCarriedCorpseBPI::InputValue' has a wrong offset!");

// Function IAnimBp.IAnimBp_C.CarryingCorpseBPI
// 0x0001 (0x0001 - 0x0000)
struct IAnimBp_C_CarryingCorpseBPI final
{
public:
	bool                                          InputValue;                                        // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(IAnimBp_C_CarryingCorpseBPI) == 0x000001, "Wrong alignment on IAnimBp_C_CarryingCorpseBPI");
static_assert(sizeof(IAnimBp_C_CarryingCorpseBPI) == 0x000001, "Wrong size on IAnimBp_C_CarryingCorpseBPI");
static_assert(offsetof(IAnimBp_C_CarryingCorpseBPI, InputValue) == 0x000000, "Member 'IAnimBp_C_CarryingCorpseBPI::InputValue' has a wrong offset!");

}

