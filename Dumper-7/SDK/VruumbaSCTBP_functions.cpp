#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: VruumbaSCTBP

#include "Basic.hpp"

#include "VruumbaSCTBP_classes.hpp"
#include "VruumbaSCTBP_parameters.hpp"


namespace SDK
{

// Function VruumbaSCTBP.VruumbaSCTBP_C.ExecuteUbergraph_VruumbaSCTBP
// (Final, UbergraphFunction, HasDefaults)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AVruumbaSCTBP_C::ExecuteUbergraph_VruumbaSCTBP(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VruumbaSCTBP_C", "ExecuteUbergraph_VruumbaSCTBP");

	Params::VruumbaSCTBP_C_ExecuteUbergraph_VruumbaSCTBP Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function VruumbaSCTBP.VruumbaSCTBP_C.Speed Boost Timeline
// (BlueprintCallable, BlueprintEvent)

void AVruumbaSCTBP_C::Speed_Boost_Timeline()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VruumbaSCTBP_C", "Speed Boost Timeline");

	UObject::ProcessEvent(Func, nullptr);
}


// Function VruumbaSCTBP.VruumbaSCTBP_C.Server_New Speed Boost
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)

void AVruumbaSCTBP_C::Server_New_Speed_Boost()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VruumbaSCTBP_C", "Server_New Speed Boost");

	UObject::ProcessEvent(Func, nullptr);
}


// Function VruumbaSCTBP.VruumbaSCTBP_C.Audio No Ammo
// (BlueprintCallable, BlueprintEvent)

void AVruumbaSCTBP_C::Audio_No_Ammo()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VruumbaSCTBP_C", "Audio No Ammo");

	UObject::ProcessEvent(Func, nullptr);
}


// Function VruumbaSCTBP.VruumbaSCTBP_C.Audio Teleport Pressed
// (BlueprintCallable, BlueprintEvent)

void AVruumbaSCTBP_C::Audio_Teleport_Pressed()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VruumbaSCTBP_C", "Audio Teleport Pressed");

	UObject::ProcessEvent(Func, nullptr);
}


// Function VruumbaSCTBP.VruumbaSCTBP_C.Audio Teleport
// (Net, NetClient, BlueprintCallable, BlueprintEvent)

void AVruumbaSCTBP_C::Audio_Teleport()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VruumbaSCTBP_C", "Audio Teleport");

	UObject::ProcessEvent(Func, nullptr);
}


// Function VruumbaSCTBP.VruumbaSCTBP_C.K2_OnSetCustomization
// (Event, Public, BlueprintEvent)
// Parameters:
// class FString                           PlayerAccelByteID                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)

void AVruumbaSCTBP_C::K2_OnSetCustomization(const class FString& PlayerAccelByteID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VruumbaSCTBP_C", "K2_OnSetCustomization");

	Params::VruumbaSCTBP_C_K2_OnSetCustomization Parms{};

	Parms.PlayerAccelByteID = std::move(PlayerAccelByteID);

	UObject::ProcessEvent(Func, &Parms);
}


// Function VruumbaSCTBP.VruumbaSCTBP_C.MultiSetAppearance
// (Net, NetMulticast, BlueprintCallable, BlueprintEvent)

void AVruumbaSCTBP_C::MultiSetAppearance()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VruumbaSCTBP_C", "MultiSetAppearance");

	UObject::ProcessEvent(Func, nullptr);
}


// Function VruumbaSCTBP.VruumbaSCTBP_C.ServerSetAppearance
// (Net, NetServer, BlueprintCallable, BlueprintEvent)

void AVruumbaSCTBP_C::ServerSetAppearance()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VruumbaSCTBP_C", "ServerSetAppearance");

	UObject::ProcessEvent(Func, nullptr);
}


// Function VruumbaSCTBP.VruumbaSCTBP_C.VruumbaRaceScoreReroute
// (Net, NetServer, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AVruumbaRace_C*                   In_Vruumba_Race                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AVruumbaSCTBP_C::VruumbaRaceScoreReroute(class AVruumbaRace_C* In_Vruumba_Race)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VruumbaSCTBP_C", "VruumbaRaceScoreReroute");

	Params::VruumbaSCTBP_C_VruumbaRaceScoreReroute Parms{};

	Parms.In_Vruumba_Race = In_Vruumba_Race;

	UObject::ProcessEvent(Func, &Parms);
}


// Function VruumbaSCTBP.VruumbaSCTBP_C.New Speed Boost
// (BlueprintCallable, BlueprintEvent)

void AVruumbaSCTBP_C::New_Speed_Boost()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VruumbaSCTBP_C", "New Speed Boost");

	UObject::ProcessEvent(Func, nullptr);
}


// Function VruumbaSCTBP.VruumbaSCTBP_C.Audio Race New Global Best
// (BlueprintCallable, BlueprintEvent)

void AVruumbaSCTBP_C::Audio_Race_New_Global_Best()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VruumbaSCTBP_C", "Audio Race New Global Best");

	UObject::ProcessEvent(Func, nullptr);
}


// Function VruumbaSCTBP.VruumbaSCTBP_C.AudioSpeedBoost
// (BlueprintCallable, BlueprintEvent)

void AVruumbaSCTBP_C::AudioSpeedBoost()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VruumbaSCTBP_C", "AudioSpeedBoost");

	UObject::ProcessEvent(Func, nullptr);
}


// Function VruumbaSCTBP.VruumbaSCTBP_C.Audio Boost
// (BlueprintCallable, BlueprintEvent)

void AVruumbaSCTBP_C::Audio_Boost()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VruumbaSCTBP_C", "Audio Boost");

	UObject::ProcessEvent(Func, nullptr);
}


// Function VruumbaSCTBP.VruumbaSCTBP_C.DoubleJumpMulticast
// (Net, NetReliable, NetMulticast, BlueprintCallable, BlueprintEvent)

void AVruumbaSCTBP_C::DoubleJumpMulticast()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VruumbaSCTBP_C", "DoubleJumpMulticast");

	UObject::ProcessEvent(Func, nullptr);
}


// Function VruumbaSCTBP.VruumbaSCTBP_C.DoubleJumpServer
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)

void AVruumbaSCTBP_C::DoubleJumpServer()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VruumbaSCTBP_C", "DoubleJumpServer");

	UObject::ProcessEvent(Func, nullptr);
}


// Function VruumbaSCTBP.VruumbaSCTBP_C.DisableDoubleJump
// (Net, NetReliable, NetMulticast, BlueprintCallable, BlueprintEvent)

void AVruumbaSCTBP_C::DisableDoubleJump()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VruumbaSCTBP_C", "DisableDoubleJump");

	UObject::ProcessEvent(Func, nullptr);
}


// Function VruumbaSCTBP.VruumbaSCTBP_C.VruumbaRaceReroute
// (Net, NetServer, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   Time                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class AVruumbaRace_C*                   InVruumbaRace                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AVruumbaSCTBP_C::VruumbaRaceReroute(float Time, class AVruumbaRace_C* InVruumbaRace)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VruumbaSCTBP_C", "VruumbaRaceReroute");

	Params::VruumbaSCTBP_C_VruumbaRaceReroute Parms{};

	Parms.Time = Time;
	Parms.InVruumbaRace = InVruumbaRace;

	UObject::ProcessEvent(Func, &Parms);
}


// Function VruumbaSCTBP.VruumbaSCTBP_C.Update Race Time
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   Actual_Race_Time                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AVruumbaSCTBP_C::Update_Race_Time(float Actual_Race_Time)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VruumbaSCTBP_C", "Update Race Time");

	Params::VruumbaSCTBP_C_Update_Race_Time Parms{};

	Parms.Actual_Race_Time = Actual_Race_Time;

	UObject::ProcessEvent(Func, &Parms);
}


// Function VruumbaSCTBP.VruumbaSCTBP_C.Audio Race ended
// (BlueprintCallable, BlueprintEvent)

void AVruumbaSCTBP_C::Audio_Race_ended()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VruumbaSCTBP_C", "Audio Race ended");

	UObject::ProcessEvent(Func, nullptr);
}


// Function VruumbaSCTBP.VruumbaSCTBP_C.Audio Race Started
// (BlueprintCallable, BlueprintEvent)

void AVruumbaSCTBP_C::Audio_Race_Started()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VruumbaSCTBP_C", "Audio Race Started");

	UObject::ProcessEvent(Func, nullptr);
}


// Function VruumbaSCTBP.VruumbaSCTBP_C.Audio New personal best
// (BlueprintCallable, BlueprintEvent)

void AVruumbaSCTBP_C::Audio_New_personal_best()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VruumbaSCTBP_C", "Audio New personal best");

	UObject::ProcessEvent(Func, nullptr);
}


// Function VruumbaSCTBP.VruumbaSCTBP_C.Audio Lead Change
// (BlueprintCallable, BlueprintEvent)

void AVruumbaSCTBP_C::Audio_Lead_Change()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VruumbaSCTBP_C", "Audio Lead Change");

	UObject::ProcessEvent(Func, nullptr);
}


// Function VruumbaSCTBP.VruumbaSCTBP_C.Not Carrying Flag
// (Net, NetClient, BlueprintCallable, BlueprintEvent)

void AVruumbaSCTBP_C::Not_Carrying_Flag()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VruumbaSCTBP_C", "Not Carrying Flag");

	UObject::ProcessEvent(Func, nullptr);
}


// Function VruumbaSCTBP.VruumbaSCTBP_C.Carrying Flag
// (Net, NetClient, BlueprintCallable, BlueprintEvent)

void AVruumbaSCTBP_C::Carrying_Flag()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VruumbaSCTBP_C", "Carrying Flag");

	UObject::ProcessEvent(Func, nullptr);
}


// Function VruumbaSCTBP.VruumbaSCTBP_C.Audio Steal Flag
// (Net, NetClient, BlueprintCallable, BlueprintEvent)

void AVruumbaSCTBP_C::Audio_Steal_Flag()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VruumbaSCTBP_C", "Audio Steal Flag");

	UObject::ProcessEvent(Func, nullptr);
}


// Function VruumbaSCTBP.VruumbaSCTBP_C.Audio Leading Player
// (BlueprintCallable, BlueprintEvent)

void AVruumbaSCTBP_C::Audio_Leading_Player()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VruumbaSCTBP_C", "Audio Leading Player");

	UObject::ProcessEvent(Func, nullptr);
}


// Function VruumbaSCTBP.VruumbaSCTBP_C.Audio Lose Flag
// (Net, NetClient, BlueprintCallable, BlueprintEvent)

void AVruumbaSCTBP_C::Audio_Lose_Flag()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VruumbaSCTBP_C", "Audio Lose Flag");

	UObject::ProcessEvent(Func, nullptr);
}


// Function VruumbaSCTBP.VruumbaSCTBP_C.UpdateFlagScore
// (BlueprintCallable, BlueprintEvent)

void AVruumbaSCTBP_C::UpdateFlagScore()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VruumbaSCTBP_C", "UpdateFlagScore");

	UObject::ProcessEvent(Func, nullptr);
}


// Function VruumbaSCTBP.VruumbaSCTBP_C.OwnerProjectileHit
// (Net, NetClient, BlueprintCallable, BlueprintEvent)

void AVruumbaSCTBP_C::OwnerProjectileHit()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VruumbaSCTBP_C", "OwnerProjectileHit");

	UObject::ProcessEvent(Func, nullptr);
}


// Function VruumbaSCTBP.VruumbaSCTBP_C.Audio Suck Stop
// (BlueprintCallable, BlueprintEvent)

void AVruumbaSCTBP_C::Audio_Suck_Stop()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VruumbaSCTBP_C", "Audio Suck Stop");

	UObject::ProcessEvent(Func, nullptr);
}


// Function VruumbaSCTBP.VruumbaSCTBP_C.Audio Suck Start
// (BlueprintCallable, BlueprintEvent)

void AVruumbaSCTBP_C::Audio_Suck_Start()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VruumbaSCTBP_C", "Audio Suck Start");

	UObject::ProcessEvent(Func, nullptr);
}


// Function VruumbaSCTBP.VruumbaSCTBP_C.ServerTrashUpdate
// (Net, NetServer, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   TrashScore_0                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AVruumbaSCTBP_C::ServerTrashUpdate(float TrashScore_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VruumbaSCTBP_C", "ServerTrashUpdate");

	Params::VruumbaSCTBP_C_ServerTrashUpdate Parms{};

	Parms.TrashScore_0 = TrashScore_0;

	UObject::ProcessEvent(Func, &Parms);
}


// Function VruumbaSCTBP.VruumbaSCTBP_C.Audio Become Roomba
// (BlueprintCallable, BlueprintEvent)

void AVruumbaSCTBP_C::Audio_Become_Roomba()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VruumbaSCTBP_C", "Audio Become Roomba");

	UObject::ProcessEvent(Func, nullptr);
}


// Function VruumbaSCTBP.VruumbaSCTBP_C.RTPCs
// (BlueprintCallable, BlueprintEvent)

void AVruumbaSCTBP_C::RTPCs()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VruumbaSCTBP_C", "RTPCs");

	UObject::ProcessEvent(Func, nullptr);
}


// Function VruumbaSCTBP.VruumbaSCTBP_C.DisplayAirlockWidgetBPI
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Show                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void AVruumbaSCTBP_C::DisplayAirlockWidgetBPI(bool Show)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VruumbaSCTBP_C", "DisplayAirlockWidgetBPI");

	Params::VruumbaSCTBP_C_DisplayAirlockWidgetBPI Parms{};

	Parms.Show = Show;

	UObject::ProcessEvent(Func, &Parms);
}


// Function VruumbaSCTBP.VruumbaSCTBP_C.OnLaunched
// (Event, Public, BlueprintEvent)
// Parameters:
// struct FVector                          LaunchVelocity                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    bXYOverride                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    bZOverride                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void AVruumbaSCTBP_C::OnLaunched(const struct FVector& LaunchVelocity, bool bXYOverride, bool bZOverride)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VruumbaSCTBP_C", "OnLaunched");

	Params::VruumbaSCTBP_C_OnLaunched Parms{};

	Parms.LaunchVelocity = std::move(LaunchVelocity);
	Parms.bXYOverride = bXYOverride;
	Parms.bZOverride = bZOverride;

	UObject::ProcessEvent(Func, &Parms);
}


// Function VruumbaSCTBP.VruumbaSCTBP_C.OwningPossessed
// (Net, NetReliable, NetClient, BlueprintCallable, BlueprintEvent)

void AVruumbaSCTBP_C::OwningPossessed()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VruumbaSCTBP_C", "OwningPossessed");

	UObject::ProcessEvent(Func, nullptr);
}


// Function VruumbaSCTBP.VruumbaSCTBP_C.ReceivePossessed
// (Event, Public, BlueprintEvent)
// Parameters:
// class AController*                      NewController                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AVruumbaSCTBP_C::ReceivePossessed(class AController* NewController)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VruumbaSCTBP_C", "ReceivePossessed");

	Params::VruumbaSCTBP_C_ReceivePossessed Parms{};

	Parms.NewController = NewController;

	UObject::ProcessEvent(Func, &Parms);
}


// Function VruumbaSCTBP.VruumbaSCTBP_C.YouHitTheFloor
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   RTPC_Roomba_Volume_0                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AVruumbaSCTBP_C::YouHitTheFloor(float RTPC_Roomba_Volume_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VruumbaSCTBP_C", "YouHitTheFloor");

	Params::VruumbaSCTBP_C_YouHitTheFloor Parms{};

	Parms.RTPC_Roomba_Volume_0 = RTPC_Roomba_Volume_0;

	UObject::ProcessEvent(Func, &Parms);
}


// Function VruumbaSCTBP.VruumbaSCTBP_C.K2_OnMovementModeChanged
// (Event, Public, BlueprintEvent)
// Parameters:
// Engine::EMovementMode                   PrevMovementMode                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// Engine::EMovementMode                   NewMovementMode                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// uint8                                   PrevCustomMode                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// uint8                                   NewCustomMode                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AVruumbaSCTBP_C::K2_OnMovementModeChanged(Engine::EMovementMode PrevMovementMode, Engine::EMovementMode NewMovementMode, uint8 PrevCustomMode, uint8 NewCustomMode)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VruumbaSCTBP_C", "K2_OnMovementModeChanged");

	Params::VruumbaSCTBP_C_K2_OnMovementModeChanged Parms{};

	Parms.PrevMovementMode = PrevMovementMode;
	Parms.NewMovementMode = NewMovementMode;
	Parms.PrevCustomMode = PrevCustomMode;
	Parms.NewCustomMode = NewCustomMode;

	UObject::ProcessEvent(Func, &Parms);
}


// Function VruumbaSCTBP.VruumbaSCTBP_C.Audio state lose traction
// (BlueprintCallable, BlueprintEvent)

void AVruumbaSCTBP_C::Audio_state_lose_traction()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VruumbaSCTBP_C", "Audio state lose traction");

	UObject::ProcessEvent(Func, nullptr);
}


// Function VruumbaSCTBP.VruumbaSCTBP_C.Audio state gain traction
// (BlueprintCallable, BlueprintEvent)

void AVruumbaSCTBP_C::Audio_state_gain_traction()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VruumbaSCTBP_C", "Audio state gain traction");

	UObject::ProcessEvent(Func, nullptr);
}


// Function VruumbaSCTBP.VruumbaSCTBP_C.Started Falling
// (Net, NetClient, BlueprintCallable, BlueprintEvent)

void AVruumbaSCTBP_C::Started_Falling()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VruumbaSCTBP_C", "Started Falling");

	UObject::ProcessEvent(Func, nullptr);
}


// Function VruumbaSCTBP.VruumbaSCTBP_C.Started Flying
// (Net, NetClient, BlueprintCallable, BlueprintEvent)

void AVruumbaSCTBP_C::Started_Flying()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VruumbaSCTBP_C", "Started Flying");

	UObject::ProcessEvent(Func, nullptr);
}


// Function VruumbaSCTBP.VruumbaSCTBP_C.Started Walking
// (Net, NetClient, BlueprintCallable, BlueprintEvent)

void AVruumbaSCTBP_C::Started_Walking()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VruumbaSCTBP_C", "Started Walking");

	UObject::ProcessEvent(Func, nullptr);
}


// Function VruumbaSCTBP.VruumbaSCTBP_C.Audio Flying Boost
// (BlueprintCallable, BlueprintEvent)

void AVruumbaSCTBP_C::Audio_Flying_Boost()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VruumbaSCTBP_C", "Audio Flying Boost");

	UObject::ProcessEvent(Func, nullptr);
}


// Function VruumbaSCTBP.VruumbaSCTBP_C.Audio Fire Torpedo
// (BlueprintCallable, BlueprintEvent)

void AVruumbaSCTBP_C::Audio_Fire_Torpedo()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VruumbaSCTBP_C", "Audio Fire Torpedo");

	UObject::ProcessEvent(Func, nullptr);
}


// Function VruumbaSCTBP.VruumbaSCTBP_C.Audio Jump
// (BlueprintCallable, BlueprintEvent)

void AVruumbaSCTBP_C::Audio_Jump()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VruumbaSCTBP_C", "Audio Jump");

	UObject::ProcessEvent(Func, nullptr);
}


// Function VruumbaSCTBP.VruumbaSCTBP_C.Audio Grounded Impact
// (BlueprintCallable, BlueprintEvent)

void AVruumbaSCTBP_C::Audio_Grounded_Impact()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VruumbaSCTBP_C", "Audio Grounded Impact");

	UObject::ProcessEvent(Func, nullptr);
}


// Function VruumbaSCTBP.VruumbaSCTBP_C.Audio Falling Mode
// (BlueprintCallable, BlueprintEvent)

void AVruumbaSCTBP_C::Audio_Falling_Mode()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VruumbaSCTBP_C", "Audio Falling Mode");

	UObject::ProcessEvent(Func, nullptr);
}


// Function VruumbaSCTBP.VruumbaSCTBP_C.Audio Flying Mode
// (BlueprintCallable, BlueprintEvent)

void AVruumbaSCTBP_C::Audio_Flying_Mode()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VruumbaSCTBP_C", "Audio Flying Mode");

	UObject::ProcessEvent(Func, nullptr);
}


// Function VruumbaSCTBP.VruumbaSCTBP_C.Audio Driving Mode
// (BlueprintCallable, BlueprintEvent)

void AVruumbaSCTBP_C::Audio_Driving_Mode()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VruumbaSCTBP_C", "Audio Driving Mode");

	UObject::ProcessEvent(Func, nullptr);
}


// Function VruumbaSCTBP.VruumbaSCTBP_C.SpawnProjectileServer
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FTransform                       SpawnTransform                                         (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)

void AVruumbaSCTBP_C::SpawnProjectileServer(const struct FTransform& SpawnTransform)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VruumbaSCTBP_C", "SpawnProjectileServer");

	Params::VruumbaSCTBP_C_SpawnProjectileServer Parms{};

	Parms.SpawnTransform = std::move(SpawnTransform);

	UObject::ProcessEvent(Func, &Parms);
}


// Function VruumbaSCTBP.VruumbaSCTBP_C.SetFlyingModeMulticast
// (Net, NetReliable, NetMulticast, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Flying                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void AVruumbaSCTBP_C::SetFlyingModeMulticast(bool Flying)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VruumbaSCTBP_C", "SetFlyingModeMulticast");

	Params::VruumbaSCTBP_C_SetFlyingModeMulticast Parms{};

	Parms.Flying = Flying;

	UObject::ProcessEvent(Func, &Parms);
}


// Function VruumbaSCTBP.VruumbaSCTBP_C.SetFlyingModeServer
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Flying                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void AVruumbaSCTBP_C::SetFlyingModeServer(bool Flying)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VruumbaSCTBP_C", "SetFlyingModeServer");

	Params::VruumbaSCTBP_C_SetFlyingModeServer Parms{};

	Parms.Flying = Flying;

	UObject::ProcessEvent(Func, &Parms);
}


// Function VruumbaSCTBP.VruumbaSCTBP_C.StopAllTrash
// (BlueprintCallable, BlueprintEvent)

void AVruumbaSCTBP_C::StopAllTrash()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VruumbaSCTBP_C", "StopAllTrash");

	UObject::ProcessEvent(Func, nullptr);
}


// Function VruumbaSCTBP.VruumbaSCTBP_C.ServerSpectatorMode
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)

void AVruumbaSCTBP_C::ServerSpectatorMode()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VruumbaSCTBP_C", "ServerSpectatorMode");

	UObject::ProcessEvent(Func, nullptr);
}


// Function VruumbaSCTBP.VruumbaSCTBP_C.InitiateTrashSpawn
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)

void AVruumbaSCTBP_C::InitiateTrashSpawn()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VruumbaSCTBP_C", "InitiateTrashSpawn");

	UObject::ProcessEvent(Func, nullptr);
}


// Function VruumbaSCTBP.VruumbaSCTBP_C.VacuumServer
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    VacuumOn_0                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void AVruumbaSCTBP_C::VacuumServer(bool VacuumOn_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VruumbaSCTBP_C", "VacuumServer");

	Params::VruumbaSCTBP_C_VacuumServer Parms{};

	Parms.VacuumOn_0 = VacuumOn_0;

	UObject::ProcessEvent(Func, &Parms);
}


// Function VruumbaSCTBP.VruumbaSCTBP_C.SpawnTrashClients
// (Net, NetReliable, NetMulticast, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FVector                          Spawn_Transform_Location                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AVruumbaSCTBP_C::SpawnTrashClients(const struct FVector& Spawn_Transform_Location)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VruumbaSCTBP_C", "SpawnTrashClients");

	Params::VruumbaSCTBP_C_SpawnTrashClients Parms{};

	Parms.Spawn_Transform_Location = std::move(Spawn_Transform_Location);

	UObject::ProcessEvent(Func, &Parms);
}


// Function VruumbaSCTBP.VruumbaSCTBP_C.SpawnDebrisServer
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)

void AVruumbaSCTBP_C::SpawnDebrisServer()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VruumbaSCTBP_C", "SpawnDebrisServer");

	UObject::ProcessEvent(Func, nullptr);
}


// Function VruumbaSCTBP.VruumbaSCTBP_C.ServerTeleport
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)

void AVruumbaSCTBP_C::ServerTeleport()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VruumbaSCTBP_C", "ServerTeleport");

	UObject::ProcessEvent(Func, nullptr);
}


// Function VruumbaSCTBP.VruumbaSCTBP_C.ServerGravity
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   GravityScale                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AVruumbaSCTBP_C::ServerGravity(float GravityScale)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VruumbaSCTBP_C", "ServerGravity");

	Params::VruumbaSCTBP_C_ServerGravity Parms{};

	Parms.GravityScale = GravityScale;

	UObject::ProcessEvent(Func, &Parms);
}


// Function VruumbaSCTBP.VruumbaSCTBP_C.ReceiveTick
// (Event, Public, BlueprintEvent)
// Parameters:
// float                                   DeltaSeconds                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AVruumbaSCTBP_C::ReceiveTick(float DeltaSeconds)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VruumbaSCTBP_C", "ReceiveTick");

	Params::VruumbaSCTBP_C_ReceiveTick Parms{};

	Parms.DeltaSeconds = DeltaSeconds;

	UObject::ProcessEvent(Func, &Parms);
}


// Function VruumbaSCTBP.VruumbaSCTBP_C.ReceiveBeginPlay
// (Event, Protected, BlueprintEvent)

void AVruumbaSCTBP_C::ReceiveBeginPlay()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VruumbaSCTBP_C", "ReceiveBeginPlay");

	UObject::ProcessEvent(Func, nullptr);
}


// Function VruumbaSCTBP.VruumbaSCTBP_C.LogOutBPI
// (Public, BlueprintCallable, BlueprintEvent)

void AVruumbaSCTBP_C::LogOutBPI()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VruumbaSCTBP_C", "LogOutBPI");

	UObject::ProcessEvent(Func, nullptr);
}


// Function VruumbaSCTBP.VruumbaSCTBP_C.AddAlcoholBPI
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   InputValue                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Delay                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void AVruumbaSCTBP_C::AddAlcoholBPI(float InputValue, bool Delay)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VruumbaSCTBP_C", "AddAlcoholBPI");

	Params::VruumbaSCTBP_C_AddAlcoholBPI Parms{};

	Parms.InputValue = InputValue;
	Parms.Delay = Delay;

	UObject::ProcessEvent(Func, &Parms);
}


// Function VruumbaSCTBP.VruumbaSCTBP_C.TeleportLocationRotationBPI
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FVector                          TargetLocation                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FRotator                         TargetRotation                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void AVruumbaSCTBP_C::TeleportLocationRotationBPI(const struct FVector& TargetLocation, const struct FRotator& TargetRotation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VruumbaSCTBP_C", "TeleportLocationRotationBPI");

	Params::VruumbaSCTBP_C_TeleportLocationRotationBPI Parms{};

	Parms.TargetLocation = std::move(TargetLocation);
	Parms.TargetRotation = std::move(TargetRotation);

	UObject::ProcessEvent(Func, &Parms);
}


// Function VruumbaSCTBP.VruumbaSCTBP_C.EnableIK&AimDelayBPI
// (Public, BlueprintCallable, BlueprintEvent)

void AVruumbaSCTBP_C::EnableIK_AimDelayBPI()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VruumbaSCTBP_C", "EnableIK&AimDelayBPI");

	UObject::ProcessEvent(Func, nullptr);
}


// Function VruumbaSCTBP.VruumbaSCTBP_C.SetDestinyBPI
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// EFate                                   Fate                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          Impulse                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AVruumbaSCTBP_C::SetDestinyBPI(EFate Fate, const struct FVector& Impulse)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VruumbaSCTBP_C", "SetDestinyBPI");

	Params::VruumbaSCTBP_C_SetDestinyBPI Parms{};

	Parms.Fate = Fate;
	Parms.Impulse = std::move(Impulse);

	UObject::ProcessEvent(Func, &Parms);
}


// Function VruumbaSCTBP.VruumbaSCTBP_C.PassengerLogVoteBPI
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           AirlockTarget                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class ACharacter*                       TargetCharacter                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class ACharacter*                       VotingCharacter                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AVruumbaSCTBP_C::PassengerLogVoteBPI(class AActor* AirlockTarget, class ACharacter* TargetCharacter, class ACharacter* VotingCharacter)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VruumbaSCTBP_C", "PassengerLogVoteBPI");

	Params::VruumbaSCTBP_C_PassengerLogVoteBPI Parms{};

	Parms.AirlockTarget = AirlockTarget;
	Parms.TargetCharacter = TargetCharacter;
	Parms.VotingCharacter = VotingCharacter;

	UObject::ProcessEvent(Func, &Parms);
}


// Function VruumbaSCTBP.VruumbaSCTBP_C.TrustVoteBPI
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           TargetAirlock                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Yes                                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// class ACharacter*                       VotingCharacter                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AVruumbaSCTBP_C::TrustVoteBPI(class AActor* TargetAirlock, bool Yes, class ACharacter* VotingCharacter)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VruumbaSCTBP_C", "TrustVoteBPI");

	Params::VruumbaSCTBP_C_TrustVoteBPI Parms{};

	Parms.TargetAirlock = TargetAirlock;
	Parms.Yes = Yes;
	Parms.VotingCharacter = VotingCharacter;

	UObject::ProcessEvent(Func, &Parms);
}


// Function VruumbaSCTBP.VruumbaSCTBP_C.EliminationVoteBPI
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           AirlockTarget                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class ACharacter*                       VotedCharacter                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class ACharacter*                       VotingCharacter                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AVruumbaSCTBP_C::EliminationVoteBPI(class AActor* AirlockTarget, class ACharacter* VotedCharacter, class ACharacter* VotingCharacter)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VruumbaSCTBP_C", "EliminationVoteBPI");

	Params::VruumbaSCTBP_C_EliminationVoteBPI Parms{};

	Parms.AirlockTarget = AirlockTarget;
	Parms.VotedCharacter = VotedCharacter;
	Parms.VotingCharacter = VotingCharacter;

	UObject::ProcessEvent(Func, &Parms);
}


// Function VruumbaSCTBP.VruumbaSCTBP_C.InitiateAirlockSequenceBPI
// (Public, BlueprintCallable, BlueprintEvent)

void AVruumbaSCTBP_C::InitiateAirlockSequenceBPI()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VruumbaSCTBP_C", "InitiateAirlockSequenceBPI");

	UObject::ProcessEvent(Func, nullptr);
}


// Function VruumbaSCTBP.VruumbaSCTBP_C.StartElevatorBPI
// (Public, BlueprintCallable, BlueprintEvent)

void AVruumbaSCTBP_C::StartElevatorBPI()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VruumbaSCTBP_C", "StartElevatorBPI");

	UObject::ProcessEvent(Func, nullptr);
}


// Function VruumbaSCTBP.VruumbaSCTBP_C.SetAimingStateBPI
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Aiming                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// uint8                                   AimType                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AVruumbaSCTBP_C::SetAimingStateBPI(bool Aiming, uint8 AimType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VruumbaSCTBP_C", "SetAimingStateBPI");

	Params::VruumbaSCTBP_C_SetAimingStateBPI Parms{};

	Parms.Aiming = Aiming;
	Parms.AimType = AimType;

	UObject::ProcessEvent(Func, &Parms);
}


// Function VruumbaSCTBP.VruumbaSCTBP_C.RagdollCharacterBPI
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    ToRagdoll                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// float                                   Duration                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          OptionalImpulse                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Force                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void AVruumbaSCTBP_C::RagdollCharacterBPI(bool ToRagdoll, float Duration, const struct FVector& OptionalImpulse, bool Force)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VruumbaSCTBP_C", "RagdollCharacterBPI");

	Params::VruumbaSCTBP_C_RagdollCharacterBPI Parms{};

	Parms.ToRagdoll = ToRagdoll;
	Parms.Duration = Duration;
	Parms.OptionalImpulse = std::move(OptionalImpulse);
	Parms.Force = Force;

	UObject::ProcessEvent(Func, &Parms);
}


// Function VruumbaSCTBP.VruumbaSCTBP_C.InpActEvt_VruumbaFly_K2Node_InputActionEvent_0
// (BlueprintEvent)
// Parameters:
// struct FKey                             Key                                                    (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)

void AVruumbaSCTBP_C::InpActEvt_VruumbaFly_K2Node_InputActionEvent_0(const struct FKey& Key)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VruumbaSCTBP_C", "InpActEvt_VruumbaFly_K2Node_InputActionEvent_0");

	Params::VruumbaSCTBP_C_InpActEvt_VruumbaFly_K2Node_InputActionEvent_0 Parms{};

	Parms.Key = std::move(Key);

	UObject::ProcessEvent(Func, &Parms);
}


// Function VruumbaSCTBP.VruumbaSCTBP_C.InpActEvt_VruumbaHoover_K2Node_InputActionEvent_1
// (BlueprintEvent)
// Parameters:
// struct FKey                             Key                                                    (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)

void AVruumbaSCTBP_C::InpActEvt_VruumbaHoover_K2Node_InputActionEvent_1(const struct FKey& Key)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VruumbaSCTBP_C", "InpActEvt_VruumbaHoover_K2Node_InputActionEvent_1");

	Params::VruumbaSCTBP_C_InpActEvt_VruumbaHoover_K2Node_InputActionEvent_1 Parms{};

	Parms.Key = std::move(Key);

	UObject::ProcessEvent(Func, &Parms);
}


// Function VruumbaSCTBP.VruumbaSCTBP_C.InpActEvt_VruumbaHoover_K2Node_InputActionEvent_2
// (BlueprintEvent)
// Parameters:
// struct FKey                             Key                                                    (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)

void AVruumbaSCTBP_C::InpActEvt_VruumbaHoover_K2Node_InputActionEvent_2(const struct FKey& Key)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VruumbaSCTBP_C", "InpActEvt_VruumbaHoover_K2Node_InputActionEvent_2");

	Params::VruumbaSCTBP_C_InpActEvt_VruumbaHoover_K2Node_InputActionEvent_2 Parms{};

	Parms.Key = std::move(Key);

	UObject::ProcessEvent(Func, &Parms);
}


// Function VruumbaSCTBP.VruumbaSCTBP_C.InpActEvt_PrimaryUseRoleItem_K2Node_InputActionEvent_3
// (BlueprintEvent)
// Parameters:
// struct FKey                             Key                                                    (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)

void AVruumbaSCTBP_C::InpActEvt_PrimaryUseRoleItem_K2Node_InputActionEvent_3(const struct FKey& Key)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VruumbaSCTBP_C", "InpActEvt_PrimaryUseRoleItem_K2Node_InputActionEvent_3");

	Params::VruumbaSCTBP_C_InpActEvt_PrimaryUseRoleItem_K2Node_InputActionEvent_3 Parms{};

	Parms.Key = std::move(Key);

	UObject::ProcessEvent(Func, &Parms);
}


// Function VruumbaSCTBP.VruumbaSCTBP_C.OnSuccess_19CA9B374C71051C12033894EF38DCA4
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FFCTCloudCustomizationVruumba    Payload                                                (BlueprintVisible, BlueprintReadOnly, Parm)
// int32                                   Code                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FString                           Message                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)

void AVruumbaSCTBP_C::OnSuccess_19CA9B374C71051C12033894EF38DCA4(const struct FFCTCloudCustomizationVruumba& Payload, int32 Code, const class FString& Message)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VruumbaSCTBP_C", "OnSuccess_19CA9B374C71051C12033894EF38DCA4");

	Params::VruumbaSCTBP_C_OnSuccess_19CA9B374C71051C12033894EF38DCA4 Parms{};

	Parms.Payload = std::move(Payload);
	Parms.Code = Code;
	Parms.Message = std::move(Message);

	UObject::ProcessEvent(Func, &Parms);
}


// Function VruumbaSCTBP.VruumbaSCTBP_C.OnError_19CA9B374C71051C12033894EF38DCA4
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FFCTCloudCustomizationVruumba    Payload                                                (BlueprintVisible, BlueprintReadOnly, Parm)
// int32                                   Code                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FString                           Message                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)

void AVruumbaSCTBP_C::OnError_19CA9B374C71051C12033894EF38DCA4(const struct FFCTCloudCustomizationVruumba& Payload, int32 Code, const class FString& Message)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VruumbaSCTBP_C", "OnError_19CA9B374C71051C12033894EF38DCA4");

	Params::VruumbaSCTBP_C_OnError_19CA9B374C71051C12033894EF38DCA4 Parms{};

	Parms.Payload = std::move(Payload);
	Parms.Code = Code;
	Parms.Message = std::move(Message);

	UObject::ProcessEvent(Func, &Parms);
}


// Function VruumbaSCTBP.VruumbaSCTBP_C.InpActEvt_MouseScrollDown_K2Node_InputKeyEvent_0
// (BlueprintEvent)
// Parameters:
// struct FKey                             Key                                                    (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)

void AVruumbaSCTBP_C::InpActEvt_MouseScrollDown_K2Node_InputKeyEvent_0(const struct FKey& Key)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VruumbaSCTBP_C", "InpActEvt_MouseScrollDown_K2Node_InputKeyEvent_0");

	Params::VruumbaSCTBP_C_InpActEvt_MouseScrollDown_K2Node_InputKeyEvent_0 Parms{};

	Parms.Key = std::move(Key);

	UObject::ProcessEvent(Func, &Parms);
}


// Function VruumbaSCTBP.VruumbaSCTBP_C.InpActEvt_MouseScrollUp_K2Node_InputKeyEvent_1
// (BlueprintEvent)
// Parameters:
// struct FKey                             Key                                                    (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)

void AVruumbaSCTBP_C::InpActEvt_MouseScrollUp_K2Node_InputKeyEvent_1(const struct FKey& Key)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VruumbaSCTBP_C", "InpActEvt_MouseScrollUp_K2Node_InputKeyEvent_1");

	Params::VruumbaSCTBP_C_InpActEvt_MouseScrollUp_K2Node_InputKeyEvent_1 Parms{};

	Parms.Key = std::move(Key);

	UObject::ProcessEvent(Func, &Parms);
}


// Function VruumbaSCTBP.VruumbaSCTBP_C.InpActEvt_U_K2Node_InputKeyEvent_2
// (BlueprintEvent)
// Parameters:
// struct FKey                             Key                                                    (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)

void AVruumbaSCTBP_C::InpActEvt_U_K2Node_InputKeyEvent_2(const struct FKey& Key)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VruumbaSCTBP_C", "InpActEvt_U_K2Node_InputKeyEvent_2");

	Params::VruumbaSCTBP_C_InpActEvt_U_K2Node_InputKeyEvent_2 Parms{};

	Parms.Key = std::move(Key);

	UObject::ProcessEvent(Func, &Parms);
}


// Function VruumbaSCTBP.VruumbaSCTBP_C.InpActEvt_Crouch_K2Node_InputActionEvent_4
// (BlueprintEvent)
// Parameters:
// struct FKey                             Key                                                    (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)

void AVruumbaSCTBP_C::InpActEvt_Crouch_K2Node_InputActionEvent_4(const struct FKey& Key)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VruumbaSCTBP_C", "InpActEvt_Crouch_K2Node_InputActionEvent_4");

	Params::VruumbaSCTBP_C_InpActEvt_Crouch_K2Node_InputActionEvent_4 Parms{};

	Parms.Key = std::move(Key);

	UObject::ProcessEvent(Func, &Parms);
}


// Function VruumbaSCTBP.VruumbaSCTBP_C.InpActEvt_Jump_K2Node_InputActionEvent_5
// (BlueprintEvent)
// Parameters:
// struct FKey                             Key                                                    (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)

void AVruumbaSCTBP_C::InpActEvt_Jump_K2Node_InputActionEvent_5(const struct FKey& Key)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VruumbaSCTBP_C", "InpActEvt_Jump_K2Node_InputActionEvent_5");

	Params::VruumbaSCTBP_C_InpActEvt_Jump_K2Node_InputActionEvent_5 Parms{};

	Parms.Key = std::move(Key);

	UObject::ProcessEvent(Func, &Parms);
}


// Function VruumbaSCTBP.VruumbaSCTBP_C.InpActEvt_Jump_K2Node_InputActionEvent_6
// (BlueprintEvent)
// Parameters:
// struct FKey                             Key                                                    (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)

void AVruumbaSCTBP_C::InpActEvt_Jump_K2Node_InputActionEvent_6(const struct FKey& Key)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VruumbaSCTBP_C", "InpActEvt_Jump_K2Node_InputActionEvent_6");

	Params::VruumbaSCTBP_C_InpActEvt_Jump_K2Node_InputActionEvent_6 Parms{};

	Parms.Key = std::move(Key);

	UObject::ProcessEvent(Func, &Parms);
}


// Function VruumbaSCTBP.VruumbaSCTBP_C.Flyspeed__UpdateFunc
// (BlueprintEvent)

void AVruumbaSCTBP_C::Flyspeed__UpdateFunc()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VruumbaSCTBP_C", "Flyspeed__UpdateFunc");

	UObject::ProcessEvent(Func, nullptr);
}


// Function VruumbaSCTBP.VruumbaSCTBP_C.Flyspeed__FinishedFunc
// (BlueprintEvent)

void AVruumbaSCTBP_C::Flyspeed__FinishedFunc()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VruumbaSCTBP_C", "Flyspeed__FinishedFunc");

	UObject::ProcessEvent(Func, nullptr);
}


// Function VruumbaSCTBP.VruumbaSCTBP_C.Timeline_0__UpdateFunc
// (BlueprintEvent)

void AVruumbaSCTBP_C::Timeline_0__UpdateFunc()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VruumbaSCTBP_C", "Timeline_0__UpdateFunc");

	UObject::ProcessEvent(Func, nullptr);
}


// Function VruumbaSCTBP.VruumbaSCTBP_C.Timeline_0__FinishedFunc
// (BlueprintEvent)

void AVruumbaSCTBP_C::Timeline_0__FinishedFunc()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VruumbaSCTBP_C", "Timeline_0__FinishedFunc");

	UObject::ProcessEvent(Func, nullptr);
}


// Function VruumbaSCTBP.VruumbaSCTBP_C.UserConstructionScript
// (Event, Public, BlueprintCallable, BlueprintEvent)

void AVruumbaSCTBP_C::UserConstructionScript()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VruumbaSCTBP_C", "UserConstructionScript");

	UObject::ProcessEvent(Func, nullptr);
}


// Function VruumbaSCTBP.VruumbaSCTBP_C.OnRep_BounceCoefficient
// (BlueprintCallable, BlueprintEvent)

void AVruumbaSCTBP_C::OnRep_BounceCoefficient()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VruumbaSCTBP_C", "OnRep_BounceCoefficient");

	UObject::ProcessEvent(Func, nullptr);
}


// Function VruumbaSCTBP.VruumbaSCTBP_C.SetIsVisibleAndPhysical
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bNewVisibility                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void AVruumbaSCTBP_C::SetIsVisibleAndPhysical(bool bNewVisibility)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VruumbaSCTBP_C", "SetIsVisibleAndPhysical");

	Params::VruumbaSCTBP_C_SetIsVisibleAndPhysical Parms{};

	Parms.bNewVisibility = bNewVisibility;

	UObject::ProcessEvent(Func, &Parms);
}


// Function VruumbaSCTBP.VruumbaSCTBP_C.AddWidget
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UClass*                           Class_0                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AVruumbaSCTBP_C::AddWidget(class UClass* Class_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VruumbaSCTBP_C", "AddWidget");

	Params::VruumbaSCTBP_C_AddWidget Parms{};

	Parms.Class_0 = Class_0;

	UObject::ProcessEvent(Func, &Parms);
}


// Function VruumbaSCTBP.VruumbaSCTBP_C.OrientToMovement
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void AVruumbaSCTBP_C::OrientToMovement()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VruumbaSCTBP_C", "OrientToMovement");

	UObject::ProcessEvent(Func, nullptr);
}


// Function VruumbaSCTBP.VruumbaSCTBP_C.CalculateFloorDistance
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void AVruumbaSCTBP_C::CalculateFloorDistance()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VruumbaSCTBP_C", "CalculateFloorDistance");

	UObject::ProcessEvent(Func, nullptr);
}


// Function VruumbaSCTBP.VruumbaSCTBP_C.CalcCameraDistance
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// float                                   Distance                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AVruumbaSCTBP_C::CalcCameraDistance(float* Distance)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VruumbaSCTBP_C", "CalcCameraDistance");

	Params::VruumbaSCTBP_C_CalcCameraDistance Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Distance != nullptr)
		*Distance = Parms.Distance;
}


// Function VruumbaSCTBP.VruumbaSCTBP_C.GetAlivePlayers
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<class ACharacter*>               Players                                                (Parm, OutParm)

void AVruumbaSCTBP_C::GetAlivePlayers(TArray<class ACharacter*>* Players)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VruumbaSCTBP_C", "GetAlivePlayers");

	Params::VruumbaSCTBP_C_GetAlivePlayers Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Players != nullptr)
		*Players = std::move(Parms.Players);
}


// Function VruumbaSCTBP.VruumbaSCTBP_C.SetTrashVisible
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void AVruumbaSCTBP_C::SetTrashVisible()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VruumbaSCTBP_C", "SetTrashVisible");

	UObject::ProcessEvent(Func, nullptr);
}


// Function VruumbaSCTBP.VruumbaSCTBP_C.WidgetProjectileCooldown
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    OnCooldown                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void AVruumbaSCTBP_C::WidgetProjectileCooldown(bool OnCooldown)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VruumbaSCTBP_C", "WidgetProjectileCooldown");

	Params::VruumbaSCTBP_C_WidgetProjectileCooldown Parms{};

	Parms.OnCooldown = OnCooldown;

	UObject::ProcessEvent(Func, &Parms);
}


// Function VruumbaSCTBP.VruumbaSCTBP_C.WidgetTeleportCooldown
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    OnCooldown                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void AVruumbaSCTBP_C::WidgetTeleportCooldown(bool OnCooldown)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VruumbaSCTBP_C", "WidgetTeleportCooldown");

	Params::VruumbaSCTBP_C_WidgetTeleportCooldown Parms{};

	Parms.OnCooldown = OnCooldown;

	UObject::ProcessEvent(Func, &Parms);
}


// Function VruumbaSCTBP.VruumbaSCTBP_C.TryUpdateProjectilWidget
// (Public, BlueprintCallable, BlueprintEvent)

void AVruumbaSCTBP_C::TryUpdateProjectilWidget()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VruumbaSCTBP_C", "TryUpdateProjectilWidget");

	UObject::ProcessEvent(Func, nullptr);
}


// Function VruumbaSCTBP.VruumbaSCTBP_C.Trash Display Update
// (Public, BlueprintCallable, BlueprintEvent)

void AVruumbaSCTBP_C::Trash_Display_Update()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VruumbaSCTBP_C", "Trash Display Update");

	UObject::ProcessEvent(Func, nullptr);
}


// Function VruumbaSCTBP.VruumbaSCTBP_C.OnRep_TrashScore
// (BlueprintCallable, BlueprintEvent)

void AVruumbaSCTBP_C::OnRep_TrashScore()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VruumbaSCTBP_C", "OnRep_TrashScore");

	UObject::ProcessEvent(Func, nullptr);
}


// Function VruumbaSCTBP.VruumbaSCTBP_C.Set Flag Visible
// (Public, BlueprintCallable, BlueprintEvent)

void AVruumbaSCTBP_C::Set_Flag_Visible()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VruumbaSCTBP_C", "Set Flag Visible");

	UObject::ProcessEvent(Func, nullptr);
}


// Function VruumbaSCTBP.VruumbaSCTBP_C.OnRep_FlagScore
// (BlueprintCallable, BlueprintEvent)

void AVruumbaSCTBP_C::OnRep_FlagScore()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VruumbaSCTBP_C", "OnRep_FlagScore");

	UObject::ProcessEvent(Func, nullptr);
}


// Function VruumbaSCTBP.VruumbaSCTBP_C.Audio Set 3D RTPC
// (Public, BlueprintCallable, BlueprintEvent)

void AVruumbaSCTBP_C::Audio_Set_3D_RTPC()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VruumbaSCTBP_C", "Audio Set 3D RTPC");

	UObject::ProcessEvent(Func, nullptr);
}


// Function VruumbaSCTBP.VruumbaSCTBP_C.Set Race Visible
// (Public, BlueprintCallable, BlueprintEvent)

void AVruumbaSCTBP_C::Set_Race_Visible()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VruumbaSCTBP_C", "Set Race Visible");

	UObject::ProcessEvent(Func, nullptr);
}


// Function VruumbaSCTBP.VruumbaSCTBP_C.Check Best Personal Race Time
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   BestPersonalTime                                       (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AVruumbaSCTBP_C::Check_Best_Personal_Race_Time(float* BestPersonalTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VruumbaSCTBP_C", "Check Best Personal Race Time");

	Params::VruumbaSCTBP_C_Check_Best_Personal_Race_Time Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (BestPersonalTime != nullptr)
		*BestPersonalTime = Parms.BestPersonalTime;
}


// Function VruumbaSCTBP.VruumbaSCTBP_C.Select Vroomba Mesh
// (Public, BlueprintCallable, BlueprintEvent)

void AVruumbaSCTBP_C::Select_Vroomba_Mesh()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VruumbaSCTBP_C", "Select Vroomba Mesh");

	UObject::ProcessEvent(Func, nullptr);
}


// Function VruumbaSCTBP.VruumbaSCTBP_C.Randomize Vroomba Mesh
// (Public, BlueprintCallable, BlueprintEvent)

void AVruumbaSCTBP_C::Randomize_Vroomba_Mesh()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VruumbaSCTBP_C", "Randomize Vroomba Mesh");

	UObject::ProcessEvent(Func, nullptr);
}


// Function VruumbaSCTBP.VruumbaSCTBP_C.FadeFromBlack
// (Public, BlueprintCallable, BlueprintEvent)

void AVruumbaSCTBP_C::FadeFromBlack()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VruumbaSCTBP_C", "FadeFromBlack");

	UObject::ProcessEvent(Func, nullptr);
}


// Function VruumbaSCTBP.VruumbaSCTBP_C.InitiateCharacterHider
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void AVruumbaSCTBP_C::InitiateCharacterHider()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VruumbaSCTBP_C", "InitiateCharacterHider");

	UObject::ProcessEvent(Func, nullptr);
}


// Function VruumbaSCTBP.VruumbaSCTBP_C.Double Jump Launch
// (Public, BlueprintCallable, BlueprintEvent)

void AVruumbaSCTBP_C::Double_Jump_Launch()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VruumbaSCTBP_C", "Double Jump Launch");

	UObject::ProcessEvent(Func, nullptr);
}


// Function VruumbaSCTBP.VruumbaSCTBP_C.Double Jump Boosts
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void AVruumbaSCTBP_C::Double_Jump_Boosts()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VruumbaSCTBP_C", "Double Jump Boosts");

	UObject::ProcessEvent(Func, nullptr);
}


// Function VruumbaSCTBP.VruumbaSCTBP_C.Jump WI
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void AVruumbaSCTBP_C::Jump_WI()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VruumbaSCTBP_C", "Jump WI");

	UObject::ProcessEvent(Func, nullptr);
}


// Function VruumbaSCTBP.VruumbaSCTBP_C.Set Boosters Visible
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void AVruumbaSCTBP_C::Set_Boosters_Visible()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VruumbaSCTBP_C", "Set Boosters Visible");

	UObject::ProcessEvent(Func, nullptr);
}


// Function VruumbaSCTBP.VruumbaSCTBP_C.QueryShouldHide
// (Public, BlueprintCallable, BlueprintEvent)

void AVruumbaSCTBP_C::QueryShouldHide()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VruumbaSCTBP_C", "QueryShouldHide");

	UObject::ProcessEvent(Func, nullptr);
}


// Function VruumbaSCTBP.VruumbaSCTBP_C.UpdateLocalTrashWidget
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void AVruumbaSCTBP_C::UpdateLocalTrashWidget()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VruumbaSCTBP_C", "UpdateLocalTrashWidget");

	UObject::ProcessEvent(Func, nullptr);
}


// Function VruumbaSCTBP.VruumbaSCTBP_C.CreateBodyCustomization
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class USkeletalMesh*                    NewBodyMesh                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UClass*                           NewAnimBP                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// TArray<class UMaterialInterface*>       NewBodyMaterials                                       (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)

void AVruumbaSCTBP_C::CreateBodyCustomization(class USkeletalMesh* NewBodyMesh, class UClass* NewAnimBP, TArray<class UMaterialInterface*>& NewBodyMaterials)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VruumbaSCTBP_C", "CreateBodyCustomization");

	Params::VruumbaSCTBP_C_CreateBodyCustomization Parms{};

	Parms.NewBodyMesh = NewBodyMesh;
	Parms.NewAnimBP = NewAnimBP;
	Parms.NewBodyMaterials = std::move(NewBodyMaterials);

	UObject::ProcessEvent(Func, &Parms);

	NewBodyMaterials = std::move(Parms.NewBodyMaterials);
}


// Function VruumbaSCTBP.VruumbaSCTBP_C.Create Exhaust Particle Systems
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UParticleSystem*                  NewParticleSystem                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AVruumbaSCTBP_C::Create_Exhaust_Particle_Systems(class UParticleSystem* NewParticleSystem)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VruumbaSCTBP_C", "Create Exhaust Particle Systems");

	Params::VruumbaSCTBP_C_Create_Exhaust_Particle_Systems Parms{};

	Parms.NewParticleSystem = NewParticleSystem;

	UObject::ProcessEvent(Func, &Parms);
}


// Function VruumbaSCTBP.VruumbaSCTBP_C.TryAddSocketParticle
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FName                             InSocketName                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UParticleSystem*                  InParticleSystem                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AVruumbaSCTBP_C::TryAddSocketParticle(class FName InSocketName, class UParticleSystem* InParticleSystem)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VruumbaSCTBP_C", "TryAddSocketParticle");

	Params::VruumbaSCTBP_C_TryAddSocketParticle Parms{};

	Parms.InSocketName = InSocketName;
	Parms.InParticleSystem = InParticleSystem;

	UObject::ProcessEvent(Func, &Parms);
}


// Function VruumbaSCTBP.VruumbaSCTBP_C.OLDAntenna
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class USkeletalMesh*                    NewAntennaMesh                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UClass*                           InAntennaAnimBP                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AVruumbaSCTBP_C::OLDAntenna(class USkeletalMesh* NewAntennaMesh, class UClass* InAntennaAnimBP)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VruumbaSCTBP_C", "OLDAntenna");

	Params::VruumbaSCTBP_C_OLDAntenna Parms{};

	Parms.NewAntennaMesh = NewAntennaMesh;
	Parms.InAntennaAnimBP = InAntennaAnimBP;

	UObject::ProcessEvent(Func, &Parms);
}


// Function VruumbaSCTBP.VruumbaSCTBP_C.TryAddSocketAntenna
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FName                             InSocketName                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class USkeletalMesh*                    InAntennaMesh                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UClass*                           InAntennaAnimBP                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AVruumbaSCTBP_C::TryAddSocketAntenna(class FName InSocketName, class USkeletalMesh* InAntennaMesh, class UClass* InAntennaAnimBP)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VruumbaSCTBP_C", "TryAddSocketAntenna");

	Params::VruumbaSCTBP_C_TryAddSocketAntenna Parms{};

	Parms.InSocketName = InSocketName;
	Parms.InAntennaMesh = InAntennaMesh;
	Parms.InAntennaAnimBP = InAntennaAnimBP;

	UObject::ProcessEvent(Func, &Parms);
}


// Function VruumbaSCTBP.VruumbaSCTBP_C.Update Flag Holder
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void AVruumbaSCTBP_C::Update_Flag_Holder()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VruumbaSCTBP_C", "Update Flag Holder");

	UObject::ProcessEvent(Func, nullptr);
}


// Function VruumbaSCTBP.VruumbaSCTBP_C.CreateAllCustomization
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class USkeletalMesh*                    InBodyMesh                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UClass*                           InBodyAnimBP                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// TArray<class UMaterialInterface*>       InBodyMaterials                                        (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// class USkeletalMesh*                    InAntennaMesh                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UClass*                           InAntennaAnimBP                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UParticleSystem*                  InExhaustParticle                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AVruumbaSCTBP_C::CreateAllCustomization(class USkeletalMesh* InBodyMesh, class UClass* InBodyAnimBP, TArray<class UMaterialInterface*>& InBodyMaterials, class USkeletalMesh* InAntennaMesh, class UClass* InAntennaAnimBP, class UParticleSystem* InExhaustParticle)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VruumbaSCTBP_C", "CreateAllCustomization");

	Params::VruumbaSCTBP_C_CreateAllCustomization Parms{};

	Parms.InBodyMesh = InBodyMesh;
	Parms.InBodyAnimBP = InBodyAnimBP;
	Parms.InBodyMaterials = std::move(InBodyMaterials);
	Parms.InAntennaMesh = InAntennaMesh;
	Parms.InAntennaAnimBP = InAntennaAnimBP;
	Parms.InExhaustParticle = InExhaustParticle;

	UObject::ProcessEvent(Func, &Parms);

	InBodyMaterials = std::move(Parms.InBodyMaterials);
}


// Function VruumbaSCTBP.VruumbaSCTBP_C.CustomizationPayloadToVariables
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FFCTCloudCustomizationVruumba    FCTCloudCustomizationVruumba                           (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, UObjectWrapper)
// class USkeletalMesh*                    OutBodyMesh                                            (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// TArray<class UMaterialInterface*>       OutBodyMaterials                                       (Parm, OutParm)
// class USkeletalMesh*                    OutAntennaMesh                                         (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UClass*                           OutAntennaAnimBP                                       (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UParticleSystem*                  OutExhaustParticle                                     (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AVruumbaSCTBP_C::CustomizationPayloadToVariables(const struct FFCTCloudCustomizationVruumba& FCTCloudCustomizationVruumba, class USkeletalMesh** OutBodyMesh, TArray<class UMaterialInterface*>* OutBodyMaterials, class USkeletalMesh** OutAntennaMesh, class UClass** OutAntennaAnimBP, class UParticleSystem** OutExhaustParticle)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VruumbaSCTBP_C", "CustomizationPayloadToVariables");

	Params::VruumbaSCTBP_C_CustomizationPayloadToVariables Parms{};

	Parms.FCTCloudCustomizationVruumba = std::move(FCTCloudCustomizationVruumba);

	UObject::ProcessEvent(Func, &Parms);

	if (OutBodyMesh != nullptr)
		*OutBodyMesh = Parms.OutBodyMesh;

	if (OutBodyMaterials != nullptr)
		*OutBodyMaterials = std::move(Parms.OutBodyMaterials);

	if (OutAntennaMesh != nullptr)
		*OutAntennaMesh = Parms.OutAntennaMesh;

	if (OutAntennaAnimBP != nullptr)
		*OutAntennaAnimBP = Parms.OutAntennaAnimBP;

	if (OutExhaustParticle != nullptr)
		*OutExhaustParticle = Parms.OutExhaustParticle;
}


// Function VruumbaSCTBP.VruumbaSCTBP_C.StartExhaustParticles
// (Public, BlueprintCallable, BlueprintEvent)

void AVruumbaSCTBP_C::StartExhaustParticles()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VruumbaSCTBP_C", "StartExhaustParticles");

	UObject::ProcessEvent(Func, nullptr);
}


// Function VruumbaSCTBP.VruumbaSCTBP_C.StopExhaustParticles
// (Public, BlueprintCallable, BlueprintEvent)

void AVruumbaSCTBP_C::StopExhaustParticles()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VruumbaSCTBP_C", "StopExhaustParticles");

	UObject::ProcessEvent(Func, nullptr);
}


// Function VruumbaSCTBP.VruumbaSCTBP_C.CreateAntennaSocket
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class USkeletalMesh*                    NewAntennaMesh                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UClass*                           NewAntennaAnimBP                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AVruumbaSCTBP_C::CreateAntennaSocket(class USkeletalMesh* NewAntennaMesh, class UClass* NewAntennaAnimBP)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VruumbaSCTBP_C", "CreateAntennaSocket");

	Params::VruumbaSCTBP_C_CreateAntennaSocket Parms{};

	Parms.NewAntennaMesh = NewAntennaMesh;
	Parms.NewAntennaAnimBP = NewAntennaAnimBP;

	UObject::ProcessEvent(Func, &Parms);
}


// Function VruumbaSCTBP.VruumbaSCTBP_C.UpdateAntenna
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void AVruumbaSCTBP_C::UpdateAntenna()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VruumbaSCTBP_C", "UpdateAntenna");

	UObject::ProcessEvent(Func, nullptr);
}


// Function VruumbaSCTBP.VruumbaSCTBP_C.Recreate Exhaust Particle Systems
// (Public, BlueprintCallable, BlueprintEvent)

void AVruumbaSCTBP_C::Recreate_Exhaust_Particle_Systems()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VruumbaSCTBP_C", "Recreate Exhaust Particle Systems");

	UObject::ProcessEvent(Func, nullptr);
}


// Function VruumbaSCTBP.VruumbaSCTBP_C.UpdateExhaustParticleSystems
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UParticleSystem*                  NewParticleSystem                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AVruumbaSCTBP_C::UpdateExhaustParticleSystems(class UParticleSystem* NewParticleSystem)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VruumbaSCTBP_C", "UpdateExhaustParticleSystems");

	Params::VruumbaSCTBP_C_UpdateExhaustParticleSystems Parms{};

	Parms.NewParticleSystem = NewParticleSystem;

	UObject::ProcessEvent(Func, &Parms);
}


// Function VruumbaSCTBP.VruumbaSCTBP_C.ParticleBurst
// (Public, BlueprintCallable, BlueprintEvent)

void AVruumbaSCTBP_C::ParticleBurst()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VruumbaSCTBP_C", "ParticleBurst");

	UObject::ProcessEvent(Func, nullptr);
}


// Function VruumbaSCTBP.VruumbaSCTBP_C.IsAliveBPI
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Alive                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void AVruumbaSCTBP_C::IsAliveBPI(bool* Alive)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VruumbaSCTBP_C", "IsAliveBPI");

	Params::VruumbaSCTBP_C_IsAliveBPI Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Alive != nullptr)
		*Alive = Parms.Alive;
}


// Function VruumbaSCTBP.VruumbaSCTBP_C.GetHeldLogInfoBPI
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// EPassengerLogFactType                   FactType                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// TArray<struct FPlayerData>              Players                                                (Parm, OutParm)
// bool                                    HasLog                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void AVruumbaSCTBP_C::GetHeldLogInfoBPI(EPassengerLogFactType* FactType, TArray<struct FPlayerData>* Players, bool* HasLog)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VruumbaSCTBP_C", "GetHeldLogInfoBPI");

	Params::VruumbaSCTBP_C_GetHeldLogInfoBPI Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (FactType != nullptr)
		*FactType = Parms.FactType;

	if (Players != nullptr)
		*Players = std::move(Parms.Players);

	if (HasLog != nullptr)
		*HasLog = Parms.HasLog;
}


// Function VruumbaSCTBP.VruumbaSCTBP_C.IsPersonoidBPI
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    IsPersonoid                                            (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void AVruumbaSCTBP_C::IsPersonoidBPI(bool* IsPersonoid)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VruumbaSCTBP_C", "IsPersonoidBPI");

	Params::VruumbaSCTBP_C_IsPersonoidBPI Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (IsPersonoid != nullptr)
		*IsPersonoid = Parms.IsPersonoid;
}


// Function VruumbaSCTBP.VruumbaSCTBP_C.GetPlayerNameBPI
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FString                           Name_0                                                 (Parm, OutParm, ZeroConstructor, HasGetValueTypeHash)

void AVruumbaSCTBP_C::GetPlayerNameBPI(class FString* Name_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VruumbaSCTBP_C", "GetPlayerNameBPI");

	Params::VruumbaSCTBP_C_GetPlayerNameBPI Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Name_0 != nullptr)
		*Name_0 = std::move(Parms.Name_0);
}


// Function VruumbaSCTBP.VruumbaSCTBP_C.IsFemaleBPI
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)

bool AVruumbaSCTBP_C::IsFemaleBPI()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VruumbaSCTBP_C", "IsFemaleBPI");

	Params::VruumbaSCTBP_C_IsFemaleBPI Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function VruumbaSCTBP.VruumbaSCTBP_C.GetAbilitySystemComponentBPI
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UAbilitySystemComponent*          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

class UAbilitySystemComponent* AVruumbaSCTBP_C::GetAbilitySystemComponentBPI()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VruumbaSCTBP_C", "GetAbilitySystemComponentBPI");

	Params::VruumbaSCTBP_C_GetAbilitySystemComponentBPI Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function VruumbaSCTBP.VruumbaSCTBP_C.GetPortrait
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UTexture2D*                       ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

class UTexture2D* AVruumbaSCTBP_C::GetPortrait()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VruumbaSCTBP_C", "GetPortrait");

	Params::VruumbaSCTBP_C_GetPortrait Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function VruumbaSCTBP.VruumbaSCTBP_C.GetHomingTargetBPI
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class USceneComponent*                  ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

class USceneComponent* AVruumbaSCTBP_C::GetHomingTargetBPI()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VruumbaSCTBP_C", "GetHomingTargetBPI");

	Params::VruumbaSCTBP_C_GetHomingTargetBPI Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function VruumbaSCTBP.VruumbaSCTBP_C.IsPlayerBlocked
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class APlayerState*                     Player                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    bLocked                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void AVruumbaSCTBP_C::IsPlayerBlocked(class APlayerState* Player, bool* bLocked)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VruumbaSCTBP_C", "IsPlayerBlocked");

	Params::VruumbaSCTBP_C_IsPlayerBlocked Parms{};

	Parms.Player = Player;

	UObject::ProcessEvent(Func, &Parms);

	if (bLocked != nullptr)
		*bLocked = Parms.bLocked;
}


// Function VruumbaSCTBP.VruumbaSCTBP_C.IsPlayerConsoleCommunicationBlocked
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class APlayerState*                     Player                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    bLocked                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void AVruumbaSCTBP_C::IsPlayerConsoleCommunicationBlocked(class APlayerState* Player, bool* bLocked)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VruumbaSCTBP_C", "IsPlayerConsoleCommunicationBlocked");

	Params::VruumbaSCTBP_C_IsPlayerConsoleCommunicationBlocked Parms{};

	Parms.Player = Player;

	UObject::ProcessEvent(Func, &Parms);

	if (bLocked != nullptr)
		*bLocked = Parms.bLocked;
}

}

