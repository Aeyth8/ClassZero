#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: MouseSensWI

#include "Basic.hpp"

#include "MouseSensWI_classes.hpp"
#include "MouseSensWI_parameters.hpp"


namespace SDK
{

// Function MouseSensWI.MouseSensWI_C.ExecuteUbergraph_MouseSensWI
// (Final, UbergraphFunction)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UMouseSensWI_C::ExecuteUbergraph_MouseSensWI(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MouseSensWI_C", "ExecuteUbergraph_MouseSensWI");

	Params::MouseSensWI_C_ExecuteUbergraph_MouseSensWI Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function MouseSensWI.MouseSensWI_C.OnInitialLoadComplete
// (BlueprintCallable, BlueprintEvent)

void UMouseSensWI_C::OnInitialLoadComplete()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MouseSensWI_C", "OnInitialLoadComplete");

	UObject::ProcessEvent(Func, nullptr);
}


// Function MouseSensWI.MouseSensWI_C.BndEvt__SliderWI_K2Node_ComponentBoundEvent_0_OnRelease__DelegateSignature
// (BlueprintEvent)
// Parameters:
// float                                   Value                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UMouseSensWI_C::BndEvt__SliderWI_K2Node_ComponentBoundEvent_0_OnRelease__DelegateSignature(float Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MouseSensWI_C", "BndEvt__SliderWI_K2Node_ComponentBoundEvent_0_OnRelease__DelegateSignature");

	Params::MouseSensWI_C_BndEvt__SliderWI_K2Node_ComponentBoundEvent_0_OnRelease__DelegateSignature Parms{};

	Parms.Value = Value;

	UObject::ProcessEvent(Func, &Parms);
}


// Function MouseSensWI.MouseSensWI_C.Construct
// (BlueprintCosmetic, Event, Public, BlueprintEvent)

void UMouseSensWI_C::Construct()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MouseSensWI_C", "Construct");

	UObject::ProcessEvent(Func, nullptr);
}


// Function MouseSensWI.MouseSensWI_C.Set Look Rate
// (BlueprintCallable, BlueprintEvent)

void UMouseSensWI_C::Set_Look_Rate()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MouseSensWI_C", "Set Look Rate");

	UObject::ProcessEvent(Func, nullptr);
}


// Function MouseSensWI.MouseSensWI_C.SetRateForAxis
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FName                             KeyMapping_Axis_Name                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FKey                             KeyMapping_Key                                         (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
// bool                                    InvertValue                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UMouseSensWI_C::SetRateForAxis(class FName KeyMapping_Axis_Name, const struct FKey& KeyMapping_Key, bool InvertValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MouseSensWI_C", "SetRateForAxis");

	Params::MouseSensWI_C_SetRateForAxis Parms{};

	Parms.KeyMapping_Axis_Name = KeyMapping_Axis_Name;
	Parms.KeyMapping_Key = std::move(KeyMapping_Key);
	Parms.InvertValue = InvertValue;

	UObject::ProcessEvent(Func, &Parms);
}


// Function MouseSensWI.MouseSensWI_C.SetAxisSensitivity
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   Sensitivity                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UMouseSensWI_C::SetAxisSensitivity(float Sensitivity)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MouseSensWI_C", "SetAxisSensitivity");

	Params::MouseSensWI_C_SetAxisSensitivity Parms{};

	Parms.Sensitivity = Sensitivity;

	UObject::ProcessEvent(Func, &Parms);
}

}

