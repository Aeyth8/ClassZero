#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: PushCharacterGA

#include "Basic.hpp"

#include "PushCharacterGA_classes.hpp"
#include "PushCharacterGA_parameters.hpp"


namespace SDK
{

// Function PushCharacterGA.PushCharacterGA_C.ExecuteUbergraph_PushCharacterGA
// (Final, UbergraphFunction)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UPushCharacterGA_C::ExecuteUbergraph_PushCharacterGA(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PushCharacterGA_C", "ExecuteUbergraph_PushCharacterGA");

	Params::PushCharacterGA_C_ExecuteUbergraph_PushCharacterGA Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function PushCharacterGA.PushCharacterGA_C.K2_ActivateAbility
// (Event, Protected, BlueprintEvent)

void UPushCharacterGA_C::K2_ActivateAbility()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PushCharacterGA_C", "K2_ActivateAbility");

	UObject::ProcessEvent(Func, nullptr);
}


// Function PushCharacterGA.PushCharacterGA_C.CalculatePushVelocity
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           TargetCharacter                                        (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          LaunchVelocity                                         (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UPushCharacterGA_C::CalculatePushVelocity(class AActor** TargetCharacter, struct FVector* LaunchVelocity)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PushCharacterGA_C", "CalculatePushVelocity");

	Params::PushCharacterGA_C_CalculatePushVelocity Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (TargetCharacter != nullptr)
		*TargetCharacter = Parms.TargetCharacter;

	if (LaunchVelocity != nullptr)
		*LaunchVelocity = std::move(Parms.LaunchVelocity);
}


// Function PushCharacterGA.PushCharacterGA_C.GetAlternatePushForce
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// struct FVector                          InForward                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   Force                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UPushCharacterGA_C::GetAlternatePushForce(const struct FVector& InForward, float* Force)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PushCharacterGA_C", "GetAlternatePushForce");

	Params::PushCharacterGA_C_GetAlternatePushForce Parms{};

	Parms.InForward = std::move(InForward);

	UObject::ProcessEvent(Func, &Parms);

	if (Force != nullptr)
		*Force = Parms.Force;
}


// Function PushCharacterGA.PushCharacterGA_C.GetPushForce
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// struct FVector                          Forward                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

float UPushCharacterGA_C::GetPushForce(const struct FVector& Forward) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PushCharacterGA_C", "GetPushForce");

	Params::PushCharacterGA_C_GetPushForce Parms{};

	Parms.Forward = std::move(Forward);

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}

}

