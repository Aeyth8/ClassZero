#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: EquipablePower_PassengerLog

#include "Basic.hpp"

#include "PassengerLogFactType_structs.hpp"
#include "SCT_structs.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK::Params
{

// Function EquipablePower_PassengerLog.EquipablePower_PassengerLog_C.ExecuteUbergraph_EquipablePower_PassengerLog
// 0x00E8 (0x00E8 - 0x0000)
struct EquipablePower_PassengerLog_C_ExecuteUbergraph_EquipablePower_PassengerLog final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_HasAuthority_ReturnValue;                 // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void(const struct FDestiny& UltimateDestiny, bool IsPersonoid)> K2Node_CreateDelegate_OutputDelegate;              // 0x0008(0x0010)(ZeroConstructor, NoDestructor)
	bool                                          K2Node_Event_ToRagdoll;                            // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         K2Node_Event_Duration;                             // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                K2Node_Event_OptionalImpulse;                      // 0x0020(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_Force;                                // 0x002C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_Event_Aiming;                               // 0x002D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         K2Node_Event_AimType;                              // 0x002E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2F[0x1];                                       // 0x002F(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 K2Node_Event_AirlockTarget_1;                      // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ACharacter*                             K2Node_Event_VotedCharacter;                       // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ACharacter*                             K2Node_Event_VotingCharacter_2;                    // 0x0040(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 K2Node_Event_TargetAirlock;                        // 0x0048(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_Yes;                                  // 0x0050(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_51[0x7];                                       // 0x0051(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ACharacter*                             K2Node_Event_VotingCharacter_1;                    // 0x0058(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 K2Node_Event_AirlockTarget;                        // 0x0060(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ACharacter*                             K2Node_Event_TargetCharacter;                      // 0x0068(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ACharacter*                             K2Node_Event_VotingCharacter;                      // 0x0070(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EFate                                         K2Node_Event_Fate;                                 // 0x0078(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_79[0x3];                                       // 0x0079(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                K2Node_Event_Impulse;                              // 0x007C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                K2Node_Event_TargetLocation;                       // 0x0088(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               K2Node_Event_TargetRotation;                       // 0x0094(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         K2Node_Event_InputValue;                           // 0x00A0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_Delay;                                // 0x00A4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_Event_Show;                                 // 0x00A5(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_A6[0x2];                                       // 0x00A6(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_GetOwner_ReturnValue;                     // 0x00A8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FDestiny                               K2Node_CustomEvent_UltimateDestiny;                // 0x00B0(0x0010)(NoDestructor)
	bool                                          K2Node_CustomEvent_IsPersonoid;                    // 0x00C0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_C1[0x7];                                       // 0x00C1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ACharacter*                             K2Node_DynamicCast_AsCharacter;                    // 0x00C8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x00D0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_D1[0x7];                                       // 0x00D1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ACharacterSCTBP_C*                      K2Node_DynamicCast_AsCharacter_SCTBP;              // 0x00D8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x00E0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(EquipablePower_PassengerLog_C_ExecuteUbergraph_EquipablePower_PassengerLog) == 0x000008, "Wrong alignment on EquipablePower_PassengerLog_C_ExecuteUbergraph_EquipablePower_PassengerLog");
static_assert(sizeof(EquipablePower_PassengerLog_C_ExecuteUbergraph_EquipablePower_PassengerLog) == 0x0000E8, "Wrong size on EquipablePower_PassengerLog_C_ExecuteUbergraph_EquipablePower_PassengerLog");
static_assert(offsetof(EquipablePower_PassengerLog_C_ExecuteUbergraph_EquipablePower_PassengerLog, EntryPoint) == 0x000000, "Member 'EquipablePower_PassengerLog_C_ExecuteUbergraph_EquipablePower_PassengerLog::EntryPoint' has a wrong offset!");
static_assert(offsetof(EquipablePower_PassengerLog_C_ExecuteUbergraph_EquipablePower_PassengerLog, CallFunc_HasAuthority_ReturnValue) == 0x000004, "Member 'EquipablePower_PassengerLog_C_ExecuteUbergraph_EquipablePower_PassengerLog::CallFunc_HasAuthority_ReturnValue' has a wrong offset!");
static_assert(offsetof(EquipablePower_PassengerLog_C_ExecuteUbergraph_EquipablePower_PassengerLog, K2Node_CreateDelegate_OutputDelegate) == 0x000008, "Member 'EquipablePower_PassengerLog_C_ExecuteUbergraph_EquipablePower_PassengerLog::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(EquipablePower_PassengerLog_C_ExecuteUbergraph_EquipablePower_PassengerLog, K2Node_Event_ToRagdoll) == 0x000018, "Member 'EquipablePower_PassengerLog_C_ExecuteUbergraph_EquipablePower_PassengerLog::K2Node_Event_ToRagdoll' has a wrong offset!");
static_assert(offsetof(EquipablePower_PassengerLog_C_ExecuteUbergraph_EquipablePower_PassengerLog, K2Node_Event_Duration) == 0x00001C, "Member 'EquipablePower_PassengerLog_C_ExecuteUbergraph_EquipablePower_PassengerLog::K2Node_Event_Duration' has a wrong offset!");
static_assert(offsetof(EquipablePower_PassengerLog_C_ExecuteUbergraph_EquipablePower_PassengerLog, K2Node_Event_OptionalImpulse) == 0x000020, "Member 'EquipablePower_PassengerLog_C_ExecuteUbergraph_EquipablePower_PassengerLog::K2Node_Event_OptionalImpulse' has a wrong offset!");
static_assert(offsetof(EquipablePower_PassengerLog_C_ExecuteUbergraph_EquipablePower_PassengerLog, K2Node_Event_Force) == 0x00002C, "Member 'EquipablePower_PassengerLog_C_ExecuteUbergraph_EquipablePower_PassengerLog::K2Node_Event_Force' has a wrong offset!");
static_assert(offsetof(EquipablePower_PassengerLog_C_ExecuteUbergraph_EquipablePower_PassengerLog, K2Node_Event_Aiming) == 0x00002D, "Member 'EquipablePower_PassengerLog_C_ExecuteUbergraph_EquipablePower_PassengerLog::K2Node_Event_Aiming' has a wrong offset!");
static_assert(offsetof(EquipablePower_PassengerLog_C_ExecuteUbergraph_EquipablePower_PassengerLog, K2Node_Event_AimType) == 0x00002E, "Member 'EquipablePower_PassengerLog_C_ExecuteUbergraph_EquipablePower_PassengerLog::K2Node_Event_AimType' has a wrong offset!");
static_assert(offsetof(EquipablePower_PassengerLog_C_ExecuteUbergraph_EquipablePower_PassengerLog, K2Node_Event_AirlockTarget_1) == 0x000030, "Member 'EquipablePower_PassengerLog_C_ExecuteUbergraph_EquipablePower_PassengerLog::K2Node_Event_AirlockTarget_1' has a wrong offset!");
static_assert(offsetof(EquipablePower_PassengerLog_C_ExecuteUbergraph_EquipablePower_PassengerLog, K2Node_Event_VotedCharacter) == 0x000038, "Member 'EquipablePower_PassengerLog_C_ExecuteUbergraph_EquipablePower_PassengerLog::K2Node_Event_VotedCharacter' has a wrong offset!");
static_assert(offsetof(EquipablePower_PassengerLog_C_ExecuteUbergraph_EquipablePower_PassengerLog, K2Node_Event_VotingCharacter_2) == 0x000040, "Member 'EquipablePower_PassengerLog_C_ExecuteUbergraph_EquipablePower_PassengerLog::K2Node_Event_VotingCharacter_2' has a wrong offset!");
static_assert(offsetof(EquipablePower_PassengerLog_C_ExecuteUbergraph_EquipablePower_PassengerLog, K2Node_Event_TargetAirlock) == 0x000048, "Member 'EquipablePower_PassengerLog_C_ExecuteUbergraph_EquipablePower_PassengerLog::K2Node_Event_TargetAirlock' has a wrong offset!");
static_assert(offsetof(EquipablePower_PassengerLog_C_ExecuteUbergraph_EquipablePower_PassengerLog, K2Node_Event_Yes) == 0x000050, "Member 'EquipablePower_PassengerLog_C_ExecuteUbergraph_EquipablePower_PassengerLog::K2Node_Event_Yes' has a wrong offset!");
static_assert(offsetof(EquipablePower_PassengerLog_C_ExecuteUbergraph_EquipablePower_PassengerLog, K2Node_Event_VotingCharacter_1) == 0x000058, "Member 'EquipablePower_PassengerLog_C_ExecuteUbergraph_EquipablePower_PassengerLog::K2Node_Event_VotingCharacter_1' has a wrong offset!");
static_assert(offsetof(EquipablePower_PassengerLog_C_ExecuteUbergraph_EquipablePower_PassengerLog, K2Node_Event_AirlockTarget) == 0x000060, "Member 'EquipablePower_PassengerLog_C_ExecuteUbergraph_EquipablePower_PassengerLog::K2Node_Event_AirlockTarget' has a wrong offset!");
static_assert(offsetof(EquipablePower_PassengerLog_C_ExecuteUbergraph_EquipablePower_PassengerLog, K2Node_Event_TargetCharacter) == 0x000068, "Member 'EquipablePower_PassengerLog_C_ExecuteUbergraph_EquipablePower_PassengerLog::K2Node_Event_TargetCharacter' has a wrong offset!");
static_assert(offsetof(EquipablePower_PassengerLog_C_ExecuteUbergraph_EquipablePower_PassengerLog, K2Node_Event_VotingCharacter) == 0x000070, "Member 'EquipablePower_PassengerLog_C_ExecuteUbergraph_EquipablePower_PassengerLog::K2Node_Event_VotingCharacter' has a wrong offset!");
static_assert(offsetof(EquipablePower_PassengerLog_C_ExecuteUbergraph_EquipablePower_PassengerLog, K2Node_Event_Fate) == 0x000078, "Member 'EquipablePower_PassengerLog_C_ExecuteUbergraph_EquipablePower_PassengerLog::K2Node_Event_Fate' has a wrong offset!");
static_assert(offsetof(EquipablePower_PassengerLog_C_ExecuteUbergraph_EquipablePower_PassengerLog, K2Node_Event_Impulse) == 0x00007C, "Member 'EquipablePower_PassengerLog_C_ExecuteUbergraph_EquipablePower_PassengerLog::K2Node_Event_Impulse' has a wrong offset!");
static_assert(offsetof(EquipablePower_PassengerLog_C_ExecuteUbergraph_EquipablePower_PassengerLog, K2Node_Event_TargetLocation) == 0x000088, "Member 'EquipablePower_PassengerLog_C_ExecuteUbergraph_EquipablePower_PassengerLog::K2Node_Event_TargetLocation' has a wrong offset!");
static_assert(offsetof(EquipablePower_PassengerLog_C_ExecuteUbergraph_EquipablePower_PassengerLog, K2Node_Event_TargetRotation) == 0x000094, "Member 'EquipablePower_PassengerLog_C_ExecuteUbergraph_EquipablePower_PassengerLog::K2Node_Event_TargetRotation' has a wrong offset!");
static_assert(offsetof(EquipablePower_PassengerLog_C_ExecuteUbergraph_EquipablePower_PassengerLog, K2Node_Event_InputValue) == 0x0000A0, "Member 'EquipablePower_PassengerLog_C_ExecuteUbergraph_EquipablePower_PassengerLog::K2Node_Event_InputValue' has a wrong offset!");
static_assert(offsetof(EquipablePower_PassengerLog_C_ExecuteUbergraph_EquipablePower_PassengerLog, K2Node_Event_Delay) == 0x0000A4, "Member 'EquipablePower_PassengerLog_C_ExecuteUbergraph_EquipablePower_PassengerLog::K2Node_Event_Delay' has a wrong offset!");
static_assert(offsetof(EquipablePower_PassengerLog_C_ExecuteUbergraph_EquipablePower_PassengerLog, K2Node_Event_Show) == 0x0000A5, "Member 'EquipablePower_PassengerLog_C_ExecuteUbergraph_EquipablePower_PassengerLog::K2Node_Event_Show' has a wrong offset!");
static_assert(offsetof(EquipablePower_PassengerLog_C_ExecuteUbergraph_EquipablePower_PassengerLog, CallFunc_GetOwner_ReturnValue) == 0x0000A8, "Member 'EquipablePower_PassengerLog_C_ExecuteUbergraph_EquipablePower_PassengerLog::CallFunc_GetOwner_ReturnValue' has a wrong offset!");
static_assert(offsetof(EquipablePower_PassengerLog_C_ExecuteUbergraph_EquipablePower_PassengerLog, K2Node_CustomEvent_UltimateDestiny) == 0x0000B0, "Member 'EquipablePower_PassengerLog_C_ExecuteUbergraph_EquipablePower_PassengerLog::K2Node_CustomEvent_UltimateDestiny' has a wrong offset!");
static_assert(offsetof(EquipablePower_PassengerLog_C_ExecuteUbergraph_EquipablePower_PassengerLog, K2Node_CustomEvent_IsPersonoid) == 0x0000C0, "Member 'EquipablePower_PassengerLog_C_ExecuteUbergraph_EquipablePower_PassengerLog::K2Node_CustomEvent_IsPersonoid' has a wrong offset!");
static_assert(offsetof(EquipablePower_PassengerLog_C_ExecuteUbergraph_EquipablePower_PassengerLog, K2Node_DynamicCast_AsCharacter) == 0x0000C8, "Member 'EquipablePower_PassengerLog_C_ExecuteUbergraph_EquipablePower_PassengerLog::K2Node_DynamicCast_AsCharacter' has a wrong offset!");
static_assert(offsetof(EquipablePower_PassengerLog_C_ExecuteUbergraph_EquipablePower_PassengerLog, K2Node_DynamicCast_bSuccess) == 0x0000D0, "Member 'EquipablePower_PassengerLog_C_ExecuteUbergraph_EquipablePower_PassengerLog::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(EquipablePower_PassengerLog_C_ExecuteUbergraph_EquipablePower_PassengerLog, K2Node_DynamicCast_AsCharacter_SCTBP) == 0x0000D8, "Member 'EquipablePower_PassengerLog_C_ExecuteUbergraph_EquipablePower_PassengerLog::K2Node_DynamicCast_AsCharacter_SCTBP' has a wrong offset!");
static_assert(offsetof(EquipablePower_PassengerLog_C_ExecuteUbergraph_EquipablePower_PassengerLog, K2Node_DynamicCast_bSuccess_1) == 0x0000E0, "Member 'EquipablePower_PassengerLog_C_ExecuteUbergraph_EquipablePower_PassengerLog::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");

// Function EquipablePower_PassengerLog.EquipablePower_PassengerLog_C.On Character Destiny
// 0x0014 (0x0014 - 0x0000)
struct EquipablePower_PassengerLog_C_On_Character_Destiny final
{
public:
	struct FDestiny                               UltimateDestiny;                                   // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)
	bool                                          IsPersonoid;                                       // 0x0010(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(EquipablePower_PassengerLog_C_On_Character_Destiny) == 0x000004, "Wrong alignment on EquipablePower_PassengerLog_C_On_Character_Destiny");
static_assert(sizeof(EquipablePower_PassengerLog_C_On_Character_Destiny) == 0x000014, "Wrong size on EquipablePower_PassengerLog_C_On_Character_Destiny");
static_assert(offsetof(EquipablePower_PassengerLog_C_On_Character_Destiny, UltimateDestiny) == 0x000000, "Member 'EquipablePower_PassengerLog_C_On_Character_Destiny::UltimateDestiny' has a wrong offset!");
static_assert(offsetof(EquipablePower_PassengerLog_C_On_Character_Destiny, IsPersonoid) == 0x000010, "Member 'EquipablePower_PassengerLog_C_On_Character_Destiny::IsPersonoid' has a wrong offset!");

// Function EquipablePower_PassengerLog.EquipablePower_PassengerLog_C.DisplayAirlockWidgetBPI
// 0x0001 (0x0001 - 0x0000)
struct EquipablePower_PassengerLog_C_DisplayAirlockWidgetBPI final
{
public:
	bool                                          Show;                                              // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(EquipablePower_PassengerLog_C_DisplayAirlockWidgetBPI) == 0x000001, "Wrong alignment on EquipablePower_PassengerLog_C_DisplayAirlockWidgetBPI");
static_assert(sizeof(EquipablePower_PassengerLog_C_DisplayAirlockWidgetBPI) == 0x000001, "Wrong size on EquipablePower_PassengerLog_C_DisplayAirlockWidgetBPI");
static_assert(offsetof(EquipablePower_PassengerLog_C_DisplayAirlockWidgetBPI, Show) == 0x000000, "Member 'EquipablePower_PassengerLog_C_DisplayAirlockWidgetBPI::Show' has a wrong offset!");

// Function EquipablePower_PassengerLog.EquipablePower_PassengerLog_C.AddAlcoholBPI
// 0x0008 (0x0008 - 0x0000)
struct EquipablePower_PassengerLog_C_AddAlcoholBPI final
{
public:
	float                                         InputValue;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Delay;                                             // 0x0004(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(EquipablePower_PassengerLog_C_AddAlcoholBPI) == 0x000004, "Wrong alignment on EquipablePower_PassengerLog_C_AddAlcoholBPI");
static_assert(sizeof(EquipablePower_PassengerLog_C_AddAlcoholBPI) == 0x000008, "Wrong size on EquipablePower_PassengerLog_C_AddAlcoholBPI");
static_assert(offsetof(EquipablePower_PassengerLog_C_AddAlcoholBPI, InputValue) == 0x000000, "Member 'EquipablePower_PassengerLog_C_AddAlcoholBPI::InputValue' has a wrong offset!");
static_assert(offsetof(EquipablePower_PassengerLog_C_AddAlcoholBPI, Delay) == 0x000004, "Member 'EquipablePower_PassengerLog_C_AddAlcoholBPI::Delay' has a wrong offset!");

// Function EquipablePower_PassengerLog.EquipablePower_PassengerLog_C.TeleportLocationRotationBPI
// 0x0018 (0x0018 - 0x0000)
struct EquipablePower_PassengerLog_C_TeleportLocationRotationBPI final
{
public:
	struct FVector                                TargetLocation;                                    // 0x0000(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               TargetRotation;                                    // 0x000C(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(EquipablePower_PassengerLog_C_TeleportLocationRotationBPI) == 0x000004, "Wrong alignment on EquipablePower_PassengerLog_C_TeleportLocationRotationBPI");
static_assert(sizeof(EquipablePower_PassengerLog_C_TeleportLocationRotationBPI) == 0x000018, "Wrong size on EquipablePower_PassengerLog_C_TeleportLocationRotationBPI");
static_assert(offsetof(EquipablePower_PassengerLog_C_TeleportLocationRotationBPI, TargetLocation) == 0x000000, "Member 'EquipablePower_PassengerLog_C_TeleportLocationRotationBPI::TargetLocation' has a wrong offset!");
static_assert(offsetof(EquipablePower_PassengerLog_C_TeleportLocationRotationBPI, TargetRotation) == 0x00000C, "Member 'EquipablePower_PassengerLog_C_TeleportLocationRotationBPI::TargetRotation' has a wrong offset!");

// Function EquipablePower_PassengerLog.EquipablePower_PassengerLog_C.SetDestinyBPI
// 0x0010 (0x0010 - 0x0000)
struct EquipablePower_PassengerLog_C_SetDestinyBPI final
{
public:
	EFate                                         Fate;                                              // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                Impulse;                                           // 0x0004(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(EquipablePower_PassengerLog_C_SetDestinyBPI) == 0x000004, "Wrong alignment on EquipablePower_PassengerLog_C_SetDestinyBPI");
static_assert(sizeof(EquipablePower_PassengerLog_C_SetDestinyBPI) == 0x000010, "Wrong size on EquipablePower_PassengerLog_C_SetDestinyBPI");
static_assert(offsetof(EquipablePower_PassengerLog_C_SetDestinyBPI, Fate) == 0x000000, "Member 'EquipablePower_PassengerLog_C_SetDestinyBPI::Fate' has a wrong offset!");
static_assert(offsetof(EquipablePower_PassengerLog_C_SetDestinyBPI, Impulse) == 0x000004, "Member 'EquipablePower_PassengerLog_C_SetDestinyBPI::Impulse' has a wrong offset!");

// Function EquipablePower_PassengerLog.EquipablePower_PassengerLog_C.PassengerLogVoteBPI
// 0x0018 (0x0018 - 0x0000)
struct EquipablePower_PassengerLog_C_PassengerLogVoteBPI final
{
public:
	class AActor*                                 AirlockTarget;                                     // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ACharacter*                             TargetCharacter;                                   // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ACharacter*                             VotingCharacter;                                   // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(EquipablePower_PassengerLog_C_PassengerLogVoteBPI) == 0x000008, "Wrong alignment on EquipablePower_PassengerLog_C_PassengerLogVoteBPI");
static_assert(sizeof(EquipablePower_PassengerLog_C_PassengerLogVoteBPI) == 0x000018, "Wrong size on EquipablePower_PassengerLog_C_PassengerLogVoteBPI");
static_assert(offsetof(EquipablePower_PassengerLog_C_PassengerLogVoteBPI, AirlockTarget) == 0x000000, "Member 'EquipablePower_PassengerLog_C_PassengerLogVoteBPI::AirlockTarget' has a wrong offset!");
static_assert(offsetof(EquipablePower_PassengerLog_C_PassengerLogVoteBPI, TargetCharacter) == 0x000008, "Member 'EquipablePower_PassengerLog_C_PassengerLogVoteBPI::TargetCharacter' has a wrong offset!");
static_assert(offsetof(EquipablePower_PassengerLog_C_PassengerLogVoteBPI, VotingCharacter) == 0x000010, "Member 'EquipablePower_PassengerLog_C_PassengerLogVoteBPI::VotingCharacter' has a wrong offset!");

// Function EquipablePower_PassengerLog.EquipablePower_PassengerLog_C.TrustVoteBPI
// 0x0018 (0x0018 - 0x0000)
struct EquipablePower_PassengerLog_C_TrustVoteBPI final
{
public:
	class AActor*                                 TargetAirlock;                                     // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Yes;                                               // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ACharacter*                             VotingCharacter;                                   // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(EquipablePower_PassengerLog_C_TrustVoteBPI) == 0x000008, "Wrong alignment on EquipablePower_PassengerLog_C_TrustVoteBPI");
static_assert(sizeof(EquipablePower_PassengerLog_C_TrustVoteBPI) == 0x000018, "Wrong size on EquipablePower_PassengerLog_C_TrustVoteBPI");
static_assert(offsetof(EquipablePower_PassengerLog_C_TrustVoteBPI, TargetAirlock) == 0x000000, "Member 'EquipablePower_PassengerLog_C_TrustVoteBPI::TargetAirlock' has a wrong offset!");
static_assert(offsetof(EquipablePower_PassengerLog_C_TrustVoteBPI, Yes) == 0x000008, "Member 'EquipablePower_PassengerLog_C_TrustVoteBPI::Yes' has a wrong offset!");
static_assert(offsetof(EquipablePower_PassengerLog_C_TrustVoteBPI, VotingCharacter) == 0x000010, "Member 'EquipablePower_PassengerLog_C_TrustVoteBPI::VotingCharacter' has a wrong offset!");

// Function EquipablePower_PassengerLog.EquipablePower_PassengerLog_C.EliminationVoteBPI
// 0x0018 (0x0018 - 0x0000)
struct EquipablePower_PassengerLog_C_EliminationVoteBPI final
{
public:
	class AActor*                                 AirlockTarget;                                     // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ACharacter*                             VotedCharacter;                                    // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ACharacter*                             VotingCharacter;                                   // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(EquipablePower_PassengerLog_C_EliminationVoteBPI) == 0x000008, "Wrong alignment on EquipablePower_PassengerLog_C_EliminationVoteBPI");
static_assert(sizeof(EquipablePower_PassengerLog_C_EliminationVoteBPI) == 0x000018, "Wrong size on EquipablePower_PassengerLog_C_EliminationVoteBPI");
static_assert(offsetof(EquipablePower_PassengerLog_C_EliminationVoteBPI, AirlockTarget) == 0x000000, "Member 'EquipablePower_PassengerLog_C_EliminationVoteBPI::AirlockTarget' has a wrong offset!");
static_assert(offsetof(EquipablePower_PassengerLog_C_EliminationVoteBPI, VotedCharacter) == 0x000008, "Member 'EquipablePower_PassengerLog_C_EliminationVoteBPI::VotedCharacter' has a wrong offset!");
static_assert(offsetof(EquipablePower_PassengerLog_C_EliminationVoteBPI, VotingCharacter) == 0x000010, "Member 'EquipablePower_PassengerLog_C_EliminationVoteBPI::VotingCharacter' has a wrong offset!");

// Function EquipablePower_PassengerLog.EquipablePower_PassengerLog_C.SetAimingStateBPI
// 0x0002 (0x0002 - 0x0000)
struct EquipablePower_PassengerLog_C_SetAimingStateBPI final
{
public:
	bool                                          Aiming;                                            // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         AimType;                                           // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(EquipablePower_PassengerLog_C_SetAimingStateBPI) == 0x000001, "Wrong alignment on EquipablePower_PassengerLog_C_SetAimingStateBPI");
static_assert(sizeof(EquipablePower_PassengerLog_C_SetAimingStateBPI) == 0x000002, "Wrong size on EquipablePower_PassengerLog_C_SetAimingStateBPI");
static_assert(offsetof(EquipablePower_PassengerLog_C_SetAimingStateBPI, Aiming) == 0x000000, "Member 'EquipablePower_PassengerLog_C_SetAimingStateBPI::Aiming' has a wrong offset!");
static_assert(offsetof(EquipablePower_PassengerLog_C_SetAimingStateBPI, AimType) == 0x000001, "Member 'EquipablePower_PassengerLog_C_SetAimingStateBPI::AimType' has a wrong offset!");

// Function EquipablePower_PassengerLog.EquipablePower_PassengerLog_C.RagdollCharacterBPI
// 0x0018 (0x0018 - 0x0000)
struct EquipablePower_PassengerLog_C_RagdollCharacterBPI final
{
public:
	bool                                          ToRagdoll;                                         // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Duration;                                          // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                OptionalImpulse;                                   // 0x0008(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Force;                                             // 0x0014(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(EquipablePower_PassengerLog_C_RagdollCharacterBPI) == 0x000004, "Wrong alignment on EquipablePower_PassengerLog_C_RagdollCharacterBPI");
static_assert(sizeof(EquipablePower_PassengerLog_C_RagdollCharacterBPI) == 0x000018, "Wrong size on EquipablePower_PassengerLog_C_RagdollCharacterBPI");
static_assert(offsetof(EquipablePower_PassengerLog_C_RagdollCharacterBPI, ToRagdoll) == 0x000000, "Member 'EquipablePower_PassengerLog_C_RagdollCharacterBPI::ToRagdoll' has a wrong offset!");
static_assert(offsetof(EquipablePower_PassengerLog_C_RagdollCharacterBPI, Duration) == 0x000004, "Member 'EquipablePower_PassengerLog_C_RagdollCharacterBPI::Duration' has a wrong offset!");
static_assert(offsetof(EquipablePower_PassengerLog_C_RagdollCharacterBPI, OptionalImpulse) == 0x000008, "Member 'EquipablePower_PassengerLog_C_RagdollCharacterBPI::OptionalImpulse' has a wrong offset!");
static_assert(offsetof(EquipablePower_PassengerLog_C_RagdollCharacterBPI, Force) == 0x000014, "Member 'EquipablePower_PassengerLog_C_RagdollCharacterBPI::Force' has a wrong offset!");

// Function EquipablePower_PassengerLog.EquipablePower_PassengerLog_C.IsAliveBPI
// 0x0001 (0x0001 - 0x0000)
struct EquipablePower_PassengerLog_C_IsAliveBPI final
{
public:
	bool                                          Alive;                                             // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(EquipablePower_PassengerLog_C_IsAliveBPI) == 0x000001, "Wrong alignment on EquipablePower_PassengerLog_C_IsAliveBPI");
static_assert(sizeof(EquipablePower_PassengerLog_C_IsAliveBPI) == 0x000001, "Wrong size on EquipablePower_PassengerLog_C_IsAliveBPI");
static_assert(offsetof(EquipablePower_PassengerLog_C_IsAliveBPI, Alive) == 0x000000, "Member 'EquipablePower_PassengerLog_C_IsAliveBPI::Alive' has a wrong offset!");

// Function EquipablePower_PassengerLog.EquipablePower_PassengerLog_C.GetHeldLogInfoBPI
// 0x0020 (0x0020 - 0x0000)
struct EquipablePower_PassengerLog_C_GetHeldLogInfoBPI final
{
public:
	EPassengerLogFactType                         FactType;                                          // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FPlayerData>                    Players;                                           // 0x0008(0x0010)(Parm, OutParm)
	bool                                          HasLog;                                            // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(EquipablePower_PassengerLog_C_GetHeldLogInfoBPI) == 0x000008, "Wrong alignment on EquipablePower_PassengerLog_C_GetHeldLogInfoBPI");
static_assert(sizeof(EquipablePower_PassengerLog_C_GetHeldLogInfoBPI) == 0x000020, "Wrong size on EquipablePower_PassengerLog_C_GetHeldLogInfoBPI");
static_assert(offsetof(EquipablePower_PassengerLog_C_GetHeldLogInfoBPI, FactType) == 0x000000, "Member 'EquipablePower_PassengerLog_C_GetHeldLogInfoBPI::FactType' has a wrong offset!");
static_assert(offsetof(EquipablePower_PassengerLog_C_GetHeldLogInfoBPI, Players) == 0x000008, "Member 'EquipablePower_PassengerLog_C_GetHeldLogInfoBPI::Players' has a wrong offset!");
static_assert(offsetof(EquipablePower_PassengerLog_C_GetHeldLogInfoBPI, HasLog) == 0x000018, "Member 'EquipablePower_PassengerLog_C_GetHeldLogInfoBPI::HasLog' has a wrong offset!");

// Function EquipablePower_PassengerLog.EquipablePower_PassengerLog_C.IsPersonoidBPI
// 0x0001 (0x0001 - 0x0000)
struct EquipablePower_PassengerLog_C_IsPersonoidBPI final
{
public:
	bool                                          IsPersonoid;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(EquipablePower_PassengerLog_C_IsPersonoidBPI) == 0x000001, "Wrong alignment on EquipablePower_PassengerLog_C_IsPersonoidBPI");
static_assert(sizeof(EquipablePower_PassengerLog_C_IsPersonoidBPI) == 0x000001, "Wrong size on EquipablePower_PassengerLog_C_IsPersonoidBPI");
static_assert(offsetof(EquipablePower_PassengerLog_C_IsPersonoidBPI, IsPersonoid) == 0x000000, "Member 'EquipablePower_PassengerLog_C_IsPersonoidBPI::IsPersonoid' has a wrong offset!");

// Function EquipablePower_PassengerLog.EquipablePower_PassengerLog_C.GetPlayerNameBPI
// 0x0010 (0x0010 - 0x0000)
struct EquipablePower_PassengerLog_C_GetPlayerNameBPI final
{
public:
	class FString                                 Name_0;                                            // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash)
};
static_assert(alignof(EquipablePower_PassengerLog_C_GetPlayerNameBPI) == 0x000008, "Wrong alignment on EquipablePower_PassengerLog_C_GetPlayerNameBPI");
static_assert(sizeof(EquipablePower_PassengerLog_C_GetPlayerNameBPI) == 0x000010, "Wrong size on EquipablePower_PassengerLog_C_GetPlayerNameBPI");
static_assert(offsetof(EquipablePower_PassengerLog_C_GetPlayerNameBPI, Name_0) == 0x000000, "Member 'EquipablePower_PassengerLog_C_GetPlayerNameBPI::Name_0' has a wrong offset!");

// Function EquipablePower_PassengerLog.EquipablePower_PassengerLog_C.IsFemaleBPI
// 0x0001 (0x0001 - 0x0000)
struct EquipablePower_PassengerLog_C_IsFemaleBPI final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
};
static_assert(alignof(EquipablePower_PassengerLog_C_IsFemaleBPI) == 0x000001, "Wrong alignment on EquipablePower_PassengerLog_C_IsFemaleBPI");
static_assert(sizeof(EquipablePower_PassengerLog_C_IsFemaleBPI) == 0x000001, "Wrong size on EquipablePower_PassengerLog_C_IsFemaleBPI");
static_assert(offsetof(EquipablePower_PassengerLog_C_IsFemaleBPI, ReturnValue) == 0x000000, "Member 'EquipablePower_PassengerLog_C_IsFemaleBPI::ReturnValue' has a wrong offset!");

// Function EquipablePower_PassengerLog.EquipablePower_PassengerLog_C.GetAbilitySystemComponentBPI
// 0x0008 (0x0008 - 0x0000)
struct EquipablePower_PassengerLog_C_GetAbilitySystemComponentBPI final
{
public:
	class UAbilitySystemComponent*                ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(EquipablePower_PassengerLog_C_GetAbilitySystemComponentBPI) == 0x000008, "Wrong alignment on EquipablePower_PassengerLog_C_GetAbilitySystemComponentBPI");
static_assert(sizeof(EquipablePower_PassengerLog_C_GetAbilitySystemComponentBPI) == 0x000008, "Wrong size on EquipablePower_PassengerLog_C_GetAbilitySystemComponentBPI");
static_assert(offsetof(EquipablePower_PassengerLog_C_GetAbilitySystemComponentBPI, ReturnValue) == 0x000000, "Member 'EquipablePower_PassengerLog_C_GetAbilitySystemComponentBPI::ReturnValue' has a wrong offset!");

// Function EquipablePower_PassengerLog.EquipablePower_PassengerLog_C.GetPortrait
// 0x0008 (0x0008 - 0x0000)
struct EquipablePower_PassengerLog_C_GetPortrait final
{
public:
	class UTexture2D*                             ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(EquipablePower_PassengerLog_C_GetPortrait) == 0x000008, "Wrong alignment on EquipablePower_PassengerLog_C_GetPortrait");
static_assert(sizeof(EquipablePower_PassengerLog_C_GetPortrait) == 0x000008, "Wrong size on EquipablePower_PassengerLog_C_GetPortrait");
static_assert(offsetof(EquipablePower_PassengerLog_C_GetPortrait, ReturnValue) == 0x000000, "Member 'EquipablePower_PassengerLog_C_GetPortrait::ReturnValue' has a wrong offset!");

// Function EquipablePower_PassengerLog.EquipablePower_PassengerLog_C.GetHomingTargetBPI
// 0x0008 (0x0008 - 0x0000)
struct EquipablePower_PassengerLog_C_GetHomingTargetBPI final
{
public:
	class USceneComponent*                        ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(EquipablePower_PassengerLog_C_GetHomingTargetBPI) == 0x000008, "Wrong alignment on EquipablePower_PassengerLog_C_GetHomingTargetBPI");
static_assert(sizeof(EquipablePower_PassengerLog_C_GetHomingTargetBPI) == 0x000008, "Wrong size on EquipablePower_PassengerLog_C_GetHomingTargetBPI");
static_assert(offsetof(EquipablePower_PassengerLog_C_GetHomingTargetBPI, ReturnValue) == 0x000000, "Member 'EquipablePower_PassengerLog_C_GetHomingTargetBPI::ReturnValue' has a wrong offset!");

// Function EquipablePower_PassengerLog.EquipablePower_PassengerLog_C.IsPlayerBlocked
// 0x0010 (0x0010 - 0x0000)
struct EquipablePower_PassengerLog_C_IsPlayerBlocked final
{
public:
	class APlayerState*                           Player;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bLocked;                                           // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(EquipablePower_PassengerLog_C_IsPlayerBlocked) == 0x000008, "Wrong alignment on EquipablePower_PassengerLog_C_IsPlayerBlocked");
static_assert(sizeof(EquipablePower_PassengerLog_C_IsPlayerBlocked) == 0x000010, "Wrong size on EquipablePower_PassengerLog_C_IsPlayerBlocked");
static_assert(offsetof(EquipablePower_PassengerLog_C_IsPlayerBlocked, Player) == 0x000000, "Member 'EquipablePower_PassengerLog_C_IsPlayerBlocked::Player' has a wrong offset!");
static_assert(offsetof(EquipablePower_PassengerLog_C_IsPlayerBlocked, bLocked) == 0x000008, "Member 'EquipablePower_PassengerLog_C_IsPlayerBlocked::bLocked' has a wrong offset!");

// Function EquipablePower_PassengerLog.EquipablePower_PassengerLog_C.IsPlayerConsoleCommunicationBlocked
// 0x0010 (0x0010 - 0x0000)
struct EquipablePower_PassengerLog_C_IsPlayerConsoleCommunicationBlocked final
{
public:
	class APlayerState*                           Player;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bLocked;                                           // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(EquipablePower_PassengerLog_C_IsPlayerConsoleCommunicationBlocked) == 0x000008, "Wrong alignment on EquipablePower_PassengerLog_C_IsPlayerConsoleCommunicationBlocked");
static_assert(sizeof(EquipablePower_PassengerLog_C_IsPlayerConsoleCommunicationBlocked) == 0x000010, "Wrong size on EquipablePower_PassengerLog_C_IsPlayerConsoleCommunicationBlocked");
static_assert(offsetof(EquipablePower_PassengerLog_C_IsPlayerConsoleCommunicationBlocked, Player) == 0x000000, "Member 'EquipablePower_PassengerLog_C_IsPlayerConsoleCommunicationBlocked::Player' has a wrong offset!");
static_assert(offsetof(EquipablePower_PassengerLog_C_IsPlayerConsoleCommunicationBlocked, bLocked) == 0x000008, "Member 'EquipablePower_PassengerLog_C_IsPlayerConsoleCommunicationBlocked::bLocked' has a wrong offset!");

}

