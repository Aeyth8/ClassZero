#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: ThumbsVoteBillboardComponent

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "VoteState_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass ThumbsVoteBillboardComponent.ThumbsVoteBillboardComponent_C
// 0x0048 (0x00F8 - 0x00B0)
class UThumbsVoteBillboardComponent_C final : public UActorComponent
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x00B0(0x0008)(ZeroConstructor, Transient, DuplicateTransient, UObjectWrapper)
	class UMaterialBillboardComponent*            TargetBillboard;                                   // 0x00B8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterial*                              UpvoteMaterial;                                    // 0x00C0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterial*                              DownvoteMaterial;                                  // 0x00C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	VoteState::EVoteState                         State;                                             // 0x00D0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_D1[0x7];                                       // 0x00D1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ASCTPlayerState*                        TargetPlayerState;                                 // 0x00D8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CachedNameWidth;                                   // 0x00E0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Spacing;                                           // 0x00E4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialBillboardComponent*            NameBillboard;                                     // 0x00E8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsLocalPlayer;                                     // 0x00F0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)

public:
	void ExecuteUbergraph_ThumbsVoteBillboardComponent(int32 EntryPoint);
	void ReceiveTick(float DeltaSeconds);
	void Update_Appearance();
	void SetTargetVisibility();
	void SetTargetMaterial();
	void Set_Player_State(class ASCTPlayerState* PlayerState);
	void BindToCallbacks();
	void QueryAllPlayerScores(int32* HighestScore, int32* LowestScore);
	void UpdateState();
	void OnConnected(class ASCTPlayerState* PlayerState);
	void OnDisconnected(class ASCTPlayerState* PlayerState);
	void CacheNameWidth(float TextWidth, int32 CanvasWidth);
	void SetTargetPosition();
	void CheckIsLocalPlayer();

	struct FVector GetTransformedRightVector() const;
	int32 GetVoteScore(class ASCTPlayerState* Target) const;

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"ThumbsVoteBillboardComponent_C">();
	}
	static class UThumbsVoteBillboardComponent_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UThumbsVoteBillboardComponent_C>();
	}
};
static_assert(alignof(UThumbsVoteBillboardComponent_C) == 0x000008, "Wrong alignment on UThumbsVoteBillboardComponent_C");
static_assert(sizeof(UThumbsVoteBillboardComponent_C) == 0x0000F8, "Wrong size on UThumbsVoteBillboardComponent_C");
static_assert(offsetof(UThumbsVoteBillboardComponent_C, UberGraphFrame) == 0x0000B0, "Member 'UThumbsVoteBillboardComponent_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UThumbsVoteBillboardComponent_C, TargetBillboard) == 0x0000B8, "Member 'UThumbsVoteBillboardComponent_C::TargetBillboard' has a wrong offset!");
static_assert(offsetof(UThumbsVoteBillboardComponent_C, UpvoteMaterial) == 0x0000C0, "Member 'UThumbsVoteBillboardComponent_C::UpvoteMaterial' has a wrong offset!");
static_assert(offsetof(UThumbsVoteBillboardComponent_C, DownvoteMaterial) == 0x0000C8, "Member 'UThumbsVoteBillboardComponent_C::DownvoteMaterial' has a wrong offset!");
static_assert(offsetof(UThumbsVoteBillboardComponent_C, State) == 0x0000D0, "Member 'UThumbsVoteBillboardComponent_C::State' has a wrong offset!");
static_assert(offsetof(UThumbsVoteBillboardComponent_C, TargetPlayerState) == 0x0000D8, "Member 'UThumbsVoteBillboardComponent_C::TargetPlayerState' has a wrong offset!");
static_assert(offsetof(UThumbsVoteBillboardComponent_C, CachedNameWidth) == 0x0000E0, "Member 'UThumbsVoteBillboardComponent_C::CachedNameWidth' has a wrong offset!");
static_assert(offsetof(UThumbsVoteBillboardComponent_C, Spacing) == 0x0000E4, "Member 'UThumbsVoteBillboardComponent_C::Spacing' has a wrong offset!");
static_assert(offsetof(UThumbsVoteBillboardComponent_C, NameBillboard) == 0x0000E8, "Member 'UThumbsVoteBillboardComponent_C::NameBillboard' has a wrong offset!");
static_assert(offsetof(UThumbsVoteBillboardComponent_C, IsLocalPlayer) == 0x0000F0, "Member 'UThumbsVoteBillboardComponent_C::IsLocalPlayer' has a wrong offset!");

}

