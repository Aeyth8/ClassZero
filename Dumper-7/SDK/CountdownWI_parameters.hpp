#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: CountdownWI

#include "Basic.hpp"

#include "UMG_structs.hpp"
#include "Engine_structs.hpp"


namespace SDK::Params
{

// Function CountdownWI.CountdownWI_C.ExecuteUbergraph_CountdownWI
// 0x0060 (0x0060 - 0x0000)
struct CountdownWI_C_ExecuteUbergraph_CountdownWI final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_IsDesignTime;                         // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTimerHandle                           CallFunc_K2_SetTimer_ReturnValue;                  // 0x0008(0x0008)(NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_CustomEvent_Time;                           // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 K2Node_CustomEvent_Descriptor;                     // 0x0018(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FText                                   CallFunc_Conv_StringToText_ReturnValue;            // 0x0028(0x0018)()
	int32                                         CallFunc_Len_ReturnValue;                          // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_IntInt_ReturnValue;               // 0x0044(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_45[0x3];                                       // 0x0045(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   CallFunc_Conv_IntToText_ReturnValue;               // 0x0048(0x0018)()
};
static_assert(alignof(CountdownWI_C_ExecuteUbergraph_CountdownWI) == 0x000008, "Wrong alignment on CountdownWI_C_ExecuteUbergraph_CountdownWI");
static_assert(sizeof(CountdownWI_C_ExecuteUbergraph_CountdownWI) == 0x000060, "Wrong size on CountdownWI_C_ExecuteUbergraph_CountdownWI");
static_assert(offsetof(CountdownWI_C_ExecuteUbergraph_CountdownWI, EntryPoint) == 0x000000, "Member 'CountdownWI_C_ExecuteUbergraph_CountdownWI::EntryPoint' has a wrong offset!");
static_assert(offsetof(CountdownWI_C_ExecuteUbergraph_CountdownWI, K2Node_Event_IsDesignTime) == 0x000004, "Member 'CountdownWI_C_ExecuteUbergraph_CountdownWI::K2Node_Event_IsDesignTime' has a wrong offset!");
static_assert(offsetof(CountdownWI_C_ExecuteUbergraph_CountdownWI, CallFunc_K2_SetTimer_ReturnValue) == 0x000008, "Member 'CountdownWI_C_ExecuteUbergraph_CountdownWI::CallFunc_K2_SetTimer_ReturnValue' has a wrong offset!");
static_assert(offsetof(CountdownWI_C_ExecuteUbergraph_CountdownWI, K2Node_CustomEvent_Time) == 0x000010, "Member 'CountdownWI_C_ExecuteUbergraph_CountdownWI::K2Node_CustomEvent_Time' has a wrong offset!");
static_assert(offsetof(CountdownWI_C_ExecuteUbergraph_CountdownWI, K2Node_CustomEvent_Descriptor) == 0x000018, "Member 'CountdownWI_C_ExecuteUbergraph_CountdownWI::K2Node_CustomEvent_Descriptor' has a wrong offset!");
static_assert(offsetof(CountdownWI_C_ExecuteUbergraph_CountdownWI, CallFunc_Conv_StringToText_ReturnValue) == 0x000028, "Member 'CountdownWI_C_ExecuteUbergraph_CountdownWI::CallFunc_Conv_StringToText_ReturnValue' has a wrong offset!");
static_assert(offsetof(CountdownWI_C_ExecuteUbergraph_CountdownWI, CallFunc_Len_ReturnValue) == 0x000040, "Member 'CountdownWI_C_ExecuteUbergraph_CountdownWI::CallFunc_Len_ReturnValue' has a wrong offset!");
static_assert(offsetof(CountdownWI_C_ExecuteUbergraph_CountdownWI, CallFunc_Greater_IntInt_ReturnValue) == 0x000044, "Member 'CountdownWI_C_ExecuteUbergraph_CountdownWI::CallFunc_Greater_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(CountdownWI_C_ExecuteUbergraph_CountdownWI, CallFunc_Conv_IntToText_ReturnValue) == 0x000048, "Member 'CountdownWI_C_ExecuteUbergraph_CountdownWI::CallFunc_Conv_IntToText_ReturnValue' has a wrong offset!");

// Function CountdownWI.CountdownWI_C.PreConstruct
// 0x0001 (0x0001 - 0x0000)
struct CountdownWI_C_PreConstruct final
{
public:
	bool                                          IsDesignTime;                                      // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(CountdownWI_C_PreConstruct) == 0x000001, "Wrong alignment on CountdownWI_C_PreConstruct");
static_assert(sizeof(CountdownWI_C_PreConstruct) == 0x000001, "Wrong size on CountdownWI_C_PreConstruct");
static_assert(offsetof(CountdownWI_C_PreConstruct, IsDesignTime) == 0x000000, "Member 'CountdownWI_C_PreConstruct::IsDesignTime' has a wrong offset!");

// Function CountdownWI.CountdownWI_C.BeginCountdown
// 0x0018 (0x0018 - 0x0000)
struct CountdownWI_C_BeginCountdown final
{
public:
	int32                                         Time;                                              // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Descriptor;                                        // 0x0008(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
};
static_assert(alignof(CountdownWI_C_BeginCountdown) == 0x000008, "Wrong alignment on CountdownWI_C_BeginCountdown");
static_assert(sizeof(CountdownWI_C_BeginCountdown) == 0x000018, "Wrong size on CountdownWI_C_BeginCountdown");
static_assert(offsetof(CountdownWI_C_BeginCountdown, Time) == 0x000000, "Member 'CountdownWI_C_BeginCountdown::Time' has a wrong offset!");
static_assert(offsetof(CountdownWI_C_BeginCountdown, Descriptor) == 0x000008, "Member 'CountdownWI_C_BeginCountdown::Descriptor' has a wrong offset!");

// Function CountdownWI.CountdownWI_C.CountdownUpdate
// 0x0028 (0x0028 - 0x0000)
struct CountdownWI_C_CountdownUpdate final
{
public:
	bool                                          CallFunc_LessEqual_IntInt_ReturnValue;             // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   CallFunc_Conv_IntToText_ReturnValue;               // 0x0008(0x0018)()
	int32                                         CallFunc_Subtract_IntInt_ReturnValue;              // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(CountdownWI_C_CountdownUpdate) == 0x000008, "Wrong alignment on CountdownWI_C_CountdownUpdate");
static_assert(sizeof(CountdownWI_C_CountdownUpdate) == 0x000028, "Wrong size on CountdownWI_C_CountdownUpdate");
static_assert(offsetof(CountdownWI_C_CountdownUpdate, CallFunc_LessEqual_IntInt_ReturnValue) == 0x000000, "Member 'CountdownWI_C_CountdownUpdate::CallFunc_LessEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(CountdownWI_C_CountdownUpdate, CallFunc_Conv_IntToText_ReturnValue) == 0x000008, "Member 'CountdownWI_C_CountdownUpdate::CallFunc_Conv_IntToText_ReturnValue' has a wrong offset!");
static_assert(offsetof(CountdownWI_C_CountdownUpdate, CallFunc_Subtract_IntInt_ReturnValue) == 0x000020, "Member 'CountdownWI_C_CountdownUpdate::CallFunc_Subtract_IntInt_ReturnValue' has a wrong offset!");

// Function CountdownWI.CountdownWI_C.FadeFunction
// 0x0018 (0x0018 - 0x0000)
struct CountdownWI_C_FadeFunction final
{
public:
	bool                                          In;                                                // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable;                                // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	EUMGSequencePlayMode                          Temp_byte_Variable;                                // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EUMGSequencePlayMode                          Temp_byte_Variable_1;                              // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetAnimationCurrentTime_ReturnValue;      // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EUMGSequencePlayMode                          K2Node_Select_Default;                             // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UUMGSequencePlayer*                     CallFunc_PlayAnimation_ReturnValue;                // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(CountdownWI_C_FadeFunction) == 0x000008, "Wrong alignment on CountdownWI_C_FadeFunction");
static_assert(sizeof(CountdownWI_C_FadeFunction) == 0x000018, "Wrong size on CountdownWI_C_FadeFunction");
static_assert(offsetof(CountdownWI_C_FadeFunction, In) == 0x000000, "Member 'CountdownWI_C_FadeFunction::In' has a wrong offset!");
static_assert(offsetof(CountdownWI_C_FadeFunction, Temp_bool_Variable) == 0x000001, "Member 'CountdownWI_C_FadeFunction::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(CountdownWI_C_FadeFunction, Temp_byte_Variable) == 0x000002, "Member 'CountdownWI_C_FadeFunction::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(CountdownWI_C_FadeFunction, Temp_byte_Variable_1) == 0x000003, "Member 'CountdownWI_C_FadeFunction::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(CountdownWI_C_FadeFunction, CallFunc_GetAnimationCurrentTime_ReturnValue) == 0x000004, "Member 'CountdownWI_C_FadeFunction::CallFunc_GetAnimationCurrentTime_ReturnValue' has a wrong offset!");
static_assert(offsetof(CountdownWI_C_FadeFunction, K2Node_Select_Default) == 0x000008, "Member 'CountdownWI_C_FadeFunction::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(CountdownWI_C_FadeFunction, CallFunc_PlayAnimation_ReturnValue) == 0x000010, "Member 'CountdownWI_C_FadeFunction::CallFunc_PlayAnimation_ReturnValue' has a wrong offset!");

}

