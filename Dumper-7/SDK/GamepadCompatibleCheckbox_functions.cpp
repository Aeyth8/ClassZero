#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: GamepadCompatibleCheckbox

#include "Basic.hpp"

#include "GamepadCompatibleCheckbox_classes.hpp"
#include "GamepadCompatibleCheckbox_parameters.hpp"


namespace SDK
{

// Function GamepadCompatibleCheckbox.GamepadCompatibleCheckbox_C.OnCheckStateChanged__DelegateSignature
// (Public, Delegate, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    IsChecked                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UGamepadCompatibleCheckbox_C::OnCheckStateChanged__DelegateSignature(bool IsChecked)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GamepadCompatibleCheckbox_C", "OnCheckStateChanged__DelegateSignature");

	Params::GamepadCompatibleCheckbox_C_OnCheckStateChanged__DelegateSignature Parms{};

	Parms.IsChecked = IsChecked;

	UObject::ProcessEvent(Func, &Parms);
}


// Function GamepadCompatibleCheckbox.GamepadCompatibleCheckbox_C.OnHovered__DelegateSignature
// (Public, Delegate, BlueprintCallable, BlueprintEvent)

void UGamepadCompatibleCheckbox_C::OnHovered__DelegateSignature()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GamepadCompatibleCheckbox_C", "OnHovered__DelegateSignature");

	UObject::ProcessEvent(Func, nullptr);
}


// Function GamepadCompatibleCheckbox.GamepadCompatibleCheckbox_C.OnUnhovered__DelegateSignature
// (Public, Delegate, BlueprintCallable, BlueprintEvent)

void UGamepadCompatibleCheckbox_C::OnUnhovered__DelegateSignature()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GamepadCompatibleCheckbox_C", "OnUnhovered__DelegateSignature");

	UObject::ProcessEvent(Func, nullptr);
}


// Function GamepadCompatibleCheckbox.GamepadCompatibleCheckbox_C.ExecuteUbergraph_GamepadCompatibleCheckbox
// (Final, UbergraphFunction, HasDefaults)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UGamepadCompatibleCheckbox_C::ExecuteUbergraph_GamepadCompatibleCheckbox(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GamepadCompatibleCheckbox_C", "ExecuteUbergraph_GamepadCompatibleCheckbox");

	Params::GamepadCompatibleCheckbox_C_ExecuteUbergraph_GamepadCompatibleCheckbox Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function GamepadCompatibleCheckbox.GamepadCompatibleCheckbox_C.OnMouseLeave
// (BlueprintCosmetic, Event, Public, HasOutParams, BlueprintEvent)
// Parameters:
// struct FPointerEvent                    MouseEvent                                             (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)

void UGamepadCompatibleCheckbox_C::OnMouseLeave(const struct FPointerEvent& MouseEvent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GamepadCompatibleCheckbox_C", "OnMouseLeave");

	Params::GamepadCompatibleCheckbox_C_OnMouseLeave Parms{};

	Parms.MouseEvent = std::move(MouseEvent);

	UObject::ProcessEvent(Func, &Parms);
}


// Function GamepadCompatibleCheckbox.GamepadCompatibleCheckbox_C.OnMouseEnter
// (BlueprintCosmetic, Event, Public, HasOutParams, BlueprintEvent)
// Parameters:
// struct FGeometry                        MyGeometry                                             (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
// struct FPointerEvent                    MouseEvent                                             (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)

void UGamepadCompatibleCheckbox_C::OnMouseEnter(const struct FGeometry& MyGeometry, const struct FPointerEvent& MouseEvent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GamepadCompatibleCheckbox_C", "OnMouseEnter");

	Params::GamepadCompatibleCheckbox_C_OnMouseEnter Parms{};

	Parms.MyGeometry = std::move(MyGeometry);
	Parms.MouseEvent = std::move(MouseEvent);

	UObject::ProcessEvent(Func, &Parms);
}


// Function GamepadCompatibleCheckbox.GamepadCompatibleCheckbox_C.OnRemovedFromFocusPath
// (BlueprintCosmetic, Event, Public, BlueprintEvent)
// Parameters:
// struct FFocusEvent                      InFocusEvent                                           (BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)

void UGamepadCompatibleCheckbox_C::OnRemovedFromFocusPath(const struct FFocusEvent& InFocusEvent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GamepadCompatibleCheckbox_C", "OnRemovedFromFocusPath");

	Params::GamepadCompatibleCheckbox_C_OnRemovedFromFocusPath Parms{};

	Parms.InFocusEvent = std::move(InFocusEvent);

	UObject::ProcessEvent(Func, &Parms);
}


// Function GamepadCompatibleCheckbox.GamepadCompatibleCheckbox_C.PreConstruct
// (BlueprintCosmetic, Event, Public, BlueprintEvent)
// Parameters:
// bool                                    IsDesignTime                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UGamepadCompatibleCheckbox_C::PreConstruct(bool IsDesignTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GamepadCompatibleCheckbox_C", "PreConstruct");

	Params::GamepadCompatibleCheckbox_C_PreConstruct Parms{};

	Parms.IsDesignTime = IsDesignTime;

	UObject::ProcessEvent(Func, &Parms);
}


// Function GamepadCompatibleCheckbox.GamepadCompatibleCheckbox_C.OnAddedToFocusPath
// (BlueprintCosmetic, Event, Public, BlueprintEvent)
// Parameters:
// struct FFocusEvent                      InFocusEvent                                           (BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)

void UGamepadCompatibleCheckbox_C::OnAddedToFocusPath(const struct FFocusEvent& InFocusEvent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GamepadCompatibleCheckbox_C", "OnAddedToFocusPath");

	Params::GamepadCompatibleCheckbox_C_OnAddedToFocusPath Parms{};

	Parms.InFocusEvent = std::move(InFocusEvent);

	UObject::ProcessEvent(Func, &Parms);
}


// Function GamepadCompatibleCheckbox.GamepadCompatibleCheckbox_C.BndEvt__GamepadCheckBox_K2Node_ComponentBoundEvent_0_OnCheckBoxComponentStateChanged__DelegateSignature
// (BlueprintEvent)
// Parameters:
// bool                                    bIsChecked                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UGamepadCompatibleCheckbox_C::BndEvt__GamepadCheckBox_K2Node_ComponentBoundEvent_0_OnCheckBoxComponentStateChanged__DelegateSignature(bool bIsChecked)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GamepadCompatibleCheckbox_C", "BndEvt__GamepadCheckBox_K2Node_ComponentBoundEvent_0_OnCheckBoxComponentStateChanged__DelegateSignature");

	Params::GamepadCompatibleCheckbox_C_BndEvt__GamepadCheckBox_K2Node_ComponentBoundEvent_0_OnCheckBoxComponentStateChanged__DelegateSignature Parms{};

	Parms.bIsChecked = bIsChecked;

	UObject::ProcessEvent(Func, &Parms);
}


// Function GamepadCompatibleCheckbox.GamepadCompatibleCheckbox_C.SetMouseToFocus
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void UGamepadCompatibleCheckbox_C::SetMouseToFocus()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GamepadCompatibleCheckbox_C", "SetMouseToFocus");

	UObject::ProcessEvent(Func, nullptr);
}


// Function GamepadCompatibleCheckbox.GamepadCompatibleCheckbox_C.DisableButton
// (Public, BlueprintCallable, BlueprintEvent)

void UGamepadCompatibleCheckbox_C::DisableButton()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GamepadCompatibleCheckbox_C", "DisableButton");

	UObject::ProcessEvent(Func, nullptr);
}


// Function GamepadCompatibleCheckbox.GamepadCompatibleCheckbox_C.EnableButton
// (Public, BlueprintCallable, BlueprintEvent)

void UGamepadCompatibleCheckbox_C::EnableButton()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GamepadCompatibleCheckbox_C", "EnableButton");

	UObject::ProcessEvent(Func, nullptr);
}


// Function GamepadCompatibleCheckbox.GamepadCompatibleCheckbox_C.UpdateFocusHandler
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void UGamepadCompatibleCheckbox_C::UpdateFocusHandler()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GamepadCompatibleCheckbox_C", "UpdateFocusHandler");

	UObject::ProcessEvent(Func, nullptr);
}


// Function GamepadCompatibleCheckbox.GamepadCompatibleCheckbox_C.ChangeToImage
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void UGamepadCompatibleCheckbox_C::ChangeToImage()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GamepadCompatibleCheckbox_C", "ChangeToImage");

	UObject::ProcessEvent(Func, nullptr);
}

}

