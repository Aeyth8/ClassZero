#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: TutorialColliderSCTsmall

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Engine_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass TutorialColliderSCTsmall.TutorialColliderSCTsmall_C
// 0x0028 (0x0248 - 0x0220)
class ATutorialColliderSCTsmall_C final : public AActor
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0220(0x0008)(ZeroConstructor, Transient, DuplicateTransient, UObjectWrapper)
	class USphereComponent*                       Sphere;                                            // 0x0228(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	class USceneComponent*                        DefaultSceneRoot;                                  // 0x0230(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	bool                                          OnCooldown;                                        // 0x0238(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_239[0x3];                                      // 0x0239(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   TutorialName;                                      // 0x023C(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_TutorialColliderSCTsmall(int32 EntryPoint);
	void CustomEvent_0();
	void BndEvt__Sphere_K2Node_ComponentBoundEvent_1_ComponentEndOverlapSignature__DelegateSignature(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex);
	void BndEvt__Sphere_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult);
	bool ShouldShowTutorial();

	void GetSpecialOptions(class Ubp_SpecialOptionsSave_C** AsBp_Special_Options_Save) const;

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"TutorialColliderSCTsmall_C">();
	}
	static class ATutorialColliderSCTsmall_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ATutorialColliderSCTsmall_C>();
	}
};
static_assert(alignof(ATutorialColliderSCTsmall_C) == 0x000008, "Wrong alignment on ATutorialColliderSCTsmall_C");
static_assert(sizeof(ATutorialColliderSCTsmall_C) == 0x000248, "Wrong size on ATutorialColliderSCTsmall_C");
static_assert(offsetof(ATutorialColliderSCTsmall_C, UberGraphFrame) == 0x000220, "Member 'ATutorialColliderSCTsmall_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ATutorialColliderSCTsmall_C, Sphere) == 0x000228, "Member 'ATutorialColliderSCTsmall_C::Sphere' has a wrong offset!");
static_assert(offsetof(ATutorialColliderSCTsmall_C, DefaultSceneRoot) == 0x000230, "Member 'ATutorialColliderSCTsmall_C::DefaultSceneRoot' has a wrong offset!");
static_assert(offsetof(ATutorialColliderSCTsmall_C, OnCooldown) == 0x000238, "Member 'ATutorialColliderSCTsmall_C::OnCooldown' has a wrong offset!");
static_assert(offsetof(ATutorialColliderSCTsmall_C, TutorialName) == 0x00023C, "Member 'ATutorialColliderSCTsmall_C::TutorialName' has a wrong offset!");

}

