#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_AquaticSurface

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "Engine_structs.hpp"


namespace SDK::Params
{

// Function BP_AquaticSurface.BP_AquaticSurface_C.ExecuteUbergraph_BP_AquaticSurface
// 0x0350 (0x0350 - 0x0000)
struct BP_AquaticSurface_C_ExecuteUbergraph_BP_AquaticSurface final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable_1;                   // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable_1;                  // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate;              // 0x0018(0x0010)(ZeroConstructor, NoDestructor)
	int32                                         CallFunc_Add_IntInt_ReturnValue_1;                 // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_IsClosed_Variable;                       // 0x002C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Has_Been_Initd_Variable;                 // 0x002D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2E[0x2];                                       // 0x002E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Loop_Counter_Variable_2;                  // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_2;                 // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_IsClosed_Variable_1;                     // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Has_Been_Initd_Variable_1;               // 0x0039(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_GreaterEqual_FloatFloat_ReturnValue;      // 0x003A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3B[0x5];                                       // 0x003B(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class UPrimitiveComponent*                    K2Node_ComponentBoundEvent_OverlappedComponent_5;  // 0x0040(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 K2Node_ComponentBoundEvent_OtherActor_5;           // 0x0048(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    K2Node_ComponentBoundEvent_OtherComp_5;            // 0x0050(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_ComponentBoundEvent_OtherBodyIndex_5;       // 0x0058(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_ComponentBoundEvent_bFromSweep_2;           // 0x005C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5D[0x3];                                       // 0x005D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             K2Node_ComponentBoundEvent_SweepResult_2;          // 0x0060(0x008C)(ConstParm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
	uint8                                         Pad_EC[0x4];                                       // 0x00EC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UPrimitiveComponent*                    K2Node_ComponentBoundEvent_OverlappedComponent_4;  // 0x00F0(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 K2Node_ComponentBoundEvent_OtherActor_4;           // 0x00F8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    K2Node_ComponentBoundEvent_OtherComp_4;            // 0x0100(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_ComponentBoundEvent_OtherBodyIndex_4;       // 0x0108(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable_2;                   // 0x010C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class AActor*>                         CallFunc_GetOverlappingActors_OverlappingActors;   // 0x0110(0x0010)(ReferenceParm)
	class AActor*                                 CallFunc_Array_Get_Item;                           // 0x0120(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0128(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x012C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_12D[0x3];                                      // 0x012D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UPrimitiveComponent*                    K2Node_ComponentBoundEvent_OverlappedComponent_3;  // 0x0130(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 K2Node_ComponentBoundEvent_OtherActor_3;           // 0x0138(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    K2Node_ComponentBoundEvent_OtherComp_3;            // 0x0140(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_ComponentBoundEvent_OtherBodyIndex_3;       // 0x0148(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_ComponentBoundEvent_bFromSweep_1;           // 0x014C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_14D[0x3];                                      // 0x014D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             K2Node_ComponentBoundEvent_SweepResult_1;          // 0x0150(0x008C)(ConstParm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
	uint8                                         Pad_1DC[0x4];                                      // 0x01DC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UPrimitiveComponent*                    K2Node_ComponentBoundEvent_OverlappedComponent_2;  // 0x01E0(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 K2Node_ComponentBoundEvent_OtherActor_2;           // 0x01E8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    K2Node_ComponentBoundEvent_OtherComp_2;            // 0x01F0(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_ComponentBoundEvent_OtherBodyIndex_2;       // 0x01F8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1FC[0x4];                                      // 0x01FC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AActor*>                         CallFunc_GetOverlappingActors_OverlappingActors_1; // 0x0200(0x0010)(ReferenceParm)
	class AActor*                                 CallFunc_Array_Get_Item_1;                         // 0x0210(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue_1;               // 0x0218(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue_1;                // 0x021C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue;           // 0x021D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_21E[0x2];                                      // 0x021E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTimerHandle                           CallFunc_K2_SetTimerDelegate_ReturnValue;          // 0x0220(0x0008)(NoDestructor, HasGetValueTypeHash)
	struct FIntVector                             K2Node_Event_Old_Origin;                           // 0x0228(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FIntVector                             K2Node_Event_New_Origin;                           // 0x0234(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    K2Node_ComponentBoundEvent_OverlappedComponent_1;  // 0x0240(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 K2Node_ComponentBoundEvent_OtherActor_1;           // 0x0248(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    K2Node_ComponentBoundEvent_OtherComp_1;            // 0x0250(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_ComponentBoundEvent_OtherBodyIndex_1;       // 0x0258(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_ComponentBoundEvent_bFromSweep;             // 0x025C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_25D[0x3];                                      // 0x025D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             K2Node_ComponentBoundEvent_SweepResult;            // 0x0260(0x008C)(ConstParm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
	uint8                                         Pad_2EC[0x4];                                      // 0x02EC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UPrimitiveComponent*                    K2Node_ComponentBoundEvent_OverlappedComponent;    // 0x02F0(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 K2Node_ComponentBoundEvent_OtherActor;             // 0x02F8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    K2Node_ComponentBoundEvent_OtherComp;              // 0x0300(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_ComponentBoundEvent_OtherBodyIndex;         // 0x0308(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_30C[0x4];                                      // 0x030C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ACharacterSCTBP_C*                      K2Node_DynamicCast_AsCharacter_SCTBP;              // 0x0310(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0318(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_319[0x7];                                      // 0x0319(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ACharacterSCTBP_C*                      K2Node_DynamicCast_AsCharacter_SCTBP_1;            // 0x0320(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x0328(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_329[0x7];                                      // 0x0329(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AActor*>                         CallFunc_GetOverlappingActors_OverlappingActors_2; // 0x0330(0x0010)(ReferenceParm)
	class AActor*                                 CallFunc_Array_Get_Item_2;                         // 0x0340(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue_2;               // 0x0348(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue_2;                // 0x034C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x034D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_AquaticSurface_C_ExecuteUbergraph_BP_AquaticSurface) == 0x000008, "Wrong alignment on BP_AquaticSurface_C_ExecuteUbergraph_BP_AquaticSurface");
static_assert(sizeof(BP_AquaticSurface_C_ExecuteUbergraph_BP_AquaticSurface) == 0x000350, "Wrong size on BP_AquaticSurface_C_ExecuteUbergraph_BP_AquaticSurface");
static_assert(offsetof(BP_AquaticSurface_C_ExecuteUbergraph_BP_AquaticSurface, EntryPoint) == 0x000000, "Member 'BP_AquaticSurface_C_ExecuteUbergraph_BP_AquaticSurface::EntryPoint' has a wrong offset!");
static_assert(offsetof(BP_AquaticSurface_C_ExecuteUbergraph_BP_AquaticSurface, Temp_int_Array_Index_Variable) == 0x000004, "Member 'BP_AquaticSurface_C_ExecuteUbergraph_BP_AquaticSurface::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BP_AquaticSurface_C_ExecuteUbergraph_BP_AquaticSurface, Temp_int_Loop_Counter_Variable) == 0x000008, "Member 'BP_AquaticSurface_C_ExecuteUbergraph_BP_AquaticSurface::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BP_AquaticSurface_C_ExecuteUbergraph_BP_AquaticSurface, CallFunc_Add_IntInt_ReturnValue) == 0x00000C, "Member 'BP_AquaticSurface_C_ExecuteUbergraph_BP_AquaticSurface::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AquaticSurface_C_ExecuteUbergraph_BP_AquaticSurface, Temp_int_Array_Index_Variable_1) == 0x000010, "Member 'BP_AquaticSurface_C_ExecuteUbergraph_BP_AquaticSurface::Temp_int_Array_Index_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_AquaticSurface_C_ExecuteUbergraph_BP_AquaticSurface, Temp_int_Loop_Counter_Variable_1) == 0x000014, "Member 'BP_AquaticSurface_C_ExecuteUbergraph_BP_AquaticSurface::Temp_int_Loop_Counter_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_AquaticSurface_C_ExecuteUbergraph_BP_AquaticSurface, K2Node_CreateDelegate_OutputDelegate) == 0x000018, "Member 'BP_AquaticSurface_C_ExecuteUbergraph_BP_AquaticSurface::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(BP_AquaticSurface_C_ExecuteUbergraph_BP_AquaticSurface, CallFunc_Add_IntInt_ReturnValue_1) == 0x000028, "Member 'BP_AquaticSurface_C_ExecuteUbergraph_BP_AquaticSurface::CallFunc_Add_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_AquaticSurface_C_ExecuteUbergraph_BP_AquaticSurface, Temp_bool_IsClosed_Variable) == 0x00002C, "Member 'BP_AquaticSurface_C_ExecuteUbergraph_BP_AquaticSurface::Temp_bool_IsClosed_Variable' has a wrong offset!");
static_assert(offsetof(BP_AquaticSurface_C_ExecuteUbergraph_BP_AquaticSurface, Temp_bool_Has_Been_Initd_Variable) == 0x00002D, "Member 'BP_AquaticSurface_C_ExecuteUbergraph_BP_AquaticSurface::Temp_bool_Has_Been_Initd_Variable' has a wrong offset!");
static_assert(offsetof(BP_AquaticSurface_C_ExecuteUbergraph_BP_AquaticSurface, Temp_int_Loop_Counter_Variable_2) == 0x000030, "Member 'BP_AquaticSurface_C_ExecuteUbergraph_BP_AquaticSurface::Temp_int_Loop_Counter_Variable_2' has a wrong offset!");
static_assert(offsetof(BP_AquaticSurface_C_ExecuteUbergraph_BP_AquaticSurface, CallFunc_Add_IntInt_ReturnValue_2) == 0x000034, "Member 'BP_AquaticSurface_C_ExecuteUbergraph_BP_AquaticSurface::CallFunc_Add_IntInt_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_AquaticSurface_C_ExecuteUbergraph_BP_AquaticSurface, Temp_bool_IsClosed_Variable_1) == 0x000038, "Member 'BP_AquaticSurface_C_ExecuteUbergraph_BP_AquaticSurface::Temp_bool_IsClosed_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_AquaticSurface_C_ExecuteUbergraph_BP_AquaticSurface, Temp_bool_Has_Been_Initd_Variable_1) == 0x000039, "Member 'BP_AquaticSurface_C_ExecuteUbergraph_BP_AquaticSurface::Temp_bool_Has_Been_Initd_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_AquaticSurface_C_ExecuteUbergraph_BP_AquaticSurface, CallFunc_GreaterEqual_FloatFloat_ReturnValue) == 0x00003A, "Member 'BP_AquaticSurface_C_ExecuteUbergraph_BP_AquaticSurface::CallFunc_GreaterEqual_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AquaticSurface_C_ExecuteUbergraph_BP_AquaticSurface, K2Node_ComponentBoundEvent_OverlappedComponent_5) == 0x000040, "Member 'BP_AquaticSurface_C_ExecuteUbergraph_BP_AquaticSurface::K2Node_ComponentBoundEvent_OverlappedComponent_5' has a wrong offset!");
static_assert(offsetof(BP_AquaticSurface_C_ExecuteUbergraph_BP_AquaticSurface, K2Node_ComponentBoundEvent_OtherActor_5) == 0x000048, "Member 'BP_AquaticSurface_C_ExecuteUbergraph_BP_AquaticSurface::K2Node_ComponentBoundEvent_OtherActor_5' has a wrong offset!");
static_assert(offsetof(BP_AquaticSurface_C_ExecuteUbergraph_BP_AquaticSurface, K2Node_ComponentBoundEvent_OtherComp_5) == 0x000050, "Member 'BP_AquaticSurface_C_ExecuteUbergraph_BP_AquaticSurface::K2Node_ComponentBoundEvent_OtherComp_5' has a wrong offset!");
static_assert(offsetof(BP_AquaticSurface_C_ExecuteUbergraph_BP_AquaticSurface, K2Node_ComponentBoundEvent_OtherBodyIndex_5) == 0x000058, "Member 'BP_AquaticSurface_C_ExecuteUbergraph_BP_AquaticSurface::K2Node_ComponentBoundEvent_OtherBodyIndex_5' has a wrong offset!");
static_assert(offsetof(BP_AquaticSurface_C_ExecuteUbergraph_BP_AquaticSurface, K2Node_ComponentBoundEvent_bFromSweep_2) == 0x00005C, "Member 'BP_AquaticSurface_C_ExecuteUbergraph_BP_AquaticSurface::K2Node_ComponentBoundEvent_bFromSweep_2' has a wrong offset!");
static_assert(offsetof(BP_AquaticSurface_C_ExecuteUbergraph_BP_AquaticSurface, K2Node_ComponentBoundEvent_SweepResult_2) == 0x000060, "Member 'BP_AquaticSurface_C_ExecuteUbergraph_BP_AquaticSurface::K2Node_ComponentBoundEvent_SweepResult_2' has a wrong offset!");
static_assert(offsetof(BP_AquaticSurface_C_ExecuteUbergraph_BP_AquaticSurface, K2Node_ComponentBoundEvent_OverlappedComponent_4) == 0x0000F0, "Member 'BP_AquaticSurface_C_ExecuteUbergraph_BP_AquaticSurface::K2Node_ComponentBoundEvent_OverlappedComponent_4' has a wrong offset!");
static_assert(offsetof(BP_AquaticSurface_C_ExecuteUbergraph_BP_AquaticSurface, K2Node_ComponentBoundEvent_OtherActor_4) == 0x0000F8, "Member 'BP_AquaticSurface_C_ExecuteUbergraph_BP_AquaticSurface::K2Node_ComponentBoundEvent_OtherActor_4' has a wrong offset!");
static_assert(offsetof(BP_AquaticSurface_C_ExecuteUbergraph_BP_AquaticSurface, K2Node_ComponentBoundEvent_OtherComp_4) == 0x000100, "Member 'BP_AquaticSurface_C_ExecuteUbergraph_BP_AquaticSurface::K2Node_ComponentBoundEvent_OtherComp_4' has a wrong offset!");
static_assert(offsetof(BP_AquaticSurface_C_ExecuteUbergraph_BP_AquaticSurface, K2Node_ComponentBoundEvent_OtherBodyIndex_4) == 0x000108, "Member 'BP_AquaticSurface_C_ExecuteUbergraph_BP_AquaticSurface::K2Node_ComponentBoundEvent_OtherBodyIndex_4' has a wrong offset!");
static_assert(offsetof(BP_AquaticSurface_C_ExecuteUbergraph_BP_AquaticSurface, Temp_int_Array_Index_Variable_2) == 0x00010C, "Member 'BP_AquaticSurface_C_ExecuteUbergraph_BP_AquaticSurface::Temp_int_Array_Index_Variable_2' has a wrong offset!");
static_assert(offsetof(BP_AquaticSurface_C_ExecuteUbergraph_BP_AquaticSurface, CallFunc_GetOverlappingActors_OverlappingActors) == 0x000110, "Member 'BP_AquaticSurface_C_ExecuteUbergraph_BP_AquaticSurface::CallFunc_GetOverlappingActors_OverlappingActors' has a wrong offset!");
static_assert(offsetof(BP_AquaticSurface_C_ExecuteUbergraph_BP_AquaticSurface, CallFunc_Array_Get_Item) == 0x000120, "Member 'BP_AquaticSurface_C_ExecuteUbergraph_BP_AquaticSurface::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BP_AquaticSurface_C_ExecuteUbergraph_BP_AquaticSurface, CallFunc_Array_Length_ReturnValue) == 0x000128, "Member 'BP_AquaticSurface_C_ExecuteUbergraph_BP_AquaticSurface::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AquaticSurface_C_ExecuteUbergraph_BP_AquaticSurface, CallFunc_Less_IntInt_ReturnValue) == 0x00012C, "Member 'BP_AquaticSurface_C_ExecuteUbergraph_BP_AquaticSurface::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AquaticSurface_C_ExecuteUbergraph_BP_AquaticSurface, K2Node_ComponentBoundEvent_OverlappedComponent_3) == 0x000130, "Member 'BP_AquaticSurface_C_ExecuteUbergraph_BP_AquaticSurface::K2Node_ComponentBoundEvent_OverlappedComponent_3' has a wrong offset!");
static_assert(offsetof(BP_AquaticSurface_C_ExecuteUbergraph_BP_AquaticSurface, K2Node_ComponentBoundEvent_OtherActor_3) == 0x000138, "Member 'BP_AquaticSurface_C_ExecuteUbergraph_BP_AquaticSurface::K2Node_ComponentBoundEvent_OtherActor_3' has a wrong offset!");
static_assert(offsetof(BP_AquaticSurface_C_ExecuteUbergraph_BP_AquaticSurface, K2Node_ComponentBoundEvent_OtherComp_3) == 0x000140, "Member 'BP_AquaticSurface_C_ExecuteUbergraph_BP_AquaticSurface::K2Node_ComponentBoundEvent_OtherComp_3' has a wrong offset!");
static_assert(offsetof(BP_AquaticSurface_C_ExecuteUbergraph_BP_AquaticSurface, K2Node_ComponentBoundEvent_OtherBodyIndex_3) == 0x000148, "Member 'BP_AquaticSurface_C_ExecuteUbergraph_BP_AquaticSurface::K2Node_ComponentBoundEvent_OtherBodyIndex_3' has a wrong offset!");
static_assert(offsetof(BP_AquaticSurface_C_ExecuteUbergraph_BP_AquaticSurface, K2Node_ComponentBoundEvent_bFromSweep_1) == 0x00014C, "Member 'BP_AquaticSurface_C_ExecuteUbergraph_BP_AquaticSurface::K2Node_ComponentBoundEvent_bFromSweep_1' has a wrong offset!");
static_assert(offsetof(BP_AquaticSurface_C_ExecuteUbergraph_BP_AquaticSurface, K2Node_ComponentBoundEvent_SweepResult_1) == 0x000150, "Member 'BP_AquaticSurface_C_ExecuteUbergraph_BP_AquaticSurface::K2Node_ComponentBoundEvent_SweepResult_1' has a wrong offset!");
static_assert(offsetof(BP_AquaticSurface_C_ExecuteUbergraph_BP_AquaticSurface, K2Node_ComponentBoundEvent_OverlappedComponent_2) == 0x0001E0, "Member 'BP_AquaticSurface_C_ExecuteUbergraph_BP_AquaticSurface::K2Node_ComponentBoundEvent_OverlappedComponent_2' has a wrong offset!");
static_assert(offsetof(BP_AquaticSurface_C_ExecuteUbergraph_BP_AquaticSurface, K2Node_ComponentBoundEvent_OtherActor_2) == 0x0001E8, "Member 'BP_AquaticSurface_C_ExecuteUbergraph_BP_AquaticSurface::K2Node_ComponentBoundEvent_OtherActor_2' has a wrong offset!");
static_assert(offsetof(BP_AquaticSurface_C_ExecuteUbergraph_BP_AquaticSurface, K2Node_ComponentBoundEvent_OtherComp_2) == 0x0001F0, "Member 'BP_AquaticSurface_C_ExecuteUbergraph_BP_AquaticSurface::K2Node_ComponentBoundEvent_OtherComp_2' has a wrong offset!");
static_assert(offsetof(BP_AquaticSurface_C_ExecuteUbergraph_BP_AquaticSurface, K2Node_ComponentBoundEvent_OtherBodyIndex_2) == 0x0001F8, "Member 'BP_AquaticSurface_C_ExecuteUbergraph_BP_AquaticSurface::K2Node_ComponentBoundEvent_OtherBodyIndex_2' has a wrong offset!");
static_assert(offsetof(BP_AquaticSurface_C_ExecuteUbergraph_BP_AquaticSurface, CallFunc_GetOverlappingActors_OverlappingActors_1) == 0x000200, "Member 'BP_AquaticSurface_C_ExecuteUbergraph_BP_AquaticSurface::CallFunc_GetOverlappingActors_OverlappingActors_1' has a wrong offset!");
static_assert(offsetof(BP_AquaticSurface_C_ExecuteUbergraph_BP_AquaticSurface, CallFunc_Array_Get_Item_1) == 0x000210, "Member 'BP_AquaticSurface_C_ExecuteUbergraph_BP_AquaticSurface::CallFunc_Array_Get_Item_1' has a wrong offset!");
static_assert(offsetof(BP_AquaticSurface_C_ExecuteUbergraph_BP_AquaticSurface, CallFunc_Array_Length_ReturnValue_1) == 0x000218, "Member 'BP_AquaticSurface_C_ExecuteUbergraph_BP_AquaticSurface::CallFunc_Array_Length_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_AquaticSurface_C_ExecuteUbergraph_BP_AquaticSurface, CallFunc_Less_IntInt_ReturnValue_1) == 0x00021C, "Member 'BP_AquaticSurface_C_ExecuteUbergraph_BP_AquaticSurface::CallFunc_Less_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_AquaticSurface_C_ExecuteUbergraph_BP_AquaticSurface, CallFunc_Greater_FloatFloat_ReturnValue) == 0x00021D, "Member 'BP_AquaticSurface_C_ExecuteUbergraph_BP_AquaticSurface::CallFunc_Greater_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AquaticSurface_C_ExecuteUbergraph_BP_AquaticSurface, CallFunc_K2_SetTimerDelegate_ReturnValue) == 0x000220, "Member 'BP_AquaticSurface_C_ExecuteUbergraph_BP_AquaticSurface::CallFunc_K2_SetTimerDelegate_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AquaticSurface_C_ExecuteUbergraph_BP_AquaticSurface, K2Node_Event_Old_Origin) == 0x000228, "Member 'BP_AquaticSurface_C_ExecuteUbergraph_BP_AquaticSurface::K2Node_Event_Old_Origin' has a wrong offset!");
static_assert(offsetof(BP_AquaticSurface_C_ExecuteUbergraph_BP_AquaticSurface, K2Node_Event_New_Origin) == 0x000234, "Member 'BP_AquaticSurface_C_ExecuteUbergraph_BP_AquaticSurface::K2Node_Event_New_Origin' has a wrong offset!");
static_assert(offsetof(BP_AquaticSurface_C_ExecuteUbergraph_BP_AquaticSurface, K2Node_ComponentBoundEvent_OverlappedComponent_1) == 0x000240, "Member 'BP_AquaticSurface_C_ExecuteUbergraph_BP_AquaticSurface::K2Node_ComponentBoundEvent_OverlappedComponent_1' has a wrong offset!");
static_assert(offsetof(BP_AquaticSurface_C_ExecuteUbergraph_BP_AquaticSurface, K2Node_ComponentBoundEvent_OtherActor_1) == 0x000248, "Member 'BP_AquaticSurface_C_ExecuteUbergraph_BP_AquaticSurface::K2Node_ComponentBoundEvent_OtherActor_1' has a wrong offset!");
static_assert(offsetof(BP_AquaticSurface_C_ExecuteUbergraph_BP_AquaticSurface, K2Node_ComponentBoundEvent_OtherComp_1) == 0x000250, "Member 'BP_AquaticSurface_C_ExecuteUbergraph_BP_AquaticSurface::K2Node_ComponentBoundEvent_OtherComp_1' has a wrong offset!");
static_assert(offsetof(BP_AquaticSurface_C_ExecuteUbergraph_BP_AquaticSurface, K2Node_ComponentBoundEvent_OtherBodyIndex_1) == 0x000258, "Member 'BP_AquaticSurface_C_ExecuteUbergraph_BP_AquaticSurface::K2Node_ComponentBoundEvent_OtherBodyIndex_1' has a wrong offset!");
static_assert(offsetof(BP_AquaticSurface_C_ExecuteUbergraph_BP_AquaticSurface, K2Node_ComponentBoundEvent_bFromSweep) == 0x00025C, "Member 'BP_AquaticSurface_C_ExecuteUbergraph_BP_AquaticSurface::K2Node_ComponentBoundEvent_bFromSweep' has a wrong offset!");
static_assert(offsetof(BP_AquaticSurface_C_ExecuteUbergraph_BP_AquaticSurface, K2Node_ComponentBoundEvent_SweepResult) == 0x000260, "Member 'BP_AquaticSurface_C_ExecuteUbergraph_BP_AquaticSurface::K2Node_ComponentBoundEvent_SweepResult' has a wrong offset!");
static_assert(offsetof(BP_AquaticSurface_C_ExecuteUbergraph_BP_AquaticSurface, K2Node_ComponentBoundEvent_OverlappedComponent) == 0x0002F0, "Member 'BP_AquaticSurface_C_ExecuteUbergraph_BP_AquaticSurface::K2Node_ComponentBoundEvent_OverlappedComponent' has a wrong offset!");
static_assert(offsetof(BP_AquaticSurface_C_ExecuteUbergraph_BP_AquaticSurface, K2Node_ComponentBoundEvent_OtherActor) == 0x0002F8, "Member 'BP_AquaticSurface_C_ExecuteUbergraph_BP_AquaticSurface::K2Node_ComponentBoundEvent_OtherActor' has a wrong offset!");
static_assert(offsetof(BP_AquaticSurface_C_ExecuteUbergraph_BP_AquaticSurface, K2Node_ComponentBoundEvent_OtherComp) == 0x000300, "Member 'BP_AquaticSurface_C_ExecuteUbergraph_BP_AquaticSurface::K2Node_ComponentBoundEvent_OtherComp' has a wrong offset!");
static_assert(offsetof(BP_AquaticSurface_C_ExecuteUbergraph_BP_AquaticSurface, K2Node_ComponentBoundEvent_OtherBodyIndex) == 0x000308, "Member 'BP_AquaticSurface_C_ExecuteUbergraph_BP_AquaticSurface::K2Node_ComponentBoundEvent_OtherBodyIndex' has a wrong offset!");
static_assert(offsetof(BP_AquaticSurface_C_ExecuteUbergraph_BP_AquaticSurface, K2Node_DynamicCast_AsCharacter_SCTBP) == 0x000310, "Member 'BP_AquaticSurface_C_ExecuteUbergraph_BP_AquaticSurface::K2Node_DynamicCast_AsCharacter_SCTBP' has a wrong offset!");
static_assert(offsetof(BP_AquaticSurface_C_ExecuteUbergraph_BP_AquaticSurface, K2Node_DynamicCast_bSuccess) == 0x000318, "Member 'BP_AquaticSurface_C_ExecuteUbergraph_BP_AquaticSurface::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_AquaticSurface_C_ExecuteUbergraph_BP_AquaticSurface, K2Node_DynamicCast_AsCharacter_SCTBP_1) == 0x000320, "Member 'BP_AquaticSurface_C_ExecuteUbergraph_BP_AquaticSurface::K2Node_DynamicCast_AsCharacter_SCTBP_1' has a wrong offset!");
static_assert(offsetof(BP_AquaticSurface_C_ExecuteUbergraph_BP_AquaticSurface, K2Node_DynamicCast_bSuccess_1) == 0x000328, "Member 'BP_AquaticSurface_C_ExecuteUbergraph_BP_AquaticSurface::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(BP_AquaticSurface_C_ExecuteUbergraph_BP_AquaticSurface, CallFunc_GetOverlappingActors_OverlappingActors_2) == 0x000330, "Member 'BP_AquaticSurface_C_ExecuteUbergraph_BP_AquaticSurface::CallFunc_GetOverlappingActors_OverlappingActors_2' has a wrong offset!");
static_assert(offsetof(BP_AquaticSurface_C_ExecuteUbergraph_BP_AquaticSurface, CallFunc_Array_Get_Item_2) == 0x000340, "Member 'BP_AquaticSurface_C_ExecuteUbergraph_BP_AquaticSurface::CallFunc_Array_Get_Item_2' has a wrong offset!");
static_assert(offsetof(BP_AquaticSurface_C_ExecuteUbergraph_BP_AquaticSurface, CallFunc_Array_Length_ReturnValue_2) == 0x000348, "Member 'BP_AquaticSurface_C_ExecuteUbergraph_BP_AquaticSurface::CallFunc_Array_Length_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_AquaticSurface_C_ExecuteUbergraph_BP_AquaticSurface, CallFunc_Less_IntInt_ReturnValue_2) == 0x00034C, "Member 'BP_AquaticSurface_C_ExecuteUbergraph_BP_AquaticSurface::CallFunc_Less_IntInt_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_AquaticSurface_C_ExecuteUbergraph_BP_AquaticSurface, CallFunc_IsValid_ReturnValue) == 0x00034D, "Member 'BP_AquaticSurface_C_ExecuteUbergraph_BP_AquaticSurface::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function BP_AquaticSurface.BP_AquaticSurface_C.BndEvt__PlaneOverWater_K2Node_ComponentBoundEvent_1_ComponentEndOverlapSignature__DelegateSignature
// 0x0020 (0x0020 - 0x0000)
struct BP_AquaticSurface_C_BndEvt__PlaneOverWater_K2Node_ComponentBoundEvent_1_ComponentEndOverlapSignature__DelegateSignature final
{
public:
	class UPrimitiveComponent*                    OverlappedComponent;                               // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         OtherBodyIndex;                                    // 0x0018(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_AquaticSurface_C_BndEvt__PlaneOverWater_K2Node_ComponentBoundEvent_1_ComponentEndOverlapSignature__DelegateSignature) == 0x000008, "Wrong alignment on BP_AquaticSurface_C_BndEvt__PlaneOverWater_K2Node_ComponentBoundEvent_1_ComponentEndOverlapSignature__DelegateSignature");
static_assert(sizeof(BP_AquaticSurface_C_BndEvt__PlaneOverWater_K2Node_ComponentBoundEvent_1_ComponentEndOverlapSignature__DelegateSignature) == 0x000020, "Wrong size on BP_AquaticSurface_C_BndEvt__PlaneOverWater_K2Node_ComponentBoundEvent_1_ComponentEndOverlapSignature__DelegateSignature");
static_assert(offsetof(BP_AquaticSurface_C_BndEvt__PlaneOverWater_K2Node_ComponentBoundEvent_1_ComponentEndOverlapSignature__DelegateSignature, OverlappedComponent) == 0x000000, "Member 'BP_AquaticSurface_C_BndEvt__PlaneOverWater_K2Node_ComponentBoundEvent_1_ComponentEndOverlapSignature__DelegateSignature::OverlappedComponent' has a wrong offset!");
static_assert(offsetof(BP_AquaticSurface_C_BndEvt__PlaneOverWater_K2Node_ComponentBoundEvent_1_ComponentEndOverlapSignature__DelegateSignature, OtherActor) == 0x000008, "Member 'BP_AquaticSurface_C_BndEvt__PlaneOverWater_K2Node_ComponentBoundEvent_1_ComponentEndOverlapSignature__DelegateSignature::OtherActor' has a wrong offset!");
static_assert(offsetof(BP_AquaticSurface_C_BndEvt__PlaneOverWater_K2Node_ComponentBoundEvent_1_ComponentEndOverlapSignature__DelegateSignature, OtherComp) == 0x000010, "Member 'BP_AquaticSurface_C_BndEvt__PlaneOverWater_K2Node_ComponentBoundEvent_1_ComponentEndOverlapSignature__DelegateSignature::OtherComp' has a wrong offset!");
static_assert(offsetof(BP_AquaticSurface_C_BndEvt__PlaneOverWater_K2Node_ComponentBoundEvent_1_ComponentEndOverlapSignature__DelegateSignature, OtherBodyIndex) == 0x000018, "Member 'BP_AquaticSurface_C_BndEvt__PlaneOverWater_K2Node_ComponentBoundEvent_1_ComponentEndOverlapSignature__DelegateSignature::OtherBodyIndex' has a wrong offset!");

// Function BP_AquaticSurface.BP_AquaticSurface_C.BndEvt__PlaneOverWater_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature
// 0x00B0 (0x00B0 - 0x0000)
struct BP_AquaticSurface_C_BndEvt__PlaneOverWater_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature final
{
public:
	class UPrimitiveComponent*                    OverlappedComponent;                               // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         OtherBodyIndex;                                    // 0x0018(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bFromSweep;                                        // 0x001C(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             SweepResult;                                       // 0x0020(0x008C)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
};
static_assert(alignof(BP_AquaticSurface_C_BndEvt__PlaneOverWater_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature) == 0x000008, "Wrong alignment on BP_AquaticSurface_C_BndEvt__PlaneOverWater_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature");
static_assert(sizeof(BP_AquaticSurface_C_BndEvt__PlaneOverWater_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature) == 0x0000B0, "Wrong size on BP_AquaticSurface_C_BndEvt__PlaneOverWater_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature");
static_assert(offsetof(BP_AquaticSurface_C_BndEvt__PlaneOverWater_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature, OverlappedComponent) == 0x000000, "Member 'BP_AquaticSurface_C_BndEvt__PlaneOverWater_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature::OverlappedComponent' has a wrong offset!");
static_assert(offsetof(BP_AquaticSurface_C_BndEvt__PlaneOverWater_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature, OtherActor) == 0x000008, "Member 'BP_AquaticSurface_C_BndEvt__PlaneOverWater_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature::OtherActor' has a wrong offset!");
static_assert(offsetof(BP_AquaticSurface_C_BndEvt__PlaneOverWater_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature, OtherComp) == 0x000010, "Member 'BP_AquaticSurface_C_BndEvt__PlaneOverWater_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature::OtherComp' has a wrong offset!");
static_assert(offsetof(BP_AquaticSurface_C_BndEvt__PlaneOverWater_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature, OtherBodyIndex) == 0x000018, "Member 'BP_AquaticSurface_C_BndEvt__PlaneOverWater_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature::OtherBodyIndex' has a wrong offset!");
static_assert(offsetof(BP_AquaticSurface_C_BndEvt__PlaneOverWater_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature, bFromSweep) == 0x00001C, "Member 'BP_AquaticSurface_C_BndEvt__PlaneOverWater_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature::bFromSweep' has a wrong offset!");
static_assert(offsetof(BP_AquaticSurface_C_BndEvt__PlaneOverWater_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature, SweepResult) == 0x000020, "Member 'BP_AquaticSurface_C_BndEvt__PlaneOverWater_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature::SweepResult' has a wrong offset!");

// Function BP_AquaticSurface.BP_AquaticSurface_C.OnWorldOriginChanged
// 0x0018 (0x0018 - 0x0000)
struct BP_AquaticSurface_C_OnWorldOriginChanged final
{
public:
	struct FIntVector                             Old_Origin;                                        // 0x0000(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FIntVector                             New_Origin;                                        // 0x000C(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_AquaticSurface_C_OnWorldOriginChanged) == 0x000004, "Wrong alignment on BP_AquaticSurface_C_OnWorldOriginChanged");
static_assert(sizeof(BP_AquaticSurface_C_OnWorldOriginChanged) == 0x000018, "Wrong size on BP_AquaticSurface_C_OnWorldOriginChanged");
static_assert(offsetof(BP_AquaticSurface_C_OnWorldOriginChanged, Old_Origin) == 0x000000, "Member 'BP_AquaticSurface_C_OnWorldOriginChanged::Old_Origin' has a wrong offset!");
static_assert(offsetof(BP_AquaticSurface_C_OnWorldOriginChanged, New_Origin) == 0x00000C, "Member 'BP_AquaticSurface_C_OnWorldOriginChanged::New_Origin' has a wrong offset!");

// Function BP_AquaticSurface.BP_AquaticSurface_C.BndEvt__InteractionShape_K2Node_ComponentBoundEvent_1_ComponentEndOverlapSignature__DelegateSignature
// 0x0020 (0x0020 - 0x0000)
struct BP_AquaticSurface_C_BndEvt__InteractionShape_K2Node_ComponentBoundEvent_1_ComponentEndOverlapSignature__DelegateSignature final
{
public:
	class UPrimitiveComponent*                    OverlappedComponent;                               // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         OtherBodyIndex;                                    // 0x0018(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_AquaticSurface_C_BndEvt__InteractionShape_K2Node_ComponentBoundEvent_1_ComponentEndOverlapSignature__DelegateSignature) == 0x000008, "Wrong alignment on BP_AquaticSurface_C_BndEvt__InteractionShape_K2Node_ComponentBoundEvent_1_ComponentEndOverlapSignature__DelegateSignature");
static_assert(sizeof(BP_AquaticSurface_C_BndEvt__InteractionShape_K2Node_ComponentBoundEvent_1_ComponentEndOverlapSignature__DelegateSignature) == 0x000020, "Wrong size on BP_AquaticSurface_C_BndEvt__InteractionShape_K2Node_ComponentBoundEvent_1_ComponentEndOverlapSignature__DelegateSignature");
static_assert(offsetof(BP_AquaticSurface_C_BndEvt__InteractionShape_K2Node_ComponentBoundEvent_1_ComponentEndOverlapSignature__DelegateSignature, OverlappedComponent) == 0x000000, "Member 'BP_AquaticSurface_C_BndEvt__InteractionShape_K2Node_ComponentBoundEvent_1_ComponentEndOverlapSignature__DelegateSignature::OverlappedComponent' has a wrong offset!");
static_assert(offsetof(BP_AquaticSurface_C_BndEvt__InteractionShape_K2Node_ComponentBoundEvent_1_ComponentEndOverlapSignature__DelegateSignature, OtherActor) == 0x000008, "Member 'BP_AquaticSurface_C_BndEvt__InteractionShape_K2Node_ComponentBoundEvent_1_ComponentEndOverlapSignature__DelegateSignature::OtherActor' has a wrong offset!");
static_assert(offsetof(BP_AquaticSurface_C_BndEvt__InteractionShape_K2Node_ComponentBoundEvent_1_ComponentEndOverlapSignature__DelegateSignature, OtherComp) == 0x000010, "Member 'BP_AquaticSurface_C_BndEvt__InteractionShape_K2Node_ComponentBoundEvent_1_ComponentEndOverlapSignature__DelegateSignature::OtherComp' has a wrong offset!");
static_assert(offsetof(BP_AquaticSurface_C_BndEvt__InteractionShape_K2Node_ComponentBoundEvent_1_ComponentEndOverlapSignature__DelegateSignature, OtherBodyIndex) == 0x000018, "Member 'BP_AquaticSurface_C_BndEvt__InteractionShape_K2Node_ComponentBoundEvent_1_ComponentEndOverlapSignature__DelegateSignature::OtherBodyIndex' has a wrong offset!");

// Function BP_AquaticSurface.BP_AquaticSurface_C.BndEvt__InteractionShape_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature
// 0x00B0 (0x00B0 - 0x0000)
struct BP_AquaticSurface_C_BndEvt__InteractionShape_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature final
{
public:
	class UPrimitiveComponent*                    OverlappedComponent;                               // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         OtherBodyIndex;                                    // 0x0018(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bFromSweep;                                        // 0x001C(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             SweepResult;                                       // 0x0020(0x008C)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
};
static_assert(alignof(BP_AquaticSurface_C_BndEvt__InteractionShape_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature) == 0x000008, "Wrong alignment on BP_AquaticSurface_C_BndEvt__InteractionShape_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature");
static_assert(sizeof(BP_AquaticSurface_C_BndEvt__InteractionShape_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature) == 0x0000B0, "Wrong size on BP_AquaticSurface_C_BndEvt__InteractionShape_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature");
static_assert(offsetof(BP_AquaticSurface_C_BndEvt__InteractionShape_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature, OverlappedComponent) == 0x000000, "Member 'BP_AquaticSurface_C_BndEvt__InteractionShape_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature::OverlappedComponent' has a wrong offset!");
static_assert(offsetof(BP_AquaticSurface_C_BndEvt__InteractionShape_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature, OtherActor) == 0x000008, "Member 'BP_AquaticSurface_C_BndEvt__InteractionShape_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature::OtherActor' has a wrong offset!");
static_assert(offsetof(BP_AquaticSurface_C_BndEvt__InteractionShape_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature, OtherComp) == 0x000010, "Member 'BP_AquaticSurface_C_BndEvt__InteractionShape_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature::OtherComp' has a wrong offset!");
static_assert(offsetof(BP_AquaticSurface_C_BndEvt__InteractionShape_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature, OtherBodyIndex) == 0x000018, "Member 'BP_AquaticSurface_C_BndEvt__InteractionShape_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature::OtherBodyIndex' has a wrong offset!");
static_assert(offsetof(BP_AquaticSurface_C_BndEvt__InteractionShape_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature, bFromSweep) == 0x00001C, "Member 'BP_AquaticSurface_C_BndEvt__InteractionShape_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature::bFromSweep' has a wrong offset!");
static_assert(offsetof(BP_AquaticSurface_C_BndEvt__InteractionShape_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature, SweepResult) == 0x000020, "Member 'BP_AquaticSurface_C_BndEvt__InteractionShape_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature::SweepResult' has a wrong offset!");

// Function BP_AquaticSurface.BP_AquaticSurface_C.BndEvt__PostProcessShape_K2Node_ComponentBoundEvent_0_ComponentEndOverlapSignature__DelegateSignature
// 0x0020 (0x0020 - 0x0000)
struct BP_AquaticSurface_C_BndEvt__PostProcessShape_K2Node_ComponentBoundEvent_0_ComponentEndOverlapSignature__DelegateSignature final
{
public:
	class UPrimitiveComponent*                    OverlappedComponent;                               // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         OtherBodyIndex;                                    // 0x0018(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_AquaticSurface_C_BndEvt__PostProcessShape_K2Node_ComponentBoundEvent_0_ComponentEndOverlapSignature__DelegateSignature) == 0x000008, "Wrong alignment on BP_AquaticSurface_C_BndEvt__PostProcessShape_K2Node_ComponentBoundEvent_0_ComponentEndOverlapSignature__DelegateSignature");
static_assert(sizeof(BP_AquaticSurface_C_BndEvt__PostProcessShape_K2Node_ComponentBoundEvent_0_ComponentEndOverlapSignature__DelegateSignature) == 0x000020, "Wrong size on BP_AquaticSurface_C_BndEvt__PostProcessShape_K2Node_ComponentBoundEvent_0_ComponentEndOverlapSignature__DelegateSignature");
static_assert(offsetof(BP_AquaticSurface_C_BndEvt__PostProcessShape_K2Node_ComponentBoundEvent_0_ComponentEndOverlapSignature__DelegateSignature, OverlappedComponent) == 0x000000, "Member 'BP_AquaticSurface_C_BndEvt__PostProcessShape_K2Node_ComponentBoundEvent_0_ComponentEndOverlapSignature__DelegateSignature::OverlappedComponent' has a wrong offset!");
static_assert(offsetof(BP_AquaticSurface_C_BndEvt__PostProcessShape_K2Node_ComponentBoundEvent_0_ComponentEndOverlapSignature__DelegateSignature, OtherActor) == 0x000008, "Member 'BP_AquaticSurface_C_BndEvt__PostProcessShape_K2Node_ComponentBoundEvent_0_ComponentEndOverlapSignature__DelegateSignature::OtherActor' has a wrong offset!");
static_assert(offsetof(BP_AquaticSurface_C_BndEvt__PostProcessShape_K2Node_ComponentBoundEvent_0_ComponentEndOverlapSignature__DelegateSignature, OtherComp) == 0x000010, "Member 'BP_AquaticSurface_C_BndEvt__PostProcessShape_K2Node_ComponentBoundEvent_0_ComponentEndOverlapSignature__DelegateSignature::OtherComp' has a wrong offset!");
static_assert(offsetof(BP_AquaticSurface_C_BndEvt__PostProcessShape_K2Node_ComponentBoundEvent_0_ComponentEndOverlapSignature__DelegateSignature, OtherBodyIndex) == 0x000018, "Member 'BP_AquaticSurface_C_BndEvt__PostProcessShape_K2Node_ComponentBoundEvent_0_ComponentEndOverlapSignature__DelegateSignature::OtherBodyIndex' has a wrong offset!");

// Function BP_AquaticSurface.BP_AquaticSurface_C.BndEvt__PostProcessShape_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature
// 0x00B0 (0x00B0 - 0x0000)
struct BP_AquaticSurface_C_BndEvt__PostProcessShape_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature final
{
public:
	class UPrimitiveComponent*                    OverlappedComponent;                               // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         OtherBodyIndex;                                    // 0x0018(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bFromSweep;                                        // 0x001C(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             SweepResult;                                       // 0x0020(0x008C)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
};
static_assert(alignof(BP_AquaticSurface_C_BndEvt__PostProcessShape_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature) == 0x000008, "Wrong alignment on BP_AquaticSurface_C_BndEvt__PostProcessShape_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature");
static_assert(sizeof(BP_AquaticSurface_C_BndEvt__PostProcessShape_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature) == 0x0000B0, "Wrong size on BP_AquaticSurface_C_BndEvt__PostProcessShape_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature");
static_assert(offsetof(BP_AquaticSurface_C_BndEvt__PostProcessShape_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature, OverlappedComponent) == 0x000000, "Member 'BP_AquaticSurface_C_BndEvt__PostProcessShape_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature::OverlappedComponent' has a wrong offset!");
static_assert(offsetof(BP_AquaticSurface_C_BndEvt__PostProcessShape_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature, OtherActor) == 0x000008, "Member 'BP_AquaticSurface_C_BndEvt__PostProcessShape_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature::OtherActor' has a wrong offset!");
static_assert(offsetof(BP_AquaticSurface_C_BndEvt__PostProcessShape_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature, OtherComp) == 0x000010, "Member 'BP_AquaticSurface_C_BndEvt__PostProcessShape_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature::OtherComp' has a wrong offset!");
static_assert(offsetof(BP_AquaticSurface_C_BndEvt__PostProcessShape_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature, OtherBodyIndex) == 0x000018, "Member 'BP_AquaticSurface_C_BndEvt__PostProcessShape_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature::OtherBodyIndex' has a wrong offset!");
static_assert(offsetof(BP_AquaticSurface_C_BndEvt__PostProcessShape_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature, bFromSweep) == 0x00001C, "Member 'BP_AquaticSurface_C_BndEvt__PostProcessShape_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature::bFromSweep' has a wrong offset!");
static_assert(offsetof(BP_AquaticSurface_C_BndEvt__PostProcessShape_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature, SweepResult) == 0x000020, "Member 'BP_AquaticSurface_C_BndEvt__PostProcessShape_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature::SweepResult' has a wrong offset!");

// Function BP_AquaticSurface.BP_AquaticSurface_C.UpdateVolume
// 0x0020 (0x0020 - 0x0000)
struct BP_AquaticSurface_C_UpdateVolume final
{
public:
	float                                         CallFunc_K2_GetScalarParameterValue_ReturnValue;   // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_K2_GetScalarParameterValue_ReturnValue_1; // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetComponentLocation_ReturnValue;      // 0x0008(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_X;                            // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y;                            // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z;                            // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_AquaticSurface_C_UpdateVolume) == 0x000004, "Wrong alignment on BP_AquaticSurface_C_UpdateVolume");
static_assert(sizeof(BP_AquaticSurface_C_UpdateVolume) == 0x000020, "Wrong size on BP_AquaticSurface_C_UpdateVolume");
static_assert(offsetof(BP_AquaticSurface_C_UpdateVolume, CallFunc_K2_GetScalarParameterValue_ReturnValue) == 0x000000, "Member 'BP_AquaticSurface_C_UpdateVolume::CallFunc_K2_GetScalarParameterValue_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AquaticSurface_C_UpdateVolume, CallFunc_K2_GetScalarParameterValue_ReturnValue_1) == 0x000004, "Member 'BP_AquaticSurface_C_UpdateVolume::CallFunc_K2_GetScalarParameterValue_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_AquaticSurface_C_UpdateVolume, CallFunc_K2_GetComponentLocation_ReturnValue) == 0x000008, "Member 'BP_AquaticSurface_C_UpdateVolume::CallFunc_K2_GetComponentLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AquaticSurface_C_UpdateVolume, CallFunc_BreakVector_X) == 0x000014, "Member 'BP_AquaticSurface_C_UpdateVolume::CallFunc_BreakVector_X' has a wrong offset!");
static_assert(offsetof(BP_AquaticSurface_C_UpdateVolume, CallFunc_BreakVector_Y) == 0x000018, "Member 'BP_AquaticSurface_C_UpdateVolume::CallFunc_BreakVector_Y' has a wrong offset!");
static_assert(offsetof(BP_AquaticSurface_C_UpdateVolume, CallFunc_BreakVector_Z) == 0x00001C, "Member 'BP_AquaticSurface_C_UpdateVolume::CallFunc_BreakVector_Z' has a wrong offset!");

// Function BP_AquaticSurface.BP_AquaticSurface_C.UpdateReflectionShape
// 0x0190 (0x0190 - 0x0000)
struct BP_AquaticSurface_C_UpdateReflectionShape final
{
public:
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_AddUnique_ReturnValue;              // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue;          // 0x000C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_2;                    // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_K2_GetComponentLocation_ReturnValue;      // 0x001C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Subtract_VectorVector_ReturnValue;        // 0x0028(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Divide_VectorVector_ReturnValue;          // 0x0034(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTransform                             CallFunc_MakeTransform_ReturnValue;                // 0x0040(0x0030)(IsPlainOldData, NoDestructor)
	struct FHitResult                             CallFunc_K2_SetRelativeLocation_SweepHitResult;    // 0x0070(0x008C)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	struct FHitResult                             CallFunc_K2_SetRelativeTransform_SweepHitResult;   // 0x00FC(0x008C)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
};
static_assert(alignof(BP_AquaticSurface_C_UpdateReflectionShape) == 0x000010, "Wrong alignment on BP_AquaticSurface_C_UpdateReflectionShape");
static_assert(sizeof(BP_AquaticSurface_C_UpdateReflectionShape) == 0x000190, "Wrong size on BP_AquaticSurface_C_UpdateReflectionShape");
static_assert(offsetof(BP_AquaticSurface_C_UpdateReflectionShape, CallFunc_IsValid_ReturnValue) == 0x000000, "Member 'BP_AquaticSurface_C_UpdateReflectionShape::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AquaticSurface_C_UpdateReflectionShape, CallFunc_Array_AddUnique_ReturnValue) == 0x000004, "Member 'BP_AquaticSurface_C_UpdateReflectionShape::CallFunc_Array_AddUnique_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AquaticSurface_C_UpdateReflectionShape, CallFunc_IsValid_ReturnValue_1) == 0x000008, "Member 'BP_AquaticSurface_C_UpdateReflectionShape::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_AquaticSurface_C_UpdateReflectionShape, CallFunc_K2_GetActorLocation_ReturnValue) == 0x00000C, "Member 'BP_AquaticSurface_C_UpdateReflectionShape::CallFunc_K2_GetActorLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AquaticSurface_C_UpdateReflectionShape, CallFunc_IsValid_ReturnValue_2) == 0x000018, "Member 'BP_AquaticSurface_C_UpdateReflectionShape::CallFunc_IsValid_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_AquaticSurface_C_UpdateReflectionShape, CallFunc_K2_GetComponentLocation_ReturnValue) == 0x00001C, "Member 'BP_AquaticSurface_C_UpdateReflectionShape::CallFunc_K2_GetComponentLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AquaticSurface_C_UpdateReflectionShape, CallFunc_Subtract_VectorVector_ReturnValue) == 0x000028, "Member 'BP_AquaticSurface_C_UpdateReflectionShape::CallFunc_Subtract_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AquaticSurface_C_UpdateReflectionShape, CallFunc_Divide_VectorVector_ReturnValue) == 0x000034, "Member 'BP_AquaticSurface_C_UpdateReflectionShape::CallFunc_Divide_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AquaticSurface_C_UpdateReflectionShape, CallFunc_MakeTransform_ReturnValue) == 0x000040, "Member 'BP_AquaticSurface_C_UpdateReflectionShape::CallFunc_MakeTransform_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AquaticSurface_C_UpdateReflectionShape, CallFunc_K2_SetRelativeLocation_SweepHitResult) == 0x000070, "Member 'BP_AquaticSurface_C_UpdateReflectionShape::CallFunc_K2_SetRelativeLocation_SweepHitResult' has a wrong offset!");
static_assert(offsetof(BP_AquaticSurface_C_UpdateReflectionShape, CallFunc_K2_SetRelativeTransform_SweepHitResult) == 0x0000FC, "Member 'BP_AquaticSurface_C_UpdateReflectionShape::CallFunc_K2_SetRelativeTransform_SweepHitResult' has a wrong offset!");

// Function BP_AquaticSurface.BP_AquaticSurface_C.UpdatePostProcessShape
// 0x0180 (0x0180 - 0x0000)
struct BP_AquaticSurface_C_UpdatePostProcessShape final
{
public:
	float                                         PositionShift;                                     // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue;          // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_X;                            // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y;                            // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z;                            // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue;                   // 0x0014(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_IntFloat_ReturnValue;            // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_1;        // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue_1;                 // 0x0028(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue;               // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue_2;                 // 0x0038(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             CallFunc_K2_SetRelativeLocation_SweepHitResult;    // 0x0044(0x008C)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue;             // 0x00D0(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Subtract_VectorVector_ReturnValue;        // 0x00DC(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorFloat_ReturnValue;         // 0x00E8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             CallFunc_K2_SetRelativeLocation_SweepHitResult_1;  // 0x00F4(0x008C)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
};
static_assert(alignof(BP_AquaticSurface_C_UpdatePostProcessShape) == 0x000004, "Wrong alignment on BP_AquaticSurface_C_UpdatePostProcessShape");
static_assert(sizeof(BP_AquaticSurface_C_UpdatePostProcessShape) == 0x000180, "Wrong size on BP_AquaticSurface_C_UpdatePostProcessShape");
static_assert(offsetof(BP_AquaticSurface_C_UpdatePostProcessShape, PositionShift) == 0x000000, "Member 'BP_AquaticSurface_C_UpdatePostProcessShape::PositionShift' has a wrong offset!");
static_assert(offsetof(BP_AquaticSurface_C_UpdatePostProcessShape, CallFunc_Multiply_FloatFloat_ReturnValue) == 0x000004, "Member 'BP_AquaticSurface_C_UpdatePostProcessShape::CallFunc_Multiply_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AquaticSurface_C_UpdatePostProcessShape, CallFunc_BreakVector_X) == 0x000008, "Member 'BP_AquaticSurface_C_UpdatePostProcessShape::CallFunc_BreakVector_X' has a wrong offset!");
static_assert(offsetof(BP_AquaticSurface_C_UpdatePostProcessShape, CallFunc_BreakVector_Y) == 0x00000C, "Member 'BP_AquaticSurface_C_UpdatePostProcessShape::CallFunc_BreakVector_Y' has a wrong offset!");
static_assert(offsetof(BP_AquaticSurface_C_UpdatePostProcessShape, CallFunc_BreakVector_Z) == 0x000010, "Member 'BP_AquaticSurface_C_UpdatePostProcessShape::CallFunc_BreakVector_Z' has a wrong offset!");
static_assert(offsetof(BP_AquaticSurface_C_UpdatePostProcessShape, CallFunc_MakeVector_ReturnValue) == 0x000014, "Member 'BP_AquaticSurface_C_UpdatePostProcessShape::CallFunc_MakeVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AquaticSurface_C_UpdatePostProcessShape, CallFunc_Multiply_IntFloat_ReturnValue) == 0x000020, "Member 'BP_AquaticSurface_C_UpdatePostProcessShape::CallFunc_Multiply_IntFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AquaticSurface_C_UpdatePostProcessShape, CallFunc_Multiply_FloatFloat_ReturnValue_1) == 0x000024, "Member 'BP_AquaticSurface_C_UpdatePostProcessShape::CallFunc_Multiply_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_AquaticSurface_C_UpdatePostProcessShape, CallFunc_MakeVector_ReturnValue_1) == 0x000028, "Member 'BP_AquaticSurface_C_UpdatePostProcessShape::CallFunc_MakeVector_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_AquaticSurface_C_UpdatePostProcessShape, CallFunc_Add_FloatFloat_ReturnValue) == 0x000034, "Member 'BP_AquaticSurface_C_UpdatePostProcessShape::CallFunc_Add_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AquaticSurface_C_UpdatePostProcessShape, CallFunc_MakeVector_ReturnValue_2) == 0x000038, "Member 'BP_AquaticSurface_C_UpdatePostProcessShape::CallFunc_MakeVector_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_AquaticSurface_C_UpdatePostProcessShape, CallFunc_K2_SetRelativeLocation_SweepHitResult) == 0x000044, "Member 'BP_AquaticSurface_C_UpdatePostProcessShape::CallFunc_K2_SetRelativeLocation_SweepHitResult' has a wrong offset!");
static_assert(offsetof(BP_AquaticSurface_C_UpdatePostProcessShape, CallFunc_Add_VectorVector_ReturnValue) == 0x0000D0, "Member 'BP_AquaticSurface_C_UpdatePostProcessShape::CallFunc_Add_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AquaticSurface_C_UpdatePostProcessShape, CallFunc_Subtract_VectorVector_ReturnValue) == 0x0000DC, "Member 'BP_AquaticSurface_C_UpdatePostProcessShape::CallFunc_Subtract_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AquaticSurface_C_UpdatePostProcessShape, CallFunc_Multiply_VectorFloat_ReturnValue) == 0x0000E8, "Member 'BP_AquaticSurface_C_UpdatePostProcessShape::CallFunc_Multiply_VectorFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AquaticSurface_C_UpdatePostProcessShape, CallFunc_K2_SetRelativeLocation_SweepHitResult_1) == 0x0000F4, "Member 'BP_AquaticSurface_C_UpdatePostProcessShape::CallFunc_K2_SetRelativeLocation_SweepHitResult_1' has a wrong offset!");

// Function BP_AquaticSurface.BP_AquaticSurface_C.InitMaterials
// 0x0048 (0x0048 - 0x0000)
struct BP_AquaticSurface_C_InitMaterials final
{
public:
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInstanceDynamic*               CallFunc_CreateDynamicMaterialInstance_ReturnValue; // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TScriptInterface<class IBlendableInterface>   CallFunc_AddOrUpdateBlendable_InBlendableObject_CastInput; // 0x0010(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInstanceDynamic*               CallFunc_CreateDynamicMaterialInstance_ReturnValue_1; // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               CallFunc_CreateDynamicMaterialInstance_ReturnValue_2; // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               CallFunc_CreateDynamicMaterialInstance_ReturnValue_3; // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               CallFunc_CreateDynamicMaterialInstance_ReturnValue_4; // 0x0040(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_AquaticSurface_C_InitMaterials) == 0x000008, "Wrong alignment on BP_AquaticSurface_C_InitMaterials");
static_assert(sizeof(BP_AquaticSurface_C_InitMaterials) == 0x000048, "Wrong size on BP_AquaticSurface_C_InitMaterials");
static_assert(offsetof(BP_AquaticSurface_C_InitMaterials, CallFunc_IsValid_ReturnValue) == 0x000000, "Member 'BP_AquaticSurface_C_InitMaterials::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AquaticSurface_C_InitMaterials, CallFunc_CreateDynamicMaterialInstance_ReturnValue) == 0x000008, "Member 'BP_AquaticSurface_C_InitMaterials::CallFunc_CreateDynamicMaterialInstance_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AquaticSurface_C_InitMaterials, CallFunc_AddOrUpdateBlendable_InBlendableObject_CastInput) == 0x000010, "Member 'BP_AquaticSurface_C_InitMaterials::CallFunc_AddOrUpdateBlendable_InBlendableObject_CastInput' has a wrong offset!");
static_assert(offsetof(BP_AquaticSurface_C_InitMaterials, CallFunc_IsValid_ReturnValue_1) == 0x000020, "Member 'BP_AquaticSurface_C_InitMaterials::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_AquaticSurface_C_InitMaterials, CallFunc_CreateDynamicMaterialInstance_ReturnValue_1) == 0x000028, "Member 'BP_AquaticSurface_C_InitMaterials::CallFunc_CreateDynamicMaterialInstance_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_AquaticSurface_C_InitMaterials, CallFunc_CreateDynamicMaterialInstance_ReturnValue_2) == 0x000030, "Member 'BP_AquaticSurface_C_InitMaterials::CallFunc_CreateDynamicMaterialInstance_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_AquaticSurface_C_InitMaterials, CallFunc_CreateDynamicMaterialInstance_ReturnValue_3) == 0x000038, "Member 'BP_AquaticSurface_C_InitMaterials::CallFunc_CreateDynamicMaterialInstance_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_AquaticSurface_C_InitMaterials, CallFunc_CreateDynamicMaterialInstance_ReturnValue_4) == 0x000040, "Member 'BP_AquaticSurface_C_InitMaterials::CallFunc_CreateDynamicMaterialInstance_ReturnValue_4' has a wrong offset!");

// Function BP_AquaticSurface.BP_AquaticSurface_C.BoxReflection
// 0x01A0 (0x01A0 - 0x0000)
struct BP_AquaticSurface_C_BoxReflection final
{
public:
	class UBoxComponent*                          BoxShape;                                          // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               UseMaterial;                                       // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                BoxExtent;                                         // 0x0010(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                BoxLocation;                                       // 0x001C(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Over;                                              // 0x0028(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_29[0x3];                                       // 0x0029(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Temp_float_Variable;                               // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_X;                            // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y;                            // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z;                            // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetComponentLocation_ReturnValue;      // 0x003C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorVector_ReturnValue;        // 0x0048(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue;             // 0x0054(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0060(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_61[0x3];                                       // 0x0061(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           CallFunc_Conv_VectorToLinearColor_ReturnValue;     // 0x0064(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorVector_ReturnValue_1;      // 0x0074(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetScaledBoxExtent_ReturnValue;           // 0x0080(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorVector_ReturnValue_2;      // 0x008C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Temp_float_Variable_1;                             // 0x0098(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x009C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9D[0x3];                                       // 0x009D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue;          // 0x00A0(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Select_Default;                             // 0x00AC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue_1;           // 0x00B0(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue;          // 0x00BC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Subtract_VectorVector_ReturnValue;        // 0x00C0(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue;                   // 0x00CC(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           CallFunc_Conv_VectorToLinearColor_ReturnValue_1;   // 0x00D8(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Subtract_VectorVector_ReturnValue_1;      // 0x00E8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             CallFunc_K2_SetRelativeLocation_SweepHitResult;    // 0x00F4(0x008C)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue_2;           // 0x0180(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           CallFunc_Conv_VectorToLinearColor_ReturnValue_2;   // 0x018C(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_AquaticSurface_C_BoxReflection) == 0x000008, "Wrong alignment on BP_AquaticSurface_C_BoxReflection");
static_assert(sizeof(BP_AquaticSurface_C_BoxReflection) == 0x0001A0, "Wrong size on BP_AquaticSurface_C_BoxReflection");
static_assert(offsetof(BP_AquaticSurface_C_BoxReflection, BoxShape) == 0x000000, "Member 'BP_AquaticSurface_C_BoxReflection::BoxShape' has a wrong offset!");
static_assert(offsetof(BP_AquaticSurface_C_BoxReflection, UseMaterial) == 0x000008, "Member 'BP_AquaticSurface_C_BoxReflection::UseMaterial' has a wrong offset!");
static_assert(offsetof(BP_AquaticSurface_C_BoxReflection, BoxExtent) == 0x000010, "Member 'BP_AquaticSurface_C_BoxReflection::BoxExtent' has a wrong offset!");
static_assert(offsetof(BP_AquaticSurface_C_BoxReflection, BoxLocation) == 0x00001C, "Member 'BP_AquaticSurface_C_BoxReflection::BoxLocation' has a wrong offset!");
static_assert(offsetof(BP_AquaticSurface_C_BoxReflection, Over) == 0x000028, "Member 'BP_AquaticSurface_C_BoxReflection::Over' has a wrong offset!");
static_assert(offsetof(BP_AquaticSurface_C_BoxReflection, Temp_float_Variable) == 0x00002C, "Member 'BP_AquaticSurface_C_BoxReflection::Temp_float_Variable' has a wrong offset!");
static_assert(offsetof(BP_AquaticSurface_C_BoxReflection, CallFunc_BreakVector_X) == 0x000030, "Member 'BP_AquaticSurface_C_BoxReflection::CallFunc_BreakVector_X' has a wrong offset!");
static_assert(offsetof(BP_AquaticSurface_C_BoxReflection, CallFunc_BreakVector_Y) == 0x000034, "Member 'BP_AquaticSurface_C_BoxReflection::CallFunc_BreakVector_Y' has a wrong offset!");
static_assert(offsetof(BP_AquaticSurface_C_BoxReflection, CallFunc_BreakVector_Z) == 0x000038, "Member 'BP_AquaticSurface_C_BoxReflection::CallFunc_BreakVector_Z' has a wrong offset!");
static_assert(offsetof(BP_AquaticSurface_C_BoxReflection, CallFunc_K2_GetComponentLocation_ReturnValue) == 0x00003C, "Member 'BP_AquaticSurface_C_BoxReflection::CallFunc_K2_GetComponentLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AquaticSurface_C_BoxReflection, CallFunc_Multiply_VectorVector_ReturnValue) == 0x000048, "Member 'BP_AquaticSurface_C_BoxReflection::CallFunc_Multiply_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AquaticSurface_C_BoxReflection, CallFunc_Add_VectorVector_ReturnValue) == 0x000054, "Member 'BP_AquaticSurface_C_BoxReflection::CallFunc_Add_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AquaticSurface_C_BoxReflection, CallFunc_IsValid_ReturnValue) == 0x000060, "Member 'BP_AquaticSurface_C_BoxReflection::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AquaticSurface_C_BoxReflection, CallFunc_Conv_VectorToLinearColor_ReturnValue) == 0x000064, "Member 'BP_AquaticSurface_C_BoxReflection::CallFunc_Conv_VectorToLinearColor_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AquaticSurface_C_BoxReflection, CallFunc_Multiply_VectorVector_ReturnValue_1) == 0x000074, "Member 'BP_AquaticSurface_C_BoxReflection::CallFunc_Multiply_VectorVector_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_AquaticSurface_C_BoxReflection, CallFunc_GetScaledBoxExtent_ReturnValue) == 0x000080, "Member 'BP_AquaticSurface_C_BoxReflection::CallFunc_GetScaledBoxExtent_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AquaticSurface_C_BoxReflection, CallFunc_Multiply_VectorVector_ReturnValue_2) == 0x00008C, "Member 'BP_AquaticSurface_C_BoxReflection::CallFunc_Multiply_VectorVector_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_AquaticSurface_C_BoxReflection, Temp_float_Variable_1) == 0x000098, "Member 'BP_AquaticSurface_C_BoxReflection::Temp_float_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_AquaticSurface_C_BoxReflection, Temp_bool_Variable) == 0x00009C, "Member 'BP_AquaticSurface_C_BoxReflection::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(BP_AquaticSurface_C_BoxReflection, CallFunc_K2_GetActorLocation_ReturnValue) == 0x0000A0, "Member 'BP_AquaticSurface_C_BoxReflection::CallFunc_K2_GetActorLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AquaticSurface_C_BoxReflection, K2Node_Select_Default) == 0x0000AC, "Member 'BP_AquaticSurface_C_BoxReflection::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(BP_AquaticSurface_C_BoxReflection, CallFunc_Add_VectorVector_ReturnValue_1) == 0x0000B0, "Member 'BP_AquaticSurface_C_BoxReflection::CallFunc_Add_VectorVector_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_AquaticSurface_C_BoxReflection, CallFunc_Multiply_FloatFloat_ReturnValue) == 0x0000BC, "Member 'BP_AquaticSurface_C_BoxReflection::CallFunc_Multiply_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AquaticSurface_C_BoxReflection, CallFunc_Subtract_VectorVector_ReturnValue) == 0x0000C0, "Member 'BP_AquaticSurface_C_BoxReflection::CallFunc_Subtract_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AquaticSurface_C_BoxReflection, CallFunc_MakeVector_ReturnValue) == 0x0000CC, "Member 'BP_AquaticSurface_C_BoxReflection::CallFunc_MakeVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AquaticSurface_C_BoxReflection, CallFunc_Conv_VectorToLinearColor_ReturnValue_1) == 0x0000D8, "Member 'BP_AquaticSurface_C_BoxReflection::CallFunc_Conv_VectorToLinearColor_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_AquaticSurface_C_BoxReflection, CallFunc_Subtract_VectorVector_ReturnValue_1) == 0x0000E8, "Member 'BP_AquaticSurface_C_BoxReflection::CallFunc_Subtract_VectorVector_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_AquaticSurface_C_BoxReflection, CallFunc_K2_SetRelativeLocation_SweepHitResult) == 0x0000F4, "Member 'BP_AquaticSurface_C_BoxReflection::CallFunc_K2_SetRelativeLocation_SweepHitResult' has a wrong offset!");
static_assert(offsetof(BP_AquaticSurface_C_BoxReflection, CallFunc_Add_VectorVector_ReturnValue_2) == 0x000180, "Member 'BP_AquaticSurface_C_BoxReflection::CallFunc_Add_VectorVector_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_AquaticSurface_C_BoxReflection, CallFunc_Conv_VectorToLinearColor_ReturnValue_2) == 0x00018C, "Member 'BP_AquaticSurface_C_BoxReflection::CallFunc_Conv_VectorToLinearColor_ReturnValue_2' has a wrong offset!");

// Function BP_AquaticSurface.BP_AquaticSurface_C.OnBeginOverlapBuoyancy
// 0x0018 (0x0018 - 0x0000)
struct BP_AquaticSurface_C_OnBeginOverlapBuoyancy final
{
public:
	class AActor*                                 OtherActor;                                        // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UBP_AquaticBuoyancy_C*                  CallFunc_GetComponentByClass_ReturnValue;          // 0x0008(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_AquaticSurface_C_OnBeginOverlapBuoyancy) == 0x000008, "Wrong alignment on BP_AquaticSurface_C_OnBeginOverlapBuoyancy");
static_assert(sizeof(BP_AquaticSurface_C_OnBeginOverlapBuoyancy) == 0x000018, "Wrong size on BP_AquaticSurface_C_OnBeginOverlapBuoyancy");
static_assert(offsetof(BP_AquaticSurface_C_OnBeginOverlapBuoyancy, OtherActor) == 0x000000, "Member 'BP_AquaticSurface_C_OnBeginOverlapBuoyancy::OtherActor' has a wrong offset!");
static_assert(offsetof(BP_AquaticSurface_C_OnBeginOverlapBuoyancy, CallFunc_GetComponentByClass_ReturnValue) == 0x000008, "Member 'BP_AquaticSurface_C_OnBeginOverlapBuoyancy::CallFunc_GetComponentByClass_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AquaticSurface_C_OnBeginOverlapBuoyancy, CallFunc_IsValid_ReturnValue) == 0x000010, "Member 'BP_AquaticSurface_C_OnBeginOverlapBuoyancy::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function BP_AquaticSurface.BP_AquaticSurface_C.SetInteraction
// 0x0008 (0x0008 - 0x0000)
struct BP_AquaticSurface_C_SetInteraction final
{
public:
	class UTexture*                               Value;                                             // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_AquaticSurface_C_SetInteraction) == 0x000008, "Wrong alignment on BP_AquaticSurface_C_SetInteraction");
static_assert(sizeof(BP_AquaticSurface_C_SetInteraction) == 0x000008, "Wrong size on BP_AquaticSurface_C_SetInteraction");
static_assert(offsetof(BP_AquaticSurface_C_SetInteraction, Value) == 0x000000, "Member 'BP_AquaticSurface_C_SetInteraction::Value' has a wrong offset!");

// Function BP_AquaticSurface.BP_AquaticSurface_C.OnEndOverlapBuoyancy
// 0x0018 (0x0018 - 0x0000)
struct BP_AquaticSurface_C_OnEndOverlapBuoyancy final
{
public:
	class AActor*                                 OtherAtor;                                         // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UBP_AquaticBuoyancy_C*                  CallFunc_GetComponentByClass_ReturnValue;          // 0x0008(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ObjectObject_ReturnValue;      // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_AquaticSurface_C_OnEndOverlapBuoyancy) == 0x000008, "Wrong alignment on BP_AquaticSurface_C_OnEndOverlapBuoyancy");
static_assert(sizeof(BP_AquaticSurface_C_OnEndOverlapBuoyancy) == 0x000018, "Wrong size on BP_AquaticSurface_C_OnEndOverlapBuoyancy");
static_assert(offsetof(BP_AquaticSurface_C_OnEndOverlapBuoyancy, OtherAtor) == 0x000000, "Member 'BP_AquaticSurface_C_OnEndOverlapBuoyancy::OtherAtor' has a wrong offset!");
static_assert(offsetof(BP_AquaticSurface_C_OnEndOverlapBuoyancy, CallFunc_GetComponentByClass_ReturnValue) == 0x000008, "Member 'BP_AquaticSurface_C_OnEndOverlapBuoyancy::CallFunc_GetComponentByClass_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AquaticSurface_C_OnEndOverlapBuoyancy, CallFunc_IsValid_ReturnValue) == 0x000010, "Member 'BP_AquaticSurface_C_OnEndOverlapBuoyancy::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AquaticSurface_C_OnEndOverlapBuoyancy, CallFunc_EqualEqual_ObjectObject_ReturnValue) == 0x000011, "Member 'BP_AquaticSurface_C_OnEndOverlapBuoyancy::CallFunc_EqualEqual_ObjectObject_ReturnValue' has a wrong offset!");

// Function BP_AquaticSurface.BP_AquaticSurface_C.OnBeginOverlapInteraction
// 0x0030 (0x0030 - 0x0000)
struct BP_AquaticSurface_C_OnBeginOverlapInteraction final
{
public:
	class AActor*                                 OtherActor;                                        // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class AActor*>                         List;                                              // 0x0008(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	int32                                         CallFunc_Array_Add_ReturnValue;                    // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Find_ReturnValue;                   // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_IntInt_ReturnValue;          // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_21[0x3];                                       // 0x0021(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Find_ReturnValue_1;                 // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_IntInt_ReturnValue_1;        // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0029(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x002A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_AquaticSurface_C_OnBeginOverlapInteraction) == 0x000008, "Wrong alignment on BP_AquaticSurface_C_OnBeginOverlapInteraction");
static_assert(sizeof(BP_AquaticSurface_C_OnBeginOverlapInteraction) == 0x000030, "Wrong size on BP_AquaticSurface_C_OnBeginOverlapInteraction");
static_assert(offsetof(BP_AquaticSurface_C_OnBeginOverlapInteraction, OtherActor) == 0x000000, "Member 'BP_AquaticSurface_C_OnBeginOverlapInteraction::OtherActor' has a wrong offset!");
static_assert(offsetof(BP_AquaticSurface_C_OnBeginOverlapInteraction, List) == 0x000008, "Member 'BP_AquaticSurface_C_OnBeginOverlapInteraction::List' has a wrong offset!");
static_assert(offsetof(BP_AquaticSurface_C_OnBeginOverlapInteraction, CallFunc_Array_Add_ReturnValue) == 0x000018, "Member 'BP_AquaticSurface_C_OnBeginOverlapInteraction::CallFunc_Array_Add_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AquaticSurface_C_OnBeginOverlapInteraction, CallFunc_Array_Find_ReturnValue) == 0x00001C, "Member 'BP_AquaticSurface_C_OnBeginOverlapInteraction::CallFunc_Array_Find_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AquaticSurface_C_OnBeginOverlapInteraction, CallFunc_GreaterEqual_IntInt_ReturnValue) == 0x000020, "Member 'BP_AquaticSurface_C_OnBeginOverlapInteraction::CallFunc_GreaterEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AquaticSurface_C_OnBeginOverlapInteraction, CallFunc_Array_Find_ReturnValue_1) == 0x000024, "Member 'BP_AquaticSurface_C_OnBeginOverlapInteraction::CallFunc_Array_Find_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_AquaticSurface_C_OnBeginOverlapInteraction, CallFunc_GreaterEqual_IntInt_ReturnValue_1) == 0x000028, "Member 'BP_AquaticSurface_C_OnBeginOverlapInteraction::CallFunc_GreaterEqual_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_AquaticSurface_C_OnBeginOverlapInteraction, CallFunc_BooleanAND_ReturnValue) == 0x000029, "Member 'BP_AquaticSurface_C_OnBeginOverlapInteraction::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AquaticSurface_C_OnBeginOverlapInteraction, CallFunc_IsValid_ReturnValue) == 0x00002A, "Member 'BP_AquaticSurface_C_OnBeginOverlapInteraction::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function BP_AquaticSurface.BP_AquaticSurface_C.OnEndOverlapInteraction
// 0x0028 (0x0028 - 0x0000)
struct BP_AquaticSurface_C_OnEndOverlapInteraction final
{
public:
	class AActor*                                 OtherAtor;                                         // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class AActor*>                         List;                                              // 0x0008(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	int32                                         CallFunc_Array_Find_ReturnValue;                   // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Find_ReturnValue_1;                 // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_IntInt_ReturnValue;          // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_GreaterEqual_IntInt_ReturnValue_1;        // 0x0021(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0022(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Array_RemoveItem_ReturnValue;             // 0x0023(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0024(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_AquaticSurface_C_OnEndOverlapInteraction) == 0x000008, "Wrong alignment on BP_AquaticSurface_C_OnEndOverlapInteraction");
static_assert(sizeof(BP_AquaticSurface_C_OnEndOverlapInteraction) == 0x000028, "Wrong size on BP_AquaticSurface_C_OnEndOverlapInteraction");
static_assert(offsetof(BP_AquaticSurface_C_OnEndOverlapInteraction, OtherAtor) == 0x000000, "Member 'BP_AquaticSurface_C_OnEndOverlapInteraction::OtherAtor' has a wrong offset!");
static_assert(offsetof(BP_AquaticSurface_C_OnEndOverlapInteraction, List) == 0x000008, "Member 'BP_AquaticSurface_C_OnEndOverlapInteraction::List' has a wrong offset!");
static_assert(offsetof(BP_AquaticSurface_C_OnEndOverlapInteraction, CallFunc_Array_Find_ReturnValue) == 0x000018, "Member 'BP_AquaticSurface_C_OnEndOverlapInteraction::CallFunc_Array_Find_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AquaticSurface_C_OnEndOverlapInteraction, CallFunc_Array_Find_ReturnValue_1) == 0x00001C, "Member 'BP_AquaticSurface_C_OnEndOverlapInteraction::CallFunc_Array_Find_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_AquaticSurface_C_OnEndOverlapInteraction, CallFunc_GreaterEqual_IntInt_ReturnValue) == 0x000020, "Member 'BP_AquaticSurface_C_OnEndOverlapInteraction::CallFunc_GreaterEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AquaticSurface_C_OnEndOverlapInteraction, CallFunc_GreaterEqual_IntInt_ReturnValue_1) == 0x000021, "Member 'BP_AquaticSurface_C_OnEndOverlapInteraction::CallFunc_GreaterEqual_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_AquaticSurface_C_OnEndOverlapInteraction, CallFunc_BooleanAND_ReturnValue) == 0x000022, "Member 'BP_AquaticSurface_C_OnEndOverlapInteraction::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AquaticSurface_C_OnEndOverlapInteraction, CallFunc_Array_RemoveItem_ReturnValue) == 0x000023, "Member 'BP_AquaticSurface_C_OnEndOverlapInteraction::CallFunc_Array_RemoveItem_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AquaticSurface_C_OnEndOverlapInteraction, CallFunc_IsValid_ReturnValue) == 0x000024, "Member 'BP_AquaticSurface_C_OnEndOverlapInteraction::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function BP_AquaticSurface.BP_AquaticSurface_C.GetHeight
// 0x001C (0x001C - 0x0000)
struct BP_AquaticSurface_C_GetHeight final
{
public:
	float                                         Height;                                            // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetComponentLocation_ReturnValue;      // 0x0004(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_X;                            // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y;                            // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z;                            // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_AquaticSurface_C_GetHeight) == 0x000004, "Wrong alignment on BP_AquaticSurface_C_GetHeight");
static_assert(sizeof(BP_AquaticSurface_C_GetHeight) == 0x00001C, "Wrong size on BP_AquaticSurface_C_GetHeight");
static_assert(offsetof(BP_AquaticSurface_C_GetHeight, Height) == 0x000000, "Member 'BP_AquaticSurface_C_GetHeight::Height' has a wrong offset!");
static_assert(offsetof(BP_AquaticSurface_C_GetHeight, CallFunc_K2_GetComponentLocation_ReturnValue) == 0x000004, "Member 'BP_AquaticSurface_C_GetHeight::CallFunc_K2_GetComponentLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AquaticSurface_C_GetHeight, CallFunc_BreakVector_X) == 0x000010, "Member 'BP_AquaticSurface_C_GetHeight::CallFunc_BreakVector_X' has a wrong offset!");
static_assert(offsetof(BP_AquaticSurface_C_GetHeight, CallFunc_BreakVector_Y) == 0x000014, "Member 'BP_AquaticSurface_C_GetHeight::CallFunc_BreakVector_Y' has a wrong offset!");
static_assert(offsetof(BP_AquaticSurface_C_GetHeight, CallFunc_BreakVector_Z) == 0x000018, "Member 'BP_AquaticSurface_C_GetHeight::CallFunc_BreakVector_Z' has a wrong offset!");

// Function BP_AquaticSurface.BP_AquaticSurface_C.Reconstruct
// 0x0030 (0x0030 - 0x0000)
struct BP_AquaticSurface_C_Reconstruct final
{
public:
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Find_ReturnValue;                   // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_IntInt_ReturnValue;             // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_K2_GetComponentScale_ReturnValue;         // 0x000C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_X;                            // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y;                            // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z;                            // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue;                   // 0x0024(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_AquaticSurface_C_Reconstruct) == 0x000004, "Wrong alignment on BP_AquaticSurface_C_Reconstruct");
static_assert(sizeof(BP_AquaticSurface_C_Reconstruct) == 0x000030, "Wrong size on BP_AquaticSurface_C_Reconstruct");
static_assert(offsetof(BP_AquaticSurface_C_Reconstruct, CallFunc_IsValid_ReturnValue) == 0x000000, "Member 'BP_AquaticSurface_C_Reconstruct::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AquaticSurface_C_Reconstruct, CallFunc_Array_Find_ReturnValue) == 0x000004, "Member 'BP_AquaticSurface_C_Reconstruct::CallFunc_Array_Find_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AquaticSurface_C_Reconstruct, CallFunc_LessEqual_IntInt_ReturnValue) == 0x000008, "Member 'BP_AquaticSurface_C_Reconstruct::CallFunc_LessEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AquaticSurface_C_Reconstruct, CallFunc_K2_GetComponentScale_ReturnValue) == 0x00000C, "Member 'BP_AquaticSurface_C_Reconstruct::CallFunc_K2_GetComponentScale_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AquaticSurface_C_Reconstruct, CallFunc_BreakVector_X) == 0x000018, "Member 'BP_AquaticSurface_C_Reconstruct::CallFunc_BreakVector_X' has a wrong offset!");
static_assert(offsetof(BP_AquaticSurface_C_Reconstruct, CallFunc_BreakVector_Y) == 0x00001C, "Member 'BP_AquaticSurface_C_Reconstruct::CallFunc_BreakVector_Y' has a wrong offset!");
static_assert(offsetof(BP_AquaticSurface_C_Reconstruct, CallFunc_BreakVector_Z) == 0x000020, "Member 'BP_AquaticSurface_C_Reconstruct::CallFunc_BreakVector_Z' has a wrong offset!");
static_assert(offsetof(BP_AquaticSurface_C_Reconstruct, CallFunc_MakeVector_ReturnValue) == 0x000024, "Member 'BP_AquaticSurface_C_Reconstruct::CallFunc_MakeVector_ReturnValue' has a wrong offset!");

// Function BP_AquaticSurface.BP_AquaticSurface_C.UpdateInteractionComponent
// 0x0144 (0x0144 - 0x0000)
struct BP_AquaticSurface_C_UpdateInteractionComponent final
{
public:
	struct FVector2D                              Location;                                          // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         InteractionRadius;                                 // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector2D_X;                          // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector2D_Y;                          // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue;          // 0x0014(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_X;                            // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y;                            // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z;                            // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetComponentBounds_Origin;                // 0x002C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetComponentBounds_BoxExtent;             // 0x0038(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetComponentBounds_SphereRadius;          // 0x0044(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_X_1;                          // 0x0048(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y_1;                          // 0x004C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z_1;                          // 0x0050(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_FMin_ReturnValue;                         // 0x0054(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_FMin_ReturnValue_1;                       // 0x0058(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue;                   // 0x005C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Subtract_VectorVector_ReturnValue;        // 0x0068(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Subtract_VectorVector_ReturnValue_1;      // 0x0074(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue;             // 0x0080(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_X_2;                          // 0x008C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y_2;                          // 0x0090(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z_2;                          // 0x0094(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_X_3;                          // 0x0098(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y_3;                          // 0x009C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z_3;                          // 0x00A0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_FClamp_ReturnValue;                       // 0x00A4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_FClamp_ReturnValue_1;                     // 0x00A8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue_1;                 // 0x00AC(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             CallFunc_K2_SetWorldLocation_SweepHitResult;       // 0x00B8(0x008C)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
};
static_assert(alignof(BP_AquaticSurface_C_UpdateInteractionComponent) == 0x000004, "Wrong alignment on BP_AquaticSurface_C_UpdateInteractionComponent");
static_assert(sizeof(BP_AquaticSurface_C_UpdateInteractionComponent) == 0x000144, "Wrong size on BP_AquaticSurface_C_UpdateInteractionComponent");
static_assert(offsetof(BP_AquaticSurface_C_UpdateInteractionComponent, Location) == 0x000000, "Member 'BP_AquaticSurface_C_UpdateInteractionComponent::Location' has a wrong offset!");
static_assert(offsetof(BP_AquaticSurface_C_UpdateInteractionComponent, InteractionRadius) == 0x000008, "Member 'BP_AquaticSurface_C_UpdateInteractionComponent::InteractionRadius' has a wrong offset!");
static_assert(offsetof(BP_AquaticSurface_C_UpdateInteractionComponent, CallFunc_BreakVector2D_X) == 0x00000C, "Member 'BP_AquaticSurface_C_UpdateInteractionComponent::CallFunc_BreakVector2D_X' has a wrong offset!");
static_assert(offsetof(BP_AquaticSurface_C_UpdateInteractionComponent, CallFunc_BreakVector2D_Y) == 0x000010, "Member 'BP_AquaticSurface_C_UpdateInteractionComponent::CallFunc_BreakVector2D_Y' has a wrong offset!");
static_assert(offsetof(BP_AquaticSurface_C_UpdateInteractionComponent, CallFunc_K2_GetActorLocation_ReturnValue) == 0x000014, "Member 'BP_AquaticSurface_C_UpdateInteractionComponent::CallFunc_K2_GetActorLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AquaticSurface_C_UpdateInteractionComponent, CallFunc_BreakVector_X) == 0x000020, "Member 'BP_AquaticSurface_C_UpdateInteractionComponent::CallFunc_BreakVector_X' has a wrong offset!");
static_assert(offsetof(BP_AquaticSurface_C_UpdateInteractionComponent, CallFunc_BreakVector_Y) == 0x000024, "Member 'BP_AquaticSurface_C_UpdateInteractionComponent::CallFunc_BreakVector_Y' has a wrong offset!");
static_assert(offsetof(BP_AquaticSurface_C_UpdateInteractionComponent, CallFunc_BreakVector_Z) == 0x000028, "Member 'BP_AquaticSurface_C_UpdateInteractionComponent::CallFunc_BreakVector_Z' has a wrong offset!");
static_assert(offsetof(BP_AquaticSurface_C_UpdateInteractionComponent, CallFunc_GetComponentBounds_Origin) == 0x00002C, "Member 'BP_AquaticSurface_C_UpdateInteractionComponent::CallFunc_GetComponentBounds_Origin' has a wrong offset!");
static_assert(offsetof(BP_AquaticSurface_C_UpdateInteractionComponent, CallFunc_GetComponentBounds_BoxExtent) == 0x000038, "Member 'BP_AquaticSurface_C_UpdateInteractionComponent::CallFunc_GetComponentBounds_BoxExtent' has a wrong offset!");
static_assert(offsetof(BP_AquaticSurface_C_UpdateInteractionComponent, CallFunc_GetComponentBounds_SphereRadius) == 0x000044, "Member 'BP_AquaticSurface_C_UpdateInteractionComponent::CallFunc_GetComponentBounds_SphereRadius' has a wrong offset!");
static_assert(offsetof(BP_AquaticSurface_C_UpdateInteractionComponent, CallFunc_BreakVector_X_1) == 0x000048, "Member 'BP_AquaticSurface_C_UpdateInteractionComponent::CallFunc_BreakVector_X_1' has a wrong offset!");
static_assert(offsetof(BP_AquaticSurface_C_UpdateInteractionComponent, CallFunc_BreakVector_Y_1) == 0x00004C, "Member 'BP_AquaticSurface_C_UpdateInteractionComponent::CallFunc_BreakVector_Y_1' has a wrong offset!");
static_assert(offsetof(BP_AquaticSurface_C_UpdateInteractionComponent, CallFunc_BreakVector_Z_1) == 0x000050, "Member 'BP_AquaticSurface_C_UpdateInteractionComponent::CallFunc_BreakVector_Z_1' has a wrong offset!");
static_assert(offsetof(BP_AquaticSurface_C_UpdateInteractionComponent, CallFunc_FMin_ReturnValue) == 0x000054, "Member 'BP_AquaticSurface_C_UpdateInteractionComponent::CallFunc_FMin_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AquaticSurface_C_UpdateInteractionComponent, CallFunc_FMin_ReturnValue_1) == 0x000058, "Member 'BP_AquaticSurface_C_UpdateInteractionComponent::CallFunc_FMin_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_AquaticSurface_C_UpdateInteractionComponent, CallFunc_MakeVector_ReturnValue) == 0x00005C, "Member 'BP_AquaticSurface_C_UpdateInteractionComponent::CallFunc_MakeVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AquaticSurface_C_UpdateInteractionComponent, CallFunc_Subtract_VectorVector_ReturnValue) == 0x000068, "Member 'BP_AquaticSurface_C_UpdateInteractionComponent::CallFunc_Subtract_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AquaticSurface_C_UpdateInteractionComponent, CallFunc_Subtract_VectorVector_ReturnValue_1) == 0x000074, "Member 'BP_AquaticSurface_C_UpdateInteractionComponent::CallFunc_Subtract_VectorVector_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_AquaticSurface_C_UpdateInteractionComponent, CallFunc_Add_VectorVector_ReturnValue) == 0x000080, "Member 'BP_AquaticSurface_C_UpdateInteractionComponent::CallFunc_Add_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AquaticSurface_C_UpdateInteractionComponent, CallFunc_BreakVector_X_2) == 0x00008C, "Member 'BP_AquaticSurface_C_UpdateInteractionComponent::CallFunc_BreakVector_X_2' has a wrong offset!");
static_assert(offsetof(BP_AquaticSurface_C_UpdateInteractionComponent, CallFunc_BreakVector_Y_2) == 0x000090, "Member 'BP_AquaticSurface_C_UpdateInteractionComponent::CallFunc_BreakVector_Y_2' has a wrong offset!");
static_assert(offsetof(BP_AquaticSurface_C_UpdateInteractionComponent, CallFunc_BreakVector_Z_2) == 0x000094, "Member 'BP_AquaticSurface_C_UpdateInteractionComponent::CallFunc_BreakVector_Z_2' has a wrong offset!");
static_assert(offsetof(BP_AquaticSurface_C_UpdateInteractionComponent, CallFunc_BreakVector_X_3) == 0x000098, "Member 'BP_AquaticSurface_C_UpdateInteractionComponent::CallFunc_BreakVector_X_3' has a wrong offset!");
static_assert(offsetof(BP_AquaticSurface_C_UpdateInteractionComponent, CallFunc_BreakVector_Y_3) == 0x00009C, "Member 'BP_AquaticSurface_C_UpdateInteractionComponent::CallFunc_BreakVector_Y_3' has a wrong offset!");
static_assert(offsetof(BP_AquaticSurface_C_UpdateInteractionComponent, CallFunc_BreakVector_Z_3) == 0x0000A0, "Member 'BP_AquaticSurface_C_UpdateInteractionComponent::CallFunc_BreakVector_Z_3' has a wrong offset!");
static_assert(offsetof(BP_AquaticSurface_C_UpdateInteractionComponent, CallFunc_FClamp_ReturnValue) == 0x0000A4, "Member 'BP_AquaticSurface_C_UpdateInteractionComponent::CallFunc_FClamp_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AquaticSurface_C_UpdateInteractionComponent, CallFunc_FClamp_ReturnValue_1) == 0x0000A8, "Member 'BP_AquaticSurface_C_UpdateInteractionComponent::CallFunc_FClamp_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_AquaticSurface_C_UpdateInteractionComponent, CallFunc_MakeVector_ReturnValue_1) == 0x0000AC, "Member 'BP_AquaticSurface_C_UpdateInteractionComponent::CallFunc_MakeVector_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_AquaticSurface_C_UpdateInteractionComponent, CallFunc_K2_SetWorldLocation_SweepHitResult) == 0x0000B8, "Member 'BP_AquaticSurface_C_UpdateInteractionComponent::CallFunc_K2_SetWorldLocation_SweepHitResult' has a wrong offset!");

// Function BP_AquaticSurface.BP_AquaticSurface_C.PlaySplashEffectByIndex
// 0x0040 (0x0040 - 0x0000)
struct BP_AquaticSurface_C_PlaySplashEffectByIndex final
{
public:
	int32                                         Index_0;                                           // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                SplashLocation;                                    // 0x0004(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         SplashScale;                                       // 0x0010(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         SplashVelocity;                                    // 0x0014(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Array_IsValidIndex_ReturnValue;           // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_NotEqual_ObjectObject_ReturnValue;        // 0x0019(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_NotEqual_ObjectObject_ReturnValue_1;      // 0x001A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1B[0x1];                                       // 0x001B(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_MapRangeClamped_ReturnValue;              // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue;          // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue;           // 0x0024(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_25[0x3];                                       // 0x0025(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_Conv_FloatToVector_ReturnValue;           // 0x0028(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UParticleSystemComponent*               CallFunc_SpawnEmitterAtLocation_ReturnValue;       // 0x0038(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_AquaticSurface_C_PlaySplashEffectByIndex) == 0x000008, "Wrong alignment on BP_AquaticSurface_C_PlaySplashEffectByIndex");
static_assert(sizeof(BP_AquaticSurface_C_PlaySplashEffectByIndex) == 0x000040, "Wrong size on BP_AquaticSurface_C_PlaySplashEffectByIndex");
static_assert(offsetof(BP_AquaticSurface_C_PlaySplashEffectByIndex, Index_0) == 0x000000, "Member 'BP_AquaticSurface_C_PlaySplashEffectByIndex::Index_0' has a wrong offset!");
static_assert(offsetof(BP_AquaticSurface_C_PlaySplashEffectByIndex, SplashLocation) == 0x000004, "Member 'BP_AquaticSurface_C_PlaySplashEffectByIndex::SplashLocation' has a wrong offset!");
static_assert(offsetof(BP_AquaticSurface_C_PlaySplashEffectByIndex, SplashScale) == 0x000010, "Member 'BP_AquaticSurface_C_PlaySplashEffectByIndex::SplashScale' has a wrong offset!");
static_assert(offsetof(BP_AquaticSurface_C_PlaySplashEffectByIndex, SplashVelocity) == 0x000014, "Member 'BP_AquaticSurface_C_PlaySplashEffectByIndex::SplashVelocity' has a wrong offset!");
static_assert(offsetof(BP_AquaticSurface_C_PlaySplashEffectByIndex, CallFunc_Array_IsValidIndex_ReturnValue) == 0x000018, "Member 'BP_AquaticSurface_C_PlaySplashEffectByIndex::CallFunc_Array_IsValidIndex_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AquaticSurface_C_PlaySplashEffectByIndex, CallFunc_NotEqual_ObjectObject_ReturnValue) == 0x000019, "Member 'BP_AquaticSurface_C_PlaySplashEffectByIndex::CallFunc_NotEqual_ObjectObject_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AquaticSurface_C_PlaySplashEffectByIndex, CallFunc_NotEqual_ObjectObject_ReturnValue_1) == 0x00001A, "Member 'BP_AquaticSurface_C_PlaySplashEffectByIndex::CallFunc_NotEqual_ObjectObject_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_AquaticSurface_C_PlaySplashEffectByIndex, CallFunc_MapRangeClamped_ReturnValue) == 0x00001C, "Member 'BP_AquaticSurface_C_PlaySplashEffectByIndex::CallFunc_MapRangeClamped_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AquaticSurface_C_PlaySplashEffectByIndex, CallFunc_Multiply_FloatFloat_ReturnValue) == 0x000020, "Member 'BP_AquaticSurface_C_PlaySplashEffectByIndex::CallFunc_Multiply_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AquaticSurface_C_PlaySplashEffectByIndex, CallFunc_Greater_FloatFloat_ReturnValue) == 0x000024, "Member 'BP_AquaticSurface_C_PlaySplashEffectByIndex::CallFunc_Greater_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AquaticSurface_C_PlaySplashEffectByIndex, CallFunc_Conv_FloatToVector_ReturnValue) == 0x000028, "Member 'BP_AquaticSurface_C_PlaySplashEffectByIndex::CallFunc_Conv_FloatToVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AquaticSurface_C_PlaySplashEffectByIndex, CallFunc_SpawnEmitterAtLocation_ReturnValue) == 0x000038, "Member 'BP_AquaticSurface_C_PlaySplashEffectByIndex::CallFunc_SpawnEmitterAtLocation_ReturnValue' has a wrong offset!");

// Function BP_AquaticSurface.BP_AquaticSurface_C.OverlapCamera
// 0x0208 (0x0208 - 0x0000)
struct BP_AquaticSurface_C_OverlapCamera final
{
public:
	float                                         PriorityValue;                                     // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_AquaticSurface_C*                   PriorityActor;                                     // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Temp_float_Variable;                               // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AActor*>                         Temp_object_Variable;                              // 0x0018(0x0010)(ConstParm, ReferenceParm)
	float                                         Temp_float_Variable_1;                             // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0039(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x003A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3B[0x5];                                       // 0x003B(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class APlayerCameraManager*                   CallFunc_GetPlayerCameraManager_ReturnValue;       // 0x0040(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetCameraLocation_ReturnValue;            // 0x0048(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_X;                            // 0x0054(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y;                            // 0x0058(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z;                            // 0x005C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetComponentLocation_ReturnValue;      // 0x0060(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_X_1;                          // 0x006C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y_1;                          // 0x0070(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z_1;                          // 0x0074(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             CallFunc_K2_SetWorldRotation_SweepHitResult;       // 0x0078(0x008C)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue;           // 0x0104(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_105[0x3];                                      // 0x0105(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class APlayerCameraManager*                   CallFunc_GetPlayerCameraManager_ReturnValue_1;     // 0x0108(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Select_Default;                             // 0x0110(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_2;                    // 0x0114(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_115[0x3];                                      // 0x0115(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               CallFunc_MakeRotator_ReturnValue;                  // 0x0118(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FHitResult                             CallFunc_K2_SetWorldRotation_SweepHitResult_1;     // 0x0124(0x008C)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	struct FVector                                CallFunc_GetCameraLocation_ReturnValue_1;          // 0x01B0(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ObjectObject_ReturnValue;      // 0x01BC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_3;                    // 0x01BD(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1BE[0x2];                                      // 0x01BE(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<EObjectTypeQuery>                      K2Node_MakeArray_Array;                            // 0x01C0(0x0010)(ConstParm, ReferenceParm)
	TArray<class AActor*>                         CallFunc_BoxOverlapActors_OutActors;               // 0x01D0(0x0010)(ReferenceParm)
	bool                                          CallFunc_BoxOverlapActors_ReturnValue;             // 0x01E0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1E1[0x3];                                      // 0x01E1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x01E4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_Array_Get_Item;                           // 0x01E8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x01F0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1F1[0x7];                                      // 0x01F1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_AquaticSurface_C*                   K2Node_DynamicCast_AsBP_Aquatic_Surface;           // 0x01F8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0200(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_GreaterEqual_FloatFloat_ReturnValue;      // 0x0201(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x0202(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_AquaticSurface_C_OverlapCamera) == 0x000008, "Wrong alignment on BP_AquaticSurface_C_OverlapCamera");
static_assert(sizeof(BP_AquaticSurface_C_OverlapCamera) == 0x000208, "Wrong size on BP_AquaticSurface_C_OverlapCamera");
static_assert(offsetof(BP_AquaticSurface_C_OverlapCamera, PriorityValue) == 0x000000, "Member 'BP_AquaticSurface_C_OverlapCamera::PriorityValue' has a wrong offset!");
static_assert(offsetof(BP_AquaticSurface_C_OverlapCamera, PriorityActor) == 0x000008, "Member 'BP_AquaticSurface_C_OverlapCamera::PriorityActor' has a wrong offset!");
static_assert(offsetof(BP_AquaticSurface_C_OverlapCamera, Temp_float_Variable) == 0x000010, "Member 'BP_AquaticSurface_C_OverlapCamera::Temp_float_Variable' has a wrong offset!");
static_assert(offsetof(BP_AquaticSurface_C_OverlapCamera, Temp_object_Variable) == 0x000018, "Member 'BP_AquaticSurface_C_OverlapCamera::Temp_object_Variable' has a wrong offset!");
static_assert(offsetof(BP_AquaticSurface_C_OverlapCamera, Temp_float_Variable_1) == 0x000028, "Member 'BP_AquaticSurface_C_OverlapCamera::Temp_float_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_AquaticSurface_C_OverlapCamera, Temp_int_Loop_Counter_Variable) == 0x00002C, "Member 'BP_AquaticSurface_C_OverlapCamera::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BP_AquaticSurface_C_OverlapCamera, CallFunc_Add_IntInt_ReturnValue) == 0x000030, "Member 'BP_AquaticSurface_C_OverlapCamera::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AquaticSurface_C_OverlapCamera, Temp_int_Array_Index_Variable) == 0x000034, "Member 'BP_AquaticSurface_C_OverlapCamera::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BP_AquaticSurface_C_OverlapCamera, Temp_bool_Variable) == 0x000038, "Member 'BP_AquaticSurface_C_OverlapCamera::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(BP_AquaticSurface_C_OverlapCamera, CallFunc_IsValid_ReturnValue) == 0x000039, "Member 'BP_AquaticSurface_C_OverlapCamera::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AquaticSurface_C_OverlapCamera, CallFunc_IsValid_ReturnValue_1) == 0x00003A, "Member 'BP_AquaticSurface_C_OverlapCamera::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_AquaticSurface_C_OverlapCamera, CallFunc_GetPlayerCameraManager_ReturnValue) == 0x000040, "Member 'BP_AquaticSurface_C_OverlapCamera::CallFunc_GetPlayerCameraManager_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AquaticSurface_C_OverlapCamera, CallFunc_GetCameraLocation_ReturnValue) == 0x000048, "Member 'BP_AquaticSurface_C_OverlapCamera::CallFunc_GetCameraLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AquaticSurface_C_OverlapCamera, CallFunc_BreakVector_X) == 0x000054, "Member 'BP_AquaticSurface_C_OverlapCamera::CallFunc_BreakVector_X' has a wrong offset!");
static_assert(offsetof(BP_AquaticSurface_C_OverlapCamera, CallFunc_BreakVector_Y) == 0x000058, "Member 'BP_AquaticSurface_C_OverlapCamera::CallFunc_BreakVector_Y' has a wrong offset!");
static_assert(offsetof(BP_AquaticSurface_C_OverlapCamera, CallFunc_BreakVector_Z) == 0x00005C, "Member 'BP_AquaticSurface_C_OverlapCamera::CallFunc_BreakVector_Z' has a wrong offset!");
static_assert(offsetof(BP_AquaticSurface_C_OverlapCamera, CallFunc_K2_GetComponentLocation_ReturnValue) == 0x000060, "Member 'BP_AquaticSurface_C_OverlapCamera::CallFunc_K2_GetComponentLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AquaticSurface_C_OverlapCamera, CallFunc_BreakVector_X_1) == 0x00006C, "Member 'BP_AquaticSurface_C_OverlapCamera::CallFunc_BreakVector_X_1' has a wrong offset!");
static_assert(offsetof(BP_AquaticSurface_C_OverlapCamera, CallFunc_BreakVector_Y_1) == 0x000070, "Member 'BP_AquaticSurface_C_OverlapCamera::CallFunc_BreakVector_Y_1' has a wrong offset!");
static_assert(offsetof(BP_AquaticSurface_C_OverlapCamera, CallFunc_BreakVector_Z_1) == 0x000074, "Member 'BP_AquaticSurface_C_OverlapCamera::CallFunc_BreakVector_Z_1' has a wrong offset!");
static_assert(offsetof(BP_AquaticSurface_C_OverlapCamera, CallFunc_K2_SetWorldRotation_SweepHitResult) == 0x000078, "Member 'BP_AquaticSurface_C_OverlapCamera::CallFunc_K2_SetWorldRotation_SweepHitResult' has a wrong offset!");
static_assert(offsetof(BP_AquaticSurface_C_OverlapCamera, CallFunc_Greater_FloatFloat_ReturnValue) == 0x000104, "Member 'BP_AquaticSurface_C_OverlapCamera::CallFunc_Greater_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AquaticSurface_C_OverlapCamera, CallFunc_GetPlayerCameraManager_ReturnValue_1) == 0x000108, "Member 'BP_AquaticSurface_C_OverlapCamera::CallFunc_GetPlayerCameraManager_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_AquaticSurface_C_OverlapCamera, K2Node_Select_Default) == 0x000110, "Member 'BP_AquaticSurface_C_OverlapCamera::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(BP_AquaticSurface_C_OverlapCamera, CallFunc_IsValid_ReturnValue_2) == 0x000114, "Member 'BP_AquaticSurface_C_OverlapCamera::CallFunc_IsValid_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_AquaticSurface_C_OverlapCamera, CallFunc_MakeRotator_ReturnValue) == 0x000118, "Member 'BP_AquaticSurface_C_OverlapCamera::CallFunc_MakeRotator_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AquaticSurface_C_OverlapCamera, CallFunc_K2_SetWorldRotation_SweepHitResult_1) == 0x000124, "Member 'BP_AquaticSurface_C_OverlapCamera::CallFunc_K2_SetWorldRotation_SweepHitResult_1' has a wrong offset!");
static_assert(offsetof(BP_AquaticSurface_C_OverlapCamera, CallFunc_GetCameraLocation_ReturnValue_1) == 0x0001B0, "Member 'BP_AquaticSurface_C_OverlapCamera::CallFunc_GetCameraLocation_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_AquaticSurface_C_OverlapCamera, CallFunc_EqualEqual_ObjectObject_ReturnValue) == 0x0001BC, "Member 'BP_AquaticSurface_C_OverlapCamera::CallFunc_EqualEqual_ObjectObject_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AquaticSurface_C_OverlapCamera, CallFunc_IsValid_ReturnValue_3) == 0x0001BD, "Member 'BP_AquaticSurface_C_OverlapCamera::CallFunc_IsValid_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_AquaticSurface_C_OverlapCamera, K2Node_MakeArray_Array) == 0x0001C0, "Member 'BP_AquaticSurface_C_OverlapCamera::K2Node_MakeArray_Array' has a wrong offset!");
static_assert(offsetof(BP_AquaticSurface_C_OverlapCamera, CallFunc_BoxOverlapActors_OutActors) == 0x0001D0, "Member 'BP_AquaticSurface_C_OverlapCamera::CallFunc_BoxOverlapActors_OutActors' has a wrong offset!");
static_assert(offsetof(BP_AquaticSurface_C_OverlapCamera, CallFunc_BoxOverlapActors_ReturnValue) == 0x0001E0, "Member 'BP_AquaticSurface_C_OverlapCamera::CallFunc_BoxOverlapActors_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AquaticSurface_C_OverlapCamera, CallFunc_Array_Length_ReturnValue) == 0x0001E4, "Member 'BP_AquaticSurface_C_OverlapCamera::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AquaticSurface_C_OverlapCamera, CallFunc_Array_Get_Item) == 0x0001E8, "Member 'BP_AquaticSurface_C_OverlapCamera::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BP_AquaticSurface_C_OverlapCamera, CallFunc_Less_IntInt_ReturnValue) == 0x0001F0, "Member 'BP_AquaticSurface_C_OverlapCamera::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AquaticSurface_C_OverlapCamera, K2Node_DynamicCast_AsBP_Aquatic_Surface) == 0x0001F8, "Member 'BP_AquaticSurface_C_OverlapCamera::K2Node_DynamicCast_AsBP_Aquatic_Surface' has a wrong offset!");
static_assert(offsetof(BP_AquaticSurface_C_OverlapCamera, K2Node_DynamicCast_bSuccess) == 0x000200, "Member 'BP_AquaticSurface_C_OverlapCamera::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_AquaticSurface_C_OverlapCamera, CallFunc_GreaterEqual_FloatFloat_ReturnValue) == 0x000201, "Member 'BP_AquaticSurface_C_OverlapCamera::CallFunc_GreaterEqual_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AquaticSurface_C_OverlapCamera, CallFunc_BooleanOR_ReturnValue) == 0x000202, "Member 'BP_AquaticSurface_C_OverlapCamera::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");

// Function BP_AquaticSurface.BP_AquaticSurface_C.CleanHoles
// 0x0050 (0x0050 - 0x0000)
struct BP_AquaticSurface_C_CleanHoles final
{
public:
	struct FVector2D                              SleanScale;                                        // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CleanOffset;                                       // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTransform                             CleanTransform;                                    // 0x0010(0x0030)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor)
	int32                                         Temp_int_Variable;                                 // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_IntInt_ReturnValue;             // 0x0044(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_45[0x3];                                       // 0x0045(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0048(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_AquaticSurface_C_CleanHoles) == 0x000010, "Wrong alignment on BP_AquaticSurface_C_CleanHoles");
static_assert(sizeof(BP_AquaticSurface_C_CleanHoles) == 0x000050, "Wrong size on BP_AquaticSurface_C_CleanHoles");
static_assert(offsetof(BP_AquaticSurface_C_CleanHoles, SleanScale) == 0x000000, "Member 'BP_AquaticSurface_C_CleanHoles::SleanScale' has a wrong offset!");
static_assert(offsetof(BP_AquaticSurface_C_CleanHoles, CleanOffset) == 0x000008, "Member 'BP_AquaticSurface_C_CleanHoles::CleanOffset' has a wrong offset!");
static_assert(offsetof(BP_AquaticSurface_C_CleanHoles, CleanTransform) == 0x000010, "Member 'BP_AquaticSurface_C_CleanHoles::CleanTransform' has a wrong offset!");
static_assert(offsetof(BP_AquaticSurface_C_CleanHoles, Temp_int_Variable) == 0x000040, "Member 'BP_AquaticSurface_C_CleanHoles::Temp_int_Variable' has a wrong offset!");
static_assert(offsetof(BP_AquaticSurface_C_CleanHoles, CallFunc_LessEqual_IntInt_ReturnValue) == 0x000044, "Member 'BP_AquaticSurface_C_CleanHoles::CallFunc_LessEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AquaticSurface_C_CleanHoles, CallFunc_Add_IntInt_ReturnValue) == 0x000048, "Member 'BP_AquaticSurface_C_CleanHoles::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");

// Function BP_AquaticSurface.BP_AquaticSurface_C.InitReflectionPlane
// 0x0001 (0x0001 - 0x0000)
struct BP_AquaticSurface_C_InitReflectionPlane final
{
public:
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_AquaticSurface_C_InitReflectionPlane) == 0x000001, "Wrong alignment on BP_AquaticSurface_C_InitReflectionPlane");
static_assert(sizeof(BP_AquaticSurface_C_InitReflectionPlane) == 0x000001, "Wrong size on BP_AquaticSurface_C_InitReflectionPlane");
static_assert(offsetof(BP_AquaticSurface_C_InitReflectionPlane, CallFunc_IsValid_ReturnValue) == 0x000000, "Member 'BP_AquaticSurface_C_InitReflectionPlane::CallFunc_IsValid_ReturnValue' has a wrong offset!");

}

