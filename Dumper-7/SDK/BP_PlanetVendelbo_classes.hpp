#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_PlanetVendelbo

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "Engine_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_PlanetVendelbo.BP_PlanetVendelbo_C
// 0x0208 (0x0428 - 0x0220)
class ABP_PlanetVendelbo_C final : public AActor
{
public:
	class UStaticMeshComponent*                   Rings;                                             // 0x0220(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	class UStaticMeshComponent*                   Atmosphere_2;                                      // 0x0228(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	class UStaticMeshComponent*                   Atmosphere_1;                                      // 0x0230(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	class UStaticMeshComponent*                   Planet;                                            // 0x0238(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	class USceneComponent*                        DefaultSceneRoot;                                  // 0x0240(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	bool                                          Refresh_Material;                                  // 0x0248(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_249[0x7];                                      // 0x0249(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 Light_Source;                                      // 0x0250(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               Atmosphere_1_Material;                             // 0x0258(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               Atmosphere_2_Material;                             // 0x0260(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               Planet_Material;                                   // 0x0268(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               Rings_Material;                                    // 0x0270(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstance*                      Material_Instance_Planet;                          // 0x0278(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstance*                      Material_Instance_Atmosphere;                      // 0x0280(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Atmosphere_Color;                                  // 0x0288(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Extinction_Color;                                  // 0x0298(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Extinction_Intensity;                              // 0x02A8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Atmosphere_Brightness;                             // 0x02AC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Atmosphere_Falloff;                                // 0x02B0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Atmosphere_Inner_Falloff;                          // 0x02B4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Atmosphere_Height;                                 // 0x02B8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Clouds_Coverage;                                   // 0x02BC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Strip_Frequency;                                   // 0x02C0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Zone_Frequency;                                    // 0x02C4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Clouds_Speed_X;                                    // 0x02C8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Clouds_Speed_Y;                                    // 0x02CC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Zone_1_Style;                                      // 0x02D0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Zone_2_Style;                                      // 0x02D4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Turbolence_Intensity;                              // 0x02D8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Storm_Zone_Frequency;                              // 0x02DC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Storm_Size;                                        // 0x02E0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Storm_Intensity_1;                                 // 0x02E4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Color_Frequency;                                   // 0x02E8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Clouds_Rougness;                                   // 0x02EC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Fast_Deep_Color;                                   // 0x02F0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Fast_Clouds_Color_;                                // 0x0300(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Slow_Deep_Color;                                   // 0x0310(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Slow_Clouds_Color;                                 // 0x0320(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Rings_Inner_Falloff;                               // 0x0330(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Rings_Outer_Falloff;                               // 0x0334(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Rings_Opacity;                                     // 0x0338(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Rings_Frequency;                                   // 0x033C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Rings_Color_Frequency;                             // 0x0340(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Rings_Opacity_Mask_Power;                          // 0x0344(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Rings_Color_Mask_Power;                            // 0x0348(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Rings_Density;                                     // 0x034C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Ring_Color_1;                                      // 0x0350(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Ring_Color_2;                                      // 0x0360(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Polar_Storm;                                       // 0x0370(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Polar_Clouds_Speed;                                // 0x0374(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Aurora_Brightness;                                 // 0x0378(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Poles_Clouds_Color;                                // 0x037C(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Poles_Deep_Color;                                  // 0x038C(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Aurora_Color_1;                                    // 0x039C(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Aurora_Color_2;                                    // 0x03AC(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Storm_Intensity_2;                                 // 0x03BC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Lightning_Brigtness;                               // 0x03C0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Lightning_Color;                                   // 0x03C4(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3D4[0x4];                                      // 0x03D4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UTexture*                               Storm_Mask;                                        // 0x03D8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         High_Bands_Coverage;                               // 0x03E0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         High_Bands_Frequency;                              // 0x03E4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         High_Bands_Speed;                                  // 0x03E8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           High_Bands_Color_1;                                // 0x03EC(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           High_Bands_Color_2;                                // 0x03FC(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_40C[0x4];                                      // 0x040C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UTexture*                               High_Bands_Texture;                                // 0x0410(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UTexture*                               Cloud_Mask;                                        // 0x0418(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UTexture*                               High_Bands_Mask;                                   // 0x0420(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void UserConstructionScript();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_PlanetVendelbo_C">();
	}
	static class ABP_PlanetVendelbo_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_PlanetVendelbo_C>();
	}
};
static_assert(alignof(ABP_PlanetVendelbo_C) == 0x000008, "Wrong alignment on ABP_PlanetVendelbo_C");
static_assert(sizeof(ABP_PlanetVendelbo_C) == 0x000428, "Wrong size on ABP_PlanetVendelbo_C");
static_assert(offsetof(ABP_PlanetVendelbo_C, Rings) == 0x000220, "Member 'ABP_PlanetVendelbo_C::Rings' has a wrong offset!");
static_assert(offsetof(ABP_PlanetVendelbo_C, Atmosphere_2) == 0x000228, "Member 'ABP_PlanetVendelbo_C::Atmosphere_2' has a wrong offset!");
static_assert(offsetof(ABP_PlanetVendelbo_C, Atmosphere_1) == 0x000230, "Member 'ABP_PlanetVendelbo_C::Atmosphere_1' has a wrong offset!");
static_assert(offsetof(ABP_PlanetVendelbo_C, Planet) == 0x000238, "Member 'ABP_PlanetVendelbo_C::Planet' has a wrong offset!");
static_assert(offsetof(ABP_PlanetVendelbo_C, DefaultSceneRoot) == 0x000240, "Member 'ABP_PlanetVendelbo_C::DefaultSceneRoot' has a wrong offset!");
static_assert(offsetof(ABP_PlanetVendelbo_C, Refresh_Material) == 0x000248, "Member 'ABP_PlanetVendelbo_C::Refresh_Material' has a wrong offset!");
static_assert(offsetof(ABP_PlanetVendelbo_C, Light_Source) == 0x000250, "Member 'ABP_PlanetVendelbo_C::Light_Source' has a wrong offset!");
static_assert(offsetof(ABP_PlanetVendelbo_C, Atmosphere_1_Material) == 0x000258, "Member 'ABP_PlanetVendelbo_C::Atmosphere_1_Material' has a wrong offset!");
static_assert(offsetof(ABP_PlanetVendelbo_C, Atmosphere_2_Material) == 0x000260, "Member 'ABP_PlanetVendelbo_C::Atmosphere_2_Material' has a wrong offset!");
static_assert(offsetof(ABP_PlanetVendelbo_C, Planet_Material) == 0x000268, "Member 'ABP_PlanetVendelbo_C::Planet_Material' has a wrong offset!");
static_assert(offsetof(ABP_PlanetVendelbo_C, Rings_Material) == 0x000270, "Member 'ABP_PlanetVendelbo_C::Rings_Material' has a wrong offset!");
static_assert(offsetof(ABP_PlanetVendelbo_C, Material_Instance_Planet) == 0x000278, "Member 'ABP_PlanetVendelbo_C::Material_Instance_Planet' has a wrong offset!");
static_assert(offsetof(ABP_PlanetVendelbo_C, Material_Instance_Atmosphere) == 0x000280, "Member 'ABP_PlanetVendelbo_C::Material_Instance_Atmosphere' has a wrong offset!");
static_assert(offsetof(ABP_PlanetVendelbo_C, Atmosphere_Color) == 0x000288, "Member 'ABP_PlanetVendelbo_C::Atmosphere_Color' has a wrong offset!");
static_assert(offsetof(ABP_PlanetVendelbo_C, Extinction_Color) == 0x000298, "Member 'ABP_PlanetVendelbo_C::Extinction_Color' has a wrong offset!");
static_assert(offsetof(ABP_PlanetVendelbo_C, Extinction_Intensity) == 0x0002A8, "Member 'ABP_PlanetVendelbo_C::Extinction_Intensity' has a wrong offset!");
static_assert(offsetof(ABP_PlanetVendelbo_C, Atmosphere_Brightness) == 0x0002AC, "Member 'ABP_PlanetVendelbo_C::Atmosphere_Brightness' has a wrong offset!");
static_assert(offsetof(ABP_PlanetVendelbo_C, Atmosphere_Falloff) == 0x0002B0, "Member 'ABP_PlanetVendelbo_C::Atmosphere_Falloff' has a wrong offset!");
static_assert(offsetof(ABP_PlanetVendelbo_C, Atmosphere_Inner_Falloff) == 0x0002B4, "Member 'ABP_PlanetVendelbo_C::Atmosphere_Inner_Falloff' has a wrong offset!");
static_assert(offsetof(ABP_PlanetVendelbo_C, Atmosphere_Height) == 0x0002B8, "Member 'ABP_PlanetVendelbo_C::Atmosphere_Height' has a wrong offset!");
static_assert(offsetof(ABP_PlanetVendelbo_C, Clouds_Coverage) == 0x0002BC, "Member 'ABP_PlanetVendelbo_C::Clouds_Coverage' has a wrong offset!");
static_assert(offsetof(ABP_PlanetVendelbo_C, Strip_Frequency) == 0x0002C0, "Member 'ABP_PlanetVendelbo_C::Strip_Frequency' has a wrong offset!");
static_assert(offsetof(ABP_PlanetVendelbo_C, Zone_Frequency) == 0x0002C4, "Member 'ABP_PlanetVendelbo_C::Zone_Frequency' has a wrong offset!");
static_assert(offsetof(ABP_PlanetVendelbo_C, Clouds_Speed_X) == 0x0002C8, "Member 'ABP_PlanetVendelbo_C::Clouds_Speed_X' has a wrong offset!");
static_assert(offsetof(ABP_PlanetVendelbo_C, Clouds_Speed_Y) == 0x0002CC, "Member 'ABP_PlanetVendelbo_C::Clouds_Speed_Y' has a wrong offset!");
static_assert(offsetof(ABP_PlanetVendelbo_C, Zone_1_Style) == 0x0002D0, "Member 'ABP_PlanetVendelbo_C::Zone_1_Style' has a wrong offset!");
static_assert(offsetof(ABP_PlanetVendelbo_C, Zone_2_Style) == 0x0002D4, "Member 'ABP_PlanetVendelbo_C::Zone_2_Style' has a wrong offset!");
static_assert(offsetof(ABP_PlanetVendelbo_C, Turbolence_Intensity) == 0x0002D8, "Member 'ABP_PlanetVendelbo_C::Turbolence_Intensity' has a wrong offset!");
static_assert(offsetof(ABP_PlanetVendelbo_C, Storm_Zone_Frequency) == 0x0002DC, "Member 'ABP_PlanetVendelbo_C::Storm_Zone_Frequency' has a wrong offset!");
static_assert(offsetof(ABP_PlanetVendelbo_C, Storm_Size) == 0x0002E0, "Member 'ABP_PlanetVendelbo_C::Storm_Size' has a wrong offset!");
static_assert(offsetof(ABP_PlanetVendelbo_C, Storm_Intensity_1) == 0x0002E4, "Member 'ABP_PlanetVendelbo_C::Storm_Intensity_1' has a wrong offset!");
static_assert(offsetof(ABP_PlanetVendelbo_C, Color_Frequency) == 0x0002E8, "Member 'ABP_PlanetVendelbo_C::Color_Frequency' has a wrong offset!");
static_assert(offsetof(ABP_PlanetVendelbo_C, Clouds_Rougness) == 0x0002EC, "Member 'ABP_PlanetVendelbo_C::Clouds_Rougness' has a wrong offset!");
static_assert(offsetof(ABP_PlanetVendelbo_C, Fast_Deep_Color) == 0x0002F0, "Member 'ABP_PlanetVendelbo_C::Fast_Deep_Color' has a wrong offset!");
static_assert(offsetof(ABP_PlanetVendelbo_C, Fast_Clouds_Color_) == 0x000300, "Member 'ABP_PlanetVendelbo_C::Fast_Clouds_Color_' has a wrong offset!");
static_assert(offsetof(ABP_PlanetVendelbo_C, Slow_Deep_Color) == 0x000310, "Member 'ABP_PlanetVendelbo_C::Slow_Deep_Color' has a wrong offset!");
static_assert(offsetof(ABP_PlanetVendelbo_C, Slow_Clouds_Color) == 0x000320, "Member 'ABP_PlanetVendelbo_C::Slow_Clouds_Color' has a wrong offset!");
static_assert(offsetof(ABP_PlanetVendelbo_C, Rings_Inner_Falloff) == 0x000330, "Member 'ABP_PlanetVendelbo_C::Rings_Inner_Falloff' has a wrong offset!");
static_assert(offsetof(ABP_PlanetVendelbo_C, Rings_Outer_Falloff) == 0x000334, "Member 'ABP_PlanetVendelbo_C::Rings_Outer_Falloff' has a wrong offset!");
static_assert(offsetof(ABP_PlanetVendelbo_C, Rings_Opacity) == 0x000338, "Member 'ABP_PlanetVendelbo_C::Rings_Opacity' has a wrong offset!");
static_assert(offsetof(ABP_PlanetVendelbo_C, Rings_Frequency) == 0x00033C, "Member 'ABP_PlanetVendelbo_C::Rings_Frequency' has a wrong offset!");
static_assert(offsetof(ABP_PlanetVendelbo_C, Rings_Color_Frequency) == 0x000340, "Member 'ABP_PlanetVendelbo_C::Rings_Color_Frequency' has a wrong offset!");
static_assert(offsetof(ABP_PlanetVendelbo_C, Rings_Opacity_Mask_Power) == 0x000344, "Member 'ABP_PlanetVendelbo_C::Rings_Opacity_Mask_Power' has a wrong offset!");
static_assert(offsetof(ABP_PlanetVendelbo_C, Rings_Color_Mask_Power) == 0x000348, "Member 'ABP_PlanetVendelbo_C::Rings_Color_Mask_Power' has a wrong offset!");
static_assert(offsetof(ABP_PlanetVendelbo_C, Rings_Density) == 0x00034C, "Member 'ABP_PlanetVendelbo_C::Rings_Density' has a wrong offset!");
static_assert(offsetof(ABP_PlanetVendelbo_C, Ring_Color_1) == 0x000350, "Member 'ABP_PlanetVendelbo_C::Ring_Color_1' has a wrong offset!");
static_assert(offsetof(ABP_PlanetVendelbo_C, Ring_Color_2) == 0x000360, "Member 'ABP_PlanetVendelbo_C::Ring_Color_2' has a wrong offset!");
static_assert(offsetof(ABP_PlanetVendelbo_C, Polar_Storm) == 0x000370, "Member 'ABP_PlanetVendelbo_C::Polar_Storm' has a wrong offset!");
static_assert(offsetof(ABP_PlanetVendelbo_C, Polar_Clouds_Speed) == 0x000374, "Member 'ABP_PlanetVendelbo_C::Polar_Clouds_Speed' has a wrong offset!");
static_assert(offsetof(ABP_PlanetVendelbo_C, Aurora_Brightness) == 0x000378, "Member 'ABP_PlanetVendelbo_C::Aurora_Brightness' has a wrong offset!");
static_assert(offsetof(ABP_PlanetVendelbo_C, Poles_Clouds_Color) == 0x00037C, "Member 'ABP_PlanetVendelbo_C::Poles_Clouds_Color' has a wrong offset!");
static_assert(offsetof(ABP_PlanetVendelbo_C, Poles_Deep_Color) == 0x00038C, "Member 'ABP_PlanetVendelbo_C::Poles_Deep_Color' has a wrong offset!");
static_assert(offsetof(ABP_PlanetVendelbo_C, Aurora_Color_1) == 0x00039C, "Member 'ABP_PlanetVendelbo_C::Aurora_Color_1' has a wrong offset!");
static_assert(offsetof(ABP_PlanetVendelbo_C, Aurora_Color_2) == 0x0003AC, "Member 'ABP_PlanetVendelbo_C::Aurora_Color_2' has a wrong offset!");
static_assert(offsetof(ABP_PlanetVendelbo_C, Storm_Intensity_2) == 0x0003BC, "Member 'ABP_PlanetVendelbo_C::Storm_Intensity_2' has a wrong offset!");
static_assert(offsetof(ABP_PlanetVendelbo_C, Lightning_Brigtness) == 0x0003C0, "Member 'ABP_PlanetVendelbo_C::Lightning_Brigtness' has a wrong offset!");
static_assert(offsetof(ABP_PlanetVendelbo_C, Lightning_Color) == 0x0003C4, "Member 'ABP_PlanetVendelbo_C::Lightning_Color' has a wrong offset!");
static_assert(offsetof(ABP_PlanetVendelbo_C, Storm_Mask) == 0x0003D8, "Member 'ABP_PlanetVendelbo_C::Storm_Mask' has a wrong offset!");
static_assert(offsetof(ABP_PlanetVendelbo_C, High_Bands_Coverage) == 0x0003E0, "Member 'ABP_PlanetVendelbo_C::High_Bands_Coverage' has a wrong offset!");
static_assert(offsetof(ABP_PlanetVendelbo_C, High_Bands_Frequency) == 0x0003E4, "Member 'ABP_PlanetVendelbo_C::High_Bands_Frequency' has a wrong offset!");
static_assert(offsetof(ABP_PlanetVendelbo_C, High_Bands_Speed) == 0x0003E8, "Member 'ABP_PlanetVendelbo_C::High_Bands_Speed' has a wrong offset!");
static_assert(offsetof(ABP_PlanetVendelbo_C, High_Bands_Color_1) == 0x0003EC, "Member 'ABP_PlanetVendelbo_C::High_Bands_Color_1' has a wrong offset!");
static_assert(offsetof(ABP_PlanetVendelbo_C, High_Bands_Color_2) == 0x0003FC, "Member 'ABP_PlanetVendelbo_C::High_Bands_Color_2' has a wrong offset!");
static_assert(offsetof(ABP_PlanetVendelbo_C, High_Bands_Texture) == 0x000410, "Member 'ABP_PlanetVendelbo_C::High_Bands_Texture' has a wrong offset!");
static_assert(offsetof(ABP_PlanetVendelbo_C, Cloud_Mask) == 0x000418, "Member 'ABP_PlanetVendelbo_C::Cloud_Mask' has a wrong offset!");
static_assert(offsetof(ABP_PlanetVendelbo_C, High_Bands_Mask) == 0x000420, "Member 'ABP_PlanetVendelbo_C::High_Bands_Mask' has a wrong offset!");

}

