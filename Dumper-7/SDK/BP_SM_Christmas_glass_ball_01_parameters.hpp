#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_SM_Christmas_glass_ball_01

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "Engine_structs.hpp"


namespace SDK::Params
{

// Function BP_SM_Christmas_glass_ball_01.BP_SM_Christmas_glass_ball_01_C.ExecuteUbergraph_BP_SM_Christmas_glass_ball_01
// 0x0150 (0x0150 - 0x0000)
struct BP_SM_Christmas_glass_ball_01_C_ExecuteUbergraph_BP_SM_Christmas_glass_ball_01 final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Event_DeltaSeconds;                         // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_MakeRotator_ReturnValue;                  // 0x0008(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FRotator                               CallFunc_Multiply_RotatorFloat_ReturnValue;        // 0x0014(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FRotator                               CallFunc_MakeRotator_ReturnValue_1;                // 0x0020(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FHitResult                             CallFunc_K2_AddLocalRotation_SweepHitResult;       // 0x002C(0x008C)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	struct FRotator                               CallFunc_Multiply_RotatorFloat_ReturnValue_1;      // 0x00B8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FHitResult                             CallFunc_K2_AddLocalRotation_SweepHitResult_1;     // 0x00C4(0x008C)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
};
static_assert(alignof(BP_SM_Christmas_glass_ball_01_C_ExecuteUbergraph_BP_SM_Christmas_glass_ball_01) == 0x000004, "Wrong alignment on BP_SM_Christmas_glass_ball_01_C_ExecuteUbergraph_BP_SM_Christmas_glass_ball_01");
static_assert(sizeof(BP_SM_Christmas_glass_ball_01_C_ExecuteUbergraph_BP_SM_Christmas_glass_ball_01) == 0x000150, "Wrong size on BP_SM_Christmas_glass_ball_01_C_ExecuteUbergraph_BP_SM_Christmas_glass_ball_01");
static_assert(offsetof(BP_SM_Christmas_glass_ball_01_C_ExecuteUbergraph_BP_SM_Christmas_glass_ball_01, EntryPoint) == 0x000000, "Member 'BP_SM_Christmas_glass_ball_01_C_ExecuteUbergraph_BP_SM_Christmas_glass_ball_01::EntryPoint' has a wrong offset!");
static_assert(offsetof(BP_SM_Christmas_glass_ball_01_C_ExecuteUbergraph_BP_SM_Christmas_glass_ball_01, K2Node_Event_DeltaSeconds) == 0x000004, "Member 'BP_SM_Christmas_glass_ball_01_C_ExecuteUbergraph_BP_SM_Christmas_glass_ball_01::K2Node_Event_DeltaSeconds' has a wrong offset!");
static_assert(offsetof(BP_SM_Christmas_glass_ball_01_C_ExecuteUbergraph_BP_SM_Christmas_glass_ball_01, CallFunc_MakeRotator_ReturnValue) == 0x000008, "Member 'BP_SM_Christmas_glass_ball_01_C_ExecuteUbergraph_BP_SM_Christmas_glass_ball_01::CallFunc_MakeRotator_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_SM_Christmas_glass_ball_01_C_ExecuteUbergraph_BP_SM_Christmas_glass_ball_01, CallFunc_Multiply_RotatorFloat_ReturnValue) == 0x000014, "Member 'BP_SM_Christmas_glass_ball_01_C_ExecuteUbergraph_BP_SM_Christmas_glass_ball_01::CallFunc_Multiply_RotatorFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_SM_Christmas_glass_ball_01_C_ExecuteUbergraph_BP_SM_Christmas_glass_ball_01, CallFunc_MakeRotator_ReturnValue_1) == 0x000020, "Member 'BP_SM_Christmas_glass_ball_01_C_ExecuteUbergraph_BP_SM_Christmas_glass_ball_01::CallFunc_MakeRotator_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_SM_Christmas_glass_ball_01_C_ExecuteUbergraph_BP_SM_Christmas_glass_ball_01, CallFunc_K2_AddLocalRotation_SweepHitResult) == 0x00002C, "Member 'BP_SM_Christmas_glass_ball_01_C_ExecuteUbergraph_BP_SM_Christmas_glass_ball_01::CallFunc_K2_AddLocalRotation_SweepHitResult' has a wrong offset!");
static_assert(offsetof(BP_SM_Christmas_glass_ball_01_C_ExecuteUbergraph_BP_SM_Christmas_glass_ball_01, CallFunc_Multiply_RotatorFloat_ReturnValue_1) == 0x0000B8, "Member 'BP_SM_Christmas_glass_ball_01_C_ExecuteUbergraph_BP_SM_Christmas_glass_ball_01::CallFunc_Multiply_RotatorFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_SM_Christmas_glass_ball_01_C_ExecuteUbergraph_BP_SM_Christmas_glass_ball_01, CallFunc_K2_AddLocalRotation_SweepHitResult_1) == 0x0000C4, "Member 'BP_SM_Christmas_glass_ball_01_C_ExecuteUbergraph_BP_SM_Christmas_glass_ball_01::CallFunc_K2_AddLocalRotation_SweepHitResult_1' has a wrong offset!");

// Function BP_SM_Christmas_glass_ball_01.BP_SM_Christmas_glass_ball_01_C.ReceiveTick
// 0x0004 (0x0004 - 0x0000)
struct BP_SM_Christmas_glass_ball_01_C_ReceiveTick final
{
public:
	float                                         DeltaSeconds;                                      // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_SM_Christmas_glass_ball_01_C_ReceiveTick) == 0x000004, "Wrong alignment on BP_SM_Christmas_glass_ball_01_C_ReceiveTick");
static_assert(sizeof(BP_SM_Christmas_glass_ball_01_C_ReceiveTick) == 0x000004, "Wrong size on BP_SM_Christmas_glass_ball_01_C_ReceiveTick");
static_assert(offsetof(BP_SM_Christmas_glass_ball_01_C_ReceiveTick, DeltaSeconds) == 0x000000, "Member 'BP_SM_Christmas_glass_ball_01_C_ReceiveTick::DeltaSeconds' has a wrong offset!");

}

