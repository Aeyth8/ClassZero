#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: CarryCorpseGA

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "GameplayAbilities_structs.hpp"
#include "SCT_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass CarryCorpseGA.CarryCorpseGA_C
// 0x0030 (0x0470 - 0x0440)
class UCarryCorpseGA_C final : public UContextSkill
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0440(0x0008)(ZeroConstructor, Transient, DuplicateTransient, UObjectWrapper)
	class ACharacterSCTBP_C*                      CarriedCorpse;                                     // 0x0448(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ACharacterSCTBP_C*                      OwningCharacter;                                   // 0x0450(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FActiveGameplayEffectHandle            EffectHandle;                                      // 0x0458(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	FMulticastInlineDelegateProperty_             On_ReleaseCorpse;                                  // 0x0460(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)

public:
	void On_ReleaseCorpse__DelegateSignature(class ACharacterSCTBP_C* CarriedCorpse_0);
	void ExecuteUbergraph_CarryCorpseGA(int32 EntryPoint);
	void OnDestroyed_Carried(class AActor* DestroyedActor);
	void K2_ActivateAbility();
	void K2_OnEndAbility(bool bWasCancelled);
	void ReleaseCorpse(class ACharacterSCTBP_C* CarriedCorpse_0, const struct FVector_NetQuantize& ReleaseLocation, const struct FVector_NetQuantize& ReleaseRotation, const struct FVector_NetQuantize& ReleaseVelocity);
	void CarryAll(class ACharacterSCTBP_C* CarriedCorpse_0, class ACharacterSCTBP_C* OwningCharacter_0);
	void NetQuantizeVector(const struct FVector& Vector, struct FVector_NetQuantize* QuantizedVector);
	void RagdollWhenNot();
	class FText GetInactiveContextDescription();
	void ReattachBodyToCapsule();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"CarryCorpseGA_C">();
	}
	static class UCarryCorpseGA_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCarryCorpseGA_C>();
	}
};
static_assert(alignof(UCarryCorpseGA_C) == 0x000008, "Wrong alignment on UCarryCorpseGA_C");
static_assert(sizeof(UCarryCorpseGA_C) == 0x000470, "Wrong size on UCarryCorpseGA_C");
static_assert(offsetof(UCarryCorpseGA_C, UberGraphFrame) == 0x000440, "Member 'UCarryCorpseGA_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UCarryCorpseGA_C, CarriedCorpse) == 0x000448, "Member 'UCarryCorpseGA_C::CarriedCorpse' has a wrong offset!");
static_assert(offsetof(UCarryCorpseGA_C, OwningCharacter) == 0x000450, "Member 'UCarryCorpseGA_C::OwningCharacter' has a wrong offset!");
static_assert(offsetof(UCarryCorpseGA_C, EffectHandle) == 0x000458, "Member 'UCarryCorpseGA_C::EffectHandle' has a wrong offset!");
static_assert(offsetof(UCarryCorpseGA_C, On_ReleaseCorpse) == 0x000460, "Member 'UCarryCorpseGA_C::On_ReleaseCorpse' has a wrong offset!");

}

