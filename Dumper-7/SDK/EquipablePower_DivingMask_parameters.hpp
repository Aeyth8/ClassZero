#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: EquipablePower_DivingMask

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "EquipableStruct_structs.hpp"
#include "SCT_structs.hpp"


namespace SDK::Params
{

// Function EquipablePower_DivingMask.EquipablePower_DivingMask_C.ExecuteUbergraph_EquipablePower_DivingMask
// 0x0068 (0x0068 - 0x0000)
struct EquipablePower_DivingMask_C_ExecuteUbergraph_EquipablePower_DivingMask final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetPlayerID_Return_Value;                 // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TDelegate<void(const struct FDestiny& UltimateDestiny, bool IsPersonoid)> K2Node_CreateDelegate_OutputDelegate;              // 0x0008(0x0010)(ZeroConstructor, NoDestructor)
	class UPlayerInfoGIS*                         CallFunc_GetGameInstanceSubsystem_ReturnValue;     // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_HasAuthority_ReturnValue;                 // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_GetOwner_ReturnValue;                     // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ACharacterSCTBP_C*                      K2Node_DynamicCast_AsCharacter_SCTBP;              // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ACharacter*                             K2Node_DynamicCast_AsCharacter;                    // 0x0040(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_49[0x3];                                       // 0x0049(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FDestiny                               K2Node_CustomEvent_UltimateDestiny;                // 0x004C(0x0010)(NoDestructor)
	bool                                          K2Node_CustomEvent_IsPersonoid;                    // 0x005C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5D[0x3];                                       // 0x005D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_GetHatID_OutputPin;                       // 0x0060(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(EquipablePower_DivingMask_C_ExecuteUbergraph_EquipablePower_DivingMask) == 0x000008, "Wrong alignment on EquipablePower_DivingMask_C_ExecuteUbergraph_EquipablePower_DivingMask");
static_assert(sizeof(EquipablePower_DivingMask_C_ExecuteUbergraph_EquipablePower_DivingMask) == 0x000068, "Wrong size on EquipablePower_DivingMask_C_ExecuteUbergraph_EquipablePower_DivingMask");
static_assert(offsetof(EquipablePower_DivingMask_C_ExecuteUbergraph_EquipablePower_DivingMask, EntryPoint) == 0x000000, "Member 'EquipablePower_DivingMask_C_ExecuteUbergraph_EquipablePower_DivingMask::EntryPoint' has a wrong offset!");
static_assert(offsetof(EquipablePower_DivingMask_C_ExecuteUbergraph_EquipablePower_DivingMask, CallFunc_GetPlayerID_Return_Value) == 0x000004, "Member 'EquipablePower_DivingMask_C_ExecuteUbergraph_EquipablePower_DivingMask::CallFunc_GetPlayerID_Return_Value' has a wrong offset!");
static_assert(offsetof(EquipablePower_DivingMask_C_ExecuteUbergraph_EquipablePower_DivingMask, K2Node_CreateDelegate_OutputDelegate) == 0x000008, "Member 'EquipablePower_DivingMask_C_ExecuteUbergraph_EquipablePower_DivingMask::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(EquipablePower_DivingMask_C_ExecuteUbergraph_EquipablePower_DivingMask, CallFunc_GetGameInstanceSubsystem_ReturnValue) == 0x000018, "Member 'EquipablePower_DivingMask_C_ExecuteUbergraph_EquipablePower_DivingMask::CallFunc_GetGameInstanceSubsystem_ReturnValue' has a wrong offset!");
static_assert(offsetof(EquipablePower_DivingMask_C_ExecuteUbergraph_EquipablePower_DivingMask, CallFunc_HasAuthority_ReturnValue) == 0x000020, "Member 'EquipablePower_DivingMask_C_ExecuteUbergraph_EquipablePower_DivingMask::CallFunc_HasAuthority_ReturnValue' has a wrong offset!");
static_assert(offsetof(EquipablePower_DivingMask_C_ExecuteUbergraph_EquipablePower_DivingMask, CallFunc_GetOwner_ReturnValue) == 0x000028, "Member 'EquipablePower_DivingMask_C_ExecuteUbergraph_EquipablePower_DivingMask::CallFunc_GetOwner_ReturnValue' has a wrong offset!");
static_assert(offsetof(EquipablePower_DivingMask_C_ExecuteUbergraph_EquipablePower_DivingMask, K2Node_DynamicCast_AsCharacter_SCTBP) == 0x000030, "Member 'EquipablePower_DivingMask_C_ExecuteUbergraph_EquipablePower_DivingMask::K2Node_DynamicCast_AsCharacter_SCTBP' has a wrong offset!");
static_assert(offsetof(EquipablePower_DivingMask_C_ExecuteUbergraph_EquipablePower_DivingMask, K2Node_DynamicCast_bSuccess) == 0x000038, "Member 'EquipablePower_DivingMask_C_ExecuteUbergraph_EquipablePower_DivingMask::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(EquipablePower_DivingMask_C_ExecuteUbergraph_EquipablePower_DivingMask, K2Node_DynamicCast_AsCharacter) == 0x000040, "Member 'EquipablePower_DivingMask_C_ExecuteUbergraph_EquipablePower_DivingMask::K2Node_DynamicCast_AsCharacter' has a wrong offset!");
static_assert(offsetof(EquipablePower_DivingMask_C_ExecuteUbergraph_EquipablePower_DivingMask, K2Node_DynamicCast_bSuccess_1) == 0x000048, "Member 'EquipablePower_DivingMask_C_ExecuteUbergraph_EquipablePower_DivingMask::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(EquipablePower_DivingMask_C_ExecuteUbergraph_EquipablePower_DivingMask, K2Node_CustomEvent_UltimateDestiny) == 0x00004C, "Member 'EquipablePower_DivingMask_C_ExecuteUbergraph_EquipablePower_DivingMask::K2Node_CustomEvent_UltimateDestiny' has a wrong offset!");
static_assert(offsetof(EquipablePower_DivingMask_C_ExecuteUbergraph_EquipablePower_DivingMask, K2Node_CustomEvent_IsPersonoid) == 0x00005C, "Member 'EquipablePower_DivingMask_C_ExecuteUbergraph_EquipablePower_DivingMask::K2Node_CustomEvent_IsPersonoid' has a wrong offset!");
static_assert(offsetof(EquipablePower_DivingMask_C_ExecuteUbergraph_EquipablePower_DivingMask, CallFunc_GetHatID_OutputPin) == 0x000060, "Member 'EquipablePower_DivingMask_C_ExecuteUbergraph_EquipablePower_DivingMask::CallFunc_GetHatID_OutputPin' has a wrong offset!");

// Function EquipablePower_DivingMask.EquipablePower_DivingMask_C.On Character Destiny
// 0x0014 (0x0014 - 0x0000)
struct EquipablePower_DivingMask_C_On_Character_Destiny final
{
public:
	struct FDestiny                               UltimateDestiny;                                   // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)
	bool                                          IsPersonoid;                                       // 0x0010(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(EquipablePower_DivingMask_C_On_Character_Destiny) == 0x000004, "Wrong alignment on EquipablePower_DivingMask_C_On_Character_Destiny");
static_assert(sizeof(EquipablePower_DivingMask_C_On_Character_Destiny) == 0x000014, "Wrong size on EquipablePower_DivingMask_C_On_Character_Destiny");
static_assert(offsetof(EquipablePower_DivingMask_C_On_Character_Destiny, UltimateDestiny) == 0x000000, "Member 'EquipablePower_DivingMask_C_On_Character_Destiny::UltimateDestiny' has a wrong offset!");
static_assert(offsetof(EquipablePower_DivingMask_C_On_Character_Destiny, IsPersonoid) == 0x000010, "Member 'EquipablePower_DivingMask_C_On_Character_Destiny::IsPersonoid' has a wrong offset!");

// Function EquipablePower_DivingMask.EquipablePower_DivingMask_C.OnRep_HatID
// 0x0040 (0x0040 - 0x0000)
struct EquipablePower_DivingMask_C_OnRep_HatID final
{
public:
	struct FEquipableStruct                       CallFunc_Array_Get_Item;                           // 0x0000(0x0040)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(EquipablePower_DivingMask_C_OnRep_HatID) == 0x000010, "Wrong alignment on EquipablePower_DivingMask_C_OnRep_HatID");
static_assert(sizeof(EquipablePower_DivingMask_C_OnRep_HatID) == 0x000040, "Wrong size on EquipablePower_DivingMask_C_OnRep_HatID");
static_assert(offsetof(EquipablePower_DivingMask_C_OnRep_HatID, CallFunc_Array_Get_Item) == 0x000000, "Member 'EquipablePower_DivingMask_C_OnRep_HatID::CallFunc_Array_Get_Item' has a wrong offset!");

// Function EquipablePower_DivingMask.EquipablePower_DivingMask_C.SetHatModel
// 0x0010 (0x0010 - 0x0000)
struct EquipablePower_DivingMask_C_SetHatModel final
{
public:
	class UStaticMesh*                            NewMesh;                                           // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_SetStaticMesh_ReturnValue;                // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(EquipablePower_DivingMask_C_SetHatModel) == 0x000008, "Wrong alignment on EquipablePower_DivingMask_C_SetHatModel");
static_assert(sizeof(EquipablePower_DivingMask_C_SetHatModel) == 0x000010, "Wrong size on EquipablePower_DivingMask_C_SetHatModel");
static_assert(offsetof(EquipablePower_DivingMask_C_SetHatModel, NewMesh) == 0x000000, "Member 'EquipablePower_DivingMask_C_SetHatModel::NewMesh' has a wrong offset!");
static_assert(offsetof(EquipablePower_DivingMask_C_SetHatModel, CallFunc_SetStaticMesh_ReturnValue) == 0x000008, "Member 'EquipablePower_DivingMask_C_SetHatModel::CallFunc_SetStaticMesh_ReturnValue' has a wrong offset!");

// Function EquipablePower_DivingMask.EquipablePower_DivingMask_C.UpdateTransforms
// 0x0050 (0x0050 - 0x0000)
struct EquipablePower_DivingMask_C_UpdateTransforms final
{
public:
	class FName                                   SocketName;                                        // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_8[0x8];                                        // 0x0008(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             RelativeTransform;                                 // 0x0010(0x0030)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor)
	class ACharacterSCTBP_C*                      K2Node_DynamicCast_AsCharacter_SCTBP;              // 0x0040(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(EquipablePower_DivingMask_C_UpdateTransforms) == 0x000010, "Wrong alignment on EquipablePower_DivingMask_C_UpdateTransforms");
static_assert(sizeof(EquipablePower_DivingMask_C_UpdateTransforms) == 0x000050, "Wrong size on EquipablePower_DivingMask_C_UpdateTransforms");
static_assert(offsetof(EquipablePower_DivingMask_C_UpdateTransforms, SocketName) == 0x000000, "Member 'EquipablePower_DivingMask_C_UpdateTransforms::SocketName' has a wrong offset!");
static_assert(offsetof(EquipablePower_DivingMask_C_UpdateTransforms, RelativeTransform) == 0x000010, "Member 'EquipablePower_DivingMask_C_UpdateTransforms::RelativeTransform' has a wrong offset!");
static_assert(offsetof(EquipablePower_DivingMask_C_UpdateTransforms, K2Node_DynamicCast_AsCharacter_SCTBP) == 0x000040, "Member 'EquipablePower_DivingMask_C_UpdateTransforms::K2Node_DynamicCast_AsCharacter_SCTBP' has a wrong offset!");
static_assert(offsetof(EquipablePower_DivingMask_C_UpdateTransforms, K2Node_DynamicCast_bSuccess) == 0x000048, "Member 'EquipablePower_DivingMask_C_UpdateTransforms::K2Node_DynamicCast_bSuccess' has a wrong offset!");

// Function EquipablePower_DivingMask.EquipablePower_DivingMask_C.GetHatID
// 0x0028 (0x0028 - 0x0000)
struct EquipablePower_DivingMask_C_GetHatID final
{
public:
	int32                                         OutputPin;                                         // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetPlayerID_Return_Value;                 // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UPlayerInfoGIS*                         CallFunc_GetGameInstanceSubsystem_ReturnValue;     // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Subtract_IntInt_ReturnValue;              // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_LoadPlayerInt_value;                      // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LoadPlayerInt_ReturnValue;                // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_21[0x3];                                       // 0x0021(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_RandomIntegerInRange_ReturnValue;         // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(EquipablePower_DivingMask_C_GetHatID) == 0x000008, "Wrong alignment on EquipablePower_DivingMask_C_GetHatID");
static_assert(sizeof(EquipablePower_DivingMask_C_GetHatID) == 0x000028, "Wrong size on EquipablePower_DivingMask_C_GetHatID");
static_assert(offsetof(EquipablePower_DivingMask_C_GetHatID, OutputPin) == 0x000000, "Member 'EquipablePower_DivingMask_C_GetHatID::OutputPin' has a wrong offset!");
static_assert(offsetof(EquipablePower_DivingMask_C_GetHatID, CallFunc_GetPlayerID_Return_Value) == 0x000004, "Member 'EquipablePower_DivingMask_C_GetHatID::CallFunc_GetPlayerID_Return_Value' has a wrong offset!");
static_assert(offsetof(EquipablePower_DivingMask_C_GetHatID, CallFunc_Array_Length_ReturnValue) == 0x000008, "Member 'EquipablePower_DivingMask_C_GetHatID::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(EquipablePower_DivingMask_C_GetHatID, CallFunc_GetGameInstanceSubsystem_ReturnValue) == 0x000010, "Member 'EquipablePower_DivingMask_C_GetHatID::CallFunc_GetGameInstanceSubsystem_ReturnValue' has a wrong offset!");
static_assert(offsetof(EquipablePower_DivingMask_C_GetHatID, CallFunc_Subtract_IntInt_ReturnValue) == 0x000018, "Member 'EquipablePower_DivingMask_C_GetHatID::CallFunc_Subtract_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(EquipablePower_DivingMask_C_GetHatID, CallFunc_LoadPlayerInt_value) == 0x00001C, "Member 'EquipablePower_DivingMask_C_GetHatID::CallFunc_LoadPlayerInt_value' has a wrong offset!");
static_assert(offsetof(EquipablePower_DivingMask_C_GetHatID, CallFunc_LoadPlayerInt_ReturnValue) == 0x000020, "Member 'EquipablePower_DivingMask_C_GetHatID::CallFunc_LoadPlayerInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(EquipablePower_DivingMask_C_GetHatID, CallFunc_RandomIntegerInRange_ReturnValue) == 0x000024, "Member 'EquipablePower_DivingMask_C_GetHatID::CallFunc_RandomIntegerInRange_ReturnValue' has a wrong offset!");

// Function EquipablePower_DivingMask.EquipablePower_DivingMask_C.GetPlayerID
// 0x0020 (0x0020 - 0x0000)
struct EquipablePower_DivingMask_C_GetPlayerID final
{
public:
	int32                                         Return_Value;                                      // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_GetOwner_ReturnValue;                     // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class APawn*                                  K2Node_DynamicCast_AsPawn;                         // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(EquipablePower_DivingMask_C_GetPlayerID) == 0x000008, "Wrong alignment on EquipablePower_DivingMask_C_GetPlayerID");
static_assert(sizeof(EquipablePower_DivingMask_C_GetPlayerID) == 0x000020, "Wrong size on EquipablePower_DivingMask_C_GetPlayerID");
static_assert(offsetof(EquipablePower_DivingMask_C_GetPlayerID, Return_Value) == 0x000000, "Member 'EquipablePower_DivingMask_C_GetPlayerID::Return_Value' has a wrong offset!");
static_assert(offsetof(EquipablePower_DivingMask_C_GetPlayerID, CallFunc_GetOwner_ReturnValue) == 0x000008, "Member 'EquipablePower_DivingMask_C_GetPlayerID::CallFunc_GetOwner_ReturnValue' has a wrong offset!");
static_assert(offsetof(EquipablePower_DivingMask_C_GetPlayerID, K2Node_DynamicCast_AsPawn) == 0x000010, "Member 'EquipablePower_DivingMask_C_GetPlayerID::K2Node_DynamicCast_AsPawn' has a wrong offset!");
static_assert(offsetof(EquipablePower_DivingMask_C_GetPlayerID, K2Node_DynamicCast_bSuccess) == 0x000018, "Member 'EquipablePower_DivingMask_C_GetPlayerID::K2Node_DynamicCast_bSuccess' has a wrong offset!");

}

