#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: InGameReportEntry

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "UMG_classes.hpp"


namespace SDK
{

// WidgetBlueprintGeneratedClass InGameReportEntry.InGameReportEntry_C
// 0x0040 (0x02A0 - 0x0260)
class UInGameReportEntry_C final : public UUserWidget
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0260(0x0008)(ZeroConstructor, Transient, DuplicateTransient, UObjectWrapper)
	class UButtonForLinkWI_C*                     ButtonForLinkWI;                                   // 0x0268(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UReportButtonWI_C*                      ReportButtonWI;                                    // 0x0270(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class FString                                 DisplayName;                                       // 0x0278(0x0010)(Edit, BlueprintVisible, ZeroConstructor, ExposeOnSpawn, HasGetValueTypeHash)
	class FString                                 AccelByteId;                                       // 0x0288(0x0010)(Edit, BlueprintVisible, ZeroConstructor, ExposeOnSpawn, HasGetValueTypeHash)
	int32                                         PlayerId;                                          // 0x0298(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_InGameReportEntry(int32 EntryPoint);
	void BndEvt__ButtonForLinkWI_K2Node_ComponentBoundEvent_1_Clicked__DelegateSignature();
	void BndEvt__ReportButtonWI_K2Node_ComponentBoundEvent_0_Clicked__DelegateSignature();
	void Construct();
	void SetNavigateUp(class UWidget* WidgetTargetLeft, class UWidget* WidgetTargetRight);
	void SetNavigateDown(class UWidget* WidgetTargetLeft, class UWidget* WidgetTargetRight);
	void GetWidgetLeft(class UWidget** WidgetLeft);
	void GetWidgetRight(class UWidget** WidgetRight);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"InGameReportEntry_C">();
	}
	static class UInGameReportEntry_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UInGameReportEntry_C>();
	}
};
static_assert(alignof(UInGameReportEntry_C) == 0x000008, "Wrong alignment on UInGameReportEntry_C");
static_assert(sizeof(UInGameReportEntry_C) == 0x0002A0, "Wrong size on UInGameReportEntry_C");
static_assert(offsetof(UInGameReportEntry_C, UberGraphFrame) == 0x000260, "Member 'UInGameReportEntry_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UInGameReportEntry_C, ButtonForLinkWI) == 0x000268, "Member 'UInGameReportEntry_C::ButtonForLinkWI' has a wrong offset!");
static_assert(offsetof(UInGameReportEntry_C, ReportButtonWI) == 0x000270, "Member 'UInGameReportEntry_C::ReportButtonWI' has a wrong offset!");
static_assert(offsetof(UInGameReportEntry_C, DisplayName) == 0x000278, "Member 'UInGameReportEntry_C::DisplayName' has a wrong offset!");
static_assert(offsetof(UInGameReportEntry_C, AccelByteId) == 0x000288, "Member 'UInGameReportEntry_C::AccelByteId' has a wrong offset!");
static_assert(offsetof(UInGameReportEntry_C, PlayerId) == 0x000298, "Member 'UInGameReportEntry_C::PlayerId' has a wrong offset!");

}

