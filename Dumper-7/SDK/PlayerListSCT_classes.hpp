#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: PlayerListSCT

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "UMG_structs.hpp"
#include "SCT_classes.hpp"


namespace SDK
{

// WidgetBlueprintGeneratedClass PlayerListSCT.PlayerListSCT_C
// 0x00A8 (0x0328 - 0x0280)
class UPlayerListSCT_C final : public UPlayerListWidget
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0280(0x0008)(ZeroConstructor, Transient, DuplicateTransient, UObjectWrapper)
	class UWidgetAnimation*                       FadeIn;                                            // 0x0288(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UCanvasPanel*                           Dynamic_CanvasPanel;                               // 0x0290(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class USafeZone*                              SafeZone_54;                                       // 0x0298(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	bool                                          Debugging;                                         // 0x02A0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2A1[0x7];                                      // 0x02A1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<float>                                 ListYPositions;                                    // 0x02A8(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	float                                         ItemSpacing;                                       // 0x02B8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2BC[0x4];                                      // 0x02BC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<int32, class UPlayerListEntrySCT_C*>     PlayerEntries;                                     // 0x02C0(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance, ContainsInstancedReference)
	bool                                          Lerping;                                           // 0x0310(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_311[0x3];                                      // 0x0311(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         OldPosition;                                       // 0x0314(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         StartMoveStamp;                                    // 0x0318(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MoveTime;                                          // 0x031C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         TargetYPosition;                                   // 0x0320(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsChangingLevel;                                   // 0x0324(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)

public:
	void ExecuteUbergraph_PlayerListSCT(int32 EntryPoint);
	void PreLevelChange();
	void PostLevelChange();
	void PlayerStateRemoved(class ASCTPlayerState* PlayerState);
	void PlayerStateAdded(class ASCTPlayerState* PlayerState);
	void ShowWidget(bool Visible);
	void Construct();
	void PreConstruct(bool IsDesignTime);
	void UpdateListOfPlayers(TArray<class APlayerState*>& PlayerArray);
	void UpdateListOfPlayersDesignTime(int32 Fake_Player_Count);
	void SortListOfPlayersByVotes();
	void LerpHelpText();
	void CleanupDynamicCanvasPanel();
	void DoLerpHelpText(float NewTargetYLocation);
	void Create_Y_Positions();
	bool IsOtherPlayerState(class ASCTPlayerState* PlayerState);
	void AddEntry(class ASCTPlayerState* PlayerState);
	void RemoveEntry(int32 PlayerId);
	void CreateChildElement(class ASCTPlayerState* PlayerState);
	void EnsureChildElementExists(class ASCTPlayerState* Player_State);
	void BindToChildElement(class ASCTPlayerState* PlayerState);
	void AddExistingPlayerStates();
	void RemoveExpiredEntries();
	void DestroyEntry(int32 ID);

	void TryGetEntryFromPlayerState(class ASCTPlayerState* Player_State, class UPlayerListEntrySCT_C** Entry, bool* Succeeded) const;
	void ContainsEntry(class ASCTPlayerState* Player_State, bool* Return_Value) const;

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"PlayerListSCT_C">();
	}
	static class UPlayerListSCT_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPlayerListSCT_C>();
	}
};
static_assert(alignof(UPlayerListSCT_C) == 0x000008, "Wrong alignment on UPlayerListSCT_C");
static_assert(sizeof(UPlayerListSCT_C) == 0x000328, "Wrong size on UPlayerListSCT_C");
static_assert(offsetof(UPlayerListSCT_C, UberGraphFrame) == 0x000280, "Member 'UPlayerListSCT_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UPlayerListSCT_C, FadeIn) == 0x000288, "Member 'UPlayerListSCT_C::FadeIn' has a wrong offset!");
static_assert(offsetof(UPlayerListSCT_C, Dynamic_CanvasPanel) == 0x000290, "Member 'UPlayerListSCT_C::Dynamic_CanvasPanel' has a wrong offset!");
static_assert(offsetof(UPlayerListSCT_C, SafeZone_54) == 0x000298, "Member 'UPlayerListSCT_C::SafeZone_54' has a wrong offset!");
static_assert(offsetof(UPlayerListSCT_C, Debugging) == 0x0002A0, "Member 'UPlayerListSCT_C::Debugging' has a wrong offset!");
static_assert(offsetof(UPlayerListSCT_C, ListYPositions) == 0x0002A8, "Member 'UPlayerListSCT_C::ListYPositions' has a wrong offset!");
static_assert(offsetof(UPlayerListSCT_C, ItemSpacing) == 0x0002B8, "Member 'UPlayerListSCT_C::ItemSpacing' has a wrong offset!");
static_assert(offsetof(UPlayerListSCT_C, PlayerEntries) == 0x0002C0, "Member 'UPlayerListSCT_C::PlayerEntries' has a wrong offset!");
static_assert(offsetof(UPlayerListSCT_C, Lerping) == 0x000310, "Member 'UPlayerListSCT_C::Lerping' has a wrong offset!");
static_assert(offsetof(UPlayerListSCT_C, OldPosition) == 0x000314, "Member 'UPlayerListSCT_C::OldPosition' has a wrong offset!");
static_assert(offsetof(UPlayerListSCT_C, StartMoveStamp) == 0x000318, "Member 'UPlayerListSCT_C::StartMoveStamp' has a wrong offset!");
static_assert(offsetof(UPlayerListSCT_C, MoveTime) == 0x00031C, "Member 'UPlayerListSCT_C::MoveTime' has a wrong offset!");
static_assert(offsetof(UPlayerListSCT_C, TargetYPosition) == 0x000320, "Member 'UPlayerListSCT_C::TargetYPosition' has a wrong offset!");
static_assert(offsetof(UPlayerListSCT_C, IsChangingLevel) == 0x000324, "Member 'UPlayerListSCT_C::IsChangingLevel' has a wrong offset!");

}

