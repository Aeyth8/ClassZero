#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: bp_ElectrifiedCable

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "CharacterColliderBP_classes.hpp"
#include "AkAudio_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass bp_ElectrifiedCable.bp_ElectrifiedCable_C
// 0x00B8 (0x0318 - 0x0260)
class Abp_ElectrifiedCable_C final : public ACharacterColliderBP_C
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame_bp_ElectrifiedCable_C;              // 0x0260(0x0008)(ZeroConstructor, Transient, DuplicateTransient, UObjectWrapper)
	class UAkComponent*                           Ak;                                                // 0x0268(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   SM_CableCeillingBox_1m2;                           // 0x0270(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   SM_CableCeillingBox_1m1;                           // 0x0278(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   SM_CableCeillingBox_corner;                        // 0x0280(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   SM_CableCeillingBox_1m;                            // 0x0288(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UParticleSystemComponent*               ConstantSparks;                                    // 0x0290(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USkeletalMeshComponent*                 Rope;                                              // 0x0298(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UDecalComponent*                        Decal;                                             // 0x02A0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UChildActorComponent*                   bp_LiquidTrigger;                                  // 0x02A8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   Cube;                                              // 0x02B0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   Hatch;                                             // 0x02B8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   DangerZone;                                        // 0x02C0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	bool                                          CharacterHit;                                      // 0x02C8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2C9[0x7];                                      // 0x02C9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class ACharacterSCTBP_C*>              EletrocutingCharacters;                            // 0x02D0(0x0010)(Edit, BlueprintVisible, Net, DisableEditOnTemplate, DisableEditOnInstance)
	bool                                          IsActive;                                          // 0x02E0(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor)
	uint8                                         Pad_2E1[0x3];                                      // 0x02E1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ArcTime;                                           // 0x02E4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Box_X;                                             // 0x02E8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Box_Y;                                             // 0x02EC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Box_Z;                                             // 0x02F0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CableBoxHeight;                                    // 0x02F4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CableBoxPos;                                       // 0x02F8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         DecalHeight;                                       // 0x02FC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CableImpulseMultiplier;                            // 0x0300(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          AlwaysSpawn;                                       // 0x0304(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_305[0x3];                                      // 0x0305(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class ACharacterSCTBP_C*                      ReleasingCharacter;                                // 0x0308(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CharacterInside;                                   // 0x0310(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor)

public:
	void ExecuteUbergraph_bp_ElectrifiedCable(int32 EntryPoint);
	void Audio_Electric_Cable_Zap_Character_Stop_Single();
	void Character_Exit(class ACharacterSCTBP_C* Character);
	void Character_Entered(class ACharacterSCTBP_C* Character);
	void Destroy_Surrounding_Buttons();
	void ResetCableZap();
	void Audio_Electric_Cable_Zap_Character_Stop();
	void Audio_Electric_Cable_Zap_Character_Start();
	void Audio_Electric_Cable_Disable();
	void Audio_Electric_Cable_Enable();
	void Audio_Electric_Cable_Zap();
	void ReceiveBeginPlay();
	void StopCosmetics();
	void CancelStoppingArcTimer();
	void StopArc();
	void StartArcing();
	void StoppingArc();
	void Arc();
	void UserConstructionScript();
	void OnRep_IsActive();
	void RescueAllEletrocutingCharacters();
	void ImpulseCable();
	void RescueEletrocutingCharacter(const class ACharacterSCTBP_C*& Item);
	void ElectricityLineTrace(struct FVector* OutHit_ImpactPoint, bool* Success);
	void OnRep_CharacterInside();
	void Server_LatentInteractionSuccess(bool InteractingActorIsCharacter, class AActor* InteractingInstigator, class AActor* InteractionFacilitator, bool* Void);
	void InteractReleased(bool InteractingActorIsCharacter, class AActor* InteractingActor, bool* Void);
	void GetCanInteract(bool IsSimulated, bool InteractingActorIsCharacter, class AActor* InteractingActor, bool* CanInteract);
	void InteractPressed(bool InteractingActorIsCharacter, class AActor* InteractingActor, const struct FHitResult& InteractedHitResult, bool* Success);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"bp_ElectrifiedCable_C">();
	}
	static class Abp_ElectrifiedCable_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<Abp_ElectrifiedCable_C>();
	}
};
static_assert(alignof(Abp_ElectrifiedCable_C) == 0x000008, "Wrong alignment on Abp_ElectrifiedCable_C");
static_assert(sizeof(Abp_ElectrifiedCable_C) == 0x000318, "Wrong size on Abp_ElectrifiedCable_C");
static_assert(offsetof(Abp_ElectrifiedCable_C, UberGraphFrame_bp_ElectrifiedCable_C) == 0x000260, "Member 'Abp_ElectrifiedCable_C::UberGraphFrame_bp_ElectrifiedCable_C' has a wrong offset!");
static_assert(offsetof(Abp_ElectrifiedCable_C, Ak) == 0x000268, "Member 'Abp_ElectrifiedCable_C::Ak' has a wrong offset!");
static_assert(offsetof(Abp_ElectrifiedCable_C, SM_CableCeillingBox_1m2) == 0x000270, "Member 'Abp_ElectrifiedCable_C::SM_CableCeillingBox_1m2' has a wrong offset!");
static_assert(offsetof(Abp_ElectrifiedCable_C, SM_CableCeillingBox_1m1) == 0x000278, "Member 'Abp_ElectrifiedCable_C::SM_CableCeillingBox_1m1' has a wrong offset!");
static_assert(offsetof(Abp_ElectrifiedCable_C, SM_CableCeillingBox_corner) == 0x000280, "Member 'Abp_ElectrifiedCable_C::SM_CableCeillingBox_corner' has a wrong offset!");
static_assert(offsetof(Abp_ElectrifiedCable_C, SM_CableCeillingBox_1m) == 0x000288, "Member 'Abp_ElectrifiedCable_C::SM_CableCeillingBox_1m' has a wrong offset!");
static_assert(offsetof(Abp_ElectrifiedCable_C, ConstantSparks) == 0x000290, "Member 'Abp_ElectrifiedCable_C::ConstantSparks' has a wrong offset!");
static_assert(offsetof(Abp_ElectrifiedCable_C, Rope) == 0x000298, "Member 'Abp_ElectrifiedCable_C::Rope' has a wrong offset!");
static_assert(offsetof(Abp_ElectrifiedCable_C, Decal) == 0x0002A0, "Member 'Abp_ElectrifiedCable_C::Decal' has a wrong offset!");
static_assert(offsetof(Abp_ElectrifiedCable_C, bp_LiquidTrigger) == 0x0002A8, "Member 'Abp_ElectrifiedCable_C::bp_LiquidTrigger' has a wrong offset!");
static_assert(offsetof(Abp_ElectrifiedCable_C, Cube) == 0x0002B0, "Member 'Abp_ElectrifiedCable_C::Cube' has a wrong offset!");
static_assert(offsetof(Abp_ElectrifiedCable_C, Hatch) == 0x0002B8, "Member 'Abp_ElectrifiedCable_C::Hatch' has a wrong offset!");
static_assert(offsetof(Abp_ElectrifiedCable_C, DangerZone) == 0x0002C0, "Member 'Abp_ElectrifiedCable_C::DangerZone' has a wrong offset!");
static_assert(offsetof(Abp_ElectrifiedCable_C, CharacterHit) == 0x0002C8, "Member 'Abp_ElectrifiedCable_C::CharacterHit' has a wrong offset!");
static_assert(offsetof(Abp_ElectrifiedCable_C, EletrocutingCharacters) == 0x0002D0, "Member 'Abp_ElectrifiedCable_C::EletrocutingCharacters' has a wrong offset!");
static_assert(offsetof(Abp_ElectrifiedCable_C, IsActive) == 0x0002E0, "Member 'Abp_ElectrifiedCable_C::IsActive' has a wrong offset!");
static_assert(offsetof(Abp_ElectrifiedCable_C, ArcTime) == 0x0002E4, "Member 'Abp_ElectrifiedCable_C::ArcTime' has a wrong offset!");
static_assert(offsetof(Abp_ElectrifiedCable_C, Box_X) == 0x0002E8, "Member 'Abp_ElectrifiedCable_C::Box_X' has a wrong offset!");
static_assert(offsetof(Abp_ElectrifiedCable_C, Box_Y) == 0x0002EC, "Member 'Abp_ElectrifiedCable_C::Box_Y' has a wrong offset!");
static_assert(offsetof(Abp_ElectrifiedCable_C, Box_Z) == 0x0002F0, "Member 'Abp_ElectrifiedCable_C::Box_Z' has a wrong offset!");
static_assert(offsetof(Abp_ElectrifiedCable_C, CableBoxHeight) == 0x0002F4, "Member 'Abp_ElectrifiedCable_C::CableBoxHeight' has a wrong offset!");
static_assert(offsetof(Abp_ElectrifiedCable_C, CableBoxPos) == 0x0002F8, "Member 'Abp_ElectrifiedCable_C::CableBoxPos' has a wrong offset!");
static_assert(offsetof(Abp_ElectrifiedCable_C, DecalHeight) == 0x0002FC, "Member 'Abp_ElectrifiedCable_C::DecalHeight' has a wrong offset!");
static_assert(offsetof(Abp_ElectrifiedCable_C, CableImpulseMultiplier) == 0x000300, "Member 'Abp_ElectrifiedCable_C::CableImpulseMultiplier' has a wrong offset!");
static_assert(offsetof(Abp_ElectrifiedCable_C, AlwaysSpawn) == 0x000304, "Member 'Abp_ElectrifiedCable_C::AlwaysSpawn' has a wrong offset!");
static_assert(offsetof(Abp_ElectrifiedCable_C, ReleasingCharacter) == 0x000308, "Member 'Abp_ElectrifiedCable_C::ReleasingCharacter' has a wrong offset!");
static_assert(offsetof(Abp_ElectrifiedCable_C, CharacterInside) == 0x000310, "Member 'Abp_ElectrifiedCable_C::CharacterInside' has a wrong offset!");

}

