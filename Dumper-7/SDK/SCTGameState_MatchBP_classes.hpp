#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: SCTGameState_MatchBP

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "E_LevelVersion_structs.hpp"
#include "SCT_structs.hpp"
#include "SCT_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass SCTGameState_MatchBP.SCTGameState_MatchBP_C
// 0x0030 (0x0388 - 0x0358)
class ASCTGameState_MatchBP_C final : public ASCTGameState_Match
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0358(0x0008)(ZeroConstructor, Transient, DuplicateTransient, UObjectWrapper)
	class USceneComponent*                        DefaultSceneRoot;                                  // 0x0360(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	int32                                         PlayerNumber;                                      // 0x0368(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         PlayersConnected;                                  // 0x036C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_LevelVersion                                LevelVersion;                                      // 0x0370(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_371[0x7];                                      // 0x0371(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	FMulticastInlineDelegateProperty_             OnLevelVersionChanged;                             // 0x0378(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)

public:
	void OnLevelVersionChanged__DelegateSignature(E_LevelVersion NewLevelVersion);
	void ExecuteUbergraph_SCTGameState_MatchBP(int32 EntryPoint);
	void ReceiveBeginPlay();
	void ConnectionWindowExpired();
	void PlayerConnectedServer();
	void MatchEnded(const struct FMatchEndData& EndData);
	void K2_OnMatchStarted();
	void CreateIntroWidget();
	void InitializeClientOnly();
	void InitializeServerOnly();
	void Initialize();
	void OnRep_LevelVersion();
	void Set_Level_Version(E_LevelVersion LevelVersion_0);
	void BindToLevelVoting();
	void CreateLevelVoteWidget(float ServerTimeoutTime);
	void OnFinalLevelSelected(const struct FSelectedLevelData& SelectedLevel);
	void LevelOptionsChanged();

	void ResidentsWin(EEndConditions NewParam, bool* Return) const;

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"SCTGameState_MatchBP_C">();
	}
	static class ASCTGameState_MatchBP_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ASCTGameState_MatchBP_C>();
	}
};
static_assert(alignof(ASCTGameState_MatchBP_C) == 0x000008, "Wrong alignment on ASCTGameState_MatchBP_C");
static_assert(sizeof(ASCTGameState_MatchBP_C) == 0x000388, "Wrong size on ASCTGameState_MatchBP_C");
static_assert(offsetof(ASCTGameState_MatchBP_C, UberGraphFrame) == 0x000358, "Member 'ASCTGameState_MatchBP_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ASCTGameState_MatchBP_C, DefaultSceneRoot) == 0x000360, "Member 'ASCTGameState_MatchBP_C::DefaultSceneRoot' has a wrong offset!");
static_assert(offsetof(ASCTGameState_MatchBP_C, PlayerNumber) == 0x000368, "Member 'ASCTGameState_MatchBP_C::PlayerNumber' has a wrong offset!");
static_assert(offsetof(ASCTGameState_MatchBP_C, PlayersConnected) == 0x00036C, "Member 'ASCTGameState_MatchBP_C::PlayersConnected' has a wrong offset!");
static_assert(offsetof(ASCTGameState_MatchBP_C, LevelVersion) == 0x000370, "Member 'ASCTGameState_MatchBP_C::LevelVersion' has a wrong offset!");
static_assert(offsetof(ASCTGameState_MatchBP_C, OnLevelVersionChanged) == 0x000378, "Member 'ASCTGameState_MatchBP_C::OnLevelVersionChanged' has a wrong offset!");

}

