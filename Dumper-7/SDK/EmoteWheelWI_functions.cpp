#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: EmoteWheelWI

#include "Basic.hpp"

#include "EmoteWheelWI_classes.hpp"
#include "EmoteWheelWI_parameters.hpp"


namespace SDK
{

// Function EmoteWheelWI.EmoteWheelWI_C.UpdatePositionForPreviewer__DelegateSignature
// (Public, Delegate, BlueprintCallable, BlueprintEvent)

void UEmoteWheelWI_C::UpdatePositionForPreviewer__DelegateSignature()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("EmoteWheelWI_C", "UpdatePositionForPreviewer__DelegateSignature");

	UObject::ProcessEvent(Func, nullptr);
}


// Function EmoteWheelWI.EmoteWheelWI_C.ExecuteUbergraph_EmoteWheelWI
// (Final, UbergraphFunction, HasDefaults)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UEmoteWheelWI_C::ExecuteUbergraph_EmoteWheelWI(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("EmoteWheelWI_C", "ExecuteUbergraph_EmoteWheelWI");

	Params::EmoteWheelWI_C_ExecuteUbergraph_EmoteWheelWI Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function EmoteWheelWI.EmoteWheelWI_C.OnEmotesUsable
// (BlueprintCallable, BlueprintEvent)

void UEmoteWheelWI_C::OnEmotesUsable()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("EmoteWheelWI_C", "OnEmotesUsable");

	UObject::ProcessEvent(Func, nullptr);
}


// Function EmoteWheelWI.EmoteWheelWI_C.OnClientConnected
// (BlueprintCallable, BlueprintEvent)

void UEmoteWheelWI_C::OnClientConnected()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("EmoteWheelWI_C", "OnClientConnected");

	UObject::ProcessEvent(Func, nullptr);
}


// Function EmoteWheelWI.EmoteWheelWI_C.Input Action
// (BlueprintCallable, BlueprintEvent)

void UEmoteWheelWI_C::Input_Action()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("EmoteWheelWI_C", "Input Action");

	UObject::ProcessEvent(Func, nullptr);
}


// Function EmoteWheelWI.EmoteWheelWI_C.Destruct
// (BlueprintCosmetic, Event, Public, BlueprintEvent)

void UEmoteWheelWI_C::Destruct()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("EmoteWheelWI_C", "Destruct");

	UObject::ProcessEvent(Func, nullptr);
}


// Function EmoteWheelWI.EmoteWheelWI_C.Construct
// (BlueprintCosmetic, Event, Public, BlueprintEvent)

void UEmoteWheelWI_C::Construct()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("EmoteWheelWI_C", "Construct");

	UObject::ProcessEvent(Func, nullptr);
}


// Function EmoteWheelWI.EmoteWheelWI_C.Clear If Null
// (BlueprintCallable, BlueprintEvent)

void UEmoteWheelWI_C::Clear_If_Null()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("EmoteWheelWI_C", "Clear If Null");

	UObject::ProcessEvent(Func, nullptr);
}


// Function EmoteWheelWI.EmoteWheelWI_C.Tick
// (BlueprintCosmetic, Event, Public, BlueprintEvent)
// Parameters:
// struct FGeometry                        MyGeometry                                             (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
// float                                   InDeltaTime                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UEmoteWheelWI_C::Tick(const struct FGeometry& MyGeometry, float InDeltaTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("EmoteWheelWI_C", "Tick");

	Params::EmoteWheelWI_C_Tick Parms{};

	Parms.MyGeometry = std::move(MyGeometry);
	Parms.InDeltaTime = InDeltaTime;

	UObject::ProcessEvent(Func, &Parms);
}


// Function EmoteWheelWI.EmoteWheelWI_C.PreConstruct
// (BlueprintCosmetic, Event, Public, BlueprintEvent)
// Parameters:
// bool                                    IsDesignTime                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UEmoteWheelWI_C::PreConstruct(bool IsDesignTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("EmoteWheelWI_C", "PreConstruct");

	Params::EmoteWheelWI_C_PreConstruct Parms{};

	Parms.IsDesignTime = IsDesignTime;

	UObject::ProcessEvent(Func, &Parms);
}


// Function EmoteWheelWI.EmoteWheelWI_C.OnSuccess_F99502DC445644C7591DDEA58A6C9C13
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FFCTCloudCustomizationPayload    Payload                                                (BlueprintVisible, BlueprintReadOnly, Parm)
// int32                                   Code                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FString                           Message                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)

void UEmoteWheelWI_C::OnSuccess_F99502DC445644C7591DDEA58A6C9C13(const struct FFCTCloudCustomizationPayload& Payload, int32 Code, const class FString& Message)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("EmoteWheelWI_C", "OnSuccess_F99502DC445644C7591DDEA58A6C9C13");

	Params::EmoteWheelWI_C_OnSuccess_F99502DC445644C7591DDEA58A6C9C13 Parms{};

	Parms.Payload = std::move(Payload);
	Parms.Code = Code;
	Parms.Message = std::move(Message);

	UObject::ProcessEvent(Func, &Parms);
}


// Function EmoteWheelWI.EmoteWheelWI_C.OnError_F99502DC445644C7591DDEA58A6C9C13
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   Code                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FString                           Message                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)

void UEmoteWheelWI_C::OnError_F99502DC445644C7591DDEA58A6C9C13(int32 Code, const class FString& Message)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("EmoteWheelWI_C", "OnError_F99502DC445644C7591DDEA58A6C9C13");

	Params::EmoteWheelWI_C_OnError_F99502DC445644C7591DDEA58A6C9C13 Parms{};

	Parms.Code = Code;
	Parms.Message = std::move(Message);

	UObject::ProcessEvent(Func, &Parms);
}


// Function EmoteWheelWI.EmoteWheelWI_C.PiePermutation
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// float                                   DistanceFromCenter                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   Index_0                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   Return                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UEmoteWheelWI_C::PiePermutation(float DistanceFromCenter, int32 Index_0, int32* Return)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("EmoteWheelWI_C", "PiePermutation");

	Params::EmoteWheelWI_C_PiePermutation Parms{};

	Parms.DistanceFromCenter = DistanceFromCenter;
	Parms.Index_0 = Index_0;

	UObject::ProcessEvent(Func, &Parms);

	if (Return != nullptr)
		*Return = Parms.Return;
}


// Function EmoteWheelWI.EmoteWheelWI_C.UnhoverCurrentEntrySelection
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   EntryIndex                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UEmoteWheelWI_C::UnhoverCurrentEntrySelection(int32 EntryIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("EmoteWheelWI_C", "UnhoverCurrentEntrySelection");

	Params::EmoteWheelWI_C_UnhoverCurrentEntrySelection Parms{};

	Parms.EntryIndex = EntryIndex;

	UObject::ProcessEvent(Func, &Parms);
}


// Function EmoteWheelWI.EmoteWheelWI_C.HoverCurrentEntrySelection
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   EntryIndex                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UEmoteWheelWI_C::HoverCurrentEntrySelection(int32 EntryIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("EmoteWheelWI_C", "HoverCurrentEntrySelection");

	Params::EmoteWheelWI_C_HoverCurrentEntrySelection Parms{};

	Parms.EntryIndex = EntryIndex;

	UObject::ProcessEvent(Func, &Parms);
}


// Function EmoteWheelWI.EmoteWheelWI_C.GetCharacterVisibleItems
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// TArray<struct FItemDetails>             Return                                                 (Parm, OutParm)

void UEmoteWheelWI_C::GetCharacterVisibleItems(TArray<struct FItemDetails>* Return)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("EmoteWheelWI_C", "GetCharacterVisibleItems");

	Params::EmoteWheelWI_C_GetCharacterVisibleItems Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Return != nullptr)
		*Return = std::move(Parms.Return);
}


// Function EmoteWheelWI.EmoteWheelWI_C.GetVisibleEmotesAmount
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

int32 UEmoteWheelWI_C::GetVisibleEmotesAmount()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("EmoteWheelWI_C", "GetVisibleEmotesAmount");

	Params::EmoteWheelWI_C_GetVisibleEmotesAmount Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function EmoteWheelWI.EmoteWheelWI_C.CalculateAngle
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// int32                                   A                                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

float UEmoteWheelWI_C::CalculateAngle(int32 A)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("EmoteWheelWI_C", "CalculateAngle");

	Params::EmoteWheelWI_C_CalculateAngle Parms{};

	Parms.A = A;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function EmoteWheelWI.EmoteWheelWI_C.SetCanvasNoItemVisibility
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    NoItems                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UEmoteWheelWI_C::SetCanvasNoItemVisibility(bool* NoItems)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("EmoteWheelWI_C", "SetCanvasNoItemVisibility");

	Params::EmoteWheelWI_C_SetCanvasNoItemVisibility Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (NoItems != nullptr)
		*NoItems = Parms.NoItems;
}


// Function EmoteWheelWI.EmoteWheelWI_C.GetCursorOutOfAngle
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// float                                   Degree                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)

bool UEmoteWheelWI_C::GetCursorOutOfAngle(float Degree)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("EmoteWheelWI_C", "GetCursorOutOfAngle");

	Params::EmoteWheelWI_C_GetCursorOutOfAngle Parms{};

	Parms.Degree = Degree;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function EmoteWheelWI.EmoteWheelWI_C.SetupPieParameters
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<struct FS_Emote>                 TargetArray                                            (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)

void UEmoteWheelWI_C::SetupPieParameters(const TArray<struct FS_Emote>& TargetArray)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("EmoteWheelWI_C", "SetupPieParameters");

	Params::EmoteWheelWI_C_SetupPieParameters Parms{};

	Parms.TargetArray = std::move(TargetArray);

	UObject::ProcessEvent(Func, &Parms);
}


// Function EmoteWheelWI.EmoteWheelWI_C.GetCharacterEmotes
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// TArray<struct FS_Emote>                 PlayerEmotes                                           (Parm, OutParm)

void UEmoteWheelWI_C::GetCharacterEmotes(TArray<struct FS_Emote>* PlayerEmotes)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("EmoteWheelWI_C", "GetCharacterEmotes");

	Params::EmoteWheelWI_C_GetCharacterEmotes Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (PlayerEmotes != nullptr)
		*PlayerEmotes = std::move(Parms.PlayerEmotes);
}


// Function EmoteWheelWI.EmoteWheelWI_C.GetOnly1PieEntry
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)

bool UEmoteWheelWI_C::GetOnly1PieEntry()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("EmoteWheelWI_C", "GetOnly1PieEntry");

	Params::EmoteWheelWI_C_GetOnly1PieEntry Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function EmoteWheelWI.EmoteWheelWI_C.TryGetPowerInSlot
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// bool                                    Slot1Empty                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
// class UPower*                           Power                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UEmoteWheelWI_C::TryGetPowerInSlot(bool* Slot1Empty, class UPower** Power)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("EmoteWheelWI_C", "TryGetPowerInSlot");

	Params::EmoteWheelWI_C_TryGetPowerInSlot Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Slot1Empty != nullptr)
		*Slot1Empty = Parms.Slot1Empty;

	if (Power != nullptr)
		*Power = Parms.Power;
}


// Function EmoteWheelWI.EmoteWheelWI_C.UpdateMousePositionForPreviewer
// (Public, BlueprintCallable, BlueprintEvent)

void UEmoteWheelWI_C::UpdateMousePositionForPreviewer()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("EmoteWheelWI_C", "UpdateMousePositionForPreviewer");

	UObject::ProcessEvent(Func, nullptr);
}


// Function EmoteWheelWI.EmoteWheelWI_C.GetHoveredEmoteCustomizationData
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// int32                                   SelectedIndex                                          (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FS_Emote                         Details                                                (Parm, OutParm, HasGetValueTypeHash)
// struct FVector2D                        Position                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UEmoteWheelWI_C::GetHoveredEmoteCustomizationData(int32* SelectedIndex, struct FS_Emote* Details, struct FVector2D* Position)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("EmoteWheelWI_C", "GetHoveredEmoteCustomizationData");

	Params::EmoteWheelWI_C_GetHoveredEmoteCustomizationData Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (SelectedIndex != nullptr)
		*SelectedIndex = Parms.SelectedIndex;

	if (Details != nullptr)
		*Details = std::move(Parms.Details);

	if (Position != nullptr)
		*Position = std::move(Parms.Position);
}


// Function EmoteWheelWI.EmoteWheelWI_C.SetPreviewerByTag
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FName                             Tag                                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UEmoteWheelWI_C::SetPreviewerByTag(class FName Tag)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("EmoteWheelWI_C", "SetPreviewerByTag");

	Params::EmoteWheelWI_C_SetPreviewerByTag Parms{};

	Parms.Tag = Tag;

	UObject::ProcessEvent(Func, &Parms);
}

}

