#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: Agenda_UseItem

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "SCT_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass Agenda_UseItem.Agenda_UseItem_C
// 0x0088 (0x00D0 - 0x0048)
class UAgenda_UseItem_C final : public UAgendaObject
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0048(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	TArray<class UClass*>                         PossibleItemTypes;                                 // 0x0050(0x0010)(Edit, BlueprintVisible)
	class UClass*                                 SelectedItem;                                      // 0x0060(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAgendaControllerPowerEvent*            AddedEvent;                                        // 0x0068(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          HasScanner;                                        // 0x0070(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_71[0x7];                                       // 0x0071(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UAgendaCoopPowerEvent*                  ItemUsed;                                          // 0x0078(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TMap<class UClass*, class FString>            Verbs;                                             // 0x0080(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance)

public:
	void ExecuteUbergraph_Agenda_UseItem(int32 EntryPoint);
	void K2_Initialize();
	void GetRandomItem(class UClass** Output);
	void SelectItem();
	void OnPowerAdded(class APlayerController* Controller_0, class UClass* Power);
	void OnPowerUsed(class APlayerController* InstigatorController, class APlayerController* TargetController, class UClass* PowerType);

	class FString GetDescription() const;
	class FString GetProgression() const;
	void GetObtainScannerDescription(class FString* Result) const;
	void GetScanDescription(class FString* Result) const;
	void GetVerb(class FString* Value) const;

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"Agenda_UseItem_C">();
	}
	static class UAgenda_UseItem_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAgenda_UseItem_C>();
	}
};
static_assert(alignof(UAgenda_UseItem_C) == 0x000008, "Wrong alignment on UAgenda_UseItem_C");
static_assert(sizeof(UAgenda_UseItem_C) == 0x0000D0, "Wrong size on UAgenda_UseItem_C");
static_assert(offsetof(UAgenda_UseItem_C, UberGraphFrame) == 0x000048, "Member 'UAgenda_UseItem_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UAgenda_UseItem_C, PossibleItemTypes) == 0x000050, "Member 'UAgenda_UseItem_C::PossibleItemTypes' has a wrong offset!");
static_assert(offsetof(UAgenda_UseItem_C, SelectedItem) == 0x000060, "Member 'UAgenda_UseItem_C::SelectedItem' has a wrong offset!");
static_assert(offsetof(UAgenda_UseItem_C, AddedEvent) == 0x000068, "Member 'UAgenda_UseItem_C::AddedEvent' has a wrong offset!");
static_assert(offsetof(UAgenda_UseItem_C, HasScanner) == 0x000070, "Member 'UAgenda_UseItem_C::HasScanner' has a wrong offset!");
static_assert(offsetof(UAgenda_UseItem_C, ItemUsed) == 0x000078, "Member 'UAgenda_UseItem_C::ItemUsed' has a wrong offset!");
static_assert(offsetof(UAgenda_UseItem_C, Verbs) == 0x000080, "Member 'UAgenda_UseItem_C::Verbs' has a wrong offset!");

}

