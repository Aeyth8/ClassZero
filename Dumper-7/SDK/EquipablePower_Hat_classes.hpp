#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: EquipablePower_Hat

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "EquipableStruct_structs.hpp"
#include "SCT_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass EquipablePower_Hat.EquipablePower_Hat_C
// 0x0048 (0x0280 - 0x0238)
class AEquipablePower_Hat_C final : public AEquipablePower
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0238(0x0008)(ZeroConstructor, Transient, DuplicateTransient, UObjectWrapper)
	class USceneComponent*                        FireLocation;                                      // 0x0240(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   StaticMesh;                                        // 0x0248(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        DefaultSceneRoot;                                  // 0x0250(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	int32                                         HatID;                                             // 0x0258(0x0004)(Edit, BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	uint8                                         Pad_25C[0x4];                                      // 0x025C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ACharacter*                             CharacterPlaceholder;                              // 0x0260(0x0008)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	bool                                          HatHiddenInGame;                                   // 0x0268(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor)
	uint8                                         Pad_269[0x7];                                      // 0x0269(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FEquipableStruct>               Equipables;                                        // 0x0270(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)

public:
	void ExecuteUbergraph_EquipablePower_Hat(int32 EntryPoint);
	void On_Character_Destiny(const struct FDestiny& UltimateDestiny, bool IsPersonoid);
	void Initialize();
	void Activate();
	void OnRep_HatID();
	void SetHatModel(class UStaticMesh* NewMesh);
	void UpdateTransforms(class FName SocketName, const struct FTransform& RelativeTransform);
	void OnRep_HatHiddenInGame();

	void GetHatID(int32* OutputPin) const;
	void GetPlayerID(int32* Return_Value) const;

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"EquipablePower_Hat_C">();
	}
	static class AEquipablePower_Hat_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<AEquipablePower_Hat_C>();
	}
};
static_assert(alignof(AEquipablePower_Hat_C) == 0x000008, "Wrong alignment on AEquipablePower_Hat_C");
static_assert(sizeof(AEquipablePower_Hat_C) == 0x000280, "Wrong size on AEquipablePower_Hat_C");
static_assert(offsetof(AEquipablePower_Hat_C, UberGraphFrame) == 0x000238, "Member 'AEquipablePower_Hat_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(AEquipablePower_Hat_C, FireLocation) == 0x000240, "Member 'AEquipablePower_Hat_C::FireLocation' has a wrong offset!");
static_assert(offsetof(AEquipablePower_Hat_C, StaticMesh) == 0x000248, "Member 'AEquipablePower_Hat_C::StaticMesh' has a wrong offset!");
static_assert(offsetof(AEquipablePower_Hat_C, DefaultSceneRoot) == 0x000250, "Member 'AEquipablePower_Hat_C::DefaultSceneRoot' has a wrong offset!");
static_assert(offsetof(AEquipablePower_Hat_C, HatID) == 0x000258, "Member 'AEquipablePower_Hat_C::HatID' has a wrong offset!");
static_assert(offsetof(AEquipablePower_Hat_C, CharacterPlaceholder) == 0x000260, "Member 'AEquipablePower_Hat_C::CharacterPlaceholder' has a wrong offset!");
static_assert(offsetof(AEquipablePower_Hat_C, HatHiddenInGame) == 0x000268, "Member 'AEquipablePower_Hat_C::HatHiddenInGame' has a wrong offset!");
static_assert(offsetof(AEquipablePower_Hat_C, Equipables) == 0x000270, "Member 'AEquipablePower_Hat_C::Equipables' has a wrong offset!");

}

