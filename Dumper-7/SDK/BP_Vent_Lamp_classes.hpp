#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_Vent_Lamp

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "Engine_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_Vent_Lamp.BP_Vent_Lamp_C
// 0x0068 (0x0298 - 0x0230)
class ABP_Vent_Lamp_C final : public AStaticMeshActor
{
public:
	class UPointLightComponent*                   LightBlades;                                       // 0x0230(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	class UAkComponent*                           Ak;                                                // 0x0238(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	class USpotLightComponent*                    SpotLight_Down;                                    // 0x0240(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	class UStaticMeshComponent*                   RotatingFanBlades;                                 // 0x0248(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	float                                         Intensity;                                         // 0x0250(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_254[0x4];                                      // 0x0254(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UPointLightComponent*                   PointLight;                                        // 0x0258(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           LightColor;                                        // 0x0260(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USpotLightComponent*                    SpotLight;                                         // 0x0270(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         OuterCone;                                         // 0x0278(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Temperature;                                       // 0x027C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         InnerCone;                                         // 0x0280(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Radius;                                            // 0x0284(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               EmissiveMaterial;                                  // 0x0288(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          EmergencyControlled;                               // 0x0290(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Rotate;                                            // 0x0291(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)

public:
	void UserConstructionScript();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_Vent_Lamp_C">();
	}
	static class ABP_Vent_Lamp_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_Vent_Lamp_C>();
	}
};
static_assert(alignof(ABP_Vent_Lamp_C) == 0x000008, "Wrong alignment on ABP_Vent_Lamp_C");
static_assert(sizeof(ABP_Vent_Lamp_C) == 0x000298, "Wrong size on ABP_Vent_Lamp_C");
static_assert(offsetof(ABP_Vent_Lamp_C, LightBlades) == 0x000230, "Member 'ABP_Vent_Lamp_C::LightBlades' has a wrong offset!");
static_assert(offsetof(ABP_Vent_Lamp_C, Ak) == 0x000238, "Member 'ABP_Vent_Lamp_C::Ak' has a wrong offset!");
static_assert(offsetof(ABP_Vent_Lamp_C, SpotLight_Down) == 0x000240, "Member 'ABP_Vent_Lamp_C::SpotLight_Down' has a wrong offset!");
static_assert(offsetof(ABP_Vent_Lamp_C, RotatingFanBlades) == 0x000248, "Member 'ABP_Vent_Lamp_C::RotatingFanBlades' has a wrong offset!");
static_assert(offsetof(ABP_Vent_Lamp_C, Intensity) == 0x000250, "Member 'ABP_Vent_Lamp_C::Intensity' has a wrong offset!");
static_assert(offsetof(ABP_Vent_Lamp_C, PointLight) == 0x000258, "Member 'ABP_Vent_Lamp_C::PointLight' has a wrong offset!");
static_assert(offsetof(ABP_Vent_Lamp_C, LightColor) == 0x000260, "Member 'ABP_Vent_Lamp_C::LightColor' has a wrong offset!");
static_assert(offsetof(ABP_Vent_Lamp_C, SpotLight) == 0x000270, "Member 'ABP_Vent_Lamp_C::SpotLight' has a wrong offset!");
static_assert(offsetof(ABP_Vent_Lamp_C, OuterCone) == 0x000278, "Member 'ABP_Vent_Lamp_C::OuterCone' has a wrong offset!");
static_assert(offsetof(ABP_Vent_Lamp_C, Temperature) == 0x00027C, "Member 'ABP_Vent_Lamp_C::Temperature' has a wrong offset!");
static_assert(offsetof(ABP_Vent_Lamp_C, InnerCone) == 0x000280, "Member 'ABP_Vent_Lamp_C::InnerCone' has a wrong offset!");
static_assert(offsetof(ABP_Vent_Lamp_C, Radius) == 0x000284, "Member 'ABP_Vent_Lamp_C::Radius' has a wrong offset!");
static_assert(offsetof(ABP_Vent_Lamp_C, EmissiveMaterial) == 0x000288, "Member 'ABP_Vent_Lamp_C::EmissiveMaterial' has a wrong offset!");
static_assert(offsetof(ABP_Vent_Lamp_C, EmergencyControlled) == 0x000290, "Member 'ABP_Vent_Lamp_C::EmergencyControlled' has a wrong offset!");
static_assert(offsetof(ABP_Vent_Lamp_C, Rotate) == 0x000291, "Member 'ABP_Vent_Lamp_C::Rotate' has a wrong offset!");

}

