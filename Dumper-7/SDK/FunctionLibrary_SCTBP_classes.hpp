#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: FunctionLibrary_SCTBP

#include "Basic.hpp"

#include "Engine_classes.hpp"
#include "SCT_structs.hpp"
#include "E_PickupAudioSource_structs.hpp"
#include "AkAudio_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass FunctionLibrary_SCTBP.FunctionLibrary_SCTBP_C
// 0x0000 (0x0028 - 0x0028)
class UFunctionLibrary_SCTBP_C final : public UBlueprintFunctionLibrary
{
public:
	static void RunFireForgetProgressbar(float Duration, const class FString& OptionalDescriptor, bool Reverse, class UObject* __WorldContext);
	static void CancelFireForgetProgressbar(class UObject* __WorldContext);
	static struct FActiveGameplayEffectHandle LockActorMovement(class AActor* Target, class UObject* __WorldContext);
	static void UnlockActorMovement(class AActor* Target, class UObject* __WorldContext);
	static void PostMessageSelfSCT(float Duration, const class FText& Text, class UObject* __WorldContext);
	static void AddScoreSCT(class FName DataTableRowName, bool IsEndScenario__IgnoreDataTable_, int32 EndScenarioScore, class UObject* PlayerState, class UObject* __WorldContext);
	static void GetPlayerStatesSCT(class UObject* __WorldContext, TArray<class ASCTPlayerState_MatchBP_C*>* SCT_Match_PlayerStates);
	static void PostMessageSpecifiedControllerSCT(float Duration, const class FText& Text, class APlayerController* PlayerController, class UObject* __WorldContext);
	static void RunFireForgetProgressbarSpecific(float Duration, const class FString& OptionalDescriptor, class UObject* PlayerController, class UObject* __WorldContext);
	static void CancelFireForgetProgressbarSpecific(class UObject* PlayerController, class UObject* __WorldContext);
	static void GetTutorialDataFromRowName(class FName RowName, class UObject* __WorldContext, struct FS_TutorialContent* Out_Row);
	static void GetRandomGeneratorClass(const TMap<class UClass*, int32>& WeightMap, class UObject* __WorldContext, class UClass** OutputPin);
	static void Play_Sound_2D_Wise(class UAkAudioEvent* AkEvent, class UObject* __WorldContext);
	static void GetCurrentLevelEnum(class UObject* __WorldContext, EMapName* Level);
	static void AddKarmaPoints(class APlayerState* PlayerState, class FName DataTableRowName, class UObject* __WorldContext);
	static void GetAKEventFromSource(class UPickupComponentBC_C* PickupComponent, const class FString& String, E_PickupAudioSource FromSource, class UObject* __WorldContext, class UAkAudioEvent** AkAudioEvent);

	static void Get_SCT_Game_State(class UObject* __WorldContext, class ASCTGameState** Game_State);
	static void GetPlayerState(int32 Player_ID, class UObject* __WorldContext, class ASCTPlayerState_MatchBP_C** Array_Element);
	static void Get_Project_Version_FCT(class UObject* __WorldContext, class FText* Project_Version_FCT);
	static void GetPersonoidInformationComponent(bool Print_Warning, class UObject* __WorldContext, class UPersonoidInformationComponent** OutputPin);
	static void GetLocalPlayerState(class UObject* __WorldContext, class ASCTPlayerState** AsSCTPlayer_State);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"FunctionLibrary_SCTBP_C">();
	}
	static class UFunctionLibrary_SCTBP_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFunctionLibrary_SCTBP_C>();
	}
};
static_assert(alignof(UFunctionLibrary_SCTBP_C) == 0x000008, "Wrong alignment on UFunctionLibrary_SCTBP_C");
static_assert(sizeof(UFunctionLibrary_SCTBP_C) == 0x000028, "Wrong size on UFunctionLibrary_SCTBP_C");

}

