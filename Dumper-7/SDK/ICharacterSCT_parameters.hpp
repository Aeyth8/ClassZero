#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: ICharacterSCT

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "SCT_structs.hpp"
#include "PassengerLogFactType_structs.hpp"


namespace SDK::Params
{

// Function ICharacterSCT.ICharacterSCT_C.RagdollCharacterBPI
// 0x0018 (0x0018 - 0x0000)
struct ICharacterSCT_C_RagdollCharacterBPI final
{
public:
	bool                                          ToRagdoll;                                         // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Duration;                                          // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                OptionalImpulse;                                   // 0x0008(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Force;                                             // 0x0014(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(ICharacterSCT_C_RagdollCharacterBPI) == 0x000004, "Wrong alignment on ICharacterSCT_C_RagdollCharacterBPI");
static_assert(sizeof(ICharacterSCT_C_RagdollCharacterBPI) == 0x000018, "Wrong size on ICharacterSCT_C_RagdollCharacterBPI");
static_assert(offsetof(ICharacterSCT_C_RagdollCharacterBPI, ToRagdoll) == 0x000000, "Member 'ICharacterSCT_C_RagdollCharacterBPI::ToRagdoll' has a wrong offset!");
static_assert(offsetof(ICharacterSCT_C_RagdollCharacterBPI, Duration) == 0x000004, "Member 'ICharacterSCT_C_RagdollCharacterBPI::Duration' has a wrong offset!");
static_assert(offsetof(ICharacterSCT_C_RagdollCharacterBPI, OptionalImpulse) == 0x000008, "Member 'ICharacterSCT_C_RagdollCharacterBPI::OptionalImpulse' has a wrong offset!");
static_assert(offsetof(ICharacterSCT_C_RagdollCharacterBPI, Force) == 0x000014, "Member 'ICharacterSCT_C_RagdollCharacterBPI::Force' has a wrong offset!");

// Function ICharacterSCT.ICharacterSCT_C.SetAimingStateBPI
// 0x0002 (0x0002 - 0x0000)
struct ICharacterSCT_C_SetAimingStateBPI final
{
public:
	bool                                          Aiming;                                            // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         AimType;                                           // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ICharacterSCT_C_SetAimingStateBPI) == 0x000001, "Wrong alignment on ICharacterSCT_C_SetAimingStateBPI");
static_assert(sizeof(ICharacterSCT_C_SetAimingStateBPI) == 0x000002, "Wrong size on ICharacterSCT_C_SetAimingStateBPI");
static_assert(offsetof(ICharacterSCT_C_SetAimingStateBPI, Aiming) == 0x000000, "Member 'ICharacterSCT_C_SetAimingStateBPI::Aiming' has a wrong offset!");
static_assert(offsetof(ICharacterSCT_C_SetAimingStateBPI, AimType) == 0x000001, "Member 'ICharacterSCT_C_SetAimingStateBPI::AimType' has a wrong offset!");

// Function ICharacterSCT.ICharacterSCT_C.GetPlayerNameBPI
// 0x0010 (0x0010 - 0x0000)
struct ICharacterSCT_C_GetPlayerNameBPI final
{
public:
	class FString                                 Name_0;                                            // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash)
};
static_assert(alignof(ICharacterSCT_C_GetPlayerNameBPI) == 0x000008, "Wrong alignment on ICharacterSCT_C_GetPlayerNameBPI");
static_assert(sizeof(ICharacterSCT_C_GetPlayerNameBPI) == 0x000010, "Wrong size on ICharacterSCT_C_GetPlayerNameBPI");
static_assert(offsetof(ICharacterSCT_C_GetPlayerNameBPI, Name_0) == 0x000000, "Member 'ICharacterSCT_C_GetPlayerNameBPI::Name_0' has a wrong offset!");

// Function ICharacterSCT.ICharacterSCT_C.IsPersonoidBPI
// 0x0001 (0x0001 - 0x0000)
struct ICharacterSCT_C_IsPersonoidBPI final
{
public:
	bool                                          IsPersonoid;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(ICharacterSCT_C_IsPersonoidBPI) == 0x000001, "Wrong alignment on ICharacterSCT_C_IsPersonoidBPI");
static_assert(sizeof(ICharacterSCT_C_IsPersonoidBPI) == 0x000001, "Wrong size on ICharacterSCT_C_IsPersonoidBPI");
static_assert(offsetof(ICharacterSCT_C_IsPersonoidBPI, IsPersonoid) == 0x000000, "Member 'ICharacterSCT_C_IsPersonoidBPI::IsPersonoid' has a wrong offset!");

// Function ICharacterSCT.ICharacterSCT_C.GetHeldLogInfoBPI
// 0x0020 (0x0020 - 0x0000)
struct ICharacterSCT_C_GetHeldLogInfoBPI final
{
public:
	EPassengerLogFactType                         FactType;                                          // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FPlayerData>                    Players;                                           // 0x0008(0x0010)(Parm, OutParm)
	bool                                          HasLog;                                            // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(ICharacterSCT_C_GetHeldLogInfoBPI) == 0x000008, "Wrong alignment on ICharacterSCT_C_GetHeldLogInfoBPI");
static_assert(sizeof(ICharacterSCT_C_GetHeldLogInfoBPI) == 0x000020, "Wrong size on ICharacterSCT_C_GetHeldLogInfoBPI");
static_assert(offsetof(ICharacterSCT_C_GetHeldLogInfoBPI, FactType) == 0x000000, "Member 'ICharacterSCT_C_GetHeldLogInfoBPI::FactType' has a wrong offset!");
static_assert(offsetof(ICharacterSCT_C_GetHeldLogInfoBPI, Players) == 0x000008, "Member 'ICharacterSCT_C_GetHeldLogInfoBPI::Players' has a wrong offset!");
static_assert(offsetof(ICharacterSCT_C_GetHeldLogInfoBPI, HasLog) == 0x000018, "Member 'ICharacterSCT_C_GetHeldLogInfoBPI::HasLog' has a wrong offset!");

// Function ICharacterSCT.ICharacterSCT_C.IsAliveBPI
// 0x0001 (0x0001 - 0x0000)
struct ICharacterSCT_C_IsAliveBPI final
{
public:
	bool                                          Alive;                                             // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(ICharacterSCT_C_IsAliveBPI) == 0x000001, "Wrong alignment on ICharacterSCT_C_IsAliveBPI");
static_assert(sizeof(ICharacterSCT_C_IsAliveBPI) == 0x000001, "Wrong size on ICharacterSCT_C_IsAliveBPI");
static_assert(offsetof(ICharacterSCT_C_IsAliveBPI, Alive) == 0x000000, "Member 'ICharacterSCT_C_IsAliveBPI::Alive' has a wrong offset!");

// Function ICharacterSCT.ICharacterSCT_C.EliminationVoteBPI
// 0x0018 (0x0018 - 0x0000)
struct ICharacterSCT_C_EliminationVoteBPI final
{
public:
	class AActor*                                 AirlockTarget;                                     // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ACharacter*                             VotedCharacter;                                    // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ACharacter*                             VotingCharacter;                                   // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ICharacterSCT_C_EliminationVoteBPI) == 0x000008, "Wrong alignment on ICharacterSCT_C_EliminationVoteBPI");
static_assert(sizeof(ICharacterSCT_C_EliminationVoteBPI) == 0x000018, "Wrong size on ICharacterSCT_C_EliminationVoteBPI");
static_assert(offsetof(ICharacterSCT_C_EliminationVoteBPI, AirlockTarget) == 0x000000, "Member 'ICharacterSCT_C_EliminationVoteBPI::AirlockTarget' has a wrong offset!");
static_assert(offsetof(ICharacterSCT_C_EliminationVoteBPI, VotedCharacter) == 0x000008, "Member 'ICharacterSCT_C_EliminationVoteBPI::VotedCharacter' has a wrong offset!");
static_assert(offsetof(ICharacterSCT_C_EliminationVoteBPI, VotingCharacter) == 0x000010, "Member 'ICharacterSCT_C_EliminationVoteBPI::VotingCharacter' has a wrong offset!");

// Function ICharacterSCT.ICharacterSCT_C.TrustVoteBPI
// 0x0018 (0x0018 - 0x0000)
struct ICharacterSCT_C_TrustVoteBPI final
{
public:
	class AActor*                                 TargetAirlock;                                     // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Yes;                                               // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ACharacter*                             VotingCharacter;                                   // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ICharacterSCT_C_TrustVoteBPI) == 0x000008, "Wrong alignment on ICharacterSCT_C_TrustVoteBPI");
static_assert(sizeof(ICharacterSCT_C_TrustVoteBPI) == 0x000018, "Wrong size on ICharacterSCT_C_TrustVoteBPI");
static_assert(offsetof(ICharacterSCT_C_TrustVoteBPI, TargetAirlock) == 0x000000, "Member 'ICharacterSCT_C_TrustVoteBPI::TargetAirlock' has a wrong offset!");
static_assert(offsetof(ICharacterSCT_C_TrustVoteBPI, Yes) == 0x000008, "Member 'ICharacterSCT_C_TrustVoteBPI::Yes' has a wrong offset!");
static_assert(offsetof(ICharacterSCT_C_TrustVoteBPI, VotingCharacter) == 0x000010, "Member 'ICharacterSCT_C_TrustVoteBPI::VotingCharacter' has a wrong offset!");

// Function ICharacterSCT.ICharacterSCT_C.PassengerLogVoteBPI
// 0x0018 (0x0018 - 0x0000)
struct ICharacterSCT_C_PassengerLogVoteBPI final
{
public:
	class AActor*                                 AirlockTarget;                                     // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ACharacter*                             TargetCharacter;                                   // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ACharacter*                             VotingCharacter;                                   // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ICharacterSCT_C_PassengerLogVoteBPI) == 0x000008, "Wrong alignment on ICharacterSCT_C_PassengerLogVoteBPI");
static_assert(sizeof(ICharacterSCT_C_PassengerLogVoteBPI) == 0x000018, "Wrong size on ICharacterSCT_C_PassengerLogVoteBPI");
static_assert(offsetof(ICharacterSCT_C_PassengerLogVoteBPI, AirlockTarget) == 0x000000, "Member 'ICharacterSCT_C_PassengerLogVoteBPI::AirlockTarget' has a wrong offset!");
static_assert(offsetof(ICharacterSCT_C_PassengerLogVoteBPI, TargetCharacter) == 0x000008, "Member 'ICharacterSCT_C_PassengerLogVoteBPI::TargetCharacter' has a wrong offset!");
static_assert(offsetof(ICharacterSCT_C_PassengerLogVoteBPI, VotingCharacter) == 0x000010, "Member 'ICharacterSCT_C_PassengerLogVoteBPI::VotingCharacter' has a wrong offset!");

// Function ICharacterSCT.ICharacterSCT_C.SetDestinyBPI
// 0x0010 (0x0010 - 0x0000)
struct ICharacterSCT_C_SetDestinyBPI final
{
public:
	EFate                                         Fate;                                              // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                Impulse;                                           // 0x0004(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ICharacterSCT_C_SetDestinyBPI) == 0x000004, "Wrong alignment on ICharacterSCT_C_SetDestinyBPI");
static_assert(sizeof(ICharacterSCT_C_SetDestinyBPI) == 0x000010, "Wrong size on ICharacterSCT_C_SetDestinyBPI");
static_assert(offsetof(ICharacterSCT_C_SetDestinyBPI, Fate) == 0x000000, "Member 'ICharacterSCT_C_SetDestinyBPI::Fate' has a wrong offset!");
static_assert(offsetof(ICharacterSCT_C_SetDestinyBPI, Impulse) == 0x000004, "Member 'ICharacterSCT_C_SetDestinyBPI::Impulse' has a wrong offset!");

// Function ICharacterSCT.ICharacterSCT_C.IsFemaleBPI
// 0x0001 (0x0001 - 0x0000)
struct ICharacterSCT_C_IsFemaleBPI final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
};
static_assert(alignof(ICharacterSCT_C_IsFemaleBPI) == 0x000001, "Wrong alignment on ICharacterSCT_C_IsFemaleBPI");
static_assert(sizeof(ICharacterSCT_C_IsFemaleBPI) == 0x000001, "Wrong size on ICharacterSCT_C_IsFemaleBPI");
static_assert(offsetof(ICharacterSCT_C_IsFemaleBPI, ReturnValue) == 0x000000, "Member 'ICharacterSCT_C_IsFemaleBPI::ReturnValue' has a wrong offset!");

// Function ICharacterSCT.ICharacterSCT_C.TeleportLocationRotationBPI
// 0x0018 (0x0018 - 0x0000)
struct ICharacterSCT_C_TeleportLocationRotationBPI final
{
public:
	struct FVector                                TargetLocation;                                    // 0x0000(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               TargetRotation;                                    // 0x000C(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(ICharacterSCT_C_TeleportLocationRotationBPI) == 0x000004, "Wrong alignment on ICharacterSCT_C_TeleportLocationRotationBPI");
static_assert(sizeof(ICharacterSCT_C_TeleportLocationRotationBPI) == 0x000018, "Wrong size on ICharacterSCT_C_TeleportLocationRotationBPI");
static_assert(offsetof(ICharacterSCT_C_TeleportLocationRotationBPI, TargetLocation) == 0x000000, "Member 'ICharacterSCT_C_TeleportLocationRotationBPI::TargetLocation' has a wrong offset!");
static_assert(offsetof(ICharacterSCT_C_TeleportLocationRotationBPI, TargetRotation) == 0x00000C, "Member 'ICharacterSCT_C_TeleportLocationRotationBPI::TargetRotation' has a wrong offset!");

// Function ICharacterSCT.ICharacterSCT_C.GetAbilitySystemComponentBPI
// 0x0008 (0x0008 - 0x0000)
struct ICharacterSCT_C_GetAbilitySystemComponentBPI final
{
public:
	class UAbilitySystemComponent*                ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ICharacterSCT_C_GetAbilitySystemComponentBPI) == 0x000008, "Wrong alignment on ICharacterSCT_C_GetAbilitySystemComponentBPI");
static_assert(sizeof(ICharacterSCT_C_GetAbilitySystemComponentBPI) == 0x000008, "Wrong size on ICharacterSCT_C_GetAbilitySystemComponentBPI");
static_assert(offsetof(ICharacterSCT_C_GetAbilitySystemComponentBPI, ReturnValue) == 0x000000, "Member 'ICharacterSCT_C_GetAbilitySystemComponentBPI::ReturnValue' has a wrong offset!");

// Function ICharacterSCT.ICharacterSCT_C.AddAlcoholBPI
// 0x0008 (0x0008 - 0x0000)
struct ICharacterSCT_C_AddAlcoholBPI final
{
public:
	float                                         InputValue;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Delay;                                             // 0x0004(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(ICharacterSCT_C_AddAlcoholBPI) == 0x000004, "Wrong alignment on ICharacterSCT_C_AddAlcoholBPI");
static_assert(sizeof(ICharacterSCT_C_AddAlcoholBPI) == 0x000008, "Wrong size on ICharacterSCT_C_AddAlcoholBPI");
static_assert(offsetof(ICharacterSCT_C_AddAlcoholBPI, InputValue) == 0x000000, "Member 'ICharacterSCT_C_AddAlcoholBPI::InputValue' has a wrong offset!");
static_assert(offsetof(ICharacterSCT_C_AddAlcoholBPI, Delay) == 0x000004, "Member 'ICharacterSCT_C_AddAlcoholBPI::Delay' has a wrong offset!");

// Function ICharacterSCT.ICharacterSCT_C.GetPortrait
// 0x0008 (0x0008 - 0x0000)
struct ICharacterSCT_C_GetPortrait final
{
public:
	class UTexture2D*                             ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ICharacterSCT_C_GetPortrait) == 0x000008, "Wrong alignment on ICharacterSCT_C_GetPortrait");
static_assert(sizeof(ICharacterSCT_C_GetPortrait) == 0x000008, "Wrong size on ICharacterSCT_C_GetPortrait");
static_assert(offsetof(ICharacterSCT_C_GetPortrait, ReturnValue) == 0x000000, "Member 'ICharacterSCT_C_GetPortrait::ReturnValue' has a wrong offset!");

// Function ICharacterSCT.ICharacterSCT_C.GetHomingTargetBPI
// 0x0008 (0x0008 - 0x0000)
struct ICharacterSCT_C_GetHomingTargetBPI final
{
public:
	class USceneComponent*                        ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ICharacterSCT_C_GetHomingTargetBPI) == 0x000008, "Wrong alignment on ICharacterSCT_C_GetHomingTargetBPI");
static_assert(sizeof(ICharacterSCT_C_GetHomingTargetBPI) == 0x000008, "Wrong size on ICharacterSCT_C_GetHomingTargetBPI");
static_assert(offsetof(ICharacterSCT_C_GetHomingTargetBPI, ReturnValue) == 0x000000, "Member 'ICharacterSCT_C_GetHomingTargetBPI::ReturnValue' has a wrong offset!");

// Function ICharacterSCT.ICharacterSCT_C.DisplayAirlockWidgetBPI
// 0x0001 (0x0001 - 0x0000)
struct ICharacterSCT_C_DisplayAirlockWidgetBPI final
{
public:
	bool                                          Show;                                              // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(ICharacterSCT_C_DisplayAirlockWidgetBPI) == 0x000001, "Wrong alignment on ICharacterSCT_C_DisplayAirlockWidgetBPI");
static_assert(sizeof(ICharacterSCT_C_DisplayAirlockWidgetBPI) == 0x000001, "Wrong size on ICharacterSCT_C_DisplayAirlockWidgetBPI");
static_assert(offsetof(ICharacterSCT_C_DisplayAirlockWidgetBPI, Show) == 0x000000, "Member 'ICharacterSCT_C_DisplayAirlockWidgetBPI::Show' has a wrong offset!");

// Function ICharacterSCT.ICharacterSCT_C.IsPlayerBlocked
// 0x0010 (0x0010 - 0x0000)
struct ICharacterSCT_C_IsPlayerBlocked final
{
public:
	class APlayerState*                           Player;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bLocked;                                           // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(ICharacterSCT_C_IsPlayerBlocked) == 0x000008, "Wrong alignment on ICharacterSCT_C_IsPlayerBlocked");
static_assert(sizeof(ICharacterSCT_C_IsPlayerBlocked) == 0x000010, "Wrong size on ICharacterSCT_C_IsPlayerBlocked");
static_assert(offsetof(ICharacterSCT_C_IsPlayerBlocked, Player) == 0x000000, "Member 'ICharacterSCT_C_IsPlayerBlocked::Player' has a wrong offset!");
static_assert(offsetof(ICharacterSCT_C_IsPlayerBlocked, bLocked) == 0x000008, "Member 'ICharacterSCT_C_IsPlayerBlocked::bLocked' has a wrong offset!");

// Function ICharacterSCT.ICharacterSCT_C.IsPlayerConsoleCommunicationBlocked
// 0x0010 (0x0010 - 0x0000)
struct ICharacterSCT_C_IsPlayerConsoleCommunicationBlocked final
{
public:
	class APlayerState*                           Player;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bLocked;                                           // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(ICharacterSCT_C_IsPlayerConsoleCommunicationBlocked) == 0x000008, "Wrong alignment on ICharacterSCT_C_IsPlayerConsoleCommunicationBlocked");
static_assert(sizeof(ICharacterSCT_C_IsPlayerConsoleCommunicationBlocked) == 0x000010, "Wrong size on ICharacterSCT_C_IsPlayerConsoleCommunicationBlocked");
static_assert(offsetof(ICharacterSCT_C_IsPlayerConsoleCommunicationBlocked, Player) == 0x000000, "Member 'ICharacterSCT_C_IsPlayerConsoleCommunicationBlocked::Player' has a wrong offset!");
static_assert(offsetof(ICharacterSCT_C_IsPlayerConsoleCommunicationBlocked, bLocked) == 0x000008, "Member 'ICharacterSCT_C_IsPlayerConsoleCommunicationBlocked::bLocked' has a wrong offset!");

}

