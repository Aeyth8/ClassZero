#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BPFL_AAS

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "Struct_AAS_Modifier_structs.hpp"
#include "Struct_AAS_AsteroidDefaults_structs.hpp"
#include "Struct_AAS_Parameters_structs.hpp"


namespace SDK::Params
{

// Function BPFL_AAS.BPFL_AAS_C.Clamp Vector
// 0x0078 (0x0078 - 0x0000)
struct BPFL_AAS_C_Clamp_Vector final
{
public:
	struct FVector                                Value;                                             // 0x0000(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Min;                                               // 0x000C(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Max;                                               // 0x0018(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                __WorldContext;                                    // 0x0028(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                ReturnValue;                                       // 0x0030(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_X;                            // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y;                            // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z;                            // 0x0044(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_X_1;                          // 0x0048(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y_1;                          // 0x004C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z_1;                          // 0x0050(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_X_2;                          // 0x0054(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y_2;                          // 0x0058(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z_2;                          // 0x005C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_FClamp_ReturnValue;                       // 0x0060(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_FClamp_ReturnValue_1;                     // 0x0064(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_FClamp_ReturnValue_2;                     // 0x0068(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue;                   // 0x006C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPFL_AAS_C_Clamp_Vector) == 0x000008, "Wrong alignment on BPFL_AAS_C_Clamp_Vector");
static_assert(sizeof(BPFL_AAS_C_Clamp_Vector) == 0x000078, "Wrong size on BPFL_AAS_C_Clamp_Vector");
static_assert(offsetof(BPFL_AAS_C_Clamp_Vector, Value) == 0x000000, "Member 'BPFL_AAS_C_Clamp_Vector::Value' has a wrong offset!");
static_assert(offsetof(BPFL_AAS_C_Clamp_Vector, Min) == 0x00000C, "Member 'BPFL_AAS_C_Clamp_Vector::Min' has a wrong offset!");
static_assert(offsetof(BPFL_AAS_C_Clamp_Vector, Max) == 0x000018, "Member 'BPFL_AAS_C_Clamp_Vector::Max' has a wrong offset!");
static_assert(offsetof(BPFL_AAS_C_Clamp_Vector, __WorldContext) == 0x000028, "Member 'BPFL_AAS_C_Clamp_Vector::__WorldContext' has a wrong offset!");
static_assert(offsetof(BPFL_AAS_C_Clamp_Vector, ReturnValue) == 0x000030, "Member 'BPFL_AAS_C_Clamp_Vector::ReturnValue' has a wrong offset!");
static_assert(offsetof(BPFL_AAS_C_Clamp_Vector, CallFunc_BreakVector_X) == 0x00003C, "Member 'BPFL_AAS_C_Clamp_Vector::CallFunc_BreakVector_X' has a wrong offset!");
static_assert(offsetof(BPFL_AAS_C_Clamp_Vector, CallFunc_BreakVector_Y) == 0x000040, "Member 'BPFL_AAS_C_Clamp_Vector::CallFunc_BreakVector_Y' has a wrong offset!");
static_assert(offsetof(BPFL_AAS_C_Clamp_Vector, CallFunc_BreakVector_Z) == 0x000044, "Member 'BPFL_AAS_C_Clamp_Vector::CallFunc_BreakVector_Z' has a wrong offset!");
static_assert(offsetof(BPFL_AAS_C_Clamp_Vector, CallFunc_BreakVector_X_1) == 0x000048, "Member 'BPFL_AAS_C_Clamp_Vector::CallFunc_BreakVector_X_1' has a wrong offset!");
static_assert(offsetof(BPFL_AAS_C_Clamp_Vector, CallFunc_BreakVector_Y_1) == 0x00004C, "Member 'BPFL_AAS_C_Clamp_Vector::CallFunc_BreakVector_Y_1' has a wrong offset!");
static_assert(offsetof(BPFL_AAS_C_Clamp_Vector, CallFunc_BreakVector_Z_1) == 0x000050, "Member 'BPFL_AAS_C_Clamp_Vector::CallFunc_BreakVector_Z_1' has a wrong offset!");
static_assert(offsetof(BPFL_AAS_C_Clamp_Vector, CallFunc_BreakVector_X_2) == 0x000054, "Member 'BPFL_AAS_C_Clamp_Vector::CallFunc_BreakVector_X_2' has a wrong offset!");
static_assert(offsetof(BPFL_AAS_C_Clamp_Vector, CallFunc_BreakVector_Y_2) == 0x000058, "Member 'BPFL_AAS_C_Clamp_Vector::CallFunc_BreakVector_Y_2' has a wrong offset!");
static_assert(offsetof(BPFL_AAS_C_Clamp_Vector, CallFunc_BreakVector_Z_2) == 0x00005C, "Member 'BPFL_AAS_C_Clamp_Vector::CallFunc_BreakVector_Z_2' has a wrong offset!");
static_assert(offsetof(BPFL_AAS_C_Clamp_Vector, CallFunc_FClamp_ReturnValue) == 0x000060, "Member 'BPFL_AAS_C_Clamp_Vector::CallFunc_FClamp_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPFL_AAS_C_Clamp_Vector, CallFunc_FClamp_ReturnValue_1) == 0x000064, "Member 'BPFL_AAS_C_Clamp_Vector::CallFunc_FClamp_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BPFL_AAS_C_Clamp_Vector, CallFunc_FClamp_ReturnValue_2) == 0x000068, "Member 'BPFL_AAS_C_Clamp_Vector::CallFunc_FClamp_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BPFL_AAS_C_Clamp_Vector, CallFunc_MakeVector_ReturnValue) == 0x00006C, "Member 'BPFL_AAS_C_Clamp_Vector::CallFunc_MakeVector_ReturnValue' has a wrong offset!");

// Function BPFL_AAS.BPFL_AAS_C.Make Randomized Asteroid Transform
// 0x0180 (0x0180 - 0x0000)
struct BPFL_AAS_C_Make_Randomized_Asteroid_Transform final
{
public:
	struct FRandomStream                          Random_Stream;                                     // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor)
	struct FVector                                Location;                                          // 0x0008(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_14[0xC];                                       // 0x0014(0x000C)(Fixing Size After Last Property [ Dumper-7 ])
	struct FStruct_AAS_AsteroidDefaults           Asteroid_Defaults;                                 // 0x0020(0x0050)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FStruct_AAS_Parameters                 Parameters;                                        // 0x0070(0x0034)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_A4[0x4];                                       // 0x00A4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                __WorldContext;                                    // 0x00A8(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTransform                             Transform;                                         // 0x00B0(0x0030)(Parm, OutParm, IsPlainOldData, NoDestructor)
	float                                         CallFunc_BreakVector_X;                            // 0x00E0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y;                            // 0x00E4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z;                            // 0x00E8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_X_1;                          // 0x00EC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y_1;                          // 0x00F0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z_1;                          // 0x00F4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_RandomFloatInRangeFromStream_ReturnValue; // 0x00F8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Random_Vector_in_Range_from_Stream_ReturnValue; // 0x00FC(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue;                   // 0x0108(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Max__Vector__ReturnValue;                 // 0x0114(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_SelectVector_ReturnValue;                 // 0x0120(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Random_Vector_in_Range_from_Stream_ReturnValue_1; // 0x012C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_VectorToRotator_Rotator;                  // 0x0138(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_144[0xC];                                      // 0x0144(0x000C)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CallFunc_MakeTransform_ReturnValue;                // 0x0150(0x0030)(IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPFL_AAS_C_Make_Randomized_Asteroid_Transform) == 0x000010, "Wrong alignment on BPFL_AAS_C_Make_Randomized_Asteroid_Transform");
static_assert(sizeof(BPFL_AAS_C_Make_Randomized_Asteroid_Transform) == 0x000180, "Wrong size on BPFL_AAS_C_Make_Randomized_Asteroid_Transform");
static_assert(offsetof(BPFL_AAS_C_Make_Randomized_Asteroid_Transform, Random_Stream) == 0x000000, "Member 'BPFL_AAS_C_Make_Randomized_Asteroid_Transform::Random_Stream' has a wrong offset!");
static_assert(offsetof(BPFL_AAS_C_Make_Randomized_Asteroid_Transform, Location) == 0x000008, "Member 'BPFL_AAS_C_Make_Randomized_Asteroid_Transform::Location' has a wrong offset!");
static_assert(offsetof(BPFL_AAS_C_Make_Randomized_Asteroid_Transform, Asteroid_Defaults) == 0x000020, "Member 'BPFL_AAS_C_Make_Randomized_Asteroid_Transform::Asteroid_Defaults' has a wrong offset!");
static_assert(offsetof(BPFL_AAS_C_Make_Randomized_Asteroid_Transform, Parameters) == 0x000070, "Member 'BPFL_AAS_C_Make_Randomized_Asteroid_Transform::Parameters' has a wrong offset!");
static_assert(offsetof(BPFL_AAS_C_Make_Randomized_Asteroid_Transform, __WorldContext) == 0x0000A8, "Member 'BPFL_AAS_C_Make_Randomized_Asteroid_Transform::__WorldContext' has a wrong offset!");
static_assert(offsetof(BPFL_AAS_C_Make_Randomized_Asteroid_Transform, Transform) == 0x0000B0, "Member 'BPFL_AAS_C_Make_Randomized_Asteroid_Transform::Transform' has a wrong offset!");
static_assert(offsetof(BPFL_AAS_C_Make_Randomized_Asteroid_Transform, CallFunc_BreakVector_X) == 0x0000E0, "Member 'BPFL_AAS_C_Make_Randomized_Asteroid_Transform::CallFunc_BreakVector_X' has a wrong offset!");
static_assert(offsetof(BPFL_AAS_C_Make_Randomized_Asteroid_Transform, CallFunc_BreakVector_Y) == 0x0000E4, "Member 'BPFL_AAS_C_Make_Randomized_Asteroid_Transform::CallFunc_BreakVector_Y' has a wrong offset!");
static_assert(offsetof(BPFL_AAS_C_Make_Randomized_Asteroid_Transform, CallFunc_BreakVector_Z) == 0x0000E8, "Member 'BPFL_AAS_C_Make_Randomized_Asteroid_Transform::CallFunc_BreakVector_Z' has a wrong offset!");
static_assert(offsetof(BPFL_AAS_C_Make_Randomized_Asteroid_Transform, CallFunc_BreakVector_X_1) == 0x0000EC, "Member 'BPFL_AAS_C_Make_Randomized_Asteroid_Transform::CallFunc_BreakVector_X_1' has a wrong offset!");
static_assert(offsetof(BPFL_AAS_C_Make_Randomized_Asteroid_Transform, CallFunc_BreakVector_Y_1) == 0x0000F0, "Member 'BPFL_AAS_C_Make_Randomized_Asteroid_Transform::CallFunc_BreakVector_Y_1' has a wrong offset!");
static_assert(offsetof(BPFL_AAS_C_Make_Randomized_Asteroid_Transform, CallFunc_BreakVector_Z_1) == 0x0000F4, "Member 'BPFL_AAS_C_Make_Randomized_Asteroid_Transform::CallFunc_BreakVector_Z_1' has a wrong offset!");
static_assert(offsetof(BPFL_AAS_C_Make_Randomized_Asteroid_Transform, CallFunc_RandomFloatInRangeFromStream_ReturnValue) == 0x0000F8, "Member 'BPFL_AAS_C_Make_Randomized_Asteroid_Transform::CallFunc_RandomFloatInRangeFromStream_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPFL_AAS_C_Make_Randomized_Asteroid_Transform, CallFunc_Random_Vector_in_Range_from_Stream_ReturnValue) == 0x0000FC, "Member 'BPFL_AAS_C_Make_Randomized_Asteroid_Transform::CallFunc_Random_Vector_in_Range_from_Stream_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPFL_AAS_C_Make_Randomized_Asteroid_Transform, CallFunc_MakeVector_ReturnValue) == 0x000108, "Member 'BPFL_AAS_C_Make_Randomized_Asteroid_Transform::CallFunc_MakeVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPFL_AAS_C_Make_Randomized_Asteroid_Transform, CallFunc_Max__Vector__ReturnValue) == 0x000114, "Member 'BPFL_AAS_C_Make_Randomized_Asteroid_Transform::CallFunc_Max__Vector__ReturnValue' has a wrong offset!");
static_assert(offsetof(BPFL_AAS_C_Make_Randomized_Asteroid_Transform, CallFunc_SelectVector_ReturnValue) == 0x000120, "Member 'BPFL_AAS_C_Make_Randomized_Asteroid_Transform::CallFunc_SelectVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPFL_AAS_C_Make_Randomized_Asteroid_Transform, CallFunc_Random_Vector_in_Range_from_Stream_ReturnValue_1) == 0x00012C, "Member 'BPFL_AAS_C_Make_Randomized_Asteroid_Transform::CallFunc_Random_Vector_in_Range_from_Stream_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BPFL_AAS_C_Make_Randomized_Asteroid_Transform, CallFunc_VectorToRotator_Rotator) == 0x000138, "Member 'BPFL_AAS_C_Make_Randomized_Asteroid_Transform::CallFunc_VectorToRotator_Rotator' has a wrong offset!");
static_assert(offsetof(BPFL_AAS_C_Make_Randomized_Asteroid_Transform, CallFunc_MakeTransform_ReturnValue) == 0x000150, "Member 'BPFL_AAS_C_Make_Randomized_Asteroid_Transform::CallFunc_MakeTransform_ReturnValue' has a wrong offset!");

// Function BPFL_AAS.BPFL_AAS_C.Random Rotator in Range from Stream
// 0x0068 (0x0068 - 0x0000)
struct BPFL_AAS_C_Random_Rotator_in_Range_from_Stream final
{
public:
	struct FRotator                               Min;                                               // 0x0000(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FRotator                               Max;                                               // 0x000C(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FRandomStream                          Stream;                                            // 0x0018(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor)
	class UObject*                                __WorldContext;                                    // 0x0020(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               ReturnValue;                                       // 0x0028(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
	float                                         CallFunc_BreakRotator_Roll;                        // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Pitch;                       // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Yaw;                         // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Roll_1;                      // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Pitch_1;                     // 0x0044(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Yaw_1;                       // 0x0048(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_RandomFloatInRangeFromStream_ReturnValue; // 0x004C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_RandomFloatInRangeFromStream_ReturnValue_1; // 0x0050(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_RandomFloatInRangeFromStream_ReturnValue_2; // 0x0054(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_MakeRotator_ReturnValue;                  // 0x0058(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPFL_AAS_C_Random_Rotator_in_Range_from_Stream) == 0x000008, "Wrong alignment on BPFL_AAS_C_Random_Rotator_in_Range_from_Stream");
static_assert(sizeof(BPFL_AAS_C_Random_Rotator_in_Range_from_Stream) == 0x000068, "Wrong size on BPFL_AAS_C_Random_Rotator_in_Range_from_Stream");
static_assert(offsetof(BPFL_AAS_C_Random_Rotator_in_Range_from_Stream, Min) == 0x000000, "Member 'BPFL_AAS_C_Random_Rotator_in_Range_from_Stream::Min' has a wrong offset!");
static_assert(offsetof(BPFL_AAS_C_Random_Rotator_in_Range_from_Stream, Max) == 0x00000C, "Member 'BPFL_AAS_C_Random_Rotator_in_Range_from_Stream::Max' has a wrong offset!");
static_assert(offsetof(BPFL_AAS_C_Random_Rotator_in_Range_from_Stream, Stream) == 0x000018, "Member 'BPFL_AAS_C_Random_Rotator_in_Range_from_Stream::Stream' has a wrong offset!");
static_assert(offsetof(BPFL_AAS_C_Random_Rotator_in_Range_from_Stream, __WorldContext) == 0x000020, "Member 'BPFL_AAS_C_Random_Rotator_in_Range_from_Stream::__WorldContext' has a wrong offset!");
static_assert(offsetof(BPFL_AAS_C_Random_Rotator_in_Range_from_Stream, ReturnValue) == 0x000028, "Member 'BPFL_AAS_C_Random_Rotator_in_Range_from_Stream::ReturnValue' has a wrong offset!");
static_assert(offsetof(BPFL_AAS_C_Random_Rotator_in_Range_from_Stream, CallFunc_BreakRotator_Roll) == 0x000034, "Member 'BPFL_AAS_C_Random_Rotator_in_Range_from_Stream::CallFunc_BreakRotator_Roll' has a wrong offset!");
static_assert(offsetof(BPFL_AAS_C_Random_Rotator_in_Range_from_Stream, CallFunc_BreakRotator_Pitch) == 0x000038, "Member 'BPFL_AAS_C_Random_Rotator_in_Range_from_Stream::CallFunc_BreakRotator_Pitch' has a wrong offset!");
static_assert(offsetof(BPFL_AAS_C_Random_Rotator_in_Range_from_Stream, CallFunc_BreakRotator_Yaw) == 0x00003C, "Member 'BPFL_AAS_C_Random_Rotator_in_Range_from_Stream::CallFunc_BreakRotator_Yaw' has a wrong offset!");
static_assert(offsetof(BPFL_AAS_C_Random_Rotator_in_Range_from_Stream, CallFunc_BreakRotator_Roll_1) == 0x000040, "Member 'BPFL_AAS_C_Random_Rotator_in_Range_from_Stream::CallFunc_BreakRotator_Roll_1' has a wrong offset!");
static_assert(offsetof(BPFL_AAS_C_Random_Rotator_in_Range_from_Stream, CallFunc_BreakRotator_Pitch_1) == 0x000044, "Member 'BPFL_AAS_C_Random_Rotator_in_Range_from_Stream::CallFunc_BreakRotator_Pitch_1' has a wrong offset!");
static_assert(offsetof(BPFL_AAS_C_Random_Rotator_in_Range_from_Stream, CallFunc_BreakRotator_Yaw_1) == 0x000048, "Member 'BPFL_AAS_C_Random_Rotator_in_Range_from_Stream::CallFunc_BreakRotator_Yaw_1' has a wrong offset!");
static_assert(offsetof(BPFL_AAS_C_Random_Rotator_in_Range_from_Stream, CallFunc_RandomFloatInRangeFromStream_ReturnValue) == 0x00004C, "Member 'BPFL_AAS_C_Random_Rotator_in_Range_from_Stream::CallFunc_RandomFloatInRangeFromStream_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPFL_AAS_C_Random_Rotator_in_Range_from_Stream, CallFunc_RandomFloatInRangeFromStream_ReturnValue_1) == 0x000050, "Member 'BPFL_AAS_C_Random_Rotator_in_Range_from_Stream::CallFunc_RandomFloatInRangeFromStream_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BPFL_AAS_C_Random_Rotator_in_Range_from_Stream, CallFunc_RandomFloatInRangeFromStream_ReturnValue_2) == 0x000054, "Member 'BPFL_AAS_C_Random_Rotator_in_Range_from_Stream::CallFunc_RandomFloatInRangeFromStream_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BPFL_AAS_C_Random_Rotator_in_Range_from_Stream, CallFunc_MakeRotator_ReturnValue) == 0x000058, "Member 'BPFL_AAS_C_Random_Rotator_in_Range_from_Stream::CallFunc_MakeRotator_ReturnValue' has a wrong offset!");

// Function BPFL_AAS.BPFL_AAS_C.Rotator + Rotator
// 0x0060 (0x0060 - 0x0000)
struct BPFL_AAS_C_Rotator_Plus_Rotator final
{
public:
	struct FRotator                               Rotator_A;                                         // 0x0000(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FRotator                               Rotator_B;                                         // 0x000C(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	class UObject*                                __WorldContext;                                    // 0x0018(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               ReturnValue;                                       // 0x0020(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
	float                                         CallFunc_BreakRotator_Roll;                        // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Pitch;                       // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Yaw;                         // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Roll_1;                      // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Pitch_1;                     // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Yaw_1;                       // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue;               // 0x0044(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue_1;             // 0x0048(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue_2;             // 0x004C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_MakeRotator_ReturnValue;                  // 0x0050(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPFL_AAS_C_Rotator_Plus_Rotator) == 0x000008, "Wrong alignment on BPFL_AAS_C_Rotator_Plus_Rotator");
static_assert(sizeof(BPFL_AAS_C_Rotator_Plus_Rotator) == 0x000060, "Wrong size on BPFL_AAS_C_Rotator_Plus_Rotator");
static_assert(offsetof(BPFL_AAS_C_Rotator_Plus_Rotator, Rotator_A) == 0x000000, "Member 'BPFL_AAS_C_Rotator_Plus_Rotator::Rotator_A' has a wrong offset!");
static_assert(offsetof(BPFL_AAS_C_Rotator_Plus_Rotator, Rotator_B) == 0x00000C, "Member 'BPFL_AAS_C_Rotator_Plus_Rotator::Rotator_B' has a wrong offset!");
static_assert(offsetof(BPFL_AAS_C_Rotator_Plus_Rotator, __WorldContext) == 0x000018, "Member 'BPFL_AAS_C_Rotator_Plus_Rotator::__WorldContext' has a wrong offset!");
static_assert(offsetof(BPFL_AAS_C_Rotator_Plus_Rotator, ReturnValue) == 0x000020, "Member 'BPFL_AAS_C_Rotator_Plus_Rotator::ReturnValue' has a wrong offset!");
static_assert(offsetof(BPFL_AAS_C_Rotator_Plus_Rotator, CallFunc_BreakRotator_Roll) == 0x00002C, "Member 'BPFL_AAS_C_Rotator_Plus_Rotator::CallFunc_BreakRotator_Roll' has a wrong offset!");
static_assert(offsetof(BPFL_AAS_C_Rotator_Plus_Rotator, CallFunc_BreakRotator_Pitch) == 0x000030, "Member 'BPFL_AAS_C_Rotator_Plus_Rotator::CallFunc_BreakRotator_Pitch' has a wrong offset!");
static_assert(offsetof(BPFL_AAS_C_Rotator_Plus_Rotator, CallFunc_BreakRotator_Yaw) == 0x000034, "Member 'BPFL_AAS_C_Rotator_Plus_Rotator::CallFunc_BreakRotator_Yaw' has a wrong offset!");
static_assert(offsetof(BPFL_AAS_C_Rotator_Plus_Rotator, CallFunc_BreakRotator_Roll_1) == 0x000038, "Member 'BPFL_AAS_C_Rotator_Plus_Rotator::CallFunc_BreakRotator_Roll_1' has a wrong offset!");
static_assert(offsetof(BPFL_AAS_C_Rotator_Plus_Rotator, CallFunc_BreakRotator_Pitch_1) == 0x00003C, "Member 'BPFL_AAS_C_Rotator_Plus_Rotator::CallFunc_BreakRotator_Pitch_1' has a wrong offset!");
static_assert(offsetof(BPFL_AAS_C_Rotator_Plus_Rotator, CallFunc_BreakRotator_Yaw_1) == 0x000040, "Member 'BPFL_AAS_C_Rotator_Plus_Rotator::CallFunc_BreakRotator_Yaw_1' has a wrong offset!");
static_assert(offsetof(BPFL_AAS_C_Rotator_Plus_Rotator, CallFunc_Add_FloatFloat_ReturnValue) == 0x000044, "Member 'BPFL_AAS_C_Rotator_Plus_Rotator::CallFunc_Add_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPFL_AAS_C_Rotator_Plus_Rotator, CallFunc_Add_FloatFloat_ReturnValue_1) == 0x000048, "Member 'BPFL_AAS_C_Rotator_Plus_Rotator::CallFunc_Add_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BPFL_AAS_C_Rotator_Plus_Rotator, CallFunc_Add_FloatFloat_ReturnValue_2) == 0x00004C, "Member 'BPFL_AAS_C_Rotator_Plus_Rotator::CallFunc_Add_FloatFloat_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BPFL_AAS_C_Rotator_Plus_Rotator, CallFunc_MakeRotator_ReturnValue) == 0x000050, "Member 'BPFL_AAS_C_Rotator_Plus_Rotator::CallFunc_MakeRotator_ReturnValue' has a wrong offset!");

// Function BPFL_AAS.BPFL_AAS_C.Random Vector in Range from Stream
// 0x0068 (0x0068 - 0x0000)
struct BPFL_AAS_C_Random_Vector_in_Range_from_Stream final
{
public:
	struct FVector                                Min;                                               // 0x0000(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Max;                                               // 0x000C(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRandomStream                          Stream;                                            // 0x0018(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor)
	class UObject*                                __WorldContext;                                    // 0x0020(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                ReturnValue;                                       // 0x0028(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_X;                            // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y;                            // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z;                            // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_X_1;                          // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y_1;                          // 0x0044(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z_1;                          // 0x0048(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_RandomFloatInRangeFromStream_ReturnValue; // 0x004C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_RandomFloatInRangeFromStream_ReturnValue_1; // 0x0050(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_RandomFloatInRangeFromStream_ReturnValue_2; // 0x0054(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue;                   // 0x0058(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPFL_AAS_C_Random_Vector_in_Range_from_Stream) == 0x000008, "Wrong alignment on BPFL_AAS_C_Random_Vector_in_Range_from_Stream");
static_assert(sizeof(BPFL_AAS_C_Random_Vector_in_Range_from_Stream) == 0x000068, "Wrong size on BPFL_AAS_C_Random_Vector_in_Range_from_Stream");
static_assert(offsetof(BPFL_AAS_C_Random_Vector_in_Range_from_Stream, Min) == 0x000000, "Member 'BPFL_AAS_C_Random_Vector_in_Range_from_Stream::Min' has a wrong offset!");
static_assert(offsetof(BPFL_AAS_C_Random_Vector_in_Range_from_Stream, Max) == 0x00000C, "Member 'BPFL_AAS_C_Random_Vector_in_Range_from_Stream::Max' has a wrong offset!");
static_assert(offsetof(BPFL_AAS_C_Random_Vector_in_Range_from_Stream, Stream) == 0x000018, "Member 'BPFL_AAS_C_Random_Vector_in_Range_from_Stream::Stream' has a wrong offset!");
static_assert(offsetof(BPFL_AAS_C_Random_Vector_in_Range_from_Stream, __WorldContext) == 0x000020, "Member 'BPFL_AAS_C_Random_Vector_in_Range_from_Stream::__WorldContext' has a wrong offset!");
static_assert(offsetof(BPFL_AAS_C_Random_Vector_in_Range_from_Stream, ReturnValue) == 0x000028, "Member 'BPFL_AAS_C_Random_Vector_in_Range_from_Stream::ReturnValue' has a wrong offset!");
static_assert(offsetof(BPFL_AAS_C_Random_Vector_in_Range_from_Stream, CallFunc_BreakVector_X) == 0x000034, "Member 'BPFL_AAS_C_Random_Vector_in_Range_from_Stream::CallFunc_BreakVector_X' has a wrong offset!");
static_assert(offsetof(BPFL_AAS_C_Random_Vector_in_Range_from_Stream, CallFunc_BreakVector_Y) == 0x000038, "Member 'BPFL_AAS_C_Random_Vector_in_Range_from_Stream::CallFunc_BreakVector_Y' has a wrong offset!");
static_assert(offsetof(BPFL_AAS_C_Random_Vector_in_Range_from_Stream, CallFunc_BreakVector_Z) == 0x00003C, "Member 'BPFL_AAS_C_Random_Vector_in_Range_from_Stream::CallFunc_BreakVector_Z' has a wrong offset!");
static_assert(offsetof(BPFL_AAS_C_Random_Vector_in_Range_from_Stream, CallFunc_BreakVector_X_1) == 0x000040, "Member 'BPFL_AAS_C_Random_Vector_in_Range_from_Stream::CallFunc_BreakVector_X_1' has a wrong offset!");
static_assert(offsetof(BPFL_AAS_C_Random_Vector_in_Range_from_Stream, CallFunc_BreakVector_Y_1) == 0x000044, "Member 'BPFL_AAS_C_Random_Vector_in_Range_from_Stream::CallFunc_BreakVector_Y_1' has a wrong offset!");
static_assert(offsetof(BPFL_AAS_C_Random_Vector_in_Range_from_Stream, CallFunc_BreakVector_Z_1) == 0x000048, "Member 'BPFL_AAS_C_Random_Vector_in_Range_from_Stream::CallFunc_BreakVector_Z_1' has a wrong offset!");
static_assert(offsetof(BPFL_AAS_C_Random_Vector_in_Range_from_Stream, CallFunc_RandomFloatInRangeFromStream_ReturnValue) == 0x00004C, "Member 'BPFL_AAS_C_Random_Vector_in_Range_from_Stream::CallFunc_RandomFloatInRangeFromStream_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPFL_AAS_C_Random_Vector_in_Range_from_Stream, CallFunc_RandomFloatInRangeFromStream_ReturnValue_1) == 0x000050, "Member 'BPFL_AAS_C_Random_Vector_in_Range_from_Stream::CallFunc_RandomFloatInRangeFromStream_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BPFL_AAS_C_Random_Vector_in_Range_from_Stream, CallFunc_RandomFloatInRangeFromStream_ReturnValue_2) == 0x000054, "Member 'BPFL_AAS_C_Random_Vector_in_Range_from_Stream::CallFunc_RandomFloatInRangeFromStream_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BPFL_AAS_C_Random_Vector_in_Range_from_Stream, CallFunc_MakeVector_ReturnValue) == 0x000058, "Member 'BPFL_AAS_C_Random_Vector_in_Range_from_Stream::CallFunc_MakeVector_ReturnValue' has a wrong offset!");

// Function BPFL_AAS.BPFL_AAS_C.Calculate Orbit Position
// 0x0070 (0x0070 - 0x0000)
struct BPFL_AAS_C_Calculate_Orbit_Position final
{
public:
	struct FVector                                Center;                                            // 0x0000(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               Direction;                                         // 0x000C(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         Angle_in_Orbit;                                    // 0x0018(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Orbit_X_Width;                                     // 0x001C(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Orbit_Y_Length;                                    // 0x0020(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                __WorldContext;                                    // 0x0028(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                New_Location;                                      // 0x0030(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_DegCos_ReturnValue;                       // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_DegSin_ReturnValue;                       // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue;          // 0x0044(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_1;        // 0x0048(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue;                   // 0x004C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GreaterGreater_VectorRotator_ReturnValue; // 0x0058(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue;             // 0x0064(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPFL_AAS_C_Calculate_Orbit_Position) == 0x000008, "Wrong alignment on BPFL_AAS_C_Calculate_Orbit_Position");
static_assert(sizeof(BPFL_AAS_C_Calculate_Orbit_Position) == 0x000070, "Wrong size on BPFL_AAS_C_Calculate_Orbit_Position");
static_assert(offsetof(BPFL_AAS_C_Calculate_Orbit_Position, Center) == 0x000000, "Member 'BPFL_AAS_C_Calculate_Orbit_Position::Center' has a wrong offset!");
static_assert(offsetof(BPFL_AAS_C_Calculate_Orbit_Position, Direction) == 0x00000C, "Member 'BPFL_AAS_C_Calculate_Orbit_Position::Direction' has a wrong offset!");
static_assert(offsetof(BPFL_AAS_C_Calculate_Orbit_Position, Angle_in_Orbit) == 0x000018, "Member 'BPFL_AAS_C_Calculate_Orbit_Position::Angle_in_Orbit' has a wrong offset!");
static_assert(offsetof(BPFL_AAS_C_Calculate_Orbit_Position, Orbit_X_Width) == 0x00001C, "Member 'BPFL_AAS_C_Calculate_Orbit_Position::Orbit_X_Width' has a wrong offset!");
static_assert(offsetof(BPFL_AAS_C_Calculate_Orbit_Position, Orbit_Y_Length) == 0x000020, "Member 'BPFL_AAS_C_Calculate_Orbit_Position::Orbit_Y_Length' has a wrong offset!");
static_assert(offsetof(BPFL_AAS_C_Calculate_Orbit_Position, __WorldContext) == 0x000028, "Member 'BPFL_AAS_C_Calculate_Orbit_Position::__WorldContext' has a wrong offset!");
static_assert(offsetof(BPFL_AAS_C_Calculate_Orbit_Position, New_Location) == 0x000030, "Member 'BPFL_AAS_C_Calculate_Orbit_Position::New_Location' has a wrong offset!");
static_assert(offsetof(BPFL_AAS_C_Calculate_Orbit_Position, CallFunc_DegCos_ReturnValue) == 0x00003C, "Member 'BPFL_AAS_C_Calculate_Orbit_Position::CallFunc_DegCos_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPFL_AAS_C_Calculate_Orbit_Position, CallFunc_DegSin_ReturnValue) == 0x000040, "Member 'BPFL_AAS_C_Calculate_Orbit_Position::CallFunc_DegSin_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPFL_AAS_C_Calculate_Orbit_Position, CallFunc_Multiply_FloatFloat_ReturnValue) == 0x000044, "Member 'BPFL_AAS_C_Calculate_Orbit_Position::CallFunc_Multiply_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPFL_AAS_C_Calculate_Orbit_Position, CallFunc_Multiply_FloatFloat_ReturnValue_1) == 0x000048, "Member 'BPFL_AAS_C_Calculate_Orbit_Position::CallFunc_Multiply_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BPFL_AAS_C_Calculate_Orbit_Position, CallFunc_MakeVector_ReturnValue) == 0x00004C, "Member 'BPFL_AAS_C_Calculate_Orbit_Position::CallFunc_MakeVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPFL_AAS_C_Calculate_Orbit_Position, CallFunc_GreaterGreater_VectorRotator_ReturnValue) == 0x000058, "Member 'BPFL_AAS_C_Calculate_Orbit_Position::CallFunc_GreaterGreater_VectorRotator_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPFL_AAS_C_Calculate_Orbit_Position, CallFunc_Add_VectorVector_ReturnValue) == 0x000064, "Member 'BPFL_AAS_C_Calculate_Orbit_Position::CallFunc_Add_VectorVector_ReturnValue' has a wrong offset!");

// Function BPFL_AAS.BPFL_AAS_C.Get In Orbit Rotation of Location
// 0x00E0 (0x00E0 - 0x0000)
struct BPFL_AAS_C_Get_In_Orbit_Rotation_of_Location final
{
public:
	struct FVector                                Location;                                          // 0x0000(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             Transform;                                         // 0x0010(0x0030)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
	class UObject*                                __WorldContext;                                    // 0x0040(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               Rotator;                                           // 0x0048(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_MakeVector_ReturnValue;                   // 0x0054(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTransform                             CallFunc_InvertTransform_ReturnValue;              // 0x0060(0x0030)(IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_TransformLocation_ReturnValue;            // 0x0090(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_FindLookAtRotation_ReturnValue;           // 0x009C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FRotator                               CallFunc_NegateRotator_ReturnValue;                // 0x00A8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FRotator                               CallFunc_ComposeRotators_ReturnValue;              // 0x00B4(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FRotator                               CallFunc_NegateRotator_ReturnValue_1;              // 0x00C0(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FRotator                               CallFunc_TransformRotation_ReturnValue;            // 0x00CC(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPFL_AAS_C_Get_In_Orbit_Rotation_of_Location) == 0x000010, "Wrong alignment on BPFL_AAS_C_Get_In_Orbit_Rotation_of_Location");
static_assert(sizeof(BPFL_AAS_C_Get_In_Orbit_Rotation_of_Location) == 0x0000E0, "Wrong size on BPFL_AAS_C_Get_In_Orbit_Rotation_of_Location");
static_assert(offsetof(BPFL_AAS_C_Get_In_Orbit_Rotation_of_Location, Location) == 0x000000, "Member 'BPFL_AAS_C_Get_In_Orbit_Rotation_of_Location::Location' has a wrong offset!");
static_assert(offsetof(BPFL_AAS_C_Get_In_Orbit_Rotation_of_Location, Transform) == 0x000010, "Member 'BPFL_AAS_C_Get_In_Orbit_Rotation_of_Location::Transform' has a wrong offset!");
static_assert(offsetof(BPFL_AAS_C_Get_In_Orbit_Rotation_of_Location, __WorldContext) == 0x000040, "Member 'BPFL_AAS_C_Get_In_Orbit_Rotation_of_Location::__WorldContext' has a wrong offset!");
static_assert(offsetof(BPFL_AAS_C_Get_In_Orbit_Rotation_of_Location, Rotator) == 0x000048, "Member 'BPFL_AAS_C_Get_In_Orbit_Rotation_of_Location::Rotator' has a wrong offset!");
static_assert(offsetof(BPFL_AAS_C_Get_In_Orbit_Rotation_of_Location, CallFunc_MakeVector_ReturnValue) == 0x000054, "Member 'BPFL_AAS_C_Get_In_Orbit_Rotation_of_Location::CallFunc_MakeVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPFL_AAS_C_Get_In_Orbit_Rotation_of_Location, CallFunc_InvertTransform_ReturnValue) == 0x000060, "Member 'BPFL_AAS_C_Get_In_Orbit_Rotation_of_Location::CallFunc_InvertTransform_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPFL_AAS_C_Get_In_Orbit_Rotation_of_Location, CallFunc_TransformLocation_ReturnValue) == 0x000090, "Member 'BPFL_AAS_C_Get_In_Orbit_Rotation_of_Location::CallFunc_TransformLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPFL_AAS_C_Get_In_Orbit_Rotation_of_Location, CallFunc_FindLookAtRotation_ReturnValue) == 0x00009C, "Member 'BPFL_AAS_C_Get_In_Orbit_Rotation_of_Location::CallFunc_FindLookAtRotation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPFL_AAS_C_Get_In_Orbit_Rotation_of_Location, CallFunc_NegateRotator_ReturnValue) == 0x0000A8, "Member 'BPFL_AAS_C_Get_In_Orbit_Rotation_of_Location::CallFunc_NegateRotator_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPFL_AAS_C_Get_In_Orbit_Rotation_of_Location, CallFunc_ComposeRotators_ReturnValue) == 0x0000B4, "Member 'BPFL_AAS_C_Get_In_Orbit_Rotation_of_Location::CallFunc_ComposeRotators_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPFL_AAS_C_Get_In_Orbit_Rotation_of_Location, CallFunc_NegateRotator_ReturnValue_1) == 0x0000C0, "Member 'BPFL_AAS_C_Get_In_Orbit_Rotation_of_Location::CallFunc_NegateRotator_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BPFL_AAS_C_Get_In_Orbit_Rotation_of_Location, CallFunc_TransformRotation_ReturnValue) == 0x0000CC, "Member 'BPFL_AAS_C_Get_In_Orbit_Rotation_of_Location::CallFunc_TransformRotation_ReturnValue' has a wrong offset!");

// Function BPFL_AAS.BPFL_AAS_C.VectorToRotator
// 0x0040 (0x0040 - 0x0000)
struct BPFL_AAS_C_VectorToRotator final
{
public:
	struct FVector                                Vector;                                            // 0x0000(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                __WorldContext;                                    // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               Rotator;                                           // 0x0018(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_BreakVector_X;                            // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y;                            // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z;                            // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_MakeRotator_ReturnValue;                  // 0x0030(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPFL_AAS_C_VectorToRotator) == 0x000008, "Wrong alignment on BPFL_AAS_C_VectorToRotator");
static_assert(sizeof(BPFL_AAS_C_VectorToRotator) == 0x000040, "Wrong size on BPFL_AAS_C_VectorToRotator");
static_assert(offsetof(BPFL_AAS_C_VectorToRotator, Vector) == 0x000000, "Member 'BPFL_AAS_C_VectorToRotator::Vector' has a wrong offset!");
static_assert(offsetof(BPFL_AAS_C_VectorToRotator, __WorldContext) == 0x000010, "Member 'BPFL_AAS_C_VectorToRotator::__WorldContext' has a wrong offset!");
static_assert(offsetof(BPFL_AAS_C_VectorToRotator, Rotator) == 0x000018, "Member 'BPFL_AAS_C_VectorToRotator::Rotator' has a wrong offset!");
static_assert(offsetof(BPFL_AAS_C_VectorToRotator, CallFunc_BreakVector_X) == 0x000024, "Member 'BPFL_AAS_C_VectorToRotator::CallFunc_BreakVector_X' has a wrong offset!");
static_assert(offsetof(BPFL_AAS_C_VectorToRotator, CallFunc_BreakVector_Y) == 0x000028, "Member 'BPFL_AAS_C_VectorToRotator::CallFunc_BreakVector_Y' has a wrong offset!");
static_assert(offsetof(BPFL_AAS_C_VectorToRotator, CallFunc_BreakVector_Z) == 0x00002C, "Member 'BPFL_AAS_C_VectorToRotator::CallFunc_BreakVector_Z' has a wrong offset!");
static_assert(offsetof(BPFL_AAS_C_VectorToRotator, CallFunc_MakeRotator_ReturnValue) == 0x000030, "Member 'BPFL_AAS_C_VectorToRotator::CallFunc_MakeRotator_ReturnValue' has a wrong offset!");

// Function BPFL_AAS.BPFL_AAS_C.Max (Vector)
// 0x0060 (0x0060 - 0x0000)
struct BPFL_AAS_C_Max__Vector_ final
{
public:
	struct FVector                                Vector_A;                                          // 0x0000(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Vector_B;                                          // 0x000C(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UObject*                                __WorldContext;                                    // 0x0018(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                ReturnValue;                                       // 0x0020(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_X;                            // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y;                            // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z;                            // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_X_1;                          // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y_1;                          // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z_1;                          // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_FMax_ReturnValue;                         // 0x0044(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_FMax_ReturnValue_1;                       // 0x0048(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_FMax_ReturnValue_2;                       // 0x004C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue;                   // 0x0050(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPFL_AAS_C_Max__Vector_) == 0x000008, "Wrong alignment on BPFL_AAS_C_Max__Vector_");
static_assert(sizeof(BPFL_AAS_C_Max__Vector_) == 0x000060, "Wrong size on BPFL_AAS_C_Max__Vector_");
static_assert(offsetof(BPFL_AAS_C_Max__Vector_, Vector_A) == 0x000000, "Member 'BPFL_AAS_C_Max__Vector_::Vector_A' has a wrong offset!");
static_assert(offsetof(BPFL_AAS_C_Max__Vector_, Vector_B) == 0x00000C, "Member 'BPFL_AAS_C_Max__Vector_::Vector_B' has a wrong offset!");
static_assert(offsetof(BPFL_AAS_C_Max__Vector_, __WorldContext) == 0x000018, "Member 'BPFL_AAS_C_Max__Vector_::__WorldContext' has a wrong offset!");
static_assert(offsetof(BPFL_AAS_C_Max__Vector_, ReturnValue) == 0x000020, "Member 'BPFL_AAS_C_Max__Vector_::ReturnValue' has a wrong offset!");
static_assert(offsetof(BPFL_AAS_C_Max__Vector_, CallFunc_BreakVector_X) == 0x00002C, "Member 'BPFL_AAS_C_Max__Vector_::CallFunc_BreakVector_X' has a wrong offset!");
static_assert(offsetof(BPFL_AAS_C_Max__Vector_, CallFunc_BreakVector_Y) == 0x000030, "Member 'BPFL_AAS_C_Max__Vector_::CallFunc_BreakVector_Y' has a wrong offset!");
static_assert(offsetof(BPFL_AAS_C_Max__Vector_, CallFunc_BreakVector_Z) == 0x000034, "Member 'BPFL_AAS_C_Max__Vector_::CallFunc_BreakVector_Z' has a wrong offset!");
static_assert(offsetof(BPFL_AAS_C_Max__Vector_, CallFunc_BreakVector_X_1) == 0x000038, "Member 'BPFL_AAS_C_Max__Vector_::CallFunc_BreakVector_X_1' has a wrong offset!");
static_assert(offsetof(BPFL_AAS_C_Max__Vector_, CallFunc_BreakVector_Y_1) == 0x00003C, "Member 'BPFL_AAS_C_Max__Vector_::CallFunc_BreakVector_Y_1' has a wrong offset!");
static_assert(offsetof(BPFL_AAS_C_Max__Vector_, CallFunc_BreakVector_Z_1) == 0x000040, "Member 'BPFL_AAS_C_Max__Vector_::CallFunc_BreakVector_Z_1' has a wrong offset!");
static_assert(offsetof(BPFL_AAS_C_Max__Vector_, CallFunc_FMax_ReturnValue) == 0x000044, "Member 'BPFL_AAS_C_Max__Vector_::CallFunc_FMax_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPFL_AAS_C_Max__Vector_, CallFunc_FMax_ReturnValue_1) == 0x000048, "Member 'BPFL_AAS_C_Max__Vector_::CallFunc_FMax_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BPFL_AAS_C_Max__Vector_, CallFunc_FMax_ReturnValue_2) == 0x00004C, "Member 'BPFL_AAS_C_Max__Vector_::CallFunc_FMax_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BPFL_AAS_C_Max__Vector_, CallFunc_MakeVector_ReturnValue) == 0x000050, "Member 'BPFL_AAS_C_Max__Vector_::CallFunc_MakeVector_ReturnValue' has a wrong offset!");

// Function BPFL_AAS.BPFL_AAS_C.AddTransform
// 0x0140 (0x0140 - 0x0000)
struct BPFL_AAS_C_AddTransform final
{
public:
	struct FTransform                             Transform_A;                                       // 0x0000(0x0030)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
	struct FTransform                             Transform_B;                                       // 0x0030(0x0030)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
	class UObject*                                __WorldContext;                                    // 0x0060(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_68[0x8];                                       // 0x0068(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             New_Transform;                                     // 0x0070(0x0030)(Parm, OutParm, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_BreakTransform_Location;                  // 0x00A0(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_BreakTransform_Rotation;                  // 0x00AC(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_BreakTransform_Scale;                     // 0x00B8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakTransform_Location_1;                // 0x00C4(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_BreakTransform_Rotation_1;                // 0x00D0(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_BreakTransform_Scale_1;                   // 0x00DC(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue;             // 0x00E8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue_1;           // 0x00F4(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_Rotator___Rotator_ReturnValue;            // 0x0100(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_10C[0x4];                                      // 0x010C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CallFunc_MakeTransform_ReturnValue;                // 0x0110(0x0030)(IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPFL_AAS_C_AddTransform) == 0x000010, "Wrong alignment on BPFL_AAS_C_AddTransform");
static_assert(sizeof(BPFL_AAS_C_AddTransform) == 0x000140, "Wrong size on BPFL_AAS_C_AddTransform");
static_assert(offsetof(BPFL_AAS_C_AddTransform, Transform_A) == 0x000000, "Member 'BPFL_AAS_C_AddTransform::Transform_A' has a wrong offset!");
static_assert(offsetof(BPFL_AAS_C_AddTransform, Transform_B) == 0x000030, "Member 'BPFL_AAS_C_AddTransform::Transform_B' has a wrong offset!");
static_assert(offsetof(BPFL_AAS_C_AddTransform, __WorldContext) == 0x000060, "Member 'BPFL_AAS_C_AddTransform::__WorldContext' has a wrong offset!");
static_assert(offsetof(BPFL_AAS_C_AddTransform, New_Transform) == 0x000070, "Member 'BPFL_AAS_C_AddTransform::New_Transform' has a wrong offset!");
static_assert(offsetof(BPFL_AAS_C_AddTransform, CallFunc_BreakTransform_Location) == 0x0000A0, "Member 'BPFL_AAS_C_AddTransform::CallFunc_BreakTransform_Location' has a wrong offset!");
static_assert(offsetof(BPFL_AAS_C_AddTransform, CallFunc_BreakTransform_Rotation) == 0x0000AC, "Member 'BPFL_AAS_C_AddTransform::CallFunc_BreakTransform_Rotation' has a wrong offset!");
static_assert(offsetof(BPFL_AAS_C_AddTransform, CallFunc_BreakTransform_Scale) == 0x0000B8, "Member 'BPFL_AAS_C_AddTransform::CallFunc_BreakTransform_Scale' has a wrong offset!");
static_assert(offsetof(BPFL_AAS_C_AddTransform, CallFunc_BreakTransform_Location_1) == 0x0000C4, "Member 'BPFL_AAS_C_AddTransform::CallFunc_BreakTransform_Location_1' has a wrong offset!");
static_assert(offsetof(BPFL_AAS_C_AddTransform, CallFunc_BreakTransform_Rotation_1) == 0x0000D0, "Member 'BPFL_AAS_C_AddTransform::CallFunc_BreakTransform_Rotation_1' has a wrong offset!");
static_assert(offsetof(BPFL_AAS_C_AddTransform, CallFunc_BreakTransform_Scale_1) == 0x0000DC, "Member 'BPFL_AAS_C_AddTransform::CallFunc_BreakTransform_Scale_1' has a wrong offset!");
static_assert(offsetof(BPFL_AAS_C_AddTransform, CallFunc_Add_VectorVector_ReturnValue) == 0x0000E8, "Member 'BPFL_AAS_C_AddTransform::CallFunc_Add_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPFL_AAS_C_AddTransform, CallFunc_Add_VectorVector_ReturnValue_1) == 0x0000F4, "Member 'BPFL_AAS_C_AddTransform::CallFunc_Add_VectorVector_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BPFL_AAS_C_AddTransform, CallFunc_Rotator___Rotator_ReturnValue) == 0x000100, "Member 'BPFL_AAS_C_AddTransform::CallFunc_Rotator___Rotator_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPFL_AAS_C_AddTransform, CallFunc_MakeTransform_ReturnValue) == 0x000110, "Member 'BPFL_AAS_C_AddTransform::CallFunc_MakeTransform_ReturnValue' has a wrong offset!");

// Function BPFL_AAS.BPFL_AAS_C.GetSinNoiseValue
// 0x0058 (0x0058 - 0x0000)
struct BPFL_AAS_C_GetSinNoiseValue final
{
public:
	struct FVector                                Location;                                          // 0x0000(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Parameters;                                        // 0x000C(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UObject*                                __WorldContext;                                    // 0x0018(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Value;                                             // 0x0020(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Divide_VectorVector_ReturnValue;          // 0x0024(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_X;                            // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y;                            // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z;                            // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Sin_ReturnValue;                          // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Sin_ReturnValue_1;                        // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Sin_ReturnValue_2;                        // 0x0044(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue;               // 0x0048(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue_1;             // 0x004C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Divide_FloatFloat_ReturnValue;            // 0x0050(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPFL_AAS_C_GetSinNoiseValue) == 0x000008, "Wrong alignment on BPFL_AAS_C_GetSinNoiseValue");
static_assert(sizeof(BPFL_AAS_C_GetSinNoiseValue) == 0x000058, "Wrong size on BPFL_AAS_C_GetSinNoiseValue");
static_assert(offsetof(BPFL_AAS_C_GetSinNoiseValue, Location) == 0x000000, "Member 'BPFL_AAS_C_GetSinNoiseValue::Location' has a wrong offset!");
static_assert(offsetof(BPFL_AAS_C_GetSinNoiseValue, Parameters) == 0x00000C, "Member 'BPFL_AAS_C_GetSinNoiseValue::Parameters' has a wrong offset!");
static_assert(offsetof(BPFL_AAS_C_GetSinNoiseValue, __WorldContext) == 0x000018, "Member 'BPFL_AAS_C_GetSinNoiseValue::__WorldContext' has a wrong offset!");
static_assert(offsetof(BPFL_AAS_C_GetSinNoiseValue, Value) == 0x000020, "Member 'BPFL_AAS_C_GetSinNoiseValue::Value' has a wrong offset!");
static_assert(offsetof(BPFL_AAS_C_GetSinNoiseValue, CallFunc_Divide_VectorVector_ReturnValue) == 0x000024, "Member 'BPFL_AAS_C_GetSinNoiseValue::CallFunc_Divide_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPFL_AAS_C_GetSinNoiseValue, CallFunc_BreakVector_X) == 0x000030, "Member 'BPFL_AAS_C_GetSinNoiseValue::CallFunc_BreakVector_X' has a wrong offset!");
static_assert(offsetof(BPFL_AAS_C_GetSinNoiseValue, CallFunc_BreakVector_Y) == 0x000034, "Member 'BPFL_AAS_C_GetSinNoiseValue::CallFunc_BreakVector_Y' has a wrong offset!");
static_assert(offsetof(BPFL_AAS_C_GetSinNoiseValue, CallFunc_BreakVector_Z) == 0x000038, "Member 'BPFL_AAS_C_GetSinNoiseValue::CallFunc_BreakVector_Z' has a wrong offset!");
static_assert(offsetof(BPFL_AAS_C_GetSinNoiseValue, CallFunc_Sin_ReturnValue) == 0x00003C, "Member 'BPFL_AAS_C_GetSinNoiseValue::CallFunc_Sin_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPFL_AAS_C_GetSinNoiseValue, CallFunc_Sin_ReturnValue_1) == 0x000040, "Member 'BPFL_AAS_C_GetSinNoiseValue::CallFunc_Sin_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BPFL_AAS_C_GetSinNoiseValue, CallFunc_Sin_ReturnValue_2) == 0x000044, "Member 'BPFL_AAS_C_GetSinNoiseValue::CallFunc_Sin_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BPFL_AAS_C_GetSinNoiseValue, CallFunc_Add_FloatFloat_ReturnValue) == 0x000048, "Member 'BPFL_AAS_C_GetSinNoiseValue::CallFunc_Add_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPFL_AAS_C_GetSinNoiseValue, CallFunc_Add_FloatFloat_ReturnValue_1) == 0x00004C, "Member 'BPFL_AAS_C_GetSinNoiseValue::CallFunc_Add_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BPFL_AAS_C_GetSinNoiseValue, CallFunc_Divide_FloatFloat_ReturnValue) == 0x000050, "Member 'BPFL_AAS_C_GetSinNoiseValue::CallFunc_Divide_FloatFloat_ReturnValue' has a wrong offset!");

// Function BPFL_AAS.BPFL_AAS_C.GetSimpleNoiseValue
// 0x0058 (0x0058 - 0x0000)
struct BPFL_AAS_C_GetSimpleNoiseValue final
{
public:
	struct FVector                                Location;                                          // 0x0000(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Parameters;                                        // 0x000C(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UObject*                                __WorldContext;                                    // 0x0018(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Value;                                             // 0x0020(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorFloat_ReturnValue;         // 0x0024(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetSinNoiseValue_Value;                   // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetSinNoiseValue_Value_1;                 // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorFloat_ReturnValue_1;       // 0x0038(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue;               // 0x0044(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetSinNoiseValue_Value_2;                 // 0x0048(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue_1;             // 0x004C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Divide_FloatFloat_ReturnValue;            // 0x0050(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPFL_AAS_C_GetSimpleNoiseValue) == 0x000008, "Wrong alignment on BPFL_AAS_C_GetSimpleNoiseValue");
static_assert(sizeof(BPFL_AAS_C_GetSimpleNoiseValue) == 0x000058, "Wrong size on BPFL_AAS_C_GetSimpleNoiseValue");
static_assert(offsetof(BPFL_AAS_C_GetSimpleNoiseValue, Location) == 0x000000, "Member 'BPFL_AAS_C_GetSimpleNoiseValue::Location' has a wrong offset!");
static_assert(offsetof(BPFL_AAS_C_GetSimpleNoiseValue, Parameters) == 0x00000C, "Member 'BPFL_AAS_C_GetSimpleNoiseValue::Parameters' has a wrong offset!");
static_assert(offsetof(BPFL_AAS_C_GetSimpleNoiseValue, __WorldContext) == 0x000018, "Member 'BPFL_AAS_C_GetSimpleNoiseValue::__WorldContext' has a wrong offset!");
static_assert(offsetof(BPFL_AAS_C_GetSimpleNoiseValue, Value) == 0x000020, "Member 'BPFL_AAS_C_GetSimpleNoiseValue::Value' has a wrong offset!");
static_assert(offsetof(BPFL_AAS_C_GetSimpleNoiseValue, CallFunc_Multiply_VectorFloat_ReturnValue) == 0x000024, "Member 'BPFL_AAS_C_GetSimpleNoiseValue::CallFunc_Multiply_VectorFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPFL_AAS_C_GetSimpleNoiseValue, CallFunc_GetSinNoiseValue_Value) == 0x000030, "Member 'BPFL_AAS_C_GetSimpleNoiseValue::CallFunc_GetSinNoiseValue_Value' has a wrong offset!");
static_assert(offsetof(BPFL_AAS_C_GetSimpleNoiseValue, CallFunc_GetSinNoiseValue_Value_1) == 0x000034, "Member 'BPFL_AAS_C_GetSimpleNoiseValue::CallFunc_GetSinNoiseValue_Value_1' has a wrong offset!");
static_assert(offsetof(BPFL_AAS_C_GetSimpleNoiseValue, CallFunc_Multiply_VectorFloat_ReturnValue_1) == 0x000038, "Member 'BPFL_AAS_C_GetSimpleNoiseValue::CallFunc_Multiply_VectorFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BPFL_AAS_C_GetSimpleNoiseValue, CallFunc_Add_FloatFloat_ReturnValue) == 0x000044, "Member 'BPFL_AAS_C_GetSimpleNoiseValue::CallFunc_Add_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPFL_AAS_C_GetSimpleNoiseValue, CallFunc_GetSinNoiseValue_Value_2) == 0x000048, "Member 'BPFL_AAS_C_GetSimpleNoiseValue::CallFunc_GetSinNoiseValue_Value_2' has a wrong offset!");
static_assert(offsetof(BPFL_AAS_C_GetSimpleNoiseValue, CallFunc_Add_FloatFloat_ReturnValue_1) == 0x00004C, "Member 'BPFL_AAS_C_GetSimpleNoiseValue::CallFunc_Add_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BPFL_AAS_C_GetSimpleNoiseValue, CallFunc_Divide_FloatFloat_ReturnValue) == 0x000050, "Member 'BPFL_AAS_C_GetSimpleNoiseValue::CallFunc_Divide_FloatFloat_ReturnValue' has a wrong offset!");

// Function BPFL_AAS.BPFL_AAS_C.MapThreshold
// 0x0020 (0x0020 - 0x0000)
struct BPFL_AAS_C_MapThreshold final
{
public:
	float                                         Value;                                             // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Threshold;                                         // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UObject*                                __WorldContext;                                    // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ReturnValue;                                       // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_MapRangeClamped_ReturnValue;              // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_FloatFloat_ReturnValue;         // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_SelectFloat_ReturnValue;                  // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPFL_AAS_C_MapThreshold) == 0x000008, "Wrong alignment on BPFL_AAS_C_MapThreshold");
static_assert(sizeof(BPFL_AAS_C_MapThreshold) == 0x000020, "Wrong size on BPFL_AAS_C_MapThreshold");
static_assert(offsetof(BPFL_AAS_C_MapThreshold, Value) == 0x000000, "Member 'BPFL_AAS_C_MapThreshold::Value' has a wrong offset!");
static_assert(offsetof(BPFL_AAS_C_MapThreshold, Threshold) == 0x000004, "Member 'BPFL_AAS_C_MapThreshold::Threshold' has a wrong offset!");
static_assert(offsetof(BPFL_AAS_C_MapThreshold, __WorldContext) == 0x000008, "Member 'BPFL_AAS_C_MapThreshold::__WorldContext' has a wrong offset!");
static_assert(offsetof(BPFL_AAS_C_MapThreshold, ReturnValue) == 0x000010, "Member 'BPFL_AAS_C_MapThreshold::ReturnValue' has a wrong offset!");
static_assert(offsetof(BPFL_AAS_C_MapThreshold, CallFunc_MapRangeClamped_ReturnValue) == 0x000014, "Member 'BPFL_AAS_C_MapThreshold::CallFunc_MapRangeClamped_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPFL_AAS_C_MapThreshold, CallFunc_LessEqual_FloatFloat_ReturnValue) == 0x000018, "Member 'BPFL_AAS_C_MapThreshold::CallFunc_LessEqual_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPFL_AAS_C_MapThreshold, CallFunc_SelectFloat_ReturnValue) == 0x00001C, "Member 'BPFL_AAS_C_MapThreshold::CallFunc_SelectFloat_ReturnValue' has a wrong offset!");

// Function BPFL_AAS.BPFL_AAS_C.AsteroidScaleShrinking
// 0x0050 (0x0050 - 0x0000)
struct BPFL_AAS_C_AsteroidScaleShrinking final
{
public:
	float                                         Value;                                             // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                OriginalScale;                                     // 0x0004(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Threshold;                                         // 0x0010(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Strength;                                          // 0x0014(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UObject*                                __WorldContext;                                    // 0x0018(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Shrinked_Scale;                                    // 0x0020(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_MapThreshold_ReturnValue;                 // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue;          // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorFloat_ReturnValue;         // 0x0034(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Subtract_VectorVector_ReturnValue;        // 0x0040(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPFL_AAS_C_AsteroidScaleShrinking) == 0x000008, "Wrong alignment on BPFL_AAS_C_AsteroidScaleShrinking");
static_assert(sizeof(BPFL_AAS_C_AsteroidScaleShrinking) == 0x000050, "Wrong size on BPFL_AAS_C_AsteroidScaleShrinking");
static_assert(offsetof(BPFL_AAS_C_AsteroidScaleShrinking, Value) == 0x000000, "Member 'BPFL_AAS_C_AsteroidScaleShrinking::Value' has a wrong offset!");
static_assert(offsetof(BPFL_AAS_C_AsteroidScaleShrinking, OriginalScale) == 0x000004, "Member 'BPFL_AAS_C_AsteroidScaleShrinking::OriginalScale' has a wrong offset!");
static_assert(offsetof(BPFL_AAS_C_AsteroidScaleShrinking, Threshold) == 0x000010, "Member 'BPFL_AAS_C_AsteroidScaleShrinking::Threshold' has a wrong offset!");
static_assert(offsetof(BPFL_AAS_C_AsteroidScaleShrinking, Strength) == 0x000014, "Member 'BPFL_AAS_C_AsteroidScaleShrinking::Strength' has a wrong offset!");
static_assert(offsetof(BPFL_AAS_C_AsteroidScaleShrinking, __WorldContext) == 0x000018, "Member 'BPFL_AAS_C_AsteroidScaleShrinking::__WorldContext' has a wrong offset!");
static_assert(offsetof(BPFL_AAS_C_AsteroidScaleShrinking, Shrinked_Scale) == 0x000020, "Member 'BPFL_AAS_C_AsteroidScaleShrinking::Shrinked_Scale' has a wrong offset!");
static_assert(offsetof(BPFL_AAS_C_AsteroidScaleShrinking, CallFunc_MapThreshold_ReturnValue) == 0x00002C, "Member 'BPFL_AAS_C_AsteroidScaleShrinking::CallFunc_MapThreshold_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPFL_AAS_C_AsteroidScaleShrinking, CallFunc_Multiply_FloatFloat_ReturnValue) == 0x000030, "Member 'BPFL_AAS_C_AsteroidScaleShrinking::CallFunc_Multiply_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPFL_AAS_C_AsteroidScaleShrinking, CallFunc_Multiply_VectorFloat_ReturnValue) == 0x000034, "Member 'BPFL_AAS_C_AsteroidScaleShrinking::CallFunc_Multiply_VectorFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPFL_AAS_C_AsteroidScaleShrinking, CallFunc_Subtract_VectorVector_ReturnValue) == 0x000040, "Member 'BPFL_AAS_C_AsteroidScaleShrinking::CallFunc_Subtract_VectorVector_ReturnValue' has a wrong offset!");

// Function BPFL_AAS.BPFL_AAS_C.Get All AAS System Actors
// 0x0028 (0x0028 - 0x0000)
struct BPFL_AAS_C_Get_All_AAS_System_Actors final
{
public:
	class UObject*                                __WorldContext;                                    // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class ABP_AAS_V2Base_C*>               System_Actors;                                     // 0x0008(0x0010)(Parm, OutParm)
	TArray<class ABP_AAS_V2Base_C*>               CallFunc_GetAllActorsOfClass_OutActors;            // 0x0018(0x0010)(ReferenceParm)
};
static_assert(alignof(BPFL_AAS_C_Get_All_AAS_System_Actors) == 0x000008, "Wrong alignment on BPFL_AAS_C_Get_All_AAS_System_Actors");
static_assert(sizeof(BPFL_AAS_C_Get_All_AAS_System_Actors) == 0x000028, "Wrong size on BPFL_AAS_C_Get_All_AAS_System_Actors");
static_assert(offsetof(BPFL_AAS_C_Get_All_AAS_System_Actors, __WorldContext) == 0x000000, "Member 'BPFL_AAS_C_Get_All_AAS_System_Actors::__WorldContext' has a wrong offset!");
static_assert(offsetof(BPFL_AAS_C_Get_All_AAS_System_Actors, System_Actors) == 0x000008, "Member 'BPFL_AAS_C_Get_All_AAS_System_Actors::System_Actors' has a wrong offset!");
static_assert(offsetof(BPFL_AAS_C_Get_All_AAS_System_Actors, CallFunc_GetAllActorsOfClass_OutActors) == 0x000018, "Member 'BPFL_AAS_C_Get_All_AAS_System_Actors::CallFunc_GetAllActorsOfClass_OutActors' has a wrong offset!");

// Function BPFL_AAS.BPFL_AAS_C.Get All AAS Follower Components
// 0x0060 (0x0060 - 0x0000)
struct BPFL_AAS_C_Get_All_AAS_Follower_Components final
{
public:
	class UObject*                                __WorldContext;                                    // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class UBPC_AAS_Follower_C*>            Follower_Components;                               // 0x0008(0x0010)(Parm, OutParm, ContainsInstancedReference)
	TArray<class UBPC_AAS_Follower_C*>            New_Follower_Components;                           // 0x0018(0x0010)(Edit, BlueprintVisible, ContainsInstancedReference)
	TArray<class AActor*>                         CallFunc_GetAllActorsWithInterface_OutActors;      // 0x0028(0x0010)(ReferenceParm)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_Array_Get_Item;                           // 0x0040(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UBPC_AAS_Follower_C*                    CallFunc_GetComponentByClass_ReturnValue;          // 0x0048(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0050(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0054(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0055(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_56[0x2];                                       // 0x0056(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0058(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Add_ReturnValue;                    // 0x005C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPFL_AAS_C_Get_All_AAS_Follower_Components) == 0x000008, "Wrong alignment on BPFL_AAS_C_Get_All_AAS_Follower_Components");
static_assert(sizeof(BPFL_AAS_C_Get_All_AAS_Follower_Components) == 0x000060, "Wrong size on BPFL_AAS_C_Get_All_AAS_Follower_Components");
static_assert(offsetof(BPFL_AAS_C_Get_All_AAS_Follower_Components, __WorldContext) == 0x000000, "Member 'BPFL_AAS_C_Get_All_AAS_Follower_Components::__WorldContext' has a wrong offset!");
static_assert(offsetof(BPFL_AAS_C_Get_All_AAS_Follower_Components, Follower_Components) == 0x000008, "Member 'BPFL_AAS_C_Get_All_AAS_Follower_Components::Follower_Components' has a wrong offset!");
static_assert(offsetof(BPFL_AAS_C_Get_All_AAS_Follower_Components, New_Follower_Components) == 0x000018, "Member 'BPFL_AAS_C_Get_All_AAS_Follower_Components::New_Follower_Components' has a wrong offset!");
static_assert(offsetof(BPFL_AAS_C_Get_All_AAS_Follower_Components, CallFunc_GetAllActorsWithInterface_OutActors) == 0x000028, "Member 'BPFL_AAS_C_Get_All_AAS_Follower_Components::CallFunc_GetAllActorsWithInterface_OutActors' has a wrong offset!");
static_assert(offsetof(BPFL_AAS_C_Get_All_AAS_Follower_Components, Temp_int_Array_Index_Variable) == 0x000038, "Member 'BPFL_AAS_C_Get_All_AAS_Follower_Components::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BPFL_AAS_C_Get_All_AAS_Follower_Components, CallFunc_Array_Length_ReturnValue) == 0x00003C, "Member 'BPFL_AAS_C_Get_All_AAS_Follower_Components::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPFL_AAS_C_Get_All_AAS_Follower_Components, CallFunc_Array_Get_Item) == 0x000040, "Member 'BPFL_AAS_C_Get_All_AAS_Follower_Components::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BPFL_AAS_C_Get_All_AAS_Follower_Components, CallFunc_GetComponentByClass_ReturnValue) == 0x000048, "Member 'BPFL_AAS_C_Get_All_AAS_Follower_Components::CallFunc_GetComponentByClass_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPFL_AAS_C_Get_All_AAS_Follower_Components, Temp_int_Loop_Counter_Variable) == 0x000050, "Member 'BPFL_AAS_C_Get_All_AAS_Follower_Components::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BPFL_AAS_C_Get_All_AAS_Follower_Components, CallFunc_IsValid_ReturnValue) == 0x000054, "Member 'BPFL_AAS_C_Get_All_AAS_Follower_Components::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPFL_AAS_C_Get_All_AAS_Follower_Components, CallFunc_Less_IntInt_ReturnValue) == 0x000055, "Member 'BPFL_AAS_C_Get_All_AAS_Follower_Components::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPFL_AAS_C_Get_All_AAS_Follower_Components, CallFunc_Add_IntInt_ReturnValue) == 0x000058, "Member 'BPFL_AAS_C_Get_All_AAS_Follower_Components::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPFL_AAS_C_Get_All_AAS_Follower_Components, CallFunc_Array_Add_ReturnValue) == 0x00005C, "Member 'BPFL_AAS_C_Get_All_AAS_Follower_Components::CallFunc_Array_Add_ReturnValue' has a wrong offset!");

// Function BPFL_AAS.BPFL_AAS_C.AsteroidFloatMapper
// 0x0028 (0x0028 - 0x0000)
struct BPFL_AAS_C_AsteroidFloatMapper final
{
public:
	float                                         Value;                                             // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Threshold;                                         // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Strength;                                          // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                __WorldContext;                                    // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ReturnValue;                                       // 0x0018(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_MapThreshold_ReturnValue;                 // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue;          // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPFL_AAS_C_AsteroidFloatMapper) == 0x000008, "Wrong alignment on BPFL_AAS_C_AsteroidFloatMapper");
static_assert(sizeof(BPFL_AAS_C_AsteroidFloatMapper) == 0x000028, "Wrong size on BPFL_AAS_C_AsteroidFloatMapper");
static_assert(offsetof(BPFL_AAS_C_AsteroidFloatMapper, Value) == 0x000000, "Member 'BPFL_AAS_C_AsteroidFloatMapper::Value' has a wrong offset!");
static_assert(offsetof(BPFL_AAS_C_AsteroidFloatMapper, Threshold) == 0x000004, "Member 'BPFL_AAS_C_AsteroidFloatMapper::Threshold' has a wrong offset!");
static_assert(offsetof(BPFL_AAS_C_AsteroidFloatMapper, Strength) == 0x000008, "Member 'BPFL_AAS_C_AsteroidFloatMapper::Strength' has a wrong offset!");
static_assert(offsetof(BPFL_AAS_C_AsteroidFloatMapper, __WorldContext) == 0x000010, "Member 'BPFL_AAS_C_AsteroidFloatMapper::__WorldContext' has a wrong offset!");
static_assert(offsetof(BPFL_AAS_C_AsteroidFloatMapper, ReturnValue) == 0x000018, "Member 'BPFL_AAS_C_AsteroidFloatMapper::ReturnValue' has a wrong offset!");
static_assert(offsetof(BPFL_AAS_C_AsteroidFloatMapper, CallFunc_MapThreshold_ReturnValue) == 0x00001C, "Member 'BPFL_AAS_C_AsteroidFloatMapper::CallFunc_MapThreshold_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPFL_AAS_C_AsteroidFloatMapper, CallFunc_Multiply_FloatFloat_ReturnValue) == 0x000020, "Member 'BPFL_AAS_C_AsteroidFloatMapper::CallFunc_Multiply_FloatFloat_ReturnValue' has a wrong offset!");

// Function BPFL_AAS.BPFL_AAS_C.MapThresholdNew
// 0x0020 (0x0020 - 0x0000)
struct BPFL_AAS_C_MapThresholdNew final
{
public:
	float                                         Value;                                             // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Threshold;                                         // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UObject*                                __WorldContext;                                    // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ReturnValue;                                       // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_MapRangeClamped_ReturnValue;              // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_FloatFloat_ReturnValue;         // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_SelectFloat_ReturnValue;                  // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPFL_AAS_C_MapThresholdNew) == 0x000008, "Wrong alignment on BPFL_AAS_C_MapThresholdNew");
static_assert(sizeof(BPFL_AAS_C_MapThresholdNew) == 0x000020, "Wrong size on BPFL_AAS_C_MapThresholdNew");
static_assert(offsetof(BPFL_AAS_C_MapThresholdNew, Value) == 0x000000, "Member 'BPFL_AAS_C_MapThresholdNew::Value' has a wrong offset!");
static_assert(offsetof(BPFL_AAS_C_MapThresholdNew, Threshold) == 0x000004, "Member 'BPFL_AAS_C_MapThresholdNew::Threshold' has a wrong offset!");
static_assert(offsetof(BPFL_AAS_C_MapThresholdNew, __WorldContext) == 0x000008, "Member 'BPFL_AAS_C_MapThresholdNew::__WorldContext' has a wrong offset!");
static_assert(offsetof(BPFL_AAS_C_MapThresholdNew, ReturnValue) == 0x000010, "Member 'BPFL_AAS_C_MapThresholdNew::ReturnValue' has a wrong offset!");
static_assert(offsetof(BPFL_AAS_C_MapThresholdNew, CallFunc_MapRangeClamped_ReturnValue) == 0x000014, "Member 'BPFL_AAS_C_MapThresholdNew::CallFunc_MapRangeClamped_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPFL_AAS_C_MapThresholdNew, CallFunc_LessEqual_FloatFloat_ReturnValue) == 0x000018, "Member 'BPFL_AAS_C_MapThresholdNew::CallFunc_LessEqual_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPFL_AAS_C_MapThresholdNew, CallFunc_SelectFloat_ReturnValue) == 0x00001C, "Member 'BPFL_AAS_C_MapThresholdNew::CallFunc_SelectFloat_ReturnValue' has a wrong offset!");

// Function BPFL_AAS.BPFL_AAS_C.AsteroidScaleShrinkingNew
// 0x0050 (0x0050 - 0x0000)
struct BPFL_AAS_C_AsteroidScaleShrinkingNew final
{
public:
	float                                         Value;                                             // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                OriginalScale;                                     // 0x0004(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Threshold;                                         // 0x0010(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Strength;                                          // 0x0014(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UObject*                                __WorldContext;                                    // 0x0018(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Shrinked_Scale;                                    // 0x0020(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_MapThresholdNew_ReturnValue;              // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue;          // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorFloat_ReturnValue;         // 0x0034(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Subtract_VectorVector_ReturnValue;        // 0x0040(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPFL_AAS_C_AsteroidScaleShrinkingNew) == 0x000008, "Wrong alignment on BPFL_AAS_C_AsteroidScaleShrinkingNew");
static_assert(sizeof(BPFL_AAS_C_AsteroidScaleShrinkingNew) == 0x000050, "Wrong size on BPFL_AAS_C_AsteroidScaleShrinkingNew");
static_assert(offsetof(BPFL_AAS_C_AsteroidScaleShrinkingNew, Value) == 0x000000, "Member 'BPFL_AAS_C_AsteroidScaleShrinkingNew::Value' has a wrong offset!");
static_assert(offsetof(BPFL_AAS_C_AsteroidScaleShrinkingNew, OriginalScale) == 0x000004, "Member 'BPFL_AAS_C_AsteroidScaleShrinkingNew::OriginalScale' has a wrong offset!");
static_assert(offsetof(BPFL_AAS_C_AsteroidScaleShrinkingNew, Threshold) == 0x000010, "Member 'BPFL_AAS_C_AsteroidScaleShrinkingNew::Threshold' has a wrong offset!");
static_assert(offsetof(BPFL_AAS_C_AsteroidScaleShrinkingNew, Strength) == 0x000014, "Member 'BPFL_AAS_C_AsteroidScaleShrinkingNew::Strength' has a wrong offset!");
static_assert(offsetof(BPFL_AAS_C_AsteroidScaleShrinkingNew, __WorldContext) == 0x000018, "Member 'BPFL_AAS_C_AsteroidScaleShrinkingNew::__WorldContext' has a wrong offset!");
static_assert(offsetof(BPFL_AAS_C_AsteroidScaleShrinkingNew, Shrinked_Scale) == 0x000020, "Member 'BPFL_AAS_C_AsteroidScaleShrinkingNew::Shrinked_Scale' has a wrong offset!");
static_assert(offsetof(BPFL_AAS_C_AsteroidScaleShrinkingNew, CallFunc_MapThresholdNew_ReturnValue) == 0x00002C, "Member 'BPFL_AAS_C_AsteroidScaleShrinkingNew::CallFunc_MapThresholdNew_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPFL_AAS_C_AsteroidScaleShrinkingNew, CallFunc_Multiply_FloatFloat_ReturnValue) == 0x000030, "Member 'BPFL_AAS_C_AsteroidScaleShrinkingNew::CallFunc_Multiply_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPFL_AAS_C_AsteroidScaleShrinkingNew, CallFunc_Multiply_VectorFloat_ReturnValue) == 0x000034, "Member 'BPFL_AAS_C_AsteroidScaleShrinkingNew::CallFunc_Multiply_VectorFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPFL_AAS_C_AsteroidScaleShrinkingNew, CallFunc_Subtract_VectorVector_ReturnValue) == 0x000040, "Member 'BPFL_AAS_C_AsteroidScaleShrinkingNew::CallFunc_Subtract_VectorVector_ReturnValue' has a wrong offset!");

// Function BPFL_AAS.BPFL_AAS_C.GetModifierData
// 0x0088 (0x0088 - 0x0000)
struct BPFL_AAS_C_GetModifierData final
{
public:
	struct FStruct_AAS_Modifier                   AAS_Modifier;                                      // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRandomStream                          Generation_Stream;                                 // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor)
	struct FRandomStream                          Randomness_Stream;                                 // 0x0018(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor)
	float                                         Value;                                             // 0x0020(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                __WorldContext;                                    // 0x0028(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Valid;                                             // 0x0030(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Bool_Value;                                        // 0x0031(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_32[0x2];                                       // 0x0032(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Float_Value;                                       // 0x0034(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_RandomFloatInRangeFromStream_ReturnValue; // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_RandomBoolWithWeightFromStream_ReturnValue; // 0x003C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3D[0x3];                                       // 0x003D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetFloatValue_ReturnValue;                // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0044(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0045(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_46[0x2];                                       // 0x0046(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_FClamp_ReturnValue;                       // 0x0048(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue;          // 0x004C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_RandomBoolWithWeightFromStream_ReturnValue_1; // 0x0050(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_51[0x3];                                       // 0x0051(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_RandomFloatInRangeFromStream_ReturnValue_1; // 0x0054(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue;           // 0x0058(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_59[0x3];                                       // 0x0059(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_FClamp_ReturnValue_1;                     // 0x005C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue_1;         // 0x0060(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_61[0x3];                                       // 0x0061(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Divide_FloatFloat_ReturnValue;            // 0x0064(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0068(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_69[0x3];                                       // 0x0069(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_1;        // 0x006C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue;               // 0x0070(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_FloatFloat_ReturnValue;         // 0x0074(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_75[0x3];                                       // 0x0075(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_SelectFloat_ReturnValue;                  // 0x0078(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x007C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7D[0x3];                                       // 0x007D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_FClamp_ReturnValue_2;                     // 0x0080(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_1;                              // 0x0084(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_Select_Default;                             // 0x0085(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_Select_Default_1;                           // 0x0086(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPFL_AAS_C_GetModifierData) == 0x000008, "Wrong alignment on BPFL_AAS_C_GetModifierData");
static_assert(sizeof(BPFL_AAS_C_GetModifierData) == 0x000088, "Wrong size on BPFL_AAS_C_GetModifierData");
static_assert(offsetof(BPFL_AAS_C_GetModifierData, AAS_Modifier) == 0x000000, "Member 'BPFL_AAS_C_GetModifierData::AAS_Modifier' has a wrong offset!");
static_assert(offsetof(BPFL_AAS_C_GetModifierData, Generation_Stream) == 0x000010, "Member 'BPFL_AAS_C_GetModifierData::Generation_Stream' has a wrong offset!");
static_assert(offsetof(BPFL_AAS_C_GetModifierData, Randomness_Stream) == 0x000018, "Member 'BPFL_AAS_C_GetModifierData::Randomness_Stream' has a wrong offset!");
static_assert(offsetof(BPFL_AAS_C_GetModifierData, Value) == 0x000020, "Member 'BPFL_AAS_C_GetModifierData::Value' has a wrong offset!");
static_assert(offsetof(BPFL_AAS_C_GetModifierData, __WorldContext) == 0x000028, "Member 'BPFL_AAS_C_GetModifierData::__WorldContext' has a wrong offset!");
static_assert(offsetof(BPFL_AAS_C_GetModifierData, Valid) == 0x000030, "Member 'BPFL_AAS_C_GetModifierData::Valid' has a wrong offset!");
static_assert(offsetof(BPFL_AAS_C_GetModifierData, Bool_Value) == 0x000031, "Member 'BPFL_AAS_C_GetModifierData::Bool_Value' has a wrong offset!");
static_assert(offsetof(BPFL_AAS_C_GetModifierData, Float_Value) == 0x000034, "Member 'BPFL_AAS_C_GetModifierData::Float_Value' has a wrong offset!");
static_assert(offsetof(BPFL_AAS_C_GetModifierData, CallFunc_RandomFloatInRangeFromStream_ReturnValue) == 0x000038, "Member 'BPFL_AAS_C_GetModifierData::CallFunc_RandomFloatInRangeFromStream_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPFL_AAS_C_GetModifierData, CallFunc_RandomBoolWithWeightFromStream_ReturnValue) == 0x00003C, "Member 'BPFL_AAS_C_GetModifierData::CallFunc_RandomBoolWithWeightFromStream_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPFL_AAS_C_GetModifierData, CallFunc_GetFloatValue_ReturnValue) == 0x000040, "Member 'BPFL_AAS_C_GetModifierData::CallFunc_GetFloatValue_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPFL_AAS_C_GetModifierData, CallFunc_IsValid_ReturnValue) == 0x000044, "Member 'BPFL_AAS_C_GetModifierData::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPFL_AAS_C_GetModifierData, CallFunc_IsValid_ReturnValue_1) == 0x000045, "Member 'BPFL_AAS_C_GetModifierData::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BPFL_AAS_C_GetModifierData, CallFunc_FClamp_ReturnValue) == 0x000048, "Member 'BPFL_AAS_C_GetModifierData::CallFunc_FClamp_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPFL_AAS_C_GetModifierData, CallFunc_Multiply_FloatFloat_ReturnValue) == 0x00004C, "Member 'BPFL_AAS_C_GetModifierData::CallFunc_Multiply_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPFL_AAS_C_GetModifierData, CallFunc_RandomBoolWithWeightFromStream_ReturnValue_1) == 0x000050, "Member 'BPFL_AAS_C_GetModifierData::CallFunc_RandomBoolWithWeightFromStream_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BPFL_AAS_C_GetModifierData, CallFunc_RandomFloatInRangeFromStream_ReturnValue_1) == 0x000054, "Member 'BPFL_AAS_C_GetModifierData::CallFunc_RandomFloatInRangeFromStream_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BPFL_AAS_C_GetModifierData, CallFunc_Greater_FloatFloat_ReturnValue) == 0x000058, "Member 'BPFL_AAS_C_GetModifierData::CallFunc_Greater_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPFL_AAS_C_GetModifierData, CallFunc_FClamp_ReturnValue_1) == 0x00005C, "Member 'BPFL_AAS_C_GetModifierData::CallFunc_FClamp_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BPFL_AAS_C_GetModifierData, CallFunc_Greater_FloatFloat_ReturnValue_1) == 0x000060, "Member 'BPFL_AAS_C_GetModifierData::CallFunc_Greater_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BPFL_AAS_C_GetModifierData, CallFunc_Divide_FloatFloat_ReturnValue) == 0x000064, "Member 'BPFL_AAS_C_GetModifierData::CallFunc_Divide_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPFL_AAS_C_GetModifierData, CallFunc_BooleanAND_ReturnValue) == 0x000068, "Member 'BPFL_AAS_C_GetModifierData::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPFL_AAS_C_GetModifierData, CallFunc_Multiply_FloatFloat_ReturnValue_1) == 0x00006C, "Member 'BPFL_AAS_C_GetModifierData::CallFunc_Multiply_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BPFL_AAS_C_GetModifierData, CallFunc_Add_FloatFloat_ReturnValue) == 0x000070, "Member 'BPFL_AAS_C_GetModifierData::CallFunc_Add_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPFL_AAS_C_GetModifierData, CallFunc_LessEqual_FloatFloat_ReturnValue) == 0x000074, "Member 'BPFL_AAS_C_GetModifierData::CallFunc_LessEqual_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPFL_AAS_C_GetModifierData, CallFunc_SelectFloat_ReturnValue) == 0x000078, "Member 'BPFL_AAS_C_GetModifierData::CallFunc_SelectFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPFL_AAS_C_GetModifierData, Temp_bool_Variable) == 0x00007C, "Member 'BPFL_AAS_C_GetModifierData::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(BPFL_AAS_C_GetModifierData, CallFunc_FClamp_ReturnValue_2) == 0x000080, "Member 'BPFL_AAS_C_GetModifierData::CallFunc_FClamp_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BPFL_AAS_C_GetModifierData, Temp_bool_Variable_1) == 0x000084, "Member 'BPFL_AAS_C_GetModifierData::Temp_bool_Variable_1' has a wrong offset!");
static_assert(offsetof(BPFL_AAS_C_GetModifierData, K2Node_Select_Default) == 0x000085, "Member 'BPFL_AAS_C_GetModifierData::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(BPFL_AAS_C_GetModifierData, K2Node_Select_Default_1) == 0x000086, "Member 'BPFL_AAS_C_GetModifierData::K2Node_Select_Default_1' has a wrong offset!");

}

