#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: bpc_ac_ModalWindowManager

#include "Basic.hpp"

#include "bpc_ac_ModalWindowManager_classes.hpp"
#include "bpc_ac_ModalWindowManager_parameters.hpp"


namespace SDK
{

// Function bpc_ac_ModalWindowManager.bpc_ac_ModalWindowManager_C.ExecuteUbergraph_bpc_ac_ModalWindowManager
// (Final, UbergraphFunction)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void Ubpc_ac_ModalWindowManager_C::ExecuteUbergraph_bpc_ac_ModalWindowManager(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("bpc_ac_ModalWindowManager_C", "ExecuteUbergraph_bpc_ac_ModalWindowManager");

	Params::bpc_ac_ModalWindowManager_C_ExecuteUbergraph_bpc_ac_ModalWindowManager Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function bpc_ac_ModalWindowManager.bpc_ac_ModalWindowManager_C.Hide Active Modal Window
// (BlueprintCallable, BlueprintEvent)

void Ubpc_ac_ModalWindowManager_C::Hide_Active_Modal_Window()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("bpc_ac_ModalWindowManager_C", "Hide Active Modal Window");

	UObject::ProcessEvent(Func, nullptr);
}


// Function bpc_ac_ModalWindowManager.bpc_ac_ModalWindowManager_C.Internal SetInputMode
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Active_Modal_Window_0                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void Ubpc_ac_ModalWindowManager_C::Internal_SetInputMode(bool Active_Modal_Window_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("bpc_ac_ModalWindowManager_C", "Internal SetInputMode");

	Params::bpc_ac_ModalWindowManager_C_Internal_SetInputMode Parms{};

	Parms.Active_Modal_Window_0 = Active_Modal_Window_0;

	UObject::ProcessEvent(Func, &Parms);
}


// Function bpc_ac_ModalWindowManager.bpc_ac_ModalWindowManager_C.Try Close Modal Window
// (BlueprintCallable, BlueprintEvent)

void Ubpc_ac_ModalWindowManager_C::Try_Close_Modal_Window()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("bpc_ac_ModalWindowManager_C", "Try Close Modal Window");

	UObject::ProcessEvent(Func, nullptr);
}


// Function bpc_ac_ModalWindowManager.bpc_ac_ModalWindowManager_C.Internal Prioritize Modal Window
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// EInGameModalWidgets                     Desired_Modal_Window_to_Toggle                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UUserWidget*                      WidgetCandidate                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UUserWidget*                      VisibleWidget                                          (Parm, OutParm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void Ubpc_ac_ModalWindowManager_C::Internal_Prioritize_Modal_Window(EInGameModalWidgets Desired_Modal_Window_to_Toggle, class UUserWidget* WidgetCandidate, class UUserWidget** VisibleWidget)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("bpc_ac_ModalWindowManager_C", "Internal Prioritize Modal Window");

	Params::bpc_ac_ModalWindowManager_C_Internal_Prioritize_Modal_Window Parms{};

	Parms.Desired_Modal_Window_to_Toggle = Desired_Modal_Window_to_Toggle;
	Parms.WidgetCandidate = WidgetCandidate;

	UObject::ProcessEvent(Func, &Parms);

	if (VisibleWidget != nullptr)
		*VisibleWidget = Parms.VisibleWidget;
}


// Function bpc_ac_ModalWindowManager.bpc_ac_ModalWindowManager_C.Internal Set New Active Window
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// EInGameModalWidgets                     New_Active_modal_window                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void Ubpc_ac_ModalWindowManager_C::Internal_Set_New_Active_Window(EInGameModalWidgets New_Active_modal_window)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("bpc_ac_ModalWindowManager_C", "Internal Set New Active Window");

	Params::bpc_ac_ModalWindowManager_C_Internal_Set_New_Active_Window Parms{};

	Parms.New_Active_modal_window = New_Active_modal_window;

	UObject::ProcessEvent(Func, &Parms);
}


// Function bpc_ac_ModalWindowManager.bpc_ac_ModalWindowManager_C.GetInGameWidget
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class UUserWidget*                      Return_Value                                           (Parm, OutParm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void Ubpc_ac_ModalWindowManager_C::GetInGameWidget(class UUserWidget** Return_Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("bpc_ac_ModalWindowManager_C", "GetInGameWidget");

	Params::bpc_ac_ModalWindowManager_C_GetInGameWidget Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Return_Value != nullptr)
		*Return_Value = Parms.Return_Value;
}


// Function bpc_ac_ModalWindowManager.bpc_ac_ModalWindowManager_C.GetAirlockVotingBoxWidget
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class UUserWidget*                      Return_Value                                           (Parm, OutParm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void Ubpc_ac_ModalWindowManager_C::GetAirlockVotingBoxWidget(class UUserWidget** Return_Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("bpc_ac_ModalWindowManager_C", "GetAirlockVotingBoxWidget");

	Params::bpc_ac_ModalWindowManager_C_GetAirlockVotingBoxWidget Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Return_Value != nullptr)
		*Return_Value = Parms.Return_Value;
}


// Function bpc_ac_ModalWindowManager.bpc_ac_ModalWindowManager_C.Toggle Airlock Voting box
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class Ubp_wi_VotingBox_C*               Visible_Voting_Box                                     (Parm, OutParm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void Ubpc_ac_ModalWindowManager_C::Toggle_Airlock_Voting_box(class Ubp_wi_VotingBox_C** Visible_Voting_Box)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("bpc_ac_ModalWindowManager_C", "Toggle Airlock Voting box");

	Params::bpc_ac_ModalWindowManager_C_Toggle_Airlock_Voting_box Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Visible_Voting_Box != nullptr)
		*Visible_Voting_Box = Parms.Visible_Voting_Box;
}


// Function bpc_ac_ModalWindowManager.bpc_ac_ModalWindowManager_C.Toggle Thumb Vote
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UUserWidget*                      Thumb_vote_Widget                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class Ubp_wi_ThumbsVoteMenu_C*          Visible_thumb_vote_Widget                              (Parm, OutParm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void Ubpc_ac_ModalWindowManager_C::Toggle_Thumb_Vote(class UUserWidget* Thumb_vote_Widget, class Ubp_wi_ThumbsVoteMenu_C** Visible_thumb_vote_Widget)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("bpc_ac_ModalWindowManager_C", "Toggle Thumb Vote");

	Params::bpc_ac_ModalWindowManager_C_Toggle_Thumb_Vote Parms{};

	Parms.Thumb_vote_Widget = Thumb_vote_Widget;

	UObject::ProcessEvent(Func, &Parms);

	if (Visible_thumb_vote_Widget != nullptr)
		*Visible_thumb_vote_Widget = Parms.Visible_thumb_vote_Widget;
}


// Function bpc_ac_ModalWindowManager.bpc_ac_ModalWindowManager_C.Toggle Puzzle Widget
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class Ubp_wi_Puzzle_C*                  Puzzle_Puzzle_Widget                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UUserWidget*                      Visible_Puzzle_Widget                                  (Parm, OutParm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void Ubpc_ac_ModalWindowManager_C::Toggle_Puzzle_Widget(class Ubp_wi_Puzzle_C* Puzzle_Puzzle_Widget, class UUserWidget** Visible_Puzzle_Widget)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("bpc_ac_ModalWindowManager_C", "Toggle Puzzle Widget");

	Params::bpc_ac_ModalWindowManager_C_Toggle_Puzzle_Widget Parms{};

	Parms.Puzzle_Puzzle_Widget = Puzzle_Puzzle_Widget;

	UObject::ProcessEvent(Func, &Parms);

	if (Visible_Puzzle_Widget != nullptr)
		*Visible_Puzzle_Widget = Parms.Visible_Puzzle_Widget;
}


// Function bpc_ac_ModalWindowManager.bpc_ac_ModalWindowManager_C.Toggle Ingame Menu
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UUserWidget*                      Visible_Ingame_Widget                                  (Parm, OutParm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void Ubpc_ac_ModalWindowManager_C::Toggle_Ingame_Menu(class UUserWidget** Visible_Ingame_Widget)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("bpc_ac_ModalWindowManager_C", "Toggle Ingame Menu");

	Params::bpc_ac_ModalWindowManager_C_Toggle_Ingame_Menu Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Visible_Ingame_Widget != nullptr)
		*Visible_Ingame_Widget = Parms.Visible_Ingame_Widget;
}


// Function bpc_ac_ModalWindowManager.bpc_ac_ModalWindowManager_C.SetActiveWidget
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UUserWidget*                      New_User_Widget                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void Ubpc_ac_ModalWindowManager_C::SetActiveWidget(class UUserWidget* New_User_Widget)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("bpc_ac_ModalWindowManager_C", "SetActiveWidget");

	Params::bpc_ac_ModalWindowManager_C_SetActiveWidget Parms{};

	Parms.New_User_Widget = New_User_Widget;

	UObject::ProcessEvent(Func, &Parms);
}


// Function bpc_ac_ModalWindowManager.bpc_ac_ModalWindowManager_C.ClearActiveWidget
// (Public, BlueprintCallable, BlueprintEvent)

void Ubpc_ac_ModalWindowManager_C::ClearActiveWidget()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("bpc_ac_ModalWindowManager_C", "ClearActiveWidget");

	UObject::ProcessEvent(Func, nullptr);
}


// Function bpc_ac_ModalWindowManager.bpc_ac_ModalWindowManager_C.SetPreviousModalWindow
// (Public, BlueprintCallable, BlueprintEvent)

void Ubpc_ac_ModalWindowManager_C::SetPreviousModalWindow()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("bpc_ac_ModalWindowManager_C", "SetPreviousModalWindow");

	UObject::ProcessEvent(Func, nullptr);
}


// Function bpc_ac_ModalWindowManager.bpc_ac_ModalWindowManager_C.IsModalVisible
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)

bool Ubpc_ac_ModalWindowManager_C::IsModalVisible() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("bpc_ac_ModalWindowManager_C", "IsModalVisible");

	Params::bpc_ac_ModalWindowManager_C_IsModalVisible Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}

}

