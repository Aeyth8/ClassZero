#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_AquaticSimulation

#include "Basic.hpp"

#include "BE_Resolution_structs.hpp"
#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "BS_AquaticInteraction_structs.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_AquaticSimulation.BP_AquaticSimulation_C
// 0x0128 (0x0348 - 0x0220)
class ABP_AquaticSimulation_C final : public AActor
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0220(0x0008)(ZeroConstructor, Transient, DuplicateTransient, UObjectWrapper)
	class UStaticMeshComponent*                   Plane;                                             // 0x0228(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBoxComponent*                          Volume;                                            // 0x0230(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        DefaultSceneRoot;                                  // 0x0238(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	int32                                         FrameIndex;                                        // 0x0240(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         TimeAccumulator;                                   // 0x0244(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         AreaSize;                                          // 0x0248(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_24C[0x4];                                      // 0x024C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInstanceDynamic*               SimulationInstance;                                // 0x0250(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               SplatInstance;                                     // 0x0258(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class ABP_AquaticSurface_C*>           AquaticSurfaces;                                   // 0x0260(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate)
	TArray<class ABP_AquaticCaustic_C*>           AquaticCaustics;                                   // 0x0270(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate)
	int32                                         TextureResolution;                                 // 0x0280(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              TargetPoint;                                       // 0x0284(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_28C[0x4];                                      // 0x028C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FBS_AquaticInteraction>         Interactions;                                      // 0x0290(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	int32                                         RemoveInteraction;                                 // 0x02A0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         TextureToWorld;                                    // 0x02A4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              HalfSize;                                          // 0x02A8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         InterpStepSize;                                    // 0x02B0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         AreaSizeInv;                                       // 0x02B4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              LocationShift;                                     // 0x02B8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              LocationShiftPrev;                                 // 0x02C0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         TextureResolutionInv;                              // 0x02C8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         WorldToTexture;                                    // 0x02CC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         UpdateRate;                                        // 0x02D0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         AnimationRate;                                     // 0x02D4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         MaxInterationsPerFrame;                            // 0x02D8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MaxTimeAccumulator;                                // 0x02DC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         MaxCameraDistance;                                 // 0x02E0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         WaveTravelSpeed;                                   // 0x02E4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         WaveDamping;                                       // 0x02E8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         WaveNormalScale;                                   // 0x02EC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class UTextureRenderTarget2D*>         RenderTargets;                                     // 0x02F0(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FVector2D                              SimulationFocus;                                   // 0x0300(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         SimulationCameraRadiusSq;                          // 0x0308(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         SimulationCameraForward;                           // 0x030C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         SimulationCameraDistance;                          // 0x0310(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FIntVector                             PrevWorldOrigin;                                   // 0x0314(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          DoInteractionUpdate;                               // 0x0320(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_321[0x7];                                      // 0x0321(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInstanceDynamic*               PreviewTexture;                                    // 0x0328(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EBE_Resolution                                AreaResolution;                                    // 0x0330(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_331[0x3];                                      // 0x0331(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         AreaScaleRatio;                                    // 0x0334(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CameraForwardRatio;                                // 0x0338(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CameraDistanceRatio;                               // 0x033C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         SimulationInterpSpeed;                             // 0x0340(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          DrawDebug;                                         // 0x0344(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CineamaticRenderTarget;                            // 0x0345(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)

public:
	void ExecuteUbergraph_BP_AquaticSimulation(int32 EntryPoint);
	void UpdateTransform();
	void ReceiveBeginPlay();
	void ReceiveTick(float DeltaSeconds);
	void UserConstructionScript();
	void GetRenderTarget(int32 NumFramesOld, class UTextureRenderTarget2D** HeightRT);
	void UpdateInteraction(class UCanvas* Canvas, const struct FVector2D& ScreenSize, int32 Interaction, float DeltaTime);
	void AddInteractionActor(class ABP_AquaticSurface_C* InteractionSurface, class AActor* Target);
	void RemoveInteractionActor(class AActor* Target);
	void UpdateInteractionTime(int32 Index_0, float DeltaTime, bool* Draw);
	void UpdateRenderPosition();
	void RemoveInteractionFinished();
	void SetTargetPoint(const struct FVector& TargetLocation, float InterpSpeed, float MaxDistance);
	void AddInteraction(const struct FBS_AquaticInteractionData& Interaction, const struct FVector& Location, float Duration, bool VisibilityTest);
	void DebugDraw();
	class UTextureRenderTarget2D* NewRenderTarget();
	void DrawSplat(const struct FVector2D& ScreenSize, class UCanvas* Canvas, float ForceSize, const struct FVector& Location, float Radius);
	void UpdateSimulationFocus();
	void SpawnSplash(struct FBS_AquaticInteraction& Interaction, class ABP_AquaticSurface_C* Surface, const struct FVector& NewLocation);
	void OnWorldOriginChanged(const struct FIntVector& OldLocation, const struct FIntVector& NewLocation, bool* Update);
	void DoSimulationStep(float DeltaTime);
	void UpdateSimulation(float DeltaTime);

	bool IsLocal() const;

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_AquaticSimulation_C">();
	}
	static class ABP_AquaticSimulation_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_AquaticSimulation_C>();
	}
};
static_assert(alignof(ABP_AquaticSimulation_C) == 0x000008, "Wrong alignment on ABP_AquaticSimulation_C");
static_assert(sizeof(ABP_AquaticSimulation_C) == 0x000348, "Wrong size on ABP_AquaticSimulation_C");
static_assert(offsetof(ABP_AquaticSimulation_C, UberGraphFrame) == 0x000220, "Member 'ABP_AquaticSimulation_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_AquaticSimulation_C, Plane) == 0x000228, "Member 'ABP_AquaticSimulation_C::Plane' has a wrong offset!");
static_assert(offsetof(ABP_AquaticSimulation_C, Volume) == 0x000230, "Member 'ABP_AquaticSimulation_C::Volume' has a wrong offset!");
static_assert(offsetof(ABP_AquaticSimulation_C, DefaultSceneRoot) == 0x000238, "Member 'ABP_AquaticSimulation_C::DefaultSceneRoot' has a wrong offset!");
static_assert(offsetof(ABP_AquaticSimulation_C, FrameIndex) == 0x000240, "Member 'ABP_AquaticSimulation_C::FrameIndex' has a wrong offset!");
static_assert(offsetof(ABP_AquaticSimulation_C, TimeAccumulator) == 0x000244, "Member 'ABP_AquaticSimulation_C::TimeAccumulator' has a wrong offset!");
static_assert(offsetof(ABP_AquaticSimulation_C, AreaSize) == 0x000248, "Member 'ABP_AquaticSimulation_C::AreaSize' has a wrong offset!");
static_assert(offsetof(ABP_AquaticSimulation_C, SimulationInstance) == 0x000250, "Member 'ABP_AquaticSimulation_C::SimulationInstance' has a wrong offset!");
static_assert(offsetof(ABP_AquaticSimulation_C, SplatInstance) == 0x000258, "Member 'ABP_AquaticSimulation_C::SplatInstance' has a wrong offset!");
static_assert(offsetof(ABP_AquaticSimulation_C, AquaticSurfaces) == 0x000260, "Member 'ABP_AquaticSimulation_C::AquaticSurfaces' has a wrong offset!");
static_assert(offsetof(ABP_AquaticSimulation_C, AquaticCaustics) == 0x000270, "Member 'ABP_AquaticSimulation_C::AquaticCaustics' has a wrong offset!");
static_assert(offsetof(ABP_AquaticSimulation_C, TextureResolution) == 0x000280, "Member 'ABP_AquaticSimulation_C::TextureResolution' has a wrong offset!");
static_assert(offsetof(ABP_AquaticSimulation_C, TargetPoint) == 0x000284, "Member 'ABP_AquaticSimulation_C::TargetPoint' has a wrong offset!");
static_assert(offsetof(ABP_AquaticSimulation_C, Interactions) == 0x000290, "Member 'ABP_AquaticSimulation_C::Interactions' has a wrong offset!");
static_assert(offsetof(ABP_AquaticSimulation_C, RemoveInteraction) == 0x0002A0, "Member 'ABP_AquaticSimulation_C::RemoveInteraction' has a wrong offset!");
static_assert(offsetof(ABP_AquaticSimulation_C, TextureToWorld) == 0x0002A4, "Member 'ABP_AquaticSimulation_C::TextureToWorld' has a wrong offset!");
static_assert(offsetof(ABP_AquaticSimulation_C, HalfSize) == 0x0002A8, "Member 'ABP_AquaticSimulation_C::HalfSize' has a wrong offset!");
static_assert(offsetof(ABP_AquaticSimulation_C, InterpStepSize) == 0x0002B0, "Member 'ABP_AquaticSimulation_C::InterpStepSize' has a wrong offset!");
static_assert(offsetof(ABP_AquaticSimulation_C, AreaSizeInv) == 0x0002B4, "Member 'ABP_AquaticSimulation_C::AreaSizeInv' has a wrong offset!");
static_assert(offsetof(ABP_AquaticSimulation_C, LocationShift) == 0x0002B8, "Member 'ABP_AquaticSimulation_C::LocationShift' has a wrong offset!");
static_assert(offsetof(ABP_AquaticSimulation_C, LocationShiftPrev) == 0x0002C0, "Member 'ABP_AquaticSimulation_C::LocationShiftPrev' has a wrong offset!");
static_assert(offsetof(ABP_AquaticSimulation_C, TextureResolutionInv) == 0x0002C8, "Member 'ABP_AquaticSimulation_C::TextureResolutionInv' has a wrong offset!");
static_assert(offsetof(ABP_AquaticSimulation_C, WorldToTexture) == 0x0002CC, "Member 'ABP_AquaticSimulation_C::WorldToTexture' has a wrong offset!");
static_assert(offsetof(ABP_AquaticSimulation_C, UpdateRate) == 0x0002D0, "Member 'ABP_AquaticSimulation_C::UpdateRate' has a wrong offset!");
static_assert(offsetof(ABP_AquaticSimulation_C, AnimationRate) == 0x0002D4, "Member 'ABP_AquaticSimulation_C::AnimationRate' has a wrong offset!");
static_assert(offsetof(ABP_AquaticSimulation_C, MaxInterationsPerFrame) == 0x0002D8, "Member 'ABP_AquaticSimulation_C::MaxInterationsPerFrame' has a wrong offset!");
static_assert(offsetof(ABP_AquaticSimulation_C, MaxTimeAccumulator) == 0x0002DC, "Member 'ABP_AquaticSimulation_C::MaxTimeAccumulator' has a wrong offset!");
static_assert(offsetof(ABP_AquaticSimulation_C, MaxCameraDistance) == 0x0002E0, "Member 'ABP_AquaticSimulation_C::MaxCameraDistance' has a wrong offset!");
static_assert(offsetof(ABP_AquaticSimulation_C, WaveTravelSpeed) == 0x0002E4, "Member 'ABP_AquaticSimulation_C::WaveTravelSpeed' has a wrong offset!");
static_assert(offsetof(ABP_AquaticSimulation_C, WaveDamping) == 0x0002E8, "Member 'ABP_AquaticSimulation_C::WaveDamping' has a wrong offset!");
static_assert(offsetof(ABP_AquaticSimulation_C, WaveNormalScale) == 0x0002EC, "Member 'ABP_AquaticSimulation_C::WaveNormalScale' has a wrong offset!");
static_assert(offsetof(ABP_AquaticSimulation_C, RenderTargets) == 0x0002F0, "Member 'ABP_AquaticSimulation_C::RenderTargets' has a wrong offset!");
static_assert(offsetof(ABP_AquaticSimulation_C, SimulationFocus) == 0x000300, "Member 'ABP_AquaticSimulation_C::SimulationFocus' has a wrong offset!");
static_assert(offsetof(ABP_AquaticSimulation_C, SimulationCameraRadiusSq) == 0x000308, "Member 'ABP_AquaticSimulation_C::SimulationCameraRadiusSq' has a wrong offset!");
static_assert(offsetof(ABP_AquaticSimulation_C, SimulationCameraForward) == 0x00030C, "Member 'ABP_AquaticSimulation_C::SimulationCameraForward' has a wrong offset!");
static_assert(offsetof(ABP_AquaticSimulation_C, SimulationCameraDistance) == 0x000310, "Member 'ABP_AquaticSimulation_C::SimulationCameraDistance' has a wrong offset!");
static_assert(offsetof(ABP_AquaticSimulation_C, PrevWorldOrigin) == 0x000314, "Member 'ABP_AquaticSimulation_C::PrevWorldOrigin' has a wrong offset!");
static_assert(offsetof(ABP_AquaticSimulation_C, DoInteractionUpdate) == 0x000320, "Member 'ABP_AquaticSimulation_C::DoInteractionUpdate' has a wrong offset!");
static_assert(offsetof(ABP_AquaticSimulation_C, PreviewTexture) == 0x000328, "Member 'ABP_AquaticSimulation_C::PreviewTexture' has a wrong offset!");
static_assert(offsetof(ABP_AquaticSimulation_C, AreaResolution) == 0x000330, "Member 'ABP_AquaticSimulation_C::AreaResolution' has a wrong offset!");
static_assert(offsetof(ABP_AquaticSimulation_C, AreaScaleRatio) == 0x000334, "Member 'ABP_AquaticSimulation_C::AreaScaleRatio' has a wrong offset!");
static_assert(offsetof(ABP_AquaticSimulation_C, CameraForwardRatio) == 0x000338, "Member 'ABP_AquaticSimulation_C::CameraForwardRatio' has a wrong offset!");
static_assert(offsetof(ABP_AquaticSimulation_C, CameraDistanceRatio) == 0x00033C, "Member 'ABP_AquaticSimulation_C::CameraDistanceRatio' has a wrong offset!");
static_assert(offsetof(ABP_AquaticSimulation_C, SimulationInterpSpeed) == 0x000340, "Member 'ABP_AquaticSimulation_C::SimulationInterpSpeed' has a wrong offset!");
static_assert(offsetof(ABP_AquaticSimulation_C, DrawDebug) == 0x000344, "Member 'ABP_AquaticSimulation_C::DrawDebug' has a wrong offset!");
static_assert(offsetof(ABP_AquaticSimulation_C, CineamaticRenderTarget) == 0x000345, "Member 'ABP_AquaticSimulation_C::CineamaticRenderTarget' has a wrong offset!");

}

