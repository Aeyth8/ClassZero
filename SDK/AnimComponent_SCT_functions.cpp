#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: AnimComponent_SCT

#include "Basic.hpp"

#include "AnimComponent_SCT_classes.hpp"
#include "AnimComponent_SCT_parameters.hpp"


namespace SDK
{

// Function AnimComponent_SCT.AnimComponent_SCT_C.ExecuteUbergraph_AnimComponent_SCT
// (Final, UbergraphFunction, HasDefaults)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UAnimComponent_SCT_C::ExecuteUbergraph_AnimComponent_SCT(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AnimComponent_SCT_C", "ExecuteUbergraph_AnimComponent_SCT");

	Params::AnimComponent_SCT_C_ExecuteUbergraph_AnimComponent_SCT Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function AnimComponent_SCT.AnimComponent_SCT_C.ServerMovementTransform
// (Net, NetServer, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FVector                          MovementInput_0                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FRotator                         LookingRotation_0                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UAnimComponent_SCT_C::ServerMovementTransform(const struct FVector& MovementInput_0, const struct FRotator& LookingRotation_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AnimComponent_SCT_C", "ServerMovementTransform");

	Params::AnimComponent_SCT_C_ServerMovementTransform Parms{};

	Parms.MovementInput_0 = std::move(MovementInput_0);
	Parms.LookingRotation_0 = std::move(LookingRotation_0);

	UObject::ProcessEvent(Func, &Parms);
}


// Function AnimComponent_SCT.AnimComponent_SCT_C.ServerSetGait
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)
// Parameters:
// EGait                                   NewGait                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UAnimComponent_SCT_C::ServerSetGait(EGait NewGait)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AnimComponent_SCT_C", "ServerSetGait");

	Params::AnimComponent_SCT_C_ServerSetGait Parms{};

	Parms.NewGait = NewGait;

	UObject::ProcessEvent(Func, &Parms);
}


// Function AnimComponent_SCT.AnimComponent_SCT_C.ServerRagdoll
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    ToRagdoll                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// struct FVector                          OptionalImpulse                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Force                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UAnimComponent_SCT_C::ServerRagdoll(bool ToRagdoll, const struct FVector& OptionalImpulse, bool Force)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AnimComponent_SCT_C", "ServerRagdoll");

	Params::AnimComponent_SCT_C_ServerRagdoll Parms{};

	Parms.ToRagdoll = ToRagdoll;
	Parms.OptionalImpulse = std::move(OptionalImpulse);
	Parms.Force = Force;

	UObject::ProcessEvent(Func, &Parms);
}


// Function AnimComponent_SCT.AnimComponent_SCT_C.SetCharacterRotationSERVER
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    EnableRotationOverride                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// struct FRotator                         Rotation                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UAnimComponent_SCT_C::SetCharacterRotationSERVER(bool EnableRotationOverride, const struct FRotator& Rotation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AnimComponent_SCT_C", "SetCharacterRotationSERVER");

	Params::AnimComponent_SCT_C_SetCharacterRotationSERVER Parms{};

	Parms.EnableRotationOverride = EnableRotationOverride;
	Parms.Rotation = std::move(Rotation);

	UObject::ProcessEvent(Func, &Parms);
}


// Function AnimComponent_SCT.AnimComponent_SCT_C.ServerPlayEmote
// (Net, NetServer, BlueprintCallable, BlueprintEvent)
// Parameters:
// uint8                                   EmoteID                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UAnimComponent_SCT_C::ServerPlayEmote(uint8 EmoteID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AnimComponent_SCT_C", "ServerPlayEmote");

	Params::AnimComponent_SCT_C_ServerPlayEmote Parms{};

	Parms.EmoteID = EmoteID;

	UObject::ProcessEvent(Func, &Parms);
}


// Function AnimComponent_SCT.AnimComponent_SCT_C.MulticastPlayEmote
// (Net, NetMulticast, BlueprintCallable, BlueprintEvent)
// Parameters:
// uint8                                   EmoteID                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UAnimComponent_SCT_C::MulticastPlayEmote(uint8 EmoteID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AnimComponent_SCT_C", "MulticastPlayEmote");

	Params::AnimComponent_SCT_C_MulticastPlayEmote Parms{};

	Parms.EmoteID = EmoteID;

	UObject::ProcessEvent(Func, &Parms);
}


// Function AnimComponent_SCT.AnimComponent_SCT_C.MulticastRagdoll
// (Net, NetReliable, NetMulticast, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    ToRagdoll                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// struct FVector                          NewVel                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          NewLocation                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FRotator                         NewRotation                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UAnimComponent_SCT_C::MulticastRagdoll(bool ToRagdoll, const struct FVector& NewVel, const struct FVector& NewLocation, const struct FRotator& NewRotation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AnimComponent_SCT_C", "MulticastRagdoll");

	Params::AnimComponent_SCT_C_MulticastRagdoll Parms{};

	Parms.ToRagdoll = ToRagdoll;
	Parms.NewVel = std::move(NewVel);
	Parms.NewLocation = std::move(NewLocation);
	Parms.NewRotation = std::move(NewRotation);

	UObject::ProcessEvent(Func, &Parms);
}


// Function AnimComponent_SCT.AnimComponent_SCT_C.AimingServer
// (Net, NetServer, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Aiming                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// uint8                                   AimType_0                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UAnimComponent_SCT_C::AimingServer(bool Aiming, uint8 AimType_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AnimComponent_SCT_C", "AimingServer");

	Params::AnimComponent_SCT_C_AimingServer Parms{};

	Parms.Aiming = Aiming;
	Parms.AimType_0 = AimType_0;

	UObject::ProcessEvent(Func, &Parms);
}


// Function AnimComponent_SCT.AnimComponent_SCT_C.LaunchRagdollServer
// (Net, NetServer, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FTransform                       LaunchTransform_0                                      (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)

void UAnimComponent_SCT_C::LaunchRagdollServer(const struct FTransform& LaunchTransform_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AnimComponent_SCT_C", "LaunchRagdollServer");

	Params::AnimComponent_SCT_C_LaunchRagdollServer Parms{};

	Parms.LaunchTransform_0 = std::move(LaunchTransform_0);

	UObject::ProcessEvent(Func, &Parms);
}


// Function AnimComponent_SCT.AnimComponent_SCT_C.LaunchRagdollMulticast
// (Net, NetMulticast, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FTransform                       LaunchTransform_0                                      (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)

void UAnimComponent_SCT_C::LaunchRagdollMulticast(const struct FTransform& LaunchTransform_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AnimComponent_SCT_C", "LaunchRagdollMulticast");

	Params::AnimComponent_SCT_C_LaunchRagdollMulticast Parms{};

	Parms.LaunchTransform_0 = std::move(LaunchTransform_0);

	UObject::ProcessEvent(Func, &Parms);
}


// Function AnimComponent_SCT.AnimComponent_SCT_C.SetCharacterRotationNONE
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    EnableRotationOverride                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// struct FRotator                         Rotation                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UAnimComponent_SCT_C::SetCharacterRotationNONE(bool EnableRotationOverride, const struct FRotator& Rotation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AnimComponent_SCT_C", "SetCharacterRotationNONE");

	Params::AnimComponent_SCT_C_SetCharacterRotationNONE Parms{};

	Parms.EnableRotationOverride = EnableRotationOverride;
	Parms.Rotation = std::move(Rotation);

	UObject::ProcessEvent(Func, &Parms);
}


// Function AnimComponent_SCT.AnimComponent_SCT_C.SetCharacterRotationMULTICAST
// (Net, NetReliable, NetMulticast, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    EnableRotationOverride                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// struct FRotator                         Rotation                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UAnimComponent_SCT_C::SetCharacterRotationMULTICAST(bool EnableRotationOverride, const struct FRotator& Rotation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AnimComponent_SCT_C", "SetCharacterRotationMULTICAST");

	Params::AnimComponent_SCT_C_SetCharacterRotationMULTICAST Parms{};

	Parms.EnableRotationOverride = EnableRotationOverride;
	Parms.Rotation = std::move(Rotation);

	UObject::ProcessEvent(Func, &Parms);
}


// Function AnimComponent_SCT.AnimComponent_SCT_C.SetCharacterRotationOWNING
// (Net, NetReliable, NetClient, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    EnableRotationOverride                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// struct FRotator                         Rotation                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UAnimComponent_SCT_C::SetCharacterRotationOWNING(bool EnableRotationOverride, const struct FRotator& Rotation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AnimComponent_SCT_C", "SetCharacterRotationOWNING");

	Params::AnimComponent_SCT_C_SetCharacterRotationOWNING Parms{};

	Parms.EnableRotationOverride = EnableRotationOverride;
	Parms.Rotation = std::move(Rotation);

	UObject::ProcessEvent(Func, &Parms);
}


// Function AnimComponent_SCT.AnimComponent_SCT_C.SetCharacterRotationOMNI
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    EnableRotationOverride                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// struct FRotator                         Rotation                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UAnimComponent_SCT_C::SetCharacterRotationOMNI(bool EnableRotationOverride, const struct FRotator& Rotation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AnimComponent_SCT_C", "SetCharacterRotationOMNI");

	Params::AnimComponent_SCT_C_SetCharacterRotationOMNI Parms{};

	Parms.EnableRotationOverride = EnableRotationOverride;
	Parms.Rotation = std::move(Rotation);

	UObject::ProcessEvent(Func, &Parms);
}


// Function AnimComponent_SCT.AnimComponent_SCT_C.ItemAnimationEvent
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// E_ItemAnimation                         Animation                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UAnimComponent_SCT_C::ItemAnimationEvent(E_ItemAnimation Animation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AnimComponent_SCT_C", "ItemAnimationEvent");

	Params::AnimComponent_SCT_C_ItemAnimationEvent Parms{};

	Parms.Animation = Animation;

	UObject::ProcessEvent(Func, &Parms);
}


// Function AnimComponent_SCT.AnimComponent_SCT_C.ItemAnimationMulticast
// (Net, NetMulticast, BlueprintCallable, BlueprintEvent)
// Parameters:
// E_ItemAnimation                         Animation                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UAnimComponent_SCT_C::ItemAnimationMulticast(E_ItemAnimation Animation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AnimComponent_SCT_C", "ItemAnimationMulticast");

	Params::AnimComponent_SCT_C_ItemAnimationMulticast Parms{};

	Parms.Animation = Animation;

	UObject::ProcessEvent(Func, &Parms);
}


// Function AnimComponent_SCT.AnimComponent_SCT_C.AddCharacterRotationBPI
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FRotator                         AddAmount                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UAnimComponent_SCT_C::AddCharacterRotationBPI(const struct FRotator& AddAmount)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AnimComponent_SCT_C", "AddCharacterRotationBPI");

	Params::AnimComponent_SCT_C_AddCharacterRotationBPI Parms{};

	Parms.AddAmount = std::move(AddAmount);

	UObject::ProcessEvent(Func, &Parms);
}


// Function AnimComponent_SCT.AnimComponent_SCT_C.MovementModeChangedBPI
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// Engine::EMovementMode                   PrevMovementMode                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// Engine::EMovementMode                   NewMovementMode                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// uint8                                   PrevCustomMode                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// uint8                                   NewCustomMode                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UAnimComponent_SCT_C::MovementModeChangedBPI(Engine::EMovementMode PrevMovementMode, Engine::EMovementMode NewMovementMode, uint8 PrevCustomMode, uint8 NewCustomMode)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AnimComponent_SCT_C", "MovementModeChangedBPI");

	Params::AnimComponent_SCT_C_MovementModeChangedBPI Parms{};

	Parms.PrevMovementMode = PrevMovementMode;
	Parms.NewMovementMode = NewMovementMode;
	Parms.PrevCustomMode = PrevCustomMode;
	Parms.NewCustomMode = NewCustomMode;

	UObject::ProcessEvent(Func, &Parms);
}


// Function AnimComponent_SCT.AnimComponent_SCT_C.SetStanceBPI
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// EStance                                 NewStance                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UAnimComponent_SCT_C::SetStanceBPI(EStance NewStance)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AnimComponent_SCT_C", "SetStanceBPI");

	Params::AnimComponent_SCT_C_SetStanceBPI Parms{};

	Parms.NewStance = NewStance;

	UObject::ProcessEvent(Func, &Parms);
}


// Function AnimComponent_SCT.AnimComponent_SCT_C.LandedBPI
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FHitResult                       Hit                                                    (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, ContainsInstancedReference)

void UAnimComponent_SCT_C::LandedBPI(const struct FHitResult& Hit)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AnimComponent_SCT_C", "LandedBPI");

	Params::AnimComponent_SCT_C_LandedBPI Parms{};

	Parms.Hit = std::move(Hit);

	UObject::ProcessEvent(Func, &Parms);
}


// Function AnimComponent_SCT.AnimComponent_SCT_C.ShouldSprintBPI
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    ShouldSprint_0                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UAnimComponent_SCT_C::ShouldSprintBPI(bool ShouldSprint_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AnimComponent_SCT_C", "ShouldSprintBPI");

	Params::AnimComponent_SCT_C_ShouldSprintBPI Parms{};

	Parms.ShouldSprint_0 = ShouldSprint_0;

	UObject::ProcessEvent(Func, &Parms);
}


// Function AnimComponent_SCT.AnimComponent_SCT_C.ToRagdollBPI
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    ToRagdoll                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// struct FVector                          OptionalImpulse                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Force                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UAnimComponent_SCT_C::ToRagdollBPI(bool ToRagdoll, const struct FVector& OptionalImpulse, bool Force)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AnimComponent_SCT_C", "ToRagdollBPI");

	Params::AnimComponent_SCT_C_ToRagdollBPI Parms{};

	Parms.ToRagdoll = ToRagdoll;
	Parms.OptionalImpulse = std::move(OptionalImpulse);
	Parms.Force = Force;

	UObject::ProcessEvent(Func, &Parms);
}


// Function AnimComponent_SCT.AnimComponent_SCT_C.ResyncGroundedState
// (Net, NetMulticast, BlueprintCallable, BlueprintEvent)

void UAnimComponent_SCT_C::ResyncGroundedState()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AnimComponent_SCT_C", "ResyncGroundedState");

	UObject::ProcessEvent(Func, nullptr);
}


// Function AnimComponent_SCT.AnimComponent_SCT_C.SetCharacterRotationBPI
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// ERPC_Enum                               RPC                                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    EnableRotationOverride                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// struct FRotator                         Rotation                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UAnimComponent_SCT_C::SetCharacterRotationBPI(ERPC_Enum RPC, bool EnableRotationOverride, const struct FRotator& Rotation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AnimComponent_SCT_C", "SetCharacterRotationBPI");

	Params::AnimComponent_SCT_C_SetCharacterRotationBPI Parms{};

	Parms.RPC = RPC;
	Parms.EnableRotationOverride = EnableRotationOverride;
	Parms.Rotation = std::move(Rotation);

	UObject::ProcessEvent(Func, &Parms);
}


// Function AnimComponent_SCT.AnimComponent_SCT_C.PlayEmoteBPI
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// uint8                                   EmoteID                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UAnimComponent_SCT_C::PlayEmoteBPI(uint8 EmoteID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AnimComponent_SCT_C", "PlayEmoteBPI");

	Params::AnimComponent_SCT_C_PlayEmoteBPI Parms{};

	Parms.EmoteID = EmoteID;

	UObject::ProcessEvent(Func, &Parms);
}


// Function AnimComponent_SCT.AnimComponent_SCT_C.SetAimingBPI
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Aiming                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// uint8                                   AimType_0                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UAnimComponent_SCT_C::SetAimingBPI(bool Aiming, uint8 AimType_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AnimComponent_SCT_C", "SetAimingBPI");

	Params::AnimComponent_SCT_C_SetAimingBPI Parms{};

	Parms.Aiming = Aiming;
	Parms.AimType_0 = AimType_0;

	UObject::ProcessEvent(Func, &Parms);
}


// Function AnimComponent_SCT.AnimComponent_SCT_C.EnableIKandAimOffsetBPI
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Enable                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UAnimComponent_SCT_C::EnableIKandAimOffsetBPI(bool Enable)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AnimComponent_SCT_C", "EnableIKandAimOffsetBPI");

	Params::AnimComponent_SCT_C_EnableIKandAimOffsetBPI Parms{};

	Parms.Enable = Enable;

	UObject::ProcessEvent(Func, &Parms);
}


// Function AnimComponent_SCT.AnimComponent_SCT_C.MulticastEnableIK
// (Net, NetMulticast, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Enable                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UAnimComponent_SCT_C::MulticastEnableIK(bool Enable)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AnimComponent_SCT_C", "MulticastEnableIK");

	Params::AnimComponent_SCT_C_MulticastEnableIK Parms{};

	Parms.Enable = Enable;

	UObject::ProcessEvent(Func, &Parms);
}


// Function AnimComponent_SCT.AnimComponent_SCT_C.LaunchRagdollBPI
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FVector                          TargetLocation                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          Direction_0                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UAnimComponent_SCT_C::LaunchRagdollBPI(const struct FVector& TargetLocation, const struct FVector& Direction_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AnimComponent_SCT_C", "LaunchRagdollBPI");

	Params::AnimComponent_SCT_C_LaunchRagdollBPI Parms{};

	Parms.TargetLocation = std::move(TargetLocation);
	Parms.Direction_0 = std::move(Direction_0);

	UObject::ProcessEvent(Func, &Parms);
}


// Function AnimComponent_SCT.AnimComponent_SCT_C.CarryingCorpseBPI
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    InputValue                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UAnimComponent_SCT_C::CarryingCorpseBPI(bool InputValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AnimComponent_SCT_C", "CarryingCorpseBPI");

	Params::AnimComponent_SCT_C_CarryingCorpseBPI Parms{};

	Parms.InputValue = InputValue;

	UObject::ProcessEvent(Func, &Parms);
}


// Function AnimComponent_SCT.AnimComponent_SCT_C.BeingCarriedCorpseBPI
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    InputValue                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UAnimComponent_SCT_C::BeingCarriedCorpseBPI(bool InputValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AnimComponent_SCT_C", "BeingCarriedCorpseBPI");

	Params::AnimComponent_SCT_C_BeingCarriedCorpseBPI Parms{};

	Parms.InputValue = InputValue;

	UObject::ProcessEvent(Func, &Parms);
}


// Function AnimComponent_SCT.AnimComponent_SCT_C.RagdollForceGetUpNice
// (BlueprintCallable, BlueprintEvent)

void UAnimComponent_SCT_C::RagdollForceGetUpNice()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AnimComponent_SCT_C", "RagdollForceGetUpNice");

	UObject::ProcessEvent(Func, nullptr);
}


// Function AnimComponent_SCT.AnimComponent_SCT_C.CancelDelayedGetUp
// (BlueprintCallable, BlueprintEvent)

void UAnimComponent_SCT_C::CancelDelayedGetUp()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AnimComponent_SCT_C", "CancelDelayedGetUp");

	UObject::ProcessEvent(Func, nullptr);
}


// Function AnimComponent_SCT.AnimComponent_SCT_C.CheckGetUp
// (BlueprintCallable, BlueprintEvent)

void UAnimComponent_SCT_C::CheckGetUp()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AnimComponent_SCT_C", "CheckGetUp");

	UObject::ProcessEvent(Func, nullptr);
}


// Function AnimComponent_SCT.AnimComponent_SCT_C.DelayedGetUpRagdoll
// (BlueprintCallable, BlueprintEvent)

void UAnimComponent_SCT_C::DelayedGetUpRagdoll()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AnimComponent_SCT_C", "DelayedGetUpRagdoll");

	UObject::ProcessEvent(Func, nullptr);
}


// Function AnimComponent_SCT.AnimComponent_SCT_C.triggerBlink
// (BlueprintCallable, BlueprintEvent)

void UAnimComponent_SCT_C::TriggerBlink()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AnimComponent_SCT_C", "triggerBlink");

	UObject::ProcessEvent(Func, nullptr);
}


// Function AnimComponent_SCT.AnimComponent_SCT_C.ReceiveTick
// (Event, Public, BlueprintEvent)
// Parameters:
// float                                   DeltaSeconds                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UAnimComponent_SCT_C::ReceiveTick(float DeltaSeconds)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AnimComponent_SCT_C", "ReceiveTick");

	Params::AnimComponent_SCT_C_ReceiveTick Parms{};

	Parms.DeltaSeconds = DeltaSeconds;

	UObject::ProcessEvent(Func, &Parms);
}


// Function AnimComponent_SCT.AnimComponent_SCT_C.ReceiveBeginPlay
// (Event, Public, BlueprintEvent)

void UAnimComponent_SCT_C::ReceiveBeginPlay()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AnimComponent_SCT_C", "ReceiveBeginPlay");

	UObject::ProcessEvent(Func, nullptr);
}


// Function AnimComponent_SCT.AnimComponent_SCT_C.AnimNotifyIdleEntryStateBPI
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// EIdleEntryState                         IdleEntryState                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UAnimComponent_SCT_C::AnimNotifyIdleEntryStateBPI(EIdleEntryState IdleEntryState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AnimComponent_SCT_C", "AnimNotifyIdleEntryStateBPI");

	Params::AnimComponent_SCT_C_AnimNotifyIdleEntryStateBPI Parms{};

	Parms.IdleEntryState = IdleEntryState;

	UObject::ProcessEvent(Func, &Parms);
}


// Function AnimComponent_SCT.AnimComponent_SCT_C.AnimNotifyTurnInPlaceBPI
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UAnimMontage*                     TurnInPlaceMontage                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    ShouldTurnInPlace                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    TurningInPlace                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    TurningRight                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UAnimComponent_SCT_C::AnimNotifyTurnInPlaceBPI(class UAnimMontage* TurnInPlaceMontage, bool ShouldTurnInPlace, bool TurningInPlace, bool TurningRight)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AnimComponent_SCT_C", "AnimNotifyTurnInPlaceBPI");

	Params::AnimComponent_SCT_C_AnimNotifyTurnInPlaceBPI Parms{};

	Parms.TurnInPlaceMontage = TurnInPlaceMontage;
	Parms.ShouldTurnInPlace = ShouldTurnInPlace;
	Parms.TurningInPlace = TurningInPlace;
	Parms.TurningRight = TurningRight;

	UObject::ProcessEvent(Func, &Parms);
}


// Function AnimComponent_SCT.AnimComponent_SCT_C.AnimNotifyPivotBPI
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FPivotParams                     PivotParameters                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UAnimComponent_SCT_C::AnimNotifyPivotBPI(const struct FPivotParams& PivotParameters)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AnimComponent_SCT_C", "AnimNotifyPivotBPI");

	Params::AnimComponent_SCT_C_AnimNotifyPivotBPI Parms{};

	Parms.PivotParameters = std::move(PivotParameters);

	UObject::ProcessEvent(Func, &Parms);
}


// Function AnimComponent_SCT.AnimComponent_SCT_C.PlayGetUpAnimBPI
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    FaceDown                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UAnimComponent_SCT_C::PlayGetUpAnimBPI(bool FaceDown)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AnimComponent_SCT_C", "PlayGetUpAnimBPI");

	Params::AnimComponent_SCT_C_PlayGetUpAnimBPI Parms{};

	Parms.FaceDown = FaceDown;

	UObject::ProcessEvent(Func, &Parms);
}


// Function AnimComponent_SCT.AnimComponent_SCT_C.SavePoseSnapshotBPI
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FName                             PoseName                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UAnimComponent_SCT_C::SavePoseSnapshotBPI(class FName PoseName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AnimComponent_SCT_C", "SavePoseSnapshotBPI");

	Params::AnimComponent_SCT_C_SavePoseSnapshotBPI Parms{};

	Parms.PoseName = PoseName;

	UObject::ProcessEvent(Func, &Parms);
}


// Function AnimComponent_SCT.AnimComponent_SCT_C.SetGaitBPI
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// EGait                                   NewGait                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UAnimComponent_SCT_C::SetGaitBPI(EGait NewGait)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AnimComponent_SCT_C", "SetGaitBPI");

	Params::AnimComponent_SCT_C_SetGaitBPI Parms{};

	Parms.NewGait = NewGait;

	UObject::ProcessEvent(Func, &Parms);
}


// Function AnimComponent_SCT.AnimComponent_SCT_C.SetMovementModeBPI
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// MovementMode::EMovementMode             NewMovementMode                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UAnimComponent_SCT_C::SetMovementModeBPI(MovementMode::EMovementMode NewMovementMode)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AnimComponent_SCT_C", "SetMovementModeBPI");

	Params::AnimComponent_SCT_C_SetMovementModeBPI Parms{};

	Parms.NewMovementMode = NewMovementMode;

	UObject::ProcessEvent(Func, &Parms);
}


// Function AnimComponent_SCT.AnimComponent_SCT_C.ReinitBPI
// (Public, BlueprintCallable, BlueprintEvent)

void UAnimComponent_SCT_C::ReinitBPI()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AnimComponent_SCT_C", "ReinitBPI");

	UObject::ProcessEvent(Func, nullptr);
}


// Function AnimComponent_SCT.AnimComponent_SCT_C.CalculateEssentialValues
// (Public, BlueprintCallable, BlueprintEvent)

void UAnimComponent_SCT_C::CalculateEssentialValues()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AnimComponent_SCT_C", "CalculateEssentialValues");

	UObject::ProcessEvent(Func, nullptr);
}


// Function AnimComponent_SCT.AnimComponent_SCT_C.UpdateCharacterMovementSettings
// (Public, BlueprintCallable, BlueprintEvent)

void UAnimComponent_SCT_C::UpdateCharacterMovementSettings()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AnimComponent_SCT_C", "UpdateCharacterMovementSettings");

	UObject::ProcessEvent(Func, nullptr);
}


// Function AnimComponent_SCT.AnimComponent_SCT_C.ChooseMaxWalkSpeed
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// float                                   MaxWalkSpeed                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UAnimComponent_SCT_C::ChooseMaxWalkSpeed(float* MaxWalkSpeed)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AnimComponent_SCT_C", "ChooseMaxWalkSpeed");

	Params::AnimComponent_SCT_C_ChooseMaxWalkSpeed Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (MaxWalkSpeed != nullptr)
		*MaxWalkSpeed = Parms.MaxWalkSpeed;
}


// Function AnimComponent_SCT.AnimComponent_SCT_C.ChooseMaxAcceleration
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// float                                   MaxAcceleration                                        (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UAnimComponent_SCT_C::ChooseMaxAcceleration(float* MaxAcceleration)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AnimComponent_SCT_C", "ChooseMaxAcceleration");

	Params::AnimComponent_SCT_C_ChooseMaxAcceleration Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (MaxAcceleration != nullptr)
		*MaxAcceleration = Parms.MaxAcceleration;
}


// Function AnimComponent_SCT.AnimComponent_SCT_C.ChooseBrakingDeceleration
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// float                                   MaxBrakingDeceleration                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UAnimComponent_SCT_C::ChooseBrakingDeceleration(float* MaxBrakingDeceleration)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AnimComponent_SCT_C", "ChooseBrakingDeceleration");

	Params::AnimComponent_SCT_C_ChooseBrakingDeceleration Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (MaxBrakingDeceleration != nullptr)
		*MaxBrakingDeceleration = Parms.MaxBrakingDeceleration;
}


// Function AnimComponent_SCT.AnimComponent_SCT_C.ChooseGroundFriction
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// float                                   GroundFriction                                         (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UAnimComponent_SCT_C::ChooseGroundFriction(float* GroundFriction)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AnimComponent_SCT_C", "ChooseGroundFriction");

	Params::AnimComponent_SCT_C_ChooseGroundFriction Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (GroundFriction != nullptr)
		*GroundFriction = Parms.GroundFriction;
}


// Function AnimComponent_SCT.AnimComponent_SCT_C.CustomAcceleration
// (Public, BlueprintCallable, BlueprintEvent)

void UAnimComponent_SCT_C::CustomAcceleration()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AnimComponent_SCT_C", "CustomAcceleration");

	UObject::ProcessEvent(Func, nullptr);
}


// Function AnimComponent_SCT.AnimComponent_SCT_C.CanSprint
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// bool                                    CanSprint_0                                            (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UAnimComponent_SCT_C::CanSprint(bool* CanSprint_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AnimComponent_SCT_C", "CanSprint");

	Params::AnimComponent_SCT_C_CanSprint Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (CanSprint_0 != nullptr)
		*CanSprint_0 = Parms.CanSprint_0;
}


// Function AnimComponent_SCT.AnimComponent_SCT_C.LookingDirectionWithOffset
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   OffsetInterpSpeed                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   NEAngle                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   NWAngle                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   SEAngle                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   SWAngle                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   Buffer                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FRotator                         TargetRotation_0                                       (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UAnimComponent_SCT_C::LookingDirectionWithOffset(float OffsetInterpSpeed, float NEAngle, float NWAngle, float SEAngle, float SWAngle, float Buffer, struct FRotator* TargetRotation_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AnimComponent_SCT_C", "LookingDirectionWithOffset");

	Params::AnimComponent_SCT_C_LookingDirectionWithOffset Parms{};

	Parms.OffsetInterpSpeed = OffsetInterpSpeed;
	Parms.NEAngle = NEAngle;
	Parms.NWAngle = NWAngle;
	Parms.SEAngle = SEAngle;
	Parms.SWAngle = SWAngle;
	Parms.Buffer = Buffer;

	UObject::ProcessEvent(Func, &Parms);

	if (TargetRotation_0 != nullptr)
		*TargetRotation_0 = std::move(Parms.TargetRotation_0);
}


// Function AnimComponent_SCT.AnimComponent_SCT_C.SetCharacterRotation
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FRotator                         TargetRotation_0                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    InterpRotation                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// float                                   InterpSpeed                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UAnimComponent_SCT_C::SetCharacterRotation(const struct FRotator& TargetRotation_0, bool InterpRotation, float InterpSpeed)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AnimComponent_SCT_C", "SetCharacterRotation");

	Params::AnimComponent_SCT_C_SetCharacterRotation Parms{};

	Parms.TargetRotation_0 = std::move(TargetRotation_0);
	Parms.InterpRotation = InterpRotation;
	Parms.InterpSpeed = InterpSpeed;

	UObject::ProcessEvent(Func, &Parms);
}


// Function AnimComponent_SCT.AnimComponent_SCT_C.CalculateRotationRate
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// float                                   SlowSpeed                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   SlowSpeedRate                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   FastSpeed                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   FastSpeedRate                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

float UAnimComponent_SCT_C::CalculateRotationRate(float SlowSpeed, float SlowSpeedRate, float FastSpeed, float FastSpeedRate)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AnimComponent_SCT_C", "CalculateRotationRate");

	Params::AnimComponent_SCT_C_CalculateRotationRate Parms{};

	Parms.SlowSpeed = SlowSpeed;
	Parms.SlowSpeedRate = SlowSpeedRate;
	Parms.FastSpeed = FastSpeed;
	Parms.FastSpeedRate = FastSpeedRate;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function AnimComponent_SCT.AnimComponent_SCT_C.LimitRotation
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   AimYawLimit                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   InterpSpeed                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UAnimComponent_SCT_C::LimitRotation(float AimYawLimit, float InterpSpeed)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AnimComponent_SCT_C", "LimitRotation");

	Params::AnimComponent_SCT_C_LimitRotation Parms{};

	Parms.AimYawLimit = AimYawLimit;
	Parms.InterpSpeed = InterpSpeed;

	UObject::ProcessEvent(Func, &Parms);
}


// Function AnimComponent_SCT.AnimComponent_SCT_C.AddCharacterRotation
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FRotator                         AddAmount                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UAnimComponent_SCT_C::AddCharacterRotation(const struct FRotator& AddAmount)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AnimComponent_SCT_C", "AddCharacterRotation");

	Params::AnimComponent_SCT_C_AddCharacterRotation Parms{};

	Parms.AddAmount = std::move(AddAmount);

	UObject::ProcessEvent(Func, &Parms);
}


// Function AnimComponent_SCT.AnimComponent_SCT_C.SetMovementMode
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// MovementMode::EMovementMode             NewMovementMode                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UAnimComponent_SCT_C::SetMovementMode(MovementMode::EMovementMode NewMovementMode)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AnimComponent_SCT_C", "SetMovementMode");

	Params::AnimComponent_SCT_C_SetMovementMode Parms{};

	Parms.NewMovementMode = NewMovementMode;

	UObject::ProcessEvent(Func, &Parms);
}


// Function AnimComponent_SCT.AnimComponent_SCT_C.MovementModeChanged
// (Public, BlueprintCallable, BlueprintEvent)

void UAnimComponent_SCT_C::MovementModeChanged()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AnimComponent_SCT_C", "MovementModeChanged");

	UObject::ProcessEvent(Func, nullptr);
}


// Function AnimComponent_SCT.AnimComponent_SCT_C.SetStance
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// EStance                                 NewStance                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UAnimComponent_SCT_C::SetStance(EStance NewStance)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AnimComponent_SCT_C", "SetStance");

	Params::AnimComponent_SCT_C_SetStance Parms{};

	Parms.NewStance = NewStance;

	UObject::ProcessEvent(Func, &Parms);
}


// Function AnimComponent_SCT.AnimComponent_SCT_C.StanceChanged
// (Public, BlueprintCallable, BlueprintEvent)

void UAnimComponent_SCT_C::StanceChanged()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AnimComponent_SCT_C", "StanceChanged");

	UObject::ProcessEvent(Func, nullptr);
}


// Function AnimComponent_SCT.AnimComponent_SCT_C.SetGait
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// EGait                                   NewGait                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UAnimComponent_SCT_C::SetGait(EGait NewGait)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AnimComponent_SCT_C", "SetGait");

	Params::AnimComponent_SCT_C_SetGait Parms{};

	Parms.NewGait = NewGait;

	UObject::ProcessEvent(Func, &Parms);
}


// Function AnimComponent_SCT.AnimComponent_SCT_C.GaitChanged
// (Public, BlueprintCallable, BlueprintEvent)

void UAnimComponent_SCT_C::GaitChanged()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AnimComponent_SCT_C", "GaitChanged");

	UObject::ProcessEvent(Func, nullptr);
}


// Function AnimComponent_SCT.AnimComponent_SCT_C.UpdateRagdollLocation
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void UAnimComponent_SCT_C::UpdateRagdollLocation()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AnimComponent_SCT_C", "UpdateRagdollLocation");

	UObject::ProcessEvent(Func, nullptr);
}


// Function AnimComponent_SCT.AnimComponent_SCT_C.GetRagdollVelocity
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// struct FVector                          Velocity                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UAnimComponent_SCT_C::GetRagdollVelocity(struct FVector* Velocity)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AnimComponent_SCT_C", "GetRagdollVelocity");

	Params::AnimComponent_SCT_C_GetRagdollVelocity Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Velocity != nullptr)
		*Velocity = std::move(Parms.Velocity);
}


// Function AnimComponent_SCT.AnimComponent_SCT_C.CalculateRagdollLocationRotation
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FVector                          OutLocation                                            (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FRotator                         OutRotation                                            (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UAnimComponent_SCT_C::CalculateRagdollLocationRotation(struct FVector* OutLocation, struct FRotator* OutRotation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AnimComponent_SCT_C", "CalculateRagdollLocationRotation");

	Params::AnimComponent_SCT_C_CalculateRagdollLocationRotation Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (OutLocation != nullptr)
		*OutLocation = std::move(Parms.OutLocation);

	if (OutRotation != nullptr)
		*OutRotation = std::move(Parms.OutRotation);
}


// Function AnimComponent_SCT.AnimComponent_SCT_C.OnRep_Gait
// (BlueprintCallable, BlueprintEvent)

void UAnimComponent_SCT_C::OnRep_Gait()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AnimComponent_SCT_C", "OnRep_Gait");

	UObject::ProcessEvent(Func, nullptr);
}


// Function AnimComponent_SCT.AnimComponent_SCT_C.Ragdoll
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    ToRagdoll                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UAnimComponent_SCT_C::Ragdoll(bool ToRagdoll)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AnimComponent_SCT_C", "Ragdoll");

	Params::AnimComponent_SCT_C_Ragdoll Parms{};

	Parms.ToRagdoll = ToRagdoll;

	UObject::ProcessEvent(Func, &Parms);
}


// Function AnimComponent_SCT.AnimComponent_SCT_C.OnRep_IsAiming
// (BlueprintCallable, BlueprintEvent)

void UAnimComponent_SCT_C::OnRep_IsAiming()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AnimComponent_SCT_C", "OnRep_IsAiming");

	UObject::ProcessEvent(Func, nullptr);
}


// Function AnimComponent_SCT.AnimComponent_SCT_C.RagdollLaunchForce
// (Public, BlueprintCallable, BlueprintEvent)

void UAnimComponent_SCT_C::RagdollLaunchForce()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AnimComponent_SCT_C", "RagdollLaunchForce");

	UObject::ProcessEvent(Func, nullptr);
}


// Function AnimComponent_SCT.AnimComponent_SCT_C.OnRep_isDancing
// (BlueprintCallable, BlueprintEvent)

void UAnimComponent_SCT_C::OnRep_isDancing()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AnimComponent_SCT_C", "OnRep_isDancing");

	UObject::ProcessEvent(Func, nullptr);
}


// Function AnimComponent_SCT.AnimComponent_SCT_C.generateRandomIntArray
// (Public, BlueprintCallable, BlueprintEvent)

void UAnimComponent_SCT_C::GenerateRandomIntArray()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AnimComponent_SCT_C", "generateRandomIntArray");

	UObject::ProcessEvent(Func, nullptr);
}


// Function AnimComponent_SCT.AnimComponent_SCT_C.OnRep_isDrowning
// (BlueprintCallable, BlueprintEvent)

void UAnimComponent_SCT_C::OnRep_isDrowning()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AnimComponent_SCT_C", "OnRep_isDrowning");

	UObject::ProcessEvent(Func, nullptr);
}


// Function AnimComponent_SCT.AnimComponent_SCT_C.OnRep_isDrowned
// (BlueprintCallable, BlueprintEvent)

void UAnimComponent_SCT_C::OnRep_isDrowned()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AnimComponent_SCT_C", "OnRep_isDrowned");

	UObject::ProcessEvent(Func, nullptr);
}


// Function AnimComponent_SCT.AnimComponent_SCT_C.OnRep_isFreezing
// (BlueprintCallable, BlueprintEvent)

void UAnimComponent_SCT_C::OnRep_isFreezing()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AnimComponent_SCT_C", "OnRep_isFreezing");

	UObject::ProcessEvent(Func, nullptr);
}


// Function AnimComponent_SCT.AnimComponent_SCT_C.OnRep_isBurning
// (BlueprintCallable, BlueprintEvent)

void UAnimComponent_SCT_C::OnRep_isBurning()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AnimComponent_SCT_C", "OnRep_isBurning");

	UObject::ProcessEvent(Func, nullptr);
}


// Function AnimComponent_SCT.AnimComponent_SCT_C.OnRep_isBurned
// (BlueprintCallable, BlueprintEvent)

void UAnimComponent_SCT_C::OnRep_isBurned()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AnimComponent_SCT_C", "OnRep_isBurned");

	UObject::ProcessEvent(Func, nullptr);
}


// Function AnimComponent_SCT.AnimComponent_SCT_C.OnRep_beingGrabbed
// (BlueprintCallable, BlueprintEvent)

void UAnimComponent_SCT_C::OnRep_beingGrabbed()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AnimComponent_SCT_C", "OnRep_beingGrabbed");

	UObject::ProcessEvent(Func, nullptr);
}


// Function AnimComponent_SCT.AnimComponent_SCT_C.OnRep_isGrabbing
// (BlueprintCallable, BlueprintEvent)

void UAnimComponent_SCT_C::OnRep_isGrabbing()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AnimComponent_SCT_C", "OnRep_isGrabbing");

	UObject::ProcessEvent(Func, nullptr);
}


// Function AnimComponent_SCT.AnimComponent_SCT_C.OnRep_isPushing
// (BlueprintCallable, BlueprintEvent)

void UAnimComponent_SCT_C::OnRep_isPushing()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AnimComponent_SCT_C", "OnRep_isPushing");

	UObject::ProcessEvent(Func, nullptr);
}


// Function AnimComponent_SCT.AnimComponent_SCT_C.OnRep_isOxygenPot
// (BlueprintCallable, BlueprintEvent)

void UAnimComponent_SCT_C::OnRep_isOxygenPot()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AnimComponent_SCT_C", "OnRep_isOxygenPot");

	UObject::ProcessEvent(Func, nullptr);
}


// Function AnimComponent_SCT.AnimComponent_SCT_C.OnRep_isThrowing
// (BlueprintCallable, BlueprintEvent)

void UAnimComponent_SCT_C::OnRep_isThrowing()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AnimComponent_SCT_C", "OnRep_isThrowing");

	UObject::ProcessEvent(Func, nullptr);
}


// Function AnimComponent_SCT.AnimComponent_SCT_C.OnRep_isElectrocuting
// (BlueprintCallable, BlueprintEvent)

void UAnimComponent_SCT_C::OnRep_isElectrocuting()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AnimComponent_SCT_C", "OnRep_isElectrocuting");

	UObject::ProcessEvent(Func, nullptr);
}


// Function AnimComponent_SCT.AnimComponent_SCT_C.OnRep_isElectrocuted
// (BlueprintCallable, BlueprintEvent)

void UAnimComponent_SCT_C::OnRep_isElectrocuted()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AnimComponent_SCT_C", "OnRep_isElectrocuted");

	UObject::ProcessEvent(Func, nullptr);
}


// Function AnimComponent_SCT.AnimComponent_SCT_C.Interaction Anim
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// E_interactionAnim                       Animation                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// E_interactionAnimState                  State                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UAnimComponent_SCT_C::Interaction_Anim(E_interactionAnim Animation, E_interactionAnimState State)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AnimComponent_SCT_C", "Interaction Anim");

	Params::AnimComponent_SCT_C_Interaction_Anim Parms{};

	Parms.Animation = Animation;
	Parms.State = State;

	UObject::ProcessEvent(Func, &Parms);
}


// Function AnimComponent_SCT.AnimComponent_SCT_C.OnRep_interactionAnim
// (BlueprintCallable, BlueprintEvent)

void UAnimComponent_SCT_C::OnRep_interactionAnim()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AnimComponent_SCT_C", "OnRep_interactionAnim");

	UObject::ProcessEvent(Func, nullptr);
}


// Function AnimComponent_SCT.AnimComponent_SCT_C.beingGrabbedFunction
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    beingGrabbed_0                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UAnimComponent_SCT_C::beingGrabbedFunction(bool beingGrabbed_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AnimComponent_SCT_C", "beingGrabbedFunction");

	Params::AnimComponent_SCT_C_beingGrabbedFunction Parms{};

	Parms.beingGrabbed_0 = beingGrabbed_0;

	UObject::ProcessEvent(Func, &Parms);
}


// Function AnimComponent_SCT.AnimComponent_SCT_C.GrabbingFunction
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Grabbing                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UAnimComponent_SCT_C::GrabbingFunction(bool Grabbing)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AnimComponent_SCT_C", "GrabbingFunction");

	Params::AnimComponent_SCT_C_GrabbingFunction Parms{};

	Parms.Grabbing = Grabbing;

	UObject::ProcessEvent(Func, &Parms);
}


// Function AnimComponent_SCT.AnimComponent_SCT_C.RagdollRandomVariation
// (Public, BlueprintCallable, BlueprintEvent)

void UAnimComponent_SCT_C::RagdollRandomVariation()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AnimComponent_SCT_C", "RagdollRandomVariation");

	UObject::ProcessEvent(Func, nullptr);
}


// Function AnimComponent_SCT.AnimComponent_SCT_C.OnRep_IsFrozen
// (BlueprintCallable, BlueprintEvent)

void UAnimComponent_SCT_C::OnRep_IsFrozen()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AnimComponent_SCT_C", "OnRep_IsFrozen");

	UObject::ProcessEvent(Func, nullptr);
}


// Function AnimComponent_SCT.AnimComponent_SCT_C.Blink
// (Public, BlueprintCallable, BlueprintEvent)

void UAnimComponent_SCT_C::Blink()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AnimComponent_SCT_C", "Blink");

	UObject::ProcessEvent(Func, nullptr);
}


// Function AnimComponent_SCT.AnimComponent_SCT_C.talking
// (Public, BlueprintCallable, BlueprintEvent)

void UAnimComponent_SCT_C::Talking()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AnimComponent_SCT_C", "talking");

	UObject::ProcessEvent(Func, nullptr);
}


// Function AnimComponent_SCT.AnimComponent_SCT_C.OnRep_isDead
// (BlueprintCallable, BlueprintEvent)

void UAnimComponent_SCT_C::OnRep_isDead()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AnimComponent_SCT_C", "OnRep_isDead");

	UObject::ProcessEvent(Func, nullptr);
}


// Function AnimComponent_SCT.AnimComponent_SCT_C.interactionType
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// E_interactionAnimState                  State                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// E_interactionAnim                       Anim                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UAnimComponent_SCT_C::InteractionType(E_interactionAnimState State, E_interactionAnim Anim)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AnimComponent_SCT_C", "interactionType");

	Params::AnimComponent_SCT_C_InteractionType Parms{};

	Parms.State = State;
	Parms.Anim = Anim;

	UObject::ProcessEvent(Func, &Parms);
}


// Function AnimComponent_SCT.AnimComponent_SCT_C.OnRep_BeerLauncher
// (BlueprintCallable, BlueprintEvent)

void UAnimComponent_SCT_C::OnRep_BeerLauncher()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AnimComponent_SCT_C", "OnRep_BeerLauncher");

	UObject::ProcessEvent(Func, nullptr);
}


// Function AnimComponent_SCT.AnimComponent_SCT_C.RagdollLocationCorrection
// (Public, BlueprintCallable, BlueprintEvent)

void UAnimComponent_SCT_C::RagdollLocationCorrection()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AnimComponent_SCT_C", "RagdollLocationCorrection");

	UObject::ProcessEvent(Func, nullptr);
}


// Function AnimComponent_SCT.AnimComponent_SCT_C.RagdollCollisionProfileCorrection
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    CollisionEnabled                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UAnimComponent_SCT_C::RagdollCollisionProfileCorrection(bool CollisionEnabled)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AnimComponent_SCT_C", "RagdollCollisionProfileCorrection");

	Params::AnimComponent_SCT_C_RagdollCollisionProfileCorrection Parms{};

	Parms.CollisionEnabled = CollisionEnabled;

	UObject::ProcessEvent(Func, &Parms);
}


// Function AnimComponent_SCT.AnimComponent_SCT_C.UpdateDeviationTime
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   Offset                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UAnimComponent_SCT_C::UpdateDeviationTime(float Offset)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AnimComponent_SCT_C", "UpdateDeviationTime");

	Params::AnimComponent_SCT_C_UpdateDeviationTime Parms{};

	Parms.Offset = Offset;

	UObject::ProcessEvent(Func, &Parms);
}


// Function AnimComponent_SCT.AnimComponent_SCT_C.RemoveAllPuzzleWidgets
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void UAnimComponent_SCT_C::RemoveAllPuzzleWidgets()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AnimComponent_SCT_C", "RemoveAllPuzzleWidgets");

	UObject::ProcessEvent(Func, nullptr);
}


// Function AnimComponent_SCT.AnimComponent_SCT_C.GetEssentialValuesBPI
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FVector                          InVelocity                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    InIsMoving                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    InHasMovementInput                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    InIsAiming                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// uint8                                   InAimType                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   InDirection                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   InCharacterRotationDifference                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   InVelocityDifference                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   InAimYawDelta                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   InAimYawRate                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FRotator                         InCharacterRotation                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// struct FRotator                         InLookingRotation                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// struct FRotator                         InLastVelocityRotation                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// struct FRotator                         InLastMovementInputRotation                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    InCarryingCorpse                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    InBeingCarriedCorpse                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// float                                   InAlcoholPercent                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          Velocity                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    IsMoving_0                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    HasMovementInput_0                                     (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    IsAiming_0                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
// uint8                                   AimType_0                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   Direction_0                                            (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   CharacterRotationDifference_0                          (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   VelocityDifference_0                                   (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   AimYawDelta_0                                          (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   AimYawRate_0                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FRotator                         CharacterRotation_0                                    (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
// struct FRotator                         LookingRotation_0                                      (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
// struct FRotator                         LastVelocityRotation_0                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
// struct FRotator                         LastMovementInputRotation_0                            (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    CarryingCorpse_0                                       (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    BeingCarriedCorpse_0                                   (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
// float                                   AlcoholPercent                                         (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UAnimComponent_SCT_C::GetEssentialValuesBPI(const struct FVector& InVelocity, bool InIsMoving, bool InHasMovementInput, bool InIsAiming, uint8 InAimType, float InDirection, float InCharacterRotationDifference, float InVelocityDifference, float InAimYawDelta, float InAimYawRate, const struct FRotator& InCharacterRotation, const struct FRotator& InLookingRotation, const struct FRotator& InLastVelocityRotation, const struct FRotator& InLastMovementInputRotation, bool InCarryingCorpse, bool InBeingCarriedCorpse, float InAlcoholPercent, struct FVector* Velocity, bool* IsMoving_0, bool* HasMovementInput_0, bool* IsAiming_0, uint8* AimType_0, float* Direction_0, float* CharacterRotationDifference_0, float* VelocityDifference_0, float* AimYawDelta_0, float* AimYawRate_0, struct FRotator* CharacterRotation_0, struct FRotator* LookingRotation_0, struct FRotator* LastVelocityRotation_0, struct FRotator* LastMovementInputRotation_0, bool* CarryingCorpse_0, bool* BeingCarriedCorpse_0, float* AlcoholPercent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AnimComponent_SCT_C", "GetEssentialValuesBPI");

	Params::AnimComponent_SCT_C_GetEssentialValuesBPI Parms{};

	Parms.InVelocity = std::move(InVelocity);
	Parms.InIsMoving = InIsMoving;
	Parms.InHasMovementInput = InHasMovementInput;
	Parms.InIsAiming = InIsAiming;
	Parms.InAimType = InAimType;
	Parms.InDirection = InDirection;
	Parms.InCharacterRotationDifference = InCharacterRotationDifference;
	Parms.InVelocityDifference = InVelocityDifference;
	Parms.InAimYawDelta = InAimYawDelta;
	Parms.InAimYawRate = InAimYawRate;
	Parms.InCharacterRotation = std::move(InCharacterRotation);
	Parms.InLookingRotation = std::move(InLookingRotation);
	Parms.InLastVelocityRotation = std::move(InLastVelocityRotation);
	Parms.InLastMovementInputRotation = std::move(InLastMovementInputRotation);
	Parms.InCarryingCorpse = InCarryingCorpse;
	Parms.InBeingCarriedCorpse = InBeingCarriedCorpse;
	Parms.InAlcoholPercent = InAlcoholPercent;

	UObject::ProcessEvent(Func, &Parms);

	if (Velocity != nullptr)
		*Velocity = std::move(Parms.Velocity);

	if (IsMoving_0 != nullptr)
		*IsMoving_0 = Parms.IsMoving_0;

	if (HasMovementInput_0 != nullptr)
		*HasMovementInput_0 = Parms.HasMovementInput_0;

	if (IsAiming_0 != nullptr)
		*IsAiming_0 = Parms.IsAiming_0;

	if (AimType_0 != nullptr)
		*AimType_0 = Parms.AimType_0;

	if (Direction_0 != nullptr)
		*Direction_0 = Parms.Direction_0;

	if (CharacterRotationDifference_0 != nullptr)
		*CharacterRotationDifference_0 = Parms.CharacterRotationDifference_0;

	if (VelocityDifference_0 != nullptr)
		*VelocityDifference_0 = Parms.VelocityDifference_0;

	if (AimYawDelta_0 != nullptr)
		*AimYawDelta_0 = Parms.AimYawDelta_0;

	if (AimYawRate_0 != nullptr)
		*AimYawRate_0 = Parms.AimYawRate_0;

	if (CharacterRotation_0 != nullptr)
		*CharacterRotation_0 = std::move(Parms.CharacterRotation_0);

	if (LookingRotation_0 != nullptr)
		*LookingRotation_0 = std::move(Parms.LookingRotation_0);

	if (LastVelocityRotation_0 != nullptr)
		*LastVelocityRotation_0 = std::move(Parms.LastVelocityRotation_0);

	if (LastMovementInputRotation_0 != nullptr)
		*LastMovementInputRotation_0 = std::move(Parms.LastMovementInputRotation_0);

	if (CarryingCorpse_0 != nullptr)
		*CarryingCorpse_0 = Parms.CarryingCorpse_0;

	if (BeingCarriedCorpse_0 != nullptr)
		*BeingCarriedCorpse_0 = Parms.BeingCarriedCorpse_0;

	if (AlcoholPercent != nullptr)
		*AlcoholPercent = Parms.AlcoholPercent;
}


// Function AnimComponent_SCT.AnimComponent_SCT_C.GetSetupValuesBPI
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   InCrouchSpeed                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   InWalkSpeed                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   InRunSpeed                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   InSprintSpeed                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    InFemale                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// float                                   CrouchSpeed_0                                          (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   WalkSpeed_0                                            (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   RunSpeed_0                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   SprintSpeed_0                                          (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Female_0                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UAnimComponent_SCT_C::GetSetupValuesBPI(float InCrouchSpeed, float InWalkSpeed, float InRunSpeed, float InSprintSpeed, bool InFemale, float* CrouchSpeed_0, float* WalkSpeed_0, float* RunSpeed_0, float* SprintSpeed_0, bool* Female_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AnimComponent_SCT_C", "GetSetupValuesBPI");

	Params::AnimComponent_SCT_C_GetSetupValuesBPI Parms{};

	Parms.InCrouchSpeed = InCrouchSpeed;
	Parms.InWalkSpeed = InWalkSpeed;
	Parms.InRunSpeed = InRunSpeed;
	Parms.InSprintSpeed = InSprintSpeed;
	Parms.InFemale = InFemale;

	UObject::ProcessEvent(Func, &Parms);

	if (CrouchSpeed_0 != nullptr)
		*CrouchSpeed_0 = Parms.CrouchSpeed_0;

	if (WalkSpeed_0 != nullptr)
		*WalkSpeed_0 = Parms.WalkSpeed_0;

	if (RunSpeed_0 != nullptr)
		*RunSpeed_0 = Parms.RunSpeed_0;

	if (SprintSpeed_0 != nullptr)
		*SprintSpeed_0 = Parms.SprintSpeed_0;

	if (Female_0 != nullptr)
		*Female_0 = Parms.Female_0;
}


// Function AnimComponent_SCT.AnimComponent_SCT_C.CanRotate
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// bool                                    CanRotate_0                                            (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UAnimComponent_SCT_C::CanRotate(bool* CanRotate_0) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AnimComponent_SCT_C", "CanRotate");

	Params::AnimComponent_SCT_C_CanRotate Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (CanRotate_0 != nullptr)
		*CanRotate_0 = Parms.CanRotate_0;
}

}

