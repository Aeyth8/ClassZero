#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: SCTPlayerController_MatchBP

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "SCT_structs.hpp"
#include "SCT_classes.hpp"
#include "EJoystickTypes_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass SCTPlayerController_MatchBP.SCTPlayerController_MatchBP_C
// 0x0098 (0x06C8 - 0x0630)
class ASCTPlayerController_MatchBP_C final : public ASCTPlayerController_Match
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0630(0x0008)(ZeroConstructor, Transient, DuplicateTransient, UObjectWrapper)
	class UPlayerHapticsComponent*                PlayerHaptics;                                     // 0x0638(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UTextChatComponent_C*                   TextChatComponent;                                 // 0x0640(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	float                                         CameraPitchMin;                                    // 0x0648(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CameraPitchMax;                                    // 0x064C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsPersonoid;                                       // 0x0650(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	EFate                                         Fate;                                              // 0x0651(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_652[0x6];                                      // 0x0652(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UFCTGameInstanceBP_C*                   GameInstance;                                      // 0x0658(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ATextChatActorObject_C*                 TextChatActorObject;                               // 0x0660(0x0008)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bIsPlayerStateAvailableOnClient;                   // 0x0668(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor)
	uint8                                         Pad_669[0x3];                                      // 0x0669(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         StartTime;                                         // 0x066C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ServerClockOffset;                                 // 0x0670(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_674[0x4];                                      // 0x0674(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	FMulticastInlineDelegateProperty_             On_RightTriggerPressed;                            // 0x0678(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	FMulticastInlineDelegateProperty_             On_LeftTriggerPressed;                             // 0x0688(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	FMulticastInlineDelegateProperty_             On_RightFaceButtonPressed;                         // 0x0698(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	FMulticastInlineDelegateProperty_             On_TopFaceButtonPressed;                           // 0x06A8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	FMulticastInlineDelegateProperty_             On_LeftFaceButtonPressed;                          // 0x06B8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)

public:
	void On_RightTriggerPressed__DelegateSignature();
	void On_LeftTriggerPressed__DelegateSignature();
	void On_RightFaceButtonPressed__DelegateSignature();
	void On_TopFaceButtonPressed__DelegateSignature();
	void On_LeftFaceButtonPressed__DelegateSignature();
	void ExecuteUbergraph_SCTPlayerController_MatchBP(int32 EntryPoint);
	void OnXboxUserLogOut();
	void OnConsoleLaunchMultiplayerIntent();
	void OnConsoleLaunchIntent();
	void OnAcceptConsoleInvite();
	void OwningClockSync(float ServerTime);
	void StartServerClockSync();
	void SetKarmaUI();
	void ServerReroutePlayerLoaded();
	void ReroutePlayerLoaded();
	void ReceiveUnPossess(class APawn* UnpossessedPawn);
	void BindAndWaitForClientPlayerStateSync();
	void PlayerStateReceivedOnClient(class ASCTPlayerState* PlayerState_0);
	void K2_OnGrantedPassengerLogInformation(const struct FPassengerLogInformation& LogInformation);
	void K2_PreClientTravel(const class FString& PendingURL, ETravelType TravelType, bool bIsSeamlessTravel);
	void ReceivePossess(class APawn* PossessedPawn);
	void ReceiveBeginPlay();
	void InpActEvt_Gamepad_FaceButton_Left_K2Node_InputKeyEvent_0(const struct FKey& Key);
	void InpActEvt_Gamepad_FaceButton_Right_K2Node_InputKeyEvent_1(const struct FKey& Key);
	void InpActEvt_Gamepad_FaceButton_Top_K2Node_InputKeyEvent_2(const struct FKey& Key);
	void InpActEvt_Gamepad_LeftTrigger_K2Node_InputKeyEvent_3(const struct FKey& Key);
	void InpActEvt_Gamepad_RightTrigger_K2Node_InputKeyEvent_4(const struct FKey& Key);
	void InpActEvt_EscapeAMenu_K2Node_InputActionEvent_0(const struct FKey& Key);
	void InpActEvt_ToggleAllChat_K2Node_InputActionEvent_1(const struct FKey& Key);
	void InpActEvt_TogglePersonoidChat_K2Node_InputActionEvent_2(const struct FKey& Key);
	void InpActEvt_AnyKey_K2Node_InputKeyEvent_5(const struct FKey& Key);
	void OnSuccess_BF79541D42FA83C06A3992A2DDDDA7C0();
	void OnFail_BF79541D42FA83C06A3992A2DDDDA7C0();
	void OnSuccess_BF79541D42FA83C06A3992A20EBCD041();
	void OnFail_BF79541D42FA83C06A3992A20EBCD041();
	void OnSuccess_AD49ED624DB5C71E7B2FE5B562F55E77();
	void OnFail_AD49ED624DB5C71E7B2FE5B562F55E77();
	void OnSuccess_AD49ED624DB5C71E7B2FE5B5CDC208F8();
	void OnFail_AD49ED624DB5C71E7B2FE5B5CDC208F8();
	void OnSuccess_AD49ED624DB5C71E7B2FE5B533ED3CDD();
	void OnFail_AD49ED624DB5C71E7B2FE5B533ED3CDD();
	void SetGameInstanceReference();
	void OnRep_bIsPlayerStateAvailableOnClient();
	void Add_Karma_System_Widget_To_Ingame_UI();
	void CalculateSyncedDelay(float ServerTime, float* ClockOffset);
	void SyncNetworkClock();
	void GetJoystickDirection(EJoystickTypes Stick, struct FVector2D* StickInput);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"SCTPlayerController_MatchBP_C">();
	}
	static class ASCTPlayerController_MatchBP_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ASCTPlayerController_MatchBP_C>();
	}
};
static_assert(alignof(ASCTPlayerController_MatchBP_C) == 0x000008, "Wrong alignment on ASCTPlayerController_MatchBP_C");
static_assert(sizeof(ASCTPlayerController_MatchBP_C) == 0x0006C8, "Wrong size on ASCTPlayerController_MatchBP_C");
static_assert(offsetof(ASCTPlayerController_MatchBP_C, UberGraphFrame) == 0x000630, "Member 'ASCTPlayerController_MatchBP_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ASCTPlayerController_MatchBP_C, PlayerHaptics) == 0x000638, "Member 'ASCTPlayerController_MatchBP_C::PlayerHaptics' has a wrong offset!");
static_assert(offsetof(ASCTPlayerController_MatchBP_C, TextChatComponent) == 0x000640, "Member 'ASCTPlayerController_MatchBP_C::TextChatComponent' has a wrong offset!");
static_assert(offsetof(ASCTPlayerController_MatchBP_C, CameraPitchMin) == 0x000648, "Member 'ASCTPlayerController_MatchBP_C::CameraPitchMin' has a wrong offset!");
static_assert(offsetof(ASCTPlayerController_MatchBP_C, CameraPitchMax) == 0x00064C, "Member 'ASCTPlayerController_MatchBP_C::CameraPitchMax' has a wrong offset!");
static_assert(offsetof(ASCTPlayerController_MatchBP_C, IsPersonoid) == 0x000650, "Member 'ASCTPlayerController_MatchBP_C::IsPersonoid' has a wrong offset!");
static_assert(offsetof(ASCTPlayerController_MatchBP_C, Fate) == 0x000651, "Member 'ASCTPlayerController_MatchBP_C::Fate' has a wrong offset!");
static_assert(offsetof(ASCTPlayerController_MatchBP_C, GameInstance) == 0x000658, "Member 'ASCTPlayerController_MatchBP_C::GameInstance' has a wrong offset!");
static_assert(offsetof(ASCTPlayerController_MatchBP_C, TextChatActorObject) == 0x000660, "Member 'ASCTPlayerController_MatchBP_C::TextChatActorObject' has a wrong offset!");
static_assert(offsetof(ASCTPlayerController_MatchBP_C, bIsPlayerStateAvailableOnClient) == 0x000668, "Member 'ASCTPlayerController_MatchBP_C::bIsPlayerStateAvailableOnClient' has a wrong offset!");
static_assert(offsetof(ASCTPlayerController_MatchBP_C, StartTime) == 0x00066C, "Member 'ASCTPlayerController_MatchBP_C::StartTime' has a wrong offset!");
static_assert(offsetof(ASCTPlayerController_MatchBP_C, ServerClockOffset) == 0x000670, "Member 'ASCTPlayerController_MatchBP_C::ServerClockOffset' has a wrong offset!");
static_assert(offsetof(ASCTPlayerController_MatchBP_C, On_RightTriggerPressed) == 0x000678, "Member 'ASCTPlayerController_MatchBP_C::On_RightTriggerPressed' has a wrong offset!");
static_assert(offsetof(ASCTPlayerController_MatchBP_C, On_LeftTriggerPressed) == 0x000688, "Member 'ASCTPlayerController_MatchBP_C::On_LeftTriggerPressed' has a wrong offset!");
static_assert(offsetof(ASCTPlayerController_MatchBP_C, On_RightFaceButtonPressed) == 0x000698, "Member 'ASCTPlayerController_MatchBP_C::On_RightFaceButtonPressed' has a wrong offset!");
static_assert(offsetof(ASCTPlayerController_MatchBP_C, On_TopFaceButtonPressed) == 0x0006A8, "Member 'ASCTPlayerController_MatchBP_C::On_TopFaceButtonPressed' has a wrong offset!");
static_assert(offsetof(ASCTPlayerController_MatchBP_C, On_LeftFaceButtonPressed) == 0x0006B8, "Member 'ASCTPlayerController_MatchBP_C::On_LeftFaceButtonPressed' has a wrong offset!");

}

