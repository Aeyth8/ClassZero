#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_AquaticSurface

#include "Basic.hpp"

#include "BS_AquaticSplash_structs.hpp"
#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_AquaticSurface.BP_AquaticSurface_C
// 0x01A8 (0x03C8 - 0x0220)
class ABP_AquaticSurface_C final : public AActor
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0220(0x0008)(ZeroConstructor, Transient, DuplicateTransient, UObjectWrapper)
	class USceneCaptureComponentCube*             CaptureCube;                                       // 0x0228(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBoxComponent*                          InteractionView;                                   // 0x0230(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   PlaneTopDown;                                      // 0x0238(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UPlanarReflectionComponent*             PlanarReflection;                                  // 0x0240(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   PlaneUnderWater;                                   // 0x0248(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   PlaneOverWater;                                    // 0x0250(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBoxComponent*                          PostProcessShape;                                  // 0x0258(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBoxComponent*                          ReflectionUnder;                                   // 0x0260(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBoxComponent*                          ReflectionOver;                                    // 0x0268(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBillboardComponent*                    ReflectionBillboad;                                // 0x0270(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        Root;                                              // 0x0278(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   PostProcessMesh;                                   // 0x0280(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UPostProcessComponent*                  PostProcess;                                       // 0x0288(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstance*                      OverWaterMaterial;                                 // 0x0290(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstance*                      UnderWaterMaterial;                                // 0x0298(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstance*                      VolumeMaterial;                                    // 0x02A0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstance*                      ScreenMaterial;                                    // 0x02A8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstance*                      TopDownMaterial;                                   // 0x02B0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                VolumeBoxExtend;                                   // 0x02B8(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2C4[0x4];                                      // 0x02C4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInstanceDynamic*               OverWaterMaterialInstance;                         // 0x02C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               UnderWaterMaterialInstance;                        // 0x02D0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_AquaticRefletion_C*                 ReflectionExternal;                                // 0x02D8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UTexture*                               StaticReflectionCubemap;                           // 0x02E0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class AActor*>                         HiddenInReflection;                                // 0x02E8(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate)
	float                                         ReflectionCaptureDelay;                            // 0x02F8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                ReflectionLocation;                                // 0x02FC(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                ReflectionBoxOverExtend;                           // 0x0308(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                ReflectionBoxOverLocation;                         // 0x0314(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                ReflectionBoxUnderExtend;                          // 0x0320(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                ReflectionBoxUnderLocation;                        // 0x032C(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                VolumeBoxLocation;                                 // 0x0338(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         VolumeFogDensity;                                  // 0x0344(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         VolumeFogBase;                                     // 0x0348(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_34C[0x4];                                      // 0x034C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInstanceDynamic*               VolumeMaterialInstance;                            // 0x0350(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         BuoyancyAngularDamping;                            // 0x0358(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         BuoyancyLinearDamping;                             // 0x035C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_AquaticSimulation_C*                AquaticSimulation;                                 // 0x0360(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ShowVolumeMesh;                                    // 0x0368(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          UseReflectionPlane;                                // 0x0369(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_36A[0x6];                                      // 0x036A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UPlanarReflectionComponent*             ReflectionPlane;                                   // 0x0370(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               TopDownMaterialInstance;                           // 0x0378(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<struct FBS_AquaticSplash>              SplashEffects;                                     // 0x0380(0x0010)(Edit, BlueprintVisible)
	struct FVector                                AudioExtend;                                       // 0x0390(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CameraUpdateFrequency;                             // 0x039C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class AActor*>                         InteractionsInView;                                // 0x03A0(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance)
	TArray<class AActor*>                         InteractionsOnSurface;                             // 0x03B0(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance)
	class UMaterialInstanceDynamic*               ScreenMaterialIntance;                             // 0x03C0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_BP_AquaticSurface(int32 EntryPoint);
	void BndEvt__PlaneOverWater_K2Node_ComponentBoundEvent_1_ComponentEndOverlapSignature__DelegateSignature(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex);
	void BndEvt__PlaneOverWater_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult);
	void OnWorldOriginChanged(const struct FIntVector& Old_Origin, const struct FIntVector& New_Origin);
	void UpdateCameraEvent();
	void BndEvt__InteractionShape_K2Node_ComponentBoundEvent_1_ComponentEndOverlapSignature__DelegateSignature(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex);
	void BndEvt__InteractionShape_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult);
	void BndEvt__PostProcessShape_K2Node_ComponentBoundEvent_0_ComponentEndOverlapSignature__DelegateSignature(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex);
	void BndEvt__PostProcessShape_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult);
	void CaptureEvent();
	void ReceiveBeginPlay();
	void UserConstructionScript();
	void UpdateVolume();
	void UpdateReflectionShape();
	void UpdatePostProcessShape();
	void InitMaterials();
	void BoxReflection(class UBoxComponent* BoxShape, class UMaterialInstanceDynamic* UseMaterial, const struct FVector& BoxExtent, const struct FVector& BoxLocation, bool Over);
	void OnBeginOverlapBuoyancy(class AActor* OtherActor);
	void SetInteraction(class UTexture* Value);
	void OnEndOverlapBuoyancy(class AActor* OtherAtor);
	void OnBeginOverlapInteraction(class AActor* OtherActor, TArray<class AActor*>& List);
	void OnEndOverlapInteraction(class AActor* OtherAtor, TArray<class AActor*>& List);
	void GetHeight(float* Height);
	void Reconstruct();
	void UpdateInteractionComponent(const struct FVector2D& Location, float InteractionRadius);
	void PlaySplashEffectByIndex(int32 Index_0, const struct FVector& SplashLocation, float SplashScale, float SplashVelocity);
	void OverlapCamera();
	void UpdateCubemapParameters();
	void CleanHoles();
	void InitReflectionPlane();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_AquaticSurface_C">();
	}
	static class ABP_AquaticSurface_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_AquaticSurface_C>();
	}
};
static_assert(alignof(ABP_AquaticSurface_C) == 0x000008, "Wrong alignment on ABP_AquaticSurface_C");
static_assert(sizeof(ABP_AquaticSurface_C) == 0x0003C8, "Wrong size on ABP_AquaticSurface_C");
static_assert(offsetof(ABP_AquaticSurface_C, UberGraphFrame) == 0x000220, "Member 'ABP_AquaticSurface_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_AquaticSurface_C, CaptureCube) == 0x000228, "Member 'ABP_AquaticSurface_C::CaptureCube' has a wrong offset!");
static_assert(offsetof(ABP_AquaticSurface_C, InteractionView) == 0x000230, "Member 'ABP_AquaticSurface_C::InteractionView' has a wrong offset!");
static_assert(offsetof(ABP_AquaticSurface_C, PlaneTopDown) == 0x000238, "Member 'ABP_AquaticSurface_C::PlaneTopDown' has a wrong offset!");
static_assert(offsetof(ABP_AquaticSurface_C, PlanarReflection) == 0x000240, "Member 'ABP_AquaticSurface_C::PlanarReflection' has a wrong offset!");
static_assert(offsetof(ABP_AquaticSurface_C, PlaneUnderWater) == 0x000248, "Member 'ABP_AquaticSurface_C::PlaneUnderWater' has a wrong offset!");
static_assert(offsetof(ABP_AquaticSurface_C, PlaneOverWater) == 0x000250, "Member 'ABP_AquaticSurface_C::PlaneOverWater' has a wrong offset!");
static_assert(offsetof(ABP_AquaticSurface_C, PostProcessShape) == 0x000258, "Member 'ABP_AquaticSurface_C::PostProcessShape' has a wrong offset!");
static_assert(offsetof(ABP_AquaticSurface_C, ReflectionUnder) == 0x000260, "Member 'ABP_AquaticSurface_C::ReflectionUnder' has a wrong offset!");
static_assert(offsetof(ABP_AquaticSurface_C, ReflectionOver) == 0x000268, "Member 'ABP_AquaticSurface_C::ReflectionOver' has a wrong offset!");
static_assert(offsetof(ABP_AquaticSurface_C, ReflectionBillboad) == 0x000270, "Member 'ABP_AquaticSurface_C::ReflectionBillboad' has a wrong offset!");
static_assert(offsetof(ABP_AquaticSurface_C, Root) == 0x000278, "Member 'ABP_AquaticSurface_C::Root' has a wrong offset!");
static_assert(offsetof(ABP_AquaticSurface_C, PostProcessMesh) == 0x000280, "Member 'ABP_AquaticSurface_C::PostProcessMesh' has a wrong offset!");
static_assert(offsetof(ABP_AquaticSurface_C, PostProcess) == 0x000288, "Member 'ABP_AquaticSurface_C::PostProcess' has a wrong offset!");
static_assert(offsetof(ABP_AquaticSurface_C, OverWaterMaterial) == 0x000290, "Member 'ABP_AquaticSurface_C::OverWaterMaterial' has a wrong offset!");
static_assert(offsetof(ABP_AquaticSurface_C, UnderWaterMaterial) == 0x000298, "Member 'ABP_AquaticSurface_C::UnderWaterMaterial' has a wrong offset!");
static_assert(offsetof(ABP_AquaticSurface_C, VolumeMaterial) == 0x0002A0, "Member 'ABP_AquaticSurface_C::VolumeMaterial' has a wrong offset!");
static_assert(offsetof(ABP_AquaticSurface_C, ScreenMaterial) == 0x0002A8, "Member 'ABP_AquaticSurface_C::ScreenMaterial' has a wrong offset!");
static_assert(offsetof(ABP_AquaticSurface_C, TopDownMaterial) == 0x0002B0, "Member 'ABP_AquaticSurface_C::TopDownMaterial' has a wrong offset!");
static_assert(offsetof(ABP_AquaticSurface_C, VolumeBoxExtend) == 0x0002B8, "Member 'ABP_AquaticSurface_C::VolumeBoxExtend' has a wrong offset!");
static_assert(offsetof(ABP_AquaticSurface_C, OverWaterMaterialInstance) == 0x0002C8, "Member 'ABP_AquaticSurface_C::OverWaterMaterialInstance' has a wrong offset!");
static_assert(offsetof(ABP_AquaticSurface_C, UnderWaterMaterialInstance) == 0x0002D0, "Member 'ABP_AquaticSurface_C::UnderWaterMaterialInstance' has a wrong offset!");
static_assert(offsetof(ABP_AquaticSurface_C, ReflectionExternal) == 0x0002D8, "Member 'ABP_AquaticSurface_C::ReflectionExternal' has a wrong offset!");
static_assert(offsetof(ABP_AquaticSurface_C, StaticReflectionCubemap) == 0x0002E0, "Member 'ABP_AquaticSurface_C::StaticReflectionCubemap' has a wrong offset!");
static_assert(offsetof(ABP_AquaticSurface_C, HiddenInReflection) == 0x0002E8, "Member 'ABP_AquaticSurface_C::HiddenInReflection' has a wrong offset!");
static_assert(offsetof(ABP_AquaticSurface_C, ReflectionCaptureDelay) == 0x0002F8, "Member 'ABP_AquaticSurface_C::ReflectionCaptureDelay' has a wrong offset!");
static_assert(offsetof(ABP_AquaticSurface_C, ReflectionLocation) == 0x0002FC, "Member 'ABP_AquaticSurface_C::ReflectionLocation' has a wrong offset!");
static_assert(offsetof(ABP_AquaticSurface_C, ReflectionBoxOverExtend) == 0x000308, "Member 'ABP_AquaticSurface_C::ReflectionBoxOverExtend' has a wrong offset!");
static_assert(offsetof(ABP_AquaticSurface_C, ReflectionBoxOverLocation) == 0x000314, "Member 'ABP_AquaticSurface_C::ReflectionBoxOverLocation' has a wrong offset!");
static_assert(offsetof(ABP_AquaticSurface_C, ReflectionBoxUnderExtend) == 0x000320, "Member 'ABP_AquaticSurface_C::ReflectionBoxUnderExtend' has a wrong offset!");
static_assert(offsetof(ABP_AquaticSurface_C, ReflectionBoxUnderLocation) == 0x00032C, "Member 'ABP_AquaticSurface_C::ReflectionBoxUnderLocation' has a wrong offset!");
static_assert(offsetof(ABP_AquaticSurface_C, VolumeBoxLocation) == 0x000338, "Member 'ABP_AquaticSurface_C::VolumeBoxLocation' has a wrong offset!");
static_assert(offsetof(ABP_AquaticSurface_C, VolumeFogDensity) == 0x000344, "Member 'ABP_AquaticSurface_C::VolumeFogDensity' has a wrong offset!");
static_assert(offsetof(ABP_AquaticSurface_C, VolumeFogBase) == 0x000348, "Member 'ABP_AquaticSurface_C::VolumeFogBase' has a wrong offset!");
static_assert(offsetof(ABP_AquaticSurface_C, VolumeMaterialInstance) == 0x000350, "Member 'ABP_AquaticSurface_C::VolumeMaterialInstance' has a wrong offset!");
static_assert(offsetof(ABP_AquaticSurface_C, BuoyancyAngularDamping) == 0x000358, "Member 'ABP_AquaticSurface_C::BuoyancyAngularDamping' has a wrong offset!");
static_assert(offsetof(ABP_AquaticSurface_C, BuoyancyLinearDamping) == 0x00035C, "Member 'ABP_AquaticSurface_C::BuoyancyLinearDamping' has a wrong offset!");
static_assert(offsetof(ABP_AquaticSurface_C, AquaticSimulation) == 0x000360, "Member 'ABP_AquaticSurface_C::AquaticSimulation' has a wrong offset!");
static_assert(offsetof(ABP_AquaticSurface_C, ShowVolumeMesh) == 0x000368, "Member 'ABP_AquaticSurface_C::ShowVolumeMesh' has a wrong offset!");
static_assert(offsetof(ABP_AquaticSurface_C, UseReflectionPlane) == 0x000369, "Member 'ABP_AquaticSurface_C::UseReflectionPlane' has a wrong offset!");
static_assert(offsetof(ABP_AquaticSurface_C, ReflectionPlane) == 0x000370, "Member 'ABP_AquaticSurface_C::ReflectionPlane' has a wrong offset!");
static_assert(offsetof(ABP_AquaticSurface_C, TopDownMaterialInstance) == 0x000378, "Member 'ABP_AquaticSurface_C::TopDownMaterialInstance' has a wrong offset!");
static_assert(offsetof(ABP_AquaticSurface_C, SplashEffects) == 0x000380, "Member 'ABP_AquaticSurface_C::SplashEffects' has a wrong offset!");
static_assert(offsetof(ABP_AquaticSurface_C, AudioExtend) == 0x000390, "Member 'ABP_AquaticSurface_C::AudioExtend' has a wrong offset!");
static_assert(offsetof(ABP_AquaticSurface_C, CameraUpdateFrequency) == 0x00039C, "Member 'ABP_AquaticSurface_C::CameraUpdateFrequency' has a wrong offset!");
static_assert(offsetof(ABP_AquaticSurface_C, InteractionsInView) == 0x0003A0, "Member 'ABP_AquaticSurface_C::InteractionsInView' has a wrong offset!");
static_assert(offsetof(ABP_AquaticSurface_C, InteractionsOnSurface) == 0x0003B0, "Member 'ABP_AquaticSurface_C::InteractionsOnSurface' has a wrong offset!");
static_assert(offsetof(ABP_AquaticSurface_C, ScreenMaterialIntance) == 0x0003C0, "Member 'ABP_AquaticSurface_C::ScreenMaterialIntance' has a wrong offset!");

}

