#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: bp_wi_VotingEntryOption

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "E_AirLockVotes_structs.hpp"
#include "UMG_classes.hpp"
#include "E_Characters_structs.hpp"


namespace SDK
{

// WidgetBlueprintGeneratedClass bp_wi_VotingEntryOption.bp_wi_VotingEntryOption_C
// 0x00A0 (0x0300 - 0x0260)
class Ubp_wi_VotingEntryOption_C final : public UUserWidget
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0260(0x0008)(ZeroConstructor, Transient, DuplicateTransient, UObjectWrapper)
	class UButton*                                Button_Vote;                                       // 0x0268(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UCanvasPanel*                           Canvas_DoYouTrustEveryone;                         // 0x0270(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UCanvasPanel*                           Canvas_WhichLogToSee;                              // 0x0278(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 Image_175;                                         // 0x0280(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 Img_Character;                                     // 0x0288(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UTextBlock*                             Text_LogNumber;                                    // 0x0290(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UTextBlock*                             Text_PassengerNo;                                  // 0x0298(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UTextBlock*                             Text_PlayerName;                                   // 0x02A0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class FText                                   PlayerName;                                        // 0x02A8(0x0018)(Edit, BlueprintVisible, ExposeOnSpawn)
	int32                                         VotingOptionIndex;                                 // 0x02C0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	uint8                                         Pad_2C4[0x4];                                      // 0x02C4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	FMulticastInlineDelegateProperty_             OnVotingButtonClicked;                             // 0x02C8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	bool                                          GoodOption;                                        // 0x02D8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn)
	E_AirLockVotes                                E_AirLockVotes;                                    // 0x02D9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	E_Characters                                  Character;                                         // 0x02DA(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	uint8                                         Pad_2DB[0x5];                                      // 0x02DB(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   LogNumber;                                         // 0x02E0(0x0018)(Edit, BlueprintVisible)
	class UTexture*                               PlayerImage;                                       // 0x02F8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)

public:
	void OnVotingButtonClicked__DelegateSignature(int32 VotingOptionIndex_0);
	void ExecuteUbergraph_bp_wi_VotingEntryOption(int32 EntryPoint);
	void Set_Button_Images_Log();
	void Set_Button_Images_Elimination();
	void Set_Layout_Who_Should_Die(const class FText& Name_0, E_Characters Character_0);
	void Set_Layout_Yes_Or_No(const class FText& Name_0);
	void Set_Layout_Which_Log_To_See(const class FText& Name_0, E_Characters Character_0);
	void Audio_Click(class UAkAudioEvent* AkEvent);
	void BndEvt__Button_Vote_K2Node_ComponentBoundEvent_0_OnButtonClickedEvent__DelegateSignature();
	void PreConstruct(bool IsDesignTime);
	void HideMyOwnVotingEntry();
	class FText Get_Text_LogNumber_Text_0();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"bp_wi_VotingEntryOption_C">();
	}
	static class Ubp_wi_VotingEntryOption_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<Ubp_wi_VotingEntryOption_C>();
	}
};
static_assert(alignof(Ubp_wi_VotingEntryOption_C) == 0x000008, "Wrong alignment on Ubp_wi_VotingEntryOption_C");
static_assert(sizeof(Ubp_wi_VotingEntryOption_C) == 0x000300, "Wrong size on Ubp_wi_VotingEntryOption_C");
static_assert(offsetof(Ubp_wi_VotingEntryOption_C, UberGraphFrame) == 0x000260, "Member 'Ubp_wi_VotingEntryOption_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(Ubp_wi_VotingEntryOption_C, Button_Vote) == 0x000268, "Member 'Ubp_wi_VotingEntryOption_C::Button_Vote' has a wrong offset!");
static_assert(offsetof(Ubp_wi_VotingEntryOption_C, Canvas_DoYouTrustEveryone) == 0x000270, "Member 'Ubp_wi_VotingEntryOption_C::Canvas_DoYouTrustEveryone' has a wrong offset!");
static_assert(offsetof(Ubp_wi_VotingEntryOption_C, Canvas_WhichLogToSee) == 0x000278, "Member 'Ubp_wi_VotingEntryOption_C::Canvas_WhichLogToSee' has a wrong offset!");
static_assert(offsetof(Ubp_wi_VotingEntryOption_C, Image_175) == 0x000280, "Member 'Ubp_wi_VotingEntryOption_C::Image_175' has a wrong offset!");
static_assert(offsetof(Ubp_wi_VotingEntryOption_C, Img_Character) == 0x000288, "Member 'Ubp_wi_VotingEntryOption_C::Img_Character' has a wrong offset!");
static_assert(offsetof(Ubp_wi_VotingEntryOption_C, Text_LogNumber) == 0x000290, "Member 'Ubp_wi_VotingEntryOption_C::Text_LogNumber' has a wrong offset!");
static_assert(offsetof(Ubp_wi_VotingEntryOption_C, Text_PassengerNo) == 0x000298, "Member 'Ubp_wi_VotingEntryOption_C::Text_PassengerNo' has a wrong offset!");
static_assert(offsetof(Ubp_wi_VotingEntryOption_C, Text_PlayerName) == 0x0002A0, "Member 'Ubp_wi_VotingEntryOption_C::Text_PlayerName' has a wrong offset!");
static_assert(offsetof(Ubp_wi_VotingEntryOption_C, PlayerName) == 0x0002A8, "Member 'Ubp_wi_VotingEntryOption_C::PlayerName' has a wrong offset!");
static_assert(offsetof(Ubp_wi_VotingEntryOption_C, VotingOptionIndex) == 0x0002C0, "Member 'Ubp_wi_VotingEntryOption_C::VotingOptionIndex' has a wrong offset!");
static_assert(offsetof(Ubp_wi_VotingEntryOption_C, OnVotingButtonClicked) == 0x0002C8, "Member 'Ubp_wi_VotingEntryOption_C::OnVotingButtonClicked' has a wrong offset!");
static_assert(offsetof(Ubp_wi_VotingEntryOption_C, GoodOption) == 0x0002D8, "Member 'Ubp_wi_VotingEntryOption_C::GoodOption' has a wrong offset!");
static_assert(offsetof(Ubp_wi_VotingEntryOption_C, E_AirLockVotes) == 0x0002D9, "Member 'Ubp_wi_VotingEntryOption_C::E_AirLockVotes' has a wrong offset!");
static_assert(offsetof(Ubp_wi_VotingEntryOption_C, Character) == 0x0002DA, "Member 'Ubp_wi_VotingEntryOption_C::Character' has a wrong offset!");
static_assert(offsetof(Ubp_wi_VotingEntryOption_C, LogNumber) == 0x0002E0, "Member 'Ubp_wi_VotingEntryOption_C::LogNumber' has a wrong offset!");
static_assert(offsetof(Ubp_wi_VotingEntryOption_C, PlayerImage) == 0x0002F8, "Member 'Ubp_wi_VotingEntryOption_C::PlayerImage' has a wrong offset!");

}

