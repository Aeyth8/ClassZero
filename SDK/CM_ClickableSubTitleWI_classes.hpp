#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: CM_ClickableSubTitleWI

#include "Basic.hpp"

#include "ETitleStyle_structs.hpp"
#include "Engine_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "SlateCore_structs.hpp"
#include "SCT_structs.hpp"
#include "SCT_classes.hpp"


namespace SDK
{

// WidgetBlueprintGeneratedClass CM_ClickableSubTitleWI.CM_ClickableSubTitleWI_C
// 0x0268 (0x07E0 - 0x0578)
class UCM_ClickableSubTitleWI_C final : public UControllerSelectionStateWidget
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0578(0x0008)(ZeroConstructor, Transient, DuplicateTransient, UObjectWrapper)
	class UWidgetAnimation*                       Pressed;                                           // 0x0580(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UImage*                                 BottomFlourish;                                    // 0x0588(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 BottomFlourish_1;                                  // 0x0590(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UVerticalBox*                           BottomFlourishBox;                                 // 0x0598(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UCanvasPanel*                           ConsoleIconCanvas;                                 // 0x05A0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class USpacer*                                ConsoleIconSpacer;                                 // 0x05A8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UConsoleIconWI_C*                       ConsoleIconWI;                                     // 0x05B0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UVerticalBox*                           Container;                                         // 0x05B8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class USpacer*                                ContainerOffset;                                   // 0x05C0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 LeftCapImage;                                      // 0x05C8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class USpacer*                                LeftPadding;                                       // 0x05D0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UOverlay*                               Overlay_135;                                       // 0x05D8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 RightCapImage;                                     // 0x05E0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class USpacer*                                RightPadding;                                      // 0x05E8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UOverlay*                               RootOverlay;                                       // 0x05F0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UButton*                                SelectButton_2;                                    // 0x05F8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UTextBlock*                             TitleText;                                         // 0x0600(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 TopFlourish;                                       // 0x0608(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 TopFlourish_1;                                     // 0x0610(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UVerticalBox*                           TopFlourishBox;                                    // 0x0618(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	FMulticastInlineDelegateProperty_             OnPressed_0;                                       // 0x0620(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	FMulticastInlineDelegateProperty_             OnHovered_0;                                       // 0x0630(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	FMulticastInlineDelegateProperty_             OnUnhovered_0;                                     // 0x0640(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	struct FLinearColor                           HoveredColor;                                      // 0x0650(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	struct FLinearColor                           NormalColor;                                       // 0x0660(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	struct FLinearColor                           PressedColor;                                      // 0x0670(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	class FText                                   LabelText;                                         // 0x0680(0x0018)(Edit, BlueprintVisible, ExposeOnSpawn)
	struct FLinearColor                           CurrentColorState;                                 // 0x0698(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	FMulticastInlineDelegateProperty_             OnReleased;                                        // 0x06A8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	class UTexture2D*                             ConsoleButtonTexture;                              // 0x06B8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	bool                                          bHoldConsoleButton;                                // 0x06C0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn)
	uint8                                         Pad_6C1[0x3];                                      // 0x06C1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Height;                                            // 0x06C4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	float                                         CapAspectRatio;                                    // 0x06C8(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ButtonRelativeScalePressed;                        // 0x06CC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ButtonRelativeScaleHold;                           // 0x06D0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETitleStyle                                   Style;                                             // 0x06D4(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	bool                                          bHideButtonImageOnConsole;                         // 0x06D5(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn)
	uint8                                         Pad_6D6[0x2];                                      // 0x06D6(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         TextPadding;                                       // 0x06D8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	bool                                          bIsButton;                                         // 0x06DC(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn)
	bool                                          bOverrideTextColor;                                // 0x06DD(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn)
	uint8                                         Pad_6DE[0x2];                                      // 0x06DE(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           TextOverrideColor;                                 // 0x06E0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	int32                                         TextSize;                                          // 0x06F0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	bool                                          PressedAnimation;                                  // 0x06F4(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          bConsoleDebugMode;                                 // 0x06F5(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn)
	uint8                                         Pad_6F6[0x2];                                      // 0x06F6(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	FMulticastInlineDelegateProperty_             OnHoldStart;                                       // 0x06F8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	FMulticastInlineDelegateProperty_             OnHoldCancel;                                      // 0x0708(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	FMulticastInlineDelegateProperty_             OnHoldComplete;                                    // 0x0718(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	class FName                                   GamepadAction;                                     // 0x0728(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	struct FTimerHandle                           CurrentHoldTimer;                                  // 0x0730(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	bool                                          bIsMousePressed;                                   // 0x0738(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bIsMouseHovered;                                   // 0x0739(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bIsGamepadPressed;                                 // 0x073A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_73B[0x1];                                      // 0x073B(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         HoldTimeS;                                         // 0x073C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	bool                                          ImmediatelyListenForGamepadInput;                  // 0x0740(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn)
	bool                                          bGamepadInputActive;                               // 0x0741(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_742[0x6];                                      // 0x0742(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UAkAudioEvent*                          Ak;                                                // 0x0748(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	TMap<class UTexture2D*, class UTexture2D*>    IconConversionMap;                                 // 0x0750(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance)
	float                                         ConsoleXBoxIconSizeOverride;                       // 0x07A0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	float                                         ConsolePSIconSizeOverride;                         // 0x07A4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	bool                                          bIsFocusableByGamepad;                             // 0x07A8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7A9[0x7];                                      // 0x07A9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSlateColor                            OverrideColor;                                     // 0x07B0(0x0028)(Edit, BlueprintVisible)
	bool                                          bHoldButtonHasSound;                               // 0x07D8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          bHasNegativeOffsetWithIcon;                        // 0x07D9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn)

public:
	void OnPressed_0__DelegateSignature();
	void OnHovered_0__DelegateSignature();
	void OnUnhovered_0__DelegateSignature();
	void OnReleased__DelegateSignature();
	void OnHoldStart__DelegateSignature();
	void OnHoldCancel__DelegateSignature();
	void OnHoldComplete__DelegateSignature();
	void ExecuteUbergraph_CM_ClickableSubTitleWI(int32 EntryPoint);
	void Force_Normal_Cosmetics();
	void SetHoldStateHasSound(bool bInHoldStateHasSound);
	void BndEvt__CM_ClickableSubTitleWI_SelectButton_2_K2Node_ComponentBoundEvent_0_OnButtonPressedEvent__DelegateSignature();
	void ActivateWidget();
	void K2_EventOnSelectionReleased();
	void K2_EventOnSelectionPressed();
	void K2_EventOnSetHoveredCosmetics();
	void K2_EventOnSetSelectedCosmetics();
	void K2_EventOnSetNormalCosmetics();
	void K2_EventOnSetPressedCosmetics();
	void OnRemovedFromFocusPath(const struct FFocusEvent& InFocusEvent);
	void OnAddedToFocusPath(const struct FFocusEvent& InFocusEvent);
	void ResetDisplay();
	void OnExternalButtonReleased();
	void OnExternalButtonPressed();
	void OnHoldActionComplete();
	void OnHoldActionReleased();
	void OnHoldActionPressed();
	void Destruct();
	void OnStopListeningForGamepadInput();
	void OnStartListeningForGamepadInput();
	void BndEvt__CM_ClickableSubTitleWI_ButtonItem_K2Node_ComponentBoundEvent_4_OnButtonReleasedEvent__DelegateSignature();
	void BndEvt__CM_ClickableSubTitleWI_ButtonItem_K2Node_ComponentBoundEvent_3_OnButtonHoverEvent__DelegateSignature();
	void BndEvt__CM_ClickableSubTitleWI_ButtonItem_K2Node_ComponentBoundEvent_2_OnButtonHoverEvent__DelegateSignature();
	void Tick(const struct FGeometry& MyGeometry, float InDeltaTime);
	void Construct();
	void PreConstruct(bool IsDesignTime);
	void DeactivateWidget();
	void Check_Minimum_Height();
	void SetupUI();
	void SetButtonState(bool bEnabled);
	void SetupBannerUI(const class FText& InTitle, int32 InTextSize, float InHeight, const struct FLinearColor& InTextColor, const struct FLinearColor& InBackgroundColor, ETitleStyle InStyle, float InTextPadding);
	void SetupConsoleButtonUI();
	bool IsSonyPlatform();
	void CancelHold();
	void RefreshButtonVisuals();
	void GetHoldProgress(float* Progress);
	void UpdateButtonIconPrompt();
	void SetSlateCosmetics();
	void SetNavigationForDirection(EUINavigation Direction, class UWidget* Target);
	void GetNavigationWidget(class UWidget** Widget);

	bool ShouldShowButtonIconPrompt() const;
	void GetLastControllerType(ESCTControllerType* ControllerType, bool* Success) const;
	bool IsUsingControllerOnPC() const;
	void GetIcon(class UTexture2D** ConsoleButtonTexture_0, float* Scale) const;

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"CM_ClickableSubTitleWI_C">();
	}
	static class UCM_ClickableSubTitleWI_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCM_ClickableSubTitleWI_C>();
	}
};
static_assert(alignof(UCM_ClickableSubTitleWI_C) == 0x000008, "Wrong alignment on UCM_ClickableSubTitleWI_C");
static_assert(sizeof(UCM_ClickableSubTitleWI_C) == 0x0007E0, "Wrong size on UCM_ClickableSubTitleWI_C");
static_assert(offsetof(UCM_ClickableSubTitleWI_C, UberGraphFrame) == 0x000578, "Member 'UCM_ClickableSubTitleWI_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UCM_ClickableSubTitleWI_C, Pressed) == 0x000580, "Member 'UCM_ClickableSubTitleWI_C::Pressed' has a wrong offset!");
static_assert(offsetof(UCM_ClickableSubTitleWI_C, BottomFlourish) == 0x000588, "Member 'UCM_ClickableSubTitleWI_C::BottomFlourish' has a wrong offset!");
static_assert(offsetof(UCM_ClickableSubTitleWI_C, BottomFlourish_1) == 0x000590, "Member 'UCM_ClickableSubTitleWI_C::BottomFlourish_1' has a wrong offset!");
static_assert(offsetof(UCM_ClickableSubTitleWI_C, BottomFlourishBox) == 0x000598, "Member 'UCM_ClickableSubTitleWI_C::BottomFlourishBox' has a wrong offset!");
static_assert(offsetof(UCM_ClickableSubTitleWI_C, ConsoleIconCanvas) == 0x0005A0, "Member 'UCM_ClickableSubTitleWI_C::ConsoleIconCanvas' has a wrong offset!");
static_assert(offsetof(UCM_ClickableSubTitleWI_C, ConsoleIconSpacer) == 0x0005A8, "Member 'UCM_ClickableSubTitleWI_C::ConsoleIconSpacer' has a wrong offset!");
static_assert(offsetof(UCM_ClickableSubTitleWI_C, ConsoleIconWI) == 0x0005B0, "Member 'UCM_ClickableSubTitleWI_C::ConsoleIconWI' has a wrong offset!");
static_assert(offsetof(UCM_ClickableSubTitleWI_C, Container) == 0x0005B8, "Member 'UCM_ClickableSubTitleWI_C::Container' has a wrong offset!");
static_assert(offsetof(UCM_ClickableSubTitleWI_C, ContainerOffset) == 0x0005C0, "Member 'UCM_ClickableSubTitleWI_C::ContainerOffset' has a wrong offset!");
static_assert(offsetof(UCM_ClickableSubTitleWI_C, LeftCapImage) == 0x0005C8, "Member 'UCM_ClickableSubTitleWI_C::LeftCapImage' has a wrong offset!");
static_assert(offsetof(UCM_ClickableSubTitleWI_C, LeftPadding) == 0x0005D0, "Member 'UCM_ClickableSubTitleWI_C::LeftPadding' has a wrong offset!");
static_assert(offsetof(UCM_ClickableSubTitleWI_C, Overlay_135) == 0x0005D8, "Member 'UCM_ClickableSubTitleWI_C::Overlay_135' has a wrong offset!");
static_assert(offsetof(UCM_ClickableSubTitleWI_C, RightCapImage) == 0x0005E0, "Member 'UCM_ClickableSubTitleWI_C::RightCapImage' has a wrong offset!");
static_assert(offsetof(UCM_ClickableSubTitleWI_C, RightPadding) == 0x0005E8, "Member 'UCM_ClickableSubTitleWI_C::RightPadding' has a wrong offset!");
static_assert(offsetof(UCM_ClickableSubTitleWI_C, RootOverlay) == 0x0005F0, "Member 'UCM_ClickableSubTitleWI_C::RootOverlay' has a wrong offset!");
static_assert(offsetof(UCM_ClickableSubTitleWI_C, SelectButton_2) == 0x0005F8, "Member 'UCM_ClickableSubTitleWI_C::SelectButton_2' has a wrong offset!");
static_assert(offsetof(UCM_ClickableSubTitleWI_C, TitleText) == 0x000600, "Member 'UCM_ClickableSubTitleWI_C::TitleText' has a wrong offset!");
static_assert(offsetof(UCM_ClickableSubTitleWI_C, TopFlourish) == 0x000608, "Member 'UCM_ClickableSubTitleWI_C::TopFlourish' has a wrong offset!");
static_assert(offsetof(UCM_ClickableSubTitleWI_C, TopFlourish_1) == 0x000610, "Member 'UCM_ClickableSubTitleWI_C::TopFlourish_1' has a wrong offset!");
static_assert(offsetof(UCM_ClickableSubTitleWI_C, TopFlourishBox) == 0x000618, "Member 'UCM_ClickableSubTitleWI_C::TopFlourishBox' has a wrong offset!");
static_assert(offsetof(UCM_ClickableSubTitleWI_C, OnPressed_0) == 0x000620, "Member 'UCM_ClickableSubTitleWI_C::OnPressed_0' has a wrong offset!");
static_assert(offsetof(UCM_ClickableSubTitleWI_C, OnHovered_0) == 0x000630, "Member 'UCM_ClickableSubTitleWI_C::OnHovered_0' has a wrong offset!");
static_assert(offsetof(UCM_ClickableSubTitleWI_C, OnUnhovered_0) == 0x000640, "Member 'UCM_ClickableSubTitleWI_C::OnUnhovered_0' has a wrong offset!");
static_assert(offsetof(UCM_ClickableSubTitleWI_C, HoveredColor) == 0x000650, "Member 'UCM_ClickableSubTitleWI_C::HoveredColor' has a wrong offset!");
static_assert(offsetof(UCM_ClickableSubTitleWI_C, NormalColor) == 0x000660, "Member 'UCM_ClickableSubTitleWI_C::NormalColor' has a wrong offset!");
static_assert(offsetof(UCM_ClickableSubTitleWI_C, PressedColor) == 0x000670, "Member 'UCM_ClickableSubTitleWI_C::PressedColor' has a wrong offset!");
static_assert(offsetof(UCM_ClickableSubTitleWI_C, LabelText) == 0x000680, "Member 'UCM_ClickableSubTitleWI_C::LabelText' has a wrong offset!");
static_assert(offsetof(UCM_ClickableSubTitleWI_C, CurrentColorState) == 0x000698, "Member 'UCM_ClickableSubTitleWI_C::CurrentColorState' has a wrong offset!");
static_assert(offsetof(UCM_ClickableSubTitleWI_C, OnReleased) == 0x0006A8, "Member 'UCM_ClickableSubTitleWI_C::OnReleased' has a wrong offset!");
static_assert(offsetof(UCM_ClickableSubTitleWI_C, ConsoleButtonTexture) == 0x0006B8, "Member 'UCM_ClickableSubTitleWI_C::ConsoleButtonTexture' has a wrong offset!");
static_assert(offsetof(UCM_ClickableSubTitleWI_C, bHoldConsoleButton) == 0x0006C0, "Member 'UCM_ClickableSubTitleWI_C::bHoldConsoleButton' has a wrong offset!");
static_assert(offsetof(UCM_ClickableSubTitleWI_C, Height) == 0x0006C4, "Member 'UCM_ClickableSubTitleWI_C::Height' has a wrong offset!");
static_assert(offsetof(UCM_ClickableSubTitleWI_C, CapAspectRatio) == 0x0006C8, "Member 'UCM_ClickableSubTitleWI_C::CapAspectRatio' has a wrong offset!");
static_assert(offsetof(UCM_ClickableSubTitleWI_C, ButtonRelativeScalePressed) == 0x0006CC, "Member 'UCM_ClickableSubTitleWI_C::ButtonRelativeScalePressed' has a wrong offset!");
static_assert(offsetof(UCM_ClickableSubTitleWI_C, ButtonRelativeScaleHold) == 0x0006D0, "Member 'UCM_ClickableSubTitleWI_C::ButtonRelativeScaleHold' has a wrong offset!");
static_assert(offsetof(UCM_ClickableSubTitleWI_C, Style) == 0x0006D4, "Member 'UCM_ClickableSubTitleWI_C::Style' has a wrong offset!");
static_assert(offsetof(UCM_ClickableSubTitleWI_C, bHideButtonImageOnConsole) == 0x0006D5, "Member 'UCM_ClickableSubTitleWI_C::bHideButtonImageOnConsole' has a wrong offset!");
static_assert(offsetof(UCM_ClickableSubTitleWI_C, TextPadding) == 0x0006D8, "Member 'UCM_ClickableSubTitleWI_C::TextPadding' has a wrong offset!");
static_assert(offsetof(UCM_ClickableSubTitleWI_C, bIsButton) == 0x0006DC, "Member 'UCM_ClickableSubTitleWI_C::bIsButton' has a wrong offset!");
static_assert(offsetof(UCM_ClickableSubTitleWI_C, bOverrideTextColor) == 0x0006DD, "Member 'UCM_ClickableSubTitleWI_C::bOverrideTextColor' has a wrong offset!");
static_assert(offsetof(UCM_ClickableSubTitleWI_C, TextOverrideColor) == 0x0006E0, "Member 'UCM_ClickableSubTitleWI_C::TextOverrideColor' has a wrong offset!");
static_assert(offsetof(UCM_ClickableSubTitleWI_C, TextSize) == 0x0006F0, "Member 'UCM_ClickableSubTitleWI_C::TextSize' has a wrong offset!");
static_assert(offsetof(UCM_ClickableSubTitleWI_C, PressedAnimation) == 0x0006F4, "Member 'UCM_ClickableSubTitleWI_C::PressedAnimation' has a wrong offset!");
static_assert(offsetof(UCM_ClickableSubTitleWI_C, bConsoleDebugMode) == 0x0006F5, "Member 'UCM_ClickableSubTitleWI_C::bConsoleDebugMode' has a wrong offset!");
static_assert(offsetof(UCM_ClickableSubTitleWI_C, OnHoldStart) == 0x0006F8, "Member 'UCM_ClickableSubTitleWI_C::OnHoldStart' has a wrong offset!");
static_assert(offsetof(UCM_ClickableSubTitleWI_C, OnHoldCancel) == 0x000708, "Member 'UCM_ClickableSubTitleWI_C::OnHoldCancel' has a wrong offset!");
static_assert(offsetof(UCM_ClickableSubTitleWI_C, OnHoldComplete) == 0x000718, "Member 'UCM_ClickableSubTitleWI_C::OnHoldComplete' has a wrong offset!");
static_assert(offsetof(UCM_ClickableSubTitleWI_C, GamepadAction) == 0x000728, "Member 'UCM_ClickableSubTitleWI_C::GamepadAction' has a wrong offset!");
static_assert(offsetof(UCM_ClickableSubTitleWI_C, CurrentHoldTimer) == 0x000730, "Member 'UCM_ClickableSubTitleWI_C::CurrentHoldTimer' has a wrong offset!");
static_assert(offsetof(UCM_ClickableSubTitleWI_C, bIsMousePressed) == 0x000738, "Member 'UCM_ClickableSubTitleWI_C::bIsMousePressed' has a wrong offset!");
static_assert(offsetof(UCM_ClickableSubTitleWI_C, bIsMouseHovered) == 0x000739, "Member 'UCM_ClickableSubTitleWI_C::bIsMouseHovered' has a wrong offset!");
static_assert(offsetof(UCM_ClickableSubTitleWI_C, bIsGamepadPressed) == 0x00073A, "Member 'UCM_ClickableSubTitleWI_C::bIsGamepadPressed' has a wrong offset!");
static_assert(offsetof(UCM_ClickableSubTitleWI_C, HoldTimeS) == 0x00073C, "Member 'UCM_ClickableSubTitleWI_C::HoldTimeS' has a wrong offset!");
static_assert(offsetof(UCM_ClickableSubTitleWI_C, ImmediatelyListenForGamepadInput) == 0x000740, "Member 'UCM_ClickableSubTitleWI_C::ImmediatelyListenForGamepadInput' has a wrong offset!");
static_assert(offsetof(UCM_ClickableSubTitleWI_C, bGamepadInputActive) == 0x000741, "Member 'UCM_ClickableSubTitleWI_C::bGamepadInputActive' has a wrong offset!");
static_assert(offsetof(UCM_ClickableSubTitleWI_C, Ak) == 0x000748, "Member 'UCM_ClickableSubTitleWI_C::Ak' has a wrong offset!");
static_assert(offsetof(UCM_ClickableSubTitleWI_C, IconConversionMap) == 0x000750, "Member 'UCM_ClickableSubTitleWI_C::IconConversionMap' has a wrong offset!");
static_assert(offsetof(UCM_ClickableSubTitleWI_C, ConsoleXBoxIconSizeOverride) == 0x0007A0, "Member 'UCM_ClickableSubTitleWI_C::ConsoleXBoxIconSizeOverride' has a wrong offset!");
static_assert(offsetof(UCM_ClickableSubTitleWI_C, ConsolePSIconSizeOverride) == 0x0007A4, "Member 'UCM_ClickableSubTitleWI_C::ConsolePSIconSizeOverride' has a wrong offset!");
static_assert(offsetof(UCM_ClickableSubTitleWI_C, bIsFocusableByGamepad) == 0x0007A8, "Member 'UCM_ClickableSubTitleWI_C::bIsFocusableByGamepad' has a wrong offset!");
static_assert(offsetof(UCM_ClickableSubTitleWI_C, OverrideColor) == 0x0007B0, "Member 'UCM_ClickableSubTitleWI_C::OverrideColor' has a wrong offset!");
static_assert(offsetof(UCM_ClickableSubTitleWI_C, bHoldButtonHasSound) == 0x0007D8, "Member 'UCM_ClickableSubTitleWI_C::bHoldButtonHasSound' has a wrong offset!");
static_assert(offsetof(UCM_ClickableSubTitleWI_C, bHasNegativeOffsetWithIcon) == 0x0007D9, "Member 'UCM_ClickableSubTitleWI_C::bHasNegativeOffsetWithIcon' has a wrong offset!");

}

