#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_AquaticBuoyancy

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "CoreUObject_structs.hpp"
#include "BuoyancyShape_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_AquaticBuoyancy.BP_AquaticBuoyancy_C
// 0x0058 (0x0108 - 0x00B0)
class UBP_AquaticBuoyancy_C final : public UActorComponent
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x00B0(0x0008)(ZeroConstructor, Transient, DuplicateTransient, UObjectWrapper)
	class UPrimitiveComponent*                    CachedMesh;                                        // 0x00B8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_AquaticSurface_C*                   InWater;                                           // 0x00C0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EBuoyancyShape                                Shape;                                             // 0x00C8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C9[0x3];                                       // 0x00C9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ShapeRadius;                                       // 0x00CC(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         LinearDampingScale;                                // 0x00D0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         AngularDampingScale;                               // 0x00D4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CenterOfMass;                                      // 0x00D8(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ForceScale;                                        // 0x00E4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         FinalForce;                                        // 0x00E8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         AngularDampingCached;                              // 0x00EC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         LinearDampingCached;                               // 0x00F0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          PrevOrigin;                                        // 0x00F4(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_F5[0x3];                                       // 0x00F5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FIntVector                             PrevWorldOriginLocation;                           // 0x00F8(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_BP_AquaticBuoyancy(int32 EntryPoint);
	void ReceiveTick(float DeltaSeconds);
	void ReceiveBeginPlay();
	void UpdateInFluid(float DeltaTime);
	void SetTickMode(bool InWater_0);
	void SetAquaticVolume(class ABP_AquaticSurface_C* AquaticSurface);
	void ValidateMesh();
	void GetSurfceDistance(const struct FVector& Location, float* Distance);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_AquaticBuoyancy_C">();
	}
	static class UBP_AquaticBuoyancy_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBP_AquaticBuoyancy_C>();
	}
};
static_assert(alignof(UBP_AquaticBuoyancy_C) == 0x000008, "Wrong alignment on UBP_AquaticBuoyancy_C");
static_assert(sizeof(UBP_AquaticBuoyancy_C) == 0x000108, "Wrong size on UBP_AquaticBuoyancy_C");
static_assert(offsetof(UBP_AquaticBuoyancy_C, UberGraphFrame) == 0x0000B0, "Member 'UBP_AquaticBuoyancy_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UBP_AquaticBuoyancy_C, CachedMesh) == 0x0000B8, "Member 'UBP_AquaticBuoyancy_C::CachedMesh' has a wrong offset!");
static_assert(offsetof(UBP_AquaticBuoyancy_C, InWater) == 0x0000C0, "Member 'UBP_AquaticBuoyancy_C::InWater' has a wrong offset!");
static_assert(offsetof(UBP_AquaticBuoyancy_C, Shape) == 0x0000C8, "Member 'UBP_AquaticBuoyancy_C::Shape' has a wrong offset!");
static_assert(offsetof(UBP_AquaticBuoyancy_C, ShapeRadius) == 0x0000CC, "Member 'UBP_AquaticBuoyancy_C::ShapeRadius' has a wrong offset!");
static_assert(offsetof(UBP_AquaticBuoyancy_C, LinearDampingScale) == 0x0000D0, "Member 'UBP_AquaticBuoyancy_C::LinearDampingScale' has a wrong offset!");
static_assert(offsetof(UBP_AquaticBuoyancy_C, AngularDampingScale) == 0x0000D4, "Member 'UBP_AquaticBuoyancy_C::AngularDampingScale' has a wrong offset!");
static_assert(offsetof(UBP_AquaticBuoyancy_C, CenterOfMass) == 0x0000D8, "Member 'UBP_AquaticBuoyancy_C::CenterOfMass' has a wrong offset!");
static_assert(offsetof(UBP_AquaticBuoyancy_C, ForceScale) == 0x0000E4, "Member 'UBP_AquaticBuoyancy_C::ForceScale' has a wrong offset!");
static_assert(offsetof(UBP_AquaticBuoyancy_C, FinalForce) == 0x0000E8, "Member 'UBP_AquaticBuoyancy_C::FinalForce' has a wrong offset!");
static_assert(offsetof(UBP_AquaticBuoyancy_C, AngularDampingCached) == 0x0000EC, "Member 'UBP_AquaticBuoyancy_C::AngularDampingCached' has a wrong offset!");
static_assert(offsetof(UBP_AquaticBuoyancy_C, LinearDampingCached) == 0x0000F0, "Member 'UBP_AquaticBuoyancy_C::LinearDampingCached' has a wrong offset!");
static_assert(offsetof(UBP_AquaticBuoyancy_C, PrevOrigin) == 0x0000F4, "Member 'UBP_AquaticBuoyancy_C::PrevOrigin' has a wrong offset!");
static_assert(offsetof(UBP_AquaticBuoyancy_C, PrevWorldOriginLocation) == 0x0000F8, "Member 'UBP_AquaticBuoyancy_C::PrevWorldOriginLocation' has a wrong offset!");

}

