#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: GamepadCompatibleCheckbox

#include "Basic.hpp"

#include "SlateCore_structs.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK::Params
{

// Function GamepadCompatibleCheckbox.GamepadCompatibleCheckbox_C.OnCheckStateChanged__DelegateSignature
// 0x0001 (0x0001 - 0x0000)
struct GamepadCompatibleCheckbox_C_OnCheckStateChanged__DelegateSignature final
{
public:
	bool                                          IsChecked;                                         // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(GamepadCompatibleCheckbox_C_OnCheckStateChanged__DelegateSignature) == 0x000001, "Wrong alignment on GamepadCompatibleCheckbox_C_OnCheckStateChanged__DelegateSignature");
static_assert(sizeof(GamepadCompatibleCheckbox_C_OnCheckStateChanged__DelegateSignature) == 0x000001, "Wrong size on GamepadCompatibleCheckbox_C_OnCheckStateChanged__DelegateSignature");
static_assert(offsetof(GamepadCompatibleCheckbox_C_OnCheckStateChanged__DelegateSignature, IsChecked) == 0x000000, "Member 'GamepadCompatibleCheckbox_C_OnCheckStateChanged__DelegateSignature::IsChecked' has a wrong offset!");

// Function GamepadCompatibleCheckbox.GamepadCompatibleCheckbox_C.ExecuteUbergraph_GamepadCompatibleCheckbox
// 0x06C0 (0x06C0 - 0x0000)
struct GamepadCompatibleCheckbox_C_ExecuteUbergraph_GamepadCompatibleCheckbox final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_ComponentBoundEvent_bIsChecked;             // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6[0x2];                                        // 0x0006(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FFocusEvent                            K2Node_Event_InFocusEvent_1;                       // 0x0008(0x0008)(NoDestructor)
	bool                                          K2Node_Event_IsDesignTime;                         // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FFocusEvent                            K2Node_Event_InFocusEvent;                         // 0x0014(0x0008)(NoDestructor)
	struct FGeometry                              K2Node_Event_MyGeometry;                           // 0x001C(0x0038)(IsPlainOldData, NoDestructor)
	uint8                                         Pad_54[0x4];                                       // 0x0054(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPointerEvent                          K2Node_Event_MouseEvent_1;                         // 0x0058(0x0070)(ConstParm)
	struct FCheckBoxStyle                         K2Node_MakeStruct_CheckBoxStyle;                   // 0x00C8(0x0580)(UObjectWrapper)
	struct FPointerEvent                          K2Node_Event_MouseEvent;                           // 0x0648(0x0070)(ConstParm)
	bool                                          CallFunc_IsUsingGamepad_ReturnValue;               // 0x06B8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x06B9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(GamepadCompatibleCheckbox_C_ExecuteUbergraph_GamepadCompatibleCheckbox) == 0x000008, "Wrong alignment on GamepadCompatibleCheckbox_C_ExecuteUbergraph_GamepadCompatibleCheckbox");
static_assert(sizeof(GamepadCompatibleCheckbox_C_ExecuteUbergraph_GamepadCompatibleCheckbox) == 0x0006C0, "Wrong size on GamepadCompatibleCheckbox_C_ExecuteUbergraph_GamepadCompatibleCheckbox");
static_assert(offsetof(GamepadCompatibleCheckbox_C_ExecuteUbergraph_GamepadCompatibleCheckbox, EntryPoint) == 0x000000, "Member 'GamepadCompatibleCheckbox_C_ExecuteUbergraph_GamepadCompatibleCheckbox::EntryPoint' has a wrong offset!");
static_assert(offsetof(GamepadCompatibleCheckbox_C_ExecuteUbergraph_GamepadCompatibleCheckbox, CallFunc_IsValid_ReturnValue) == 0x000004, "Member 'GamepadCompatibleCheckbox_C_ExecuteUbergraph_GamepadCompatibleCheckbox::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(GamepadCompatibleCheckbox_C_ExecuteUbergraph_GamepadCompatibleCheckbox, K2Node_ComponentBoundEvent_bIsChecked) == 0x000005, "Member 'GamepadCompatibleCheckbox_C_ExecuteUbergraph_GamepadCompatibleCheckbox::K2Node_ComponentBoundEvent_bIsChecked' has a wrong offset!");
static_assert(offsetof(GamepadCompatibleCheckbox_C_ExecuteUbergraph_GamepadCompatibleCheckbox, K2Node_Event_InFocusEvent_1) == 0x000008, "Member 'GamepadCompatibleCheckbox_C_ExecuteUbergraph_GamepadCompatibleCheckbox::K2Node_Event_InFocusEvent_1' has a wrong offset!");
static_assert(offsetof(GamepadCompatibleCheckbox_C_ExecuteUbergraph_GamepadCompatibleCheckbox, K2Node_Event_IsDesignTime) == 0x000010, "Member 'GamepadCompatibleCheckbox_C_ExecuteUbergraph_GamepadCompatibleCheckbox::K2Node_Event_IsDesignTime' has a wrong offset!");
static_assert(offsetof(GamepadCompatibleCheckbox_C_ExecuteUbergraph_GamepadCompatibleCheckbox, K2Node_Event_InFocusEvent) == 0x000014, "Member 'GamepadCompatibleCheckbox_C_ExecuteUbergraph_GamepadCompatibleCheckbox::K2Node_Event_InFocusEvent' has a wrong offset!");
static_assert(offsetof(GamepadCompatibleCheckbox_C_ExecuteUbergraph_GamepadCompatibleCheckbox, K2Node_Event_MyGeometry) == 0x00001C, "Member 'GamepadCompatibleCheckbox_C_ExecuteUbergraph_GamepadCompatibleCheckbox::K2Node_Event_MyGeometry' has a wrong offset!");
static_assert(offsetof(GamepadCompatibleCheckbox_C_ExecuteUbergraph_GamepadCompatibleCheckbox, K2Node_Event_MouseEvent_1) == 0x000058, "Member 'GamepadCompatibleCheckbox_C_ExecuteUbergraph_GamepadCompatibleCheckbox::K2Node_Event_MouseEvent_1' has a wrong offset!");
static_assert(offsetof(GamepadCompatibleCheckbox_C_ExecuteUbergraph_GamepadCompatibleCheckbox, K2Node_MakeStruct_CheckBoxStyle) == 0x0000C8, "Member 'GamepadCompatibleCheckbox_C_ExecuteUbergraph_GamepadCompatibleCheckbox::K2Node_MakeStruct_CheckBoxStyle' has a wrong offset!");
static_assert(offsetof(GamepadCompatibleCheckbox_C_ExecuteUbergraph_GamepadCompatibleCheckbox, K2Node_Event_MouseEvent) == 0x000648, "Member 'GamepadCompatibleCheckbox_C_ExecuteUbergraph_GamepadCompatibleCheckbox::K2Node_Event_MouseEvent' has a wrong offset!");
static_assert(offsetof(GamepadCompatibleCheckbox_C_ExecuteUbergraph_GamepadCompatibleCheckbox, CallFunc_IsUsingGamepad_ReturnValue) == 0x0006B8, "Member 'GamepadCompatibleCheckbox_C_ExecuteUbergraph_GamepadCompatibleCheckbox::CallFunc_IsUsingGamepad_ReturnValue' has a wrong offset!");
static_assert(offsetof(GamepadCompatibleCheckbox_C_ExecuteUbergraph_GamepadCompatibleCheckbox, CallFunc_BooleanAND_ReturnValue) == 0x0006B9, "Member 'GamepadCompatibleCheckbox_C_ExecuteUbergraph_GamepadCompatibleCheckbox::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");

// Function GamepadCompatibleCheckbox.GamepadCompatibleCheckbox_C.OnMouseLeave
// 0x0070 (0x0070 - 0x0000)
struct GamepadCompatibleCheckbox_C_OnMouseLeave final
{
public:
	struct FPointerEvent                          MouseEvent;                                        // 0x0000(0x0070)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
};
static_assert(alignof(GamepadCompatibleCheckbox_C_OnMouseLeave) == 0x000008, "Wrong alignment on GamepadCompatibleCheckbox_C_OnMouseLeave");
static_assert(sizeof(GamepadCompatibleCheckbox_C_OnMouseLeave) == 0x000070, "Wrong size on GamepadCompatibleCheckbox_C_OnMouseLeave");
static_assert(offsetof(GamepadCompatibleCheckbox_C_OnMouseLeave, MouseEvent) == 0x000000, "Member 'GamepadCompatibleCheckbox_C_OnMouseLeave::MouseEvent' has a wrong offset!");

// Function GamepadCompatibleCheckbox.GamepadCompatibleCheckbox_C.OnMouseEnter
// 0x00A8 (0x00A8 - 0x0000)
struct GamepadCompatibleCheckbox_C_OnMouseEnter final
{
public:
	struct FGeometry                              MyGeometry;                                        // 0x0000(0x0038)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
	struct FPointerEvent                          MouseEvent;                                        // 0x0038(0x0070)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
};
static_assert(alignof(GamepadCompatibleCheckbox_C_OnMouseEnter) == 0x000008, "Wrong alignment on GamepadCompatibleCheckbox_C_OnMouseEnter");
static_assert(sizeof(GamepadCompatibleCheckbox_C_OnMouseEnter) == 0x0000A8, "Wrong size on GamepadCompatibleCheckbox_C_OnMouseEnter");
static_assert(offsetof(GamepadCompatibleCheckbox_C_OnMouseEnter, MyGeometry) == 0x000000, "Member 'GamepadCompatibleCheckbox_C_OnMouseEnter::MyGeometry' has a wrong offset!");
static_assert(offsetof(GamepadCompatibleCheckbox_C_OnMouseEnter, MouseEvent) == 0x000038, "Member 'GamepadCompatibleCheckbox_C_OnMouseEnter::MouseEvent' has a wrong offset!");

// Function GamepadCompatibleCheckbox.GamepadCompatibleCheckbox_C.OnRemovedFromFocusPath
// 0x0008 (0x0008 - 0x0000)
struct GamepadCompatibleCheckbox_C_OnRemovedFromFocusPath final
{
public:
	struct FFocusEvent                            InFocusEvent;                                      // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)
};
static_assert(alignof(GamepadCompatibleCheckbox_C_OnRemovedFromFocusPath) == 0x000004, "Wrong alignment on GamepadCompatibleCheckbox_C_OnRemovedFromFocusPath");
static_assert(sizeof(GamepadCompatibleCheckbox_C_OnRemovedFromFocusPath) == 0x000008, "Wrong size on GamepadCompatibleCheckbox_C_OnRemovedFromFocusPath");
static_assert(offsetof(GamepadCompatibleCheckbox_C_OnRemovedFromFocusPath, InFocusEvent) == 0x000000, "Member 'GamepadCompatibleCheckbox_C_OnRemovedFromFocusPath::InFocusEvent' has a wrong offset!");

// Function GamepadCompatibleCheckbox.GamepadCompatibleCheckbox_C.PreConstruct
// 0x0001 (0x0001 - 0x0000)
struct GamepadCompatibleCheckbox_C_PreConstruct final
{
public:
	bool                                          IsDesignTime;                                      // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(GamepadCompatibleCheckbox_C_PreConstruct) == 0x000001, "Wrong alignment on GamepadCompatibleCheckbox_C_PreConstruct");
static_assert(sizeof(GamepadCompatibleCheckbox_C_PreConstruct) == 0x000001, "Wrong size on GamepadCompatibleCheckbox_C_PreConstruct");
static_assert(offsetof(GamepadCompatibleCheckbox_C_PreConstruct, IsDesignTime) == 0x000000, "Member 'GamepadCompatibleCheckbox_C_PreConstruct::IsDesignTime' has a wrong offset!");

// Function GamepadCompatibleCheckbox.GamepadCompatibleCheckbox_C.OnAddedToFocusPath
// 0x0008 (0x0008 - 0x0000)
struct GamepadCompatibleCheckbox_C_OnAddedToFocusPath final
{
public:
	struct FFocusEvent                            InFocusEvent;                                      // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)
};
static_assert(alignof(GamepadCompatibleCheckbox_C_OnAddedToFocusPath) == 0x000004, "Wrong alignment on GamepadCompatibleCheckbox_C_OnAddedToFocusPath");
static_assert(sizeof(GamepadCompatibleCheckbox_C_OnAddedToFocusPath) == 0x000008, "Wrong size on GamepadCompatibleCheckbox_C_OnAddedToFocusPath");
static_assert(offsetof(GamepadCompatibleCheckbox_C_OnAddedToFocusPath, InFocusEvent) == 0x000000, "Member 'GamepadCompatibleCheckbox_C_OnAddedToFocusPath::InFocusEvent' has a wrong offset!");

// Function GamepadCompatibleCheckbox.GamepadCompatibleCheckbox_C.BndEvt__GamepadCheckBox_K2Node_ComponentBoundEvent_0_OnCheckBoxComponentStateChanged__DelegateSignature
// 0x0001 (0x0001 - 0x0000)
struct GamepadCompatibleCheckbox_C_BndEvt__GamepadCheckBox_K2Node_ComponentBoundEvent_0_OnCheckBoxComponentStateChanged__DelegateSignature final
{
public:
	bool                                          bIsChecked;                                        // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(GamepadCompatibleCheckbox_C_BndEvt__GamepadCheckBox_K2Node_ComponentBoundEvent_0_OnCheckBoxComponentStateChanged__DelegateSignature) == 0x000001, "Wrong alignment on GamepadCompatibleCheckbox_C_BndEvt__GamepadCheckBox_K2Node_ComponentBoundEvent_0_OnCheckBoxComponentStateChanged__DelegateSignature");
static_assert(sizeof(GamepadCompatibleCheckbox_C_BndEvt__GamepadCheckBox_K2Node_ComponentBoundEvent_0_OnCheckBoxComponentStateChanged__DelegateSignature) == 0x000001, "Wrong size on GamepadCompatibleCheckbox_C_BndEvt__GamepadCheckBox_K2Node_ComponentBoundEvent_0_OnCheckBoxComponentStateChanged__DelegateSignature");
static_assert(offsetof(GamepadCompatibleCheckbox_C_BndEvt__GamepadCheckBox_K2Node_ComponentBoundEvent_0_OnCheckBoxComponentStateChanged__DelegateSignature, bIsChecked) == 0x000000, "Member 'GamepadCompatibleCheckbox_C_BndEvt__GamepadCheckBox_K2Node_ComponentBoundEvent_0_OnCheckBoxComponentStateChanged__DelegateSignature::bIsChecked' has a wrong offset!");

// Function GamepadCompatibleCheckbox.GamepadCompatibleCheckbox_C.SetMouseToFocus
// 0x0078 (0x0078 - 0x0000)
struct GamepadCompatibleCheckbox_C_SetMouseToFocus final
{
public:
	class APlayerController*                      CallFunc_GetPlayerController_ReturnValue;          // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FGeometry                              CallFunc_GetCachedGeometry_ReturnValue;            // 0x0008(0x0038)(ConstParm, IsPlainOldData, NoDestructor)
	struct FVector2D                              CallFunc_GetAbsoluteSize_ReturnValue;              // 0x0040(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_LocalToViewport_PixelPosition;            // 0x0048(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_LocalToViewport_ViewportPosition;         // 0x0050(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_Multiply_Vector2DFloat_ReturnValue;       // 0x0058(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_Add_Vector2DVector2D_ReturnValue;         // 0x0060(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector2D_X;                          // 0x0068(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector2D_Y;                          // 0x006C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_FTrunc_ReturnValue;                       // 0x0070(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_FTrunc_ReturnValue_1;                     // 0x0074(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(GamepadCompatibleCheckbox_C_SetMouseToFocus) == 0x000008, "Wrong alignment on GamepadCompatibleCheckbox_C_SetMouseToFocus");
static_assert(sizeof(GamepadCompatibleCheckbox_C_SetMouseToFocus) == 0x000078, "Wrong size on GamepadCompatibleCheckbox_C_SetMouseToFocus");
static_assert(offsetof(GamepadCompatibleCheckbox_C_SetMouseToFocus, CallFunc_GetPlayerController_ReturnValue) == 0x000000, "Member 'GamepadCompatibleCheckbox_C_SetMouseToFocus::CallFunc_GetPlayerController_ReturnValue' has a wrong offset!");
static_assert(offsetof(GamepadCompatibleCheckbox_C_SetMouseToFocus, CallFunc_GetCachedGeometry_ReturnValue) == 0x000008, "Member 'GamepadCompatibleCheckbox_C_SetMouseToFocus::CallFunc_GetCachedGeometry_ReturnValue' has a wrong offset!");
static_assert(offsetof(GamepadCompatibleCheckbox_C_SetMouseToFocus, CallFunc_GetAbsoluteSize_ReturnValue) == 0x000040, "Member 'GamepadCompatibleCheckbox_C_SetMouseToFocus::CallFunc_GetAbsoluteSize_ReturnValue' has a wrong offset!");
static_assert(offsetof(GamepadCompatibleCheckbox_C_SetMouseToFocus, CallFunc_LocalToViewport_PixelPosition) == 0x000048, "Member 'GamepadCompatibleCheckbox_C_SetMouseToFocus::CallFunc_LocalToViewport_PixelPosition' has a wrong offset!");
static_assert(offsetof(GamepadCompatibleCheckbox_C_SetMouseToFocus, CallFunc_LocalToViewport_ViewportPosition) == 0x000050, "Member 'GamepadCompatibleCheckbox_C_SetMouseToFocus::CallFunc_LocalToViewport_ViewportPosition' has a wrong offset!");
static_assert(offsetof(GamepadCompatibleCheckbox_C_SetMouseToFocus, CallFunc_Multiply_Vector2DFloat_ReturnValue) == 0x000058, "Member 'GamepadCompatibleCheckbox_C_SetMouseToFocus::CallFunc_Multiply_Vector2DFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(GamepadCompatibleCheckbox_C_SetMouseToFocus, CallFunc_Add_Vector2DVector2D_ReturnValue) == 0x000060, "Member 'GamepadCompatibleCheckbox_C_SetMouseToFocus::CallFunc_Add_Vector2DVector2D_ReturnValue' has a wrong offset!");
static_assert(offsetof(GamepadCompatibleCheckbox_C_SetMouseToFocus, CallFunc_BreakVector2D_X) == 0x000068, "Member 'GamepadCompatibleCheckbox_C_SetMouseToFocus::CallFunc_BreakVector2D_X' has a wrong offset!");
static_assert(offsetof(GamepadCompatibleCheckbox_C_SetMouseToFocus, CallFunc_BreakVector2D_Y) == 0x00006C, "Member 'GamepadCompatibleCheckbox_C_SetMouseToFocus::CallFunc_BreakVector2D_Y' has a wrong offset!");
static_assert(offsetof(GamepadCompatibleCheckbox_C_SetMouseToFocus, CallFunc_FTrunc_ReturnValue) == 0x000070, "Member 'GamepadCompatibleCheckbox_C_SetMouseToFocus::CallFunc_FTrunc_ReturnValue' has a wrong offset!");
static_assert(offsetof(GamepadCompatibleCheckbox_C_SetMouseToFocus, CallFunc_FTrunc_ReturnValue_1) == 0x000074, "Member 'GamepadCompatibleCheckbox_C_SetMouseToFocus::CallFunc_FTrunc_ReturnValue_1' has a wrong offset!");

// Function GamepadCompatibleCheckbox.GamepadCompatibleCheckbox_C.UpdateFocusHandler
// 0x0038 (0x0038 - 0x0000)
struct GamepadCompatibleCheckbox_C_UpdateFocusHandler final
{
public:
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UFocusHandlerWI_C*>              CallFunc_GetAllWidgetsOfClass_FoundWidgets;        // 0x0010(0x0010)(ReferenceParm, ContainsInstancedReference)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UFocusHandlerWI_C*                      CallFunc_Array_Get_Item;                           // 0x0028(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(GamepadCompatibleCheckbox_C_UpdateFocusHandler) == 0x000008, "Wrong alignment on GamepadCompatibleCheckbox_C_UpdateFocusHandler");
static_assert(sizeof(GamepadCompatibleCheckbox_C_UpdateFocusHandler) == 0x000038, "Wrong size on GamepadCompatibleCheckbox_C_UpdateFocusHandler");
static_assert(offsetof(GamepadCompatibleCheckbox_C_UpdateFocusHandler, Temp_int_Array_Index_Variable) == 0x000000, "Member 'GamepadCompatibleCheckbox_C_UpdateFocusHandler::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(GamepadCompatibleCheckbox_C_UpdateFocusHandler, Temp_int_Loop_Counter_Variable) == 0x000004, "Member 'GamepadCompatibleCheckbox_C_UpdateFocusHandler::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(GamepadCompatibleCheckbox_C_UpdateFocusHandler, CallFunc_Add_IntInt_ReturnValue) == 0x000008, "Member 'GamepadCompatibleCheckbox_C_UpdateFocusHandler::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(GamepadCompatibleCheckbox_C_UpdateFocusHandler, CallFunc_GetAllWidgetsOfClass_FoundWidgets) == 0x000010, "Member 'GamepadCompatibleCheckbox_C_UpdateFocusHandler::CallFunc_GetAllWidgetsOfClass_FoundWidgets' has a wrong offset!");
static_assert(offsetof(GamepadCompatibleCheckbox_C_UpdateFocusHandler, CallFunc_Array_Length_ReturnValue) == 0x000020, "Member 'GamepadCompatibleCheckbox_C_UpdateFocusHandler::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(GamepadCompatibleCheckbox_C_UpdateFocusHandler, CallFunc_Array_Get_Item) == 0x000028, "Member 'GamepadCompatibleCheckbox_C_UpdateFocusHandler::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(GamepadCompatibleCheckbox_C_UpdateFocusHandler, CallFunc_Less_IntInt_ReturnValue) == 0x000030, "Member 'GamepadCompatibleCheckbox_C_UpdateFocusHandler::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");

// Function GamepadCompatibleCheckbox.GamepadCompatibleCheckbox_C.ChangeToImage
// 0x0090 (0x0090 - 0x0000)
struct GamepadCompatibleCheckbox_C_ChangeToImage final
{
public:
	ECheckBoxState                                Temp_byte_Variable;                                // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ECheckBoxState                                CallFunc_GetCheckedState_ReturnValue;              // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2[0x6];                                        // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSlateBrush                            K2Node_Select_Default;                             // 0x0008(0x0088)()
};
static_assert(alignof(GamepadCompatibleCheckbox_C_ChangeToImage) == 0x000008, "Wrong alignment on GamepadCompatibleCheckbox_C_ChangeToImage");
static_assert(sizeof(GamepadCompatibleCheckbox_C_ChangeToImage) == 0x000090, "Wrong size on GamepadCompatibleCheckbox_C_ChangeToImage");
static_assert(offsetof(GamepadCompatibleCheckbox_C_ChangeToImage, Temp_byte_Variable) == 0x000000, "Member 'GamepadCompatibleCheckbox_C_ChangeToImage::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(GamepadCompatibleCheckbox_C_ChangeToImage, CallFunc_GetCheckedState_ReturnValue) == 0x000001, "Member 'GamepadCompatibleCheckbox_C_ChangeToImage::CallFunc_GetCheckedState_ReturnValue' has a wrong offset!");
static_assert(offsetof(GamepadCompatibleCheckbox_C_ChangeToImage, K2Node_Select_Default) == 0x000008, "Member 'GamepadCompatibleCheckbox_C_ChangeToImage::K2Node_Select_Default' has a wrong offset!");

}

