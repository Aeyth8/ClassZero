#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: CharacterPreviewerSCTBP

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass CharacterPreviewerSCTBP.CharacterPreviewerSCTBP_C
// 0x0118 (0x03C0 - 0x02A8)
class ACharacterPreviewerSCTBP_C : public ASkeletalMeshActor
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x02A8(0x0008)(ZeroConstructor, Transient, DuplicateTransient, UObjectWrapper)
	class USkeletalMeshComponent*                 Eyewear;                                           // 0x02B0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USkeletalMeshComponent*                 FacialHair;                                        // 0x02B8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USkeletalMeshComponent*                 Accessory;                                         // 0x02C0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UParticleSystemComponent*               SparksParticleSystem;                              // 0x02C8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UChildActorComponent*                   ChildActor;                                        // 0x02D0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        Cosmetics;                                         // 0x02D8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UParticleSystemComponent*               ParticleSystem;                                    // 0x02E0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USkeletalMeshComponent*                 Head;                                              // 0x02E8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USkeletalMeshComponent*                 Body;                                              // 0x02F0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USkeletalMeshComponent*                 Feet;                                              // 0x02F8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   Top;                                               // 0x0300(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USkeletalMeshComponent*                 Legs;                                              // 0x0308(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	float                                         Ray_Alpha_C3AD9F3B4F1D96653AEAF88097D6E144;        // 0x0310(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            Ray__Direction_C3AD9F3B4F1D96653AEAF88097D6E144;   // 0x0314(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	uint8                                         Pad_315[0x3];                                      // 0x0315(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     Ray;                                               // 0x0318(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           HairColor;                                         // 0x0320(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	FMulticastInlineDelegateProperty_             UpdateHairColor;                                   // 0x0330(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	FMulticastInlineDelegateProperty_             UpdateClothMasks1;                                 // 0x0340(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	class ABP_GodRay_C*                           GodRay;                                            // 0x0350(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               HeadDynamicMaterial;                               // 0x0358(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class UCurveFloat*>                    BlinkCurve;                                        // 0x0360(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	bool                                          HasGlass;                                          // 0x0370(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_371[0x7];                                      // 0x0371(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UStaticMesh*                            GlassStaticMesh;                                   // 0x0378(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   GlassAttachSocket;                                 // 0x0380(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_388[0x8];                                      // 0x0388(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             GlassRelativeTransform;                            // 0x0390(0x0030)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor)

public:
	void UpdateHairColor__DelegateSignature(const struct FLinearColor& HairColor_0);
	void UpdateClothMasks1__DelegateSignature(TArray<class UTexture2D*>& ClothMasks);
	void ExecuteUbergraph_CharacterPreviewerSCTBP(int32 EntryPoint);
	void ReceiveTick(float DeltaSeconds);
	void OnUpdateHairColor_Event(const struct FLinearColor& NewHairColor);
	void ReceiveBeginPlay();
	void Confirm_Cosmetics();
	void UpdateClothMasks_Event(TArray<class UTexture2D*>& ClothMasks, const struct FPlayerCustomizationItem& PantsCustomization, const bool MaskPants);
	void Ray__UpdateFunc();
	void Ray__FinishedFunc();
	void UserConstructionScript();
	void UpdateClothMasks(TArray<class UTexture2D*>& ClothMasks, class UBP_CustomizationCategory_C* LegsCustomization, bool DoMaskLegs, class UBP_CustomizationCategory_C* FeetCustomization, bool DoMaskFeet);
	void Set_Appearance_Preset(const struct FPlayerCustomizationPreset& Preset);
	void SetEyeColor(const struct FPlayerCustomizationColorMaterial& EyeColor);
	void Set_Skin_Tone(const struct FPlayerCustomizationColorMaterial& SkinTone);
	struct FVector2D GetMousePosition(const struct FVector2D& ViewportCenterOffset);
	void AddCocktailGlass();
	void SetCharacterVisibility(bool bVisibility);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"CharacterPreviewerSCTBP_C">();
	}
	static class ACharacterPreviewerSCTBP_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ACharacterPreviewerSCTBP_C>();
	}
};
static_assert(alignof(ACharacterPreviewerSCTBP_C) == 0x000010, "Wrong alignment on ACharacterPreviewerSCTBP_C");
static_assert(sizeof(ACharacterPreviewerSCTBP_C) == 0x0003C0, "Wrong size on ACharacterPreviewerSCTBP_C");
static_assert(offsetof(ACharacterPreviewerSCTBP_C, UberGraphFrame) == 0x0002A8, "Member 'ACharacterPreviewerSCTBP_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ACharacterPreviewerSCTBP_C, Eyewear) == 0x0002B0, "Member 'ACharacterPreviewerSCTBP_C::Eyewear' has a wrong offset!");
static_assert(offsetof(ACharacterPreviewerSCTBP_C, FacialHair) == 0x0002B8, "Member 'ACharacterPreviewerSCTBP_C::FacialHair' has a wrong offset!");
static_assert(offsetof(ACharacterPreviewerSCTBP_C, Accessory) == 0x0002C0, "Member 'ACharacterPreviewerSCTBP_C::Accessory' has a wrong offset!");
static_assert(offsetof(ACharacterPreviewerSCTBP_C, SparksParticleSystem) == 0x0002C8, "Member 'ACharacterPreviewerSCTBP_C::SparksParticleSystem' has a wrong offset!");
static_assert(offsetof(ACharacterPreviewerSCTBP_C, ChildActor) == 0x0002D0, "Member 'ACharacterPreviewerSCTBP_C::ChildActor' has a wrong offset!");
static_assert(offsetof(ACharacterPreviewerSCTBP_C, Cosmetics) == 0x0002D8, "Member 'ACharacterPreviewerSCTBP_C::Cosmetics' has a wrong offset!");
static_assert(offsetof(ACharacterPreviewerSCTBP_C, ParticleSystem) == 0x0002E0, "Member 'ACharacterPreviewerSCTBP_C::ParticleSystem' has a wrong offset!");
static_assert(offsetof(ACharacterPreviewerSCTBP_C, Head) == 0x0002E8, "Member 'ACharacterPreviewerSCTBP_C::Head' has a wrong offset!");
static_assert(offsetof(ACharacterPreviewerSCTBP_C, Body) == 0x0002F0, "Member 'ACharacterPreviewerSCTBP_C::Body' has a wrong offset!");
static_assert(offsetof(ACharacterPreviewerSCTBP_C, Feet) == 0x0002F8, "Member 'ACharacterPreviewerSCTBP_C::Feet' has a wrong offset!");
static_assert(offsetof(ACharacterPreviewerSCTBP_C, Top) == 0x000300, "Member 'ACharacterPreviewerSCTBP_C::Top' has a wrong offset!");
static_assert(offsetof(ACharacterPreviewerSCTBP_C, Legs) == 0x000308, "Member 'ACharacterPreviewerSCTBP_C::Legs' has a wrong offset!");
static_assert(offsetof(ACharacterPreviewerSCTBP_C, Ray_Alpha_C3AD9F3B4F1D96653AEAF88097D6E144) == 0x000310, "Member 'ACharacterPreviewerSCTBP_C::Ray_Alpha_C3AD9F3B4F1D96653AEAF88097D6E144' has a wrong offset!");
static_assert(offsetof(ACharacterPreviewerSCTBP_C, Ray__Direction_C3AD9F3B4F1D96653AEAF88097D6E144) == 0x000314, "Member 'ACharacterPreviewerSCTBP_C::Ray__Direction_C3AD9F3B4F1D96653AEAF88097D6E144' has a wrong offset!");
static_assert(offsetof(ACharacterPreviewerSCTBP_C, Ray) == 0x000318, "Member 'ACharacterPreviewerSCTBP_C::Ray' has a wrong offset!");
static_assert(offsetof(ACharacterPreviewerSCTBP_C, HairColor) == 0x000320, "Member 'ACharacterPreviewerSCTBP_C::HairColor' has a wrong offset!");
static_assert(offsetof(ACharacterPreviewerSCTBP_C, UpdateHairColor) == 0x000330, "Member 'ACharacterPreviewerSCTBP_C::UpdateHairColor' has a wrong offset!");
static_assert(offsetof(ACharacterPreviewerSCTBP_C, UpdateClothMasks1) == 0x000340, "Member 'ACharacterPreviewerSCTBP_C::UpdateClothMasks1' has a wrong offset!");
static_assert(offsetof(ACharacterPreviewerSCTBP_C, GodRay) == 0x000350, "Member 'ACharacterPreviewerSCTBP_C::GodRay' has a wrong offset!");
static_assert(offsetof(ACharacterPreviewerSCTBP_C, HeadDynamicMaterial) == 0x000358, "Member 'ACharacterPreviewerSCTBP_C::HeadDynamicMaterial' has a wrong offset!");
static_assert(offsetof(ACharacterPreviewerSCTBP_C, BlinkCurve) == 0x000360, "Member 'ACharacterPreviewerSCTBP_C::BlinkCurve' has a wrong offset!");
static_assert(offsetof(ACharacterPreviewerSCTBP_C, HasGlass) == 0x000370, "Member 'ACharacterPreviewerSCTBP_C::HasGlass' has a wrong offset!");
static_assert(offsetof(ACharacterPreviewerSCTBP_C, GlassStaticMesh) == 0x000378, "Member 'ACharacterPreviewerSCTBP_C::GlassStaticMesh' has a wrong offset!");
static_assert(offsetof(ACharacterPreviewerSCTBP_C, GlassAttachSocket) == 0x000380, "Member 'ACharacterPreviewerSCTBP_C::GlassAttachSocket' has a wrong offset!");
static_assert(offsetof(ACharacterPreviewerSCTBP_C, GlassRelativeTransform) == 0x000390, "Member 'ACharacterPreviewerSCTBP_C::GlassRelativeTransform' has a wrong offset!");

}

