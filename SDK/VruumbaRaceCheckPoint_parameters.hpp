#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: VruumbaRaceCheckPoint

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "AkAudio_structs.hpp"


namespace SDK::Params
{

// Function VruumbaRaceCheckPoint.VruumbaRaceCheckPoint_C.CheckPointCleared__DelegateSignature
// 0x0004 (0x0004 - 0x0000)
struct VruumbaRaceCheckPoint_C_CheckPointCleared__DelegateSignature final
{
public:
	int32                                         NextCheckPoint;                                    // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(VruumbaRaceCheckPoint_C_CheckPointCleared__DelegateSignature) == 0x000004, "Wrong alignment on VruumbaRaceCheckPoint_C_CheckPointCleared__DelegateSignature");
static_assert(sizeof(VruumbaRaceCheckPoint_C_CheckPointCleared__DelegateSignature) == 0x000004, "Wrong size on VruumbaRaceCheckPoint_C_CheckPointCleared__DelegateSignature");
static_assert(offsetof(VruumbaRaceCheckPoint_C_CheckPointCleared__DelegateSignature, NextCheckPoint) == 0x000000, "Member 'VruumbaRaceCheckPoint_C_CheckPointCleared__DelegateSignature::NextCheckPoint' has a wrong offset!");

// Function VruumbaRaceCheckPoint.VruumbaRaceCheckPoint_C.ExecuteUbergraph_VruumbaRaceCheckPoint
// 0x00A8 (0x00A8 - 0x0000)
struct VruumbaRaceCheckPoint_C_ExecuteUbergraph_VruumbaRaceCheckPoint final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FAkExternalSourceInfo>          Temp_struct_Variable;                              // 0x0008(0x0010)(ConstParm, ReferenceParm)
	TDelegate<void(EAkCallbackType CallbackType, class UAkCallbackInfo* CallbackInfo)> Temp_delegate_Variable;                            // 0x0018(0x0010)(ConstParm, ZeroConstructor, NoDestructor)
	TArray<struct FAkExternalSourceInfo>          Temp_struct_Variable_1;                            // 0x0028(0x0010)(ConstParm, ReferenceParm)
	TDelegate<void(EAkCallbackType CallbackType, class UAkCallbackInfo* CallbackInfo)> Temp_delegate_Variable_1;                          // 0x0038(0x0010)(ConstParm, ZeroConstructor, NoDestructor)
	class UPrimitiveComponent*                    K2Node_ComponentBoundEvent_OverlappedComponent;    // 0x0048(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 K2Node_ComponentBoundEvent_OtherActor;             // 0x0050(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    K2Node_ComponentBoundEvent_OtherComp;              // 0x0058(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_ComponentBoundEvent_OtherBodyIndex;         // 0x0060(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue;                   // 0x0064(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AVruumbaSCTBP_C*                        K2Node_DynamicCast_AsVruumba_SCTBP;                // 0x0070(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0078(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsLocallyControlled_ReturnValue;          // 0x0079(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ObjectObject_ReturnValue;      // 0x007A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7B[0x1];                                       // 0x007B(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_GetVelocity_ReturnValue;                  // 0x007C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetActorRightVector_ReturnValue;          // 0x0088(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Dot_VectorVector_ReturnValue;             // 0x0094(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue;           // 0x0098(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsDedicatedServer_ReturnValue;            // 0x0099(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9A[0x2];                                       // 0x009A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_PostAkEvent_ReturnValue;                  // 0x009C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_PostAkEvent_ReturnValue_1;                // 0x00A0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(VruumbaRaceCheckPoint_C_ExecuteUbergraph_VruumbaRaceCheckPoint) == 0x000008, "Wrong alignment on VruumbaRaceCheckPoint_C_ExecuteUbergraph_VruumbaRaceCheckPoint");
static_assert(sizeof(VruumbaRaceCheckPoint_C_ExecuteUbergraph_VruumbaRaceCheckPoint) == 0x0000A8, "Wrong size on VruumbaRaceCheckPoint_C_ExecuteUbergraph_VruumbaRaceCheckPoint");
static_assert(offsetof(VruumbaRaceCheckPoint_C_ExecuteUbergraph_VruumbaRaceCheckPoint, EntryPoint) == 0x000000, "Member 'VruumbaRaceCheckPoint_C_ExecuteUbergraph_VruumbaRaceCheckPoint::EntryPoint' has a wrong offset!");
static_assert(offsetof(VruumbaRaceCheckPoint_C_ExecuteUbergraph_VruumbaRaceCheckPoint, Temp_struct_Variable) == 0x000008, "Member 'VruumbaRaceCheckPoint_C_ExecuteUbergraph_VruumbaRaceCheckPoint::Temp_struct_Variable' has a wrong offset!");
static_assert(offsetof(VruumbaRaceCheckPoint_C_ExecuteUbergraph_VruumbaRaceCheckPoint, Temp_delegate_Variable) == 0x000018, "Member 'VruumbaRaceCheckPoint_C_ExecuteUbergraph_VruumbaRaceCheckPoint::Temp_delegate_Variable' has a wrong offset!");
static_assert(offsetof(VruumbaRaceCheckPoint_C_ExecuteUbergraph_VruumbaRaceCheckPoint, Temp_struct_Variable_1) == 0x000028, "Member 'VruumbaRaceCheckPoint_C_ExecuteUbergraph_VruumbaRaceCheckPoint::Temp_struct_Variable_1' has a wrong offset!");
static_assert(offsetof(VruumbaRaceCheckPoint_C_ExecuteUbergraph_VruumbaRaceCheckPoint, Temp_delegate_Variable_1) == 0x000038, "Member 'VruumbaRaceCheckPoint_C_ExecuteUbergraph_VruumbaRaceCheckPoint::Temp_delegate_Variable_1' has a wrong offset!");
static_assert(offsetof(VruumbaRaceCheckPoint_C_ExecuteUbergraph_VruumbaRaceCheckPoint, K2Node_ComponentBoundEvent_OverlappedComponent) == 0x000048, "Member 'VruumbaRaceCheckPoint_C_ExecuteUbergraph_VruumbaRaceCheckPoint::K2Node_ComponentBoundEvent_OverlappedComponent' has a wrong offset!");
static_assert(offsetof(VruumbaRaceCheckPoint_C_ExecuteUbergraph_VruumbaRaceCheckPoint, K2Node_ComponentBoundEvent_OtherActor) == 0x000050, "Member 'VruumbaRaceCheckPoint_C_ExecuteUbergraph_VruumbaRaceCheckPoint::K2Node_ComponentBoundEvent_OtherActor' has a wrong offset!");
static_assert(offsetof(VruumbaRaceCheckPoint_C_ExecuteUbergraph_VruumbaRaceCheckPoint, K2Node_ComponentBoundEvent_OtherComp) == 0x000058, "Member 'VruumbaRaceCheckPoint_C_ExecuteUbergraph_VruumbaRaceCheckPoint::K2Node_ComponentBoundEvent_OtherComp' has a wrong offset!");
static_assert(offsetof(VruumbaRaceCheckPoint_C_ExecuteUbergraph_VruumbaRaceCheckPoint, K2Node_ComponentBoundEvent_OtherBodyIndex) == 0x000060, "Member 'VruumbaRaceCheckPoint_C_ExecuteUbergraph_VruumbaRaceCheckPoint::K2Node_ComponentBoundEvent_OtherBodyIndex' has a wrong offset!");
static_assert(offsetof(VruumbaRaceCheckPoint_C_ExecuteUbergraph_VruumbaRaceCheckPoint, CallFunc_MakeVector_ReturnValue) == 0x000064, "Member 'VruumbaRaceCheckPoint_C_ExecuteUbergraph_VruumbaRaceCheckPoint::CallFunc_MakeVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(VruumbaRaceCheckPoint_C_ExecuteUbergraph_VruumbaRaceCheckPoint, K2Node_DynamicCast_AsVruumba_SCTBP) == 0x000070, "Member 'VruumbaRaceCheckPoint_C_ExecuteUbergraph_VruumbaRaceCheckPoint::K2Node_DynamicCast_AsVruumba_SCTBP' has a wrong offset!");
static_assert(offsetof(VruumbaRaceCheckPoint_C_ExecuteUbergraph_VruumbaRaceCheckPoint, K2Node_DynamicCast_bSuccess) == 0x000078, "Member 'VruumbaRaceCheckPoint_C_ExecuteUbergraph_VruumbaRaceCheckPoint::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(VruumbaRaceCheckPoint_C_ExecuteUbergraph_VruumbaRaceCheckPoint, CallFunc_IsLocallyControlled_ReturnValue) == 0x000079, "Member 'VruumbaRaceCheckPoint_C_ExecuteUbergraph_VruumbaRaceCheckPoint::CallFunc_IsLocallyControlled_ReturnValue' has a wrong offset!");
static_assert(offsetof(VruumbaRaceCheckPoint_C_ExecuteUbergraph_VruumbaRaceCheckPoint, CallFunc_EqualEqual_ObjectObject_ReturnValue) == 0x00007A, "Member 'VruumbaRaceCheckPoint_C_ExecuteUbergraph_VruumbaRaceCheckPoint::CallFunc_EqualEqual_ObjectObject_ReturnValue' has a wrong offset!");
static_assert(offsetof(VruumbaRaceCheckPoint_C_ExecuteUbergraph_VruumbaRaceCheckPoint, CallFunc_GetVelocity_ReturnValue) == 0x00007C, "Member 'VruumbaRaceCheckPoint_C_ExecuteUbergraph_VruumbaRaceCheckPoint::CallFunc_GetVelocity_ReturnValue' has a wrong offset!");
static_assert(offsetof(VruumbaRaceCheckPoint_C_ExecuteUbergraph_VruumbaRaceCheckPoint, CallFunc_GetActorRightVector_ReturnValue) == 0x000088, "Member 'VruumbaRaceCheckPoint_C_ExecuteUbergraph_VruumbaRaceCheckPoint::CallFunc_GetActorRightVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(VruumbaRaceCheckPoint_C_ExecuteUbergraph_VruumbaRaceCheckPoint, CallFunc_Dot_VectorVector_ReturnValue) == 0x000094, "Member 'VruumbaRaceCheckPoint_C_ExecuteUbergraph_VruumbaRaceCheckPoint::CallFunc_Dot_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(VruumbaRaceCheckPoint_C_ExecuteUbergraph_VruumbaRaceCheckPoint, CallFunc_Greater_FloatFloat_ReturnValue) == 0x000098, "Member 'VruumbaRaceCheckPoint_C_ExecuteUbergraph_VruumbaRaceCheckPoint::CallFunc_Greater_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(VruumbaRaceCheckPoint_C_ExecuteUbergraph_VruumbaRaceCheckPoint, CallFunc_IsDedicatedServer_ReturnValue) == 0x000099, "Member 'VruumbaRaceCheckPoint_C_ExecuteUbergraph_VruumbaRaceCheckPoint::CallFunc_IsDedicatedServer_ReturnValue' has a wrong offset!");
static_assert(offsetof(VruumbaRaceCheckPoint_C_ExecuteUbergraph_VruumbaRaceCheckPoint, CallFunc_PostAkEvent_ReturnValue) == 0x00009C, "Member 'VruumbaRaceCheckPoint_C_ExecuteUbergraph_VruumbaRaceCheckPoint::CallFunc_PostAkEvent_ReturnValue' has a wrong offset!");
static_assert(offsetof(VruumbaRaceCheckPoint_C_ExecuteUbergraph_VruumbaRaceCheckPoint, CallFunc_PostAkEvent_ReturnValue_1) == 0x0000A0, "Member 'VruumbaRaceCheckPoint_C_ExecuteUbergraph_VruumbaRaceCheckPoint::CallFunc_PostAkEvent_ReturnValue_1' has a wrong offset!");

// Function VruumbaRaceCheckPoint.VruumbaRaceCheckPoint_C.BndEvt__Trigger_K2Node_ComponentBoundEvent_0_ComponentEndOverlapSignature__DelegateSignature
// 0x0020 (0x0020 - 0x0000)
struct VruumbaRaceCheckPoint_C_BndEvt__Trigger_K2Node_ComponentBoundEvent_0_ComponentEndOverlapSignature__DelegateSignature final
{
public:
	class UPrimitiveComponent*                    OverlappedComponent;                               // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         OtherBodyIndex;                                    // 0x0018(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(VruumbaRaceCheckPoint_C_BndEvt__Trigger_K2Node_ComponentBoundEvent_0_ComponentEndOverlapSignature__DelegateSignature) == 0x000008, "Wrong alignment on VruumbaRaceCheckPoint_C_BndEvt__Trigger_K2Node_ComponentBoundEvent_0_ComponentEndOverlapSignature__DelegateSignature");
static_assert(sizeof(VruumbaRaceCheckPoint_C_BndEvt__Trigger_K2Node_ComponentBoundEvent_0_ComponentEndOverlapSignature__DelegateSignature) == 0x000020, "Wrong size on VruumbaRaceCheckPoint_C_BndEvt__Trigger_K2Node_ComponentBoundEvent_0_ComponentEndOverlapSignature__DelegateSignature");
static_assert(offsetof(VruumbaRaceCheckPoint_C_BndEvt__Trigger_K2Node_ComponentBoundEvent_0_ComponentEndOverlapSignature__DelegateSignature, OverlappedComponent) == 0x000000, "Member 'VruumbaRaceCheckPoint_C_BndEvt__Trigger_K2Node_ComponentBoundEvent_0_ComponentEndOverlapSignature__DelegateSignature::OverlappedComponent' has a wrong offset!");
static_assert(offsetof(VruumbaRaceCheckPoint_C_BndEvt__Trigger_K2Node_ComponentBoundEvent_0_ComponentEndOverlapSignature__DelegateSignature, OtherActor) == 0x000008, "Member 'VruumbaRaceCheckPoint_C_BndEvt__Trigger_K2Node_ComponentBoundEvent_0_ComponentEndOverlapSignature__DelegateSignature::OtherActor' has a wrong offset!");
static_assert(offsetof(VruumbaRaceCheckPoint_C_BndEvt__Trigger_K2Node_ComponentBoundEvent_0_ComponentEndOverlapSignature__DelegateSignature, OtherComp) == 0x000010, "Member 'VruumbaRaceCheckPoint_C_BndEvt__Trigger_K2Node_ComponentBoundEvent_0_ComponentEndOverlapSignature__DelegateSignature::OtherComp' has a wrong offset!");
static_assert(offsetof(VruumbaRaceCheckPoint_C_BndEvt__Trigger_K2Node_ComponentBoundEvent_0_ComponentEndOverlapSignature__DelegateSignature, OtherBodyIndex) == 0x000018, "Member 'VruumbaRaceCheckPoint_C_BndEvt__Trigger_K2Node_ComponentBoundEvent_0_ComponentEndOverlapSignature__DelegateSignature::OtherBodyIndex' has a wrong offset!");

}

