#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: bp_wi_Puzzle

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "SlateCore_structs.hpp"
#include "UMG_structs.hpp"
#include "SCT_classes.hpp"


namespace SDK
{

// WidgetBlueprintGeneratedClass bp_wi_Puzzle.bp_wi_Puzzle_C
// 0x0118 (0x0398 - 0x0280)
class Ubp_wi_Puzzle_C final : public UWidgetSCT
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0280(0x0008)(ZeroConstructor, Transient, DuplicateTransient, UObjectWrapper)
	class Ubp_wi_SymbolUniGrid_C*                 bp_wi_SymbolUniGrid;                               // 0x0288(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UGamepadCompatibleButton_C*             ButtonClose;                                       // 0x0290(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UFocusHandlerWI_C*                      FocusHandlerWI;                                    // 0x0298(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 Image_715;                                         // 0x02A0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 Image_Padlock;                                     // 0x02A8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 Solution;                                          // 0x02B0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UTextBlock*                             Text_DebugText;                                    // 0x02B8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UTextBlock*                             Text_ReadMessage;                                  // 0x02C0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UVerticalBox*                           VerticalBox_RoomNumber;                            // 0x02C8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class FText                                   NeighbourRoomName;                                 // 0x02D0(0x0018)(Edit, BlueprintVisible, ExposeOnSpawn)
	class UTexture2D*                             LockedPadLock;                                     // 0x02E8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UTexture2D*                             UnlockedPadLock;                                   // 0x02F0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Fail;                                              // 0x02F8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Success;                                           // 0x0308(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Countdown;                                         // 0x0318(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CurrentCountdown;                                  // 0x031C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FText                                   EnterCodeMessage;                                  // 0x0320(0x0018)(Edit, BlueprintVisible)
	int32                                         NeighbourSolutionSeed;                             // 0x0338(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	int32                                         SolutionSeed;                                      // 0x033C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	class UObject*                                SolveableObject;                                   // 0x0340(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	bool                                          Debugging;                                         // 0x0348(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_349[0x7];                                      // 0x0349(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class Ubp_wi_SymbolEntry_C*                   SolutionSymbol;                                    // 0x0350(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsJammed;                                          // 0x0358(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_359[0x7];                                      // 0x0359(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	FMulticastInlineDelegateProperty_             OnSolved;                                          // 0x0360(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	struct FSlateColor                            SolvedColor;                                       // 0x0370(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance)

public:
	void OnSolved__DelegateSignature();
	void ExecuteUbergraph_bp_wi_Puzzle(int32 EntryPoint);
	void BndEvt__ButtonClose_K2Node_ComponentBoundEvent_3_OnHovered__DelegateSignature();
	void BndEvt__ButtonClose_K2Node_ComponentBoundEvent_2_OnClicked__DelegateSignature();
	void HandleOpenStateChanged(bool IsOpening);
	void HidePuzzleWidget();
	void DebugLog();
	void HandleOptionSymbolClicked(bool CorrectSymbolClicked);
	void PuzzleReset();
	void HandleCountdown();
	void PuzzleFailed();
	void PuzzleSolved();
	void RevealRoomSymbolBySeed(int32 NeighbourSolutionSeed_0);
	void Construct();
	void SetLocked(bool New_Locked, bool Jammed);
	void PreConstruct(bool IsDesignTime);
	void BlockOtherWidgets();
	void InputActionBlocked();

	void IsSolved(bool* Return_Value) const;
	class Ubpc_ac_Opener_C* GetOpener() const;

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"bp_wi_Puzzle_C">();
	}
	static class Ubp_wi_Puzzle_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<Ubp_wi_Puzzle_C>();
	}
};
static_assert(alignof(Ubp_wi_Puzzle_C) == 0x000008, "Wrong alignment on Ubp_wi_Puzzle_C");
static_assert(sizeof(Ubp_wi_Puzzle_C) == 0x000398, "Wrong size on Ubp_wi_Puzzle_C");
static_assert(offsetof(Ubp_wi_Puzzle_C, UberGraphFrame) == 0x000280, "Member 'Ubp_wi_Puzzle_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(Ubp_wi_Puzzle_C, bp_wi_SymbolUniGrid) == 0x000288, "Member 'Ubp_wi_Puzzle_C::bp_wi_SymbolUniGrid' has a wrong offset!");
static_assert(offsetof(Ubp_wi_Puzzle_C, ButtonClose) == 0x000290, "Member 'Ubp_wi_Puzzle_C::ButtonClose' has a wrong offset!");
static_assert(offsetof(Ubp_wi_Puzzle_C, FocusHandlerWI) == 0x000298, "Member 'Ubp_wi_Puzzle_C::FocusHandlerWI' has a wrong offset!");
static_assert(offsetof(Ubp_wi_Puzzle_C, Image_715) == 0x0002A0, "Member 'Ubp_wi_Puzzle_C::Image_715' has a wrong offset!");
static_assert(offsetof(Ubp_wi_Puzzle_C, Image_Padlock) == 0x0002A8, "Member 'Ubp_wi_Puzzle_C::Image_Padlock' has a wrong offset!");
static_assert(offsetof(Ubp_wi_Puzzle_C, Solution) == 0x0002B0, "Member 'Ubp_wi_Puzzle_C::Solution' has a wrong offset!");
static_assert(offsetof(Ubp_wi_Puzzle_C, Text_DebugText) == 0x0002B8, "Member 'Ubp_wi_Puzzle_C::Text_DebugText' has a wrong offset!");
static_assert(offsetof(Ubp_wi_Puzzle_C, Text_ReadMessage) == 0x0002C0, "Member 'Ubp_wi_Puzzle_C::Text_ReadMessage' has a wrong offset!");
static_assert(offsetof(Ubp_wi_Puzzle_C, VerticalBox_RoomNumber) == 0x0002C8, "Member 'Ubp_wi_Puzzle_C::VerticalBox_RoomNumber' has a wrong offset!");
static_assert(offsetof(Ubp_wi_Puzzle_C, NeighbourRoomName) == 0x0002D0, "Member 'Ubp_wi_Puzzle_C::NeighbourRoomName' has a wrong offset!");
static_assert(offsetof(Ubp_wi_Puzzle_C, LockedPadLock) == 0x0002E8, "Member 'Ubp_wi_Puzzle_C::LockedPadLock' has a wrong offset!");
static_assert(offsetof(Ubp_wi_Puzzle_C, UnlockedPadLock) == 0x0002F0, "Member 'Ubp_wi_Puzzle_C::UnlockedPadLock' has a wrong offset!");
static_assert(offsetof(Ubp_wi_Puzzle_C, Fail) == 0x0002F8, "Member 'Ubp_wi_Puzzle_C::Fail' has a wrong offset!");
static_assert(offsetof(Ubp_wi_Puzzle_C, Success) == 0x000308, "Member 'Ubp_wi_Puzzle_C::Success' has a wrong offset!");
static_assert(offsetof(Ubp_wi_Puzzle_C, Countdown) == 0x000318, "Member 'Ubp_wi_Puzzle_C::Countdown' has a wrong offset!");
static_assert(offsetof(Ubp_wi_Puzzle_C, CurrentCountdown) == 0x00031C, "Member 'Ubp_wi_Puzzle_C::CurrentCountdown' has a wrong offset!");
static_assert(offsetof(Ubp_wi_Puzzle_C, EnterCodeMessage) == 0x000320, "Member 'Ubp_wi_Puzzle_C::EnterCodeMessage' has a wrong offset!");
static_assert(offsetof(Ubp_wi_Puzzle_C, NeighbourSolutionSeed) == 0x000338, "Member 'Ubp_wi_Puzzle_C::NeighbourSolutionSeed' has a wrong offset!");
static_assert(offsetof(Ubp_wi_Puzzle_C, SolutionSeed) == 0x00033C, "Member 'Ubp_wi_Puzzle_C::SolutionSeed' has a wrong offset!");
static_assert(offsetof(Ubp_wi_Puzzle_C, SolveableObject) == 0x000340, "Member 'Ubp_wi_Puzzle_C::SolveableObject' has a wrong offset!");
static_assert(offsetof(Ubp_wi_Puzzle_C, Debugging) == 0x000348, "Member 'Ubp_wi_Puzzle_C::Debugging' has a wrong offset!");
static_assert(offsetof(Ubp_wi_Puzzle_C, SolutionSymbol) == 0x000350, "Member 'Ubp_wi_Puzzle_C::SolutionSymbol' has a wrong offset!");
static_assert(offsetof(Ubp_wi_Puzzle_C, IsJammed) == 0x000358, "Member 'Ubp_wi_Puzzle_C::IsJammed' has a wrong offset!");
static_assert(offsetof(Ubp_wi_Puzzle_C, OnSolved) == 0x000360, "Member 'Ubp_wi_Puzzle_C::OnSolved' has a wrong offset!");
static_assert(offsetof(Ubp_wi_Puzzle_C, SolvedColor) == 0x000370, "Member 'Ubp_wi_Puzzle_C::SolvedColor' has a wrong offset!");

}

