#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: AccelByteUe4Sdk

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "JsonUtilities_structs.hpp"


namespace SDK
{

// Enum AccelByteUe4Sdk.EAccelByteItemCurrencyType
// NumValues: 0x0004
enum class EAccelByteItemCurrencyType : uint8
{
	NONE                                     = 0,
	REAL                                     = 1,
	VIRTUAL                                  = 2,
	EAccelByteItemCurrencyType_MAX           = 3,
};

// Enum AccelByteUe4Sdk.EAccelByteItemType
// NumValues: 0x000A
enum class EAccelByteItemType : uint8
{
	NONE                                     = 0,
	APP                                      = 1,
	COINS                                    = 2,
	INGAMEITEM                               = 3,
	BUNDLE                                   = 4,
	CODE                                     = 5,
	SUBSCRIPTION                             = 6,
	SEASON                                   = 7,
	MEDIA                                    = 8,
	EAccelByteItemType_MAX                   = 9,
};

// Enum AccelByteUe4Sdk.EAccelByteItemStatus
// NumValues: 0x0004
enum class EAccelByteItemStatus : uint8
{
	NONE                                     = 0,
	ACTIVE                                   = 1,
	INACTIVE                                 = 2,
	EAccelByteItemStatus_MAX                 = 3,
};

// Enum AccelByteUe4Sdk.EAccelByteEntitlementType
// NumValues: 0x0004
enum class EAccelByteEntitlementType : uint8
{
	NONE                                     = 0,
	DURABLE                                  = 1,
	CONSUMABLE                               = 2,
	EAccelByteEntitlementType_MAX            = 3,
};

// Enum AccelByteUe4Sdk.ESetByMetadataRecord
// NumValues: 0x0004
enum class ESetByMetadataRecord : uint8
{
	NONE                                     = 0,
	SERVER                                   = 1,
	CLIENT                                   = 2,
	ESetByMetadataRecord_MAX                 = 3,
};

// Enum AccelByteUe4Sdk.EAccelByteCurrencyType
// NumValues: 0x0004
enum class EAccelByteCurrencyType : uint8
{
	NONE                                     = 0,
	REAL                                     = 1,
	VIRTUAL                                  = 2,
	EAccelByteCurrencyType_MAX               = 3,
};

// Enum AccelByteUe4Sdk.EAccelByteAppType
// NumValues: 0x0006
enum class EAccelByteAppType : uint8
{
	NONE                                     = 0,
	GAME                                     = 1,
	SOFTWARE                                 = 2,
	DLC                                      = 3,
	DEMO                                     = 4,
	EAccelByteAppType_MAX                    = 5,
};

// Enum AccelByteUe4Sdk.EAccelByteEntitlementSource
// NumValues: 0x000B
enum class EAccelByteEntitlementSource : uint8
{
	NONE                                     = 0,
	PURCHASE                                 = 1,
	IAP                                      = 2,
	PROMOTION                                = 3,
	ACHIEVEMENT                              = 4,
	REFERRAL_BONUS                           = 5,
	REDEEM_CODE                              = 6,
	REWARD                                   = 7,
	GIFT                                     = 8,
	OTHER                                    = 9,
	EAccelByteEntitlementSource_MAX          = 10,
};

// Enum AccelByteUe4Sdk.EAccelByteEntitlementStatus
// NumValues: 0x0006
enum class EAccelByteEntitlementStatus : uint8
{
	NONE                                     = 0,
	ACTIVE                                   = 1,
	INACTIVE                                 = 2,
	CONSUMED                                 = 3,
	REVOKED                                  = 4,
	EAccelByteEntitlementStatus_MAX          = 5,
};

// Enum AccelByteUe4Sdk.EAccelByteEntitlementClass
// NumValues: 0x0006
enum class EAccelByteEntitlementClass : uint8
{
	NONE                                     = 0,
	APP                                      = 1,
	ENTITLEMENT                              = 2,
	CODE                                     = 3,
	MEDIA                                    = 4,
	EAccelByteEntitlementClass_MAX           = 5,
};

// Enum AccelByteUe4Sdk.ERelationshipStatusCode
// NumValues: 0x0005
enum class ERelationshipStatusCode : uint8
{
	Friend                                   = 3,
	Incoming                                 = 2,
	Outgoing                                 = 1,
	NotFriend                                = 0,
	ERelationshipStatusCode_MAX              = 4,
};

// Enum AccelByteUe4Sdk.EAccelByteGroupType
// NumValues: 0x0005
enum class EAccelByteGroupType : uint8
{
	NONE                                     = 0,
	OPEN                                     = 1,
	PUBLIC                                   = 2,
	PRIVATE                                  = 3,
	EAccelByteGroupType_MAX                  = 4,
};

// Enum AccelByteUe4Sdk.EAccelByteRuleCriteria
// NumValues: 0x0004
enum class EAccelByteRuleCriteria : uint8
{
	MINIMUM                                  = 0,
	MAXIMUM                                  = 1,
	EQUAL                                    = 2,
	EAccelByteRuleCriteria_MAX               = 3,
};

// Enum AccelByteUe4Sdk.EAccelByteAllowedAction
// NumValues: 0x0008
enum class EAccelByteAllowedAction : uint8
{
	None                                     = 0,
	CreateGroup                              = 1,
	JoinGroup                                = 2,
	InviteUser                               = 3,
	KickUser                                 = 4,
	LeaveGroup                               = 5,
	ResponseJoinRequest                      = 6,
	EAccelByteAllowedAction_MAX              = 7,
};

// Enum AccelByteUe4Sdk.EAccelByteMatchmakingStatus
// NumValues: 0x0007
enum class EAccelByteMatchmakingStatus : uint8
{
	Unknown                                  = 0,
	Start                                    = 1,
	Timeout                                  = 2,
	Cancel                                   = 3,
	Done                                     = 4,
	Unavailable                              = 5,
	EAccelByteMatchmakingStatus_MAX          = 6,
};

// Enum AccelByteUe4Sdk.EAccelByteOrderStatus
// NumValues: 0x000D
enum class EAccelByteOrderStatus : uint8
{
	NONE                                     = 0,
	INIT                                     = 1,
	CHARGED                                  = 2,
	CHARGEBACK                               = 3,
	CHARGEBACK_REVERSED                      = 4,
	FULFILLED                                = 5,
	FULFILL_FAILED                           = 6,
	REFUNDING                                = 7,
	REFUNDED                                 = 8,
	REFUND_FAILED                            = 9,
	CLOSED                                   = 10,
	DELETED                                  = 11,
	EAccelByteOrderStatus_MAX                = 12,
};

// Enum AccelByteUe4Sdk.EAvailability
// NumValues: 0x0005
enum class EAvailability : uint8
{
	Offline                                  = 0,
	Online                                   = 1,
	Busy                                     = 2,
	Invisible                                = 3,
	EAvailability_MAX                        = 4,
};

// Enum AccelByteUe4Sdk.EAccelByteSeasonPassRewardType
// NumValues: 0x0002
enum class EAccelByteSeasonPassRewardType : uint8
{
	ITEM                                     = 0,
	EAccelByteSeasonPassRewardType_MAX       = 1,
};

// Enum AccelByteUe4Sdk.EAccelByteSeasonPassStatus
// NumValues: 0x0004
enum class EAccelByteSeasonPassStatus : uint8
{
	DRAFT                                    = 0,
	PUBLISHED                                = 1,
	RETIRED                                  = 2,
	EAccelByteSeasonPassStatus_MAX           = 3,
};

// Enum AccelByteUe4Sdk.EAccelByteMatchmakingSessionStatus
// NumValues: 0x0009
enum class EAccelByteMatchmakingSessionStatus : uint8
{
	None                                     = 0,
	Matched                                  = 1,
	Done                                     = 2,
	Cancel                                   = 3,
	Timeout                                  = 4,
	SessionInQueue                           = 5,
	SessionFull                              = 6,
	SessionTimeout                           = 7,
	EAccelByteMatchmakingSessionStatus_MAX   = 8,
};

// Enum AccelByteUe4Sdk.EAccelByteAchievementListSortBy
// NumValues: 0x000B
enum class EAccelByteAchievementListSortBy : uint8
{
	NONE                                     = 0,
	LISTORDER                                = 1,
	LISTORDER_ASC                            = 2,
	LISTORDER_DESC                           = 3,
	CREATED_AT                               = 4,
	CREATED_AT_ASC                           = 5,
	CREATED_AT_DESC                          = 6,
	UPDATED_AT                               = 7,
	UPDATED_AT_ASC                           = 8,
	UPDATED_AT_DESC                          = 9,
	EAccelByteAchievementListSortBy_MAX      = 10,
};

// Enum AccelByteUe4Sdk.EAccelByteItemListSortBy
// NumValues: 0x000D
enum class EAccelByteItemListSortBy : uint8
{
	NONE                                     = 0,
	NAME                                     = 1,
	NAME_DESC                                = 2,
	CREATEDAT                                = 3,
	CREATEDAT_ASC                            = 4,
	CREATEDAT_DESC                           = 5,
	UPDATEDAT                                = 6,
	UPDATEDAT_ASC                            = 7,
	UPDATEDAT_DESC                           = 8,
	DISPLAYORDER                             = 9,
	DISPLAYORDER_ASC                         = 10,
	DISPLAYORDER_DESC                        = 11,
	EAccelByteItemListSortBy_MAX             = 12,
};

// Enum AccelByteUe4Sdk.EAccelByteRewardListSortBy
// NumValues: 0x0008
enum class EAccelByteRewardListSortBy : uint8
{
	NONE                                     = 0,
	NAMESPACE                                = 1,
	NAMESPACE_ASC                            = 2,
	NAMESPACE_DESC                           = 3,
	REWARDCODE                               = 4,
	REWARDCODE_ASC                           = 5,
	REWARDCODE_DESC                          = 6,
	EAccelByteRewardListSortBy_MAX           = 7,
};

// Enum AccelByteUe4Sdk.EAccelByteFileType
// NumValues: 0x0009
enum class EAccelByteFileType : uint8
{
	JPEG                                     = 0,
	JPG                                      = 1,
	PNG                                      = 2,
	BMP                                      = 3,
	GIF                                      = 4,
	MP3                                      = 5,
	BIN                                      = 6,
	WEBP                                     = 7,
	EAccelByteFileType_MAX                   = 8,
};

// Enum AccelByteUe4Sdk.UEnumServerType
// NumValues: 0x0004
enum class EUEnumServerType : uint8
{
	NONE                                     = 0,
	CLOUDSERVER                              = 1,
	LOCALSERVER                              = 2,
	UEnumServerType_MAX                      = 3,
};

// Enum AccelByteUe4Sdk.EAccelByteAgreementPolicyType
// NumValues: 0x0004
enum class EAccelByteAgreementPolicyType : uint8
{
	EMPTY                                    = 0,
	LEGAL_DOCUMENT_TYPE                      = 1,
	MARKETING_PREFERENCE_TYPE                = 2,
	EAccelByteAgreementPolicyType_MAX        = 3,
};

// Enum AccelByteUe4Sdk.EAccelByteWalletTable
// NumValues: 0x000C
enum class EAccelByteWalletTable : uint8
{
	Playstation                              = 0,
	Xbox                                     = 1,
	Steam                                    = 2,
	Epic                                     = 3,
	Stadia                                   = 4,
	IOS                                      = 5,
	GooglePlay                               = 6,
	Twitch                                   = 7,
	System                                   = 8,
	Nintendo                                 = 9,
	Other                                    = 10,
	EAccelByteWalletTable_MAX                = 11,
};

// Enum AccelByteUe4Sdk.EAccelByteWalletAction
// NumValues: 0x0005
enum class EAccelByteWalletAction : uint8
{
	NONE                                     = 0,
	CREDIT                                   = 1,
	PAYMENT                                  = 2,
	DEBIT                                    = 3,
	EAccelByteWalletAction_MAX               = 4,
};

// Enum AccelByteUe4Sdk.EAccelByteSeasonType
// NumValues: 0x0003
enum class EAccelByteSeasonType : uint8
{
	PASS                                     = 0,
	TIER                                     = 1,
	EAccelByteSeasonType_MAX                 = 2,
};

// Enum AccelByteUe4Sdk.EAccelBytePlatformSync
// NumValues: 0x0007
enum class EAccelBytePlatformSync : uint8
{
	STEAM                                    = 0,
	XBOX_LIVE                                = 1,
	PLAYSTATION                              = 2,
	STADIA                                   = 3,
	EPIC_GAMES                               = 4,
	OTHER                                    = 5,
	EAccelBytePlatformSync_MAX               = 6,
};

// Enum AccelByteUe4Sdk.EAccelByteSubscriptionCycle
// NumValues: 0x0005
enum class EAccelByteSubscriptionCycle : uint8
{
	WEEKLY                                   = 0,
	MONTHLY                                  = 1,
	QUARTERLY                                = 2,
	YEARLY                                   = 3,
	EAccelByteSubscriptionCycle_MAX          = 4,
};

// Enum AccelByteUe4Sdk.EAccelByteCreditUserWalletSource
// NumValues: 0x0009
enum class EAccelByteCreditUserWalletSource : uint8
{
	PURCHASE                                 = 0,
	IAP                                      = 1,
	PROMOTION                                = 2,
	ACHIEVEMENT                              = 3,
	REFERRAL_BONUS                           = 4,
	REDEEM_CODE                              = 5,
	REFUND                                   = 6,
	OTHER                                    = 7,
	EAccelByteCreditUserWalletSource_MAX     = 8,
};

// Enum AccelByteUe4Sdk.EAccelByteItemSource
// NumValues: 0x0009
enum class EAccelByteItemSource : uint8
{
	NONE                                     = 0,
	PURCHASE                                 = 1,
	IAP                                      = 2,
	PROMOTION                                = 3,
	ACHIEVEMENT                              = 4,
	REFERRAL_BONUS                           = 5,
	REDEEM_CODE                              = 6,
	OTHER                                    = 7,
	EAccelByteItemSource_MAX                 = 8,
};

// Enum AccelByteUe4Sdk.ESettingsEnvironment
// NumValues: 0x0005
enum class ESettingsEnvironment : uint8
{
	Development                              = 0,
	Certification                            = 1,
	Production                               = 2,
	Default                                  = 3,
	ESettingsEnvironment_MAX                 = 4,
};

// Enum AccelByteUe4Sdk.EAccelBytePaginationType
// NumValues: 0x0004
enum class EAccelBytePaginationType : uint8
{
	FIRST                                    = 0,
	NEXT                                     = 1,
	PREVIOUS                                 = 2,
	EAccelBytePaginationType_MAX             = 3,
};

// Enum AccelByteUe4Sdk.EAccelByteGroupListSortBy
// NumValues: 0x000B
enum class EAccelByteGroupListSortBy : uint8
{
	NONE                                     = 0,
	LISTORDER                                = 1,
	LISTORDER_ASC                            = 2,
	LISTORDER_DESC                           = 3,
	CREATED_AT                               = 4,
	CREATED_AT_ASC                           = 5,
	CREATED_AT_DESC                          = 6,
	UPDATED_AT                               = 7,
	UPDATED_AT_ASC                           = 8,
	UPDATED_AT_DESC                          = 9,
	EAccelByteGroupListSortBy_MAX            = 10,
};

// Enum AccelByteUe4Sdk.EAccelByteLeaderboardTimeFrame
// NumValues: 0x0006
enum class EAccelByteLeaderboardTimeFrame : uint8
{
	ALL_TIME                                 = 0,
	CURRENT_SEASON                           = 1,
	CURRENT_MONTH                            = 2,
	CURRENT_WEEK                             = 3,
	TODAY                                    = 4,
	EAccelByteLeaderboardTimeFrame_MAX       = 5,
};

// Enum AccelByteUe4Sdk.EAccelByteReportingCategory
// NumValues: 0x0003
enum class EAccelByteReportingCategory : uint8
{
	UGC                                      = 0,
	USER                                     = 1,
	EAccelByteReportingCategory_MAX          = 2,
};

// Enum AccelByteUe4Sdk.EAccelByteSeasonPassSource
// NumValues: 0x0003
enum class EAccelByteSeasonPassSource : uint8
{
	SWEAT                                    = 0,
	PAID_FOR                                 = 1,
	EAccelByteSeasonPassSource_MAX           = 2,
};

// Enum AccelByteUe4Sdk.EAccelByteSeasonPassStrategyMethod
// NumValues: 0x0003
enum class EAccelByteSeasonPassStrategyMethod : uint8
{
	NONE                                     = 0,
	CURRENCY                                 = 1,
	EAccelByteSeasonPassStrategyMethod_MAX   = 2,
};

// Enum AccelByteUe4Sdk.EAccelByteSessionType
// NumValues: 0x0004
enum class EAccelByteSessionType : uint8
{
	NONE                                     = 0,
	P2p                                      = 1,
	Dedicated                                = 2,
	EAccelByteSessionType_MAX                = 3,
};

// Enum AccelByteUe4Sdk.EAccelByteStatisticStatus
// NumValues: 0x0003
enum class EAccelByteStatisticStatus : uint8
{
	INIT                                     = 0,
	TIED                                     = 1,
	EAccelByteStatisticStatus_MAX            = 2,
};

// Enum AccelByteUe4Sdk.EAccelByteStatisticSetBy
// NumValues: 0x0003
enum class EAccelByteStatisticSetBy : uint8
{
	CLIENT                                   = 0,
	SERVER                                   = 1,
	EAccelByteStatisticSetBy_MAX             = 2,
};

// Enum AccelByteUe4Sdk.EVerificationContext
// NumValues: 0x0004
enum class EVerificationContext : uint8
{
	UserAccountRegistration                  = 0,
	UpdateEmailAddress                       = 1,
	UpgradeHeadlessAccount                   = 2,
	EVerificationContext_MAX                 = 3,
};

// Enum AccelByteUe4Sdk.EBanReason
// NumValues: 0x000D
enum class EBanReason : uint8
{
	VIOLENCE                                 = 0,
	HARASSMENT                               = 1,
	HATEFUL_CONDUCT                          = 2,
	OFFENSIVE_USERNAME                       = 3,
	IMPERSONATION                            = 4,
	MALICIOUS_CONTENT                        = 5,
	SEXUALLY_SUGGESTIVE                      = 6,
	SEXUAL_VIOLENCE                          = 7,
	EXTREME_VIOLENCE                         = 8,
	UNDERAGE_USER                            = 9,
	CHEATING                                 = 10,
	TOS_VIOLATION                            = 11,
	EBanReason_MAX                           = 12,
};

// Enum AccelByteUe4Sdk.EBanType
// NumValues: 0x0009
enum class EBanType : uint8
{
	LOGIN                                    = 0,
	CHAT_SEND                                = 1,
	CHAT_ALL                                 = 2,
	ORDER_AND_PAYMENT                        = 3,
	STATISTIC                                = 4,
	LEADERBOARD                              = 5,
	MATCHMAKING                              = 6,
	UGC_CREATE_UPDATE                        = 7,
	EBanType_MAX                             = 8,
};

// Enum AccelByteUe4Sdk.EAccelByteSearchType
// NumValues: 0x0004
enum class EAccelByteSearchType : uint8
{
	ALL                                      = 0,
	DISPLAYNAME                              = 1,
	USERNAME                                 = 2,
	EAccelByteSearchType_MAX                 = 3,
};

// Enum AccelByteUe4Sdk.EAccelBytePlatformType
// NumValues: 0x0015
enum class EAccelBytePlatformType : uint8
{
	Steam                                    = 0,
	PS4                                      = 1,
	PS4CrossGen                              = 2,
	PS5                                      = 3,
	Live                                     = 4,
	Google                                   = 5,
	Apple                                    = 6,
	Facebook                                 = 7,
	Android                                  = 8,
	IOS                                      = 9,
	Device                                   = 10,
	Twitch                                   = 11,
	Oculus                                   = 12,
	Twitter                                  = 13,
	EpicGames                                = 14,
	Stadia                                   = 15,
	AwsCognito                               = 16,
	Discord                                  = 17,
	Nintendo                                 = 18,
	SnapChat                                 = 19,
	EAccelBytePlatformType_MAX               = 20,
};

// Enum AccelByteUe4Sdk.EAccelByteLoginAuthFactorType
// NumValues: 0x0003
enum class EAccelByteLoginAuthFactorType : uint8
{
	Authenticator                            = 0,
	BackupCode                               = 1,
	EAccelByteLoginAuthFactorType_MAX        = 2,
};

// Enum AccelByteUe4Sdk.EAccelByteUploadCategory
// NumValues: 0x0003
enum class EAccelByteUploadCategory : uint8
{
	DEFAULT                                  = 0,
	REPORTING                                = 1,
	EAccelByteUploadCategory_MAX             = 2,
};

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsUserAchievement
// 0x0088 (0x0088 - 0x0000)
struct FAccelByteModelsUserAchievement final
{
public:
	class FString                                 ID;                                                // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<class FString, class FString>            Name;                                              // 0x0010(0x0050)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	class FString                                 AchievementCode;                                   // 0x0060(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 AchievedAt;                                        // 0x0070(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LatestValue;                                       // 0x0080(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Status;                                            // 0x0084(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsUserAchievement) == 0x000008, "Wrong alignment on FAccelByteModelsUserAchievement");
static_assert(sizeof(FAccelByteModelsUserAchievement) == 0x000088, "Wrong size on FAccelByteModelsUserAchievement");
static_assert(offsetof(FAccelByteModelsUserAchievement, ID) == 0x000000, "Member 'FAccelByteModelsUserAchievement::ID' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsUserAchievement, Name) == 0x000010, "Member 'FAccelByteModelsUserAchievement::Name' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsUserAchievement, AchievementCode) == 0x000060, "Member 'FAccelByteModelsUserAchievement::AchievementCode' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsUserAchievement, AchievedAt) == 0x000070, "Member 'FAccelByteModelsUserAchievement::AchievedAt' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsUserAchievement, LatestValue) == 0x000080, "Member 'FAccelByteModelsUserAchievement::LatestValue' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsUserAchievement, Status) == 0x000084, "Member 'FAccelByteModelsUserAchievement::Status' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsAchievementIcon
// 0x0020 (0x0020 - 0x0000)
struct FAccelByteModelsAchievementIcon final
{
public:
	class FString                                 URL;                                               // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Slug;                                              // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsAchievementIcon) == 0x000008, "Wrong alignment on FAccelByteModelsAchievementIcon");
static_assert(sizeof(FAccelByteModelsAchievementIcon) == 0x000020, "Wrong size on FAccelByteModelsAchievementIcon");
static_assert(offsetof(FAccelByteModelsAchievementIcon, URL) == 0x000000, "Member 'FAccelByteModelsAchievementIcon::URL' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsAchievementIcon, Slug) == 0x000010, "Member 'FAccelByteModelsAchievementIcon::Slug' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsPublicAchievement
// 0x00B0 (0x00B0 - 0x0000)
struct FAccelByteModelsPublicAchievement final
{
public:
	class FString                                 AchievementCode;                                   // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Namespace;                                         // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Name;                                              // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Description;                                       // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FAccelByteModelsAchievementIcon> LockedIcons;                                       // 0x0040(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FAccelByteModelsAchievementIcon> UnlockedIcons;                                     // 0x0050(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          Hidden;                                            // 0x0060(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_61[0x3];                                       // 0x0061(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ListOrder;                                         // 0x0064(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FString>                         Tags;                                              // 0x0068(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          Incremental;                                       // 0x0078(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_79[0x3];                                       // 0x0079(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         GoalValue;                                         // 0x007C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 StatCode;                                          // 0x0080(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 CreatedAt;                                         // 0x0090(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 UpdatedAt;                                         // 0x00A0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsPublicAchievement) == 0x000008, "Wrong alignment on FAccelByteModelsPublicAchievement");
static_assert(sizeof(FAccelByteModelsPublicAchievement) == 0x0000B0, "Wrong size on FAccelByteModelsPublicAchievement");
static_assert(offsetof(FAccelByteModelsPublicAchievement, AchievementCode) == 0x000000, "Member 'FAccelByteModelsPublicAchievement::AchievementCode' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsPublicAchievement, Namespace) == 0x000010, "Member 'FAccelByteModelsPublicAchievement::Namespace' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsPublicAchievement, Name) == 0x000020, "Member 'FAccelByteModelsPublicAchievement::Name' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsPublicAchievement, Description) == 0x000030, "Member 'FAccelByteModelsPublicAchievement::Description' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsPublicAchievement, LockedIcons) == 0x000040, "Member 'FAccelByteModelsPublicAchievement::LockedIcons' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsPublicAchievement, UnlockedIcons) == 0x000050, "Member 'FAccelByteModelsPublicAchievement::UnlockedIcons' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsPublicAchievement, Hidden) == 0x000060, "Member 'FAccelByteModelsPublicAchievement::Hidden' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsPublicAchievement, ListOrder) == 0x000064, "Member 'FAccelByteModelsPublicAchievement::ListOrder' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsPublicAchievement, Tags) == 0x000068, "Member 'FAccelByteModelsPublicAchievement::Tags' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsPublicAchievement, Incremental) == 0x000078, "Member 'FAccelByteModelsPublicAchievement::Incremental' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsPublicAchievement, GoalValue) == 0x00007C, "Member 'FAccelByteModelsPublicAchievement::GoalValue' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsPublicAchievement, StatCode) == 0x000080, "Member 'FAccelByteModelsPublicAchievement::StatCode' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsPublicAchievement, CreatedAt) == 0x000090, "Member 'FAccelByteModelsPublicAchievement::CreatedAt' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsPublicAchievement, UpdatedAt) == 0x0000A0, "Member 'FAccelByteModelsPublicAchievement::UpdatedAt' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsPaging
// 0x0040 (0x0040 - 0x0000)
struct FAccelByteModelsPaging final
{
public:
	class FString                                 First;                                             // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Last;                                              // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Next;                                              // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Previous;                                          // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsPaging) == 0x000008, "Wrong alignment on FAccelByteModelsPaging");
static_assert(sizeof(FAccelByteModelsPaging) == 0x000040, "Wrong size on FAccelByteModelsPaging");
static_assert(offsetof(FAccelByteModelsPaging, First) == 0x000000, "Member 'FAccelByteModelsPaging::First' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsPaging, Last) == 0x000010, "Member 'FAccelByteModelsPaging::Last' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsPaging, Next) == 0x000020, "Member 'FAccelByteModelsPaging::Next' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsPaging, Previous) == 0x000030, "Member 'FAccelByteModelsPaging::Previous' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsPaginatedPublicAchievement
// 0x0050 (0x0050 - 0x0000)
struct FAccelByteModelsPaginatedPublicAchievement final
{
public:
	TArray<struct FAccelByteModelsPublicAchievement> Data;                                              // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FAccelByteModelsPaging                 Paging;                                            // 0x0010(0x0040)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsPaginatedPublicAchievement) == 0x000008, "Wrong alignment on FAccelByteModelsPaginatedPublicAchievement");
static_assert(sizeof(FAccelByteModelsPaginatedPublicAchievement) == 0x000050, "Wrong size on FAccelByteModelsPaginatedPublicAchievement");
static_assert(offsetof(FAccelByteModelsPaginatedPublicAchievement, Data) == 0x000000, "Member 'FAccelByteModelsPaginatedPublicAchievement::Data' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsPaginatedPublicAchievement, Paging) == 0x000010, "Member 'FAccelByteModelsPaginatedPublicAchievement::Paging' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsEntitlementSummary
// 0x0070 (0x0070 - 0x0000)
struct FAccelByteModelsEntitlementSummary final
{
public:
	class FString                                 ID;                                                // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ItemId;                                            // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Namespace;                                         // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 UserId;                                            // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAccelByteEntitlementClass                    Clazz;                                             // 0x0040(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAccelByteEntitlementType                     Type;                                              // 0x0041(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Stackable;                                         // 0x0042(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_43[0x1];                                       // 0x0043(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         StackedUseCount;                                   // 0x0044(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         StackedQuantity;                                   // 0x0048(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4C[0x4];                                       // 0x004C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CreatedAt;                                         // 0x0050(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 GrantedCode;                                       // 0x0060(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsEntitlementSummary) == 0x000008, "Wrong alignment on FAccelByteModelsEntitlementSummary");
static_assert(sizeof(FAccelByteModelsEntitlementSummary) == 0x000070, "Wrong size on FAccelByteModelsEntitlementSummary");
static_assert(offsetof(FAccelByteModelsEntitlementSummary, ID) == 0x000000, "Member 'FAccelByteModelsEntitlementSummary::ID' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsEntitlementSummary, ItemId) == 0x000010, "Member 'FAccelByteModelsEntitlementSummary::ItemId' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsEntitlementSummary, Namespace) == 0x000020, "Member 'FAccelByteModelsEntitlementSummary::Namespace' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsEntitlementSummary, UserId) == 0x000030, "Member 'FAccelByteModelsEntitlementSummary::UserId' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsEntitlementSummary, Clazz) == 0x000040, "Member 'FAccelByteModelsEntitlementSummary::Clazz' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsEntitlementSummary, Type) == 0x000041, "Member 'FAccelByteModelsEntitlementSummary::Type' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsEntitlementSummary, Stackable) == 0x000042, "Member 'FAccelByteModelsEntitlementSummary::Stackable' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsEntitlementSummary, StackedUseCount) == 0x000044, "Member 'FAccelByteModelsEntitlementSummary::StackedUseCount' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsEntitlementSummary, StackedQuantity) == 0x000048, "Member 'FAccelByteModelsEntitlementSummary::StackedQuantity' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsEntitlementSummary, CreatedAt) == 0x000050, "Member 'FAccelByteModelsEntitlementSummary::CreatedAt' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsEntitlementSummary, GrantedCode) == 0x000060, "Member 'FAccelByteModelsEntitlementSummary::GrantedCode' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsCancelFriendsResponse
// 0x0010 (0x0010 - 0x0000)
struct FAccelByteModelsCancelFriendsResponse final
{
public:
	class FString                                 Code;                                              // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsCancelFriendsResponse) == 0x000008, "Wrong alignment on FAccelByteModelsCancelFriendsResponse");
static_assert(sizeof(FAccelByteModelsCancelFriendsResponse) == 0x000010, "Wrong size on FAccelByteModelsCancelFriendsResponse");
static_assert(offsetof(FAccelByteModelsCancelFriendsResponse, Code) == 0x000000, "Member 'FAccelByteModelsCancelFriendsResponse::Code' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsCountInfo
// 0x000C (0x000C - 0x0000)
struct FAccelByteModelsCountInfo final
{
public:
	int32                                         NumberOfAchievements;                              // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NumberOfHiddenAchievements;                        // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NumberOfVisibleAchievements;                       // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsCountInfo) == 0x000004, "Wrong alignment on FAccelByteModelsCountInfo");
static_assert(sizeof(FAccelByteModelsCountInfo) == 0x00000C, "Wrong size on FAccelByteModelsCountInfo");
static_assert(offsetof(FAccelByteModelsCountInfo, NumberOfAchievements) == 0x000000, "Member 'FAccelByteModelsCountInfo::NumberOfAchievements' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsCountInfo, NumberOfHiddenAchievements) == 0x000004, "Member 'FAccelByteModelsCountInfo::NumberOfHiddenAchievements' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsCountInfo, NumberOfVisibleAchievements) == 0x000008, "Member 'FAccelByteModelsCountInfo::NumberOfVisibleAchievements' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsPlatformSyncMobileGoogleResponse
// 0x0001 (0x0001 - 0x0000)
struct FAccelByteModelsPlatformSyncMobileGoogleResponse final
{
public:
	bool                                          NeedConsume;                                       // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsPlatformSyncMobileGoogleResponse) == 0x000001, "Wrong alignment on FAccelByteModelsPlatformSyncMobileGoogleResponse");
static_assert(sizeof(FAccelByteModelsPlatformSyncMobileGoogleResponse) == 0x000001, "Wrong size on FAccelByteModelsPlatformSyncMobileGoogleResponse");
static_assert(offsetof(FAccelByteModelsPlatformSyncMobileGoogleResponse, NeedConsume) == 0x000000, "Member 'FAccelByteModelsPlatformSyncMobileGoogleResponse::NeedConsume' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsPublicGameProfileInfo
// 0x0040 (0x0040 - 0x0000)
struct FAccelByteModelsPublicGameProfileInfo final
{
public:
	class FString                                 ProfileId;                                         // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Namespace;                                         // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ProfileName;                                       // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 AvatarUrl;                                         // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsPublicGameProfileInfo) == 0x000008, "Wrong alignment on FAccelByteModelsPublicGameProfileInfo");
static_assert(sizeof(FAccelByteModelsPublicGameProfileInfo) == 0x000040, "Wrong size on FAccelByteModelsPublicGameProfileInfo");
static_assert(offsetof(FAccelByteModelsPublicGameProfileInfo, ProfileId) == 0x000000, "Member 'FAccelByteModelsPublicGameProfileInfo::ProfileId' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsPublicGameProfileInfo, Namespace) == 0x000010, "Member 'FAccelByteModelsPublicGameProfileInfo::Namespace' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsPublicGameProfileInfo, ProfileName) == 0x000020, "Member 'FAccelByteModelsPublicGameProfileInfo::ProfileName' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsPublicGameProfileInfo, AvatarUrl) == 0x000030, "Member 'FAccelByteModelsPublicGameProfileInfo::AvatarUrl' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsPublicGameProfile
// 0x0020 (0x0020 - 0x0000)
struct FAccelByteModelsPublicGameProfile final
{
public:
	TArray<struct FAccelByteModelsPublicGameProfileInfo> GameProfiles;                                      // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	class FString                                 UserId;                                            // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsPublicGameProfile) == 0x000008, "Wrong alignment on FAccelByteModelsPublicGameProfile");
static_assert(sizeof(FAccelByteModelsPublicGameProfile) == 0x000020, "Wrong size on FAccelByteModelsPublicGameProfile");
static_assert(offsetof(FAccelByteModelsPublicGameProfile, GameProfiles) == 0x000000, "Member 'FAccelByteModelsPublicGameProfile::GameProfiles' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsPublicGameProfile, UserId) == 0x000010, "Member 'FAccelByteModelsPublicGameProfile::UserId' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.PlatformLink
// 0x0090 (0x0090 - 0x0000)
struct FPlatformLink final
{
public:
	class FString                                 DisplayName;                                       // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 EmailAddress;                                      // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 LinkedAt;                                          // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Namespace;                                         // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 OriginNamespace;                                   // 0x0040(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 PlatformId;                                        // 0x0050(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 PlatformUserId;                                    // 0x0060(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 UserId;                                            // 0x0070(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 AccountGroup;                                      // 0x0080(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPlatformLink) == 0x000008, "Wrong alignment on FPlatformLink");
static_assert(sizeof(FPlatformLink) == 0x000090, "Wrong size on FPlatformLink");
static_assert(offsetof(FPlatformLink, DisplayName) == 0x000000, "Member 'FPlatformLink::DisplayName' has a wrong offset!");
static_assert(offsetof(FPlatformLink, EmailAddress) == 0x000010, "Member 'FPlatformLink::EmailAddress' has a wrong offset!");
static_assert(offsetof(FPlatformLink, LinkedAt) == 0x000020, "Member 'FPlatformLink::LinkedAt' has a wrong offset!");
static_assert(offsetof(FPlatformLink, Namespace) == 0x000030, "Member 'FPlatformLink::Namespace' has a wrong offset!");
static_assert(offsetof(FPlatformLink, OriginNamespace) == 0x000040, "Member 'FPlatformLink::OriginNamespace' has a wrong offset!");
static_assert(offsetof(FPlatformLink, PlatformId) == 0x000050, "Member 'FPlatformLink::PlatformId' has a wrong offset!");
static_assert(offsetof(FPlatformLink, PlatformUserId) == 0x000060, "Member 'FPlatformLink::PlatformUserId' has a wrong offset!");
static_assert(offsetof(FPlatformLink, UserId) == 0x000070, "Member 'FPlatformLink::UserId' has a wrong offset!");
static_assert(offsetof(FPlatformLink, AccountGroup) == 0x000080, "Member 'FPlatformLink::AccountGroup' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsEntitlementOwnership
// 0x0010 (0x0010 - 0x0000)
struct FAccelByteModelsEntitlementOwnership final
{
public:
	bool                                          Owned;                                             // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FDateTime                              EndDate;                                           // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsEntitlementOwnership) == 0x000008, "Wrong alignment on FAccelByteModelsEntitlementOwnership");
static_assert(sizeof(FAccelByteModelsEntitlementOwnership) == 0x000010, "Wrong size on FAccelByteModelsEntitlementOwnership");
static_assert(offsetof(FAccelByteModelsEntitlementOwnership, Owned) == 0x000000, "Member 'FAccelByteModelsEntitlementOwnership::Owned' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsEntitlementOwnership, EndDate) == 0x000008, "Member 'FAccelByteModelsEntitlementOwnership::EndDate' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.PartyPromoteLeaderRequest
// 0x0010 (0x0010 - 0x0000)
struct FPartyPromoteLeaderRequest final
{
public:
	class FString                                 UserId;                                            // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPartyPromoteLeaderRequest) == 0x000008, "Wrong alignment on FPartyPromoteLeaderRequest");
static_assert(sizeof(FPartyPromoteLeaderRequest) == 0x000010, "Wrong size on FPartyPromoteLeaderRequest");
static_assert(offsetof(FPartyPromoteLeaderRequest, UserId) == 0x000000, "Member 'FPartyPromoteLeaderRequest::UserId' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.ResetPasswordRequest
// 0x0030 (0x0030 - 0x0000)
struct FResetPasswordRequest final
{
public:
	class FString                                 Code;                                              // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 EmailAddress;                                      // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 NewPassword;                                       // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FResetPasswordRequest) == 0x000008, "Wrong alignment on FResetPasswordRequest");
static_assert(sizeof(FResetPasswordRequest) == 0x000030, "Wrong size on FResetPasswordRequest");
static_assert(offsetof(FResetPasswordRequest, Code) == 0x000000, "Member 'FResetPasswordRequest::Code' has a wrong offset!");
static_assert(offsetof(FResetPasswordRequest, EmailAddress) == 0x000010, "Member 'FResetPasswordRequest::EmailAddress' has a wrong offset!");
static_assert(offsetof(FResetPasswordRequest, NewPassword) == 0x000020, "Member 'FResetPasswordRequest::NewPassword' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsMultiLanguageAchievement
// 0x0130 (0x0130 - 0x0000)
struct FAccelByteModelsMultiLanguageAchievement final
{
public:
	class FString                                 AchievementCode;                                   // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Namespace;                                         // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<class FString, class FString>            Name;                                              // 0x0020(0x0050)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	TMap<class FString, class FString>            Description;                                       // 0x0070(0x0050)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	TArray<struct FAccelByteModelsAchievementIcon> LockedIcons;                                       // 0x00C0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FAccelByteModelsAchievementIcon> UnlockedIcons;                                     // 0x00D0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          Hidden;                                            // 0x00E0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E1[0x3];                                       // 0x00E1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ListOrder;                                         // 0x00E4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FString>                         Tags;                                              // 0x00E8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          Incremental;                                       // 0x00F8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_F9[0x3];                                       // 0x00F9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         GoalValue;                                         // 0x00FC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 StatCode;                                          // 0x0100(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 CreatedAt;                                         // 0x0110(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 UpdatedAt;                                         // 0x0120(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsMultiLanguageAchievement) == 0x000008, "Wrong alignment on FAccelByteModelsMultiLanguageAchievement");
static_assert(sizeof(FAccelByteModelsMultiLanguageAchievement) == 0x000130, "Wrong size on FAccelByteModelsMultiLanguageAchievement");
static_assert(offsetof(FAccelByteModelsMultiLanguageAchievement, AchievementCode) == 0x000000, "Member 'FAccelByteModelsMultiLanguageAchievement::AchievementCode' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsMultiLanguageAchievement, Namespace) == 0x000010, "Member 'FAccelByteModelsMultiLanguageAchievement::Namespace' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsMultiLanguageAchievement, Name) == 0x000020, "Member 'FAccelByteModelsMultiLanguageAchievement::Name' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsMultiLanguageAchievement, Description) == 0x000070, "Member 'FAccelByteModelsMultiLanguageAchievement::Description' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsMultiLanguageAchievement, LockedIcons) == 0x0000C0, "Member 'FAccelByteModelsMultiLanguageAchievement::LockedIcons' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsMultiLanguageAchievement, UnlockedIcons) == 0x0000D0, "Member 'FAccelByteModelsMultiLanguageAchievement::UnlockedIcons' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsMultiLanguageAchievement, Hidden) == 0x0000E0, "Member 'FAccelByteModelsMultiLanguageAchievement::Hidden' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsMultiLanguageAchievement, ListOrder) == 0x0000E4, "Member 'FAccelByteModelsMultiLanguageAchievement::ListOrder' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsMultiLanguageAchievement, Tags) == 0x0000E8, "Member 'FAccelByteModelsMultiLanguageAchievement::Tags' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsMultiLanguageAchievement, Incremental) == 0x0000F8, "Member 'FAccelByteModelsMultiLanguageAchievement::Incremental' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsMultiLanguageAchievement, GoalValue) == 0x0000FC, "Member 'FAccelByteModelsMultiLanguageAchievement::GoalValue' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsMultiLanguageAchievement, StatCode) == 0x000100, "Member 'FAccelByteModelsMultiLanguageAchievement::StatCode' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsMultiLanguageAchievement, CreatedAt) == 0x000110, "Member 'FAccelByteModelsMultiLanguageAchievement::CreatedAt' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsMultiLanguageAchievement, UpdatedAt) == 0x000120, "Member 'FAccelByteModelsMultiLanguageAchievement::UpdatedAt' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsAttributes
// 0x0040 (0x0040 - 0x0000)
struct FAccelByteModelsAttributes final
{
public:
	class FString                                 ServerId;                                          // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ServerName;                                        // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 CharacterId;                                       // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 CharacterName;                                     // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsAttributes) == 0x000008, "Wrong alignment on FAccelByteModelsAttributes");
static_assert(sizeof(FAccelByteModelsAttributes) == 0x000040, "Wrong size on FAccelByteModelsAttributes");
static_assert(offsetof(FAccelByteModelsAttributes, ServerId) == 0x000000, "Member 'FAccelByteModelsAttributes::ServerId' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsAttributes, ServerName) == 0x000010, "Member 'FAccelByteModelsAttributes::ServerName' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsAttributes, CharacterId) == 0x000020, "Member 'FAccelByteModelsAttributes::CharacterId' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsAttributes, CharacterName) == 0x000030, "Member 'FAccelByteModelsAttributes::CharacterName' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.Permission
// 0x0040 (0x0040 - 0x0000)
struct FPermission final
{
public:
	int32                                         Action;                                            // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Resource;                                          // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SchedAction;                                       // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 SchedCron;                                         // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FString>                         SchedRange;                                        // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPermission) == 0x000008, "Wrong alignment on FPermission");
static_assert(sizeof(FPermission) == 0x000040, "Wrong size on FPermission");
static_assert(offsetof(FPermission, Action) == 0x000000, "Member 'FPermission::Action' has a wrong offset!");
static_assert(offsetof(FPermission, Resource) == 0x000008, "Member 'FPermission::Resource' has a wrong offset!");
static_assert(offsetof(FPermission, SchedAction) == 0x000018, "Member 'FPermission::SchedAction' has a wrong offset!");
static_assert(offsetof(FPermission, SchedCron) == 0x000020, "Member 'FPermission::SchedCron' has a wrong offset!");
static_assert(offsetof(FPermission, SchedRange) == 0x000030, "Member 'FPermission::SchedRange' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsPaginatedUserAchievement
// 0x0060 (0x0060 - 0x0000)
struct FAccelByteModelsPaginatedUserAchievement final
{
public:
	struct FAccelByteModelsCountInfo              CountInfo;                                         // 0x0000(0x000C)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FAccelByteModelsUserAchievement> Data;                                              // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FAccelByteModelsPaging                 Paging;                                            // 0x0020(0x0040)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsPaginatedUserAchievement) == 0x000008, "Wrong alignment on FAccelByteModelsPaginatedUserAchievement");
static_assert(sizeof(FAccelByteModelsPaginatedUserAchievement) == 0x000060, "Wrong size on FAccelByteModelsPaginatedUserAchievement");
static_assert(offsetof(FAccelByteModelsPaginatedUserAchievement, CountInfo) == 0x000000, "Member 'FAccelByteModelsPaginatedUserAchievement::CountInfo' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsPaginatedUserAchievement, Data) == 0x000010, "Member 'FAccelByteModelsPaginatedUserAchievement::Data' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsPaginatedUserAchievement, Paging) == 0x000020, "Member 'FAccelByteModelsPaginatedUserAchievement::Paging' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsRequestFriendsResponse
// 0x0010 (0x0010 - 0x0000)
struct FAccelByteModelsRequestFriendsResponse final
{
public:
	class FString                                 Code;                                              // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsRequestFriendsResponse) == 0x000008, "Wrong alignment on FAccelByteModelsRequestFriendsResponse");
static_assert(sizeof(FAccelByteModelsRequestFriendsResponse) == 0x000010, "Wrong size on FAccelByteModelsRequestFriendsResponse");
static_assert(offsetof(FAccelByteModelsRequestFriendsResponse, Code) == 0x000000, "Member 'FAccelByteModelsRequestFriendsResponse::Code' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsLocalizedPolicyVersionObject
// 0x0090 (0x0090 - 0x0000)
struct FAccelByteModelsLocalizedPolicyVersionObject final
{
public:
	class FString                                 ID;                                                // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDateTime                              CreatedAt;                                         // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDateTime                              UpdatedAt;                                         // 0x0018(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 LocaleCode;                                        // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ContentType;                                       // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 AttachmentLocation;                                // 0x0040(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 AttachmentVersionIdentifier;                       // 0x0050(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Description;                                       // 0x0060(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Status;                                            // 0x0070(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDateTime                              PublishedDate;                                     // 0x0080(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsDefaultSelection;                                // 0x0088(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_89[0x7];                                       // 0x0089(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAccelByteModelsLocalizedPolicyVersionObject) == 0x000008, "Wrong alignment on FAccelByteModelsLocalizedPolicyVersionObject");
static_assert(sizeof(FAccelByteModelsLocalizedPolicyVersionObject) == 0x000090, "Wrong size on FAccelByteModelsLocalizedPolicyVersionObject");
static_assert(offsetof(FAccelByteModelsLocalizedPolicyVersionObject, ID) == 0x000000, "Member 'FAccelByteModelsLocalizedPolicyVersionObject::ID' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsLocalizedPolicyVersionObject, CreatedAt) == 0x000010, "Member 'FAccelByteModelsLocalizedPolicyVersionObject::CreatedAt' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsLocalizedPolicyVersionObject, UpdatedAt) == 0x000018, "Member 'FAccelByteModelsLocalizedPolicyVersionObject::UpdatedAt' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsLocalizedPolicyVersionObject, LocaleCode) == 0x000020, "Member 'FAccelByteModelsLocalizedPolicyVersionObject::LocaleCode' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsLocalizedPolicyVersionObject, ContentType) == 0x000030, "Member 'FAccelByteModelsLocalizedPolicyVersionObject::ContentType' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsLocalizedPolicyVersionObject, AttachmentLocation) == 0x000040, "Member 'FAccelByteModelsLocalizedPolicyVersionObject::AttachmentLocation' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsLocalizedPolicyVersionObject, AttachmentVersionIdentifier) == 0x000050, "Member 'FAccelByteModelsLocalizedPolicyVersionObject::AttachmentVersionIdentifier' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsLocalizedPolicyVersionObject, Description) == 0x000060, "Member 'FAccelByteModelsLocalizedPolicyVersionObject::Description' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsLocalizedPolicyVersionObject, Status) == 0x000070, "Member 'FAccelByteModelsLocalizedPolicyVersionObject::Status' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsLocalizedPolicyVersionObject, PublishedDate) == 0x000080, "Member 'FAccelByteModelsLocalizedPolicyVersionObject::PublishedDate' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsLocalizedPolicyVersionObject, IsDefaultSelection) == 0x000088, "Member 'FAccelByteModelsLocalizedPolicyVersionObject::IsDefaultSelection' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsPolicyVersionWithLocalizedVersionObject
// 0x0070 (0x0070 - 0x0000)
struct FAccelByteModelsPolicyVersionWithLocalizedVersionObject final
{
public:
	class FString                                 ID;                                                // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDateTime                              CreatedAt;                                         // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDateTime                              UpdatedAt;                                         // 0x0018(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 DisplayVersion;                                    // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Description;                                       // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Status;                                            // 0x0040(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDateTime                              PublishedDate;                                     // 0x0050(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FAccelByteModelsLocalizedPolicyVersionObject> LocalizedPolicyVersions;                           // 0x0058(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          IsCommitted;                                       // 0x0068(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsCrucial;                                         // 0x0069(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsInEffect;                                        // 0x006A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_6B[0x5];                                       // 0x006B(0x0005)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAccelByteModelsPolicyVersionWithLocalizedVersionObject) == 0x000008, "Wrong alignment on FAccelByteModelsPolicyVersionWithLocalizedVersionObject");
static_assert(sizeof(FAccelByteModelsPolicyVersionWithLocalizedVersionObject) == 0x000070, "Wrong size on FAccelByteModelsPolicyVersionWithLocalizedVersionObject");
static_assert(offsetof(FAccelByteModelsPolicyVersionWithLocalizedVersionObject, ID) == 0x000000, "Member 'FAccelByteModelsPolicyVersionWithLocalizedVersionObject::ID' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsPolicyVersionWithLocalizedVersionObject, CreatedAt) == 0x000010, "Member 'FAccelByteModelsPolicyVersionWithLocalizedVersionObject::CreatedAt' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsPolicyVersionWithLocalizedVersionObject, UpdatedAt) == 0x000018, "Member 'FAccelByteModelsPolicyVersionWithLocalizedVersionObject::UpdatedAt' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsPolicyVersionWithLocalizedVersionObject, DisplayVersion) == 0x000020, "Member 'FAccelByteModelsPolicyVersionWithLocalizedVersionObject::DisplayVersion' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsPolicyVersionWithLocalizedVersionObject, Description) == 0x000030, "Member 'FAccelByteModelsPolicyVersionWithLocalizedVersionObject::Description' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsPolicyVersionWithLocalizedVersionObject, Status) == 0x000040, "Member 'FAccelByteModelsPolicyVersionWithLocalizedVersionObject::Status' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsPolicyVersionWithLocalizedVersionObject, PublishedDate) == 0x000050, "Member 'FAccelByteModelsPolicyVersionWithLocalizedVersionObject::PublishedDate' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsPolicyVersionWithLocalizedVersionObject, LocalizedPolicyVersions) == 0x000058, "Member 'FAccelByteModelsPolicyVersionWithLocalizedVersionObject::LocalizedPolicyVersions' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsPolicyVersionWithLocalizedVersionObject, IsCommitted) == 0x000068, "Member 'FAccelByteModelsPolicyVersionWithLocalizedVersionObject::IsCommitted' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsPolicyVersionWithLocalizedVersionObject, IsCrucial) == 0x000069, "Member 'FAccelByteModelsPolicyVersionWithLocalizedVersionObject::IsCrucial' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsPolicyVersionWithLocalizedVersionObject, IsInEffect) == 0x00006A, "Member 'FAccelByteModelsPolicyVersionWithLocalizedVersionObject::IsInEffect' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsPublicPolicy
// 0x00C0 (0x00C0 - 0x0000)
struct FAccelByteModelsPublicPolicy final
{
public:
	class FString                                 ID;                                                // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDateTime                              CreatedAt;                                         // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDateTime                              UpdatedAt;                                         // 0x0018(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ReadableId;                                        // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 PolicyName;                                        // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 PolicyType;                                        // 0x0040(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Namespace;                                         // 0x0050(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 CountryCode;                                       // 0x0060(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 CountryGroupCode;                                  // 0x0070(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FString>                         BaseUrls;                                          // 0x0080(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          ShouldNotifyOnUpdate;                              // 0x0090(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_91[0x7];                                       // 0x0091(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FAccelByteModelsPolicyVersionWithLocalizedVersionObject> PolicyVersions;                                    // 0x0098(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	class FString                                 Description;                                       // 0x00A8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsMandatory;                                       // 0x00B8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsDefaultOpted;                                    // 0x00B9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsDefaultSelection;                                // 0x00BA(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_BB[0x5];                                       // 0x00BB(0x0005)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAccelByteModelsPublicPolicy) == 0x000008, "Wrong alignment on FAccelByteModelsPublicPolicy");
static_assert(sizeof(FAccelByteModelsPublicPolicy) == 0x0000C0, "Wrong size on FAccelByteModelsPublicPolicy");
static_assert(offsetof(FAccelByteModelsPublicPolicy, ID) == 0x000000, "Member 'FAccelByteModelsPublicPolicy::ID' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsPublicPolicy, CreatedAt) == 0x000010, "Member 'FAccelByteModelsPublicPolicy::CreatedAt' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsPublicPolicy, UpdatedAt) == 0x000018, "Member 'FAccelByteModelsPublicPolicy::UpdatedAt' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsPublicPolicy, ReadableId) == 0x000020, "Member 'FAccelByteModelsPublicPolicy::ReadableId' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsPublicPolicy, PolicyName) == 0x000030, "Member 'FAccelByteModelsPublicPolicy::PolicyName' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsPublicPolicy, PolicyType) == 0x000040, "Member 'FAccelByteModelsPublicPolicy::PolicyType' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsPublicPolicy, Namespace) == 0x000050, "Member 'FAccelByteModelsPublicPolicy::Namespace' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsPublicPolicy, CountryCode) == 0x000060, "Member 'FAccelByteModelsPublicPolicy::CountryCode' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsPublicPolicy, CountryGroupCode) == 0x000070, "Member 'FAccelByteModelsPublicPolicy::CountryGroupCode' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsPublicPolicy, BaseUrls) == 0x000080, "Member 'FAccelByteModelsPublicPolicy::BaseUrls' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsPublicPolicy, ShouldNotifyOnUpdate) == 0x000090, "Member 'FAccelByteModelsPublicPolicy::ShouldNotifyOnUpdate' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsPublicPolicy, PolicyVersions) == 0x000098, "Member 'FAccelByteModelsPublicPolicy::PolicyVersions' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsPublicPolicy, Description) == 0x0000A8, "Member 'FAccelByteModelsPublicPolicy::Description' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsPublicPolicy, IsMandatory) == 0x0000B8, "Member 'FAccelByteModelsPublicPolicy::IsMandatory' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsPublicPolicy, IsDefaultOpted) == 0x0000B9, "Member 'FAccelByteModelsPublicPolicy::IsDefaultOpted' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsPublicPolicy, IsDefaultSelection) == 0x0000BA, "Member 'FAccelByteModelsPublicPolicy::IsDefaultSelection' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.ArrayModelsPublicPolicyResponse
// 0x0010 (0x0010 - 0x0000)
struct FArrayModelsPublicPolicyResponse final
{
public:
	TArray<struct FAccelByteModelsPublicPolicy>   Content;                                           // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FArrayModelsPublicPolicyResponse) == 0x000008, "Wrong alignment on FArrayModelsPublicPolicyResponse");
static_assert(sizeof(FArrayModelsPublicPolicyResponse) == 0x000010, "Wrong size on FArrayModelsPublicPolicyResponse");
static_assert(offsetof(FArrayModelsPublicPolicyResponse, Content) == 0x000000, "Member 'FArrayModelsPublicPolicyResponse::Content' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsDistributionReceiver
// 0x0070 (0x0070 - 0x0000)
struct FAccelByteModelsDistributionReceiver final
{
public:
	class FString                                 UserId;                                            // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Namespace;                                         // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ExtUserId;                                         // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FAccelByteModelsAttributes             Attributes;                                        // 0x0030(0x0040)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsDistributionReceiver) == 0x000008, "Wrong alignment on FAccelByteModelsDistributionReceiver");
static_assert(sizeof(FAccelByteModelsDistributionReceiver) == 0x000070, "Wrong size on FAccelByteModelsDistributionReceiver");
static_assert(offsetof(FAccelByteModelsDistributionReceiver, UserId) == 0x000000, "Member 'FAccelByteModelsDistributionReceiver::UserId' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsDistributionReceiver, Namespace) == 0x000010, "Member 'FAccelByteModelsDistributionReceiver::Namespace' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsDistributionReceiver, ExtUserId) == 0x000020, "Member 'FAccelByteModelsDistributionReceiver::ExtUserId' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsDistributionReceiver, Attributes) == 0x000030, "Member 'FAccelByteModelsDistributionReceiver::Attributes' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsGetUserGroupInfoResponse
// 0x0040 (0x0040 - 0x0000)
struct FAccelByteModelsGetUserGroupInfoResponse final
{
public:
	class FString                                 GroupID;                                           // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FString>                         MemberRoleId;                                      // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	class FString                                 Status;                                            // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 UserId;                                            // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsGetUserGroupInfoResponse) == 0x000008, "Wrong alignment on FAccelByteModelsGetUserGroupInfoResponse");
static_assert(sizeof(FAccelByteModelsGetUserGroupInfoResponse) == 0x000040, "Wrong size on FAccelByteModelsGetUserGroupInfoResponse");
static_assert(offsetof(FAccelByteModelsGetUserGroupInfoResponse, GroupID) == 0x000000, "Member 'FAccelByteModelsGetUserGroupInfoResponse::GroupID' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsGetUserGroupInfoResponse, MemberRoleId) == 0x000010, "Member 'FAccelByteModelsGetUserGroupInfoResponse::MemberRoleId' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsGetUserGroupInfoResponse, Status) == 0x000020, "Member 'FAccelByteModelsGetUserGroupInfoResponse::Status' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsGetUserGroupInfoResponse, UserId) == 0x000030, "Member 'FAccelByteModelsGetUserGroupInfoResponse::UserId' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.ArrayModelsDistributionReceiver
// 0x0010 (0x0010 - 0x0000)
struct FArrayModelsDistributionReceiver final
{
public:
	TArray<struct FAccelByteModelsDistributionReceiver> Content;                                           // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FArrayModelsDistributionReceiver) == 0x000008, "Wrong alignment on FArrayModelsDistributionReceiver");
static_assert(sizeof(FArrayModelsDistributionReceiver) == 0x000010, "Wrong size on FArrayModelsDistributionReceiver");
static_assert(offsetof(FArrayModelsDistributionReceiver, Content) == 0x000000, "Member 'FArrayModelsDistributionReceiver::Content' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsEntitlementOwnershipDetail
// 0x0050 (0x0050 - 0x0000)
struct FAccelByteModelsEntitlementOwnershipDetail final
{
public:
	class FString                                 AppId;                                             // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 AppType;                                           // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Sku;                                               // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ItemId;                                            // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ItemNamespace;                                     // 0x0040(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsEntitlementOwnershipDetail) == 0x000008, "Wrong alignment on FAccelByteModelsEntitlementOwnershipDetail");
static_assert(sizeof(FAccelByteModelsEntitlementOwnershipDetail) == 0x000050, "Wrong size on FAccelByteModelsEntitlementOwnershipDetail");
static_assert(offsetof(FAccelByteModelsEntitlementOwnershipDetail, AppId) == 0x000000, "Member 'FAccelByteModelsEntitlementOwnershipDetail::AppId' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsEntitlementOwnershipDetail, AppType) == 0x000010, "Member 'FAccelByteModelsEntitlementOwnershipDetail::AppType' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsEntitlementOwnershipDetail, Sku) == 0x000020, "Member 'FAccelByteModelsEntitlementOwnershipDetail::Sku' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsEntitlementOwnershipDetail, ItemId) == 0x000030, "Member 'FAccelByteModelsEntitlementOwnershipDetail::ItemId' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsEntitlementOwnershipDetail, ItemNamespace) == 0x000040, "Member 'FAccelByteModelsEntitlementOwnershipDetail::ItemNamespace' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsEntitlementOwnershipDetails
// 0x0010 (0x0010 - 0x0000)
struct FAccelByteModelsEntitlementOwnershipDetails final
{
public:
	TArray<struct FAccelByteModelsEntitlementOwnershipDetail> Entitlements;                                      // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsEntitlementOwnershipDetails) == 0x000008, "Wrong alignment on FAccelByteModelsEntitlementOwnershipDetails");
static_assert(sizeof(FAccelByteModelsEntitlementOwnershipDetails) == 0x000010, "Wrong size on FAccelByteModelsEntitlementOwnershipDetails");
static_assert(offsetof(FAccelByteModelsEntitlementOwnershipDetails, Entitlements) == 0x000000, "Member 'FAccelByteModelsEntitlementOwnershipDetails::Entitlements' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsItemRegionDataItem
// 0x0058 (0x0058 - 0x0000)
struct FAccelByteModelsItemRegionDataItem final
{
public:
	int32                                         Price;                                             // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DiscountPercentage;                                // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DiscountAmount;                                    // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DiscountedPrice;                                   // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 CurrencyCode;                                      // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAccelByteItemCurrencyType                    CurrencyType;                                      // 0x0020(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CurrencyNamespace;                                 // 0x0028(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDateTime                              PurchaseAt;                                        // 0x0038(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDateTime                              ExpireAt;                                          // 0x0040(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDateTime                              DiscountPurchaseAt;                                // 0x0048(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDateTime                              DiscountExpireAt;                                  // 0x0050(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsItemRegionDataItem) == 0x000008, "Wrong alignment on FAccelByteModelsItemRegionDataItem");
static_assert(sizeof(FAccelByteModelsItemRegionDataItem) == 0x000058, "Wrong size on FAccelByteModelsItemRegionDataItem");
static_assert(offsetof(FAccelByteModelsItemRegionDataItem, Price) == 0x000000, "Member 'FAccelByteModelsItemRegionDataItem::Price' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsItemRegionDataItem, DiscountPercentage) == 0x000004, "Member 'FAccelByteModelsItemRegionDataItem::DiscountPercentage' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsItemRegionDataItem, DiscountAmount) == 0x000008, "Member 'FAccelByteModelsItemRegionDataItem::DiscountAmount' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsItemRegionDataItem, DiscountedPrice) == 0x00000C, "Member 'FAccelByteModelsItemRegionDataItem::DiscountedPrice' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsItemRegionDataItem, CurrencyCode) == 0x000010, "Member 'FAccelByteModelsItemRegionDataItem::CurrencyCode' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsItemRegionDataItem, CurrencyType) == 0x000020, "Member 'FAccelByteModelsItemRegionDataItem::CurrencyType' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsItemRegionDataItem, CurrencyNamespace) == 0x000028, "Member 'FAccelByteModelsItemRegionDataItem::CurrencyNamespace' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsItemRegionDataItem, PurchaseAt) == 0x000038, "Member 'FAccelByteModelsItemRegionDataItem::PurchaseAt' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsItemRegionDataItem, ExpireAt) == 0x000040, "Member 'FAccelByteModelsItemRegionDataItem::ExpireAt' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsItemRegionDataItem, DiscountPurchaseAt) == 0x000048, "Member 'FAccelByteModelsItemRegionDataItem::DiscountPurchaseAt' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsItemRegionDataItem, DiscountExpireAt) == 0x000050, "Member 'FAccelByteModelsItemRegionDataItem::DiscountExpireAt' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsEntitlementItemSnapshot
// 0x0168 (0x0168 - 0x0000)
struct FAccelByteModelsEntitlementItemSnapshot final
{
public:
	class FString                                 ItemId;                                            // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 AppId;                                             // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAccelByteAppType                             AppType;                                           // 0x0020(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 BaseAppId;                                         // 0x0028(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Sku;                                               // 0x0038(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Namespace;                                         // 0x0048(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Name;                                              // 0x0058(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAccelByteEntitlementType                     EntitlementType;                                   // 0x0068(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_69[0x3];                                       // 0x0069(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         UseCount;                                          // 0x006C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Stackable;                                         // 0x0070(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAccelByteItemType                            ItemType;                                          // 0x0071(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_72[0x6];                                       // 0x0072(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ThumbnailUrl;                                      // 0x0078(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 TargetNamespace;                                   // 0x0088(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 TargetCurrencyCode;                                // 0x0098(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 TargetItemId;                                      // 0x00A8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Title;                                             // 0x00B8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FAccelByteModelsItemRegionDataItem     RegionDataItem;                                    // 0x00C8(0x0058)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	TArray<class FString>                         ItemIds;                                           // 0x0120(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         MaxCountPerUser;                                   // 0x0130(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxCount;                                          // 0x0134(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 BoothName;                                         // 0x0138(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Region;                                            // 0x0148(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Language;                                          // 0x0158(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsEntitlementItemSnapshot) == 0x000008, "Wrong alignment on FAccelByteModelsEntitlementItemSnapshot");
static_assert(sizeof(FAccelByteModelsEntitlementItemSnapshot) == 0x000168, "Wrong size on FAccelByteModelsEntitlementItemSnapshot");
static_assert(offsetof(FAccelByteModelsEntitlementItemSnapshot, ItemId) == 0x000000, "Member 'FAccelByteModelsEntitlementItemSnapshot::ItemId' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsEntitlementItemSnapshot, AppId) == 0x000010, "Member 'FAccelByteModelsEntitlementItemSnapshot::AppId' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsEntitlementItemSnapshot, AppType) == 0x000020, "Member 'FAccelByteModelsEntitlementItemSnapshot::AppType' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsEntitlementItemSnapshot, BaseAppId) == 0x000028, "Member 'FAccelByteModelsEntitlementItemSnapshot::BaseAppId' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsEntitlementItemSnapshot, Sku) == 0x000038, "Member 'FAccelByteModelsEntitlementItemSnapshot::Sku' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsEntitlementItemSnapshot, Namespace) == 0x000048, "Member 'FAccelByteModelsEntitlementItemSnapshot::Namespace' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsEntitlementItemSnapshot, Name) == 0x000058, "Member 'FAccelByteModelsEntitlementItemSnapshot::Name' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsEntitlementItemSnapshot, EntitlementType) == 0x000068, "Member 'FAccelByteModelsEntitlementItemSnapshot::EntitlementType' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsEntitlementItemSnapshot, UseCount) == 0x00006C, "Member 'FAccelByteModelsEntitlementItemSnapshot::UseCount' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsEntitlementItemSnapshot, Stackable) == 0x000070, "Member 'FAccelByteModelsEntitlementItemSnapshot::Stackable' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsEntitlementItemSnapshot, ItemType) == 0x000071, "Member 'FAccelByteModelsEntitlementItemSnapshot::ItemType' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsEntitlementItemSnapshot, ThumbnailUrl) == 0x000078, "Member 'FAccelByteModelsEntitlementItemSnapshot::ThumbnailUrl' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsEntitlementItemSnapshot, TargetNamespace) == 0x000088, "Member 'FAccelByteModelsEntitlementItemSnapshot::TargetNamespace' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsEntitlementItemSnapshot, TargetCurrencyCode) == 0x000098, "Member 'FAccelByteModelsEntitlementItemSnapshot::TargetCurrencyCode' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsEntitlementItemSnapshot, TargetItemId) == 0x0000A8, "Member 'FAccelByteModelsEntitlementItemSnapshot::TargetItemId' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsEntitlementItemSnapshot, Title) == 0x0000B8, "Member 'FAccelByteModelsEntitlementItemSnapshot::Title' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsEntitlementItemSnapshot, RegionDataItem) == 0x0000C8, "Member 'FAccelByteModelsEntitlementItemSnapshot::RegionDataItem' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsEntitlementItemSnapshot, ItemIds) == 0x000120, "Member 'FAccelByteModelsEntitlementItemSnapshot::ItemIds' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsEntitlementItemSnapshot, MaxCountPerUser) == 0x000130, "Member 'FAccelByteModelsEntitlementItemSnapshot::MaxCountPerUser' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsEntitlementItemSnapshot, MaxCount) == 0x000134, "Member 'FAccelByteModelsEntitlementItemSnapshot::MaxCount' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsEntitlementItemSnapshot, BoothName) == 0x000138, "Member 'FAccelByteModelsEntitlementItemSnapshot::BoothName' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsEntitlementItemSnapshot, Region) == 0x000148, "Member 'FAccelByteModelsEntitlementItemSnapshot::Region' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsEntitlementItemSnapshot, Language) == 0x000158, "Member 'FAccelByteModelsEntitlementItemSnapshot::Language' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsEntitlementInfo
// 0x0248 (0x0248 - 0x0000)
struct FAccelByteModelsEntitlementInfo final
{
public:
	class FString                                 ID;                                                // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Namespace;                                         // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAccelByteEntitlementClass                    Clazz;                                             // 0x0020(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAccelByteEntitlementType                     Type;                                              // 0x0021(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAccelByteEntitlementStatus                   Status;                                            // 0x0022(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_23[0x5];                                       // 0x0023(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 AppId;                                             // 0x0028(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAccelByteAppType                             AppType;                                           // 0x0038(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Sku;                                               // 0x0040(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 UserId;                                            // 0x0050(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ItemId;                                            // 0x0060(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 GrantedCode;                                       // 0x0070(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ItemNamespace;                                     // 0x0080(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Name;                                              // 0x0090(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         UseCount;                                          // 0x00A0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAccelByteEntitlementSource                   Source;                                            // 0x00A4(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A5[0x3];                                       // 0x00A5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FAccelByteModelsEntitlementItemSnapshot ItemSnapshot;                                      // 0x00A8(0x0168)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	class FString                                 StartDate;                                         // 0x0210(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 EndDate;                                           // 0x0220(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDateTime                              GrantedAt;                                         // 0x0230(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDateTime                              CreatedAt;                                         // 0x0238(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDateTime                              UpdatedAt;                                         // 0x0240(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsEntitlementInfo) == 0x000008, "Wrong alignment on FAccelByteModelsEntitlementInfo");
static_assert(sizeof(FAccelByteModelsEntitlementInfo) == 0x000248, "Wrong size on FAccelByteModelsEntitlementInfo");
static_assert(offsetof(FAccelByteModelsEntitlementInfo, ID) == 0x000000, "Member 'FAccelByteModelsEntitlementInfo::ID' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsEntitlementInfo, Namespace) == 0x000010, "Member 'FAccelByteModelsEntitlementInfo::Namespace' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsEntitlementInfo, Clazz) == 0x000020, "Member 'FAccelByteModelsEntitlementInfo::Clazz' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsEntitlementInfo, Type) == 0x000021, "Member 'FAccelByteModelsEntitlementInfo::Type' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsEntitlementInfo, Status) == 0x000022, "Member 'FAccelByteModelsEntitlementInfo::Status' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsEntitlementInfo, AppId) == 0x000028, "Member 'FAccelByteModelsEntitlementInfo::AppId' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsEntitlementInfo, AppType) == 0x000038, "Member 'FAccelByteModelsEntitlementInfo::AppType' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsEntitlementInfo, Sku) == 0x000040, "Member 'FAccelByteModelsEntitlementInfo::Sku' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsEntitlementInfo, UserId) == 0x000050, "Member 'FAccelByteModelsEntitlementInfo::UserId' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsEntitlementInfo, ItemId) == 0x000060, "Member 'FAccelByteModelsEntitlementInfo::ItemId' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsEntitlementInfo, GrantedCode) == 0x000070, "Member 'FAccelByteModelsEntitlementInfo::GrantedCode' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsEntitlementInfo, ItemNamespace) == 0x000080, "Member 'FAccelByteModelsEntitlementInfo::ItemNamespace' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsEntitlementInfo, Name) == 0x000090, "Member 'FAccelByteModelsEntitlementInfo::Name' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsEntitlementInfo, UseCount) == 0x0000A0, "Member 'FAccelByteModelsEntitlementInfo::UseCount' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsEntitlementInfo, Source) == 0x0000A4, "Member 'FAccelByteModelsEntitlementInfo::Source' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsEntitlementInfo, ItemSnapshot) == 0x0000A8, "Member 'FAccelByteModelsEntitlementInfo::ItemSnapshot' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsEntitlementInfo, StartDate) == 0x000210, "Member 'FAccelByteModelsEntitlementInfo::StartDate' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsEntitlementInfo, EndDate) == 0x000220, "Member 'FAccelByteModelsEntitlementInfo::EndDate' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsEntitlementInfo, GrantedAt) == 0x000230, "Member 'FAccelByteModelsEntitlementInfo::GrantedAt' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsEntitlementInfo, CreatedAt) == 0x000238, "Member 'FAccelByteModelsEntitlementInfo::CreatedAt' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsEntitlementInfo, UpdatedAt) == 0x000240, "Member 'FAccelByteModelsEntitlementInfo::UpdatedAt' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsEntitlementPagingSlicedResult
// 0x0050 (0x0050 - 0x0000)
struct FAccelByteModelsEntitlementPagingSlicedResult final
{
public:
	TArray<struct FAccelByteModelsEntitlementInfo> Data;                                              // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FAccelByteModelsPaging                 Paging;                                            // 0x0010(0x0040)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsEntitlementPagingSlicedResult) == 0x000008, "Wrong alignment on FAccelByteModelsEntitlementPagingSlicedResult");
static_assert(sizeof(FAccelByteModelsEntitlementPagingSlicedResult) == 0x000050, "Wrong size on FAccelByteModelsEntitlementPagingSlicedResult");
static_assert(offsetof(FAccelByteModelsEntitlementPagingSlicedResult, Data) == 0x000000, "Member 'FAccelByteModelsEntitlementPagingSlicedResult::Data' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsEntitlementPagingSlicedResult, Paging) == 0x000010, "Member 'FAccelByteModelsEntitlementPagingSlicedResult::Paging' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsRetrieveUserEligibilitiesResponse
// 0x00A8 (0x00A8 - 0x0000)
struct FAccelByteModelsRetrieveUserEligibilitiesResponse final
{
public:
	class FString                                 ReadableId;                                        // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 PolicyName;                                        // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 PolicyType;                                        // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Namespace;                                         // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 CountryCode;                                       // 0x0040(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 CountryGrupCode;                                   // 0x0050(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FString>                         BaseUrls;                                          // 0x0060(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FAccelByteModelsPolicyVersionWithLocalizedVersionObject> PolicyVersions;                                    // 0x0070(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	class FString                                 Description;                                       // 0x0080(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 PolicyId;                                          // 0x0090(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsMandatory;                                       // 0x00A0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsAccepted;                                        // 0x00A1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A2[0x6];                                       // 0x00A2(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAccelByteModelsRetrieveUserEligibilitiesResponse) == 0x000008, "Wrong alignment on FAccelByteModelsRetrieveUserEligibilitiesResponse");
static_assert(sizeof(FAccelByteModelsRetrieveUserEligibilitiesResponse) == 0x0000A8, "Wrong size on FAccelByteModelsRetrieveUserEligibilitiesResponse");
static_assert(offsetof(FAccelByteModelsRetrieveUserEligibilitiesResponse, ReadableId) == 0x000000, "Member 'FAccelByteModelsRetrieveUserEligibilitiesResponse::ReadableId' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsRetrieveUserEligibilitiesResponse, PolicyName) == 0x000010, "Member 'FAccelByteModelsRetrieveUserEligibilitiesResponse::PolicyName' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsRetrieveUserEligibilitiesResponse, PolicyType) == 0x000020, "Member 'FAccelByteModelsRetrieveUserEligibilitiesResponse::PolicyType' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsRetrieveUserEligibilitiesResponse, Namespace) == 0x000030, "Member 'FAccelByteModelsRetrieveUserEligibilitiesResponse::Namespace' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsRetrieveUserEligibilitiesResponse, CountryCode) == 0x000040, "Member 'FAccelByteModelsRetrieveUserEligibilitiesResponse::CountryCode' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsRetrieveUserEligibilitiesResponse, CountryGrupCode) == 0x000050, "Member 'FAccelByteModelsRetrieveUserEligibilitiesResponse::CountryGrupCode' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsRetrieveUserEligibilitiesResponse, BaseUrls) == 0x000060, "Member 'FAccelByteModelsRetrieveUserEligibilitiesResponse::BaseUrls' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsRetrieveUserEligibilitiesResponse, PolicyVersions) == 0x000070, "Member 'FAccelByteModelsRetrieveUserEligibilitiesResponse::PolicyVersions' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsRetrieveUserEligibilitiesResponse, Description) == 0x000080, "Member 'FAccelByteModelsRetrieveUserEligibilitiesResponse::Description' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsRetrieveUserEligibilitiesResponse, PolicyId) == 0x000090, "Member 'FAccelByteModelsRetrieveUserEligibilitiesResponse::PolicyId' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsRetrieveUserEligibilitiesResponse, IsMandatory) == 0x0000A0, "Member 'FAccelByteModelsRetrieveUserEligibilitiesResponse::IsMandatory' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsRetrieveUserEligibilitiesResponse, IsAccepted) == 0x0000A1, "Member 'FAccelByteModelsRetrieveUserEligibilitiesResponse::IsAccepted' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.ArrayModelsRetrieveUserEligibilitiesResponse
// 0x0010 (0x0010 - 0x0000)
struct FArrayModelsRetrieveUserEligibilitiesResponse final
{
public:
	TArray<struct FAccelByteModelsRetrieveUserEligibilitiesResponse> Content;                                           // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FArrayModelsRetrieveUserEligibilitiesResponse) == 0x000008, "Wrong alignment on FArrayModelsRetrieveUserEligibilitiesResponse");
static_assert(sizeof(FArrayModelsRetrieveUserEligibilitiesResponse) == 0x000010, "Wrong size on FArrayModelsRetrieveUserEligibilitiesResponse");
static_assert(offsetof(FArrayModelsRetrieveUserEligibilitiesResponse, Content) == 0x000000, "Member 'FArrayModelsRetrieveUserEligibilitiesResponse::Content' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsLoadFriendListResponse
// 0x0020 (0x0020 - 0x0000)
struct FAccelByteModelsLoadFriendListResponse final
{
public:
	class FString                                 Code;                                              // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FString>                         FriendsId;                                         // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsLoadFriendListResponse) == 0x000008, "Wrong alignment on FAccelByteModelsLoadFriendListResponse");
static_assert(sizeof(FAccelByteModelsLoadFriendListResponse) == 0x000020, "Wrong size on FAccelByteModelsLoadFriendListResponse");
static_assert(offsetof(FAccelByteModelsLoadFriendListResponse, Code) == 0x000000, "Member 'FAccelByteModelsLoadFriendListResponse::Code' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsLoadFriendListResponse, FriendsId) == 0x000010, "Member 'FAccelByteModelsLoadFriendListResponse::FriendsId' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsBulkStatItemCreate
// 0x0010 (0x0010 - 0x0000)
struct FAccelByteModelsBulkStatItemCreate final
{
public:
	class FString                                 StatCode;                                          // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsBulkStatItemCreate) == 0x000008, "Wrong alignment on FAccelByteModelsBulkStatItemCreate");
static_assert(sizeof(FAccelByteModelsBulkStatItemCreate) == 0x000010, "Wrong size on FAccelByteModelsBulkStatItemCreate");
static_assert(offsetof(FAccelByteModelsBulkStatItemCreate, StatCode) == 0x000000, "Member 'FAccelByteModelsBulkStatItemCreate::StatCode' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsListIncomingFriendsResponse
// 0x0020 (0x0020 - 0x0000)
struct FAccelByteModelsListIncomingFriendsResponse final
{
public:
	class FString                                 Code;                                              // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FString>                         FriendsId;                                         // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsListIncomingFriendsResponse) == 0x000008, "Wrong alignment on FAccelByteModelsListIncomingFriendsResponse");
static_assert(sizeof(FAccelByteModelsListIncomingFriendsResponse) == 0x000020, "Wrong size on FAccelByteModelsListIncomingFriendsResponse");
static_assert(offsetof(FAccelByteModelsListIncomingFriendsResponse, Code) == 0x000000, "Member 'FAccelByteModelsListIncomingFriendsResponse::Code' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsListIncomingFriendsResponse, FriendsId) == 0x000010, "Member 'FAccelByteModelsListIncomingFriendsResponse::FriendsId' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsUGCTagResponse
// 0x0030 (0x0030 - 0x0000)
struct FAccelByteModelsUGCTagResponse final
{
public:
	class FString                                 ID;                                                // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Namespace;                                         // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Tag;                                               // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsUGCTagResponse) == 0x000008, "Wrong alignment on FAccelByteModelsUGCTagResponse");
static_assert(sizeof(FAccelByteModelsUGCTagResponse) == 0x000030, "Wrong size on FAccelByteModelsUGCTagResponse");
static_assert(offsetof(FAccelByteModelsUGCTagResponse, ID) == 0x000000, "Member 'FAccelByteModelsUGCTagResponse::ID' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsUGCTagResponse, Namespace) == 0x000010, "Member 'FAccelByteModelsUGCTagResponse::Namespace' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsUGCTagResponse, Tag) == 0x000020, "Member 'FAccelByteModelsUGCTagResponse::Tag' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsAcceptAgreementResponse
// 0x0001 (0x0001 - 0x0000)
struct FAccelByteModelsAcceptAgreementResponse final
{
public:
	bool                                          Proceed;                                           // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsAcceptAgreementResponse) == 0x000001, "Wrong alignment on FAccelByteModelsAcceptAgreementResponse");
static_assert(sizeof(FAccelByteModelsAcceptAgreementResponse) == 0x000001, "Wrong size on FAccelByteModelsAcceptAgreementResponse");
static_assert(offsetof(FAccelByteModelsAcceptAgreementResponse, Proceed) == 0x000000, "Member 'FAccelByteModelsAcceptAgreementResponse::Proceed' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsBlockPlayerResponse
// 0x0020 (0x0020 - 0x0000)
struct FAccelByteModelsBlockPlayerResponse final
{
public:
	class FString                                 Code;                                              // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 BlockedUserId;                                     // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsBlockPlayerResponse) == 0x000008, "Wrong alignment on FAccelByteModelsBlockPlayerResponse");
static_assert(sizeof(FAccelByteModelsBlockPlayerResponse) == 0x000020, "Wrong size on FAccelByteModelsBlockPlayerResponse");
static_assert(offsetof(FAccelByteModelsBlockPlayerResponse, Code) == 0x000000, "Member 'FAccelByteModelsBlockPlayerResponse::Code' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsBlockPlayerResponse, BlockedUserId) == 0x000010, "Member 'FAccelByteModelsBlockPlayerResponse::BlockedUserId' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsUnblockPlayerResponse
// 0x0020 (0x0020 - 0x0000)
struct FAccelByteModelsUnblockPlayerResponse final
{
public:
	class FString                                 Code;                                              // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 UnblockedUserId;                                   // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsUnblockPlayerResponse) == 0x000008, "Wrong alignment on FAccelByteModelsUnblockPlayerResponse");
static_assert(sizeof(FAccelByteModelsUnblockPlayerResponse) == 0x000020, "Wrong size on FAccelByteModelsUnblockPlayerResponse");
static_assert(offsetof(FAccelByteModelsUnblockPlayerResponse, Code) == 0x000000, "Member 'FAccelByteModelsUnblockPlayerResponse::Code' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsUnblockPlayerResponse, UnblockedUserId) == 0x000010, "Member 'FAccelByteModelsUnblockPlayerResponse::UnblockedUserId' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsUGCTagsPagingResponse
// 0x0050 (0x0050 - 0x0000)
struct FAccelByteModelsUGCTagsPagingResponse final
{
public:
	TArray<struct FAccelByteModelsUGCTagResponse> Data;                                              // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FAccelByteModelsPaging                 Paging;                                            // 0x0010(0x0040)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsUGCTagsPagingResponse) == 0x000008, "Wrong alignment on FAccelByteModelsUGCTagsPagingResponse");
static_assert(sizeof(FAccelByteModelsUGCTagsPagingResponse) == 0x000050, "Wrong size on FAccelByteModelsUGCTagsPagingResponse");
static_assert(offsetof(FAccelByteModelsUGCTagsPagingResponse, Data) == 0x000000, "Member 'FAccelByteModelsUGCTagsPagingResponse::Data' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsUGCTagsPagingResponse, Paging) == 0x000010, "Member 'FAccelByteModelsUGCTagsPagingResponse::Paging' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.BlockedData
// 0x0010 (0x0010 - 0x0000)
struct FBlockedData final
{
public:
	class FString                                 BlockedUserId;                                     // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBlockedData) == 0x000008, "Wrong alignment on FBlockedData");
static_assert(sizeof(FBlockedData) == 0x000010, "Wrong size on FBlockedData");
static_assert(offsetof(FBlockedData, BlockedUserId) == 0x000000, "Member 'FBlockedData::BlockedUserId' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsListBlockedUserResponse
// 0x0010 (0x0010 - 0x0000)
struct FAccelByteModelsListBlockedUserResponse final
{
public:
	TArray<struct FBlockedData>                   Data;                                              // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsListBlockedUserResponse) == 0x000008, "Wrong alignment on FAccelByteModelsListBlockedUserResponse");
static_assert(sizeof(FAccelByteModelsListBlockedUserResponse) == 0x000010, "Wrong size on FAccelByteModelsListBlockedUserResponse");
static_assert(offsetof(FAccelByteModelsListBlockedUserResponse, Data) == 0x000000, "Member 'FAccelByteModelsListBlockedUserResponse::Data' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsGetFriendshipStatusResponse
// 0x0018 (0x0018 - 0x0000)
struct FAccelByteModelsGetFriendshipStatusResponse final
{
public:
	class FString                                 Code;                                              // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERelationshipStatusCode                       FriendshipStatus;                                  // 0x0010(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAccelByteModelsGetFriendshipStatusResponse) == 0x000008, "Wrong alignment on FAccelByteModelsGetFriendshipStatusResponse");
static_assert(sizeof(FAccelByteModelsGetFriendshipStatusResponse) == 0x000018, "Wrong size on FAccelByteModelsGetFriendshipStatusResponse");
static_assert(offsetof(FAccelByteModelsGetFriendshipStatusResponse, Code) == 0x000000, "Member 'FAccelByteModelsGetFriendshipStatusResponse::Code' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsGetFriendshipStatusResponse, FriendshipStatus) == 0x000010, "Member 'FAccelByteModelsGetFriendshipStatusResponse::FriendshipStatus' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsUser
// 0x0030 (0x0030 - 0x0000)
struct FAccelByteModelsUser final
{
public:
	class FString                                 User_id;                                           // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FJsonObjectWrapper                     ExtraAttributes;                                   // 0x0010(0x0020)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsUser) == 0x000008, "Wrong alignment on FAccelByteModelsUser");
static_assert(sizeof(FAccelByteModelsUser) == 0x000030, "Wrong size on FAccelByteModelsUser");
static_assert(offsetof(FAccelByteModelsUser, User_id) == 0x000000, "Member 'FAccelByteModelsUser::User_id' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsUser, ExtraAttributes) == 0x000010, "Member 'FAccelByteModelsUser::ExtraAttributes' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsMatchingParty
// 0x0040 (0x0040 - 0x0000)
struct FAccelByteModelsMatchingParty final
{
public:
	class FString                                 Party_id;                                          // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FAccelByteModelsUser>           Party_members;                                     // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FJsonObjectWrapper                     Party_attributes;                                  // 0x0020(0x0020)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsMatchingParty) == 0x000008, "Wrong alignment on FAccelByteModelsMatchingParty");
static_assert(sizeof(FAccelByteModelsMatchingParty) == 0x000040, "Wrong size on FAccelByteModelsMatchingParty");
static_assert(offsetof(FAccelByteModelsMatchingParty, Party_id) == 0x000000, "Member 'FAccelByteModelsMatchingParty::Party_id' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsMatchingParty, Party_members) == 0x000010, "Member 'FAccelByteModelsMatchingParty::Party_members' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsMatchingParty, Party_attributes) == 0x000020, "Member 'FAccelByteModelsMatchingParty::Party_attributes' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsMatchingAlly
// 0x0010 (0x0010 - 0x0000)
struct FAccelByteModelsMatchingAlly final
{
public:
	TArray<struct FAccelByteModelsMatchingParty>  Matching_parties;                                  // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsMatchingAlly) == 0x000008, "Wrong alignment on FAccelByteModelsMatchingAlly");
static_assert(sizeof(FAccelByteModelsMatchingAlly) == 0x000010, "Wrong size on FAccelByteModelsMatchingAlly");
static_assert(offsetof(FAccelByteModelsMatchingAlly, Matching_parties) == 0x000000, "Member 'FAccelByteModelsMatchingAlly::Matching_parties' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsMatchRequest
// 0x0040 (0x0040 - 0x0000)
struct FAccelByteModelsMatchRequest final
{
public:
	class FString                                 Session_id;                                        // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Namespace;                                         // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Game_mode;                                         // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FAccelByteModelsMatchingAlly>   Matching_allies;                                   // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsMatchRequest) == 0x000008, "Wrong alignment on FAccelByteModelsMatchRequest");
static_assert(sizeof(FAccelByteModelsMatchRequest) == 0x000040, "Wrong size on FAccelByteModelsMatchRequest");
static_assert(offsetof(FAccelByteModelsMatchRequest, Session_id) == 0x000000, "Member 'FAccelByteModelsMatchRequest::Session_id' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsMatchRequest, Namespace) == 0x000010, "Member 'FAccelByteModelsMatchRequest::Namespace' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsMatchRequest, Game_mode) == 0x000020, "Member 'FAccelByteModelsMatchRequest::Game_mode' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsMatchRequest, Matching_allies) == 0x000030, "Member 'FAccelByteModelsMatchRequest::Matching_allies' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsAcceptFriendsResponse
// 0x0010 (0x0010 - 0x0000)
struct FAccelByteModelsAcceptFriendsResponse final
{
public:
	class FString                                 Code;                                              // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsAcceptFriendsResponse) == 0x000008, "Wrong alignment on FAccelByteModelsAcceptFriendsResponse");
static_assert(sizeof(FAccelByteModelsAcceptFriendsResponse) == 0x000010, "Wrong size on FAccelByteModelsAcceptFriendsResponse");
static_assert(offsetof(FAccelByteModelsAcceptFriendsResponse, Code) == 0x000000, "Member 'FAccelByteModelsAcceptFriendsResponse::Code' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.BlockerData
// 0x0010 (0x0010 - 0x0000)
struct FBlockerData final
{
public:
	class FString                                 UserId;                                            // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBlockerData) == 0x000008, "Wrong alignment on FBlockerData");
static_assert(sizeof(FBlockerData) == 0x000010, "Wrong size on FBlockerData");
static_assert(offsetof(FBlockerData, UserId) == 0x000000, "Member 'FBlockerData::UserId' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsListBlockerResponse
// 0x0010 (0x0010 - 0x0000)
struct FAccelByteModelsListBlockerResponse final
{
public:
	TArray<struct FBlockerData>                   Data;                                              // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsListBlockerResponse) == 0x000008, "Wrong alignment on FAccelByteModelsListBlockerResponse");
static_assert(sizeof(FAccelByteModelsListBlockerResponse) == 0x000010, "Wrong size on FAccelByteModelsListBlockerResponse");
static_assert(offsetof(FAccelByteModelsListBlockerResponse, Data) == 0x000000, "Member 'FAccelByteModelsListBlockerResponse::Data' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsBlockPlayerNotif
// 0x0020 (0x0020 - 0x0000)
struct FAccelByteModelsBlockPlayerNotif final
{
public:
	class FString                                 UserId;                                            // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 BlockedUserId;                                     // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsBlockPlayerNotif) == 0x000008, "Wrong alignment on FAccelByteModelsBlockPlayerNotif");
static_assert(sizeof(FAccelByteModelsBlockPlayerNotif) == 0x000020, "Wrong size on FAccelByteModelsBlockPlayerNotif");
static_assert(offsetof(FAccelByteModelsBlockPlayerNotif, UserId) == 0x000000, "Member 'FAccelByteModelsBlockPlayerNotif::UserId' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsBlockPlayerNotif, BlockedUserId) == 0x000010, "Member 'FAccelByteModelsBlockPlayerNotif::BlockedUserId' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsUnblockPlayerNotif
// 0x0020 (0x0020 - 0x0000)
struct FAccelByteModelsUnblockPlayerNotif final
{
public:
	class FString                                 UserId;                                            // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 UnblockedUserId;                                   // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsUnblockPlayerNotif) == 0x000008, "Wrong alignment on FAccelByteModelsUnblockPlayerNotif");
static_assert(sizeof(FAccelByteModelsUnblockPlayerNotif) == 0x000020, "Wrong size on FAccelByteModelsUnblockPlayerNotif");
static_assert(offsetof(FAccelByteModelsUnblockPlayerNotif, UserId) == 0x000000, "Member 'FAccelByteModelsUnblockPlayerNotif::UserId' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsUnblockPlayerNotif, UnblockedUserId) == 0x000010, "Member 'FAccelByteModelsUnblockPlayerNotif::UnblockedUserId' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsAcceptFriendsNotif
// 0x0010 (0x0010 - 0x0000)
struct FAccelByteModelsAcceptFriendsNotif final
{
public:
	class FString                                 FriendId;                                          // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsAcceptFriendsNotif) == 0x000008, "Wrong alignment on FAccelByteModelsAcceptFriendsNotif");
static_assert(sizeof(FAccelByteModelsAcceptFriendsNotif) == 0x000010, "Wrong size on FAccelByteModelsAcceptFriendsNotif");
static_assert(offsetof(FAccelByteModelsAcceptFriendsNotif, FriendId) == 0x000000, "Member 'FAccelByteModelsAcceptFriendsNotif::FriendId' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsCategoryInfo
// 0x0058 (0x0058 - 0x0000)
struct FAccelByteModelsCategoryInfo final
{
public:
	class FString                                 Namespace;                                         // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ParentCategoryPath;                                // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 CategoryPath;                                      // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDateTime                              CreatedAt;                                         // 0x0030(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDateTime                              UpdatedAt;                                         // 0x0038(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 DisplayName;                                       // 0x0040(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Root;                                              // 0x0050(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_51[0x7];                                       // 0x0051(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAccelByteModelsCategoryInfo) == 0x000008, "Wrong alignment on FAccelByteModelsCategoryInfo");
static_assert(sizeof(FAccelByteModelsCategoryInfo) == 0x000058, "Wrong size on FAccelByteModelsCategoryInfo");
static_assert(offsetof(FAccelByteModelsCategoryInfo, Namespace) == 0x000000, "Member 'FAccelByteModelsCategoryInfo::Namespace' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsCategoryInfo, ParentCategoryPath) == 0x000010, "Member 'FAccelByteModelsCategoryInfo::ParentCategoryPath' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsCategoryInfo, CategoryPath) == 0x000020, "Member 'FAccelByteModelsCategoryInfo::CategoryPath' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsCategoryInfo, CreatedAt) == 0x000030, "Member 'FAccelByteModelsCategoryInfo::CreatedAt' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsCategoryInfo, UpdatedAt) == 0x000038, "Member 'FAccelByteModelsCategoryInfo::UpdatedAt' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsCategoryInfo, DisplayName) == 0x000040, "Member 'FAccelByteModelsCategoryInfo::DisplayName' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsCategoryInfo, Root) == 0x000050, "Member 'FAccelByteModelsCategoryInfo::Root' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.ArrayModelsCategoryInfoResponse
// 0x0010 (0x0010 - 0x0000)
struct FArrayModelsCategoryInfoResponse final
{
public:
	TArray<struct FAccelByteModelsCategoryInfo>   Content;                                           // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FArrayModelsCategoryInfoResponse) == 0x000008, "Wrong alignment on FArrayModelsCategoryInfoResponse");
static_assert(sizeof(FArrayModelsCategoryInfoResponse) == 0x000010, "Wrong size on FArrayModelsCategoryInfoResponse");
static_assert(offsetof(FArrayModelsCategoryInfoResponse, Content) == 0x000000, "Member 'FArrayModelsCategoryInfoResponse::Content' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsItemImage
// 0x0048 (0x0048 - 0x0000)
struct FAccelByteModelsItemImage final
{
public:
	class FString                                 As;                                                // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Caption;                                           // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Height;                                            // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Width;                                             // 0x0024(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ImageUrl;                                          // 0x0028(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 SmallImageUrl;                                     // 0x0038(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsItemImage) == 0x000008, "Wrong alignment on FAccelByteModelsItemImage");
static_assert(sizeof(FAccelByteModelsItemImage) == 0x000048, "Wrong size on FAccelByteModelsItemImage");
static_assert(offsetof(FAccelByteModelsItemImage, As) == 0x000000, "Member 'FAccelByteModelsItemImage::As' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsItemImage, Caption) == 0x000010, "Member 'FAccelByteModelsItemImage::Caption' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsItemImage, Height) == 0x000020, "Member 'FAccelByteModelsItemImage::Height' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsItemImage, Width) == 0x000024, "Member 'FAccelByteModelsItemImage::Width' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsItemImage, ImageUrl) == 0x000028, "Member 'FAccelByteModelsItemImage::ImageUrl' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsItemImage, SmallImageUrl) == 0x000038, "Member 'FAccelByteModelsItemImage::SmallImageUrl' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsItemInfo
// 0x0250 (0x0250 - 0x0000)
struct FAccelByteModelsItemInfo final
{
public:
	class FString                                 Title;                                             // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Description;                                       // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 LongDescription;                                   // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ItemId;                                            // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 AppId;                                             // 0x0040(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 AppType;                                           // 0x0050(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 BaseAppId;                                         // 0x0060(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Sku;                                               // 0x0070(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Namespace;                                         // 0x0080(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Name;                                              // 0x0090(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAccelByteEntitlementType                     EntitlementType;                                   // 0x00A0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A1[0x3];                                       // 0x00A1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         UseCount;                                          // 0x00A4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Stackable;                                         // 0x00A8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A9[0x7];                                       // 0x00A9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CategoryPath;                                      // 0x00B0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAccelByteItemStatus                          Status;                                            // 0x00C0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAccelByteItemType                            ItemType;                                          // 0x00C1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C2[0x6];                                       // 0x00C2(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 TargetNamespace;                                   // 0x00C8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 TargetCurrencyCode;                                // 0x00D8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 TargetItemId;                                      // 0x00E8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FAccelByteModelsItemImage>      Images;                                            // 0x00F8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	class FString                                 ThumbnailUrl;                                      // 0x0108(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FAccelByteModelsItemRegionDataItem> RegionData;                                        // 0x0118(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class FString>                         ItemIds;                                           // 0x0128(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class FString>                         Tags;                                              // 0x0138(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class FString>                         Features;                                          // 0x0148(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         MaxCountPerUser;                                   // 0x0158(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxCount;                                          // 0x015C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Clazz;                                             // 0x0160(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 BoothName;                                         // 0x0170(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DisplayOrder;                                      // 0x0180(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_184[0x4];                                      // 0x0184(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FJsonObjectWrapper                     Ext;                                               // 0x0188(0x0020)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	class FString                                 Region;                                            // 0x01A8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Language;                                          // 0x01B8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDateTime                              CreatedAt;                                         // 0x01C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDateTime                              UpdatedAt;                                         // 0x01D0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FJsonObjectWrapper                     LocalExt;                                          // 0x01D8(0x0020)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	TMap<class FString, int32>                    ItemQty;                                           // 0x01F8(0x0050)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	bool                                          Purchasable;                                       // 0x0248(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_249[0x7];                                      // 0x0249(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAccelByteModelsItemInfo) == 0x000008, "Wrong alignment on FAccelByteModelsItemInfo");
static_assert(sizeof(FAccelByteModelsItemInfo) == 0x000250, "Wrong size on FAccelByteModelsItemInfo");
static_assert(offsetof(FAccelByteModelsItemInfo, Title) == 0x000000, "Member 'FAccelByteModelsItemInfo::Title' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsItemInfo, Description) == 0x000010, "Member 'FAccelByteModelsItemInfo::Description' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsItemInfo, LongDescription) == 0x000020, "Member 'FAccelByteModelsItemInfo::LongDescription' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsItemInfo, ItemId) == 0x000030, "Member 'FAccelByteModelsItemInfo::ItemId' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsItemInfo, AppId) == 0x000040, "Member 'FAccelByteModelsItemInfo::AppId' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsItemInfo, AppType) == 0x000050, "Member 'FAccelByteModelsItemInfo::AppType' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsItemInfo, BaseAppId) == 0x000060, "Member 'FAccelByteModelsItemInfo::BaseAppId' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsItemInfo, Sku) == 0x000070, "Member 'FAccelByteModelsItemInfo::Sku' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsItemInfo, Namespace) == 0x000080, "Member 'FAccelByteModelsItemInfo::Namespace' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsItemInfo, Name) == 0x000090, "Member 'FAccelByteModelsItemInfo::Name' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsItemInfo, EntitlementType) == 0x0000A0, "Member 'FAccelByteModelsItemInfo::EntitlementType' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsItemInfo, UseCount) == 0x0000A4, "Member 'FAccelByteModelsItemInfo::UseCount' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsItemInfo, Stackable) == 0x0000A8, "Member 'FAccelByteModelsItemInfo::Stackable' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsItemInfo, CategoryPath) == 0x0000B0, "Member 'FAccelByteModelsItemInfo::CategoryPath' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsItemInfo, Status) == 0x0000C0, "Member 'FAccelByteModelsItemInfo::Status' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsItemInfo, ItemType) == 0x0000C1, "Member 'FAccelByteModelsItemInfo::ItemType' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsItemInfo, TargetNamespace) == 0x0000C8, "Member 'FAccelByteModelsItemInfo::TargetNamespace' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsItemInfo, TargetCurrencyCode) == 0x0000D8, "Member 'FAccelByteModelsItemInfo::TargetCurrencyCode' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsItemInfo, TargetItemId) == 0x0000E8, "Member 'FAccelByteModelsItemInfo::TargetItemId' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsItemInfo, Images) == 0x0000F8, "Member 'FAccelByteModelsItemInfo::Images' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsItemInfo, ThumbnailUrl) == 0x000108, "Member 'FAccelByteModelsItemInfo::ThumbnailUrl' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsItemInfo, RegionData) == 0x000118, "Member 'FAccelByteModelsItemInfo::RegionData' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsItemInfo, ItemIds) == 0x000128, "Member 'FAccelByteModelsItemInfo::ItemIds' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsItemInfo, Tags) == 0x000138, "Member 'FAccelByteModelsItemInfo::Tags' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsItemInfo, Features) == 0x000148, "Member 'FAccelByteModelsItemInfo::Features' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsItemInfo, MaxCountPerUser) == 0x000158, "Member 'FAccelByteModelsItemInfo::MaxCountPerUser' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsItemInfo, MaxCount) == 0x00015C, "Member 'FAccelByteModelsItemInfo::MaxCount' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsItemInfo, Clazz) == 0x000160, "Member 'FAccelByteModelsItemInfo::Clazz' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsItemInfo, BoothName) == 0x000170, "Member 'FAccelByteModelsItemInfo::BoothName' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsItemInfo, DisplayOrder) == 0x000180, "Member 'FAccelByteModelsItemInfo::DisplayOrder' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsItemInfo, Ext) == 0x000188, "Member 'FAccelByteModelsItemInfo::Ext' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsItemInfo, Region) == 0x0001A8, "Member 'FAccelByteModelsItemInfo::Region' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsItemInfo, Language) == 0x0001B8, "Member 'FAccelByteModelsItemInfo::Language' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsItemInfo, CreatedAt) == 0x0001C8, "Member 'FAccelByteModelsItemInfo::CreatedAt' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsItemInfo, UpdatedAt) == 0x0001D0, "Member 'FAccelByteModelsItemInfo::UpdatedAt' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsItemInfo, LocalExt) == 0x0001D8, "Member 'FAccelByteModelsItemInfo::LocalExt' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsItemInfo, ItemQty) == 0x0001F8, "Member 'FAccelByteModelsItemInfo::ItemQty' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsItemInfo, Purchasable) == 0x000248, "Member 'FAccelByteModelsItemInfo::Purchasable' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsPopulatedItemInfo
// 0x0258 (0x0258 - 0x0000)
struct FAccelByteModelsPopulatedItemInfo final
{
public:
	class FString                                 Title;                                             // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Description;                                       // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 LongDescription;                                   // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ItemId;                                            // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 AppId;                                             // 0x0040(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 AppType;                                           // 0x0050(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 BaseAppId;                                         // 0x0060(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Sku;                                               // 0x0070(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Namespace;                                         // 0x0080(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Name;                                              // 0x0090(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAccelByteEntitlementType                     EntitlementType;                                   // 0x00A0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A1[0x3];                                       // 0x00A1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         UseCount;                                          // 0x00A4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Stackable;                                         // 0x00A8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A9[0x7];                                       // 0x00A9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CategoryPath;                                      // 0x00B0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAccelByteItemStatus                          Status;                                            // 0x00C0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAccelByteItemType                            ItemType;                                          // 0x00C1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C2[0x6];                                       // 0x00C2(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 TargetNamespace;                                   // 0x00C8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 TargetCurrencyCode;                                // 0x00D8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 TargetItemId;                                      // 0x00E8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FAccelByteModelsItemImage>      Images;                                            // 0x00F8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	class FString                                 ThumbnailUrl;                                      // 0x0108(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FAccelByteModelsItemRegionDataItem> RegionData;                                        // 0x0118(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class FString>                         ItemIds;                                           // 0x0128(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class FString>                         Tags;                                              // 0x0138(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class FString>                         Features;                                          // 0x0148(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         MaxCountPerUser;                                   // 0x0158(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxCount;                                          // 0x015C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Clazz;                                             // 0x0160(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 BoothName;                                         // 0x0170(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DisplayOrder;                                      // 0x0180(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_184[0x4];                                      // 0x0184(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FJsonObjectWrapper                     Ext;                                               // 0x0188(0x0020)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	class FString                                 Region;                                            // 0x01A8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Language;                                          // 0x01B8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDateTime                              CreatedAt;                                         // 0x01C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDateTime                              UpdatedAt;                                         // 0x01D0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FAccelByteModelsItemInfo>       Items;                                             // 0x01D8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FJsonObjectWrapper                     LocalExt;                                          // 0x01E8(0x0020)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	TMap<class FString, int32>                    ItemQty;                                           // 0x0208(0x0050)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsPopulatedItemInfo) == 0x000008, "Wrong alignment on FAccelByteModelsPopulatedItemInfo");
static_assert(sizeof(FAccelByteModelsPopulatedItemInfo) == 0x000258, "Wrong size on FAccelByteModelsPopulatedItemInfo");
static_assert(offsetof(FAccelByteModelsPopulatedItemInfo, Title) == 0x000000, "Member 'FAccelByteModelsPopulatedItemInfo::Title' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsPopulatedItemInfo, Description) == 0x000010, "Member 'FAccelByteModelsPopulatedItemInfo::Description' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsPopulatedItemInfo, LongDescription) == 0x000020, "Member 'FAccelByteModelsPopulatedItemInfo::LongDescription' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsPopulatedItemInfo, ItemId) == 0x000030, "Member 'FAccelByteModelsPopulatedItemInfo::ItemId' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsPopulatedItemInfo, AppId) == 0x000040, "Member 'FAccelByteModelsPopulatedItemInfo::AppId' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsPopulatedItemInfo, AppType) == 0x000050, "Member 'FAccelByteModelsPopulatedItemInfo::AppType' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsPopulatedItemInfo, BaseAppId) == 0x000060, "Member 'FAccelByteModelsPopulatedItemInfo::BaseAppId' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsPopulatedItemInfo, Sku) == 0x000070, "Member 'FAccelByteModelsPopulatedItemInfo::Sku' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsPopulatedItemInfo, Namespace) == 0x000080, "Member 'FAccelByteModelsPopulatedItemInfo::Namespace' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsPopulatedItemInfo, Name) == 0x000090, "Member 'FAccelByteModelsPopulatedItemInfo::Name' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsPopulatedItemInfo, EntitlementType) == 0x0000A0, "Member 'FAccelByteModelsPopulatedItemInfo::EntitlementType' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsPopulatedItemInfo, UseCount) == 0x0000A4, "Member 'FAccelByteModelsPopulatedItemInfo::UseCount' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsPopulatedItemInfo, Stackable) == 0x0000A8, "Member 'FAccelByteModelsPopulatedItemInfo::Stackable' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsPopulatedItemInfo, CategoryPath) == 0x0000B0, "Member 'FAccelByteModelsPopulatedItemInfo::CategoryPath' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsPopulatedItemInfo, Status) == 0x0000C0, "Member 'FAccelByteModelsPopulatedItemInfo::Status' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsPopulatedItemInfo, ItemType) == 0x0000C1, "Member 'FAccelByteModelsPopulatedItemInfo::ItemType' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsPopulatedItemInfo, TargetNamespace) == 0x0000C8, "Member 'FAccelByteModelsPopulatedItemInfo::TargetNamespace' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsPopulatedItemInfo, TargetCurrencyCode) == 0x0000D8, "Member 'FAccelByteModelsPopulatedItemInfo::TargetCurrencyCode' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsPopulatedItemInfo, TargetItemId) == 0x0000E8, "Member 'FAccelByteModelsPopulatedItemInfo::TargetItemId' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsPopulatedItemInfo, Images) == 0x0000F8, "Member 'FAccelByteModelsPopulatedItemInfo::Images' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsPopulatedItemInfo, ThumbnailUrl) == 0x000108, "Member 'FAccelByteModelsPopulatedItemInfo::ThumbnailUrl' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsPopulatedItemInfo, RegionData) == 0x000118, "Member 'FAccelByteModelsPopulatedItemInfo::RegionData' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsPopulatedItemInfo, ItemIds) == 0x000128, "Member 'FAccelByteModelsPopulatedItemInfo::ItemIds' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsPopulatedItemInfo, Tags) == 0x000138, "Member 'FAccelByteModelsPopulatedItemInfo::Tags' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsPopulatedItemInfo, Features) == 0x000148, "Member 'FAccelByteModelsPopulatedItemInfo::Features' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsPopulatedItemInfo, MaxCountPerUser) == 0x000158, "Member 'FAccelByteModelsPopulatedItemInfo::MaxCountPerUser' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsPopulatedItemInfo, MaxCount) == 0x00015C, "Member 'FAccelByteModelsPopulatedItemInfo::MaxCount' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsPopulatedItemInfo, Clazz) == 0x000160, "Member 'FAccelByteModelsPopulatedItemInfo::Clazz' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsPopulatedItemInfo, BoothName) == 0x000170, "Member 'FAccelByteModelsPopulatedItemInfo::BoothName' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsPopulatedItemInfo, DisplayOrder) == 0x000180, "Member 'FAccelByteModelsPopulatedItemInfo::DisplayOrder' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsPopulatedItemInfo, Ext) == 0x000188, "Member 'FAccelByteModelsPopulatedItemInfo::Ext' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsPopulatedItemInfo, Region) == 0x0001A8, "Member 'FAccelByteModelsPopulatedItemInfo::Region' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsPopulatedItemInfo, Language) == 0x0001B8, "Member 'FAccelByteModelsPopulatedItemInfo::Language' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsPopulatedItemInfo, CreatedAt) == 0x0001C8, "Member 'FAccelByteModelsPopulatedItemInfo::CreatedAt' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsPopulatedItemInfo, UpdatedAt) == 0x0001D0, "Member 'FAccelByteModelsPopulatedItemInfo::UpdatedAt' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsPopulatedItemInfo, Items) == 0x0001D8, "Member 'FAccelByteModelsPopulatedItemInfo::Items' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsPopulatedItemInfo, LocalExt) == 0x0001E8, "Member 'FAccelByteModelsPopulatedItemInfo::LocalExt' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsPopulatedItemInfo, ItemQty) == 0x000208, "Member 'FAccelByteModelsPopulatedItemInfo::ItemQty' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsMatchingAllies
// 0x0010 (0x0010 - 0x0000)
struct FAccelByteModelsMatchingAllies final
{
public:
	TArray<struct FAccelByteModelsMatchingAlly>   Data;                                              // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsMatchingAllies) == 0x000008, "Wrong alignment on FAccelByteModelsMatchingAllies");
static_assert(sizeof(FAccelByteModelsMatchingAllies) == 0x000010, "Wrong size on FAccelByteModelsMatchingAllies");
static_assert(offsetof(FAccelByteModelsMatchingAllies, Data) == 0x000000, "Member 'FAccelByteModelsMatchingAllies::Data' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsMatchmakingNotice
// 0x0060 (0x0060 - 0x0000)
struct FAccelByteModelsMatchmakingNotice final
{
public:
	class FString                                 MatchID;                                           // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAccelByteMatchmakingStatus                   Status;                                            // 0x0010(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 GameMode;                                          // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Deployment;                                        // 0x0028(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ClientVersion;                                     // 0x0038(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Joinable;                                          // 0x0048(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_49[0x7];                                       // 0x0049(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FAccelByteModelsMatchingAllies         MatchingAllies;                                    // 0x0050(0x0010)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsMatchmakingNotice) == 0x000008, "Wrong alignment on FAccelByteModelsMatchmakingNotice");
static_assert(sizeof(FAccelByteModelsMatchmakingNotice) == 0x000060, "Wrong size on FAccelByteModelsMatchmakingNotice");
static_assert(offsetof(FAccelByteModelsMatchmakingNotice, MatchID) == 0x000000, "Member 'FAccelByteModelsMatchmakingNotice::MatchID' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsMatchmakingNotice, Status) == 0x000010, "Member 'FAccelByteModelsMatchmakingNotice::Status' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsMatchmakingNotice, GameMode) == 0x000018, "Member 'FAccelByteModelsMatchmakingNotice::GameMode' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsMatchmakingNotice, Deployment) == 0x000028, "Member 'FAccelByteModelsMatchmakingNotice::Deployment' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsMatchmakingNotice, ClientVersion) == 0x000038, "Member 'FAccelByteModelsMatchmakingNotice::ClientVersion' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsMatchmakingNotice, Joinable) == 0x000048, "Member 'FAccelByteModelsMatchmakingNotice::Joinable' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsMatchmakingNotice, MatchingAllies) == 0x000050, "Member 'FAccelByteModelsMatchmakingNotice::MatchingAllies' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AcceptedPolicies
// 0x0038 (0x0038 - 0x0000)
struct FAcceptedPolicies final
{
public:
	bool                                          IsAccepted;                                        // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 LocalizedPolicyVersionId;                          // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 PolicyVersionId;                                   // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 PolicyId;                                          // 0x0028(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAcceptedPolicies) == 0x000008, "Wrong alignment on FAcceptedPolicies");
static_assert(sizeof(FAcceptedPolicies) == 0x000038, "Wrong size on FAcceptedPolicies");
static_assert(offsetof(FAcceptedPolicies, IsAccepted) == 0x000000, "Member 'FAcceptedPolicies::IsAccepted' has a wrong offset!");
static_assert(offsetof(FAcceptedPolicies, LocalizedPolicyVersionId) == 0x000008, "Member 'FAcceptedPolicies::LocalizedPolicyVersionId' has a wrong offset!");
static_assert(offsetof(FAcceptedPolicies, PolicyVersionId) == 0x000018, "Member 'FAcceptedPolicies::PolicyVersionId' has a wrong offset!");
static_assert(offsetof(FAcceptedPolicies, PolicyId) == 0x000028, "Member 'FAcceptedPolicies::PolicyId' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.RegisterRequestv3
// 0x0080 (0x0080 - 0x0000)
struct FRegisterRequestv3 final
{
public:
	TArray<struct FAcceptedPolicies>              AcceptedPolicies;                                  // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	class FString                                 AuthType;                                          // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 DisplayName;                                       // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 EmailAddress;                                      // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Username;                                          // 0x0040(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Password;                                          // 0x0050(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Country;                                           // 0x0060(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 DateOfBirth;                                       // 0x0070(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRegisterRequestv3) == 0x000008, "Wrong alignment on FRegisterRequestv3");
static_assert(sizeof(FRegisterRequestv3) == 0x000080, "Wrong size on FRegisterRequestv3");
static_assert(offsetof(FRegisterRequestv3, AcceptedPolicies) == 0x000000, "Member 'FRegisterRequestv3::AcceptedPolicies' has a wrong offset!");
static_assert(offsetof(FRegisterRequestv3, AuthType) == 0x000010, "Member 'FRegisterRequestv3::AuthType' has a wrong offset!");
static_assert(offsetof(FRegisterRequestv3, DisplayName) == 0x000020, "Member 'FRegisterRequestv3::DisplayName' has a wrong offset!");
static_assert(offsetof(FRegisterRequestv3, EmailAddress) == 0x000030, "Member 'FRegisterRequestv3::EmailAddress' has a wrong offset!");
static_assert(offsetof(FRegisterRequestv3, Username) == 0x000040, "Member 'FRegisterRequestv3::Username' has a wrong offset!");
static_assert(offsetof(FRegisterRequestv3, Password) == 0x000050, "Member 'FRegisterRequestv3::Password' has a wrong offset!");
static_assert(offsetof(FRegisterRequestv3, Country) == 0x000060, "Member 'FRegisterRequestv3::Country' has a wrong offset!");
static_assert(offsetof(FRegisterRequestv3, DateOfBirth) == 0x000070, "Member 'FRegisterRequestv3::DateOfBirth' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsRuleInformation
// 0x0018 (0x0018 - 0x0000)
struct FAccelByteModelsRuleInformation final
{
public:
	class FString                                 RuleAttribute;                                     // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAccelByteRuleCriteria                        RuleCriteria;                                      // 0x0010(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         RuleValue;                                         // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsRuleInformation) == 0x000008, "Wrong alignment on FAccelByteModelsRuleInformation");
static_assert(sizeof(FAccelByteModelsRuleInformation) == 0x000018, "Wrong size on FAccelByteModelsRuleInformation");
static_assert(offsetof(FAccelByteModelsRuleInformation, RuleAttribute) == 0x000000, "Member 'FAccelByteModelsRuleInformation::RuleAttribute' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsRuleInformation, RuleCriteria) == 0x000010, "Member 'FAccelByteModelsRuleInformation::RuleCriteria' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsRuleInformation, RuleValue) == 0x000014, "Member 'FAccelByteModelsRuleInformation::RuleValue' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsRules
// 0x0018 (0x0018 - 0x0000)
struct FAccelByteModelsRules final
{
public:
	EAccelByteAllowedAction                       AllowedAction;                                     // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FAccelByteModelsRuleInformation> RuleDetail;                                        // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsRules) == 0x000008, "Wrong alignment on FAccelByteModelsRules");
static_assert(sizeof(FAccelByteModelsRules) == 0x000018, "Wrong size on FAccelByteModelsRules");
static_assert(offsetof(FAccelByteModelsRules, AllowedAction) == 0x000000, "Member 'FAccelByteModelsRules::AllowedAction' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsRules, RuleDetail) == 0x000008, "Member 'FAccelByteModelsRules::RuleDetail' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsGroupRules
// 0x0030 (0x0030 - 0x0000)
struct FAccelByteModelsGroupRules final
{
public:
	struct FJsonObjectWrapper                     GroupCustomRule;                                   // 0x0000(0x0020)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	TArray<struct FAccelByteModelsRules>          GroupPredefinedRules;                              // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsGroupRules) == 0x000008, "Wrong alignment on FAccelByteModelsGroupRules");
static_assert(sizeof(FAccelByteModelsGroupRules) == 0x000030, "Wrong size on FAccelByteModelsGroupRules");
static_assert(offsetof(FAccelByteModelsGroupRules, GroupCustomRule) == 0x000000, "Member 'FAccelByteModelsGroupRules::GroupCustomRule' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsGroupRules, GroupPredefinedRules) == 0x000020, "Member 'FAccelByteModelsGroupRules::GroupPredefinedRules' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsGroupUpdatable
// 0x0068 (0x0068 - 0x0000)
struct FAccelByteModelsGroupUpdatable
{
public:
	class FString                                 GroupName;                                         // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 GroupRegion;                                       // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAccelByteGroupType                           GroupType;                                         // 0x0020(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FJsonObjectWrapper                     CustomAttributes;                                  // 0x0028(0x0020)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	class FString                                 GroupDescription;                                  // 0x0048(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 GroupIcon;                                         // 0x0058(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsGroupUpdatable) == 0x000008, "Wrong alignment on FAccelByteModelsGroupUpdatable");
static_assert(sizeof(FAccelByteModelsGroupUpdatable) == 0x000068, "Wrong size on FAccelByteModelsGroupUpdatable");
static_assert(offsetof(FAccelByteModelsGroupUpdatable, GroupName) == 0x000000, "Member 'FAccelByteModelsGroupUpdatable::GroupName' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsGroupUpdatable, GroupRegion) == 0x000010, "Member 'FAccelByteModelsGroupUpdatable::GroupRegion' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsGroupUpdatable, GroupType) == 0x000020, "Member 'FAccelByteModelsGroupUpdatable::GroupType' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsGroupUpdatable, CustomAttributes) == 0x000028, "Member 'FAccelByteModelsGroupUpdatable::CustomAttributes' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsGroupUpdatable, GroupDescription) == 0x000048, "Member 'FAccelByteModelsGroupUpdatable::GroupDescription' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsGroupUpdatable, GroupIcon) == 0x000058, "Member 'FAccelByteModelsGroupUpdatable::GroupIcon' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsCreateGroupRequest
// 0x0048 (0x00B0 - 0x0068)
struct FAccelByteModelsCreateGroupRequest final : public FAccelByteModelsGroupUpdatable
{
public:
	class FString                                 ConfigurationCode;                                 // 0x0068(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         GroupMaxMember;                                    // 0x0078(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_7C[0x4];                                       // 0x007C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FAccelByteModelsGroupRules             GroupRules;                                        // 0x0080(0x0030)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsCreateGroupRequest) == 0x000008, "Wrong alignment on FAccelByteModelsCreateGroupRequest");
static_assert(sizeof(FAccelByteModelsCreateGroupRequest) == 0x0000B0, "Wrong size on FAccelByteModelsCreateGroupRequest");
static_assert(offsetof(FAccelByteModelsCreateGroupRequest, ConfigurationCode) == 0x000068, "Member 'FAccelByteModelsCreateGroupRequest::ConfigurationCode' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsCreateGroupRequest, GroupMaxMember) == 0x000078, "Member 'FAccelByteModelsCreateGroupRequest::GroupMaxMember' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsCreateGroupRequest, GroupRules) == 0x000080, "Member 'FAccelByteModelsCreateGroupRequest::GroupRules' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccountLinkedPlatform
// 0x0020 (0x0020 - 0x0000)
struct FAccountLinkedPlatform final
{
public:
	class FString                                 Namespace;                                         // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 PlatformUserId;                                    // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccountLinkedPlatform) == 0x000008, "Wrong alignment on FAccountLinkedPlatform");
static_assert(sizeof(FAccountLinkedPlatform) == 0x000020, "Wrong size on FAccountLinkedPlatform");
static_assert(offsetof(FAccountLinkedPlatform, Namespace) == 0x000000, "Member 'FAccountLinkedPlatform::Namespace' has a wrong offset!");
static_assert(offsetof(FAccountLinkedPlatform, PlatformUserId) == 0x000010, "Member 'FAccountLinkedPlatform::PlatformUserId' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccountLinkPublisherAccount
// 0x0030 (0x0030 - 0x0000)
struct FAccountLinkPublisherAccount final
{
public:
	class FString                                 UserId;                                            // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Namespace;                                         // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FAccountLinkedPlatform>         LinkedPlatforms;                                   // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccountLinkPublisherAccount) == 0x000008, "Wrong alignment on FAccountLinkPublisherAccount");
static_assert(sizeof(FAccountLinkPublisherAccount) == 0x000030, "Wrong size on FAccountLinkPublisherAccount");
static_assert(offsetof(FAccountLinkPublisherAccount, UserId) == 0x000000, "Member 'FAccountLinkPublisherAccount::UserId' has a wrong offset!");
static_assert(offsetof(FAccountLinkPublisherAccount, Namespace) == 0x000010, "Member 'FAccountLinkPublisherAccount::Namespace' has a wrong offset!");
static_assert(offsetof(FAccountLinkPublisherAccount, LinkedPlatforms) == 0x000020, "Member 'FAccountLinkPublisherAccount::LinkedPlatforms' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccountLinkConflictMessageVariables
// 0x0020 (0x0020 - 0x0000)
struct FAccountLinkConflictMessageVariables final
{
public:
	class FString                                 PlatformUserId;                                    // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FAccountLinkPublisherAccount>   PublisherAccounts;                                 // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccountLinkConflictMessageVariables) == 0x000008, "Wrong alignment on FAccountLinkConflictMessageVariables");
static_assert(sizeof(FAccountLinkConflictMessageVariables) == 0x000020, "Wrong size on FAccountLinkConflictMessageVariables");
static_assert(offsetof(FAccountLinkConflictMessageVariables, PlatformUserId) == 0x000000, "Member 'FAccountLinkConflictMessageVariables::PlatformUserId' has a wrong offset!");
static_assert(offsetof(FAccountLinkConflictMessageVariables, PublisherAccounts) == 0x000010, "Member 'FAccountLinkConflictMessageVariables::PublisherAccounts' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccountLinkConflictErrorJson
// 0x0040 (0x0040 - 0x0000)
struct FAccountLinkConflictErrorJson final
{
public:
	class FString                                 ErrorCode;                                         // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ErrorMessage;                                      // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FAccountLinkConflictMessageVariables   MessageVariables;                                  // 0x0020(0x0020)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccountLinkConflictErrorJson) == 0x000008, "Wrong alignment on FAccountLinkConflictErrorJson");
static_assert(sizeof(FAccountLinkConflictErrorJson) == 0x000040, "Wrong size on FAccountLinkConflictErrorJson");
static_assert(offsetof(FAccountLinkConflictErrorJson, ErrorCode) == 0x000000, "Member 'FAccountLinkConflictErrorJson::ErrorCode' has a wrong offset!");
static_assert(offsetof(FAccountLinkConflictErrorJson, ErrorMessage) == 0x000010, "Member 'FAccountLinkConflictErrorJson::ErrorMessage' has a wrong offset!");
static_assert(offsetof(FAccountLinkConflictErrorJson, MessageVariables) == 0x000020, "Member 'FAccountLinkConflictErrorJson::MessageVariables' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsItemPagingSlicedResult
// 0x0050 (0x0050 - 0x0000)
struct FAccelByteModelsItemPagingSlicedResult final
{
public:
	TArray<struct FAccelByteModelsItemInfo>       Data;                                              // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FAccelByteModelsPaging                 Paging;                                            // 0x0010(0x0040)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsItemPagingSlicedResult) == 0x000008, "Wrong alignment on FAccelByteModelsItemPagingSlicedResult");
static_assert(sizeof(FAccelByteModelsItemPagingSlicedResult) == 0x000050, "Wrong size on FAccelByteModelsItemPagingSlicedResult");
static_assert(offsetof(FAccelByteModelsItemPagingSlicedResult, Data) == 0x000000, "Member 'FAccelByteModelsItemPagingSlicedResult::Data' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsItemPagingSlicedResult, Paging) == 0x000010, "Member 'FAccelByteModelsItemPagingSlicedResult::Paging' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsItemDynamicData
// 0x0030 (0x0030 - 0x0000)
struct FAccelByteModelsItemDynamicData final
{
public:
	class FString                                 Namespace;                                         // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ItemId;                                            // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AvailableCount;                                    // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         UserAvailableCount;                                // 0x0024(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         UserPurchaseLimit;                                 // 0x0028(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAccelByteModelsItemDynamicData) == 0x000008, "Wrong alignment on FAccelByteModelsItemDynamicData");
static_assert(sizeof(FAccelByteModelsItemDynamicData) == 0x000030, "Wrong size on FAccelByteModelsItemDynamicData");
static_assert(offsetof(FAccelByteModelsItemDynamicData, Namespace) == 0x000000, "Member 'FAccelByteModelsItemDynamicData::Namespace' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsItemDynamicData, ItemId) == 0x000010, "Member 'FAccelByteModelsItemDynamicData::ItemId' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsItemDynamicData, AvailableCount) == 0x000020, "Member 'FAccelByteModelsItemDynamicData::AvailableCount' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsItemDynamicData, UserAvailableCount) == 0x000024, "Member 'FAccelByteModelsItemDynamicData::UserAvailableCount' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsItemDynamicData, UserPurchaseLimit) == 0x000028, "Member 'FAccelByteModelsItemDynamicData::UserPurchaseLimit' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsUserRecord
// 0x0070 (0x0070 - 0x0000)
struct FAccelByteModelsUserRecord final
{
public:
	class FString                                 Key;                                               // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Namespace;                                         // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 UserId;                                            // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsPublic;                                          // 0x0030(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FDateTime                              CreatedAt;                                         // 0x0038(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDateTime                              UpdatedAt;                                         // 0x0040(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESetByMetadataRecord                          SetBy;                                             // 0x0048(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_49[0x7];                                       // 0x0049(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FJsonObjectWrapper                     Value;                                             // 0x0050(0x0020)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsUserRecord) == 0x000008, "Wrong alignment on FAccelByteModelsUserRecord");
static_assert(sizeof(FAccelByteModelsUserRecord) == 0x000070, "Wrong size on FAccelByteModelsUserRecord");
static_assert(offsetof(FAccelByteModelsUserRecord, Key) == 0x000000, "Member 'FAccelByteModelsUserRecord::Key' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsUserRecord, Namespace) == 0x000010, "Member 'FAccelByteModelsUserRecord::Namespace' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsUserRecord, UserId) == 0x000020, "Member 'FAccelByteModelsUserRecord::UserId' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsUserRecord, IsPublic) == 0x000030, "Member 'FAccelByteModelsUserRecord::IsPublic' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsUserRecord, CreatedAt) == 0x000038, "Member 'FAccelByteModelsUserRecord::CreatedAt' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsUserRecord, UpdatedAt) == 0x000040, "Member 'FAccelByteModelsUserRecord::UpdatedAt' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsUserRecord, SetBy) == 0x000048, "Member 'FAccelByteModelsUserRecord::SetBy' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsUserRecord, Value) == 0x000050, "Member 'FAccelByteModelsUserRecord::Value' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsGroupMember
// 0x0020 (0x0020 - 0x0000)
struct FAccelByteModelsGroupMember final
{
public:
	class FString                                 UserId;                                            // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FString>                         MemberRoleId;                                      // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsGroupMember) == 0x000008, "Wrong alignment on FAccelByteModelsGroupMember");
static_assert(sizeof(FAccelByteModelsGroupMember) == 0x000020, "Wrong size on FAccelByteModelsGroupMember");
static_assert(offsetof(FAccelByteModelsGroupMember, UserId) == 0x000000, "Member 'FAccelByteModelsGroupMember::UserId' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsGroupMember, MemberRoleId) == 0x000010, "Member 'FAccelByteModelsGroupMember::MemberRoleId' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsGroupInformation
// 0x00D0 (0x00D0 - 0x0000)
struct FAccelByteModelsGroupInformation
{
public:
	class FString                                 ConfigurationCode;                                 // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FJsonObjectWrapper                     CustomAttributes;                                  // 0x0010(0x0020)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	class FString                                 GroupDescription;                                  // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 GroupIcon;                                         // 0x0040(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 GroupID;                                           // 0x0050(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         GroupMaxMember;                                    // 0x0060(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_64[0x4];                                       // 0x0064(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FAccelByteModelsGroupMember>    GroupMembers;                                      // 0x0068(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	class FString                                 GroupName;                                         // 0x0078(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 GroupRegion;                                       // 0x0088(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FAccelByteModelsGroupRules             GroupRules;                                        // 0x0098(0x0030)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	EAccelByteGroupType                           GroupType;                                         // 0x00C8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C9[0x7];                                       // 0x00C9(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAccelByteModelsGroupInformation) == 0x000008, "Wrong alignment on FAccelByteModelsGroupInformation");
static_assert(sizeof(FAccelByteModelsGroupInformation) == 0x0000D0, "Wrong size on FAccelByteModelsGroupInformation");
static_assert(offsetof(FAccelByteModelsGroupInformation, ConfigurationCode) == 0x000000, "Member 'FAccelByteModelsGroupInformation::ConfigurationCode' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsGroupInformation, CustomAttributes) == 0x000010, "Member 'FAccelByteModelsGroupInformation::CustomAttributes' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsGroupInformation, GroupDescription) == 0x000030, "Member 'FAccelByteModelsGroupInformation::GroupDescription' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsGroupInformation, GroupIcon) == 0x000040, "Member 'FAccelByteModelsGroupInformation::GroupIcon' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsGroupInformation, GroupID) == 0x000050, "Member 'FAccelByteModelsGroupInformation::GroupID' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsGroupInformation, GroupMaxMember) == 0x000060, "Member 'FAccelByteModelsGroupInformation::GroupMaxMember' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsGroupInformation, GroupMembers) == 0x000068, "Member 'FAccelByteModelsGroupInformation::GroupMembers' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsGroupInformation, GroupName) == 0x000078, "Member 'FAccelByteModelsGroupInformation::GroupName' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsGroupInformation, GroupRegion) == 0x000088, "Member 'FAccelByteModelsGroupInformation::GroupRegion' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsGroupInformation, GroupRules) == 0x000098, "Member 'FAccelByteModelsGroupInformation::GroupRules' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsGroupInformation, GroupType) == 0x0000C8, "Member 'FAccelByteModelsGroupInformation::GroupType' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsGameRecord
// 0x0058 (0x0058 - 0x0000)
struct FAccelByteModelsGameRecord final
{
public:
	class FString                                 Key;                                               // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Namespace;                                         // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDateTime                              CreatedAt;                                         // 0x0020(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDateTime                              UpdatedAt;                                         // 0x0028(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESetByMetadataRecord                          SetBy;                                             // 0x0030(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FJsonObjectWrapper                     Value;                                             // 0x0038(0x0020)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsGameRecord) == 0x000008, "Wrong alignment on FAccelByteModelsGameRecord");
static_assert(sizeof(FAccelByteModelsGameRecord) == 0x000058, "Wrong size on FAccelByteModelsGameRecord");
static_assert(offsetof(FAccelByteModelsGameRecord, Key) == 0x000000, "Member 'FAccelByteModelsGameRecord::Key' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsGameRecord, Namespace) == 0x000010, "Member 'FAccelByteModelsGameRecord::Namespace' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsGameRecord, CreatedAt) == 0x000020, "Member 'FAccelByteModelsGameRecord::CreatedAt' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsGameRecord, UpdatedAt) == 0x000028, "Member 'FAccelByteModelsGameRecord::UpdatedAt' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsGameRecord, SetBy) == 0x000030, "Member 'FAccelByteModelsGameRecord::SetBy' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsGameRecord, Value) == 0x000038, "Member 'FAccelByteModelsGameRecord::Value' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.ListBulkUserInfoRequest
// 0x0010 (0x0010 - 0x0000)
struct FListBulkUserInfoRequest final
{
public:
	TArray<class FString>                         UserIds;                                           // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FListBulkUserInfoRequest) == 0x000008, "Wrong alignment on FListBulkUserInfoRequest");
static_assert(sizeof(FListBulkUserInfoRequest) == 0x000010, "Wrong size on FListBulkUserInfoRequest");
static_assert(offsetof(FListBulkUserInfoRequest, UserIds) == 0x000000, "Member 'FListBulkUserInfoRequest::UserIds' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsGameProfile
// 0x00C0 (0x00C0 - 0x0000)
struct FAccelByteModelsGameProfile final
{
public:
	class FString                                 ProfileId;                                         // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 UserId;                                            // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Namespace;                                         // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ProfileName;                                       // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 AvatarUrl;                                         // 0x0040(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Label;                                             // 0x0050(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FString>                         Tags;                                              // 0x0060(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TMap<class FString, class FString>            Attributes;                                        // 0x0070(0x0050)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsGameProfile) == 0x000008, "Wrong alignment on FAccelByteModelsGameProfile");
static_assert(sizeof(FAccelByteModelsGameProfile) == 0x0000C0, "Wrong size on FAccelByteModelsGameProfile");
static_assert(offsetof(FAccelByteModelsGameProfile, ProfileId) == 0x000000, "Member 'FAccelByteModelsGameProfile::ProfileId' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsGameProfile, UserId) == 0x000010, "Member 'FAccelByteModelsGameProfile::UserId' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsGameProfile, Namespace) == 0x000020, "Member 'FAccelByteModelsGameProfile::Namespace' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsGameProfile, ProfileName) == 0x000030, "Member 'FAccelByteModelsGameProfile::ProfileName' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsGameProfile, AvatarUrl) == 0x000040, "Member 'FAccelByteModelsGameProfile::AvatarUrl' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsGameProfile, Label) == 0x000050, "Member 'FAccelByteModelsGameProfile::Label' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsGameProfile, Tags) == 0x000060, "Member 'FAccelByteModelsGameProfile::Tags' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsGameProfile, Attributes) == 0x000070, "Member 'FAccelByteModelsGameProfile::Attributes' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsCurrencyList
// 0x0098 (0x0098 - 0x0000)
struct FAccelByteModelsCurrencyList final
{
public:
	class FString                                 CurrencyCode;                                      // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<class FString, class FString>            LocalizationDescriptions;                          // 0x0010(0x0050)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	class FString                                 CurrencySymbol;                                    // 0x0060(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Namespace;                                         // 0x0070(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAccelByteCurrencyType                        CurrencyType;                                      // 0x0080(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_81[0x3];                                       // 0x0081(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Decimals;                                          // 0x0084(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDateTime                              CreatedAt;                                         // 0x0088(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDateTime                              UpdateAt;                                          // 0x0090(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsCurrencyList) == 0x000008, "Wrong alignment on FAccelByteModelsCurrencyList");
static_assert(sizeof(FAccelByteModelsCurrencyList) == 0x000098, "Wrong size on FAccelByteModelsCurrencyList");
static_assert(offsetof(FAccelByteModelsCurrencyList, CurrencyCode) == 0x000000, "Member 'FAccelByteModelsCurrencyList::CurrencyCode' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsCurrencyList, LocalizationDescriptions) == 0x000010, "Member 'FAccelByteModelsCurrencyList::LocalizationDescriptions' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsCurrencyList, CurrencySymbol) == 0x000060, "Member 'FAccelByteModelsCurrencyList::CurrencySymbol' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsCurrencyList, Namespace) == 0x000070, "Member 'FAccelByteModelsCurrencyList::Namespace' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsCurrencyList, CurrencyType) == 0x000080, "Member 'FAccelByteModelsCurrencyList::CurrencyType' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsCurrencyList, Decimals) == 0x000084, "Member 'FAccelByteModelsCurrencyList::Decimals' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsCurrencyList, CreatedAt) == 0x000088, "Member 'FAccelByteModelsCurrencyList::CreatedAt' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsCurrencyList, UpdateAt) == 0x000090, "Member 'FAccelByteModelsCurrencyList::UpdateAt' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.ArrayModelsCurrencyList
// 0x0010 (0x0010 - 0x0000)
struct FArrayModelsCurrencyList final
{
public:
	TArray<struct FAccelByteModelsCurrencyList>   Content;                                           // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FArrayModelsCurrencyList) == 0x000008, "Wrong alignment on FArrayModelsCurrencyList");
static_assert(sizeof(FArrayModelsCurrencyList) == 0x000010, "Wrong size on FArrayModelsCurrencyList");
static_assert(offsetof(FArrayModelsCurrencyList, Content) == 0x000000, "Member 'FArrayModelsCurrencyList::Content' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.NamespaceRole
// 0x0020 (0x0020 - 0x0000)
struct FNamespaceRole final
{
public:
	class FString                                 Namespace;                                         // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 RoleId;                                            // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FNamespaceRole) == 0x000008, "Wrong alignment on FNamespaceRole");
static_assert(sizeof(FNamespaceRole) == 0x000020, "Wrong size on FNamespaceRole");
static_assert(offsetof(FNamespaceRole, Namespace) == 0x000000, "Member 'FNamespaceRole::Namespace' has a wrong offset!");
static_assert(offsetof(FNamespaceRole, RoleId) == 0x000010, "Member 'FNamespaceRole::RoleId' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsUnfriendResponse
// 0x0010 (0x0010 - 0x0000)
struct FAccelByteModelsUnfriendResponse final
{
public:
	class FString                                 Code;                                              // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsUnfriendResponse) == 0x000008, "Wrong alignment on FAccelByteModelsUnfriendResponse");
static_assert(sizeof(FAccelByteModelsUnfriendResponse) == 0x000010, "Wrong size on FAccelByteModelsUnfriendResponse");
static_assert(offsetof(FAccelByteModelsUnfriendResponse, Code) == 0x000000, "Member 'FAccelByteModelsUnfriendResponse::Code' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.UnblockPlayerRequest
// 0x0010 (0x0010 - 0x0000)
struct FUnblockPlayerRequest final
{
public:
	class FString                                 UserId;                                            // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FUnblockPlayerRequest) == 0x000008, "Wrong alignment on FUnblockPlayerRequest");
static_assert(sizeof(FUnblockPlayerRequest) == 0x000010, "Wrong size on FUnblockPlayerRequest");
static_assert(offsetof(FUnblockPlayerRequest, UserId) == 0x000000, "Member 'FUnblockPlayerRequest::UserId' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsListOutgoingFriendsResponse
// 0x0020 (0x0020 - 0x0000)
struct FAccelByteModelsListOutgoingFriendsResponse final
{
public:
	class FString                                 Code;                                              // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FString>                         FriendsId;                                         // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsListOutgoingFriendsResponse) == 0x000008, "Wrong alignment on FAccelByteModelsListOutgoingFriendsResponse");
static_assert(sizeof(FAccelByteModelsListOutgoingFriendsResponse) == 0x000020, "Wrong size on FAccelByteModelsListOutgoingFriendsResponse");
static_assert(offsetof(FAccelByteModelsListOutgoingFriendsResponse, Code) == 0x000000, "Member 'FAccelByteModelsListOutgoingFriendsResponse::Code' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsListOutgoingFriendsResponse, FriendsId) == 0x000010, "Member 'FAccelByteModelsListOutgoingFriendsResponse::FriendsId' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsRejectFriendsResponse
// 0x0010 (0x0010 - 0x0000)
struct FAccelByteModelsRejectFriendsResponse final
{
public:
	class FString                                 Code;                                              // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsRejectFriendsResponse) == 0x000008, "Wrong alignment on FAccelByteModelsRejectFriendsResponse");
static_assert(sizeof(FAccelByteModelsRejectFriendsResponse) == 0x000010, "Wrong size on FAccelByteModelsRejectFriendsResponse");
static_assert(offsetof(FAccelByteModelsRejectFriendsResponse, Code) == 0x000000, "Member 'FAccelByteModelsRejectFriendsResponse::Code' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsRequestFriendsNotif
// 0x0010 (0x0010 - 0x0000)
struct FAccelByteModelsRequestFriendsNotif final
{
public:
	class FString                                 FriendId;                                          // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsRequestFriendsNotif) == 0x000008, "Wrong alignment on FAccelByteModelsRequestFriendsNotif");
static_assert(sizeof(FAccelByteModelsRequestFriendsNotif) == 0x000010, "Wrong size on FAccelByteModelsRequestFriendsNotif");
static_assert(offsetof(FAccelByteModelsRequestFriendsNotif, FriendId) == 0x000000, "Member 'FAccelByteModelsRequestFriendsNotif::FriendId' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsUnfriendNotif
// 0x0010 (0x0010 - 0x0000)
struct FAccelByteModelsUnfriendNotif final
{
public:
	class FString                                 FriendId;                                          // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsUnfriendNotif) == 0x000008, "Wrong alignment on FAccelByteModelsUnfriendNotif");
static_assert(sizeof(FAccelByteModelsUnfriendNotif) == 0x000010, "Wrong size on FAccelByteModelsUnfriendNotif");
static_assert(offsetof(FAccelByteModelsUnfriendNotif, FriendId) == 0x000000, "Member 'FAccelByteModelsUnfriendNotif::FriendId' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsCancelFriendsNotif
// 0x0010 (0x0010 - 0x0000)
struct FAccelByteModelsCancelFriendsNotif final
{
public:
	class FString                                 UserId;                                            // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsCancelFriendsNotif) == 0x000008, "Wrong alignment on FAccelByteModelsCancelFriendsNotif");
static_assert(sizeof(FAccelByteModelsCancelFriendsNotif) == 0x000010, "Wrong size on FAccelByteModelsCancelFriendsNotif");
static_assert(offsetof(FAccelByteModelsCancelFriendsNotif, UserId) == 0x000000, "Member 'FAccelByteModelsCancelFriendsNotif::UserId' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.UserUpdateRequest
// 0x0070 (0x0070 - 0x0000)
struct FUserUpdateRequest final
{
public:
	class FString                                 Country;                                           // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 DateOfBirth;                                       // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 DisplayName;                                       // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 EmailAddress;                                      // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 LanguageTag;                                       // 0x0040(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Username;                                          // 0x0050(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 AvatarUrl;                                         // 0x0060(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FUserUpdateRequest) == 0x000008, "Wrong alignment on FUserUpdateRequest");
static_assert(sizeof(FUserUpdateRequest) == 0x000070, "Wrong size on FUserUpdateRequest");
static_assert(offsetof(FUserUpdateRequest, Country) == 0x000000, "Member 'FUserUpdateRequest::Country' has a wrong offset!");
static_assert(offsetof(FUserUpdateRequest, DateOfBirth) == 0x000010, "Member 'FUserUpdateRequest::DateOfBirth' has a wrong offset!");
static_assert(offsetof(FUserUpdateRequest, DisplayName) == 0x000020, "Member 'FUserUpdateRequest::DisplayName' has a wrong offset!");
static_assert(offsetof(FUserUpdateRequest, EmailAddress) == 0x000030, "Member 'FUserUpdateRequest::EmailAddress' has a wrong offset!");
static_assert(offsetof(FUserUpdateRequest, LanguageTag) == 0x000040, "Member 'FUserUpdateRequest::LanguageTag' has a wrong offset!");
static_assert(offsetof(FUserUpdateRequest, Username) == 0x000050, "Member 'FUserUpdateRequest::Username' has a wrong offset!");
static_assert(offsetof(FUserUpdateRequest, AvatarUrl) == 0x000060, "Member 'FUserUpdateRequest::AvatarUrl' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsRejectFriendsNotif
// 0x0010 (0x0010 - 0x0000)
struct FAccelByteModelsRejectFriendsNotif final
{
public:
	class FString                                 UserId;                                            // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsRejectFriendsNotif) == 0x000008, "Wrong alignment on FAccelByteModelsRejectFriendsNotif");
static_assert(sizeof(FAccelByteModelsRejectFriendsNotif) == 0x000010, "Wrong size on FAccelByteModelsRejectFriendsNotif");
static_assert(offsetof(FAccelByteModelsRejectFriendsNotif, UserId) == 0x000000, "Member 'FAccelByteModelsRejectFriendsNotif::UserId' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsCreditSummary
// 0x0038 (0x0038 - 0x0000)
struct FAccelByteModelsCreditSummary final
{
public:
	class FString                                 WalletId;                                          // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Namespace;                                         // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 UserId;                                            // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Amount;                                            // 0x0030(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAccelByteModelsCreditSummary) == 0x000008, "Wrong alignment on FAccelByteModelsCreditSummary");
static_assert(sizeof(FAccelByteModelsCreditSummary) == 0x000038, "Wrong size on FAccelByteModelsCreditSummary");
static_assert(offsetof(FAccelByteModelsCreditSummary, WalletId) == 0x000000, "Member 'FAccelByteModelsCreditSummary::WalletId' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsCreditSummary, Namespace) == 0x000010, "Member 'FAccelByteModelsCreditSummary::Namespace' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsCreditSummary, UserId) == 0x000020, "Member 'FAccelByteModelsCreditSummary::UserId' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsCreditSummary, Amount) == 0x000030, "Member 'FAccelByteModelsCreditSummary::Amount' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsFulfillmentResult
// 0x0040 (0x0040 - 0x0000)
struct FAccelByteModelsFulfillmentResult final
{
public:
	class FString                                 Namespace;                                         // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 UserId;                                            // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FAccelByteModelsEntitlementSummary> EntitlementSummaries;                              // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FAccelByteModelsCreditSummary>  CreditSummaries;                                   // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsFulfillmentResult) == 0x000008, "Wrong alignment on FAccelByteModelsFulfillmentResult");
static_assert(sizeof(FAccelByteModelsFulfillmentResult) == 0x000040, "Wrong size on FAccelByteModelsFulfillmentResult");
static_assert(offsetof(FAccelByteModelsFulfillmentResult, Namespace) == 0x000000, "Member 'FAccelByteModelsFulfillmentResult::Namespace' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsFulfillmentResult, UserId) == 0x000010, "Member 'FAccelByteModelsFulfillmentResult::UserId' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsFulfillmentResult, EntitlementSummaries) == 0x000020, "Member 'FAccelByteModelsFulfillmentResult::EntitlementSummaries' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsFulfillmentResult, CreditSummaries) == 0x000030, "Member 'FAccelByteModelsFulfillmentResult::CreditSummaries' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.SetReadyConsentRequest
// 0x0010 (0x0010 - 0x0000)
struct FSetReadyConsentRequest final
{
public:
	class FString                                 MatchID;                                           // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSetReadyConsentRequest) == 0x000008, "Wrong alignment on FSetReadyConsentRequest");
static_assert(sizeof(FSetReadyConsentRequest) == 0x000010, "Wrong size on FSetReadyConsentRequest");
static_assert(offsetof(FSetReadyConsentRequest, MatchID) == 0x000000, "Member 'FSetReadyConsentRequest::MatchID' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsGetGroupListResponse
// 0x0040 (0x0110 - 0x00D0)
struct FAccelByteModelsGetGroupListResponse final : public FAccelByteModelsGroupInformation
{
public:
	struct FAccelByteModelsPaging                 Paging;                                            // 0x00D0(0x0040)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsGetGroupListResponse) == 0x000008, "Wrong alignment on FAccelByteModelsGetGroupListResponse");
static_assert(sizeof(FAccelByteModelsGetGroupListResponse) == 0x000110, "Wrong size on FAccelByteModelsGetGroupListResponse");
static_assert(offsetof(FAccelByteModelsGetGroupListResponse, Paging) == 0x0000D0, "Member 'FAccelByteModelsGetGroupListResponse::Paging' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.SimpleUserData
// 0x0040 (0x0040 - 0x0000)
struct FSimpleUserData final
{
public:
	class FString                                 Namespace;                                         // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 UserId;                                            // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 DisplayName;                                       // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Username;                                          // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSimpleUserData) == 0x000008, "Wrong alignment on FSimpleUserData");
static_assert(sizeof(FSimpleUserData) == 0x000040, "Wrong size on FSimpleUserData");
static_assert(offsetof(FSimpleUserData, Namespace) == 0x000000, "Member 'FSimpleUserData::Namespace' has a wrong offset!");
static_assert(offsetof(FSimpleUserData, UserId) == 0x000010, "Member 'FSimpleUserData::UserId' has a wrong offset!");
static_assert(offsetof(FSimpleUserData, DisplayName) == 0x000020, "Member 'FSimpleUserData::DisplayName' has a wrong offset!");
static_assert(offsetof(FSimpleUserData, Username) == 0x000030, "Member 'FSimpleUserData::Username' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsMemberRequestGroupResponse
// 0x0020 (0x0020 - 0x0000)
struct FAccelByteModelsMemberRequestGroupResponse
{
public:
	class FString                                 GroupID;                                           // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 UserId;                                            // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsMemberRequestGroupResponse) == 0x000008, "Wrong alignment on FAccelByteModelsMemberRequestGroupResponse");
static_assert(sizeof(FAccelByteModelsMemberRequestGroupResponse) == 0x000020, "Wrong size on FAccelByteModelsMemberRequestGroupResponse");
static_assert(offsetof(FAccelByteModelsMemberRequestGroupResponse, GroupID) == 0x000000, "Member 'FAccelByteModelsMemberRequestGroupResponse::GroupID' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsMemberRequestGroupResponse, UserId) == 0x000010, "Member 'FAccelByteModelsMemberRequestGroupResponse::UserId' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsJoinGroupResponse
// 0x0010 (0x0030 - 0x0020)
struct FAccelByteModelsJoinGroupResponse final : public FAccelByteModelsMemberRequestGroupResponse
{
public:
	class FString                                 Status;                                            // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsJoinGroupResponse) == 0x000008, "Wrong alignment on FAccelByteModelsJoinGroupResponse");
static_assert(sizeof(FAccelByteModelsJoinGroupResponse) == 0x000030, "Wrong size on FAccelByteModelsJoinGroupResponse");
static_assert(offsetof(FAccelByteModelsJoinGroupResponse, Status) == 0x000020, "Member 'FAccelByteModelsJoinGroupResponse::Status' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsKickGroupMemberResponse
// 0x0020 (0x0020 - 0x0000)
struct FAccelByteModelsKickGroupMemberResponse final
{
public:
	class FString                                 GroupID;                                           // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 KickedUserId;                                      // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsKickGroupMemberResponse) == 0x000008, "Wrong alignment on FAccelByteModelsKickGroupMemberResponse");
static_assert(sizeof(FAccelByteModelsKickGroupMemberResponse) == 0x000020, "Wrong size on FAccelByteModelsKickGroupMemberResponse");
static_assert(offsetof(FAccelByteModelsKickGroupMemberResponse, GroupID) == 0x000000, "Member 'FAccelByteModelsKickGroupMemberResponse::GroupID' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsKickGroupMemberResponse, KickedUserId) == 0x000010, "Member 'FAccelByteModelsKickGroupMemberResponse::KickedUserId' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsGetMemberRolesListResponse
// 0x0070 (0x0070 - 0x0000)
struct FAccelByteModelsGetMemberRolesListResponse final
{
public:
	struct FAccelByteModelsPaging                 Paging;                                            // 0x0000(0x0040)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	class FString                                 MemberRoleId;                                      // 0x0040(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 MemberRoleName;                                    // 0x0050(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FString>                         MemberRolePermissions;                             // 0x0060(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsGetMemberRolesListResponse) == 0x000008, "Wrong alignment on FAccelByteModelsGetMemberRolesListResponse");
static_assert(sizeof(FAccelByteModelsGetMemberRolesListResponse) == 0x000070, "Wrong size on FAccelByteModelsGetMemberRolesListResponse");
static_assert(offsetof(FAccelByteModelsGetMemberRolesListResponse, Paging) == 0x000000, "Member 'FAccelByteModelsGetMemberRolesListResponse::Paging' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsGetMemberRolesListResponse, MemberRoleId) == 0x000040, "Member 'FAccelByteModelsGetMemberRolesListResponse::MemberRoleId' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsGetMemberRolesListResponse, MemberRoleName) == 0x000050, "Member 'FAccelByteModelsGetMemberRolesListResponse::MemberRoleName' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsGetMemberRolesListResponse, MemberRolePermissions) == 0x000060, "Member 'FAccelByteModelsGetMemberRolesListResponse::MemberRolePermissions' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsUserPoint
// 0x0018 (0x0018 - 0x0000)
struct FAccelByteModelsUserPoint final
{
public:
	float                                         Point;                                             // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 UserId;                                            // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsUserPoint) == 0x000008, "Wrong alignment on FAccelByteModelsUserPoint");
static_assert(sizeof(FAccelByteModelsUserPoint) == 0x000018, "Wrong size on FAccelByteModelsUserPoint");
static_assert(offsetof(FAccelByteModelsUserPoint, Point) == 0x000000, "Member 'FAccelByteModelsUserPoint::Point' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsUserPoint, UserId) == 0x000008, "Member 'FAccelByteModelsUserPoint::UserId' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsLeaderboardRankingResult
// 0x0050 (0x0050 - 0x0000)
struct FAccelByteModelsLeaderboardRankingResult final
{
public:
	TArray<struct FAccelByteModelsUserPoint>      Data;                                              // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FAccelByteModelsPaging                 Paging;                                            // 0x0010(0x0040)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsLeaderboardRankingResult) == 0x000008, "Wrong alignment on FAccelByteModelsLeaderboardRankingResult");
static_assert(sizeof(FAccelByteModelsLeaderboardRankingResult) == 0x000050, "Wrong size on FAccelByteModelsLeaderboardRankingResult");
static_assert(offsetof(FAccelByteModelsLeaderboardRankingResult, Data) == 0x000000, "Member 'FAccelByteModelsLeaderboardRankingResult::Data' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsLeaderboardRankingResult, Paging) == 0x000010, "Member 'FAccelByteModelsLeaderboardRankingResult::Paging' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsUserRanking
// 0x0008 (0x0008 - 0x0000)
struct FAccelByteModelsUserRanking final
{
public:
	float                                         Point;                                             // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Rank;                                              // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsUserRanking) == 0x000004, "Wrong alignment on FAccelByteModelsUserRanking");
static_assert(sizeof(FAccelByteModelsUserRanking) == 0x000008, "Wrong size on FAccelByteModelsUserRanking");
static_assert(offsetof(FAccelByteModelsUserRanking, Point) == 0x000000, "Member 'FAccelByteModelsUserRanking::Point' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsUserRanking, Rank) == 0x000004, "Member 'FAccelByteModelsUserRanking::Rank' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsUserRankingData
// 0x0038 (0x0038 - 0x0000)
struct FAccelByteModelsUserRankingData final
{
public:
	struct FAccelByteModelsUserRanking            AllTime;                                           // 0x0000(0x0008)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FAccelByteModelsUserRanking            Current;                                           // 0x0008(0x0008)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FAccelByteModelsUserRanking            Daily;                                             // 0x0010(0x0008)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FAccelByteModelsUserRanking            Monthly;                                           // 0x0018(0x0008)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FAccelByteModelsUserRanking            Weekly;                                            // 0x0020(0x0008)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	class FString                                 UserId;                                            // 0x0028(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsUserRankingData) == 0x000008, "Wrong alignment on FAccelByteModelsUserRankingData");
static_assert(sizeof(FAccelByteModelsUserRankingData) == 0x000038, "Wrong size on FAccelByteModelsUserRankingData");
static_assert(offsetof(FAccelByteModelsUserRankingData, AllTime) == 0x000000, "Member 'FAccelByteModelsUserRankingData::AllTime' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsUserRankingData, Current) == 0x000008, "Member 'FAccelByteModelsUserRankingData::Current' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsUserRankingData, Daily) == 0x000010, "Member 'FAccelByteModelsUserRankingData::Daily' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsUserRankingData, Monthly) == 0x000018, "Member 'FAccelByteModelsUserRankingData::Monthly' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsUserRankingData, Weekly) == 0x000020, "Member 'FAccelByteModelsUserRankingData::Weekly' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsUserRankingData, UserId) == 0x000028, "Member 'FAccelByteModelsUserRankingData::UserId' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsMatchmakingResponse
// 0x0010 (0x0010 - 0x0000)
struct FAccelByteModelsMatchmakingResponse final
{
public:
	class FString                                 Code;                                              // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsMatchmakingResponse) == 0x000008, "Wrong alignment on FAccelByteModelsMatchmakingResponse");
static_assert(sizeof(FAccelByteModelsMatchmakingResponse) == 0x000010, "Wrong size on FAccelByteModelsMatchmakingResponse");
static_assert(offsetof(FAccelByteModelsMatchmakingResponse, Code) == 0x000000, "Member 'FAccelByteModelsMatchmakingResponse::Code' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsReadyConsentRequest
// 0x0020 (0x0020 - 0x0000)
struct FAccelByteModelsReadyConsentRequest final
{
public:
	class FString                                 Code;                                              // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 MatchID;                                           // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsReadyConsentRequest) == 0x000008, "Wrong alignment on FAccelByteModelsReadyConsentRequest");
static_assert(sizeof(FAccelByteModelsReadyConsentRequest) == 0x000020, "Wrong size on FAccelByteModelsReadyConsentRequest");
static_assert(offsetof(FAccelByteModelsReadyConsentRequest, Code) == 0x000000, "Member 'FAccelByteModelsReadyConsentRequest::Code' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsReadyConsentRequest, MatchID) == 0x000010, "Member 'FAccelByteModelsReadyConsentRequest::MatchID' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsBulkStatItemOperationResult
// 0x0068 (0x0068 - 0x0000)
struct FAccelByteModelsBulkStatItemOperationResult final
{
public:
	TMap<class FString, class FString>            Details;                                           // 0x0000(0x0050)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	class FString                                 StatCode;                                          // 0x0050(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Success;                                           // 0x0060(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_61[0x7];                                       // 0x0061(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAccelByteModelsBulkStatItemOperationResult) == 0x000008, "Wrong alignment on FAccelByteModelsBulkStatItemOperationResult");
static_assert(sizeof(FAccelByteModelsBulkStatItemOperationResult) == 0x000068, "Wrong size on FAccelByteModelsBulkStatItemOperationResult");
static_assert(offsetof(FAccelByteModelsBulkStatItemOperationResult, Details) == 0x000000, "Member 'FAccelByteModelsBulkStatItemOperationResult::Details' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsBulkStatItemOperationResult, StatCode) == 0x000050, "Member 'FAccelByteModelsBulkStatItemOperationResult::StatCode' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsBulkStatItemOperationResult, Success) == 0x000060, "Member 'FAccelByteModelsBulkStatItemOperationResult::Success' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.ArrayModelsBulkStatItemOperationResultResponse
// 0x0010 (0x0010 - 0x0000)
struct FArrayModelsBulkStatItemOperationResultResponse final
{
public:
	TArray<struct FAccelByteModelsBulkStatItemOperationResult> Content;                                           // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FArrayModelsBulkStatItemOperationResultResponse) == 0x000008, "Wrong alignment on FArrayModelsBulkStatItemOperationResultResponse");
static_assert(sizeof(FArrayModelsBulkStatItemOperationResultResponse) == 0x000010, "Wrong size on FArrayModelsBulkStatItemOperationResultResponse");
static_assert(offsetof(FArrayModelsBulkStatItemOperationResultResponse, Content) == 0x000000, "Member 'FArrayModelsBulkStatItemOperationResultResponse::Content' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsReadyConsentNotice
// 0x0020 (0x0020 - 0x0000)
struct FAccelByteModelsReadyConsentNotice final
{
public:
	class FString                                 MatchID;                                           // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 UserId;                                            // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsReadyConsentNotice) == 0x000008, "Wrong alignment on FAccelByteModelsReadyConsentNotice");
static_assert(sizeof(FAccelByteModelsReadyConsentNotice) == 0x000020, "Wrong size on FAccelByteModelsReadyConsentNotice");
static_assert(offsetof(FAccelByteModelsReadyConsentNotice, MatchID) == 0x000000, "Member 'FAccelByteModelsReadyConsentNotice::MatchID' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsReadyConsentNotice, UserId) == 0x000010, "Member 'FAccelByteModelsReadyConsentNotice::UserId' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsRematchmakingNotice
// 0x0004 (0x0004 - 0x0000)
struct FAccelByteModelsRematchmakingNotice final
{
public:
	int32                                         BanDuration;                                       // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsRematchmakingNotice) == 0x000004, "Wrong alignment on FAccelByteModelsRematchmakingNotice");
static_assert(sizeof(FAccelByteModelsRematchmakingNotice) == 0x000004, "Wrong size on FAccelByteModelsRematchmakingNotice");
static_assert(offsetof(FAccelByteModelsRematchmakingNotice, BanDuration) == 0x000000, "Member 'FAccelByteModelsRematchmakingNotice::BanDuration' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsDsNotice
// 0x00F8 (0x00F8 - 0x0000)
struct FAccelByteModelsDsNotice final
{
public:
	class FString                                 Status;                                            // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 MatchID;                                           // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 PodName;                                           // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Ip;                                                // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ImageVersion;                                      // 0x0040(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ServerVersion;                                     // 0x0050(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Port;                                              // 0x0060(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_64[0x4];                                       // 0x0064(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Message;                                           // 0x0068(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 IsOK;                                              // 0x0078(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Region;                                            // 0x0088(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<class FString, int32>                    Ports;                                             // 0x0098(0x0050)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	class FString                                 CustomAttribute;                                   // 0x00E8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsDsNotice) == 0x000008, "Wrong alignment on FAccelByteModelsDsNotice");
static_assert(sizeof(FAccelByteModelsDsNotice) == 0x0000F8, "Wrong size on FAccelByteModelsDsNotice");
static_assert(offsetof(FAccelByteModelsDsNotice, Status) == 0x000000, "Member 'FAccelByteModelsDsNotice::Status' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsDsNotice, MatchID) == 0x000010, "Member 'FAccelByteModelsDsNotice::MatchID' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsDsNotice, PodName) == 0x000020, "Member 'FAccelByteModelsDsNotice::PodName' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsDsNotice, Ip) == 0x000030, "Member 'FAccelByteModelsDsNotice::Ip' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsDsNotice, ImageVersion) == 0x000040, "Member 'FAccelByteModelsDsNotice::ImageVersion' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsDsNotice, ServerVersion) == 0x000050, "Member 'FAccelByteModelsDsNotice::ServerVersion' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsDsNotice, Port) == 0x000060, "Member 'FAccelByteModelsDsNotice::Port' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsDsNotice, Message) == 0x000068, "Member 'FAccelByteModelsDsNotice::Message' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsDsNotice, IsOK) == 0x000078, "Member 'FAccelByteModelsDsNotice::IsOK' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsDsNotice, Region) == 0x000088, "Member 'FAccelByteModelsDsNotice::Region' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsDsNotice, Ports) == 0x000098, "Member 'FAccelByteModelsDsNotice::Ports' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsDsNotice, CustomAttribute) == 0x0000E8, "Member 'FAccelByteModelsDsNotice::CustomAttribute' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsPersonalMessageResponse
// 0x0010 (0x0010 - 0x0000)
struct FAccelByteModelsPersonalMessageResponse final
{
public:
	class FString                                 Code;                                              // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsPersonalMessageResponse) == 0x000008, "Wrong alignment on FAccelByteModelsPersonalMessageResponse");
static_assert(sizeof(FAccelByteModelsPersonalMessageResponse) == 0x000010, "Wrong size on FAccelByteModelsPersonalMessageResponse");
static_assert(offsetof(FAccelByteModelsPersonalMessageResponse, Code) == 0x000000, "Member 'FAccelByteModelsPersonalMessageResponse::Code' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsPartyMessageResponse
// 0x0010 (0x0010 - 0x0000)
struct FAccelByteModelsPartyMessageResponse final
{
public:
	class FString                                 Code;                                              // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsPartyMessageResponse) == 0x000008, "Wrong alignment on FAccelByteModelsPartyMessageResponse");
static_assert(sizeof(FAccelByteModelsPartyMessageResponse) == 0x000010, "Wrong size on FAccelByteModelsPartyMessageResponse");
static_assert(offsetof(FAccelByteModelsPartyMessageResponse, Code) == 0x000000, "Member 'FAccelByteModelsPartyMessageResponse::Code' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsJoinDefaultChannelResponse
// 0x0010 (0x0010 - 0x0000)
struct FAccelByteModelsJoinDefaultChannelResponse final
{
public:
	class FString                                 ChannelSlug;                                       // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsJoinDefaultChannelResponse) == 0x000008, "Wrong alignment on FAccelByteModelsJoinDefaultChannelResponse");
static_assert(sizeof(FAccelByteModelsJoinDefaultChannelResponse) == 0x000010, "Wrong size on FAccelByteModelsJoinDefaultChannelResponse");
static_assert(offsetof(FAccelByteModelsJoinDefaultChannelResponse, ChannelSlug) == 0x000000, "Member 'FAccelByteModelsJoinDefaultChannelResponse::ChannelSlug' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsChannelMessageResponse
// 0x0020 (0x0020 - 0x0000)
struct FAccelByteModelsChannelMessageResponse final
{
public:
	class FString                                 Code;                                              // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Message;                                           // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsChannelMessageResponse) == 0x000008, "Wrong alignment on FAccelByteModelsChannelMessageResponse");
static_assert(sizeof(FAccelByteModelsChannelMessageResponse) == 0x000020, "Wrong size on FAccelByteModelsChannelMessageResponse");
static_assert(offsetof(FAccelByteModelsChannelMessageResponse, Code) == 0x000000, "Member 'FAccelByteModelsChannelMessageResponse::Code' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsChannelMessageResponse, Message) == 0x000010, "Member 'FAccelByteModelsChannelMessageResponse::Message' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsPersonalMessageNotice
// 0x0050 (0x0050 - 0x0000)
struct FAccelByteModelsPersonalMessageNotice final
{
public:
	class FString                                 ID;                                                // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 From;                                              // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 To;                                                // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Payload;                                           // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ReceivedAt;                                        // 0x0040(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsPersonalMessageNotice) == 0x000008, "Wrong alignment on FAccelByteModelsPersonalMessageNotice");
static_assert(sizeof(FAccelByteModelsPersonalMessageNotice) == 0x000050, "Wrong size on FAccelByteModelsPersonalMessageNotice");
static_assert(offsetof(FAccelByteModelsPersonalMessageNotice, ID) == 0x000000, "Member 'FAccelByteModelsPersonalMessageNotice::ID' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsPersonalMessageNotice, From) == 0x000010, "Member 'FAccelByteModelsPersonalMessageNotice::From' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsPersonalMessageNotice, To) == 0x000020, "Member 'FAccelByteModelsPersonalMessageNotice::To' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsPersonalMessageNotice, Payload) == 0x000030, "Member 'FAccelByteModelsPersonalMessageNotice::Payload' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsPersonalMessageNotice, ReceivedAt) == 0x000040, "Member 'FAccelByteModelsPersonalMessageNotice::ReceivedAt' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsNotificationMessage
// 0x0058 (0x0058 - 0x0000)
struct FAccelByteModelsNotificationMessage final
{
public:
	class FString                                 ID;                                                // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 From;                                              // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 To;                                                // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Topic;                                             // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Payload;                                           // 0x0040(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDateTime                              SentAt;                                            // 0x0050(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsNotificationMessage) == 0x000008, "Wrong alignment on FAccelByteModelsNotificationMessage");
static_assert(sizeof(FAccelByteModelsNotificationMessage) == 0x000058, "Wrong size on FAccelByteModelsNotificationMessage");
static_assert(offsetof(FAccelByteModelsNotificationMessage, ID) == 0x000000, "Member 'FAccelByteModelsNotificationMessage::ID' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsNotificationMessage, From) == 0x000010, "Member 'FAccelByteModelsNotificationMessage::From' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsNotificationMessage, To) == 0x000020, "Member 'FAccelByteModelsNotificationMessage::To' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsNotificationMessage, Topic) == 0x000030, "Member 'FAccelByteModelsNotificationMessage::Topic' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsNotificationMessage, Payload) == 0x000040, "Member 'FAccelByteModelsNotificationMessage::Payload' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsNotificationMessage, SentAt) == 0x000050, "Member 'FAccelByteModelsNotificationMessage::SentAt' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsChannelMessageNotice
// 0x0040 (0x0040 - 0x0000)
struct FAccelByteModelsChannelMessageNotice final
{
public:
	class FString                                 From;                                              // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ChannelSlug;                                       // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Payload;                                           // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 SentAt;                                            // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsChannelMessageNotice) == 0x000008, "Wrong alignment on FAccelByteModelsChannelMessageNotice");
static_assert(sizeof(FAccelByteModelsChannelMessageNotice) == 0x000040, "Wrong size on FAccelByteModelsChannelMessageNotice");
static_assert(offsetof(FAccelByteModelsChannelMessageNotice, From) == 0x000000, "Member 'FAccelByteModelsChannelMessageNotice::From' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsChannelMessageNotice, ChannelSlug) == 0x000010, "Member 'FAccelByteModelsChannelMessageNotice::ChannelSlug' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsChannelMessageNotice, Payload) == 0x000020, "Member 'FAccelByteModelsChannelMessageNotice::Payload' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsChannelMessageNotice, SentAt) == 0x000030, "Member 'FAccelByteModelsChannelMessageNotice::SentAt' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsOrderCurrencySummary
// 0x0040 (0x0040 - 0x0000)
struct FAccelByteModelsOrderCurrencySummary final
{
public:
	class FString                                 CurrencyCode;                                      // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 CurrencySymbol;                                    // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAccelByteItemCurrencyType                    CurrencyType;                                      // 0x0020(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Namespace;                                         // 0x0028(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Decimals;                                          // 0x0038(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAccelByteModelsOrderCurrencySummary) == 0x000008, "Wrong alignment on FAccelByteModelsOrderCurrencySummary");
static_assert(sizeof(FAccelByteModelsOrderCurrencySummary) == 0x000040, "Wrong size on FAccelByteModelsOrderCurrencySummary");
static_assert(offsetof(FAccelByteModelsOrderCurrencySummary, CurrencyCode) == 0x000000, "Member 'FAccelByteModelsOrderCurrencySummary::CurrencyCode' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsOrderCurrencySummary, CurrencySymbol) == 0x000010, "Member 'FAccelByteModelsOrderCurrencySummary::CurrencySymbol' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsOrderCurrencySummary, CurrencyType) == 0x000020, "Member 'FAccelByteModelsOrderCurrencySummary::CurrencyType' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsOrderCurrencySummary, Namespace) == 0x000028, "Member 'FAccelByteModelsOrderCurrencySummary::Namespace' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsOrderCurrencySummary, Decimals) == 0x000038, "Member 'FAccelByteModelsOrderCurrencySummary::Decimals' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsOrderInfo
// 0x02A0 (0x02A0 - 0x0000)
struct FAccelByteModelsOrderInfo final
{
public:
	class FString                                 OrderNo;                                           // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 PaymentOrderNo;                                    // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Namespace;                                         // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 UserId;                                            // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ItemId;                                            // 0x0040(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Sandbox;                                           // 0x0050(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_51[0x3];                                       // 0x0051(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Quantity;                                          // 0x0054(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Price;                                             // 0x0058(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DiscountedPrice;                                   // 0x005C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Vat;                                               // 0x0060(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SalesTax;                                          // 0x0064(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PaymentProviderFee;                                // 0x0068(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PaymentMethodFee;                                  // 0x006C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FAccelByteModelsOrderCurrencySummary   Currency;                                          // 0x0070(0x0040)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	class FString                                 PaymentStationUrl;                                 // 0x00B0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FAccelByteModelsEntitlementItemSnapshot ItemSnapshot;                                      // 0x00C0(0x0168)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	class FString                                 Region;                                            // 0x0228(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Language;                                          // 0x0238(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAccelByteOrderStatus                         Status;                                            // 0x0248(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_249[0x7];                                      // 0x0249(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 StatusReason;                                      // 0x0250(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDateTime                              CreatedTime;                                       // 0x0260(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDateTime                              ChargedTime;                                       // 0x0268(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDateTime                              FulfilledTime;                                     // 0x0270(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDateTime                              RefundedTime;                                      // 0x0278(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDateTime                              ChargebackTime;                                    // 0x0280(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDateTime                              ChargebackReversedTime;                            // 0x0288(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDateTime                              CreatedAt;                                         // 0x0290(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDateTime                              UpdatedAt;                                         // 0x0298(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsOrderInfo) == 0x000008, "Wrong alignment on FAccelByteModelsOrderInfo");
static_assert(sizeof(FAccelByteModelsOrderInfo) == 0x0002A0, "Wrong size on FAccelByteModelsOrderInfo");
static_assert(offsetof(FAccelByteModelsOrderInfo, OrderNo) == 0x000000, "Member 'FAccelByteModelsOrderInfo::OrderNo' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsOrderInfo, PaymentOrderNo) == 0x000010, "Member 'FAccelByteModelsOrderInfo::PaymentOrderNo' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsOrderInfo, Namespace) == 0x000020, "Member 'FAccelByteModelsOrderInfo::Namespace' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsOrderInfo, UserId) == 0x000030, "Member 'FAccelByteModelsOrderInfo::UserId' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsOrderInfo, ItemId) == 0x000040, "Member 'FAccelByteModelsOrderInfo::ItemId' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsOrderInfo, Sandbox) == 0x000050, "Member 'FAccelByteModelsOrderInfo::Sandbox' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsOrderInfo, Quantity) == 0x000054, "Member 'FAccelByteModelsOrderInfo::Quantity' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsOrderInfo, Price) == 0x000058, "Member 'FAccelByteModelsOrderInfo::Price' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsOrderInfo, DiscountedPrice) == 0x00005C, "Member 'FAccelByteModelsOrderInfo::DiscountedPrice' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsOrderInfo, Vat) == 0x000060, "Member 'FAccelByteModelsOrderInfo::Vat' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsOrderInfo, SalesTax) == 0x000064, "Member 'FAccelByteModelsOrderInfo::SalesTax' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsOrderInfo, PaymentProviderFee) == 0x000068, "Member 'FAccelByteModelsOrderInfo::PaymentProviderFee' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsOrderInfo, PaymentMethodFee) == 0x00006C, "Member 'FAccelByteModelsOrderInfo::PaymentMethodFee' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsOrderInfo, Currency) == 0x000070, "Member 'FAccelByteModelsOrderInfo::Currency' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsOrderInfo, PaymentStationUrl) == 0x0000B0, "Member 'FAccelByteModelsOrderInfo::PaymentStationUrl' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsOrderInfo, ItemSnapshot) == 0x0000C0, "Member 'FAccelByteModelsOrderInfo::ItemSnapshot' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsOrderInfo, Region) == 0x000228, "Member 'FAccelByteModelsOrderInfo::Region' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsOrderInfo, Language) == 0x000238, "Member 'FAccelByteModelsOrderInfo::Language' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsOrderInfo, Status) == 0x000248, "Member 'FAccelByteModelsOrderInfo::Status' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsOrderInfo, StatusReason) == 0x000250, "Member 'FAccelByteModelsOrderInfo::StatusReason' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsOrderInfo, CreatedTime) == 0x000260, "Member 'FAccelByteModelsOrderInfo::CreatedTime' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsOrderInfo, ChargedTime) == 0x000268, "Member 'FAccelByteModelsOrderInfo::ChargedTime' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsOrderInfo, FulfilledTime) == 0x000270, "Member 'FAccelByteModelsOrderInfo::FulfilledTime' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsOrderInfo, RefundedTime) == 0x000278, "Member 'FAccelByteModelsOrderInfo::RefundedTime' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsOrderInfo, ChargebackTime) == 0x000280, "Member 'FAccelByteModelsOrderInfo::ChargebackTime' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsOrderInfo, ChargebackReversedTime) == 0x000288, "Member 'FAccelByteModelsOrderInfo::ChargebackReversedTime' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsOrderInfo, CreatedAt) == 0x000290, "Member 'FAccelByteModelsOrderInfo::CreatedAt' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsOrderInfo, UpdatedAt) == 0x000298, "Member 'FAccelByteModelsOrderInfo::UpdatedAt' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.StartMatchmakingRequest
// 0x0010 (0x0010 - 0x0000)
struct FStartMatchmakingRequest final
{
public:
	class FString                                 GameMode;                                          // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FStartMatchmakingRequest) == 0x000008, "Wrong alignment on FStartMatchmakingRequest");
static_assert(sizeof(FStartMatchmakingRequest) == 0x000010, "Wrong size on FStartMatchmakingRequest");
static_assert(offsetof(FStartMatchmakingRequest, GameMode) == 0x000000, "Member 'FStartMatchmakingRequest::GameMode' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsPagedOrderInfo
// 0x0050 (0x0050 - 0x0000)
struct FAccelByteModelsPagedOrderInfo final
{
public:
	TArray<struct FAccelByteModelsOrderInfo>      Data;                                              // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FAccelByteModelsPaging                 Paging;                                            // 0x0010(0x0040)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsPagedOrderInfo) == 0x000008, "Wrong alignment on FAccelByteModelsPagedOrderInfo");
static_assert(sizeof(FAccelByteModelsPagedOrderInfo) == 0x000050, "Wrong size on FAccelByteModelsPagedOrderInfo");
static_assert(offsetof(FAccelByteModelsPagedOrderInfo, Data) == 0x000000, "Member 'FAccelByteModelsPagedOrderInfo::Data' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsPagedOrderInfo, Paging) == 0x000010, "Member 'FAccelByteModelsPagedOrderInfo::Paging' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsOrderHistoryInfo
// 0x0070 (0x0070 - 0x0000)
struct FAccelByteModelsOrderHistoryInfo final
{
public:
	class FString                                 OrderNo;                                           // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Operator;                                          // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Action;                                            // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Reason;                                            // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Namespace;                                         // 0x0040(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 UserId;                                            // 0x0050(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDateTime                              CreatedAt;                                         // 0x0060(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDateTime                              UpdatedAt;                                         // 0x0068(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsOrderHistoryInfo) == 0x000008, "Wrong alignment on FAccelByteModelsOrderHistoryInfo");
static_assert(sizeof(FAccelByteModelsOrderHistoryInfo) == 0x000070, "Wrong size on FAccelByteModelsOrderHistoryInfo");
static_assert(offsetof(FAccelByteModelsOrderHistoryInfo, OrderNo) == 0x000000, "Member 'FAccelByteModelsOrderHistoryInfo::OrderNo' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsOrderHistoryInfo, Operator) == 0x000010, "Member 'FAccelByteModelsOrderHistoryInfo::Operator' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsOrderHistoryInfo, Action) == 0x000020, "Member 'FAccelByteModelsOrderHistoryInfo::Action' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsOrderHistoryInfo, Reason) == 0x000030, "Member 'FAccelByteModelsOrderHistoryInfo::Reason' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsOrderHistoryInfo, Namespace) == 0x000040, "Member 'FAccelByteModelsOrderHistoryInfo::Namespace' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsOrderHistoryInfo, UserId) == 0x000050, "Member 'FAccelByteModelsOrderHistoryInfo::UserId' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsOrderHistoryInfo, CreatedAt) == 0x000060, "Member 'FAccelByteModelsOrderHistoryInfo::CreatedAt' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsOrderHistoryInfo, UpdatedAt) == 0x000068, "Member 'FAccelByteModelsOrderHistoryInfo::UpdatedAt' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.ArrayModelsOrderHistoryInfo
// 0x0010 (0x0010 - 0x0000)
struct FArrayModelsOrderHistoryInfo final
{
public:
	TArray<struct FAccelByteModelsOrderHistoryInfo> Content;                                           // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FArrayModelsOrderHistoryInfo) == 0x000008, "Wrong alignment on FArrayModelsOrderHistoryInfo");
static_assert(sizeof(FArrayModelsOrderHistoryInfo) == 0x000010, "Wrong size on FArrayModelsOrderHistoryInfo");
static_assert(offsetof(FArrayModelsOrderHistoryInfo, Content) == 0x000000, "Member 'FArrayModelsOrderHistoryInfo::Content' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsInfoPartyResponse
// 0x0070 (0x0070 - 0x0000)
struct FAccelByteModelsInfoPartyResponse final
{
public:
	class FString                                 Code;                                              // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 PartyId;                                           // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 LeaderId;                                          // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Leader;                                            // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FString>                         Members;                                           // 0x0040(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class FString>                         Invitees;                                          // 0x0050(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	class FString                                 InvitationToken;                                   // 0x0060(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsInfoPartyResponse) == 0x000008, "Wrong alignment on FAccelByteModelsInfoPartyResponse");
static_assert(sizeof(FAccelByteModelsInfoPartyResponse) == 0x000070, "Wrong size on FAccelByteModelsInfoPartyResponse");
static_assert(offsetof(FAccelByteModelsInfoPartyResponse, Code) == 0x000000, "Member 'FAccelByteModelsInfoPartyResponse::Code' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsInfoPartyResponse, PartyId) == 0x000010, "Member 'FAccelByteModelsInfoPartyResponse::PartyId' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsInfoPartyResponse, LeaderId) == 0x000020, "Member 'FAccelByteModelsInfoPartyResponse::LeaderId' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsInfoPartyResponse, Leader) == 0x000030, "Member 'FAccelByteModelsInfoPartyResponse::Leader' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsInfoPartyResponse, Members) == 0x000040, "Member 'FAccelByteModelsInfoPartyResponse::Members' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsInfoPartyResponse, Invitees) == 0x000050, "Member 'FAccelByteModelsInfoPartyResponse::Invitees' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsInfoPartyResponse, InvitationToken) == 0x000060, "Member 'FAccelByteModelsInfoPartyResponse::InvitationToken' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteJwtError
// 0x0018 (0x0018 - 0x0000)
struct FAccelByteJwtError final
{
public:
	int32                                         Code;                                              // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Message;                                           // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteJwtError) == 0x000008, "Wrong alignment on FAccelByteJwtError");
static_assert(sizeof(FAccelByteJwtError) == 0x000018, "Wrong size on FAccelByteJwtError");
static_assert(offsetof(FAccelByteJwtError, Code) == 0x000000, "Member 'FAccelByteJwtError::Code' has a wrong offset!");
static_assert(offsetof(FAccelByteJwtError, Message) == 0x000008, "Member 'FAccelByteJwtError::Message' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsCreatePartyResponse
// 0x0080 (0x0080 - 0x0000)
struct FAccelByteModelsCreatePartyResponse final
{
public:
	class FString                                 Code;                                              // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 PartyId;                                           // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 LeaderId;                                          // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Leader;                                            // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FString>                         Members;                                           // 0x0040(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class FString>                         Invitees;                                          // 0x0050(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	class FString                                 InvitationToken;                                   // 0x0060(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 PartyCode;                                         // 0x0070(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsCreatePartyResponse) == 0x000008, "Wrong alignment on FAccelByteModelsCreatePartyResponse");
static_assert(sizeof(FAccelByteModelsCreatePartyResponse) == 0x000080, "Wrong size on FAccelByteModelsCreatePartyResponse");
static_assert(offsetof(FAccelByteModelsCreatePartyResponse, Code) == 0x000000, "Member 'FAccelByteModelsCreatePartyResponse::Code' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsCreatePartyResponse, PartyId) == 0x000010, "Member 'FAccelByteModelsCreatePartyResponse::PartyId' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsCreatePartyResponse, LeaderId) == 0x000020, "Member 'FAccelByteModelsCreatePartyResponse::LeaderId' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsCreatePartyResponse, Leader) == 0x000030, "Member 'FAccelByteModelsCreatePartyResponse::Leader' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsCreatePartyResponse, Members) == 0x000040, "Member 'FAccelByteModelsCreatePartyResponse::Members' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsCreatePartyResponse, Invitees) == 0x000050, "Member 'FAccelByteModelsCreatePartyResponse::Invitees' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsCreatePartyResponse, InvitationToken) == 0x000060, "Member 'FAccelByteModelsCreatePartyResponse::InvitationToken' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsCreatePartyResponse, PartyCode) == 0x000070, "Member 'FAccelByteModelsCreatePartyResponse::PartyCode' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsPlatformSyncMobileApple
// 0x0058 (0x0058 - 0x0000)
struct FAccelByteModelsPlatformSyncMobileApple final
{
public:
	class FString                                 ProductId;                                         // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 TransactionId;                                     // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ReceiptData;                                       // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ExcludeOldTransactions;                            // 0x0030(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Region;                                            // 0x0038(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Language;                                          // 0x0048(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsPlatformSyncMobileApple) == 0x000008, "Wrong alignment on FAccelByteModelsPlatformSyncMobileApple");
static_assert(sizeof(FAccelByteModelsPlatformSyncMobileApple) == 0x000058, "Wrong size on FAccelByteModelsPlatformSyncMobileApple");
static_assert(offsetof(FAccelByteModelsPlatformSyncMobileApple, ProductId) == 0x000000, "Member 'FAccelByteModelsPlatformSyncMobileApple::ProductId' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsPlatformSyncMobileApple, TransactionId) == 0x000010, "Member 'FAccelByteModelsPlatformSyncMobileApple::TransactionId' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsPlatformSyncMobileApple, ReceiptData) == 0x000020, "Member 'FAccelByteModelsPlatformSyncMobileApple::ReceiptData' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsPlatformSyncMobileApple, ExcludeOldTransactions) == 0x000030, "Member 'FAccelByteModelsPlatformSyncMobileApple::ExcludeOldTransactions' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsPlatformSyncMobileApple, Region) == 0x000038, "Member 'FAccelByteModelsPlatformSyncMobileApple::Region' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsPlatformSyncMobileApple, Language) == 0x000048, "Member 'FAccelByteModelsPlatformSyncMobileApple::Language' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsLeavePartyResponse
// 0x0010 (0x0010 - 0x0000)
struct FAccelByteModelsLeavePartyResponse final
{
public:
	class FString                                 Code;                                              // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsLeavePartyResponse) == 0x000008, "Wrong alignment on FAccelByteModelsLeavePartyResponse");
static_assert(sizeof(FAccelByteModelsLeavePartyResponse) == 0x000010, "Wrong size on FAccelByteModelsLeavePartyResponse");
static_assert(offsetof(FAccelByteModelsLeavePartyResponse, Code) == 0x000000, "Member 'FAccelByteModelsLeavePartyResponse::Code' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsPartyInviteResponse
// 0x0020 (0x0020 - 0x0000)
struct FAccelByteModelsPartyInviteResponse final
{
public:
	class FString                                 Code;                                              // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 InviteeID;                                         // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsPartyInviteResponse) == 0x000008, "Wrong alignment on FAccelByteModelsPartyInviteResponse");
static_assert(sizeof(FAccelByteModelsPartyInviteResponse) == 0x000020, "Wrong size on FAccelByteModelsPartyInviteResponse");
static_assert(offsetof(FAccelByteModelsPartyInviteResponse, Code) == 0x000000, "Member 'FAccelByteModelsPartyInviteResponse::Code' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsPartyInviteResponse, InviteeID) == 0x000010, "Member 'FAccelByteModelsPartyInviteResponse::InviteeID' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.PublicUserInfo
// 0x0050 (0x0050 - 0x0000)
struct FPublicUserInfo final
{
public:
	class FString                                 CreatedAt;                                         // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 DisplayName;                                       // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Namespace;                                         // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 UserId;                                            // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Username;                                          // 0x0040(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPublicUserInfo) == 0x000008, "Wrong alignment on FPublicUserInfo");
static_assert(sizeof(FPublicUserInfo) == 0x000050, "Wrong size on FPublicUserInfo");
static_assert(offsetof(FPublicUserInfo, CreatedAt) == 0x000000, "Member 'FPublicUserInfo::CreatedAt' has a wrong offset!");
static_assert(offsetof(FPublicUserInfo, DisplayName) == 0x000010, "Member 'FPublicUserInfo::DisplayName' has a wrong offset!");
static_assert(offsetof(FPublicUserInfo, Namespace) == 0x000020, "Member 'FPublicUserInfo::Namespace' has a wrong offset!");
static_assert(offsetof(FPublicUserInfo, UserId) == 0x000030, "Member 'FPublicUserInfo::UserId' has a wrong offset!");
static_assert(offsetof(FPublicUserInfo, Username) == 0x000040, "Member 'FPublicUserInfo::Username' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsPartyJoinResponse
// 0x0070 (0x0070 - 0x0000)
struct FAccelByteModelsPartyJoinResponse final
{
public:
	class FString                                 Code;                                              // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 PartyId;                                           // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 LeaderId;                                          // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Leader;                                            // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FString>                         Members;                                           // 0x0040(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class FString>                         Invitees;                                          // 0x0050(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	class FString                                 InvitationToken;                                   // 0x0060(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsPartyJoinResponse) == 0x000008, "Wrong alignment on FAccelByteModelsPartyJoinResponse");
static_assert(sizeof(FAccelByteModelsPartyJoinResponse) == 0x000070, "Wrong size on FAccelByteModelsPartyJoinResponse");
static_assert(offsetof(FAccelByteModelsPartyJoinResponse, Code) == 0x000000, "Member 'FAccelByteModelsPartyJoinResponse::Code' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsPartyJoinResponse, PartyId) == 0x000010, "Member 'FAccelByteModelsPartyJoinResponse::PartyId' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsPartyJoinResponse, LeaderId) == 0x000020, "Member 'FAccelByteModelsPartyJoinResponse::LeaderId' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsPartyJoinResponse, Leader) == 0x000030, "Member 'FAccelByteModelsPartyJoinResponse::Leader' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsPartyJoinResponse, Members) == 0x000040, "Member 'FAccelByteModelsPartyJoinResponse::Members' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsPartyJoinResponse, Invitees) == 0x000050, "Member 'FAccelByteModelsPartyJoinResponse::Invitees' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsPartyJoinResponse, InvitationToken) == 0x000060, "Member 'FAccelByteModelsPartyJoinResponse::InvitationToken' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.RegisterResponse
// 0x0080 (0x0080 - 0x0000)
struct FRegisterResponse final
{
public:
	class FString                                 Namespace;                                         // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 UserId;                                            // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 AuthType;                                          // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 DisplayName;                                       // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 EmailAddress;                                      // 0x0040(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Country;                                           // 0x0050(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 DateOfBirth;                                       // 0x0060(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Username;                                          // 0x0070(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRegisterResponse) == 0x000008, "Wrong alignment on FRegisterResponse");
static_assert(sizeof(FRegisterResponse) == 0x000080, "Wrong size on FRegisterResponse");
static_assert(offsetof(FRegisterResponse, Namespace) == 0x000000, "Member 'FRegisterResponse::Namespace' has a wrong offset!");
static_assert(offsetof(FRegisterResponse, UserId) == 0x000010, "Member 'FRegisterResponse::UserId' has a wrong offset!");
static_assert(offsetof(FRegisterResponse, AuthType) == 0x000020, "Member 'FRegisterResponse::AuthType' has a wrong offset!");
static_assert(offsetof(FRegisterResponse, DisplayName) == 0x000030, "Member 'FRegisterResponse::DisplayName' has a wrong offset!");
static_assert(offsetof(FRegisterResponse, EmailAddress) == 0x000040, "Member 'FRegisterResponse::EmailAddress' has a wrong offset!");
static_assert(offsetof(FRegisterResponse, Country) == 0x000050, "Member 'FRegisterResponse::Country' has a wrong offset!");
static_assert(offsetof(FRegisterResponse, DateOfBirth) == 0x000060, "Member 'FRegisterResponse::DateOfBirth' has a wrong offset!");
static_assert(offsetof(FRegisterResponse, Username) == 0x000070, "Member 'FRegisterResponse::Username' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsPartyRejectResponse
// 0x0020 (0x0020 - 0x0000)
struct FAccelByteModelsPartyRejectResponse final
{
public:
	class FString                                 Code;                                              // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 PartyId;                                           // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsPartyRejectResponse) == 0x000008, "Wrong alignment on FAccelByteModelsPartyRejectResponse");
static_assert(sizeof(FAccelByteModelsPartyRejectResponse) == 0x000020, "Wrong size on FAccelByteModelsPartyRejectResponse");
static_assert(offsetof(FAccelByteModelsPartyRejectResponse, Code) == 0x000000, "Member 'FAccelByteModelsPartyRejectResponse::Code' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsPartyRejectResponse, PartyId) == 0x000010, "Member 'FAccelByteModelsPartyRejectResponse::PartyId' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsConsumeUserEntitlementRequest
// 0x0004 (0x0004 - 0x0000)
struct FAccelByteModelsConsumeUserEntitlementRequest final
{
public:
	int32                                         UseCount;                                          // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsConsumeUserEntitlementRequest) == 0x000004, "Wrong alignment on FAccelByteModelsConsumeUserEntitlementRequest");
static_assert(sizeof(FAccelByteModelsConsumeUserEntitlementRequest) == 0x000004, "Wrong size on FAccelByteModelsConsumeUserEntitlementRequest");
static_assert(offsetof(FAccelByteModelsConsumeUserEntitlementRequest, UseCount) == 0x000000, "Member 'FAccelByteModelsConsumeUserEntitlementRequest::UseCount' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsKickPartyMemberResponse
// 0x0020 (0x0020 - 0x0000)
struct FAccelByteModelsKickPartyMemberResponse final
{
public:
	class FString                                 Code;                                              // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 UserId;                                            // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsKickPartyMemberResponse) == 0x000008, "Wrong alignment on FAccelByteModelsKickPartyMemberResponse");
static_assert(sizeof(FAccelByteModelsKickPartyMemberResponse) == 0x000020, "Wrong size on FAccelByteModelsKickPartyMemberResponse");
static_assert(offsetof(FAccelByteModelsKickPartyMemberResponse, Code) == 0x000000, "Member 'FAccelByteModelsKickPartyMemberResponse::Code' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsKickPartyMemberResponse, UserId) == 0x000010, "Member 'FAccelByteModelsKickPartyMemberResponse::UserId' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsPartyGenerateCodeResponse
// 0x0020 (0x0020 - 0x0000)
struct FAccelByteModelsPartyGenerateCodeResponse final
{
public:
	class FString                                 PartyCode;                                         // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Code;                                              // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsPartyGenerateCodeResponse) == 0x000008, "Wrong alignment on FAccelByteModelsPartyGenerateCodeResponse");
static_assert(sizeof(FAccelByteModelsPartyGenerateCodeResponse) == 0x000020, "Wrong size on FAccelByteModelsPartyGenerateCodeResponse");
static_assert(offsetof(FAccelByteModelsPartyGenerateCodeResponse, PartyCode) == 0x000000, "Member 'FAccelByteModelsPartyGenerateCodeResponse::PartyCode' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsPartyGenerateCodeResponse, Code) == 0x000010, "Member 'FAccelByteModelsPartyGenerateCodeResponse::Code' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsPartyGetCodeResponse
// 0x0020 (0x0020 - 0x0000)
struct FAccelByteModelsPartyGetCodeResponse final
{
public:
	class FString                                 PartyCode;                                         // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Code;                                              // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsPartyGetCodeResponse) == 0x000008, "Wrong alignment on FAccelByteModelsPartyGetCodeResponse");
static_assert(sizeof(FAccelByteModelsPartyGetCodeResponse) == 0x000020, "Wrong size on FAccelByteModelsPartyGetCodeResponse");
static_assert(offsetof(FAccelByteModelsPartyGetCodeResponse, PartyCode) == 0x000000, "Member 'FAccelByteModelsPartyGetCodeResponse::PartyCode' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsPartyGetCodeResponse, Code) == 0x000010, "Member 'FAccelByteModelsPartyGetCodeResponse::Code' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsPartyDeleteCodeResponse
// 0x0010 (0x0010 - 0x0000)
struct FAccelByteModelsPartyDeleteCodeResponse final
{
public:
	class FString                                 Code;                                              // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsPartyDeleteCodeResponse) == 0x000008, "Wrong alignment on FAccelByteModelsPartyDeleteCodeResponse");
static_assert(sizeof(FAccelByteModelsPartyDeleteCodeResponse) == 0x000010, "Wrong size on FAccelByteModelsPartyDeleteCodeResponse");
static_assert(offsetof(FAccelByteModelsPartyDeleteCodeResponse, Code) == 0x000000, "Member 'FAccelByteModelsPartyDeleteCodeResponse::Code' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsFulfillmentRequest
// 0x0050 (0x0050 - 0x0000)
struct FAccelByteModelsFulfillmentRequest final
{
public:
	class FString                                 ItemId;                                            // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Quantity;                                          // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 OrderNo;                                           // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAccelByteItemSource                          Source;                                            // 0x0028(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Region;                                            // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Language;                                          // 0x0040(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsFulfillmentRequest) == 0x000008, "Wrong alignment on FAccelByteModelsFulfillmentRequest");
static_assert(sizeof(FAccelByteModelsFulfillmentRequest) == 0x000050, "Wrong size on FAccelByteModelsFulfillmentRequest");
static_assert(offsetof(FAccelByteModelsFulfillmentRequest, ItemId) == 0x000000, "Member 'FAccelByteModelsFulfillmentRequest::ItemId' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsFulfillmentRequest, Quantity) == 0x000010, "Member 'FAccelByteModelsFulfillmentRequest::Quantity' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsFulfillmentRequest, OrderNo) == 0x000018, "Member 'FAccelByteModelsFulfillmentRequest::OrderNo' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsFulfillmentRequest, Source) == 0x000028, "Member 'FAccelByteModelsFulfillmentRequest::Source' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsFulfillmentRequest, Region) == 0x000030, "Member 'FAccelByteModelsFulfillmentRequest::Region' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsFulfillmentRequest, Language) == 0x000040, "Member 'FAccelByteModelsFulfillmentRequest::Language' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsPartyPromoteLeaderResponse
// 0x0070 (0x0070 - 0x0000)
struct FAccelByteModelsPartyPromoteLeaderResponse final
{
public:
	class FString                                 PartyId;                                           // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 LeaderId;                                          // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Leader;                                            // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FString>                         Members;                                           // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class FString>                         Invitees;                                          // 0x0040(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	class FString                                 InvitationToken;                                   // 0x0050(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Code;                                              // 0x0060(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsPartyPromoteLeaderResponse) == 0x000008, "Wrong alignment on FAccelByteModelsPartyPromoteLeaderResponse");
static_assert(sizeof(FAccelByteModelsPartyPromoteLeaderResponse) == 0x000070, "Wrong size on FAccelByteModelsPartyPromoteLeaderResponse");
static_assert(offsetof(FAccelByteModelsPartyPromoteLeaderResponse, PartyId) == 0x000000, "Member 'FAccelByteModelsPartyPromoteLeaderResponse::PartyId' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsPartyPromoteLeaderResponse, LeaderId) == 0x000010, "Member 'FAccelByteModelsPartyPromoteLeaderResponse::LeaderId' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsPartyPromoteLeaderResponse, Leader) == 0x000020, "Member 'FAccelByteModelsPartyPromoteLeaderResponse::Leader' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsPartyPromoteLeaderResponse, Members) == 0x000030, "Member 'FAccelByteModelsPartyPromoteLeaderResponse::Members' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsPartyPromoteLeaderResponse, Invitees) == 0x000040, "Member 'FAccelByteModelsPartyPromoteLeaderResponse::Invitees' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsPartyPromoteLeaderResponse, InvitationToken) == 0x000050, "Member 'FAccelByteModelsPartyPromoteLeaderResponse::InvitationToken' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsPartyPromoteLeaderResponse, Code) == 0x000060, "Member 'FAccelByteModelsPartyPromoteLeaderResponse::Code' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsPartyData
// 0x0078 (0x0078 - 0x0000)
struct FAccelByteModelsPartyData final
{
public:
	struct FJsonObjectWrapper                     Custom_Attribute;                                  // 0x0000(0x0020)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	TArray<class FString>                         Invitees;                                          // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	class FString                                 Leader;                                            // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FString>                         Members;                                           // 0x0040(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	class FString                                 Namespace;                                         // 0x0050(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 PartyId;                                           // 0x0060(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int64                                         UpdatedAt;                                         // 0x0070(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsPartyData) == 0x000008, "Wrong alignment on FAccelByteModelsPartyData");
static_assert(sizeof(FAccelByteModelsPartyData) == 0x000078, "Wrong size on FAccelByteModelsPartyData");
static_assert(offsetof(FAccelByteModelsPartyData, Custom_Attribute) == 0x000000, "Member 'FAccelByteModelsPartyData::Custom_Attribute' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsPartyData, Invitees) == 0x000020, "Member 'FAccelByteModelsPartyData::Invitees' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsPartyData, Leader) == 0x000030, "Member 'FAccelByteModelsPartyData::Leader' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsPartyData, Members) == 0x000040, "Member 'FAccelByteModelsPartyData::Members' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsPartyData, Namespace) == 0x000050, "Member 'FAccelByteModelsPartyData::Namespace' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsPartyData, PartyId) == 0x000060, "Member 'FAccelByteModelsPartyData::PartyId' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsPartyData, UpdatedAt) == 0x000070, "Member 'FAccelByteModelsPartyData::UpdatedAt' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsPartyDataNotif
// 0x0080 (0x0080 - 0x0000)
struct FAccelByteModelsPartyDataNotif final
{
public:
	class FString                                 PartyId;                                           // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Namespace;                                         // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Leader;                                            // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FString>                         Members;                                           // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class FString>                         Invitees;                                          // 0x0040(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FJsonObjectWrapper                     Custom_Attribute;                                  // 0x0050(0x0020)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	class FString                                 UpdatedAt;                                         // 0x0070(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsPartyDataNotif) == 0x000008, "Wrong alignment on FAccelByteModelsPartyDataNotif");
static_assert(sizeof(FAccelByteModelsPartyDataNotif) == 0x000080, "Wrong size on FAccelByteModelsPartyDataNotif");
static_assert(offsetof(FAccelByteModelsPartyDataNotif, PartyId) == 0x000000, "Member 'FAccelByteModelsPartyDataNotif::PartyId' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsPartyDataNotif, Namespace) == 0x000010, "Member 'FAccelByteModelsPartyDataNotif::Namespace' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsPartyDataNotif, Leader) == 0x000020, "Member 'FAccelByteModelsPartyDataNotif::Leader' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsPartyDataNotif, Members) == 0x000030, "Member 'FAccelByteModelsPartyDataNotif::Members' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsPartyDataNotif, Invitees) == 0x000040, "Member 'FAccelByteModelsPartyDataNotif::Invitees' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsPartyDataNotif, Custom_Attribute) == 0x000050, "Member 'FAccelByteModelsPartyDataNotif::Custom_Attribute' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsPartyDataNotif, UpdatedAt) == 0x000070, "Member 'FAccelByteModelsPartyDataNotif::UpdatedAt' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsPartyGetInvitedNotice
// 0x0030 (0x0030 - 0x0000)
struct FAccelByteModelsPartyGetInvitedNotice final
{
public:
	class FString                                 From;                                              // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 PartyId;                                           // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 InvitationToken;                                   // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsPartyGetInvitedNotice) == 0x000008, "Wrong alignment on FAccelByteModelsPartyGetInvitedNotice");
static_assert(sizeof(FAccelByteModelsPartyGetInvitedNotice) == 0x000030, "Wrong size on FAccelByteModelsPartyGetInvitedNotice");
static_assert(offsetof(FAccelByteModelsPartyGetInvitedNotice, From) == 0x000000, "Member 'FAccelByteModelsPartyGetInvitedNotice::From' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsPartyGetInvitedNotice, PartyId) == 0x000010, "Member 'FAccelByteModelsPartyGetInvitedNotice::PartyId' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsPartyGetInvitedNotice, InvitationToken) == 0x000020, "Member 'FAccelByteModelsPartyGetInvitedNotice::InvitationToken' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsPartyJoinNotice
// 0x0010 (0x0010 - 0x0000)
struct FAccelByteModelsPartyJoinNotice final
{
public:
	class FString                                 UserId;                                            // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsPartyJoinNotice) == 0x000008, "Wrong alignment on FAccelByteModelsPartyJoinNotice");
static_assert(sizeof(FAccelByteModelsPartyJoinNotice) == 0x000010, "Wrong size on FAccelByteModelsPartyJoinNotice");
static_assert(offsetof(FAccelByteModelsPartyJoinNotice, UserId) == 0x000000, "Member 'FAccelByteModelsPartyJoinNotice::UserId' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsPartyRejectNotice
// 0x0040 (0x0040 - 0x0000)
struct FAccelByteModelsPartyRejectNotice final
{
public:
	class FString                                 PartyId;                                           // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 LeaderId;                                          // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Leader;                                            // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 UserId;                                            // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsPartyRejectNotice) == 0x000008, "Wrong alignment on FAccelByteModelsPartyRejectNotice");
static_assert(sizeof(FAccelByteModelsPartyRejectNotice) == 0x000040, "Wrong size on FAccelByteModelsPartyRejectNotice");
static_assert(offsetof(FAccelByteModelsPartyRejectNotice, PartyId) == 0x000000, "Member 'FAccelByteModelsPartyRejectNotice::PartyId' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsPartyRejectNotice, LeaderId) == 0x000010, "Member 'FAccelByteModelsPartyRejectNotice::LeaderId' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsPartyRejectNotice, Leader) == 0x000020, "Member 'FAccelByteModelsPartyRejectNotice::Leader' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsPartyRejectNotice, UserId) == 0x000030, "Member 'FAccelByteModelsPartyRejectNotice::UserId' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsLimitOffsetRequest
// 0x0008 (0x0008 - 0x0000)
struct FAccelByteModelsLimitOffsetRequest
{
public:
	int32                                         Limit;                                             // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Offset;                                            // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsLimitOffsetRequest) == 0x000004, "Wrong alignment on FAccelByteModelsLimitOffsetRequest");
static_assert(sizeof(FAccelByteModelsLimitOffsetRequest) == 0x000008, "Wrong size on FAccelByteModelsLimitOffsetRequest");
static_assert(offsetof(FAccelByteModelsLimitOffsetRequest, Limit) == 0x000000, "Member 'FAccelByteModelsLimitOffsetRequest::Limit' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsLimitOffsetRequest, Offset) == 0x000004, "Member 'FAccelByteModelsLimitOffsetRequest::Offset' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsLeavePartyNotice
// 0x0040 (0x0040 - 0x0000)
struct FAccelByteModelsLeavePartyNotice final
{
public:
	class FString                                 UserId;                                            // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 LeaderId;                                          // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Leader;                                            // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 PartyId;                                           // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsLeavePartyNotice) == 0x000008, "Wrong alignment on FAccelByteModelsLeavePartyNotice");
static_assert(sizeof(FAccelByteModelsLeavePartyNotice) == 0x000040, "Wrong size on FAccelByteModelsLeavePartyNotice");
static_assert(offsetof(FAccelByteModelsLeavePartyNotice, UserId) == 0x000000, "Member 'FAccelByteModelsLeavePartyNotice::UserId' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsLeavePartyNotice, LeaderId) == 0x000010, "Member 'FAccelByteModelsLeavePartyNotice::LeaderId' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsLeavePartyNotice, Leader) == 0x000020, "Member 'FAccelByteModelsLeavePartyNotice::Leader' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsLeavePartyNotice, PartyId) == 0x000030, "Member 'FAccelByteModelsLeavePartyNotice::PartyId' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsGotKickedFromPartyNotice
// 0x0040 (0x0040 - 0x0000)
struct FAccelByteModelsGotKickedFromPartyNotice final
{
public:
	class FString                                 LeaderId;                                          // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Leader;                                            // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 UserId;                                            // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 PartyId;                                           // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsGotKickedFromPartyNotice) == 0x000008, "Wrong alignment on FAccelByteModelsGotKickedFromPartyNotice");
static_assert(sizeof(FAccelByteModelsGotKickedFromPartyNotice) == 0x000040, "Wrong size on FAccelByteModelsGotKickedFromPartyNotice");
static_assert(offsetof(FAccelByteModelsGotKickedFromPartyNotice, LeaderId) == 0x000000, "Member 'FAccelByteModelsGotKickedFromPartyNotice::LeaderId' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsGotKickedFromPartyNotice, Leader) == 0x000010, "Member 'FAccelByteModelsGotKickedFromPartyNotice::Leader' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsGotKickedFromPartyNotice, UserId) == 0x000020, "Member 'FAccelByteModelsGotKickedFromPartyNotice::UserId' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsGotKickedFromPartyNotice, PartyId) == 0x000030, "Member 'FAccelByteModelsGotKickedFromPartyNotice::PartyId' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsInvitationNotice
// 0x0020 (0x0020 - 0x0000)
struct FAccelByteModelsInvitationNotice final
{
public:
	class FString                                 InviterID;                                         // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 InviteeID;                                         // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsInvitationNotice) == 0x000008, "Wrong alignment on FAccelByteModelsInvitationNotice");
static_assert(sizeof(FAccelByteModelsInvitationNotice) == 0x000020, "Wrong size on FAccelByteModelsInvitationNotice");
static_assert(offsetof(FAccelByteModelsInvitationNotice, InviterID) == 0x000000, "Member 'FAccelByteModelsInvitationNotice::InviterID' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsInvitationNotice, InviteeID) == 0x000010, "Member 'FAccelByteModelsInvitationNotice::InviteeID' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsPartyMemberConnectionNotice
// 0x0020 (0x0020 - 0x0000)
struct FAccelByteModelsPartyMemberConnectionNotice final
{
public:
	class FString                                 UserId;                                            // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 PartyId;                                           // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsPartyMemberConnectionNotice) == 0x000008, "Wrong alignment on FAccelByteModelsPartyMemberConnectionNotice");
static_assert(sizeof(FAccelByteModelsPartyMemberConnectionNotice) == 0x000020, "Wrong size on FAccelByteModelsPartyMemberConnectionNotice");
static_assert(offsetof(FAccelByteModelsPartyMemberConnectionNotice, UserId) == 0x000000, "Member 'FAccelByteModelsPartyMemberConnectionNotice::UserId' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsPartyMemberConnectionNotice, PartyId) == 0x000010, "Member 'FAccelByteModelsPartyMemberConnectionNotice::PartyId' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsGetOnlineUsersResponse
// 0x0070 (0x0070 - 0x0000)
struct FAccelByteModelsGetOnlineUsersResponse final
{
public:
	class FString                                 Code;                                              // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Type;                                              // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ID;                                                // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FString>                         FriendsId;                                         // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<EAvailability>                         Availability;                                      // 0x0040(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class FString>                         Activity;                                          // 0x0050(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class FString>                         LastSeenAt;                                        // 0x0060(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsGetOnlineUsersResponse) == 0x000008, "Wrong alignment on FAccelByteModelsGetOnlineUsersResponse");
static_assert(sizeof(FAccelByteModelsGetOnlineUsersResponse) == 0x000070, "Wrong size on FAccelByteModelsGetOnlineUsersResponse");
static_assert(offsetof(FAccelByteModelsGetOnlineUsersResponse, Code) == 0x000000, "Member 'FAccelByteModelsGetOnlineUsersResponse::Code' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsGetOnlineUsersResponse, Type) == 0x000010, "Member 'FAccelByteModelsGetOnlineUsersResponse::Type' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsGetOnlineUsersResponse, ID) == 0x000020, "Member 'FAccelByteModelsGetOnlineUsersResponse::ID' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsGetOnlineUsersResponse, FriendsId) == 0x000030, "Member 'FAccelByteModelsGetOnlineUsersResponse::FriendsId' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsGetOnlineUsersResponse, Availability) == 0x000040, "Member 'FAccelByteModelsGetOnlineUsersResponse::Availability' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsGetOnlineUsersResponse, Activity) == 0x000050, "Member 'FAccelByteModelsGetOnlineUsersResponse::Activity' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsGetOnlineUsersResponse, LastSeenAt) == 0x000060, "Member 'FAccelByteModelsGetOnlineUsersResponse::LastSeenAt' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsUserStatusNotif
// 0x0048 (0x0048 - 0x0000)
struct FAccelByteModelsUserStatusNotif final
{
public:
	class FString                                 UserId;                                            // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAvailability                                 Availability;                                      // 0x0010(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Activity;                                          // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Namespace;                                         // 0x0028(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 LastSeenAt;                                        // 0x0038(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsUserStatusNotif) == 0x000008, "Wrong alignment on FAccelByteModelsUserStatusNotif");
static_assert(sizeof(FAccelByteModelsUserStatusNotif) == 0x000048, "Wrong size on FAccelByteModelsUserStatusNotif");
static_assert(offsetof(FAccelByteModelsUserStatusNotif, UserId) == 0x000000, "Member 'FAccelByteModelsUserStatusNotif::UserId' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsUserStatusNotif, Availability) == 0x000010, "Member 'FAccelByteModelsUserStatusNotif::Availability' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsUserStatusNotif, Activity) == 0x000018, "Member 'FAccelByteModelsUserStatusNotif::Activity' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsUserStatusNotif, Namespace) == 0x000028, "Member 'FAccelByteModelsUserStatusNotif::Namespace' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsUserStatusNotif, LastSeenAt) == 0x000038, "Member 'FAccelByteModelsUserStatusNotif::LastSeenAt' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsBulkUserStatusNotif
// 0x0020 (0x0020 - 0x0000)
struct FAccelByteModelsBulkUserStatusNotif final
{
public:
	TArray<struct FAccelByteModelsUserStatusNotif> Data;                                              // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         Online;                                            // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Busy;                                              // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Invisible;                                         // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Offline;                                           // 0x001C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsBulkUserStatusNotif) == 0x000008, "Wrong alignment on FAccelByteModelsBulkUserStatusNotif");
static_assert(sizeof(FAccelByteModelsBulkUserStatusNotif) == 0x000020, "Wrong size on FAccelByteModelsBulkUserStatusNotif");
static_assert(offsetof(FAccelByteModelsBulkUserStatusNotif, Data) == 0x000000, "Member 'FAccelByteModelsBulkUserStatusNotif::Data' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsBulkUserStatusNotif, Online) == 0x000010, "Member 'FAccelByteModelsBulkUserStatusNotif::Online' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsBulkUserStatusNotif, Busy) == 0x000014, "Member 'FAccelByteModelsBulkUserStatusNotif::Busy' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsBulkUserStatusNotif, Invisible) == 0x000018, "Member 'FAccelByteModelsBulkUserStatusNotif::Invisible' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsBulkUserStatusNotif, Offline) == 0x00001C, "Member 'FAccelByteModelsBulkUserStatusNotif::Offline' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsCreditUserWalletRequest
// 0x0020 (0x0020 - 0x0000)
struct FAccelByteModelsCreditUserWalletRequest final
{
public:
	int32                                         Amount;                                            // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAccelByteCreditUserWalletSource              Source;                                            // 0x0004(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Reason;                                            // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAccelByteWalletTable                         Origin;                                            // 0x0018(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAccelByteModelsCreditUserWalletRequest) == 0x000008, "Wrong alignment on FAccelByteModelsCreditUserWalletRequest");
static_assert(sizeof(FAccelByteModelsCreditUserWalletRequest) == 0x000020, "Wrong size on FAccelByteModelsCreditUserWalletRequest");
static_assert(offsetof(FAccelByteModelsCreditUserWalletRequest, Amount) == 0x000000, "Member 'FAccelByteModelsCreditUserWalletRequest::Amount' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsCreditUserWalletRequest, Source) == 0x000004, "Member 'FAccelByteModelsCreditUserWalletRequest::Source' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsCreditUserWalletRequest, Reason) == 0x000008, "Member 'FAccelByteModelsCreditUserWalletRequest::Reason' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsCreditUserWalletRequest, Origin) == 0x000018, "Member 'FAccelByteModelsCreditUserWalletRequest::Origin' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsSetOnlineUsersResponse
// 0x0010 (0x0010 - 0x0000)
struct FAccelByteModelsSetOnlineUsersResponse final
{
public:
	class FString                                 Code;                                              // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsSetOnlineUsersResponse) == 0x000008, "Wrong alignment on FAccelByteModelsSetOnlineUsersResponse");
static_assert(sizeof(FAccelByteModelsSetOnlineUsersResponse) == 0x000010, "Wrong size on FAccelByteModelsSetOnlineUsersResponse");
static_assert(offsetof(FAccelByteModelsSetOnlineUsersResponse, Code) == 0x000000, "Member 'FAccelByteModelsSetOnlineUsersResponse::Code' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsUsersPresenceNotice
// 0x0028 (0x0028 - 0x0000)
struct FAccelByteModelsUsersPresenceNotice final
{
public:
	class FString                                 UserId;                                            // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAvailability                                 Availability;                                      // 0x0010(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Activity;                                          // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsUsersPresenceNotice) == 0x000008, "Wrong alignment on FAccelByteModelsUsersPresenceNotice");
static_assert(sizeof(FAccelByteModelsUsersPresenceNotice) == 0x000028, "Wrong size on FAccelByteModelsUsersPresenceNotice");
static_assert(offsetof(FAccelByteModelsUsersPresenceNotice, UserId) == 0x000000, "Member 'FAccelByteModelsUsersPresenceNotice::UserId' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsUsersPresenceNotice, Availability) == 0x000010, "Member 'FAccelByteModelsUsersPresenceNotice::Availability' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsUsersPresenceNotice, Activity) == 0x000018, "Member 'FAccelByteModelsUsersPresenceNotice::Activity' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsRewardItem
// 0x0018 (0x0018 - 0x0000)
struct FAccelByteModelsRewardItem final
{
public:
	class FString                                 ItemId;                                            // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Quantity;                                          // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAccelByteModelsRewardItem) == 0x000008, "Wrong alignment on FAccelByteModelsRewardItem");
static_assert(sizeof(FAccelByteModelsRewardItem) == 0x000018, "Wrong size on FAccelByteModelsRewardItem");
static_assert(offsetof(FAccelByteModelsRewardItem, ItemId) == 0x000000, "Member 'FAccelByteModelsRewardItem::ItemId' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsRewardItem, Quantity) == 0x000010, "Member 'FAccelByteModelsRewardItem::Quantity' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsRewardCondition
// 0x0040 (0x0040 - 0x0000)
struct FAccelByteModelsRewardCondition final
{
public:
	class FString                                 ConditionName;                                     // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Condition;                                         // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 EventName;                                         // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FAccelByteModelsRewardItem>     RewardItems;                                       // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsRewardCondition) == 0x000008, "Wrong alignment on FAccelByteModelsRewardCondition");
static_assert(sizeof(FAccelByteModelsRewardCondition) == 0x000040, "Wrong size on FAccelByteModelsRewardCondition");
static_assert(offsetof(FAccelByteModelsRewardCondition, ConditionName) == 0x000000, "Member 'FAccelByteModelsRewardCondition::ConditionName' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsRewardCondition, Condition) == 0x000010, "Member 'FAccelByteModelsRewardCondition::Condition' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsRewardCondition, EventName) == 0x000020, "Member 'FAccelByteModelsRewardCondition::EventName' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsRewardCondition, RewardItems) == 0x000030, "Member 'FAccelByteModelsRewardCondition::RewardItems' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsRewardInfo
// 0x0078 (0x0078 - 0x0000)
struct FAccelByteModelsRewardInfo final
{
public:
	class FString                                 RewardId;                                          // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Namespace;                                         // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 RewardCode;                                        // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Description;                                       // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 EventTopic;                                        // 0x0040(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FAccelByteModelsRewardCondition> RewardConditions;                                  // 0x0050(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         MaxAwarded;                                        // 0x0060(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxAwardedPerUser;                                 // 0x0064(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDateTime                              CreatedAt;                                         // 0x0068(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDateTime                              UpdatedAt;                                         // 0x0070(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsRewardInfo) == 0x000008, "Wrong alignment on FAccelByteModelsRewardInfo");
static_assert(sizeof(FAccelByteModelsRewardInfo) == 0x000078, "Wrong size on FAccelByteModelsRewardInfo");
static_assert(offsetof(FAccelByteModelsRewardInfo, RewardId) == 0x000000, "Member 'FAccelByteModelsRewardInfo::RewardId' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsRewardInfo, Namespace) == 0x000010, "Member 'FAccelByteModelsRewardInfo::Namespace' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsRewardInfo, RewardCode) == 0x000020, "Member 'FAccelByteModelsRewardInfo::RewardCode' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsRewardInfo, Description) == 0x000030, "Member 'FAccelByteModelsRewardInfo::Description' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsRewardInfo, EventTopic) == 0x000040, "Member 'FAccelByteModelsRewardInfo::EventTopic' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsRewardInfo, RewardConditions) == 0x000050, "Member 'FAccelByteModelsRewardInfo::RewardConditions' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsRewardInfo, MaxAwarded) == 0x000060, "Member 'FAccelByteModelsRewardInfo::MaxAwarded' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsRewardInfo, MaxAwardedPerUser) == 0x000064, "Member 'FAccelByteModelsRewardInfo::MaxAwardedPerUser' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsRewardInfo, CreatedAt) == 0x000068, "Member 'FAccelByteModelsRewardInfo::CreatedAt' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsRewardInfo, UpdatedAt) == 0x000070, "Member 'FAccelByteModelsRewardInfo::UpdatedAt' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsQueryRewardPaging
// 0x0020 (0x0020 - 0x0000)
struct FAccelByteModelsQueryRewardPaging final
{
public:
	class FString                                 Previous;                                          // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Next;                                              // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsQueryRewardPaging) == 0x000008, "Wrong alignment on FAccelByteModelsQueryRewardPaging");
static_assert(sizeof(FAccelByteModelsQueryRewardPaging) == 0x000020, "Wrong size on FAccelByteModelsQueryRewardPaging");
static_assert(offsetof(FAccelByteModelsQueryRewardPaging, Previous) == 0x000000, "Member 'FAccelByteModelsQueryRewardPaging::Previous' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsQueryRewardPaging, Next) == 0x000010, "Member 'FAccelByteModelsQueryRewardPaging::Next' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsQueryReward
// 0x0030 (0x0030 - 0x0000)
struct FAccelByteModelsQueryReward final
{
public:
	TArray<struct FAccelByteModelsRewardInfo>     Data;                                              // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FAccelByteModelsQueryRewardPaging      Paging;                                            // 0x0010(0x0020)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsQueryReward) == 0x000008, "Wrong alignment on FAccelByteModelsQueryReward");
static_assert(sizeof(FAccelByteModelsQueryReward) == 0x000030, "Wrong size on FAccelByteModelsQueryReward");
static_assert(offsetof(FAccelByteModelsQueryReward, Data) == 0x000000, "Member 'FAccelByteModelsQueryReward::Data' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsQueryReward, Paging) == 0x000010, "Member 'FAccelByteModelsQueryReward::Paging' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.GetPartyDataRequest
// 0x0010 (0x0010 - 0x0000)
struct FGetPartyDataRequest final
{
public:
	class FString                                 PartyId;                                           // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGetPartyDataRequest) == 0x000008, "Wrong alignment on FGetPartyDataRequest");
static_assert(sizeof(FGetPartyDataRequest) == 0x000010, "Wrong size on FGetPartyDataRequest");
static_assert(offsetof(FGetPartyDataRequest, PartyId) == 0x000000, "Member 'FGetPartyDataRequest::PartyId' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsSeasonPass
// 0x00A8 (0x00A8 - 0x0000)
struct FAccelByteModelsSeasonPass final
{
public:
	class FString                                 Title;                                             // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Description;                                       // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 SeasonId;                                          // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Code;                                              // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Namespace;                                         // 0x0040(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 DisplayOrder;                                      // 0x0050(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          AutoEnroll;                                        // 0x0060(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_61[0x7];                                       // 0x0061(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 PassItemId;                                        // 0x0068(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FAccelByteModelsItemImage>      Images;                                            // 0x0078(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	class FString                                 Language;                                          // 0x0088(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDateTime                              CreatedAt;                                         // 0x0098(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDateTime                              UpdatedAt;                                         // 0x00A0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsSeasonPass) == 0x000008, "Wrong alignment on FAccelByteModelsSeasonPass");
static_assert(sizeof(FAccelByteModelsSeasonPass) == 0x0000A8, "Wrong size on FAccelByteModelsSeasonPass");
static_assert(offsetof(FAccelByteModelsSeasonPass, Title) == 0x000000, "Member 'FAccelByteModelsSeasonPass::Title' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsSeasonPass, Description) == 0x000010, "Member 'FAccelByteModelsSeasonPass::Description' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsSeasonPass, SeasonId) == 0x000020, "Member 'FAccelByteModelsSeasonPass::SeasonId' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsSeasonPass, Code) == 0x000030, "Member 'FAccelByteModelsSeasonPass::Code' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsSeasonPass, Namespace) == 0x000040, "Member 'FAccelByteModelsSeasonPass::Namespace' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsSeasonPass, DisplayOrder) == 0x000050, "Member 'FAccelByteModelsSeasonPass::DisplayOrder' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsSeasonPass, AutoEnroll) == 0x000060, "Member 'FAccelByteModelsSeasonPass::AutoEnroll' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsSeasonPass, PassItemId) == 0x000068, "Member 'FAccelByteModelsSeasonPass::PassItemId' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsSeasonPass, Images) == 0x000078, "Member 'FAccelByteModelsSeasonPass::Images' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsSeasonPass, Language) == 0x000088, "Member 'FAccelByteModelsSeasonPass::Language' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsSeasonPass, CreatedAt) == 0x000098, "Member 'FAccelByteModelsSeasonPass::CreatedAt' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsSeasonPass, UpdatedAt) == 0x0000A0, "Member 'FAccelByteModelsSeasonPass::UpdatedAt' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsSeasonPassRewardCurrency
// 0x0020 (0x0020 - 0x0000)
struct FAccelByteModelsSeasonPassRewardCurrency final
{
public:
	class FString                                 Namespace;                                         // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 CurrencyCode;                                      // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsSeasonPassRewardCurrency) == 0x000008, "Wrong alignment on FAccelByteModelsSeasonPassRewardCurrency");
static_assert(sizeof(FAccelByteModelsSeasonPassRewardCurrency) == 0x000020, "Wrong size on FAccelByteModelsSeasonPassRewardCurrency");
static_assert(offsetof(FAccelByteModelsSeasonPassRewardCurrency, Namespace) == 0x000000, "Member 'FAccelByteModelsSeasonPassRewardCurrency::Namespace' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsSeasonPassRewardCurrency, CurrencyCode) == 0x000010, "Member 'FAccelByteModelsSeasonPassRewardCurrency::CurrencyCode' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsSeasonPassReward
// 0x00C8 (0x00C8 - 0x0000)
struct FAccelByteModelsSeasonPassReward final
{
public:
	class FString                                 Namespace;                                         // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 SeasonId;                                          // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Code;                                              // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAccelByteSeasonPassRewardType                Type;                                              // 0x0030(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ItemId;                                            // 0x0038(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ItemName;                                          // 0x0048(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ItemSku;                                           // 0x0058(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FAccelByteModelsSeasonPassRewardCurrency> Currency;                                          // 0x0068(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         Quantity;                                          // 0x0078(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_7C[0x4];                                       // 0x007C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FAccelByteModelsItemImage              Image;                                             // 0x0080(0x0048)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsSeasonPassReward) == 0x000008, "Wrong alignment on FAccelByteModelsSeasonPassReward");
static_assert(sizeof(FAccelByteModelsSeasonPassReward) == 0x0000C8, "Wrong size on FAccelByteModelsSeasonPassReward");
static_assert(offsetof(FAccelByteModelsSeasonPassReward, Namespace) == 0x000000, "Member 'FAccelByteModelsSeasonPassReward::Namespace' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsSeasonPassReward, SeasonId) == 0x000010, "Member 'FAccelByteModelsSeasonPassReward::SeasonId' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsSeasonPassReward, Code) == 0x000020, "Member 'FAccelByteModelsSeasonPassReward::Code' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsSeasonPassReward, Type) == 0x000030, "Member 'FAccelByteModelsSeasonPassReward::Type' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsSeasonPassReward, ItemId) == 0x000038, "Member 'FAccelByteModelsSeasonPassReward::ItemId' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsSeasonPassReward, ItemName) == 0x000048, "Member 'FAccelByteModelsSeasonPassReward::ItemName' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsSeasonPassReward, ItemSku) == 0x000058, "Member 'FAccelByteModelsSeasonPassReward::ItemSku' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsSeasonPassReward, Currency) == 0x000068, "Member 'FAccelByteModelsSeasonPassReward::Currency' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsSeasonPassReward, Quantity) == 0x000078, "Member 'FAccelByteModelsSeasonPassReward::Quantity' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsSeasonPassReward, Image) == 0x000080, "Member 'FAccelByteModelsSeasonPassReward::Image' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsSeasonPassTier
// 0x0068 (0x0068 - 0x0000)
struct FAccelByteModelsSeasonPassTier final
{
public:
	class FString                                 ID;                                                // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RequiredExp;                                       // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x54];                                      // 0x0014(0x0054)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAccelByteModelsSeasonPassTier) == 0x000008, "Wrong alignment on FAccelByteModelsSeasonPassTier");
static_assert(sizeof(FAccelByteModelsSeasonPassTier) == 0x000068, "Wrong size on FAccelByteModelsSeasonPassTier");
static_assert(offsetof(FAccelByteModelsSeasonPassTier, ID) == 0x000000, "Member 'FAccelByteModelsSeasonPassTier::ID' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsSeasonPassTier, RequiredExp) == 0x000010, "Member 'FAccelByteModelsSeasonPassTier::RequiredExp' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsSeasonInfo
// 0x0138 (0x0138 - 0x0000)
struct FAccelByteModelsSeasonInfo final
{
public:
	class FString                                 Title;                                             // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Description;                                       // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ID;                                                // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Namespace;                                         // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Name;                                              // 0x0040(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDateTime                              Start;                                             // 0x0050(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDateTime                              End;                                               // 0x0058(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 TierItemId;                                        // 0x0060(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          AutoClaim;                                         // 0x0070(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_71[0x7];                                       // 0x0071(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FAccelByteModelsItemImage>      Images;                                            // 0x0078(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class FString>                         PassCodes;                                         // 0x0088(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	EAccelByteSeasonPassStatus                    Status;                                            // 0x0098(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_99[0x7];                                       // 0x0099(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FDateTime                              PublishedAt;                                       // 0x00A0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Language;                                          // 0x00A8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDateTime                              CreatedAt;                                         // 0x00B8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDateTime                              UpdatedAt;                                         // 0x00C0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FAccelByteModelsSeasonPass>     Passes;                                            // 0x00C8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TMap<class FString, struct FAccelByteModelsSeasonPassReward> Rewards;                                           // 0x00D8(0x0050)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	TArray<struct FAccelByteModelsSeasonPassTier> Tiers;                                             // 0x0128(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsSeasonInfo) == 0x000008, "Wrong alignment on FAccelByteModelsSeasonInfo");
static_assert(sizeof(FAccelByteModelsSeasonInfo) == 0x000138, "Wrong size on FAccelByteModelsSeasonInfo");
static_assert(offsetof(FAccelByteModelsSeasonInfo, Title) == 0x000000, "Member 'FAccelByteModelsSeasonInfo::Title' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsSeasonInfo, Description) == 0x000010, "Member 'FAccelByteModelsSeasonInfo::Description' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsSeasonInfo, ID) == 0x000020, "Member 'FAccelByteModelsSeasonInfo::ID' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsSeasonInfo, Namespace) == 0x000030, "Member 'FAccelByteModelsSeasonInfo::Namespace' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsSeasonInfo, Name) == 0x000040, "Member 'FAccelByteModelsSeasonInfo::Name' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsSeasonInfo, Start) == 0x000050, "Member 'FAccelByteModelsSeasonInfo::Start' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsSeasonInfo, End) == 0x000058, "Member 'FAccelByteModelsSeasonInfo::End' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsSeasonInfo, TierItemId) == 0x000060, "Member 'FAccelByteModelsSeasonInfo::TierItemId' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsSeasonInfo, AutoClaim) == 0x000070, "Member 'FAccelByteModelsSeasonInfo::AutoClaim' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsSeasonInfo, Images) == 0x000078, "Member 'FAccelByteModelsSeasonInfo::Images' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsSeasonInfo, PassCodes) == 0x000088, "Member 'FAccelByteModelsSeasonInfo::PassCodes' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsSeasonInfo, Status) == 0x000098, "Member 'FAccelByteModelsSeasonInfo::Status' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsSeasonInfo, PublishedAt) == 0x0000A0, "Member 'FAccelByteModelsSeasonInfo::PublishedAt' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsSeasonInfo, Language) == 0x0000A8, "Member 'FAccelByteModelsSeasonInfo::Language' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsSeasonInfo, CreatedAt) == 0x0000B8, "Member 'FAccelByteModelsSeasonInfo::CreatedAt' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsSeasonInfo, UpdatedAt) == 0x0000C0, "Member 'FAccelByteModelsSeasonInfo::UpdatedAt' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsSeasonInfo, Passes) == 0x0000C8, "Member 'FAccelByteModelsSeasonInfo::Passes' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsSeasonInfo, Rewards) == 0x0000D8, "Member 'FAccelByteModelsSeasonInfo::Rewards' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsSeasonInfo, Tiers) == 0x000128, "Member 'FAccelByteModelsSeasonInfo::Tiers' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsEntitlementGrant
// 0x0058 (0x0058 - 0x0000)
struct FAccelByteModelsEntitlementGrant final
{
public:
	class FString                                 ItemId;                                            // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 GrantedCode;                                       // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ItemNamespace;                                     // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Quantity;                                          // 0x0030(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAccelByteEntitlementSource                   Source;                                            // 0x0034(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_35[0x3];                                       // 0x0035(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Region;                                            // 0x0038(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Language;                                          // 0x0048(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsEntitlementGrant) == 0x000008, "Wrong alignment on FAccelByteModelsEntitlementGrant");
static_assert(sizeof(FAccelByteModelsEntitlementGrant) == 0x000058, "Wrong size on FAccelByteModelsEntitlementGrant");
static_assert(offsetof(FAccelByteModelsEntitlementGrant, ItemId) == 0x000000, "Member 'FAccelByteModelsEntitlementGrant::ItemId' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsEntitlementGrant, GrantedCode) == 0x000010, "Member 'FAccelByteModelsEntitlementGrant::GrantedCode' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsEntitlementGrant, ItemNamespace) == 0x000020, "Member 'FAccelByteModelsEntitlementGrant::ItemNamespace' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsEntitlementGrant, Quantity) == 0x000030, "Member 'FAccelByteModelsEntitlementGrant::Quantity' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsEntitlementGrant, Source) == 0x000034, "Member 'FAccelByteModelsEntitlementGrant::Source' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsEntitlementGrant, Region) == 0x000038, "Member 'FAccelByteModelsEntitlementGrant::Region' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsEntitlementGrant, Language) == 0x000048, "Member 'FAccelByteModelsEntitlementGrant::Language' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.Ban
// 0x0030 (0x0030 - 0x0000)
struct FBan final
{
public:
	class FString                                 Ban;                                               // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 BanId;                                             // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 EndDate;                                           // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBan) == 0x000008, "Wrong alignment on FBan");
static_assert(sizeof(FBan) == 0x000030, "Wrong size on FBan");
static_assert(offsetof(FBan, Ban) == 0x000000, "Member 'FBan::Ban' has a wrong offset!");
static_assert(offsetof(FBan, BanId) == 0x000010, "Member 'FBan::BanId' has a wrong offset!");
static_assert(offsetof(FBan, EndDate) == 0x000020, "Member 'FBan::EndDate' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsSeason
// 0x0050 (0x0050 - 0x0000)
struct FAccelByteModelsSeason final
{
public:
	class FString                                 ID;                                                // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Namespace;                                         // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Name;                                              // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDateTime                              Start;                                             // 0x0030(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDateTime                              End;                                               // 0x0038(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAccelByteSeasonPassStatus                    Status;                                            // 0x0040(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_41[0x7];                                       // 0x0041(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FDateTime                              PublishedAt;                                       // 0x0048(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsSeason) == 0x000008, "Wrong alignment on FAccelByteModelsSeason");
static_assert(sizeof(FAccelByteModelsSeason) == 0x000050, "Wrong size on FAccelByteModelsSeason");
static_assert(offsetof(FAccelByteModelsSeason, ID) == 0x000000, "Member 'FAccelByteModelsSeason::ID' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsSeason, Namespace) == 0x000010, "Member 'FAccelByteModelsSeason::Namespace' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsSeason, Name) == 0x000020, "Member 'FAccelByteModelsSeason::Name' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsSeason, Start) == 0x000030, "Member 'FAccelByteModelsSeason::Start' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsSeason, End) == 0x000038, "Member 'FAccelByteModelsSeason::End' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsSeason, Status) == 0x000040, "Member 'FAccelByteModelsSeason::Status' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsSeason, PublishedAt) == 0x000048, "Member 'FAccelByteModelsSeason::PublishedAt' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsUserSeasonInfo
// 0x0180 (0x0180 - 0x0000)
struct FAccelByteModelsUserSeasonInfo final
{
public:
	class FString                                 ID;                                                // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Namespace;                                         // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 UserId;                                            // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 SeasonId;                                          // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDateTime                              EnrolledAt;                                        // 0x0040(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FString>                         EnrolledPasses;                                    // 0x0048(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         CurrentTierIndex;                                  // 0x0058(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         LastTierIndex;                                     // 0x005C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RequiredExp;                                       // 0x0060(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CurrentExp;                                        // 0x0064(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Cleared;                                           // 0x0068(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_69[0x7];                                       // 0x0069(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FAccelByteModelsSeason                 Season;                                            // 0x0070(0x0050)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	uint8                                         Pad_C0[0xA0];                                      // 0x00C0(0x00A0)(Fixing Size After Last Property [ Dumper-7 ])
	struct FDateTime                              CreatedAt;                                         // 0x0160(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDateTime                              UpdatedAt;                                         // 0x0168(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TotalPaidForExp;                                   // 0x0170(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TotalSweatExp;                                     // 0x0174(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TotalExp;                                          // 0x0178(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_17C[0x4];                                      // 0x017C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAccelByteModelsUserSeasonInfo) == 0x000008, "Wrong alignment on FAccelByteModelsUserSeasonInfo");
static_assert(sizeof(FAccelByteModelsUserSeasonInfo) == 0x000180, "Wrong size on FAccelByteModelsUserSeasonInfo");
static_assert(offsetof(FAccelByteModelsUserSeasonInfo, ID) == 0x000000, "Member 'FAccelByteModelsUserSeasonInfo::ID' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsUserSeasonInfo, Namespace) == 0x000010, "Member 'FAccelByteModelsUserSeasonInfo::Namespace' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsUserSeasonInfo, UserId) == 0x000020, "Member 'FAccelByteModelsUserSeasonInfo::UserId' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsUserSeasonInfo, SeasonId) == 0x000030, "Member 'FAccelByteModelsUserSeasonInfo::SeasonId' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsUserSeasonInfo, EnrolledAt) == 0x000040, "Member 'FAccelByteModelsUserSeasonInfo::EnrolledAt' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsUserSeasonInfo, EnrolledPasses) == 0x000048, "Member 'FAccelByteModelsUserSeasonInfo::EnrolledPasses' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsUserSeasonInfo, CurrentTierIndex) == 0x000058, "Member 'FAccelByteModelsUserSeasonInfo::CurrentTierIndex' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsUserSeasonInfo, LastTierIndex) == 0x00005C, "Member 'FAccelByteModelsUserSeasonInfo::LastTierIndex' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsUserSeasonInfo, RequiredExp) == 0x000060, "Member 'FAccelByteModelsUserSeasonInfo::RequiredExp' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsUserSeasonInfo, CurrentExp) == 0x000064, "Member 'FAccelByteModelsUserSeasonInfo::CurrentExp' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsUserSeasonInfo, Cleared) == 0x000068, "Member 'FAccelByteModelsUserSeasonInfo::Cleared' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsUserSeasonInfo, Season) == 0x000070, "Member 'FAccelByteModelsUserSeasonInfo::Season' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsUserSeasonInfo, CreatedAt) == 0x000160, "Member 'FAccelByteModelsUserSeasonInfo::CreatedAt' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsUserSeasonInfo, UpdatedAt) == 0x000168, "Member 'FAccelByteModelsUserSeasonInfo::UpdatedAt' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsUserSeasonInfo, TotalPaidForExp) == 0x000170, "Member 'FAccelByteModelsUserSeasonInfo::TotalPaidForExp' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsUserSeasonInfo, TotalSweatExp) == 0x000174, "Member 'FAccelByteModelsUserSeasonInfo::TotalSweatExp' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsUserSeasonInfo, TotalExp) == 0x000178, "Member 'FAccelByteModelsUserSeasonInfo::TotalExp' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsUserBannedNotification
// 0x0040 (0x0040 - 0x0000)
struct FAccelByteModelsUserBannedNotification final
{
public:
	class FString                                 UserId;                                            // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Namespace;                                         // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EBanType                                      Ban;                                               // 0x0020(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 EndDate;                                           // 0x0028(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EBanReason                                    Reason;                                            // 0x0038(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Enable;                                            // 0x0039(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3A[0x6];                                       // 0x003A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAccelByteModelsUserBannedNotification) == 0x000008, "Wrong alignment on FAccelByteModelsUserBannedNotification");
static_assert(sizeof(FAccelByteModelsUserBannedNotification) == 0x000040, "Wrong size on FAccelByteModelsUserBannedNotification");
static_assert(offsetof(FAccelByteModelsUserBannedNotification, UserId) == 0x000000, "Member 'FAccelByteModelsUserBannedNotification::UserId' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsUserBannedNotification, Namespace) == 0x000010, "Member 'FAccelByteModelsUserBannedNotification::Namespace' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsUserBannedNotification, Ban) == 0x000020, "Member 'FAccelByteModelsUserBannedNotification::Ban' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsUserBannedNotification, EndDate) == 0x000028, "Member 'FAccelByteModelsUserBannedNotification::EndDate' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsUserBannedNotification, Reason) == 0x000038, "Member 'FAccelByteModelsUserBannedNotification::Reason' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsUserBannedNotification, Enable) == 0x000039, "Member 'FAccelByteModelsUserBannedNotification::Enable' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.ValidationDescription
// 0x0020 (0x0020 - 0x0000)
struct FValidationDescription final
{
public:
	class FString                                 Language;                                          // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FString>                         Message;                                           // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FValidationDescription) == 0x000008, "Wrong alignment on FValidationDescription");
static_assert(sizeof(FValidationDescription) == 0x000020, "Wrong size on FValidationDescription");
static_assert(offsetof(FValidationDescription, Language) == 0x000000, "Member 'FValidationDescription::Language' has a wrong offset!");
static_assert(offsetof(FValidationDescription, Message) == 0x000010, "Member 'FValidationDescription::Message' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsSeasonClaimRewardResponse
// 0x00A0 (0x00A0 - 0x0000)
struct alignas(0x08) FAccelByteModelsSeasonClaimRewardResponse final
{
public:
	uint8                                         Pad_0[0xA0];                                       // 0x0000(0x00A0)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAccelByteModelsSeasonClaimRewardResponse) == 0x000008, "Wrong alignment on FAccelByteModelsSeasonClaimRewardResponse");
static_assert(sizeof(FAccelByteModelsSeasonClaimRewardResponse) == 0x0000A0, "Wrong size on FAccelByteModelsSeasonClaimRewardResponse");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsSessionBrowserUpdateRequest
// 0x0008 (0x0008 - 0x0000)
struct FAccelByteModelsSessionBrowserUpdateRequest final
{
public:
	int32                                         Game_current_player;                               // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Game_max_player;                                   // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsSessionBrowserUpdateRequest) == 0x000004, "Wrong alignment on FAccelByteModelsSessionBrowserUpdateRequest");
static_assert(sizeof(FAccelByteModelsSessionBrowserUpdateRequest) == 0x000008, "Wrong size on FAccelByteModelsSessionBrowserUpdateRequest");
static_assert(offsetof(FAccelByteModelsSessionBrowserUpdateRequest, Game_current_player) == 0x000000, "Member 'FAccelByteModelsSessionBrowserUpdateRequest::Game_current_player' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsSessionBrowserUpdateRequest, Game_max_player) == 0x000004, "Member 'FAccelByteModelsSessionBrowserUpdateRequest::Game_max_player' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsServerSessionResponse
// 0x0010 (0x0010 - 0x0000)
struct FAccelByteModelsServerSessionResponse final
{
public:
	class FString                                 Session_id;                                        // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsServerSessionResponse) == 0x000008, "Wrong alignment on FAccelByteModelsServerSessionResponse");
static_assert(sizeof(FAccelByteModelsServerSessionResponse) == 0x000010, "Wrong size on FAccelByteModelsServerSessionResponse");
static_assert(offsetof(FAccelByteModelsServerSessionResponse, Session_id) == 0x000000, "Member 'FAccelByteModelsServerSessionResponse::Session_id' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsServerInfo
// 0x0118 (0x0118 - 0x0000)
struct FAccelByteModelsServerInfo final
{
public:
	class FString                                 Pod_name;                                          // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Image_version;                                     // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Namespace;                                         // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Ip;                                                // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FString>                         Alternate_ips;                                     // 0x0040(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         Port;                                              // 0x0050(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_54[0x4];                                       // 0x0054(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<class FString, int32>                    Ports;                                             // 0x0058(0x0050)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	class FString                                 Provider;                                          // 0x00A8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Game_version;                                      // 0x00B8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Status;                                            // 0x00C8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Last_update;                                       // 0x00D8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Region;                                            // 0x00E8(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Custom_Attribute;                                  // 0x00F8(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Deployment;                                        // 0x0108(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsServerInfo) == 0x000008, "Wrong alignment on FAccelByteModelsServerInfo");
static_assert(sizeof(FAccelByteModelsServerInfo) == 0x000118, "Wrong size on FAccelByteModelsServerInfo");
static_assert(offsetof(FAccelByteModelsServerInfo, Pod_name) == 0x000000, "Member 'FAccelByteModelsServerInfo::Pod_name' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsServerInfo, Image_version) == 0x000010, "Member 'FAccelByteModelsServerInfo::Image_version' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsServerInfo, Namespace) == 0x000020, "Member 'FAccelByteModelsServerInfo::Namespace' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsServerInfo, Ip) == 0x000030, "Member 'FAccelByteModelsServerInfo::Ip' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsServerInfo, Alternate_ips) == 0x000040, "Member 'FAccelByteModelsServerInfo::Alternate_ips' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsServerInfo, Port) == 0x000050, "Member 'FAccelByteModelsServerInfo::Port' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsServerInfo, Ports) == 0x000058, "Member 'FAccelByteModelsServerInfo::Ports' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsServerInfo, Provider) == 0x0000A8, "Member 'FAccelByteModelsServerInfo::Provider' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsServerInfo, Game_version) == 0x0000B8, "Member 'FAccelByteModelsServerInfo::Game_version' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsServerInfo, Status) == 0x0000C8, "Member 'FAccelByteModelsServerInfo::Status' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsServerInfo, Last_update) == 0x0000D8, "Member 'FAccelByteModelsServerInfo::Last_update' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsServerInfo, Region) == 0x0000E8, "Member 'FAccelByteModelsServerInfo::Region' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsServerInfo, Custom_Attribute) == 0x0000F8, "Member 'FAccelByteModelsServerInfo::Custom_Attribute' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsServerInfo, Deployment) == 0x000108, "Member 'FAccelByteModelsServerInfo::Deployment' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.PartyJoinRequest
// 0x0020 (0x0020 - 0x0000)
struct FPartyJoinRequest final
{
public:
	class FString                                 PartyId;                                           // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 InvitationToken;                                   // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPartyJoinRequest) == 0x000008, "Wrong alignment on FPartyJoinRequest");
static_assert(sizeof(FPartyJoinRequest) == 0x000020, "Wrong size on FPartyJoinRequest");
static_assert(offsetof(FPartyJoinRequest, PartyId) == 0x000000, "Member 'FPartyJoinRequest::PartyId' has a wrong offset!");
static_assert(offsetof(FPartyJoinRequest, InvitationToken) == 0x000010, "Member 'FPartyJoinRequest::InvitationToken' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsDataPartyResponse
// 0x00B0 (0x00B0 - 0x0000)
struct FAccelByteModelsDataPartyResponse final
{
public:
	TMap<class FString, class FString>            Custom_Attribute;                                  // 0x0000(0x0050)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	class FString                                 UpdatedAt;                                         // 0x0050(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 PartyId;                                           // 0x0060(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Leader;                                            // 0x0070(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FString>                         Members;                                           // 0x0080(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class FString>                         Invitees;                                          // 0x0090(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	class FString                                 InvitationToken;                                   // 0x00A0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsDataPartyResponse) == 0x000008, "Wrong alignment on FAccelByteModelsDataPartyResponse");
static_assert(sizeof(FAccelByteModelsDataPartyResponse) == 0x0000B0, "Wrong size on FAccelByteModelsDataPartyResponse");
static_assert(offsetof(FAccelByteModelsDataPartyResponse, Custom_Attribute) == 0x000000, "Member 'FAccelByteModelsDataPartyResponse::Custom_Attribute' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsDataPartyResponse, UpdatedAt) == 0x000050, "Member 'FAccelByteModelsDataPartyResponse::UpdatedAt' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsDataPartyResponse, PartyId) == 0x000060, "Member 'FAccelByteModelsDataPartyResponse::PartyId' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsDataPartyResponse, Leader) == 0x000070, "Member 'FAccelByteModelsDataPartyResponse::Leader' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsDataPartyResponse, Members) == 0x000080, "Member 'FAccelByteModelsDataPartyResponse::Members' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsDataPartyResponse, Invitees) == 0x000090, "Member 'FAccelByteModelsDataPartyResponse::Invitees' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsDataPartyResponse, InvitationToken) == 0x0000A0, "Member 'FAccelByteModelsDataPartyResponse::InvitationToken' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsUGCRequest
// 0x0070 (0x0070 - 0x0000)
struct FAccelByteModelsUGCRequest final
{
public:
	class FString                                 ContentType;                                       // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 FileExtension;                                     // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Name;                                              // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Preview;                                           // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Type;                                              // 0x0040(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 SubType;                                           // 0x0050(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FString>                         Tags;                                              // 0x0060(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsUGCRequest) == 0x000008, "Wrong alignment on FAccelByteModelsUGCRequest");
static_assert(sizeof(FAccelByteModelsUGCRequest) == 0x000070, "Wrong size on FAccelByteModelsUGCRequest");
static_assert(offsetof(FAccelByteModelsUGCRequest, ContentType) == 0x000000, "Member 'FAccelByteModelsUGCRequest::ContentType' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsUGCRequest, FileExtension) == 0x000010, "Member 'FAccelByteModelsUGCRequest::FileExtension' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsUGCRequest, Name) == 0x000020, "Member 'FAccelByteModelsUGCRequest::Name' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsUGCRequest, Preview) == 0x000030, "Member 'FAccelByteModelsUGCRequest::Preview' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsUGCRequest, Type) == 0x000040, "Member 'FAccelByteModelsUGCRequest::Type' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsUGCRequest, SubType) == 0x000050, "Member 'FAccelByteModelsUGCRequest::SubType' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsUGCRequest, Tags) == 0x000060, "Member 'FAccelByteModelsUGCRequest::Tags' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsGetSessionAttributeAllResponse
// 0x0050 (0x0050 - 0x0000)
struct FAccelByteModelsGetSessionAttributeAllResponse final
{
public:
	TMap<class FString, class FString>            Attributes;                                        // 0x0000(0x0050)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsGetSessionAttributeAllResponse) == 0x000008, "Wrong alignment on FAccelByteModelsGetSessionAttributeAllResponse");
static_assert(sizeof(FAccelByteModelsGetSessionAttributeAllResponse) == 0x000050, "Wrong size on FAccelByteModelsGetSessionAttributeAllResponse");
static_assert(offsetof(FAccelByteModelsGetSessionAttributeAllResponse, Attributes) == 0x000000, "Member 'FAccelByteModelsGetSessionAttributeAllResponse::Attributes' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsUserSeasonData
// 0x0068 (0x0068 - 0x0000)
struct FAccelByteModelsUserSeasonData final
{
public:
	class FString                                 ID;                                                // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Namespace;                                         // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 SeasonId;                                          // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 UserId;                                            // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         GrantExp;                                          // 0x0040(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_44[0x4];                                       // 0x0044(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FString>                         Tags;                                              // 0x0048(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FDateTime                              CreatedAt;                                         // 0x0058(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAccelByteSeasonPassSource                    Source;                                            // 0x0060(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_61[0x7];                                       // 0x0061(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAccelByteModelsUserSeasonData) == 0x000008, "Wrong alignment on FAccelByteModelsUserSeasonData");
static_assert(sizeof(FAccelByteModelsUserSeasonData) == 0x000068, "Wrong size on FAccelByteModelsUserSeasonData");
static_assert(offsetof(FAccelByteModelsUserSeasonData, ID) == 0x000000, "Member 'FAccelByteModelsUserSeasonData::ID' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsUserSeasonData, Namespace) == 0x000010, "Member 'FAccelByteModelsUserSeasonData::Namespace' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsUserSeasonData, SeasonId) == 0x000020, "Member 'FAccelByteModelsUserSeasonData::SeasonId' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsUserSeasonData, UserId) == 0x000030, "Member 'FAccelByteModelsUserSeasonData::UserId' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsUserSeasonData, GrantExp) == 0x000040, "Member 'FAccelByteModelsUserSeasonData::GrantExp' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsUserSeasonData, Tags) == 0x000048, "Member 'FAccelByteModelsUserSeasonData::Tags' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsUserSeasonData, CreatedAt) == 0x000058, "Member 'FAccelByteModelsUserSeasonData::CreatedAt' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsUserSeasonData, Source) == 0x000060, "Member 'FAccelByteModelsUserSeasonData::Source' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsGetSessionAttributeResponse
// 0x0020 (0x0020 - 0x0000)
struct FAccelByteModelsGetSessionAttributeResponse final
{
public:
	class FString                                 Key;                                               // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Value;                                             // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsGetSessionAttributeResponse) == 0x000008, "Wrong alignment on FAccelByteModelsGetSessionAttributeResponse");
static_assert(sizeof(FAccelByteModelsGetSessionAttributeResponse) == 0x000020, "Wrong size on FAccelByteModelsGetSessionAttributeResponse");
static_assert(offsetof(FAccelByteModelsGetSessionAttributeResponse, Key) == 0x000000, "Member 'FAccelByteModelsGetSessionAttributeResponse::Key' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsGetSessionAttributeResponse, Value) == 0x000010, "Member 'FAccelByteModelsGetSessionAttributeResponse::Value' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsMatchmakingResult
// 0x00C8 (0x00C8 - 0x0000)
struct FAccelByteModelsMatchmakingResult final
{
public:
	class FString                                 Channel;                                           // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Client_version;                                    // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Game_mode;                                         // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Joinable;                                          // 0x0030(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Match_id;                                          // 0x0038(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FAccelByteModelsMatchingAlly>   Matching_allies;                                   // 0x0048(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	class FString                                 Namespace;                                         // 0x0058(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FJsonObjectWrapper                     Party_attributes;                                  // 0x0068(0x0020)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	class FString                                 Party_id;                                          // 0x0088(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Queued_at;                                         // 0x0098(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9C[0x4];                                       // 0x009C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Region;                                            // 0x00A0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Server_name;                                       // 0x00B0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAccelByteMatchmakingSessionStatus            Status;                                            // 0x00C0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C1[0x7];                                       // 0x00C1(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAccelByteModelsMatchmakingResult) == 0x000008, "Wrong alignment on FAccelByteModelsMatchmakingResult");
static_assert(sizeof(FAccelByteModelsMatchmakingResult) == 0x0000C8, "Wrong size on FAccelByteModelsMatchmakingResult");
static_assert(offsetof(FAccelByteModelsMatchmakingResult, Channel) == 0x000000, "Member 'FAccelByteModelsMatchmakingResult::Channel' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsMatchmakingResult, Client_version) == 0x000010, "Member 'FAccelByteModelsMatchmakingResult::Client_version' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsMatchmakingResult, Game_mode) == 0x000020, "Member 'FAccelByteModelsMatchmakingResult::Game_mode' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsMatchmakingResult, Joinable) == 0x000030, "Member 'FAccelByteModelsMatchmakingResult::Joinable' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsMatchmakingResult, Match_id) == 0x000038, "Member 'FAccelByteModelsMatchmakingResult::Match_id' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsMatchmakingResult, Matching_allies) == 0x000048, "Member 'FAccelByteModelsMatchmakingResult::Matching_allies' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsMatchmakingResult, Namespace) == 0x000058, "Member 'FAccelByteModelsMatchmakingResult::Namespace' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsMatchmakingResult, Party_attributes) == 0x000068, "Member 'FAccelByteModelsMatchmakingResult::Party_attributes' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsMatchmakingResult, Party_id) == 0x000088, "Member 'FAccelByteModelsMatchmakingResult::Party_id' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsMatchmakingResult, Queued_at) == 0x000098, "Member 'FAccelByteModelsMatchmakingResult::Queued_at' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsMatchmakingResult, Region) == 0x0000A0, "Member 'FAccelByteModelsMatchmakingResult::Region' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsMatchmakingResult, Server_name) == 0x0000B0, "Member 'FAccelByteModelsMatchmakingResult::Server_name' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsMatchmakingResult, Status) == 0x0000C0, "Member 'FAccelByteModelsMatchmakingResult::Status' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.JwkSet
// 0x0010 (0x0010 - 0x0000)
struct FJwkSet final
{
public:
	TArray<struct FJsonObjectWrapper>             Keys;                                              // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJwkSet) == 0x000008, "Wrong alignment on FJwkSet");
static_assert(sizeof(FJwkSet) == 0x000010, "Wrong size on FJwkSet");
static_assert(offsetof(FJwkSet, Keys) == 0x000000, "Member 'FJwkSet::Keys' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsWalletTransactionInfo
// 0x00A0 (0x00A0 - 0x0000)
struct FAccelByteModelsWalletTransactionInfo final
{
public:
	class FString                                 WalletId;                                          // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Amount;                                            // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Reason;                                            // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Namespace;                                         // 0x0028(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 UserId;                                            // 0x0038(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Operator;                                          // 0x0048(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAccelByteWalletAction                        WalletAction;                                      // 0x0058(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_59[0x7];                                       // 0x0059(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CurrencyCode;                                      // 0x0060(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 BalanceSource;                                     // 0x0070(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 CreatedAt;                                         // 0x0080(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 UpdatedAt;                                         // 0x0090(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsWalletTransactionInfo) == 0x000008, "Wrong alignment on FAccelByteModelsWalletTransactionInfo");
static_assert(sizeof(FAccelByteModelsWalletTransactionInfo) == 0x0000A0, "Wrong size on FAccelByteModelsWalletTransactionInfo");
static_assert(offsetof(FAccelByteModelsWalletTransactionInfo, WalletId) == 0x000000, "Member 'FAccelByteModelsWalletTransactionInfo::WalletId' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsWalletTransactionInfo, Amount) == 0x000010, "Member 'FAccelByteModelsWalletTransactionInfo::Amount' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsWalletTransactionInfo, Reason) == 0x000018, "Member 'FAccelByteModelsWalletTransactionInfo::Reason' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsWalletTransactionInfo, Namespace) == 0x000028, "Member 'FAccelByteModelsWalletTransactionInfo::Namespace' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsWalletTransactionInfo, UserId) == 0x000038, "Member 'FAccelByteModelsWalletTransactionInfo::UserId' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsWalletTransactionInfo, Operator) == 0x000048, "Member 'FAccelByteModelsWalletTransactionInfo::Operator' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsWalletTransactionInfo, WalletAction) == 0x000058, "Member 'FAccelByteModelsWalletTransactionInfo::WalletAction' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsWalletTransactionInfo, CurrencyCode) == 0x000060, "Member 'FAccelByteModelsWalletTransactionInfo::CurrencyCode' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsWalletTransactionInfo, BalanceSource) == 0x000070, "Member 'FAccelByteModelsWalletTransactionInfo::BalanceSource' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsWalletTransactionInfo, CreatedAt) == 0x000080, "Member 'FAccelByteModelsWalletTransactionInfo::CreatedAt' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsWalletTransactionInfo, UpdatedAt) == 0x000090, "Member 'FAccelByteModelsWalletTransactionInfo::UpdatedAt' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsWalletTransactionPaging
// 0x0050 (0x0050 - 0x0000)
struct FAccelByteModelsWalletTransactionPaging final
{
public:
	TArray<struct FAccelByteModelsWalletTransactionInfo> Data;                                              // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FAccelByteModelsPaging                 Paging;                                            // 0x0010(0x0040)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsWalletTransactionPaging) == 0x000008, "Wrong alignment on FAccelByteModelsWalletTransactionPaging");
static_assert(sizeof(FAccelByteModelsWalletTransactionPaging) == 0x000050, "Wrong size on FAccelByteModelsWalletTransactionPaging");
static_assert(offsetof(FAccelByteModelsWalletTransactionPaging, Data) == 0x000000, "Member 'FAccelByteModelsWalletTransactionPaging::Data' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsWalletTransactionPaging, Paging) == 0x000010, "Member 'FAccelByteModelsWalletTransactionPaging::Paging' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsSessionBrowserGameSetting
// 0x0068 (0x0068 - 0x0000)
struct FAccelByteModelsSessionBrowserGameSetting final
{
public:
	class FString                                 Mode;                                              // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Map_name;                                          // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Num_bot;                                           // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Max_player;                                        // 0x0024(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Current_player;                                    // 0x0028(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Max_internal_player;                               // 0x002C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Current_internal_player;                           // 0x0030(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Allow_join_in_progress;                            // 0x0034(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_35[0x3];                                       // 0x0035(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Password;                                          // 0x0038(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FJsonObjectWrapper                     Settings;                                          // 0x0048(0x0020)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsSessionBrowserGameSetting) == 0x000008, "Wrong alignment on FAccelByteModelsSessionBrowserGameSetting");
static_assert(sizeof(FAccelByteModelsSessionBrowserGameSetting) == 0x000068, "Wrong size on FAccelByteModelsSessionBrowserGameSetting");
static_assert(offsetof(FAccelByteModelsSessionBrowserGameSetting, Mode) == 0x000000, "Member 'FAccelByteModelsSessionBrowserGameSetting::Mode' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsSessionBrowserGameSetting, Map_name) == 0x000010, "Member 'FAccelByteModelsSessionBrowserGameSetting::Map_name' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsSessionBrowserGameSetting, Num_bot) == 0x000020, "Member 'FAccelByteModelsSessionBrowserGameSetting::Num_bot' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsSessionBrowserGameSetting, Max_player) == 0x000024, "Member 'FAccelByteModelsSessionBrowserGameSetting::Max_player' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsSessionBrowserGameSetting, Current_player) == 0x000028, "Member 'FAccelByteModelsSessionBrowserGameSetting::Current_player' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsSessionBrowserGameSetting, Max_internal_player) == 0x00002C, "Member 'FAccelByteModelsSessionBrowserGameSetting::Max_internal_player' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsSessionBrowserGameSetting, Current_internal_player) == 0x000030, "Member 'FAccelByteModelsSessionBrowserGameSetting::Current_internal_player' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsSessionBrowserGameSetting, Allow_join_in_progress) == 0x000034, "Member 'FAccelByteModelsSessionBrowserGameSetting::Allow_join_in_progress' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsSessionBrowserGameSetting, Password) == 0x000038, "Member 'FAccelByteModelsSessionBrowserGameSetting::Password' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsSessionBrowserGameSetting, Settings) == 0x000048, "Member 'FAccelByteModelsSessionBrowserGameSetting::Settings' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsSessionBrowserServer
// 0x0068 (0x0068 - 0x0000)
struct FAccelByteModelsSessionBrowserServer final
{
public:
	class FString                                 Ip;                                                // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Port;                                              // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Region;                                            // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Status;                                            // 0x0028(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Pod_name;                                          // 0x0038(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Deployment;                                        // 0x0048(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Game_version;                                      // 0x0058(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsSessionBrowserServer) == 0x000008, "Wrong alignment on FAccelByteModelsSessionBrowserServer");
static_assert(sizeof(FAccelByteModelsSessionBrowserServer) == 0x000068, "Wrong size on FAccelByteModelsSessionBrowserServer");
static_assert(offsetof(FAccelByteModelsSessionBrowserServer, Ip) == 0x000000, "Member 'FAccelByteModelsSessionBrowserServer::Ip' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsSessionBrowserServer, Port) == 0x000010, "Member 'FAccelByteModelsSessionBrowserServer::Port' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsSessionBrowserServer, Region) == 0x000018, "Member 'FAccelByteModelsSessionBrowserServer::Region' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsSessionBrowserServer, Status) == 0x000028, "Member 'FAccelByteModelsSessionBrowserServer::Status' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsSessionBrowserServer, Pod_name) == 0x000038, "Member 'FAccelByteModelsSessionBrowserServer::Pod_name' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsSessionBrowserServer, Deployment) == 0x000048, "Member 'FAccelByteModelsSessionBrowserServer::Deployment' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsSessionBrowserServer, Game_version) == 0x000058, "Member 'FAccelByteModelsSessionBrowserServer::Game_version' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsSessionBrowserData
// 0x0230 (0x0230 - 0x0000)
struct FAccelByteModelsSessionBrowserData final
{
public:
	class FString                                 Session_id;                                        // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Namespace;                                         // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 User_id;                                           // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Username;                                          // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Session_type;                                      // 0x0040(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Game_version;                                      // 0x0050(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Joinable;                                          // 0x0060(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_61[0x7];                                       // 0x0061(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FAccelByteModelsSessionBrowserGameSetting Game_session_setting;                              // 0x0068(0x0068)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FAccelByteModelsSessionBrowserServer   Server;                                            // 0x00D0(0x0068)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	TArray<class FString>                         All_players;                                       // 0x0138(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class FString>                         Players;                                           // 0x0148(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class FString>                         Spectators;                                        // 0x0158(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FAccelByteModelsMatchmakingResult      Match;                                             // 0x0168(0x00C8)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsSessionBrowserData) == 0x000008, "Wrong alignment on FAccelByteModelsSessionBrowserData");
static_assert(sizeof(FAccelByteModelsSessionBrowserData) == 0x000230, "Wrong size on FAccelByteModelsSessionBrowserData");
static_assert(offsetof(FAccelByteModelsSessionBrowserData, Session_id) == 0x000000, "Member 'FAccelByteModelsSessionBrowserData::Session_id' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsSessionBrowserData, Namespace) == 0x000010, "Member 'FAccelByteModelsSessionBrowserData::Namespace' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsSessionBrowserData, User_id) == 0x000020, "Member 'FAccelByteModelsSessionBrowserData::User_id' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsSessionBrowserData, Username) == 0x000030, "Member 'FAccelByteModelsSessionBrowserData::Username' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsSessionBrowserData, Session_type) == 0x000040, "Member 'FAccelByteModelsSessionBrowserData::Session_type' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsSessionBrowserData, Game_version) == 0x000050, "Member 'FAccelByteModelsSessionBrowserData::Game_version' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsSessionBrowserData, Joinable) == 0x000060, "Member 'FAccelByteModelsSessionBrowserData::Joinable' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsSessionBrowserData, Game_session_setting) == 0x000068, "Member 'FAccelByteModelsSessionBrowserData::Game_session_setting' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsSessionBrowserData, Server) == 0x0000D0, "Member 'FAccelByteModelsSessionBrowserData::Server' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsSessionBrowserData, All_players) == 0x000138, "Member 'FAccelByteModelsSessionBrowserData::All_players' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsSessionBrowserData, Players) == 0x000148, "Member 'FAccelByteModelsSessionBrowserData::Players' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsSessionBrowserData, Spectators) == 0x000158, "Member 'FAccelByteModelsSessionBrowserData::Spectators' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsSessionBrowserData, Match) == 0x000168, "Member 'FAccelByteModelsSessionBrowserData::Match' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsRegisterServerRequest
// 0x0058 (0x0058 - 0x0000)
struct FAccelByteModelsRegisterServerRequest final
{
public:
	class FString                                 Game_version;                                      // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Ip;                                                // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Pod_name;                                          // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Port;                                              // 0x0030(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Provider;                                          // 0x0038(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Custom_Attribute;                                  // 0x0048(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsRegisterServerRequest) == 0x000008, "Wrong alignment on FAccelByteModelsRegisterServerRequest");
static_assert(sizeof(FAccelByteModelsRegisterServerRequest) == 0x000058, "Wrong size on FAccelByteModelsRegisterServerRequest");
static_assert(offsetof(FAccelByteModelsRegisterServerRequest, Game_version) == 0x000000, "Member 'FAccelByteModelsRegisterServerRequest::Game_version' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsRegisterServerRequest, Ip) == 0x000010, "Member 'FAccelByteModelsRegisterServerRequest::Ip' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsRegisterServerRequest, Pod_name) == 0x000020, "Member 'FAccelByteModelsRegisterServerRequest::Pod_name' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsRegisterServerRequest, Port) == 0x000030, "Member 'FAccelByteModelsRegisterServerRequest::Port' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsRegisterServerRequest, Provider) == 0x000038, "Member 'FAccelByteModelsRegisterServerRequest::Provider' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsRegisterServerRequest, Custom_Attribute) == 0x000048, "Member 'FAccelByteModelsRegisterServerRequest::Custom_Attribute' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsSessionBrowserGetResult
// 0x0050 (0x0050 - 0x0000)
struct FAccelByteModelsSessionBrowserGetResult final
{
public:
	TArray<struct FAccelByteModelsSessionBrowserData> Sessions;                                          // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FAccelByteModelsPaging                 Pagination;                                        // 0x0010(0x0040)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsSessionBrowserGetResult) == 0x000008, "Wrong alignment on FAccelByteModelsSessionBrowserGetResult");
static_assert(sizeof(FAccelByteModelsSessionBrowserGetResult) == 0x000050, "Wrong size on FAccelByteModelsSessionBrowserGetResult");
static_assert(offsetof(FAccelByteModelsSessionBrowserGetResult, Sessions) == 0x000000, "Member 'FAccelByteModelsSessionBrowserGetResult::Sessions' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsSessionBrowserGetResult, Pagination) == 0x000010, "Member 'FAccelByteModelsSessionBrowserGetResult::Pagination' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.SetSessionAttributeRequest
// 0x0020 (0x0020 - 0x0000)
struct FSetSessionAttributeRequest final
{
public:
	class FString                                 Key;                                               // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Value;                                             // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSetSessionAttributeRequest) == 0x000008, "Wrong alignment on FSetSessionAttributeRequest");
static_assert(sizeof(FSetSessionAttributeRequest) == 0x000020, "Wrong size on FSetSessionAttributeRequest");
static_assert(offsetof(FSetSessionAttributeRequest, Key) == 0x000000, "Member 'FSetSessionAttributeRequest::Key' has a wrong offset!");
static_assert(offsetof(FSetSessionAttributeRequest, Value) == 0x000010, "Member 'FSetSessionAttributeRequest::Value' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsSessionBrowserAddPlayerResponse
// 0x0001 (0x0001 - 0x0000)
struct FAccelByteModelsSessionBrowserAddPlayerResponse final
{
public:
	bool                                          Status;                                            // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsSessionBrowserAddPlayerResponse) == 0x000001, "Wrong alignment on FAccelByteModelsSessionBrowserAddPlayerResponse");
static_assert(sizeof(FAccelByteModelsSessionBrowserAddPlayerResponse) == 0x000001, "Wrong size on FAccelByteModelsSessionBrowserAddPlayerResponse");
static_assert(offsetof(FAccelByteModelsSessionBrowserAddPlayerResponse, Status) == 0x000000, "Member 'FAccelByteModelsSessionBrowserAddPlayerResponse::Status' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsSessionBrowserRecentPlayerData
// 0x0020 (0x0020 - 0x0000)
struct FAccelByteModelsSessionBrowserRecentPlayerData final
{
public:
	class FString                                 Other_id;                                          // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Other_display_name;                                // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsSessionBrowserRecentPlayerData) == 0x000008, "Wrong alignment on FAccelByteModelsSessionBrowserRecentPlayerData");
static_assert(sizeof(FAccelByteModelsSessionBrowserRecentPlayerData) == 0x000020, "Wrong size on FAccelByteModelsSessionBrowserRecentPlayerData");
static_assert(offsetof(FAccelByteModelsSessionBrowserRecentPlayerData, Other_id) == 0x000000, "Member 'FAccelByteModelsSessionBrowserRecentPlayerData::Other_id' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsSessionBrowserRecentPlayerData, Other_display_name) == 0x000010, "Member 'FAccelByteModelsSessionBrowserRecentPlayerData::Other_display_name' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsSessionBrowserRecentPlayerGetResult
// 0x0010 (0x0010 - 0x0000)
struct FAccelByteModelsSessionBrowserRecentPlayerGetResult final
{
public:
	TArray<struct FAccelByteModelsSessionBrowserRecentPlayerData> Data;                                              // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsSessionBrowserRecentPlayerGetResult) == 0x000008, "Wrong alignment on FAccelByteModelsSessionBrowserRecentPlayerGetResult");
static_assert(sizeof(FAccelByteModelsSessionBrowserRecentPlayerGetResult) == 0x000010, "Wrong size on FAccelByteModelsSessionBrowserRecentPlayerGetResult");
static_assert(offsetof(FAccelByteModelsSessionBrowserRecentPlayerGetResult, Data) == 0x000000, "Member 'FAccelByteModelsSessionBrowserRecentPlayerGetResult::Data' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsShutdownServerRequest
// 0x0028 (0x0028 - 0x0000)
struct FAccelByteModelsShutdownServerRequest final
{
public:
	bool                                          Kill_me;                                           // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Pod_name;                                          // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Session_id;                                        // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsShutdownServerRequest) == 0x000008, "Wrong alignment on FAccelByteModelsShutdownServerRequest");
static_assert(sizeof(FAccelByteModelsShutdownServerRequest) == 0x000028, "Wrong size on FAccelByteModelsShutdownServerRequest");
static_assert(offsetof(FAccelByteModelsShutdownServerRequest, Kill_me) == 0x000000, "Member 'FAccelByteModelsShutdownServerRequest::Kill_me' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsShutdownServerRequest, Pod_name) == 0x000008, "Member 'FAccelByteModelsShutdownServerRequest::Pod_name' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsShutdownServerRequest, Session_id) == 0x000018, "Member 'FAccelByteModelsShutdownServerRequest::Session_id' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.GetSessionAttributeRequest
// 0x0010 (0x0010 - 0x0000)
struct FGetSessionAttributeRequest final
{
public:
	class FString                                 Key;                                               // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGetSessionAttributeRequest) == 0x000008, "Wrong alignment on FGetSessionAttributeRequest");
static_assert(sizeof(FGetSessionAttributeRequest) == 0x000010, "Wrong size on FGetSessionAttributeRequest");
static_assert(offsetof(FGetSessionAttributeRequest, Key) == 0x000000, "Member 'FGetSessionAttributeRequest::Key' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsUserStatItemInfo
// 0x0078 (0x0078 - 0x0000)
struct FAccelByteModelsUserStatItemInfo final
{
public:
	class FString                                 CreatedAt;                                         // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Namespace;                                         // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 UserId;                                            // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 StatCode;                                          // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 StatName;                                          // 0x0040(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FString>                         Tags;                                              // 0x0050(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	class FString                                 UpdatedAt;                                         // 0x0060(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Value;                                             // 0x0070(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_74[0x4];                                       // 0x0074(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAccelByteModelsUserStatItemInfo) == 0x000008, "Wrong alignment on FAccelByteModelsUserStatItemInfo");
static_assert(sizeof(FAccelByteModelsUserStatItemInfo) == 0x000078, "Wrong size on FAccelByteModelsUserStatItemInfo");
static_assert(offsetof(FAccelByteModelsUserStatItemInfo, CreatedAt) == 0x000000, "Member 'FAccelByteModelsUserStatItemInfo::CreatedAt' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsUserStatItemInfo, Namespace) == 0x000010, "Member 'FAccelByteModelsUserStatItemInfo::Namespace' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsUserStatItemInfo, UserId) == 0x000020, "Member 'FAccelByteModelsUserStatItemInfo::UserId' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsUserStatItemInfo, StatCode) == 0x000030, "Member 'FAccelByteModelsUserStatItemInfo::StatCode' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsUserStatItemInfo, StatName) == 0x000040, "Member 'FAccelByteModelsUserStatItemInfo::StatName' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsUserStatItemInfo, Tags) == 0x000050, "Member 'FAccelByteModelsUserStatItemInfo::Tags' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsUserStatItemInfo, UpdatedAt) == 0x000060, "Member 'FAccelByteModelsUserStatItemInfo::UpdatedAt' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsUserStatItemInfo, Value) == 0x000070, "Member 'FAccelByteModelsUserStatItemInfo::Value' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsUserStatItemPagingSlicedResult
// 0x0050 (0x0050 - 0x0000)
struct FAccelByteModelsUserStatItemPagingSlicedResult final
{
public:
	TArray<struct FAccelByteModelsUserStatItemInfo> Data;                                              // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FAccelByteModelsPaging                 Paging;                                            // 0x0010(0x0040)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsUserStatItemPagingSlicedResult) == 0x000008, "Wrong alignment on FAccelByteModelsUserStatItemPagingSlicedResult");
static_assert(sizeof(FAccelByteModelsUserStatItemPagingSlicedResult) == 0x000050, "Wrong size on FAccelByteModelsUserStatItemPagingSlicedResult");
static_assert(offsetof(FAccelByteModelsUserStatItemPagingSlicedResult, Data) == 0x000000, "Member 'FAccelByteModelsUserStatItemPagingSlicedResult::Data' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsUserStatItemPagingSlicedResult, Paging) == 0x000010, "Member 'FAccelByteModelsUserStatItemPagingSlicedResult::Paging' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsUpdateMetadataRequest
// 0x0030 (0x0030 - 0x0000)
struct FAccelByteModelsUpdateMetadataRequest final
{
public:
	class FString                                 Label;                                             // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FString>                         Tags;                                              // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	class FString                                 CustomAttribute;                                   // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsUpdateMetadataRequest) == 0x000008, "Wrong alignment on FAccelByteModelsUpdateMetadataRequest");
static_assert(sizeof(FAccelByteModelsUpdateMetadataRequest) == 0x000030, "Wrong size on FAccelByteModelsUpdateMetadataRequest");
static_assert(offsetof(FAccelByteModelsUpdateMetadataRequest, Label) == 0x000000, "Member 'FAccelByteModelsUpdateMetadataRequest::Label' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsUpdateMetadataRequest, Tags) == 0x000010, "Member 'FAccelByteModelsUpdateMetadataRequest::Tags' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsUpdateMetadataRequest, CustomAttribute) == 0x000020, "Member 'FAccelByteModelsUpdateMetadataRequest::CustomAttribute' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsSetSessionAttributesResponse
// 0x0010 (0x0010 - 0x0000)
struct FAccelByteModelsSetSessionAttributesResponse final
{
public:
	class FString                                 Code;                                              // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsSetSessionAttributesResponse) == 0x000008, "Wrong alignment on FAccelByteModelsSetSessionAttributesResponse");
static_assert(sizeof(FAccelByteModelsSetSessionAttributesResponse) == 0x000010, "Wrong size on FAccelByteModelsSetSessionAttributesResponse");
static_assert(offsetof(FAccelByteModelsSetSessionAttributesResponse, Code) == 0x000000, "Member 'FAccelByteModelsSetSessionAttributesResponse::Code' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsGetSessionAttributesResponse
// 0x0020 (0x0020 - 0x0000)
struct FAccelByteModelsGetSessionAttributesResponse final
{
public:
	class FString                                 Code;                                              // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Value;                                             // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsGetSessionAttributesResponse) == 0x000008, "Wrong alignment on FAccelByteModelsGetSessionAttributesResponse");
static_assert(sizeof(FAccelByteModelsGetSessionAttributesResponse) == 0x000020, "Wrong size on FAccelByteModelsGetSessionAttributesResponse");
static_assert(offsetof(FAccelByteModelsGetSessionAttributesResponse, Code) == 0x000000, "Member 'FAccelByteModelsGetSessionAttributesResponse::Code' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsGetSessionAttributesResponse, Value) == 0x000010, "Member 'FAccelByteModelsGetSessionAttributesResponse::Value' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsGetAllSessionAttributesResponse
// 0x0030 (0x0030 - 0x0000)
struct FAccelByteModelsGetAllSessionAttributesResponse final
{
public:
	class FString                                 Code;                                              // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FJsonObjectWrapper                     Attributes;                                        // 0x0010(0x0020)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsGetAllSessionAttributesResponse) == 0x000008, "Wrong alignment on FAccelByteModelsGetAllSessionAttributesResponse");
static_assert(sizeof(FAccelByteModelsGetAllSessionAttributesResponse) == 0x000030, "Wrong size on FAccelByteModelsGetAllSessionAttributesResponse");
static_assert(offsetof(FAccelByteModelsGetAllSessionAttributesResponse, Code) == 0x000000, "Member 'FAccelByteModelsGetAllSessionAttributesResponse::Code' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsGetAllSessionAttributesResponse, Attributes) == 0x000010, "Member 'FAccelByteModelsGetAllSessionAttributesResponse::Attributes' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsUGCPayloadUrl
// 0x0020 (0x0020 - 0x0000)
struct FAccelByteModelsUGCPayloadUrl final
{
public:
	class FString                                 Source;                                            // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 URL;                                               // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsUGCPayloadUrl) == 0x000008, "Wrong alignment on FAccelByteModelsUGCPayloadUrl");
static_assert(sizeof(FAccelByteModelsUGCPayloadUrl) == 0x000020, "Wrong size on FAccelByteModelsUGCPayloadUrl");
static_assert(offsetof(FAccelByteModelsUGCPayloadUrl, Source) == 0x000000, "Member 'FAccelByteModelsUGCPayloadUrl::Source' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsUGCPayloadUrl, URL) == 0x000010, "Member 'FAccelByteModelsUGCPayloadUrl::URL' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsUGCResponse
// 0x00F0 (0x00F0 - 0x0000)
struct FAccelByteModelsUGCResponse final
{
public:
	class FString                                 ChannelId;                                         // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ContentType;                                       // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDateTime                              CreatedTime;                                       // 0x0020(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 CreatorName;                                       // 0x0028(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 FileExtension;                                     // 0x0038(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ID;                                                // 0x0048(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsOfficial;                                        // 0x0058(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_59[0x7];                                       // 0x0059(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Name;                                              // 0x0060(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Namespace;                                         // 0x0070(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FAccelByteModelsUGCPayloadUrl>  PayloadUrl;                                        // 0x0080(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	class FString                                 Preview;                                           // 0x0090(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ShareCode;                                         // 0x00A0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 SubType;                                           // 0x00B0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FString>                         Tags;                                              // 0x00C0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	class FString                                 Type;                                              // 0x00D0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 UserId;                                            // 0x00E0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsUGCResponse) == 0x000008, "Wrong alignment on FAccelByteModelsUGCResponse");
static_assert(sizeof(FAccelByteModelsUGCResponse) == 0x0000F0, "Wrong size on FAccelByteModelsUGCResponse");
static_assert(offsetof(FAccelByteModelsUGCResponse, ChannelId) == 0x000000, "Member 'FAccelByteModelsUGCResponse::ChannelId' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsUGCResponse, ContentType) == 0x000010, "Member 'FAccelByteModelsUGCResponse::ContentType' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsUGCResponse, CreatedTime) == 0x000020, "Member 'FAccelByteModelsUGCResponse::CreatedTime' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsUGCResponse, CreatorName) == 0x000028, "Member 'FAccelByteModelsUGCResponse::CreatorName' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsUGCResponse, FileExtension) == 0x000038, "Member 'FAccelByteModelsUGCResponse::FileExtension' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsUGCResponse, ID) == 0x000048, "Member 'FAccelByteModelsUGCResponse::ID' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsUGCResponse, IsOfficial) == 0x000058, "Member 'FAccelByteModelsUGCResponse::IsOfficial' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsUGCResponse, Name) == 0x000060, "Member 'FAccelByteModelsUGCResponse::Name' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsUGCResponse, Namespace) == 0x000070, "Member 'FAccelByteModelsUGCResponse::Namespace' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsUGCResponse, PayloadUrl) == 0x000080, "Member 'FAccelByteModelsUGCResponse::PayloadUrl' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsUGCResponse, Preview) == 0x000090, "Member 'FAccelByteModelsUGCResponse::Preview' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsUGCResponse, ShareCode) == 0x0000A0, "Member 'FAccelByteModelsUGCResponse::ShareCode' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsUGCResponse, SubType) == 0x0000B0, "Member 'FAccelByteModelsUGCResponse::SubType' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsUGCResponse, Tags) == 0x0000C0, "Member 'FAccelByteModelsUGCResponse::Tags' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsUGCResponse, Type) == 0x0000D0, "Member 'FAccelByteModelsUGCResponse::Type' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsUGCResponse, UserId) == 0x0000E0, "Member 'FAccelByteModelsUGCResponse::UserId' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsUGCCreatorState
// 0x0018 (0x0018 - 0x0000)
struct FAccelByteModelsUGCCreatorState final
{
public:
	bool                                          State;                                             // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 UserId;                                            // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsUGCCreatorState) == 0x000008, "Wrong alignment on FAccelByteModelsUGCCreatorState");
static_assert(sizeof(FAccelByteModelsUGCCreatorState) == 0x000018, "Wrong size on FAccelByteModelsUGCCreatorState");
static_assert(offsetof(FAccelByteModelsUGCCreatorState, State) == 0x000000, "Member 'FAccelByteModelsUGCCreatorState::State' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsUGCCreatorState, UserId) == 0x000008, "Member 'FAccelByteModelsUGCCreatorState::UserId' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsUGCContentResponse
// 0x0118 (0x0118 - 0x0000)
struct FAccelByteModelsUGCContentResponse final
{
public:
	class FString                                 ChannelId;                                         // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDateTime                              CreatedTime;                                       // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FAccelByteModelsUGCCreatorState        CreatorFollowState;                                // 0x0018(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	class FString                                 CreatorName;                                       // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DownloadCount;                                     // 0x0040(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_44[0x4];                                       // 0x0044(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 FileExtension;                                     // 0x0048(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ID;                                                // 0x0058(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsOfficial;                                        // 0x0068(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_69[0x3];                                       // 0x0069(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         LikeCount;                                         // 0x006C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FAccelByteModelsUGCCreatorState        LikeState;                                         // 0x0070(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	class FString                                 Name;                                              // 0x0088(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Namespace;                                         // 0x0098(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Payload;                                           // 0x00A8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FAccelByteModelsUGCPayloadUrl>  PayloadUrl;                                        // 0x00B8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	class FString                                 ShareCode;                                         // 0x00C8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 SubType;                                           // 0x00D8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FString>                         Tags;                                              // 0x00E8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	class FString                                 Type;                                              // 0x00F8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 UserId;                                            // 0x0108(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsUGCContentResponse) == 0x000008, "Wrong alignment on FAccelByteModelsUGCContentResponse");
static_assert(sizeof(FAccelByteModelsUGCContentResponse) == 0x000118, "Wrong size on FAccelByteModelsUGCContentResponse");
static_assert(offsetof(FAccelByteModelsUGCContentResponse, ChannelId) == 0x000000, "Member 'FAccelByteModelsUGCContentResponse::ChannelId' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsUGCContentResponse, CreatedTime) == 0x000010, "Member 'FAccelByteModelsUGCContentResponse::CreatedTime' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsUGCContentResponse, CreatorFollowState) == 0x000018, "Member 'FAccelByteModelsUGCContentResponse::CreatorFollowState' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsUGCContentResponse, CreatorName) == 0x000030, "Member 'FAccelByteModelsUGCContentResponse::CreatorName' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsUGCContentResponse, DownloadCount) == 0x000040, "Member 'FAccelByteModelsUGCContentResponse::DownloadCount' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsUGCContentResponse, FileExtension) == 0x000048, "Member 'FAccelByteModelsUGCContentResponse::FileExtension' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsUGCContentResponse, ID) == 0x000058, "Member 'FAccelByteModelsUGCContentResponse::ID' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsUGCContentResponse, IsOfficial) == 0x000068, "Member 'FAccelByteModelsUGCContentResponse::IsOfficial' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsUGCContentResponse, LikeCount) == 0x00006C, "Member 'FAccelByteModelsUGCContentResponse::LikeCount' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsUGCContentResponse, LikeState) == 0x000070, "Member 'FAccelByteModelsUGCContentResponse::LikeState' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsUGCContentResponse, Name) == 0x000088, "Member 'FAccelByteModelsUGCContentResponse::Name' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsUGCContentResponse, Namespace) == 0x000098, "Member 'FAccelByteModelsUGCContentResponse::Namespace' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsUGCContentResponse, Payload) == 0x0000A8, "Member 'FAccelByteModelsUGCContentResponse::Payload' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsUGCContentResponse, PayloadUrl) == 0x0000B8, "Member 'FAccelByteModelsUGCContentResponse::PayloadUrl' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsUGCContentResponse, ShareCode) == 0x0000C8, "Member 'FAccelByteModelsUGCContentResponse::ShareCode' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsUGCContentResponse, SubType) == 0x0000D8, "Member 'FAccelByteModelsUGCContentResponse::SubType' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsUGCContentResponse, Tags) == 0x0000E8, "Member 'FAccelByteModelsUGCContentResponse::Tags' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsUGCContentResponse, Type) == 0x0000F8, "Member 'FAccelByteModelsUGCContentResponse::Type' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsUGCContentResponse, UserId) == 0x000108, "Member 'FAccelByteModelsUGCContentResponse::UserId' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsUGCPreview
// 0x0010 (0x0010 - 0x0000)
struct FAccelByteModelsUGCPreview final
{
public:
	class FString                                 Preview;                                           // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsUGCPreview) == 0x000008, "Wrong alignment on FAccelByteModelsUGCPreview");
static_assert(sizeof(FAccelByteModelsUGCPreview) == 0x000010, "Wrong size on FAccelByteModelsUGCPreview");
static_assert(offsetof(FAccelByteModelsUGCPreview, Preview) == 0x000000, "Member 'FAccelByteModelsUGCPreview::Preview' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsUGCTypeResponse
// 0x0040 (0x0040 - 0x0000)
struct FAccelByteModelsUGCTypeResponse final
{
public:
	class FString                                 ID;                                                // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Namespace;                                         // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FString>                         SubType;                                           // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	class FString                                 Type;                                              // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsUGCTypeResponse) == 0x000008, "Wrong alignment on FAccelByteModelsUGCTypeResponse");
static_assert(sizeof(FAccelByteModelsUGCTypeResponse) == 0x000040, "Wrong size on FAccelByteModelsUGCTypeResponse");
static_assert(offsetof(FAccelByteModelsUGCTypeResponse, ID) == 0x000000, "Member 'FAccelByteModelsUGCTypeResponse::ID' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsUGCTypeResponse, Namespace) == 0x000010, "Member 'FAccelByteModelsUGCTypeResponse::Namespace' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsUGCTypeResponse, SubType) == 0x000020, "Member 'FAccelByteModelsUGCTypeResponse::SubType' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsUGCTypeResponse, Type) == 0x000030, "Member 'FAccelByteModelsUGCTypeResponse::Type' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsUGCTypesPagingResponse
// 0x0050 (0x0050 - 0x0000)
struct FAccelByteModelsUGCTypesPagingResponse final
{
public:
	TArray<struct FAccelByteModelsUGCTypeResponse> Data;                                              // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FAccelByteModelsPaging                 Paging;                                            // 0x0010(0x0040)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsUGCTypesPagingResponse) == 0x000008, "Wrong alignment on FAccelByteModelsUGCTypesPagingResponse");
static_assert(sizeof(FAccelByteModelsUGCTypesPagingResponse) == 0x000050, "Wrong size on FAccelByteModelsUGCTypesPagingResponse");
static_assert(offsetof(FAccelByteModelsUGCTypesPagingResponse, Data) == 0x000000, "Member 'FAccelByteModelsUGCTypesPagingResponse::Data' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsUGCTypesPagingResponse, Paging) == 0x000010, "Member 'FAccelByteModelsUGCTypesPagingResponse::Paging' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsUGCChannelResponse
// 0x0040 (0x0040 - 0x0000)
struct FAccelByteModelsUGCChannelResponse final
{
public:
	class FString                                 ID;                                                // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Name;                                              // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Namespace;                                         // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 UserId;                                            // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsUGCChannelResponse) == 0x000008, "Wrong alignment on FAccelByteModelsUGCChannelResponse");
static_assert(sizeof(FAccelByteModelsUGCChannelResponse) == 0x000040, "Wrong size on FAccelByteModelsUGCChannelResponse");
static_assert(offsetof(FAccelByteModelsUGCChannelResponse, ID) == 0x000000, "Member 'FAccelByteModelsUGCChannelResponse::ID' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsUGCChannelResponse, Name) == 0x000010, "Member 'FAccelByteModelsUGCChannelResponse::Name' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsUGCChannelResponse, Namespace) == 0x000020, "Member 'FAccelByteModelsUGCChannelResponse::Namespace' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsUGCChannelResponse, UserId) == 0x000030, "Member 'FAccelByteModelsUGCChannelResponse::UserId' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsUGCChannelsPagingResponse
// 0x0050 (0x0050 - 0x0000)
struct FAccelByteModelsUGCChannelsPagingResponse final
{
public:
	TArray<struct FAccelByteModelsUGCChannelResponse> Data;                                              // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FAccelByteModelsPaging                 Paging;                                            // 0x0010(0x0040)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsUGCChannelsPagingResponse) == 0x000008, "Wrong alignment on FAccelByteModelsUGCChannelsPagingResponse");
static_assert(sizeof(FAccelByteModelsUGCChannelsPagingResponse) == 0x000050, "Wrong size on FAccelByteModelsUGCChannelsPagingResponse");
static_assert(offsetof(FAccelByteModelsUGCChannelsPagingResponse, Data) == 0x000000, "Member 'FAccelByteModelsUGCChannelsPagingResponse::Data' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsUGCChannelsPagingResponse, Paging) == 0x000010, "Member 'FAccelByteModelsUGCChannelsPagingResponse::Paging' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccountUserData
// 0x0120 (0x0120 - 0x0000)
struct FAccountUserData final
{
public:
	class FString                                 AuthType;                                          // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FBan>                           Bans;                                              // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	class FString                                 Country;                                           // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 CreatedAt;                                         // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 DateOfBirth;                                       // 0x0040(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 DisplayName;                                       // 0x0050(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          EmailVerified;                                     // 0x0060(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Enabled;                                           // 0x0061(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_62[0x6];                                       // 0x0062(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 LastEnabledChangedTime;                            // 0x0068(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 LoginId;                                           // 0x0078(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Namespace;                                         // 0x0088(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FPermission>                    Permissions;                                       // 0x0098(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          PhoneVerified;                                     // 0x00A8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A9[0x7];                                       // 0x00A9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 PlatformId;                                        // 0x00B0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 PlatformUserId;                                    // 0x00C0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FString>                         Roles;                                             // 0x00D0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	class FString                                 UserId;                                            // 0x00E0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Username;                                          // 0x00F0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 EmailAddress;                                      // 0x0100(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 AvatarUrl;                                         // 0x0110(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccountUserData) == 0x000008, "Wrong alignment on FAccountUserData");
static_assert(sizeof(FAccountUserData) == 0x000120, "Wrong size on FAccountUserData");
static_assert(offsetof(FAccountUserData, AuthType) == 0x000000, "Member 'FAccountUserData::AuthType' has a wrong offset!");
static_assert(offsetof(FAccountUserData, Bans) == 0x000010, "Member 'FAccountUserData::Bans' has a wrong offset!");
static_assert(offsetof(FAccountUserData, Country) == 0x000020, "Member 'FAccountUserData::Country' has a wrong offset!");
static_assert(offsetof(FAccountUserData, CreatedAt) == 0x000030, "Member 'FAccountUserData::CreatedAt' has a wrong offset!");
static_assert(offsetof(FAccountUserData, DateOfBirth) == 0x000040, "Member 'FAccountUserData::DateOfBirth' has a wrong offset!");
static_assert(offsetof(FAccountUserData, DisplayName) == 0x000050, "Member 'FAccountUserData::DisplayName' has a wrong offset!");
static_assert(offsetof(FAccountUserData, EmailVerified) == 0x000060, "Member 'FAccountUserData::EmailVerified' has a wrong offset!");
static_assert(offsetof(FAccountUserData, Enabled) == 0x000061, "Member 'FAccountUserData::Enabled' has a wrong offset!");
static_assert(offsetof(FAccountUserData, LastEnabledChangedTime) == 0x000068, "Member 'FAccountUserData::LastEnabledChangedTime' has a wrong offset!");
static_assert(offsetof(FAccountUserData, LoginId) == 0x000078, "Member 'FAccountUserData::LoginId' has a wrong offset!");
static_assert(offsetof(FAccountUserData, Namespace) == 0x000088, "Member 'FAccountUserData::Namespace' has a wrong offset!");
static_assert(offsetof(FAccountUserData, Permissions) == 0x000098, "Member 'FAccountUserData::Permissions' has a wrong offset!");
static_assert(offsetof(FAccountUserData, PhoneVerified) == 0x0000A8, "Member 'FAccountUserData::PhoneVerified' has a wrong offset!");
static_assert(offsetof(FAccountUserData, PlatformId) == 0x0000B0, "Member 'FAccountUserData::PlatformId' has a wrong offset!");
static_assert(offsetof(FAccountUserData, PlatformUserId) == 0x0000C0, "Member 'FAccountUserData::PlatformUserId' has a wrong offset!");
static_assert(offsetof(FAccountUserData, Roles) == 0x0000D0, "Member 'FAccountUserData::Roles' has a wrong offset!");
static_assert(offsetof(FAccountUserData, UserId) == 0x0000E0, "Member 'FAccountUserData::UserId' has a wrong offset!");
static_assert(offsetof(FAccountUserData, Username) == 0x0000F0, "Member 'FAccountUserData::Username' has a wrong offset!");
static_assert(offsetof(FAccountUserData, EmailAddress) == 0x000100, "Member 'FAccountUserData::EmailAddress' has a wrong offset!");
static_assert(offsetof(FAccountUserData, AvatarUrl) == 0x000110, "Member 'FAccountUserData::AvatarUrl' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.PagedPlatformLinks
// 0x0050 (0x0050 - 0x0000)
struct FPagedPlatformLinks final
{
public:
	TArray<struct FPlatformLink>                  Data;                                              // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FAccelByteModelsPaging                 Paging;                                            // 0x0010(0x0040)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPagedPlatformLinks) == 0x000008, "Wrong alignment on FPagedPlatformLinks");
static_assert(sizeof(FPagedPlatformLinks) == 0x000050, "Wrong size on FPagedPlatformLinks");
static_assert(offsetof(FPagedPlatformLinks, Data) == 0x000000, "Member 'FPagedPlatformLinks::Data' has a wrong offset!");
static_assert(offsetof(FPagedPlatformLinks, Paging) == 0x000010, "Member 'FPagedPlatformLinks::Paging' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.PagedPublicUsersInfo
// 0x0050 (0x0050 - 0x0000)
struct FPagedPublicUsersInfo final
{
public:
	TArray<struct FPublicUserInfo>                Data;                                              // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FAccelByteModelsPaging                 Paging;                                            // 0x0010(0x0040)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPagedPublicUsersInfo) == 0x000008, "Wrong alignment on FPagedPublicUsersInfo");
static_assert(sizeof(FPagedPublicUsersInfo) == 0x000050, "Wrong size on FPagedPublicUsersInfo");
static_assert(offsetof(FPagedPublicUsersInfo, Data) == 0x000000, "Member 'FPagedPublicUsersInfo::Data' has a wrong offset!");
static_assert(offsetof(FPagedPublicUsersInfo, Paging) == 0x000010, "Member 'FPagedPublicUsersInfo::Paging' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.PlatformUserIdMap
// 0x0030 (0x0030 - 0x0000)
struct FPlatformUserIdMap final
{
public:
	class FString                                 UserId;                                            // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 PlatformUserId;                                    // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 PlatformId;                                        // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPlatformUserIdMap) == 0x000008, "Wrong alignment on FPlatformUserIdMap");
static_assert(sizeof(FPlatformUserIdMap) == 0x000030, "Wrong size on FPlatformUserIdMap");
static_assert(offsetof(FPlatformUserIdMap, UserId) == 0x000000, "Member 'FPlatformUserIdMap::UserId' has a wrong offset!");
static_assert(offsetof(FPlatformUserIdMap, PlatformUserId) == 0x000010, "Member 'FPlatformUserIdMap::PlatformUserId' has a wrong offset!");
static_assert(offsetof(FPlatformUserIdMap, PlatformId) == 0x000020, "Member 'FPlatformUserIdMap::PlatformId' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.BulkPlatformUserIdResponse
// 0x0010 (0x0010 - 0x0000)
struct FBulkPlatformUserIdResponse final
{
public:
	TArray<struct FPlatformUserIdMap>             UserIdPlatforms;                                   // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBulkPlatformUserIdResponse) == 0x000008, "Wrong alignment on FBulkPlatformUserIdResponse");
static_assert(sizeof(FBulkPlatformUserIdResponse) == 0x000010, "Wrong size on FBulkPlatformUserIdResponse");
static_assert(offsetof(FBulkPlatformUserIdResponse, UserIdPlatforms) == 0x000000, "Member 'FBulkPlatformUserIdResponse::UserIdPlatforms' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.Validation
// 0x0088 (0x0088 - 0x0000)
struct FValidation final
{
public:
	bool                                          AllowDigit;                                        // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          AllowLetter;                                       // 0x0001(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          AllowSpace;                                        // 0x0002(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          AllowUnicode;                                      // 0x0003(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FValidationDescription                 Description;                                       // 0x0008(0x0020)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	bool                                          IsCustomRegex;                                     // 0x0028(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 LetterCase;                                        // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxLength;                                         // 0x0040(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxRepeatingAlphaNum;                              // 0x0044(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxRepeatingSpecialCharacter;                      // 0x0048(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MinCharType;                                       // 0x004C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MinLength;                                         // 0x0050(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_54[0x4];                                       // 0x0054(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Regex;                                             // 0x0058(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 SpecialCharacterLocation;                          // 0x0068(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FString>                         SpecialCharacters;                                 // 0x0078(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FValidation) == 0x000008, "Wrong alignment on FValidation");
static_assert(sizeof(FValidation) == 0x000088, "Wrong size on FValidation");
static_assert(offsetof(FValidation, AllowDigit) == 0x000000, "Member 'FValidation::AllowDigit' has a wrong offset!");
static_assert(offsetof(FValidation, AllowLetter) == 0x000001, "Member 'FValidation::AllowLetter' has a wrong offset!");
static_assert(offsetof(FValidation, AllowSpace) == 0x000002, "Member 'FValidation::AllowSpace' has a wrong offset!");
static_assert(offsetof(FValidation, AllowUnicode) == 0x000003, "Member 'FValidation::AllowUnicode' has a wrong offset!");
static_assert(offsetof(FValidation, Description) == 0x000008, "Member 'FValidation::Description' has a wrong offset!");
static_assert(offsetof(FValidation, IsCustomRegex) == 0x000028, "Member 'FValidation::IsCustomRegex' has a wrong offset!");
static_assert(offsetof(FValidation, LetterCase) == 0x000030, "Member 'FValidation::LetterCase' has a wrong offset!");
static_assert(offsetof(FValidation, MaxLength) == 0x000040, "Member 'FValidation::MaxLength' has a wrong offset!");
static_assert(offsetof(FValidation, MaxRepeatingAlphaNum) == 0x000044, "Member 'FValidation::MaxRepeatingAlphaNum' has a wrong offset!");
static_assert(offsetof(FValidation, MaxRepeatingSpecialCharacter) == 0x000048, "Member 'FValidation::MaxRepeatingSpecialCharacter' has a wrong offset!");
static_assert(offsetof(FValidation, MinCharType) == 0x00004C, "Member 'FValidation::MinCharType' has a wrong offset!");
static_assert(offsetof(FValidation, MinLength) == 0x000050, "Member 'FValidation::MinLength' has a wrong offset!");
static_assert(offsetof(FValidation, Regex) == 0x000058, "Member 'FValidation::Regex' has a wrong offset!");
static_assert(offsetof(FValidation, SpecialCharacterLocation) == 0x000068, "Member 'FValidation::SpecialCharacterLocation' has a wrong offset!");
static_assert(offsetof(FValidation, SpecialCharacters) == 0x000078, "Member 'FValidation::SpecialCharacters' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.DataInputValidation
// 0x0098 (0x0098 - 0x0000)
struct FDataInputValidation final
{
public:
	class FString                                 Field;                                             // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FValidation                            Validation;                                        // 0x0010(0x0088)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FDataInputValidation) == 0x000008, "Wrong alignment on FDataInputValidation");
static_assert(sizeof(FDataInputValidation) == 0x000098, "Wrong size on FDataInputValidation");
static_assert(offsetof(FDataInputValidation, Field) == 0x000000, "Member 'FDataInputValidation::Field' has a wrong offset!");
static_assert(offsetof(FDataInputValidation, Validation) == 0x000010, "Member 'FDataInputValidation::Validation' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.BaseUserInfo
// 0x0090 (0x0090 - 0x0000)
struct FBaseUserInfo final
{
public:
	class FString                                 AvatarUrl;                                         // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 DisplayName;                                       // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<class FString, class FString>            PlatformUserIds;                                   // 0x0020(0x0050)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	class FString                                 UserId;                                            // 0x0070(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 PublisherAvatarUrl;                                // 0x0080(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBaseUserInfo) == 0x000008, "Wrong alignment on FBaseUserInfo");
static_assert(sizeof(FBaseUserInfo) == 0x000090, "Wrong size on FBaseUserInfo");
static_assert(offsetof(FBaseUserInfo, AvatarUrl) == 0x000000, "Member 'FBaseUserInfo::AvatarUrl' has a wrong offset!");
static_assert(offsetof(FBaseUserInfo, DisplayName) == 0x000010, "Member 'FBaseUserInfo::DisplayName' has a wrong offset!");
static_assert(offsetof(FBaseUserInfo, PlatformUserIds) == 0x000020, "Member 'FBaseUserInfo::PlatformUserIds' has a wrong offset!");
static_assert(offsetof(FBaseUserInfo, UserId) == 0x000070, "Member 'FBaseUserInfo::UserId' has a wrong offset!");
static_assert(offsetof(FBaseUserInfo, PublisherAvatarUrl) == 0x000080, "Member 'FBaseUserInfo::PublisherAvatarUrl' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.ListBulkUserInfo
// 0x0010 (0x0010 - 0x0000)
struct FListBulkUserInfo final
{
public:
	TArray<struct FBaseUserInfo>                  Data;                                              // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FListBulkUserInfo) == 0x000008, "Wrong alignment on FListBulkUserInfo");
static_assert(sizeof(FListBulkUserInfo) == 0x000010, "Wrong size on FListBulkUserInfo");
static_assert(offsetof(FListBulkUserInfo, Data) == 0x000000, "Member 'FListBulkUserInfo::Data' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.CountryInfo
// 0x0040 (0x0040 - 0x0000)
struct FCountryInfo final
{
public:
	class FString                                 CountryCode;                                       // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 CountryName;                                       // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 State;                                             // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 City;                                              // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCountryInfo) == 0x000008, "Wrong alignment on FCountryInfo");
static_assert(sizeof(FCountryInfo) == 0x000040, "Wrong size on FCountryInfo");
static_assert(offsetof(FCountryInfo, CountryCode) == 0x000000, "Member 'FCountryInfo::CountryCode' has a wrong offset!");
static_assert(offsetof(FCountryInfo, CountryName) == 0x000010, "Member 'FCountryInfo::CountryName' has a wrong offset!");
static_assert(offsetof(FCountryInfo, State) == 0x000020, "Member 'FCountryInfo::State' has a wrong offset!");
static_assert(offsetof(FCountryInfo, City) == 0x000030, "Member 'FCountryInfo::City' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsLobbyBaseResponse
// 0x0010 (0x0010 - 0x0000)
struct FAccelByteModelsLobbyBaseResponse final
{
public:
	class FString                                 Code;                                              // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsLobbyBaseResponse) == 0x000008, "Wrong alignment on FAccelByteModelsLobbyBaseResponse");
static_assert(sizeof(FAccelByteModelsLobbyBaseResponse) == 0x000010, "Wrong size on FAccelByteModelsLobbyBaseResponse");
static_assert(offsetof(FAccelByteModelsLobbyBaseResponse, Code) == 0x000000, "Member 'FAccelByteModelsLobbyBaseResponse::Code' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsTimeLimitedBalance
// 0x0020 (0x0020 - 0x0000)
struct FAccelByteModelsTimeLimitedBalance final
{
public:
	int32                                         Balance;                                           // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 BalanceSource;                                     // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDateTime                              ExpiredAt;                                         // 0x0018(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsTimeLimitedBalance) == 0x000008, "Wrong alignment on FAccelByteModelsTimeLimitedBalance");
static_assert(sizeof(FAccelByteModelsTimeLimitedBalance) == 0x000020, "Wrong size on FAccelByteModelsTimeLimitedBalance");
static_assert(offsetof(FAccelByteModelsTimeLimitedBalance, Balance) == 0x000000, "Member 'FAccelByteModelsTimeLimitedBalance::Balance' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsTimeLimitedBalance, BalanceSource) == 0x000008, "Member 'FAccelByteModelsTimeLimitedBalance::BalanceSource' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsTimeLimitedBalance, ExpiredAt) == 0x000018, "Member 'FAccelByteModelsTimeLimitedBalance::ExpiredAt' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsWalletInfo
// 0x0090 (0x0090 - 0x0000)
struct FAccelByteModelsWalletInfo final
{
public:
	class FString                                 ID;                                                // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Namespace;                                         // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 UserId;                                            // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 CurrencyCode;                                      // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 CurrencySymbol;                                    // 0x0040(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Balance;                                           // 0x0050(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_54[0x4];                                       // 0x0054(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 BalanceOrigin;                                     // 0x0058(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FAccelByteModelsTimeLimitedBalance> TimeLimitedBalances;                               // 0x0068(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FDateTime                              CreatedAt;                                         // 0x0078(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDateTime                              UpdatedAt;                                         // 0x0080(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAccelByteItemStatus                          Status;                                            // 0x0088(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_89[0x7];                                       // 0x0089(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAccelByteModelsWalletInfo) == 0x000008, "Wrong alignment on FAccelByteModelsWalletInfo");
static_assert(sizeof(FAccelByteModelsWalletInfo) == 0x000090, "Wrong size on FAccelByteModelsWalletInfo");
static_assert(offsetof(FAccelByteModelsWalletInfo, ID) == 0x000000, "Member 'FAccelByteModelsWalletInfo::ID' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsWalletInfo, Namespace) == 0x000010, "Member 'FAccelByteModelsWalletInfo::Namespace' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsWalletInfo, UserId) == 0x000020, "Member 'FAccelByteModelsWalletInfo::UserId' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsWalletInfo, CurrencyCode) == 0x000030, "Member 'FAccelByteModelsWalletInfo::CurrencyCode' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsWalletInfo, CurrencySymbol) == 0x000040, "Member 'FAccelByteModelsWalletInfo::CurrencySymbol' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsWalletInfo, Balance) == 0x000050, "Member 'FAccelByteModelsWalletInfo::Balance' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsWalletInfo, BalanceOrigin) == 0x000058, "Member 'FAccelByteModelsWalletInfo::BalanceOrigin' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsWalletInfo, TimeLimitedBalances) == 0x000068, "Member 'FAccelByteModelsWalletInfo::TimeLimitedBalances' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsWalletInfo, CreatedAt) == 0x000078, "Member 'FAccelByteModelsWalletInfo::CreatedAt' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsWalletInfo, UpdatedAt) == 0x000080, "Member 'FAccelByteModelsWalletInfo::UpdatedAt' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsWalletInfo, Status) == 0x000088, "Member 'FAccelByteModelsWalletInfo::Status' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.Oauth2Session
// 0x0028 (0x0028 - 0x0000)
struct FOauth2Session final
{
public:
	class FString                                 Session_id;                                        // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Expires_in;                                        // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Refresh_id;                                        // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FOauth2Session) == 0x000008, "Wrong alignment on FOauth2Session");
static_assert(sizeof(FOauth2Session) == 0x000028, "Wrong size on FOauth2Session");
static_assert(offsetof(FOauth2Session, Session_id) == 0x000000, "Member 'FOauth2Session::Session_id' has a wrong offset!");
static_assert(offsetof(FOauth2Session, Expires_in) == 0x000010, "Member 'FOauth2Session::Expires_in' has a wrong offset!");
static_assert(offsetof(FOauth2Session, Refresh_id) == 0x000018, "Member 'FOauth2Session::Refresh_id' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsRefreshTokenResponse
// 0x0010 (0x0010 - 0x0000)
struct FAccelByteModelsRefreshTokenResponse final
{
public:
	class FString                                 Code;                                              // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsRefreshTokenResponse) == 0x000008, "Wrong alignment on FAccelByteModelsRefreshTokenResponse");
static_assert(sizeof(FAccelByteModelsRefreshTokenResponse) == 0x000010, "Wrong size on FAccelByteModelsRefreshTokenResponse");
static_assert(offsetof(FAccelByteModelsRefreshTokenResponse, Code) == 0x000000, "Member 'FAccelByteModelsRefreshTokenResponse::Code' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsSlot
// 0x00D0 (0x00D0 - 0x0000)
struct FAccelByteModelsSlot final
{
public:
	class FString                                 Checksum;                                          // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 CustomAttribute;                                   // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDateTime                              DateAccessed;                                      // 0x0020(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDateTime                              DateCreated;                                       // 0x0028(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDateTime                              DateModified;                                      // 0x0030(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Label;                                             // 0x0038(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 MimeType;                                          // 0x0048(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Namespace;                                         // 0x0058(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 OriginalName;                                      // 0x0068(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 SlotId;                                            // 0x0078(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Status;                                            // 0x0088(0x0010)(ZeroConstructor, Deprecated, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 StoredName;                                        // 0x0098(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FString>                         Tags;                                              // 0x00A8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	class FString                                 UserId;                                            // 0x00B8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Size;                                              // 0x00C8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_CC[0x4];                                       // 0x00CC(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAccelByteModelsSlot) == 0x000008, "Wrong alignment on FAccelByteModelsSlot");
static_assert(sizeof(FAccelByteModelsSlot) == 0x0000D0, "Wrong size on FAccelByteModelsSlot");
static_assert(offsetof(FAccelByteModelsSlot, Checksum) == 0x000000, "Member 'FAccelByteModelsSlot::Checksum' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsSlot, CustomAttribute) == 0x000010, "Member 'FAccelByteModelsSlot::CustomAttribute' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsSlot, DateAccessed) == 0x000020, "Member 'FAccelByteModelsSlot::DateAccessed' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsSlot, DateCreated) == 0x000028, "Member 'FAccelByteModelsSlot::DateCreated' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsSlot, DateModified) == 0x000030, "Member 'FAccelByteModelsSlot::DateModified' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsSlot, Label) == 0x000038, "Member 'FAccelByteModelsSlot::Label' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsSlot, MimeType) == 0x000048, "Member 'FAccelByteModelsSlot::MimeType' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsSlot, Namespace) == 0x000058, "Member 'FAccelByteModelsSlot::Namespace' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsSlot, OriginalName) == 0x000068, "Member 'FAccelByteModelsSlot::OriginalName' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsSlot, SlotId) == 0x000078, "Member 'FAccelByteModelsSlot::SlotId' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsSlot, Status) == 0x000088, "Member 'FAccelByteModelsSlot::Status' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsSlot, StoredName) == 0x000098, "Member 'FAccelByteModelsSlot::StoredName' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsSlot, Tags) == 0x0000A8, "Member 'FAccelByteModelsSlot::Tags' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsSlot, UserId) == 0x0000B8, "Member 'FAccelByteModelsSlot::UserId' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsSlot, Size) == 0x0000C8, "Member 'FAccelByteModelsSlot::Size' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.Time
// 0x0008 (0x0008 - 0x0000)
struct FTime final
{
public:
	struct FDateTime                              CurrentTime;                                       // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTime) == 0x000008, "Wrong alignment on FTime");
static_assert(sizeof(FTime) == 0x000008, "Wrong size on FTime");
static_assert(offsetof(FTime, CurrentTime) == 0x000000, "Member 'FTime::CurrentTime' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsGameProfileRequest
// 0x0090 (0x0090 - 0x0000)
struct FAccelByteModelsGameProfileRequest final
{
public:
	TMap<class FString, class FString>            Attributes;                                        // 0x0000(0x0050)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	class FString                                 AvatarUrl;                                         // 0x0050(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Label;                                             // 0x0060(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ProfileName;                                       // 0x0070(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FString>                         Tags;                                              // 0x0080(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsGameProfileRequest) == 0x000008, "Wrong alignment on FAccelByteModelsGameProfileRequest");
static_assert(sizeof(FAccelByteModelsGameProfileRequest) == 0x000090, "Wrong size on FAccelByteModelsGameProfileRequest");
static_assert(offsetof(FAccelByteModelsGameProfileRequest, Attributes) == 0x000000, "Member 'FAccelByteModelsGameProfileRequest::Attributes' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsGameProfileRequest, AvatarUrl) == 0x000050, "Member 'FAccelByteModelsGameProfileRequest::AvatarUrl' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsGameProfileRequest, Label) == 0x000060, "Member 'FAccelByteModelsGameProfileRequest::Label' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsGameProfileRequest, ProfileName) == 0x000070, "Member 'FAccelByteModelsGameProfileRequest::ProfileName' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsGameProfileRequest, Tags) == 0x000080, "Member 'FAccelByteModelsGameProfileRequest::Tags' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsGameProfileAttribute
// 0x0020 (0x0020 - 0x0000)
struct FAccelByteModelsGameProfileAttribute final
{
public:
	class FString                                 Name;                                              // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Value;                                             // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsGameProfileAttribute) == 0x000008, "Wrong alignment on FAccelByteModelsGameProfileAttribute");
static_assert(sizeof(FAccelByteModelsGameProfileAttribute) == 0x000020, "Wrong size on FAccelByteModelsGameProfileAttribute");
static_assert(offsetof(FAccelByteModelsGameProfileAttribute, Name) == 0x000000, "Member 'FAccelByteModelsGameProfileAttribute::Name' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsGameProfileAttribute, Value) == 0x000010, "Member 'FAccelByteModelsGameProfileAttribute::Value' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsGetGroupListRequest
// 0x0020 (0x0028 - 0x0008)
struct FAccelByteModelsGetGroupListRequest final : public FAccelByteModelsLimitOffsetRequest
{
public:
	class FString                                 GroupName;                                         // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 GroupRegion;                                       // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsGetGroupListRequest) == 0x000008, "Wrong alignment on FAccelByteModelsGetGroupListRequest");
static_assert(sizeof(FAccelByteModelsGetGroupListRequest) == 0x000028, "Wrong size on FAccelByteModelsGetGroupListRequest");
static_assert(offsetof(FAccelByteModelsGetGroupListRequest, GroupName) == 0x000008, "Member 'FAccelByteModelsGetGroupListRequest::GroupName' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsGetGroupListRequest, GroupRegion) == 0x000018, "Member 'FAccelByteModelsGetGroupListRequest::GroupRegion' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsUpdateGroupCustomAttributesRequest
// 0x0020 (0x0020 - 0x0000)
struct FAccelByteModelsUpdateGroupCustomAttributesRequest final
{
public:
	struct FJsonObjectWrapper                     CustomAttributes;                                  // 0x0000(0x0020)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsUpdateGroupCustomAttributesRequest) == 0x000008, "Wrong alignment on FAccelByteModelsUpdateGroupCustomAttributesRequest");
static_assert(sizeof(FAccelByteModelsUpdateGroupCustomAttributesRequest) == 0x000020, "Wrong size on FAccelByteModelsUpdateGroupCustomAttributesRequest");
static_assert(offsetof(FAccelByteModelsUpdateGroupCustomAttributesRequest, CustomAttributes) == 0x000000, "Member 'FAccelByteModelsUpdateGroupCustomAttributesRequest::CustomAttributes' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsUpdateCustomRulesRequest
// 0x0020 (0x0020 - 0x0000)
struct FAccelByteModelsUpdateCustomRulesRequest final
{
public:
	struct FJsonObjectWrapper                     GroupCustomRule;                                   // 0x0000(0x0020)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsUpdateCustomRulesRequest) == 0x000008, "Wrong alignment on FAccelByteModelsUpdateCustomRulesRequest");
static_assert(sizeof(FAccelByteModelsUpdateCustomRulesRequest) == 0x000020, "Wrong size on FAccelByteModelsUpdateCustomRulesRequest");
static_assert(offsetof(FAccelByteModelsUpdateCustomRulesRequest, GroupCustomRule) == 0x000000, "Member 'FAccelByteModelsUpdateCustomRulesRequest::GroupCustomRule' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsUpdateGroupPredefinedRuleRequest
// 0x0010 (0x0010 - 0x0000)
struct FAccelByteModelsUpdateGroupPredefinedRuleRequest final
{
public:
	TArray<struct FAccelByteModelsRuleInformation> RuleDetail;                                        // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsUpdateGroupPredefinedRuleRequest) == 0x000008, "Wrong alignment on FAccelByteModelsUpdateGroupPredefinedRuleRequest");
static_assert(sizeof(FAccelByteModelsUpdateGroupPredefinedRuleRequest) == 0x000010, "Wrong size on FAccelByteModelsUpdateGroupPredefinedRuleRequest");
static_assert(offsetof(FAccelByteModelsUpdateGroupPredefinedRuleRequest, RuleDetail) == 0x000000, "Member 'FAccelByteModelsUpdateGroupPredefinedRuleRequest::RuleDetail' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsItemCriteria
// 0x0078 (0x0078 - 0x0000)
struct FAccelByteModelsItemCriteria final
{
public:
	EAccelByteItemType                            ItemType;                                          // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAccelByteAppType                             AppType;                                           // 0x0001(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x6];                                        // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Region;                                            // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Language;                                          // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 CategoryPath;                                      // 0x0028(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 BaseAppId;                                         // 0x0038(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FString>                         Tags;                                              // 0x0048(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class FString>                         Features;                                          // 0x0058(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	class FString                                 SortBy;                                            // 0x0068(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsItemCriteria) == 0x000008, "Wrong alignment on FAccelByteModelsItemCriteria");
static_assert(sizeof(FAccelByteModelsItemCriteria) == 0x000078, "Wrong size on FAccelByteModelsItemCriteria");
static_assert(offsetof(FAccelByteModelsItemCriteria, ItemType) == 0x000000, "Member 'FAccelByteModelsItemCriteria::ItemType' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsItemCriteria, AppType) == 0x000001, "Member 'FAccelByteModelsItemCriteria::AppType' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsItemCriteria, Region) == 0x000008, "Member 'FAccelByteModelsItemCriteria::Region' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsItemCriteria, Language) == 0x000018, "Member 'FAccelByteModelsItemCriteria::Language' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsItemCriteria, CategoryPath) == 0x000028, "Member 'FAccelByteModelsItemCriteria::CategoryPath' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsItemCriteria, BaseAppId) == 0x000038, "Member 'FAccelByteModelsItemCriteria::BaseAppId' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsItemCriteria, Tags) == 0x000048, "Member 'FAccelByteModelsItemCriteria::Tags' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsItemCriteria, Features) == 0x000058, "Member 'FAccelByteModelsItemCriteria::Features' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsItemCriteria, SortBy) == 0x000068, "Member 'FAccelByteModelsItemCriteria::SortBy' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsPartyMessageNotice
// 0x0050 (0x0050 - 0x0000)
struct FAccelByteModelsPartyMessageNotice final
{
public:
	class FString                                 ID;                                                // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 From;                                              // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 To;                                                // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Payload;                                           // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ReceivedAt;                                        // 0x0040(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsPartyMessageNotice) == 0x000008, "Wrong alignment on FAccelByteModelsPartyMessageNotice");
static_assert(sizeof(FAccelByteModelsPartyMessageNotice) == 0x000050, "Wrong size on FAccelByteModelsPartyMessageNotice");
static_assert(offsetof(FAccelByteModelsPartyMessageNotice, ID) == 0x000000, "Member 'FAccelByteModelsPartyMessageNotice::ID' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsPartyMessageNotice, From) == 0x000010, "Member 'FAccelByteModelsPartyMessageNotice::From' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsPartyMessageNotice, To) == 0x000020, "Member 'FAccelByteModelsPartyMessageNotice::To' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsPartyMessageNotice, Payload) == 0x000030, "Member 'FAccelByteModelsPartyMessageNotice::Payload' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsPartyMessageNotice, ReceivedAt) == 0x000040, "Member 'FAccelByteModelsPartyMessageNotice::ReceivedAt' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsOrderCreate
// 0x0060 (0x0060 - 0x0000)
struct FAccelByteModelsOrderCreate final
{
public:
	class FString                                 ItemId;                                            // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Quantity;                                          // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Price;                                             // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DiscountedPrice;                                   // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CurrencyCode;                                      // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Region;                                            // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Language;                                          // 0x0040(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ReturnUrl;                                         // 0x0050(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsOrderCreate) == 0x000008, "Wrong alignment on FAccelByteModelsOrderCreate");
static_assert(sizeof(FAccelByteModelsOrderCreate) == 0x000060, "Wrong size on FAccelByteModelsOrderCreate");
static_assert(offsetof(FAccelByteModelsOrderCreate, ItemId) == 0x000000, "Member 'FAccelByteModelsOrderCreate::ItemId' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsOrderCreate, Quantity) == 0x000010, "Member 'FAccelByteModelsOrderCreate::Quantity' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsOrderCreate, Price) == 0x000014, "Member 'FAccelByteModelsOrderCreate::Price' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsOrderCreate, DiscountedPrice) == 0x000018, "Member 'FAccelByteModelsOrderCreate::DiscountedPrice' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsOrderCreate, CurrencyCode) == 0x000020, "Member 'FAccelByteModelsOrderCreate::CurrencyCode' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsOrderCreate, Region) == 0x000030, "Member 'FAccelByteModelsOrderCreate::Region' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsOrderCreate, Language) == 0x000040, "Member 'FAccelByteModelsOrderCreate::Language' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsOrderCreate, ReturnUrl) == 0x000050, "Member 'FAccelByteModelsOrderCreate::ReturnUrl' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsPlatformSyncMobileGoogle
// 0x0070 (0x0070 - 0x0000)
struct FAccelByteModelsPlatformSyncMobileGoogle final
{
public:
	class FString                                 OrderId;                                           // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 PackageName;                                       // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ProductId;                                         // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int64                                         PurchaseTime;                                      // 0x0030(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 PurchaseToken;                                     // 0x0038(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          AutoAck;                                           // 0x0048(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_49[0x7];                                       // 0x0049(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Region;                                            // 0x0050(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Language;                                          // 0x0060(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsPlatformSyncMobileGoogle) == 0x000008, "Wrong alignment on FAccelByteModelsPlatformSyncMobileGoogle");
static_assert(sizeof(FAccelByteModelsPlatformSyncMobileGoogle) == 0x000070, "Wrong size on FAccelByteModelsPlatformSyncMobileGoogle");
static_assert(offsetof(FAccelByteModelsPlatformSyncMobileGoogle, OrderId) == 0x000000, "Member 'FAccelByteModelsPlatformSyncMobileGoogle::OrderId' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsPlatformSyncMobileGoogle, PackageName) == 0x000010, "Member 'FAccelByteModelsPlatformSyncMobileGoogle::PackageName' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsPlatformSyncMobileGoogle, ProductId) == 0x000020, "Member 'FAccelByteModelsPlatformSyncMobileGoogle::ProductId' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsPlatformSyncMobileGoogle, PurchaseTime) == 0x000030, "Member 'FAccelByteModelsPlatformSyncMobileGoogle::PurchaseTime' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsPlatformSyncMobileGoogle, PurchaseToken) == 0x000038, "Member 'FAccelByteModelsPlatformSyncMobileGoogle::PurchaseToken' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsPlatformSyncMobileGoogle, AutoAck) == 0x000048, "Member 'FAccelByteModelsPlatformSyncMobileGoogle::AutoAck' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsPlatformSyncMobileGoogle, Region) == 0x000050, "Member 'FAccelByteModelsPlatformSyncMobileGoogle::Region' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsPlatformSyncMobileGoogle, Language) == 0x000060, "Member 'FAccelByteModelsPlatformSyncMobileGoogle::Language' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsBulkStatItemInc
// 0x0018 (0x0018 - 0x0000)
struct FAccelByteModelsBulkStatItemInc final
{
public:
	float                                         Inc;                                               // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 StatCode;                                          // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsBulkStatItemInc) == 0x000008, "Wrong alignment on FAccelByteModelsBulkStatItemInc");
static_assert(sizeof(FAccelByteModelsBulkStatItemInc) == 0x000018, "Wrong size on FAccelByteModelsBulkStatItemInc");
static_assert(offsetof(FAccelByteModelsBulkStatItemInc, Inc) == 0x000000, "Member 'FAccelByteModelsBulkStatItemInc::Inc' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsBulkStatItemInc, StatCode) == 0x000008, "Member 'FAccelByteModelsBulkStatItemInc::StatCode' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsActivePartiesData
// 0x0050 (0x0050 - 0x0000)
struct FAccelByteModelsActivePartiesData final
{
public:
	TArray<struct FAccelByteModelsPartyDataNotif> Data;                                              // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FAccelByteModelsPaging                 Paging;                                            // 0x0010(0x0040)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsActivePartiesData) == 0x000008, "Wrong alignment on FAccelByteModelsActivePartiesData");
static_assert(sizeof(FAccelByteModelsActivePartiesData) == 0x000050, "Wrong size on FAccelByteModelsActivePartiesData");
static_assert(offsetof(FAccelByteModelsActivePartiesData, Data) == 0x000000, "Member 'FAccelByteModelsActivePartiesData::Data' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsActivePartiesData, Paging) == 0x000010, "Member 'FAccelByteModelsActivePartiesData::Paging' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsUserProfileInfo
// 0x0170 (0x0170 - 0x0000)
struct FAccelByteModelsUserProfileInfo final
{
public:
	class FString                                 UserId;                                            // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Namespace;                                         // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 FirstName;                                         // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 LastName;                                          // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 AvatarSmallUrl;                                    // 0x0040(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 AvatarUrl;                                         // 0x0050(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 AvatarLargeUrl;                                    // 0x0060(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Status;                                            // 0x0070(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Language;                                          // 0x0080(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 DateOfBirth;                                       // 0x0090(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Timezone;                                          // 0x00A0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<class FString, struct FJsonObjectWrapper> CustomAttributes;                                  // 0x00B0(0x0050)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	class FString                                 ZipCode;                                           // 0x0100(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 PublicId;                                          // 0x0110(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<class FString, struct FJsonObjectWrapper> PrivateCustomAttributes;                           // 0x0120(0x0050)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsUserProfileInfo) == 0x000008, "Wrong alignment on FAccelByteModelsUserProfileInfo");
static_assert(sizeof(FAccelByteModelsUserProfileInfo) == 0x000170, "Wrong size on FAccelByteModelsUserProfileInfo");
static_assert(offsetof(FAccelByteModelsUserProfileInfo, UserId) == 0x000000, "Member 'FAccelByteModelsUserProfileInfo::UserId' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsUserProfileInfo, Namespace) == 0x000010, "Member 'FAccelByteModelsUserProfileInfo::Namespace' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsUserProfileInfo, FirstName) == 0x000020, "Member 'FAccelByteModelsUserProfileInfo::FirstName' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsUserProfileInfo, LastName) == 0x000030, "Member 'FAccelByteModelsUserProfileInfo::LastName' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsUserProfileInfo, AvatarSmallUrl) == 0x000040, "Member 'FAccelByteModelsUserProfileInfo::AvatarSmallUrl' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsUserProfileInfo, AvatarUrl) == 0x000050, "Member 'FAccelByteModelsUserProfileInfo::AvatarUrl' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsUserProfileInfo, AvatarLargeUrl) == 0x000060, "Member 'FAccelByteModelsUserProfileInfo::AvatarLargeUrl' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsUserProfileInfo, Status) == 0x000070, "Member 'FAccelByteModelsUserProfileInfo::Status' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsUserProfileInfo, Language) == 0x000080, "Member 'FAccelByteModelsUserProfileInfo::Language' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsUserProfileInfo, DateOfBirth) == 0x000090, "Member 'FAccelByteModelsUserProfileInfo::DateOfBirth' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsUserProfileInfo, Timezone) == 0x0000A0, "Member 'FAccelByteModelsUserProfileInfo::Timezone' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsUserProfileInfo, CustomAttributes) == 0x0000B0, "Member 'FAccelByteModelsUserProfileInfo::CustomAttributes' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsUserProfileInfo, ZipCode) == 0x000100, "Member 'FAccelByteModelsUserProfileInfo::ZipCode' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsUserProfileInfo, PublicId) == 0x000110, "Member 'FAccelByteModelsUserProfileInfo::PublicId' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsUserProfileInfo, PrivateCustomAttributes) == 0x000120, "Member 'FAccelByteModelsUserProfileInfo::PrivateCustomAttributes' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsPartyDataUpdateStringRequest
// 0x0030 (0x0030 - 0x0000)
struct FAccelByteModelsPartyDataUpdateStringRequest final
{
public:
	class FString                                 UpdatedAt;                                         // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FJsonObjectWrapper                     Custom_Attribute;                                  // 0x0010(0x0020)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsPartyDataUpdateStringRequest) == 0x000008, "Wrong alignment on FAccelByteModelsPartyDataUpdateStringRequest");
static_assert(sizeof(FAccelByteModelsPartyDataUpdateStringRequest) == 0x000030, "Wrong size on FAccelByteModelsPartyDataUpdateStringRequest");
static_assert(offsetof(FAccelByteModelsPartyDataUpdateStringRequest, UpdatedAt) == 0x000000, "Member 'FAccelByteModelsPartyDataUpdateStringRequest::UpdatedAt' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsPartyDataUpdateStringRequest, Custom_Attribute) == 0x000010, "Member 'FAccelByteModelsPartyDataUpdateStringRequest::Custom_Attribute' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsUserProfileCreateRequest
// 0x0120 (0x0120 - 0x0000)
struct FAccelByteModelsUserProfileCreateRequest final
{
public:
	class FString                                 FirstName;                                         // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 LastName;                                          // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Language;                                          // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 AvatarSmallUrl;                                    // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 AvatarUrl;                                         // 0x0040(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 AvatarLargeUrl;                                    // 0x0050(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Timezone;                                          // 0x0060(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 DateOfBirth;                                       // 0x0070(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<class FString, struct FJsonObjectWrapper> CustomAttributes;                                  // 0x0080(0x0050)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	TMap<class FString, struct FJsonObjectWrapper> PrivateCustomAttributes;                           // 0x00D0(0x0050)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsUserProfileCreateRequest) == 0x000008, "Wrong alignment on FAccelByteModelsUserProfileCreateRequest");
static_assert(sizeof(FAccelByteModelsUserProfileCreateRequest) == 0x000120, "Wrong size on FAccelByteModelsUserProfileCreateRequest");
static_assert(offsetof(FAccelByteModelsUserProfileCreateRequest, FirstName) == 0x000000, "Member 'FAccelByteModelsUserProfileCreateRequest::FirstName' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsUserProfileCreateRequest, LastName) == 0x000010, "Member 'FAccelByteModelsUserProfileCreateRequest::LastName' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsUserProfileCreateRequest, Language) == 0x000020, "Member 'FAccelByteModelsUserProfileCreateRequest::Language' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsUserProfileCreateRequest, AvatarSmallUrl) == 0x000030, "Member 'FAccelByteModelsUserProfileCreateRequest::AvatarSmallUrl' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsUserProfileCreateRequest, AvatarUrl) == 0x000040, "Member 'FAccelByteModelsUserProfileCreateRequest::AvatarUrl' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsUserProfileCreateRequest, AvatarLargeUrl) == 0x000050, "Member 'FAccelByteModelsUserProfileCreateRequest::AvatarLargeUrl' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsUserProfileCreateRequest, Timezone) == 0x000060, "Member 'FAccelByteModelsUserProfileCreateRequest::Timezone' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsUserProfileCreateRequest, DateOfBirth) == 0x000070, "Member 'FAccelByteModelsUserProfileCreateRequest::DateOfBirth' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsUserProfileCreateRequest, CustomAttributes) == 0x000080, "Member 'FAccelByteModelsUserProfileCreateRequest::CustomAttributes' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsUserProfileCreateRequest, PrivateCustomAttributes) == 0x0000D0, "Member 'FAccelByteModelsUserProfileCreateRequest::PrivateCustomAttributes' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsGetFriendshipStatusStringResponse
// 0x0020 (0x0020 - 0x0000)
struct FAccelByteModelsGetFriendshipStatusStringResponse final
{
public:
	class FString                                 Code;                                              // 0x0000(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 FriendshipStatus;                                  // 0x0010(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsGetFriendshipStatusStringResponse) == 0x000008, "Wrong alignment on FAccelByteModelsGetFriendshipStatusStringResponse");
static_assert(sizeof(FAccelByteModelsGetFriendshipStatusStringResponse) == 0x000020, "Wrong size on FAccelByteModelsGetFriendshipStatusStringResponse");
static_assert(offsetof(FAccelByteModelsGetFriendshipStatusStringResponse, Code) == 0x000000, "Member 'FAccelByteModelsGetFriendshipStatusStringResponse::Code' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsGetFriendshipStatusStringResponse, FriendshipStatus) == 0x000010, "Member 'FAccelByteModelsGetFriendshipStatusStringResponse::FriendshipStatus' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsUserProfileUploadURLResult
// 0x0040 (0x0040 - 0x0000)
struct FAccelByteModelsUserProfileUploadURLResult final
{
public:
	class FString                                 URL;                                               // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 AccessUrl;                                         // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Method;                                            // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ContentType;                                       // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsUserProfileUploadURLResult) == 0x000008, "Wrong alignment on FAccelByteModelsUserProfileUploadURLResult");
static_assert(sizeof(FAccelByteModelsUserProfileUploadURLResult) == 0x000040, "Wrong size on FAccelByteModelsUserProfileUploadURLResult");
static_assert(offsetof(FAccelByteModelsUserProfileUploadURLResult, URL) == 0x000000, "Member 'FAccelByteModelsUserProfileUploadURLResult::URL' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsUserProfileUploadURLResult, AccessUrl) == 0x000010, "Member 'FAccelByteModelsUserProfileUploadURLResult::AccessUrl' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsUserProfileUploadURLResult, Method) == 0x000020, "Member 'FAccelByteModelsUserProfileUploadURLResult::Method' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsUserProfileUploadURLResult, ContentType) == 0x000030, "Member 'FAccelByteModelsUserProfileUploadURLResult::ContentType' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsUserProfileUpdateRequest
// 0x0130 (0x0130 - 0x0000)
struct FAccelByteModelsUserProfileUpdateRequest final
{
public:
	class FString                                 FirstName;                                         // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 LastName;                                          // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 AvatarSmallUrl;                                    // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 AvatarUrl;                                         // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 AvatarLargeUrl;                                    // 0x0040(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Language;                                          // 0x0050(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Timezone;                                          // 0x0060(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 DateOfBirth;                                       // 0x0070(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ZipCode;                                           // 0x0080(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<class FString, struct FJsonObjectWrapper> PrivateCustomAttributes;                           // 0x0090(0x0050)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	TMap<class FString, struct FJsonObjectWrapper> CustomAttributes;                                  // 0x00E0(0x0050)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsUserProfileUpdateRequest) == 0x000008, "Wrong alignment on FAccelByteModelsUserProfileUpdateRequest");
static_assert(sizeof(FAccelByteModelsUserProfileUpdateRequest) == 0x000130, "Wrong size on FAccelByteModelsUserProfileUpdateRequest");
static_assert(offsetof(FAccelByteModelsUserProfileUpdateRequest, FirstName) == 0x000000, "Member 'FAccelByteModelsUserProfileUpdateRequest::FirstName' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsUserProfileUpdateRequest, LastName) == 0x000010, "Member 'FAccelByteModelsUserProfileUpdateRequest::LastName' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsUserProfileUpdateRequest, AvatarSmallUrl) == 0x000020, "Member 'FAccelByteModelsUserProfileUpdateRequest::AvatarSmallUrl' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsUserProfileUpdateRequest, AvatarUrl) == 0x000030, "Member 'FAccelByteModelsUserProfileUpdateRequest::AvatarUrl' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsUserProfileUpdateRequest, AvatarLargeUrl) == 0x000040, "Member 'FAccelByteModelsUserProfileUpdateRequest::AvatarLargeUrl' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsUserProfileUpdateRequest, Language) == 0x000050, "Member 'FAccelByteModelsUserProfileUpdateRequest::Language' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsUserProfileUpdateRequest, Timezone) == 0x000060, "Member 'FAccelByteModelsUserProfileUpdateRequest::Timezone' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsUserProfileUpdateRequest, DateOfBirth) == 0x000070, "Member 'FAccelByteModelsUserProfileUpdateRequest::DateOfBirth' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsUserProfileUpdateRequest, ZipCode) == 0x000080, "Member 'FAccelByteModelsUserProfileUpdateRequest::ZipCode' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsUserProfileUpdateRequest, PrivateCustomAttributes) == 0x000090, "Member 'FAccelByteModelsUserProfileUpdateRequest::PrivateCustomAttributes' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsUserProfileUpdateRequest, CustomAttributes) == 0x0000E0, "Member 'FAccelByteModelsUserProfileUpdateRequest::CustomAttributes' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsAcceptAgreementRequest
// 0x0038 (0x0038 - 0x0000)
struct FAccelByteModelsAcceptAgreementRequest final
{
public:
	class FString                                 LocalizedPolicyVersionId;                          // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 PolicyVersionId;                                   // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 PolicyId;                                          // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsAccepted;                                        // 0x0030(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAccelByteModelsAcceptAgreementRequest) == 0x000008, "Wrong alignment on FAccelByteModelsAcceptAgreementRequest");
static_assert(sizeof(FAccelByteModelsAcceptAgreementRequest) == 0x000038, "Wrong size on FAccelByteModelsAcceptAgreementRequest");
static_assert(offsetof(FAccelByteModelsAcceptAgreementRequest, LocalizedPolicyVersionId) == 0x000000, "Member 'FAccelByteModelsAcceptAgreementRequest::LocalizedPolicyVersionId' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsAcceptAgreementRequest, PolicyVersionId) == 0x000010, "Member 'FAccelByteModelsAcceptAgreementRequest::PolicyVersionId' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsAcceptAgreementRequest, PolicyId) == 0x000020, "Member 'FAccelByteModelsAcceptAgreementRequest::PolicyId' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsAcceptAgreementRequest, IsAccepted) == 0x000030, "Member 'FAccelByteModelsAcceptAgreementRequest::IsAccepted' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.ArrayModelsAcceptAgreementRequest
// 0x0010 (0x0010 - 0x0000)
struct FArrayModelsAcceptAgreementRequest final
{
public:
	TArray<struct FAccelByteModelsAcceptAgreementRequest> Content;                                           // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FArrayModelsAcceptAgreementRequest) == 0x000008, "Wrong alignment on FArrayModelsAcceptAgreementRequest");
static_assert(sizeof(FArrayModelsAcceptAgreementRequest) == 0x000010, "Wrong size on FArrayModelsAcceptAgreementRequest");
static_assert(offsetof(FArrayModelsAcceptAgreementRequest, Content) == 0x000000, "Member 'FArrayModelsAcceptAgreementRequest::Content' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteSeasonPassExcessStrategy
// 0x0020 (0x0020 - 0x0000)
struct FAccelByteSeasonPassExcessStrategy final
{
public:
	EAccelByteSeasonPassStrategyMethod            Method;                                            // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Currency;                                          // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PercentPerExp;                                     // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAccelByteSeasonPassExcessStrategy) == 0x000008, "Wrong alignment on FAccelByteSeasonPassExcessStrategy");
static_assert(sizeof(FAccelByteSeasonPassExcessStrategy) == 0x000020, "Wrong size on FAccelByteSeasonPassExcessStrategy");
static_assert(offsetof(FAccelByteSeasonPassExcessStrategy, Method) == 0x000000, "Member 'FAccelByteSeasonPassExcessStrategy::Method' has a wrong offset!");
static_assert(offsetof(FAccelByteSeasonPassExcessStrategy, Currency) == 0x000008, "Member 'FAccelByteSeasonPassExcessStrategy::Currency' has a wrong offset!");
static_assert(offsetof(FAccelByteSeasonPassExcessStrategy, PercentPerExp) == 0x000018, "Member 'FAccelByteSeasonPassExcessStrategy::PercentPerExp' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsTurnServer
// 0x0050 (0x0050 - 0x0000)
struct FAccelByteModelsTurnServer final
{
public:
	class FString                                 Ip;                                                // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Port;                                              // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Qos_port;                                          // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Region;                                            // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Status;                                            // 0x0028(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Last_update;                                       // 0x0038(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int64                                         Current_time;                                      // 0x0048(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsTurnServer) == 0x000008, "Wrong alignment on FAccelByteModelsTurnServer");
static_assert(sizeof(FAccelByteModelsTurnServer) == 0x000050, "Wrong size on FAccelByteModelsTurnServer");
static_assert(offsetof(FAccelByteModelsTurnServer, Ip) == 0x000000, "Member 'FAccelByteModelsTurnServer::Ip' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsTurnServer, Port) == 0x000010, "Member 'FAccelByteModelsTurnServer::Port' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsTurnServer, Qos_port) == 0x000014, "Member 'FAccelByteModelsTurnServer::Qos_port' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsTurnServer, Region) == 0x000018, "Member 'FAccelByteModelsTurnServer::Region' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsTurnServer, Status) == 0x000028, "Member 'FAccelByteModelsTurnServer::Status' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsTurnServer, Last_update) == 0x000038, "Member 'FAccelByteModelsTurnServer::Last_update' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsTurnServer, Current_time) == 0x000048, "Member 'FAccelByteModelsTurnServer::Current_time' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.BlockPlayerRequest
// 0x0010 (0x0010 - 0x0000)
struct FBlockPlayerRequest final
{
public:
	class FString                                 UserId;                                            // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBlockPlayerRequest) == 0x000008, "Wrong alignment on FBlockPlayerRequest");
static_assert(sizeof(FBlockPlayerRequest) == 0x000010, "Wrong size on FBlockPlayerRequest");
static_assert(offsetof(FBlockPlayerRequest, UserId) == 0x000000, "Member 'FBlockPlayerRequest::UserId' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.CancelMatchmakingRequest
// 0x0018 (0x0018 - 0x0000)
struct FCancelMatchmakingRequest final
{
public:
	class FString                                 GameMode;                                          // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsTempParty;                                       // 0x0010(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FCancelMatchmakingRequest) == 0x000008, "Wrong alignment on FCancelMatchmakingRequest");
static_assert(sizeof(FCancelMatchmakingRequest) == 0x000018, "Wrong size on FCancelMatchmakingRequest");
static_assert(offsetof(FCancelMatchmakingRequest, GameMode) == 0x000000, "Member 'FCancelMatchmakingRequest::GameMode' has a wrong offset!");
static_assert(offsetof(FCancelMatchmakingRequest, IsTempParty) == 0x000010, "Member 'FCancelMatchmakingRequest::IsTempParty' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.BanUserRequest
// 0x0030 (0x0030 - 0x0000)
struct FBanUserRequest final
{
public:
	EBanType                                      Ban;                                               // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Comment;                                           // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 EndDate;                                           // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EBanReason                                    Reason;                                            // 0x0028(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          SkipNotif;                                         // 0x0029(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2A[0x6];                                       // 0x002A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FBanUserRequest) == 0x000008, "Wrong alignment on FBanUserRequest");
static_assert(sizeof(FBanUserRequest) == 0x000030, "Wrong size on FBanUserRequest");
static_assert(offsetof(FBanUserRequest, Ban) == 0x000000, "Member 'FBanUserRequest::Ban' has a wrong offset!");
static_assert(offsetof(FBanUserRequest, Comment) == 0x000008, "Member 'FBanUserRequest::Comment' has a wrong offset!");
static_assert(offsetof(FBanUserRequest, EndDate) == 0x000018, "Member 'FBanUserRequest::EndDate' has a wrong offset!");
static_assert(offsetof(FBanUserRequest, Reason) == 0x000028, "Member 'FBanUserRequest::Reason' has a wrong offset!");
static_assert(offsetof(FBanUserRequest, SkipNotif) == 0x000029, "Member 'FBanUserRequest::SkipNotif' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.SendChannelMessageRequest
// 0x0010 (0x0010 - 0x0000)
struct FSendChannelMessageRequest final
{
public:
	class FString                                 Message;                                           // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSendChannelMessageRequest) == 0x000008, "Wrong alignment on FSendChannelMessageRequest");
static_assert(sizeof(FSendChannelMessageRequest) == 0x000010, "Wrong size on FSendChannelMessageRequest");
static_assert(offsetof(FSendChannelMessageRequest, Message) == 0x000000, "Member 'FSendChannelMessageRequest::Message' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.SendPartyMessageRequest
// 0x0010 (0x0010 - 0x0000)
struct FSendPartyMessageRequest final
{
public:
	class FString                                 Message;                                           // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSendPartyMessageRequest) == 0x000008, "Wrong alignment on FSendPartyMessageRequest");
static_assert(sizeof(FSendPartyMessageRequest) == 0x000010, "Wrong size on FSendPartyMessageRequest");
static_assert(offsetof(FSendPartyMessageRequest, Message) == 0x000000, "Member 'FSendPartyMessageRequest::Message' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsStatInfo
// 0x0088 (0x0088 - 0x0000)
struct FAccelByteModelsStatInfo final
{
public:
	class FString                                 CreatedAt;                                         // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DefaultValue;                                      // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Description;                                       // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IncrementOnly;                                     // 0x0028(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x3];                                       // 0x0029(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Maximum;                                           // 0x002C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Minimum;                                           // 0x0030(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Name;                                              // 0x0038(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Namespace;                                         // 0x0048(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          SetAsGlobal;                                       // 0x0058(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAccelByteStatisticSetBy                      SetBy;                                             // 0x0059(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5A[0x6];                                       // 0x005A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 StatCode;                                          // 0x0060(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAccelByteStatisticStatus                     Status;                                            // 0x0070(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_71[0x7];                                       // 0x0071(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 UpdatedAt;                                         // 0x0078(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsStatInfo) == 0x000008, "Wrong alignment on FAccelByteModelsStatInfo");
static_assert(sizeof(FAccelByteModelsStatInfo) == 0x000088, "Wrong size on FAccelByteModelsStatInfo");
static_assert(offsetof(FAccelByteModelsStatInfo, CreatedAt) == 0x000000, "Member 'FAccelByteModelsStatInfo::CreatedAt' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsStatInfo, DefaultValue) == 0x000010, "Member 'FAccelByteModelsStatInfo::DefaultValue' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsStatInfo, Description) == 0x000018, "Member 'FAccelByteModelsStatInfo::Description' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsStatInfo, IncrementOnly) == 0x000028, "Member 'FAccelByteModelsStatInfo::IncrementOnly' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsStatInfo, Maximum) == 0x00002C, "Member 'FAccelByteModelsStatInfo::Maximum' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsStatInfo, Minimum) == 0x000030, "Member 'FAccelByteModelsStatInfo::Minimum' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsStatInfo, Name) == 0x000038, "Member 'FAccelByteModelsStatInfo::Name' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsStatInfo, Namespace) == 0x000048, "Member 'FAccelByteModelsStatInfo::Namespace' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsStatInfo, SetAsGlobal) == 0x000058, "Member 'FAccelByteModelsStatInfo::SetAsGlobal' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsStatInfo, SetBy) == 0x000059, "Member 'FAccelByteModelsStatInfo::SetBy' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsStatInfo, StatCode) == 0x000060, "Member 'FAccelByteModelsStatInfo::StatCode' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsStatInfo, Status) == 0x000070, "Member 'FAccelByteModelsStatInfo::Status' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsStatInfo, UpdatedAt) == 0x000078, "Member 'FAccelByteModelsStatInfo::UpdatedAt' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.SendPrivateMessageRequest
// 0x0020 (0x0020 - 0x0000)
struct FSendPrivateMessageRequest final
{
public:
	class FString                                 UserId;                                            // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Message;                                           // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSendPrivateMessageRequest) == 0x000008, "Wrong alignment on FSendPrivateMessageRequest");
static_assert(sizeof(FSendPrivateMessageRequest) == 0x000020, "Wrong size on FSendPrivateMessageRequest");
static_assert(offsetof(FSendPrivateMessageRequest, UserId) == 0x000000, "Member 'FSendPrivateMessageRequest::UserId' has a wrong offset!");
static_assert(offsetof(FSendPrivateMessageRequest, Message) == 0x000010, "Member 'FSendPrivateMessageRequest::Message' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.WritePartyStorageRequest
// 0x0060 (0x0060 - 0x0000)
struct alignas(0x10) FWritePartyStorageRequest final
{
public:
	class FString                                 PartyId;                                           // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RetryAttempt;                                      // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4C];                                      // 0x0014(0x004C)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FWritePartyStorageRequest) == 0x000010, "Wrong alignment on FWritePartyStorageRequest");
static_assert(sizeof(FWritePartyStorageRequest) == 0x000060, "Wrong size on FWritePartyStorageRequest");
static_assert(offsetof(FWritePartyStorageRequest, PartyId) == 0x000000, "Member 'FWritePartyStorageRequest::PartyId' has a wrong offset!");
static_assert(offsetof(FWritePartyStorageRequest, RetryAttempt) == 0x000010, "Member 'FWritePartyStorageRequest::RetryAttempt' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.GetPartyStorageRequest
// 0x0010 (0x0010 - 0x0000)
struct FGetPartyStorageRequest final
{
public:
	class FString                                 PartyId;                                           // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGetPartyStorageRequest) == 0x000008, "Wrong alignment on FGetPartyStorageRequest");
static_assert(sizeof(FGetPartyStorageRequest) == 0x000010, "Wrong size on FGetPartyStorageRequest");
static_assert(offsetof(FGetPartyStorageRequest, PartyId) == 0x000000, "Member 'FGetPartyStorageRequest::PartyId' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.PartyJoinViaCodeRequest
// 0x0010 (0x0010 - 0x0000)
struct FPartyJoinViaCodeRequest final
{
public:
	class FString                                 PartyCode;                                         // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPartyJoinViaCodeRequest) == 0x000008, "Wrong alignment on FPartyJoinViaCodeRequest");
static_assert(sizeof(FPartyJoinViaCodeRequest) == 0x000010, "Wrong size on FPartyJoinViaCodeRequest");
static_assert(offsetof(FPartyJoinViaCodeRequest, PartyCode) == 0x000000, "Member 'FPartyJoinViaCodeRequest::PartyCode' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.PartyKickRequest
// 0x0010 (0x0010 - 0x0000)
struct FPartyKickRequest final
{
public:
	class FString                                 MemberID;                                          // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPartyKickRequest) == 0x000008, "Wrong alignment on FPartyKickRequest");
static_assert(sizeof(FPartyKickRequest) == 0x000010, "Wrong size on FPartyKickRequest");
static_assert(offsetof(FPartyKickRequest, MemberID) == 0x000000, "Member 'FPartyKickRequest::MemberID' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.PartyRejectRequest
// 0x0020 (0x0020 - 0x0000)
struct FPartyRejectRequest final
{
public:
	class FString                                 PartyId;                                           // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 InvitationToken;                                   // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPartyRejectRequest) == 0x000008, "Wrong alignment on FPartyRejectRequest");
static_assert(sizeof(FPartyRejectRequest) == 0x000020, "Wrong size on FPartyRejectRequest");
static_assert(offsetof(FPartyRejectRequest, PartyId) == 0x000000, "Member 'FPartyRejectRequest::PartyId' has a wrong offset!");
static_assert(offsetof(FPartyRejectRequest, InvitationToken) == 0x000010, "Member 'FPartyRejectRequest::InvitationToken' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.PartyInviteRequest
// 0x0010 (0x0010 - 0x0000)
struct FPartyInviteRequest final
{
public:
	class FString                                 FriendId;                                          // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPartyInviteRequest) == 0x000008, "Wrong alignment on FPartyInviteRequest");
static_assert(sizeof(FPartyInviteRequest) == 0x000010, "Wrong size on FPartyInviteRequest");
static_assert(offsetof(FPartyInviteRequest, FriendId) == 0x000000, "Member 'FPartyInviteRequest::FriendId' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.BulkGetUserPresenceRequest
// 0x0018 (0x0018 - 0x0000)
struct FBulkGetUserPresenceRequest final
{
public:
	bool                                          bCountOnly;                                        // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FString>                         UserIds;                                           // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBulkGetUserPresenceRequest) == 0x000008, "Wrong alignment on FBulkGetUserPresenceRequest");
static_assert(sizeof(FBulkGetUserPresenceRequest) == 0x000018, "Wrong size on FBulkGetUserPresenceRequest");
static_assert(offsetof(FBulkGetUserPresenceRequest, bCountOnly) == 0x000000, "Member 'FBulkGetUserPresenceRequest::bCountOnly' has a wrong offset!");
static_assert(offsetof(FBulkGetUserPresenceRequest, UserIds) == 0x000008, "Member 'FBulkGetUserPresenceRequest::UserIds' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.PresenceStatus
// 0x0018 (0x0018 - 0x0000)
struct FPresenceStatus final
{
public:
	EAvailability                                 Availability;                                      // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Activity;                                          // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPresenceStatus) == 0x000008, "Wrong alignment on FPresenceStatus");
static_assert(sizeof(FPresenceStatus) == 0x000018, "Wrong size on FPresenceStatus");
static_assert(offsetof(FPresenceStatus, Availability) == 0x000000, "Member 'FPresenceStatus::Availability' has a wrong offset!");
static_assert(offsetof(FPresenceStatus, Activity) == 0x000008, "Member 'FPresenceStatus::Activity' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.SendSignalingMessageRequest
// 0x0020 (0x0020 - 0x0000)
struct FSendSignalingMessageRequest final
{
public:
	class FString                                 UserId;                                            // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Message;                                           // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSendSignalingMessageRequest) == 0x000008, "Wrong alignment on FSendSignalingMessageRequest");
static_assert(sizeof(FSendSignalingMessageRequest) == 0x000020, "Wrong size on FSendSignalingMessageRequest");
static_assert(offsetof(FSendSignalingMessageRequest, UserId) == 0x000000, "Member 'FSendSignalingMessageRequest::UserId' has a wrong offset!");
static_assert(offsetof(FSendSignalingMessageRequest, Message) == 0x000010, "Member 'FSendSignalingMessageRequest::Message' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.RequestDSModel
// 0x0060 (0x0060 - 0x0000)
struct FRequestDSModel final
{
public:
	class FString                                 SessionID;                                         // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 GameMode;                                          // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ClientVersion;                                     // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Region;                                            // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Deployment;                                        // 0x0040(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ServerName;                                        // 0x0050(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRequestDSModel) == 0x000008, "Wrong alignment on FRequestDSModel");
static_assert(sizeof(FRequestDSModel) == 0x000060, "Wrong size on FRequestDSModel");
static_assert(offsetof(FRequestDSModel, SessionID) == 0x000000, "Member 'FRequestDSModel::SessionID' has a wrong offset!");
static_assert(offsetof(FRequestDSModel, GameMode) == 0x000010, "Member 'FRequestDSModel::GameMode' has a wrong offset!");
static_assert(offsetof(FRequestDSModel, ClientVersion) == 0x000020, "Member 'FRequestDSModel::ClientVersion' has a wrong offset!");
static_assert(offsetof(FRequestDSModel, Region) == 0x000030, "Member 'FRequestDSModel::Region' has a wrong offset!");
static_assert(offsetof(FRequestDSModel, Deployment) == 0x000040, "Member 'FRequestDSModel::Deployment' has a wrong offset!");
static_assert(offsetof(FRequestDSModel, ServerName) == 0x000050, "Member 'FRequestDSModel::ServerName' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.SetRetryParametersRequest
// 0x000C (0x000C - 0x0000)
struct FSetRetryParametersRequest final
{
public:
	int32                                         NewTotalTimeout;                                   // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NewBackoffDelay;                                   // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NewMaxDelay;                                       // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSetRetryParametersRequest) == 0x000004, "Wrong alignment on FSetRetryParametersRequest");
static_assert(sizeof(FSetRetryParametersRequest) == 0x00000C, "Wrong size on FSetRetryParametersRequest");
static_assert(offsetof(FSetRetryParametersRequest, NewTotalTimeout) == 0x000000, "Member 'FSetRetryParametersRequest::NewTotalTimeout' has a wrong offset!");
static_assert(offsetof(FSetRetryParametersRequest, NewBackoffDelay) == 0x000004, "Member 'FSetRetryParametersRequest::NewBackoffDelay' has a wrong offset!");
static_assert(offsetof(FSetRetryParametersRequest, NewMaxDelay) == 0x000008, "Member 'FSetRetryParametersRequest::NewMaxDelay' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.RefreshTokenRequest
// 0x0010 (0x0010 - 0x0000)
struct FRefreshTokenRequest final
{
public:
	class FString                                 AccessToken;                                       // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRefreshTokenRequest) == 0x000008, "Wrong alignment on FRefreshTokenRequest");
static_assert(sizeof(FRefreshTokenRequest) == 0x000010, "Wrong size on FRefreshTokenRequest");
static_assert(offsetof(FRefreshTokenRequest, AccessToken) == 0x000000, "Member 'FRefreshTokenRequest::AccessToken' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.ListAccelByteModelsUserRecord
// 0x0010 (0x0010 - 0x0000)
struct FListAccelByteModelsUserRecord final
{
public:
	TArray<struct FAccelByteModelsUserRecord>     Data;                                              // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FListAccelByteModelsUserRecord) == 0x000008, "Wrong alignment on FListAccelByteModelsUserRecord");
static_assert(sizeof(FListAccelByteModelsUserRecord) == 0x000010, "Wrong size on FListAccelByteModelsUserRecord");
static_assert(offsetof(FListAccelByteModelsUserRecord, Data) == 0x000000, "Member 'FListAccelByteModelsUserRecord::Data' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsPaginatedRecordsKey
// 0x0050 (0x0050 - 0x0000)
struct FAccelByteModelsPaginatedRecordsKey final
{
public:
	TArray<class FString>                         Data;                                              // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FAccelByteModelsPaging                 Paging;                                            // 0x0010(0x0040)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsPaginatedRecordsKey) == 0x000008, "Wrong alignment on FAccelByteModelsPaginatedRecordsKey");
static_assert(sizeof(FAccelByteModelsPaginatedRecordsKey) == 0x000050, "Wrong size on FAccelByteModelsPaginatedRecordsKey");
static_assert(offsetof(FAccelByteModelsPaginatedRecordsKey, Data) == 0x000000, "Member 'FAccelByteModelsPaginatedRecordsKey::Data' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsPaginatedRecordsKey, Paging) == 0x000010, "Member 'FAccelByteModelsPaginatedRecordsKey::Paging' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsConcurrentReplaceRequest
// 0x0028 (0x0028 - 0x0000)
struct FAccelByteModelsConcurrentReplaceRequest final
{
public:
	struct FDateTime                              UpdatedAt;                                         // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FJsonObjectWrapper                     Value;                                             // 0x0008(0x0020)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsConcurrentReplaceRequest) == 0x000008, "Wrong alignment on FAccelByteModelsConcurrentReplaceRequest");
static_assert(sizeof(FAccelByteModelsConcurrentReplaceRequest) == 0x000028, "Wrong size on FAccelByteModelsConcurrentReplaceRequest");
static_assert(offsetof(FAccelByteModelsConcurrentReplaceRequest, UpdatedAt) == 0x000000, "Member 'FAccelByteModelsConcurrentReplaceRequest::UpdatedAt' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsConcurrentReplaceRequest, Value) == 0x000008, "Member 'FAccelByteModelsConcurrentReplaceRequest::Value' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsServerStatusHistory
// 0x0020 (0x0020 - 0x0000)
struct FAccelByteModelsServerStatusHistory final
{
public:
	class FString                                 Status;                                            // 0x0000(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Time_stamp;                                        // 0x0010(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsServerStatusHistory) == 0x000008, "Wrong alignment on FAccelByteModelsServerStatusHistory");
static_assert(sizeof(FAccelByteModelsServerStatusHistory) == 0x000020, "Wrong size on FAccelByteModelsServerStatusHistory");
static_assert(offsetof(FAccelByteModelsServerStatusHistory, Status) == 0x000000, "Member 'FAccelByteModelsServerStatusHistory::Status' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsServerStatusHistory, Time_stamp) == 0x000010, "Member 'FAccelByteModelsServerStatusHistory::Time_stamp' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsDSMServer
// 0x0128 (0x0128 - 0x0000)
struct FAccelByteModelsDSMServer final
{
public:
	class FString                                 Custom_Attribute;                                  // 0x0000(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Deployment;                                        // 0x0010(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Game_version;                                      // 0x0020(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Image_version;                                     // 0x0030(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Ip;                                                // 0x0040(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Namespace;                                         // 0x0050(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Params;                                            // 0x0060(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Pod_name;                                          // 0x0070(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Port;                                              // 0x0080(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_84[0x4];                                       // 0x0084(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<class FString, int32>                    Ports;                                             // 0x0088(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	class FString                                 Protocol;                                          // 0x00D8(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Provider;                                          // 0x00E8(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Region;                                            // 0x00F8(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Session_id;                                        // 0x0108(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FAccelByteModelsServerStatusHistory> Status_history;                                    // 0x0118(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsDSMServer) == 0x000008, "Wrong alignment on FAccelByteModelsDSMServer");
static_assert(sizeof(FAccelByteModelsDSMServer) == 0x000128, "Wrong size on FAccelByteModelsDSMServer");
static_assert(offsetof(FAccelByteModelsDSMServer, Custom_Attribute) == 0x000000, "Member 'FAccelByteModelsDSMServer::Custom_Attribute' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsDSMServer, Deployment) == 0x000010, "Member 'FAccelByteModelsDSMServer::Deployment' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsDSMServer, Game_version) == 0x000020, "Member 'FAccelByteModelsDSMServer::Game_version' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsDSMServer, Image_version) == 0x000030, "Member 'FAccelByteModelsDSMServer::Image_version' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsDSMServer, Ip) == 0x000040, "Member 'FAccelByteModelsDSMServer::Ip' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsDSMServer, Namespace) == 0x000050, "Member 'FAccelByteModelsDSMServer::Namespace' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsDSMServer, Params) == 0x000060, "Member 'FAccelByteModelsDSMServer::Params' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsDSMServer, Pod_name) == 0x000070, "Member 'FAccelByteModelsDSMServer::Pod_name' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsDSMServer, Port) == 0x000080, "Member 'FAccelByteModelsDSMServer::Port' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsDSMServer, Ports) == 0x000088, "Member 'FAccelByteModelsDSMServer::Ports' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsDSMServer, Protocol) == 0x0000D8, "Member 'FAccelByteModelsDSMServer::Protocol' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsDSMServer, Provider) == 0x0000E8, "Member 'FAccelByteModelsDSMServer::Provider' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsDSMServer, Region) == 0x0000F8, "Member 'FAccelByteModelsDSMServer::Region' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsDSMServer, Session_id) == 0x000108, "Member 'FAccelByteModelsDSMServer::Session_id' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsDSMServer, Status_history) == 0x000118, "Member 'FAccelByteModelsDSMServer::Status_history' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsDSMSession
// 0x0168 (0x0168 - 0x0000)
struct FAccelByteModelsDSMSession final
{
public:
	struct FAccelByteModelsDSMServer              Server;                                            // 0x0000(0x0128)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	class FString                                 ID;                                                // 0x0128(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Namespace;                                         // 0x0138(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Provider;                                          // 0x0148(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Region;                                            // 0x0158(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsDSMSession) == 0x000008, "Wrong alignment on FAccelByteModelsDSMSession");
static_assert(sizeof(FAccelByteModelsDSMSession) == 0x000168, "Wrong size on FAccelByteModelsDSMSession");
static_assert(offsetof(FAccelByteModelsDSMSession, Server) == 0x000000, "Member 'FAccelByteModelsDSMSession::Server' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsDSMSession, ID) == 0x000128, "Member 'FAccelByteModelsDSMSession::ID' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsDSMSession, Namespace) == 0x000138, "Member 'FAccelByteModelsDSMSession::Namespace' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsDSMSession, Provider) == 0x000148, "Member 'FAccelByteModelsDSMSession::Provider' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsDSMSession, Region) == 0x000158, "Member 'FAccelByteModelsDSMSession::Region' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsServerCreateSessionResponse
// 0x0168 (0x0168 - 0x0000)
struct FAccelByteModelsServerCreateSessionResponse final
{
public:
	struct FAccelByteModelsDSMSession             Session;                                           // 0x0000(0x0168)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsServerCreateSessionResponse) == 0x000008, "Wrong alignment on FAccelByteModelsServerCreateSessionResponse");
static_assert(sizeof(FAccelByteModelsServerCreateSessionResponse) == 0x000168, "Wrong size on FAccelByteModelsServerCreateSessionResponse");
static_assert(offsetof(FAccelByteModelsServerCreateSessionResponse, Session) == 0x000000, "Member 'FAccelByteModelsServerCreateSessionResponse::Session' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsServerCreateSessionRequest
// 0x0090 (0x0090 - 0x0000)
struct FAccelByteModelsServerCreateSessionRequest final
{
public:
	class FString                                 Client_version;                                    // 0x0000(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Configuration;                                     // 0x0010(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Deployment;                                        // 0x0020(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Game_mode;                                         // 0x0030(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Namespace;                                         // 0x0040(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Pod_name;                                          // 0x0050(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Region;                                            // 0x0060(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Session_id;                                        // 0x0070(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FAccelByteModelsMatchingAlly>   Matching_allies;                                   // 0x0080(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsServerCreateSessionRequest) == 0x000008, "Wrong alignment on FAccelByteModelsServerCreateSessionRequest");
static_assert(sizeof(FAccelByteModelsServerCreateSessionRequest) == 0x000090, "Wrong size on FAccelByteModelsServerCreateSessionRequest");
static_assert(offsetof(FAccelByteModelsServerCreateSessionRequest, Client_version) == 0x000000, "Member 'FAccelByteModelsServerCreateSessionRequest::Client_version' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsServerCreateSessionRequest, Configuration) == 0x000010, "Member 'FAccelByteModelsServerCreateSessionRequest::Configuration' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsServerCreateSessionRequest, Deployment) == 0x000020, "Member 'FAccelByteModelsServerCreateSessionRequest::Deployment' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsServerCreateSessionRequest, Game_mode) == 0x000030, "Member 'FAccelByteModelsServerCreateSessionRequest::Game_mode' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsServerCreateSessionRequest, Namespace) == 0x000040, "Member 'FAccelByteModelsServerCreateSessionRequest::Namespace' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsServerCreateSessionRequest, Pod_name) == 0x000050, "Member 'FAccelByteModelsServerCreateSessionRequest::Pod_name' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsServerCreateSessionRequest, Region) == 0x000060, "Member 'FAccelByteModelsServerCreateSessionRequest::Region' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsServerCreateSessionRequest, Session_id) == 0x000070, "Member 'FAccelByteModelsServerCreateSessionRequest::Session_id' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsServerCreateSessionRequest, Matching_allies) == 0x000080, "Member 'FAccelByteModelsServerCreateSessionRequest::Matching_allies' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsDSMClient
// 0x0040 (0x0040 - 0x0000)
struct FAccelByteModelsDSMClient final
{
public:
	class FString                                 Host_address;                                      // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Region;                                            // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Provider;                                          // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Status;                                            // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsDSMClient) == 0x000008, "Wrong alignment on FAccelByteModelsDSMClient");
static_assert(sizeof(FAccelByteModelsDSMClient) == 0x000040, "Wrong size on FAccelByteModelsDSMClient");
static_assert(offsetof(FAccelByteModelsDSMClient, Host_address) == 0x000000, "Member 'FAccelByteModelsDSMClient::Host_address' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsDSMClient, Region) == 0x000010, "Member 'FAccelByteModelsDSMClient::Region' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsDSMClient, Provider) == 0x000020, "Member 'FAccelByteModelsDSMClient::Provider' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsDSMClient, Status) == 0x000030, "Member 'FAccelByteModelsDSMClient::Status' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsDeregisterLocalServerRequest
// 0x0010 (0x0010 - 0x0000)
struct FAccelByteModelsDeregisterLocalServerRequest final
{
public:
	class FString                                 Name;                                              // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsDeregisterLocalServerRequest) == 0x000008, "Wrong alignment on FAccelByteModelsDeregisterLocalServerRequest");
static_assert(sizeof(FAccelByteModelsDeregisterLocalServerRequest) == 0x000010, "Wrong size on FAccelByteModelsDeregisterLocalServerRequest");
static_assert(offsetof(FAccelByteModelsDeregisterLocalServerRequest, Name) == 0x000000, "Member 'FAccelByteModelsDeregisterLocalServerRequest::Name' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsRegisterLocalServerRequest
// 0x0038 (0x0038 - 0x0000)
struct FAccelByteModelsRegisterLocalServerRequest final
{
public:
	class FString                                 Ip;                                                // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Name;                                              // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Port;                                              // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Custom_Attribute;                                  // 0x0028(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsRegisterLocalServerRequest) == 0x000008, "Wrong alignment on FAccelByteModelsRegisterLocalServerRequest");
static_assert(sizeof(FAccelByteModelsRegisterLocalServerRequest) == 0x000038, "Wrong size on FAccelByteModelsRegisterLocalServerRequest");
static_assert(offsetof(FAccelByteModelsRegisterLocalServerRequest, Ip) == 0x000000, "Member 'FAccelByteModelsRegisterLocalServerRequest::Ip' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsRegisterLocalServerRequest, Name) == 0x000010, "Member 'FAccelByteModelsRegisterLocalServerRequest::Name' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsRegisterLocalServerRequest, Port) == 0x000020, "Member 'FAccelByteModelsRegisterLocalServerRequest::Port' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsRegisterLocalServerRequest, Custom_Attribute) == 0x000028, "Member 'FAccelByteModelsRegisterLocalServerRequest::Custom_Attribute' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsFulFillCodeRequest
// 0x0030 (0x0030 - 0x0000)
struct FAccelByteModelsFulFillCodeRequest final
{
public:
	class FString                                 Code;                                              // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Region;                                            // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Language;                                          // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsFulFillCodeRequest) == 0x000008, "Wrong alignment on FAccelByteModelsFulFillCodeRequest");
static_assert(sizeof(FAccelByteModelsFulFillCodeRequest) == 0x000030, "Wrong size on FAccelByteModelsFulFillCodeRequest");
static_assert(offsetof(FAccelByteModelsFulFillCodeRequest, Code) == 0x000000, "Member 'FAccelByteModelsFulFillCodeRequest::Code' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsFulFillCodeRequest, Region) == 0x000010, "Member 'FAccelByteModelsFulFillCodeRequest::Region' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsFulFillCodeRequest, Language) == 0x000020, "Member 'FAccelByteModelsFulFillCodeRequest::Language' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsDebitUserWalletRequest
// 0x0018 (0x0018 - 0x0000)
struct FAccelByteModelsDebitUserWalletRequest final
{
public:
	int32                                         Amount;                                            // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Reason;                                            // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsDebitUserWalletRequest) == 0x000008, "Wrong alignment on FAccelByteModelsDebitUserWalletRequest");
static_assert(sizeof(FAccelByteModelsDebitUserWalletRequest) == 0x000018, "Wrong size on FAccelByteModelsDebitUserWalletRequest");
static_assert(offsetof(FAccelByteModelsDebitUserWalletRequest, Amount) == 0x000000, "Member 'FAccelByteModelsDebitUserWalletRequest::Amount' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsDebitUserWalletRequest, Reason) == 0x000008, "Member 'FAccelByteModelsDebitUserWalletRequest::Reason' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsOrderInfoTransaction
// 0x0110 (0x0110 - 0x0000)
struct FAccelByteModelsOrderInfoTransaction final
{
public:
	class FString                                 TransactionId;                                     // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Amount;                                            // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Vat;                                               // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SalesTax;                                          // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FAccelByteModelsOrderCurrencySummary   Currency;                                          // 0x0020(0x0040)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	class FString                                 Type;                                              // 0x0060(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Status;                                            // 0x0070(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Provider;                                          // 0x0080(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PaymentProviderFee;                                // 0x0090(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_94[0x4];                                       // 0x0094(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 PaymentMethod;                                     // 0x0098(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PaymentMethodFee;                                  // 0x00A8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_AC[0x4];                                       // 0x00AC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 MerchantId;                                        // 0x00B0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ExternalTransactionId;                             // 0x00C0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ExternalStatusCode;                                // 0x00D0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ExternalMessage;                                   // 0x00E0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 TransactionStartTime;                              // 0x00F0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 TransactionEndTime;                                // 0x0100(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsOrderInfoTransaction) == 0x000008, "Wrong alignment on FAccelByteModelsOrderInfoTransaction");
static_assert(sizeof(FAccelByteModelsOrderInfoTransaction) == 0x000110, "Wrong size on FAccelByteModelsOrderInfoTransaction");
static_assert(offsetof(FAccelByteModelsOrderInfoTransaction, TransactionId) == 0x000000, "Member 'FAccelByteModelsOrderInfoTransaction::TransactionId' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsOrderInfoTransaction, Amount) == 0x000010, "Member 'FAccelByteModelsOrderInfoTransaction::Amount' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsOrderInfoTransaction, Vat) == 0x000014, "Member 'FAccelByteModelsOrderInfoTransaction::Vat' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsOrderInfoTransaction, SalesTax) == 0x000018, "Member 'FAccelByteModelsOrderInfoTransaction::SalesTax' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsOrderInfoTransaction, Currency) == 0x000020, "Member 'FAccelByteModelsOrderInfoTransaction::Currency' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsOrderInfoTransaction, Type) == 0x000060, "Member 'FAccelByteModelsOrderInfoTransaction::Type' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsOrderInfoTransaction, Status) == 0x000070, "Member 'FAccelByteModelsOrderInfoTransaction::Status' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsOrderInfoTransaction, Provider) == 0x000080, "Member 'FAccelByteModelsOrderInfoTransaction::Provider' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsOrderInfoTransaction, PaymentProviderFee) == 0x000090, "Member 'FAccelByteModelsOrderInfoTransaction::PaymentProviderFee' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsOrderInfoTransaction, PaymentMethod) == 0x000098, "Member 'FAccelByteModelsOrderInfoTransaction::PaymentMethod' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsOrderInfoTransaction, PaymentMethodFee) == 0x0000A8, "Member 'FAccelByteModelsOrderInfoTransaction::PaymentMethodFee' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsOrderInfoTransaction, MerchantId) == 0x0000B0, "Member 'FAccelByteModelsOrderInfoTransaction::MerchantId' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsOrderInfoTransaction, ExternalTransactionId) == 0x0000C0, "Member 'FAccelByteModelsOrderInfoTransaction::ExternalTransactionId' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsOrderInfoTransaction, ExternalStatusCode) == 0x0000D0, "Member 'FAccelByteModelsOrderInfoTransaction::ExternalStatusCode' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsOrderInfoTransaction, ExternalMessage) == 0x0000E0, "Member 'FAccelByteModelsOrderInfoTransaction::ExternalMessage' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsOrderInfoTransaction, TransactionStartTime) == 0x0000F0, "Member 'FAccelByteModelsOrderInfoTransaction::TransactionStartTime' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsOrderInfoTransaction, TransactionEndTime) == 0x000100, "Member 'FAccelByteModelsOrderInfoTransaction::TransactionEndTime' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsOrderInfoPaymentUrl
// 0x0050 (0x0050 - 0x0000)
struct FAccelByteModelsOrderInfoPaymentUrl final
{
public:
	class FString                                 PaymentProvider;                                   // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 PaymentUrl;                                        // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 PaymentToken;                                      // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ReturnUrl;                                         // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 PaymentType;                                       // 0x0040(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsOrderInfoPaymentUrl) == 0x000008, "Wrong alignment on FAccelByteModelsOrderInfoPaymentUrl");
static_assert(sizeof(FAccelByteModelsOrderInfoPaymentUrl) == 0x000050, "Wrong size on FAccelByteModelsOrderInfoPaymentUrl");
static_assert(offsetof(FAccelByteModelsOrderInfoPaymentUrl, PaymentProvider) == 0x000000, "Member 'FAccelByteModelsOrderInfoPaymentUrl::PaymentProvider' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsOrderInfoPaymentUrl, PaymentUrl) == 0x000010, "Member 'FAccelByteModelsOrderInfoPaymentUrl::PaymentUrl' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsOrderInfoPaymentUrl, PaymentToken) == 0x000020, "Member 'FAccelByteModelsOrderInfoPaymentUrl::PaymentToken' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsOrderInfoPaymentUrl, ReturnUrl) == 0x000030, "Member 'FAccelByteModelsOrderInfoPaymentUrl::ReturnUrl' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsOrderInfoPaymentUrl, PaymentType) == 0x000040, "Member 'FAccelByteModelsOrderInfoPaymentUrl::PaymentType' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsTwitchDropEntitlement
// 0x0030 (0x0030 - 0x0000)
struct FAccelByteModelsTwitchDropEntitlement final
{
public:
	class FString                                 GameId;                                            // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Region;                                            // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Language;                                          // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsTwitchDropEntitlement) == 0x000008, "Wrong alignment on FAccelByteModelsTwitchDropEntitlement");
static_assert(sizeof(FAccelByteModelsTwitchDropEntitlement) == 0x000030, "Wrong size on FAccelByteModelsTwitchDropEntitlement");
static_assert(offsetof(FAccelByteModelsTwitchDropEntitlement, GameId) == 0x000000, "Member 'FAccelByteModelsTwitchDropEntitlement::GameId' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsTwitchDropEntitlement, Region) == 0x000010, "Member 'FAccelByteModelsTwitchDropEntitlement::Region' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsTwitchDropEntitlement, Language) == 0x000020, "Member 'FAccelByteModelsTwitchDropEntitlement::Language' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsPlayStationDLCSync
// 0x0004 (0x0004 - 0x0000)
struct FAccelByteModelsPlayStationDLCSync final
{
public:
	int32                                         ServiceLabel;                                      // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsPlayStationDLCSync) == 0x000004, "Wrong alignment on FAccelByteModelsPlayStationDLCSync");
static_assert(sizeof(FAccelByteModelsPlayStationDLCSync) == 0x000004, "Wrong size on FAccelByteModelsPlayStationDLCSync");
static_assert(offsetof(FAccelByteModelsPlayStationDLCSync, ServiceLabel) == 0x000000, "Member 'FAccelByteModelsPlayStationDLCSync::ServiceLabel' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsXBoxDLCSync
// 0x0010 (0x0010 - 0x0000)
struct FAccelByteModelsXBoxDLCSync final
{
public:
	class FString                                 XstsToken;                                         // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsXBoxDLCSync) == 0x000008, "Wrong alignment on FAccelByteModelsXBoxDLCSync");
static_assert(sizeof(FAccelByteModelsXBoxDLCSync) == 0x000010, "Wrong size on FAccelByteModelsXBoxDLCSync");
static_assert(offsetof(FAccelByteModelsXBoxDLCSync, XstsToken) == 0x000000, "Member 'FAccelByteModelsXBoxDLCSync::XstsToken' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsBulkRevokeEntitlements
// 0x0004 (0x0004 - 0x0000)
struct FAccelByteModelsBulkRevokeEntitlements final
{
public:
	int32                                         Affected;                                          // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsBulkRevokeEntitlements) == 0x000004, "Wrong alignment on FAccelByteModelsBulkRevokeEntitlements");
static_assert(sizeof(FAccelByteModelsBulkRevokeEntitlements) == 0x000004, "Wrong size on FAccelByteModelsBulkRevokeEntitlements");
static_assert(offsetof(FAccelByteModelsBulkRevokeEntitlements, Affected) == 0x000000, "Member 'FAccelByteModelsBulkRevokeEntitlements::Affected' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsDistributionAttributes
// 0x0040 (0x0040 - 0x0000)
struct FAccelByteModelsDistributionAttributes final
{
public:
	struct FAccelByteModelsAttributes             Attributes;                                        // 0x0000(0x0040)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsDistributionAttributes) == 0x000008, "Wrong alignment on FAccelByteModelsDistributionAttributes");
static_assert(sizeof(FAccelByteModelsDistributionAttributes) == 0x000040, "Wrong size on FAccelByteModelsDistributionAttributes");
static_assert(offsetof(FAccelByteModelsDistributionAttributes, Attributes) == 0x000000, "Member 'FAccelByteModelsDistributionAttributes::Attributes' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsStackableEntitlementInfo
// 0x0270 (0x0270 - 0x0000)
struct FAccelByteModelsStackableEntitlementInfo final
{
public:
	class FString                                 ID;                                                // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Namespace;                                         // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAccelByteEntitlementClass                    Clazz;                                             // 0x0020(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAccelByteEntitlementType                     Type;                                              // 0x0021(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAccelByteEntitlementStatus                   Status;                                            // 0x0022(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_23[0x5];                                       // 0x0023(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 AppId;                                             // 0x0028(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAccelByteAppType                             AppType;                                           // 0x0038(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Sku;                                               // 0x0040(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 UserId;                                            // 0x0050(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ItemId;                                            // 0x0060(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 GrantedCode;                                       // 0x0070(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ItemNamespace;                                     // 0x0080(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Name;                                              // 0x0090(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         UseCount;                                          // 0x00A0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Quantity;                                          // 0x00A4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAccelByteEntitlementSource                   Source;                                            // 0x00A8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A9[0x3];                                       // 0x00A9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         DistributedQuantity;                               // 0x00AC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 TargetNamespace;                                   // 0x00B0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FAccelByteModelsEntitlementItemSnapshot ItemSnapshot;                                      // 0x00C0(0x0168)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	class FString                                 StartDate;                                         // 0x0228(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 EndDate;                                           // 0x0238(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Stackable;                                         // 0x0248(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_249[0x7];                                      // 0x0249(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FDateTime                              GrantedAt;                                         // 0x0250(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDateTime                              CreatedAt;                                         // 0x0258(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDateTime                              UpdatedAt;                                         // 0x0260(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         StackedUseCount;                                   // 0x0268(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         StackedQuantity;                                   // 0x026C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsStackableEntitlementInfo) == 0x000008, "Wrong alignment on FAccelByteModelsStackableEntitlementInfo");
static_assert(sizeof(FAccelByteModelsStackableEntitlementInfo) == 0x000270, "Wrong size on FAccelByteModelsStackableEntitlementInfo");
static_assert(offsetof(FAccelByteModelsStackableEntitlementInfo, ID) == 0x000000, "Member 'FAccelByteModelsStackableEntitlementInfo::ID' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsStackableEntitlementInfo, Namespace) == 0x000010, "Member 'FAccelByteModelsStackableEntitlementInfo::Namespace' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsStackableEntitlementInfo, Clazz) == 0x000020, "Member 'FAccelByteModelsStackableEntitlementInfo::Clazz' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsStackableEntitlementInfo, Type) == 0x000021, "Member 'FAccelByteModelsStackableEntitlementInfo::Type' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsStackableEntitlementInfo, Status) == 0x000022, "Member 'FAccelByteModelsStackableEntitlementInfo::Status' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsStackableEntitlementInfo, AppId) == 0x000028, "Member 'FAccelByteModelsStackableEntitlementInfo::AppId' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsStackableEntitlementInfo, AppType) == 0x000038, "Member 'FAccelByteModelsStackableEntitlementInfo::AppType' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsStackableEntitlementInfo, Sku) == 0x000040, "Member 'FAccelByteModelsStackableEntitlementInfo::Sku' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsStackableEntitlementInfo, UserId) == 0x000050, "Member 'FAccelByteModelsStackableEntitlementInfo::UserId' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsStackableEntitlementInfo, ItemId) == 0x000060, "Member 'FAccelByteModelsStackableEntitlementInfo::ItemId' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsStackableEntitlementInfo, GrantedCode) == 0x000070, "Member 'FAccelByteModelsStackableEntitlementInfo::GrantedCode' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsStackableEntitlementInfo, ItemNamespace) == 0x000080, "Member 'FAccelByteModelsStackableEntitlementInfo::ItemNamespace' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsStackableEntitlementInfo, Name) == 0x000090, "Member 'FAccelByteModelsStackableEntitlementInfo::Name' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsStackableEntitlementInfo, UseCount) == 0x0000A0, "Member 'FAccelByteModelsStackableEntitlementInfo::UseCount' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsStackableEntitlementInfo, Quantity) == 0x0000A4, "Member 'FAccelByteModelsStackableEntitlementInfo::Quantity' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsStackableEntitlementInfo, Source) == 0x0000A8, "Member 'FAccelByteModelsStackableEntitlementInfo::Source' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsStackableEntitlementInfo, DistributedQuantity) == 0x0000AC, "Member 'FAccelByteModelsStackableEntitlementInfo::DistributedQuantity' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsStackableEntitlementInfo, TargetNamespace) == 0x0000B0, "Member 'FAccelByteModelsStackableEntitlementInfo::TargetNamespace' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsStackableEntitlementInfo, ItemSnapshot) == 0x0000C0, "Member 'FAccelByteModelsStackableEntitlementInfo::ItemSnapshot' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsStackableEntitlementInfo, StartDate) == 0x000228, "Member 'FAccelByteModelsStackableEntitlementInfo::StartDate' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsStackableEntitlementInfo, EndDate) == 0x000238, "Member 'FAccelByteModelsStackableEntitlementInfo::EndDate' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsStackableEntitlementInfo, Stackable) == 0x000248, "Member 'FAccelByteModelsStackableEntitlementInfo::Stackable' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsStackableEntitlementInfo, GrantedAt) == 0x000250, "Member 'FAccelByteModelsStackableEntitlementInfo::GrantedAt' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsStackableEntitlementInfo, CreatedAt) == 0x000258, "Member 'FAccelByteModelsStackableEntitlementInfo::CreatedAt' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsStackableEntitlementInfo, UpdatedAt) == 0x000260, "Member 'FAccelByteModelsStackableEntitlementInfo::UpdatedAt' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsStackableEntitlementInfo, StackedUseCount) == 0x000268, "Member 'FAccelByteModelsStackableEntitlementInfo::StackedUseCount' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsStackableEntitlementInfo, StackedQuantity) == 0x00026C, "Member 'FAccelByteModelsStackableEntitlementInfo::StackedQuantity' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsOwnershipToken
// 0x0010 (0x0010 - 0x0000)
struct FAccelByteModelsOwnershipToken final
{
public:
	class FString                                 OwnershipToken;                                    // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsOwnershipToken) == 0x000008, "Wrong alignment on FAccelByteModelsOwnershipToken");
static_assert(sizeof(FAccelByteModelsOwnershipToken) == 0x000010, "Wrong size on FAccelByteModelsOwnershipToken");
static_assert(offsetof(FAccelByteModelsOwnershipToken, OwnershipToken) == 0x000000, "Member 'FAccelByteModelsOwnershipToken::OwnershipToken' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsBulkGetItemsBySkus
// 0x0020 (0x0020 - 0x0000)
struct FAccelByteModelsBulkGetItemsBySkus final
{
public:
	class FString                                 Sku;                                               // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ItemId;                                            // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsBulkGetItemsBySkus) == 0x000008, "Wrong alignment on FAccelByteModelsBulkGetItemsBySkus");
static_assert(sizeof(FAccelByteModelsBulkGetItemsBySkus) == 0x000020, "Wrong size on FAccelByteModelsBulkGetItemsBySkus");
static_assert(offsetof(FAccelByteModelsBulkGetItemsBySkus, Sku) == 0x000000, "Member 'FAccelByteModelsBulkGetItemsBySkus::Sku' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsBulkGetItemsBySkus, ItemId) == 0x000010, "Member 'FAccelByteModelsBulkGetItemsBySkus::ItemId' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.ErrorOauthInfo
// 0x00A8 (0x00A8 - 0x0000)
struct FErrorOauthInfo final
{
public:
	int32                                         ErrorCode;                                         // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ErrorMessage;                                      // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Error;                                             // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Error_description;                                 // 0x0028(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Error_uri;                                         // 0x0038(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Mfa_token;                                         // 0x0048(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FString>                         Factors;                                           // 0x0058(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	class FString                                 Default_factor;                                    // 0x0068(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 LinkingToken;                                      // 0x0078(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 PlatformId;                                        // 0x0088(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ClientId;                                          // 0x0098(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FErrorOauthInfo) == 0x000008, "Wrong alignment on FErrorOauthInfo");
static_assert(sizeof(FErrorOauthInfo) == 0x0000A8, "Wrong size on FErrorOauthInfo");
static_assert(offsetof(FErrorOauthInfo, ErrorCode) == 0x000000, "Member 'FErrorOauthInfo::ErrorCode' has a wrong offset!");
static_assert(offsetof(FErrorOauthInfo, ErrorMessage) == 0x000008, "Member 'FErrorOauthInfo::ErrorMessage' has a wrong offset!");
static_assert(offsetof(FErrorOauthInfo, Error) == 0x000018, "Member 'FErrorOauthInfo::Error' has a wrong offset!");
static_assert(offsetof(FErrorOauthInfo, Error_description) == 0x000028, "Member 'FErrorOauthInfo::Error_description' has a wrong offset!");
static_assert(offsetof(FErrorOauthInfo, Error_uri) == 0x000038, "Member 'FErrorOauthInfo::Error_uri' has a wrong offset!");
static_assert(offsetof(FErrorOauthInfo, Mfa_token) == 0x000048, "Member 'FErrorOauthInfo::Mfa_token' has a wrong offset!");
static_assert(offsetof(FErrorOauthInfo, Factors) == 0x000058, "Member 'FErrorOauthInfo::Factors' has a wrong offset!");
static_assert(offsetof(FErrorOauthInfo, Default_factor) == 0x000068, "Member 'FErrorOauthInfo::Default_factor' has a wrong offset!");
static_assert(offsetof(FErrorOauthInfo, LinkingToken) == 0x000078, "Member 'FErrorOauthInfo::LinkingToken' has a wrong offset!");
static_assert(offsetof(FErrorOauthInfo, PlatformId) == 0x000088, "Member 'FErrorOauthInfo::PlatformId' has a wrong offset!");
static_assert(offsetof(FErrorOauthInfo, ClientId) == 0x000098, "Member 'FErrorOauthInfo::ClientId' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.ErrorInfo
// 0x0040 (0x0040 - 0x0000)
struct FErrorInfo final
{
public:
	int32                                         NumericErrorCode;                                  // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ErrorCode;                                         // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Code;                                              // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ErrorMessage;                                      // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Message;                                           // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Error;                                             // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FErrorInfo) == 0x000008, "Wrong alignment on FErrorInfo");
static_assert(sizeof(FErrorInfo) == 0x000040, "Wrong size on FErrorInfo");
static_assert(offsetof(FErrorInfo, NumericErrorCode) == 0x000000, "Member 'FErrorInfo::NumericErrorCode' has a wrong offset!");
static_assert(offsetof(FErrorInfo, ErrorCode) == 0x000004, "Member 'FErrorInfo::ErrorCode' has a wrong offset!");
static_assert(offsetof(FErrorInfo, Code) == 0x000008, "Member 'FErrorInfo::Code' has a wrong offset!");
static_assert(offsetof(FErrorInfo, ErrorMessage) == 0x000010, "Member 'FErrorInfo::ErrorMessage' has a wrong offset!");
static_assert(offsetof(FErrorInfo, Message) == 0x000020, "Member 'FErrorInfo::Message' has a wrong offset!");
static_assert(offsetof(FErrorInfo, Error) == 0x000030, "Member 'FErrorInfo::Error' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsEmptyRequest
// 0x0001 (0x0001 - 0x0000)
struct FAccelByteModelsEmptyRequest final
{
public:
	uint8                                         Pad_0[0x1];                                        // 0x0000(0x0001)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAccelByteModelsEmptyRequest) == 0x000001, "Wrong alignment on FAccelByteModelsEmptyRequest");
static_assert(sizeof(FAccelByteModelsEmptyRequest) == 0x000001, "Wrong size on FAccelByteModelsEmptyRequest");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsGetMemberRequestsListResponse
// 0x0050 (0x0050 - 0x0000)
struct FAccelByteModelsGetMemberRequestsListResponse final
{
public:
	TArray<struct FAccelByteModelsRuleInformation> Data;                                              // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FAccelByteModelsPaging                 Paging;                                            // 0x0010(0x0040)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsGetMemberRequestsListResponse) == 0x000008, "Wrong alignment on FAccelByteModelsGetMemberRequestsListResponse");
static_assert(sizeof(FAccelByteModelsGetMemberRequestsListResponse) == 0x000050, "Wrong size on FAccelByteModelsGetMemberRequestsListResponse");
static_assert(offsetof(FAccelByteModelsGetMemberRequestsListResponse, Data) == 0x000000, "Member 'FAccelByteModelsGetMemberRequestsListResponse::Data' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsGetMemberRequestsListResponse, Paging) == 0x000010, "Member 'FAccelByteModelsGetMemberRequestsListResponse::Paging' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsGetGroupMembersListByGroupIdRequest
// 0x0010 (0x0018 - 0x0008)
struct FAccelByteModelsGetGroupMembersListByGroupIdRequest final : public FAccelByteModelsLimitOffsetRequest
{
public:
	class FString                                 Order;                                             // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsGetGroupMembersListByGroupIdRequest) == 0x000008, "Wrong alignment on FAccelByteModelsGetGroupMembersListByGroupIdRequest");
static_assert(sizeof(FAccelByteModelsGetGroupMembersListByGroupIdRequest) == 0x000018, "Wrong size on FAccelByteModelsGetGroupMembersListByGroupIdRequest");
static_assert(offsetof(FAccelByteModelsGetGroupMembersListByGroupIdRequest, Order) == 0x000008, "Member 'FAccelByteModelsGetGroupMembersListByGroupIdRequest::Order' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsUserIdWrapper
// 0x0010 (0x0010 - 0x0000)
struct FAccelByteModelsUserIdWrapper final
{
public:
	class FString                                 UserId;                                            // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsUserIdWrapper) == 0x000008, "Wrong alignment on FAccelByteModelsUserIdWrapper");
static_assert(sizeof(FAccelByteModelsUserIdWrapper) == 0x000010, "Wrong size on FAccelByteModelsUserIdWrapper");
static_assert(offsetof(FAccelByteModelsUserIdWrapper, UserId) == 0x000000, "Member 'FAccelByteModelsUserIdWrapper::UserId' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsMemberRequestResponse
// 0x0030 (0x0030 - 0x0000)
struct FAccelByteModelsMemberRequestResponse final
{
public:
	class FString                                 GroupID;                                           // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 UserId;                                            // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 RequestType;                                       // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsMemberRequestResponse) == 0x000008, "Wrong alignment on FAccelByteModelsMemberRequestResponse");
static_assert(sizeof(FAccelByteModelsMemberRequestResponse) == 0x000030, "Wrong size on FAccelByteModelsMemberRequestResponse");
static_assert(offsetof(FAccelByteModelsMemberRequestResponse, GroupID) == 0x000000, "Member 'FAccelByteModelsMemberRequestResponse::GroupID' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsMemberRequestResponse, UserId) == 0x000010, "Member 'FAccelByteModelsMemberRequestResponse::UserId' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsMemberRequestResponse, RequestType) == 0x000020, "Member 'FAccelByteModelsMemberRequestResponse::RequestType' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.LobbyMessages
// 0x0020 (0x0020 - 0x0000)
struct FLobbyMessages final
{
public:
	class FString                                 Code;                                              // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 CodeName;                                          // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FLobbyMessages) == 0x000008, "Wrong alignment on FLobbyMessages");
static_assert(sizeof(FLobbyMessages) == 0x000020, "Wrong size on FLobbyMessages");
static_assert(offsetof(FLobbyMessages, Code) == 0x000000, "Member 'FLobbyMessages::Code' has a wrong offset!");
static_assert(offsetof(FLobbyMessages, CodeName) == 0x000010, "Member 'FLobbyMessages::CodeName' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsLobbySessionId
// 0x0010 (0x0010 - 0x0000)
struct FAccelByteModelsLobbySessionId final
{
public:
	class FString                                 LobbySessionID;                                    // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsLobbySessionId) == 0x000008, "Wrong alignment on FAccelByteModelsLobbySessionId");
static_assert(sizeof(FAccelByteModelsLobbySessionId) == 0x000010, "Wrong size on FAccelByteModelsLobbySessionId");
static_assert(offsetof(FAccelByteModelsLobbySessionId, LobbySessionID) == 0x000000, "Member 'FAccelByteModelsLobbySessionId::LobbySessionID' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsSetSessionAttributeRequest
// 0x0050 (0x0050 - 0x0000)
struct FAccelByteModelsSetSessionAttributeRequest final
{
public:
	TMap<class FString, class FString>            Attributes;                                        // 0x0000(0x0050)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsSetSessionAttributeRequest) == 0x000008, "Wrong alignment on FAccelByteModelsSetSessionAttributeRequest");
static_assert(sizeof(FAccelByteModelsSetSessionAttributeRequest) == 0x000050, "Wrong size on FAccelByteModelsSetSessionAttributeRequest");
static_assert(offsetof(FAccelByteModelsSetSessionAttributeRequest, Attributes) == 0x000000, "Member 'FAccelByteModelsSetSessionAttributeRequest::Attributes' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsPartyDataUpdateRequest
// 0x0028 (0x0028 - 0x0000)
struct FAccelByteModelsPartyDataUpdateRequest final
{
public:
	int64                                         UpdatedAt;                                         // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FJsonObjectWrapper                     Custom_Attribute;                                  // 0x0008(0x0020)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsPartyDataUpdateRequest) == 0x000008, "Wrong alignment on FAccelByteModelsPartyDataUpdateRequest");
static_assert(sizeof(FAccelByteModelsPartyDataUpdateRequest) == 0x000028, "Wrong size on FAccelByteModelsPartyDataUpdateRequest");
static_assert(offsetof(FAccelByteModelsPartyDataUpdateRequest, UpdatedAt) == 0x000000, "Member 'FAccelByteModelsPartyDataUpdateRequest::UpdatedAt' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsPartyDataUpdateRequest, Custom_Attribute) == 0x000008, "Member 'FAccelByteModelsPartyDataUpdateRequest::Custom_Attribute' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsBulkFriendsRequest
// 0x0010 (0x0010 - 0x0000)
struct FAccelByteModelsBulkFriendsRequest final
{
public:
	TArray<class FString>                         FriendIds;                                         // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsBulkFriendsRequest) == 0x000008, "Wrong alignment on FAccelByteModelsBulkFriendsRequest");
static_assert(sizeof(FAccelByteModelsBulkFriendsRequest) == 0x000010, "Wrong size on FAccelByteModelsBulkFriendsRequest");
static_assert(offsetof(FAccelByteModelsBulkFriendsRequest, FriendIds) == 0x000000, "Member 'FAccelByteModelsBulkFriendsRequest::FriendIds' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsDisconnectNotif
// 0x0010 (0x0010 - 0x0000)
struct FAccelByteModelsDisconnectNotif final
{
public:
	class FString                                 Message;                                           // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsDisconnectNotif) == 0x000008, "Wrong alignment on FAccelByteModelsDisconnectNotif");
static_assert(sizeof(FAccelByteModelsDisconnectNotif) == 0x000010, "Wrong size on FAccelByteModelsDisconnectNotif");
static_assert(offsetof(FAccelByteModelsDisconnectNotif, Message) == 0x000000, "Member 'FAccelByteModelsDisconnectNotif::Message' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsFreeFormNotificationRequest
// 0x0020 (0x0020 - 0x0000)
struct FAccelByteModelsFreeFormNotificationRequest final
{
public:
	class FString                                 Topic;                                             // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Message;                                           // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsFreeFormNotificationRequest) == 0x000008, "Wrong alignment on FAccelByteModelsFreeFormNotificationRequest");
static_assert(sizeof(FAccelByteModelsFreeFormNotificationRequest) == 0x000020, "Wrong size on FAccelByteModelsFreeFormNotificationRequest");
static_assert(offsetof(FAccelByteModelsFreeFormNotificationRequest, Topic) == 0x000000, "Member 'FAccelByteModelsFreeFormNotificationRequest::Topic' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsFreeFormNotificationRequest, Message) == 0x000010, "Member 'FAccelByteModelsFreeFormNotificationRequest::Message' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsChannelMessageRequest
// 0x0020 (0x0020 - 0x0000)
struct FAccelByteModelsChannelMessageRequest final
{
public:
	class FString                                 ChannelSlug;                                       // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Payload;                                           // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsChannelMessageRequest) == 0x000008, "Wrong alignment on FAccelByteModelsChannelMessageRequest");
static_assert(sizeof(FAccelByteModelsChannelMessageRequest) == 0x000020, "Wrong size on FAccelByteModelsChannelMessageRequest");
static_assert(offsetof(FAccelByteModelsChannelMessageRequest, ChannelSlug) == 0x000000, "Member 'FAccelByteModelsChannelMessageRequest::ChannelSlug' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsChannelMessageRequest, Payload) == 0x000010, "Member 'FAccelByteModelsChannelMessageRequest::Payload' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsPartySetLimitRequest
// 0x0004 (0x0004 - 0x0000)
struct FAccelByteModelsPartySetLimitRequest final
{
public:
	int32                                         Limit;                                             // 0x0000(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsPartySetLimitRequest) == 0x000004, "Wrong alignment on FAccelByteModelsPartySetLimitRequest");
static_assert(sizeof(FAccelByteModelsPartySetLimitRequest) == 0x000004, "Wrong size on FAccelByteModelsPartySetLimitRequest");
static_assert(offsetof(FAccelByteModelsPartySetLimitRequest, Limit) == 0x000000, "Member 'FAccelByteModelsPartySetLimitRequest::Limit' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsKickNotice
// 0x0040 (0x0040 - 0x0000)
struct FAccelByteModelsKickNotice final
{
public:
	class FString                                 LeaderId;                                          // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Leader;                                            // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 UserId;                                            // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 PartyId;                                           // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsKickNotice) == 0x000008, "Wrong alignment on FAccelByteModelsKickNotice");
static_assert(sizeof(FAccelByteModelsKickNotice) == 0x000040, "Wrong size on FAccelByteModelsKickNotice");
static_assert(offsetof(FAccelByteModelsKickNotice, LeaderId) == 0x000000, "Member 'FAccelByteModelsKickNotice::LeaderId' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsKickNotice, Leader) == 0x000010, "Member 'FAccelByteModelsKickNotice::Leader' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsKickNotice, UserId) == 0x000020, "Member 'FAccelByteModelsKickNotice::UserId' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsKickNotice, PartyId) == 0x000030, "Member 'FAccelByteModelsKickNotice::PartyId' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsLobbyType
// 0x0010 (0x0010 - 0x0000)
struct FAccelByteModelsLobbyType final
{
public:
	class FString                                 Type;                                              // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsLobbyType) == 0x000008, "Wrong alignment on FAccelByteModelsLobbyType");
static_assert(sizeof(FAccelByteModelsLobbyType) == 0x000010, "Wrong size on FAccelByteModelsLobbyType");
static_assert(offsetof(FAccelByteModelsLobbyType, Type) == 0x000000, "Member 'FAccelByteModelsLobbyType::Type' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsDequeueRequest
// 0x0010 (0x0010 - 0x0000)
struct FAccelByteModelsDequeueRequest final
{
public:
	class FString                                 Match_id;                                          // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsDequeueRequest) == 0x000008, "Wrong alignment on FAccelByteModelsDequeueRequest");
static_assert(sizeof(FAccelByteModelsDequeueRequest) == 0x000010, "Wrong size on FAccelByteModelsDequeueRequest");
static_assert(offsetof(FAccelByteModelsDequeueRequest, Match_id) == 0x000000, "Member 'FAccelByteModelsDequeueRequest::Match_id' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsAddUserIntoSessionRequest
// 0x0020 (0x0020 - 0x0000)
struct FAccelByteModelsAddUserIntoSessionRequest final
{
public:
	class FString                                 User_id;                                           // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Party_id;                                          // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsAddUserIntoSessionRequest) == 0x000008, "Wrong alignment on FAccelByteModelsAddUserIntoSessionRequest");
static_assert(sizeof(FAccelByteModelsAddUserIntoSessionRequest) == 0x000020, "Wrong size on FAccelByteModelsAddUserIntoSessionRequest");
static_assert(offsetof(FAccelByteModelsAddUserIntoSessionRequest, User_id) == 0x000000, "Member 'FAccelByteModelsAddUserIntoSessionRequest::User_id' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsAddUserIntoSessionRequest, Party_id) == 0x000010, "Member 'FAccelByteModelsAddUserIntoSessionRequest::Party_id' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.Oauth2TokenPermission
// 0x0018 (0x0018 - 0x0000)
struct FOauth2TokenPermission final
{
public:
	class FString                                 Resource;                                          // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Action;                                            // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FOauth2TokenPermission) == 0x000008, "Wrong alignment on FOauth2TokenPermission");
static_assert(sizeof(FOauth2TokenPermission) == 0x000018, "Wrong size on FOauth2TokenPermission");
static_assert(offsetof(FOauth2TokenPermission, Resource) == 0x000000, "Member 'FOauth2TokenPermission::Resource' has a wrong offset!");
static_assert(offsetof(FOauth2TokenPermission, Action) == 0x000010, "Member 'FOauth2TokenPermission::Action' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.Oauth2TokenBan
// 0x0018 (0x0018 - 0x0000)
struct FOauth2TokenBan final
{
public:
	class FString                                 Ban;                                               // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDateTime                              EndDate;                                           // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FOauth2TokenBan) == 0x000008, "Wrong alignment on FOauth2TokenBan");
static_assert(sizeof(FOauth2TokenBan) == 0x000018, "Wrong size on FOauth2TokenBan");
static_assert(offsetof(FOauth2TokenBan, Ban) == 0x000000, "Member 'FOauth2TokenBan::Ban' has a wrong offset!");
static_assert(offsetof(FOauth2TokenBan, EndDate) == 0x000010, "Member 'FOauth2TokenBan::EndDate' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.Oauth2Token
// 0x00B8 (0x00B8 - 0x0000)
struct FOauth2Token final
{
public:
	class FString                                 Access_token;                                      // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Refresh_token;                                     // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Token_type;                                        // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Expires_in;                                        // 0x0030(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Is_comply;                                         // 0x0034(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_35[0x3];                                       // 0x0035(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FOauth2TokenPermission>         Permissions;                                       // 0x0038(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class FString>                         Roles;                                             // 0x0048(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FOauth2TokenBan>                Bans;                                              // 0x0058(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	class FString                                 User_id;                                           // 0x0068(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Display_name;                                      // 0x0078(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Namespace;                                         // 0x0088(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Platform_id;                                       // 0x0098(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Platform_user_id;                                  // 0x00A8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FOauth2Token) == 0x000008, "Wrong alignment on FOauth2Token");
static_assert(sizeof(FOauth2Token) == 0x0000B8, "Wrong size on FOauth2Token");
static_assert(offsetof(FOauth2Token, Access_token) == 0x000000, "Member 'FOauth2Token::Access_token' has a wrong offset!");
static_assert(offsetof(FOauth2Token, Refresh_token) == 0x000010, "Member 'FOauth2Token::Refresh_token' has a wrong offset!");
static_assert(offsetof(FOauth2Token, Token_type) == 0x000020, "Member 'FOauth2Token::Token_type' has a wrong offset!");
static_assert(offsetof(FOauth2Token, Expires_in) == 0x000030, "Member 'FOauth2Token::Expires_in' has a wrong offset!");
static_assert(offsetof(FOauth2Token, Is_comply) == 0x000034, "Member 'FOauth2Token::Is_comply' has a wrong offset!");
static_assert(offsetof(FOauth2Token, Permissions) == 0x000038, "Member 'FOauth2Token::Permissions' has a wrong offset!");
static_assert(offsetof(FOauth2Token, Roles) == 0x000048, "Member 'FOauth2Token::Roles' has a wrong offset!");
static_assert(offsetof(FOauth2Token, Bans) == 0x000058, "Member 'FOauth2Token::Bans' has a wrong offset!");
static_assert(offsetof(FOauth2Token, User_id) == 0x000068, "Member 'FOauth2Token::User_id' has a wrong offset!");
static_assert(offsetof(FOauth2Token, Display_name) == 0x000078, "Member 'FOauth2Token::Display_name' has a wrong offset!");
static_assert(offsetof(FOauth2Token, Namespace) == 0x000088, "Member 'FOauth2Token::Namespace' has a wrong offset!");
static_assert(offsetof(FOauth2Token, Platform_id) == 0x000098, "Member 'FOauth2Token::Platform_id' has a wrong offset!");
static_assert(offsetof(FOauth2Token, Platform_user_id) == 0x0000A8, "Member 'FOauth2Token::Platform_user_id' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsQosServer
// 0x0048 (0x0048 - 0x0000)
struct FAccelByteModelsQosServer final
{
public:
	class FString                                 Ip;                                                // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Port;                                              // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Region;                                            // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Status;                                            // 0x0028(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Last_update;                                       // 0x0038(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsQosServer) == 0x000008, "Wrong alignment on FAccelByteModelsQosServer");
static_assert(sizeof(FAccelByteModelsQosServer) == 0x000048, "Wrong size on FAccelByteModelsQosServer");
static_assert(offsetof(FAccelByteModelsQosServer, Ip) == 0x000000, "Member 'FAccelByteModelsQosServer::Ip' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsQosServer, Port) == 0x000010, "Member 'FAccelByteModelsQosServer::Port' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsQosServer, Region) == 0x000018, "Member 'FAccelByteModelsQosServer::Region' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsQosServer, Status) == 0x000028, "Member 'FAccelByteModelsQosServer::Status' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsQosServer, Last_update) == 0x000038, "Member 'FAccelByteModelsQosServer::Last_update' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsQosServerList
// 0x0010 (0x0010 - 0x0000)
struct FAccelByteModelsQosServerList final
{
public:
	TArray<struct FAccelByteModelsQosServer>      Servers;                                           // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsQosServerList) == 0x000008, "Wrong alignment on FAccelByteModelsQosServerList");
static_assert(sizeof(FAccelByteModelsQosServerList) == 0x000010, "Wrong size on FAccelByteModelsQosServerList");
static_assert(offsetof(FAccelByteModelsQosServerList, Servers) == 0x000000, "Member 'FAccelByteModelsQosServerList::Servers' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsReasonGroupsItem
// 0x0020 (0x0020 - 0x0000)
struct FAccelByteModelsReasonGroupsItem final
{
public:
	class FString                                 ID;                                                // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Title;                                             // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsReasonGroupsItem) == 0x000008, "Wrong alignment on FAccelByteModelsReasonGroupsItem");
static_assert(sizeof(FAccelByteModelsReasonGroupsItem) == 0x000020, "Wrong size on FAccelByteModelsReasonGroupsItem");
static_assert(offsetof(FAccelByteModelsReasonGroupsItem, ID) == 0x000000, "Member 'FAccelByteModelsReasonGroupsItem::ID' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsReasonGroupsItem, Title) == 0x000010, "Member 'FAccelByteModelsReasonGroupsItem::Title' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsReasonGroupsResponse
// 0x0050 (0x0050 - 0x0000)
struct FAccelByteModelsReasonGroupsResponse final
{
public:
	TArray<struct FAccelByteModelsReasonGroupsItem> Data;                                              // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FAccelByteModelsPaging                 Paging;                                            // 0x0010(0x0040)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsReasonGroupsResponse) == 0x000008, "Wrong alignment on FAccelByteModelsReasonGroupsResponse");
static_assert(sizeof(FAccelByteModelsReasonGroupsResponse) == 0x000050, "Wrong size on FAccelByteModelsReasonGroupsResponse");
static_assert(offsetof(FAccelByteModelsReasonGroupsResponse, Data) == 0x000000, "Member 'FAccelByteModelsReasonGroupsResponse::Data' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsReasonGroupsResponse, Paging) == 0x000010, "Member 'FAccelByteModelsReasonGroupsResponse::Paging' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsReasonItem
// 0x0020 (0x0020 - 0x0000)
struct FAccelByteModelsReasonItem final
{
public:
	class FString                                 Title;                                             // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Description;                                       // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsReasonItem) == 0x000008, "Wrong alignment on FAccelByteModelsReasonItem");
static_assert(sizeof(FAccelByteModelsReasonItem) == 0x000020, "Wrong size on FAccelByteModelsReasonItem");
static_assert(offsetof(FAccelByteModelsReasonItem, Title) == 0x000000, "Member 'FAccelByteModelsReasonItem::Title' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsReasonItem, Description) == 0x000010, "Member 'FAccelByteModelsReasonItem::Description' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsReasonsResponse
// 0x0050 (0x0050 - 0x0000)
struct FAccelByteModelsReasonsResponse final
{
public:
	TArray<struct FAccelByteModelsReasonItem>     Data;                                              // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FAccelByteModelsPaging                 Paging;                                            // 0x0010(0x0040)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsReasonsResponse) == 0x000008, "Wrong alignment on FAccelByteModelsReasonsResponse");
static_assert(sizeof(FAccelByteModelsReasonsResponse) == 0x000050, "Wrong size on FAccelByteModelsReasonsResponse");
static_assert(offsetof(FAccelByteModelsReasonsResponse, Data) == 0x000000, "Member 'FAccelByteModelsReasonsResponse::Data' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsReasonsResponse, Paging) == 0x000010, "Member 'FAccelByteModelsReasonsResponse::Paging' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsReportingSubmitResponse
// 0x0078 (0x0078 - 0x0000)
struct FAccelByteModelsReportingSubmitResponse final
{
public:
	EAccelByteReportingCategory                   Category;                                          // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Namespace;                                         // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ObjectID;                                          // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ObjectType;                                        // 0x0028(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Status;                                            // 0x0038(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 TicketID;                                          // 0x0048(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 UpdateAt;                                          // 0x0058(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 UserId;                                            // 0x0068(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsReportingSubmitResponse) == 0x000008, "Wrong alignment on FAccelByteModelsReportingSubmitResponse");
static_assert(sizeof(FAccelByteModelsReportingSubmitResponse) == 0x000078, "Wrong size on FAccelByteModelsReportingSubmitResponse");
static_assert(offsetof(FAccelByteModelsReportingSubmitResponse, Category) == 0x000000, "Member 'FAccelByteModelsReportingSubmitResponse::Category' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsReportingSubmitResponse, Namespace) == 0x000008, "Member 'FAccelByteModelsReportingSubmitResponse::Namespace' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsReportingSubmitResponse, ObjectID) == 0x000018, "Member 'FAccelByteModelsReportingSubmitResponse::ObjectID' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsReportingSubmitResponse, ObjectType) == 0x000028, "Member 'FAccelByteModelsReportingSubmitResponse::ObjectType' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsReportingSubmitResponse, Status) == 0x000038, "Member 'FAccelByteModelsReportingSubmitResponse::Status' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsReportingSubmitResponse, TicketID) == 0x000048, "Member 'FAccelByteModelsReportingSubmitResponse::TicketID' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsReportingSubmitResponse, UpdateAt) == 0x000058, "Member 'FAccelByteModelsReportingSubmitResponse::UpdateAt' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsReportingSubmitResponse, UserId) == 0x000068, "Member 'FAccelByteModelsReportingSubmitResponse::UserId' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsReportingAdditionalInfo
// 0x0010 (0x0010 - 0x0000)
struct FAccelByteModelsReportingAdditionalInfo final
{
public:
	TArray<class FString>                         Screenshots;                                       // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsReportingAdditionalInfo) == 0x000008, "Wrong alignment on FAccelByteModelsReportingAdditionalInfo");
static_assert(sizeof(FAccelByteModelsReportingAdditionalInfo) == 0x000010, "Wrong size on FAccelByteModelsReportingAdditionalInfo");
static_assert(offsetof(FAccelByteModelsReportingAdditionalInfo, Screenshots) == 0x000000, "Member 'FAccelByteModelsReportingAdditionalInfo::Screenshots' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsReportingSubmitData
// 0x0068 (0x0068 - 0x0000)
struct FAccelByteModelsReportingSubmitData final
{
public:
	struct FAccelByteModelsReportingAdditionalInfo AdditionalInfo;                                    // 0x0000(0x0010)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	EAccelByteReportingCategory                   Category;                                          // 0x0010(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Comment;                                           // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ObjectID;                                          // 0x0028(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ObjectType;                                        // 0x0038(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Reason;                                            // 0x0048(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 UserId;                                            // 0x0058(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsReportingSubmitData) == 0x000008, "Wrong alignment on FAccelByteModelsReportingSubmitData");
static_assert(sizeof(FAccelByteModelsReportingSubmitData) == 0x000068, "Wrong size on FAccelByteModelsReportingSubmitData");
static_assert(offsetof(FAccelByteModelsReportingSubmitData, AdditionalInfo) == 0x000000, "Member 'FAccelByteModelsReportingSubmitData::AdditionalInfo' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsReportingSubmitData, Category) == 0x000010, "Member 'FAccelByteModelsReportingSubmitData::Category' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsReportingSubmitData, Comment) == 0x000018, "Member 'FAccelByteModelsReportingSubmitData::Comment' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsReportingSubmitData, ObjectID) == 0x000028, "Member 'FAccelByteModelsReportingSubmitData::ObjectID' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsReportingSubmitData, ObjectType) == 0x000038, "Member 'FAccelByteModelsReportingSubmitData::ObjectType' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsReportingSubmitData, Reason) == 0x000048, "Member 'FAccelByteModelsReportingSubmitData::Reason' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsReportingSubmitData, UserId) == 0x000058, "Member 'FAccelByteModelsReportingSubmitData::UserId' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsQueryUserSeasonExp
// 0x0010 (0x0010 - 0x0000)
struct FAccelByteModelsQueryUserSeasonExp final
{
public:
	TArray<class FString>                         Tags;                                              // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsQueryUserSeasonExp) == 0x000008, "Wrong alignment on FAccelByteModelsQueryUserSeasonExp");
static_assert(sizeof(FAccelByteModelsQueryUserSeasonExp) == 0x000010, "Wrong size on FAccelByteModelsQueryUserSeasonExp");
static_assert(offsetof(FAccelByteModelsQueryUserSeasonExp, Tags) == 0x000000, "Member 'FAccelByteModelsQueryUserSeasonExp::Tags' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsUserSeasonPaging
// 0x0020 (0x0020 - 0x0000)
struct FAccelByteModelsUserSeasonPaging final
{
public:
	class FString                                 Previous;                                          // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Next;                                              // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsUserSeasonPaging) == 0x000008, "Wrong alignment on FAccelByteModelsUserSeasonPaging");
static_assert(sizeof(FAccelByteModelsUserSeasonPaging) == 0x000020, "Wrong size on FAccelByteModelsUserSeasonPaging");
static_assert(offsetof(FAccelByteModelsUserSeasonPaging, Previous) == 0x000000, "Member 'FAccelByteModelsUserSeasonPaging::Previous' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsUserSeasonPaging, Next) == 0x000010, "Member 'FAccelByteModelsUserSeasonPaging::Next' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsUserSeasonExpHistory
// 0x0038 (0x0038 - 0x0000)
struct FAccelByteModelsUserSeasonExpHistory final
{
public:
	TArray<struct FAccelByteModelsUserSeasonData> Data;                                              // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FAccelByteModelsUserSeasonPaging       Paging;                                            // 0x0010(0x0020)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	int32                                         Total;                                             // 0x0030(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAccelByteModelsUserSeasonExpHistory) == 0x000008, "Wrong alignment on FAccelByteModelsUserSeasonExpHistory");
static_assert(sizeof(FAccelByteModelsUserSeasonExpHistory) == 0x000038, "Wrong size on FAccelByteModelsUserSeasonExpHistory");
static_assert(offsetof(FAccelByteModelsUserSeasonExpHistory, Data) == 0x000000, "Member 'FAccelByteModelsUserSeasonExpHistory::Data' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsUserSeasonExpHistory, Paging) == 0x000010, "Member 'FAccelByteModelsUserSeasonExpHistory::Paging' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsUserSeasonExpHistory, Total) == 0x000030, "Member 'FAccelByteModelsUserSeasonExpHistory::Total' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsSeasonClaimRewardResponseJsonWrapper
// 0x00A0 (0x00A0 - 0x0000)
struct FAccelByteModelsSeasonClaimRewardResponseJsonWrapper final
{
public:
	TMap<int32, struct FJsonObjectWrapper>        ToClaimRewards;                                    // 0x0000(0x0050)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	TMap<int32, struct FJsonObjectWrapper>        ClaimingRewards;                                   // 0x0050(0x0050)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsSeasonClaimRewardResponseJsonWrapper) == 0x000008, "Wrong alignment on FAccelByteModelsSeasonClaimRewardResponseJsonWrapper");
static_assert(sizeof(FAccelByteModelsSeasonClaimRewardResponseJsonWrapper) == 0x0000A0, "Wrong size on FAccelByteModelsSeasonClaimRewardResponseJsonWrapper");
static_assert(offsetof(FAccelByteModelsSeasonClaimRewardResponseJsonWrapper, ToClaimRewards) == 0x000000, "Member 'FAccelByteModelsSeasonClaimRewardResponseJsonWrapper::ToClaimRewards' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsSeasonClaimRewardResponseJsonWrapper, ClaimingRewards) == 0x000050, "Member 'FAccelByteModelsSeasonClaimRewardResponseJsonWrapper::ClaimingRewards' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsSeasonClaimRewardRequest
// 0x0028 (0x0028 - 0x0000)
struct FAccelByteModelsSeasonClaimRewardRequest final
{
public:
	class FString                                 PassCode;                                          // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TierIndex;                                         // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 RewardCode;                                        // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsSeasonClaimRewardRequest) == 0x000008, "Wrong alignment on FAccelByteModelsSeasonClaimRewardRequest");
static_assert(sizeof(FAccelByteModelsSeasonClaimRewardRequest) == 0x000028, "Wrong size on FAccelByteModelsSeasonClaimRewardRequest");
static_assert(offsetof(FAccelByteModelsSeasonClaimRewardRequest, PassCode) == 0x000000, "Member 'FAccelByteModelsSeasonClaimRewardRequest::PassCode' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsSeasonClaimRewardRequest, TierIndex) == 0x000010, "Member 'FAccelByteModelsSeasonClaimRewardRequest::TierIndex' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsSeasonClaimRewardRequest, RewardCode) == 0x000018, "Member 'FAccelByteModelsSeasonClaimRewardRequest::RewardCode' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsUserSeasonInfoClaimRewardAsJsonObject
// 0x0170 (0x0170 - 0x0000)
struct FAccelByteModelsUserSeasonInfoClaimRewardAsJsonObject final
{
public:
	class FString                                 ID;                                                // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Namespace;                                         // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 UserId;                                            // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 SeasonId;                                          // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDateTime                              EnrolledAt;                                        // 0x0040(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FString>                         EnrolledPasses;                                    // 0x0048(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         CurrentTierIndex;                                  // 0x0058(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         LastTierIndex;                                     // 0x005C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RequiredExp;                                       // 0x0060(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CurrentExp;                                        // 0x0064(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Cleared;                                           // 0x0068(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_69[0x7];                                       // 0x0069(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FAccelByteModelsSeason                 Season;                                            // 0x0070(0x0050)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	TMap<int32, struct FJsonObjectWrapper>        ToClaimRewards;                                    // 0x00C0(0x0050)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	TMap<int32, struct FJsonObjectWrapper>        ClaimingRewards;                                   // 0x0110(0x0050)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FDateTime                              CreatedAt;                                         // 0x0160(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDateTime                              UpdatedAt;                                         // 0x0168(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsUserSeasonInfoClaimRewardAsJsonObject) == 0x000008, "Wrong alignment on FAccelByteModelsUserSeasonInfoClaimRewardAsJsonObject");
static_assert(sizeof(FAccelByteModelsUserSeasonInfoClaimRewardAsJsonObject) == 0x000170, "Wrong size on FAccelByteModelsUserSeasonInfoClaimRewardAsJsonObject");
static_assert(offsetof(FAccelByteModelsUserSeasonInfoClaimRewardAsJsonObject, ID) == 0x000000, "Member 'FAccelByteModelsUserSeasonInfoClaimRewardAsJsonObject::ID' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsUserSeasonInfoClaimRewardAsJsonObject, Namespace) == 0x000010, "Member 'FAccelByteModelsUserSeasonInfoClaimRewardAsJsonObject::Namespace' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsUserSeasonInfoClaimRewardAsJsonObject, UserId) == 0x000020, "Member 'FAccelByteModelsUserSeasonInfoClaimRewardAsJsonObject::UserId' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsUserSeasonInfoClaimRewardAsJsonObject, SeasonId) == 0x000030, "Member 'FAccelByteModelsUserSeasonInfoClaimRewardAsJsonObject::SeasonId' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsUserSeasonInfoClaimRewardAsJsonObject, EnrolledAt) == 0x000040, "Member 'FAccelByteModelsUserSeasonInfoClaimRewardAsJsonObject::EnrolledAt' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsUserSeasonInfoClaimRewardAsJsonObject, EnrolledPasses) == 0x000048, "Member 'FAccelByteModelsUserSeasonInfoClaimRewardAsJsonObject::EnrolledPasses' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsUserSeasonInfoClaimRewardAsJsonObject, CurrentTierIndex) == 0x000058, "Member 'FAccelByteModelsUserSeasonInfoClaimRewardAsJsonObject::CurrentTierIndex' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsUserSeasonInfoClaimRewardAsJsonObject, LastTierIndex) == 0x00005C, "Member 'FAccelByteModelsUserSeasonInfoClaimRewardAsJsonObject::LastTierIndex' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsUserSeasonInfoClaimRewardAsJsonObject, RequiredExp) == 0x000060, "Member 'FAccelByteModelsUserSeasonInfoClaimRewardAsJsonObject::RequiredExp' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsUserSeasonInfoClaimRewardAsJsonObject, CurrentExp) == 0x000064, "Member 'FAccelByteModelsUserSeasonInfoClaimRewardAsJsonObject::CurrentExp' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsUserSeasonInfoClaimRewardAsJsonObject, Cleared) == 0x000068, "Member 'FAccelByteModelsUserSeasonInfoClaimRewardAsJsonObject::Cleared' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsUserSeasonInfoClaimRewardAsJsonObject, Season) == 0x000070, "Member 'FAccelByteModelsUserSeasonInfoClaimRewardAsJsonObject::Season' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsUserSeasonInfoClaimRewardAsJsonObject, ToClaimRewards) == 0x0000C0, "Member 'FAccelByteModelsUserSeasonInfoClaimRewardAsJsonObject::ToClaimRewards' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsUserSeasonInfoClaimRewardAsJsonObject, ClaimingRewards) == 0x000110, "Member 'FAccelByteModelsUserSeasonInfoClaimRewardAsJsonObject::ClaimingRewards' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsUserSeasonInfoClaimRewardAsJsonObject, CreatedAt) == 0x000160, "Member 'FAccelByteModelsUserSeasonInfoClaimRewardAsJsonObject::CreatedAt' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsUserSeasonInfoClaimRewardAsJsonObject, UpdatedAt) == 0x000168, "Member 'FAccelByteModelsUserSeasonInfoClaimRewardAsJsonObject::UpdatedAt' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsUserSeasonInfoWithoutReward
// 0x00E0 (0x00E0 - 0x0000)
struct FAccelByteModelsUserSeasonInfoWithoutReward final
{
public:
	class FString                                 ID;                                                // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Namespace;                                         // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 UserId;                                            // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 SeasonId;                                          // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDateTime                              EnrolledAt;                                        // 0x0040(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FString>                         EnrolledPasses;                                    // 0x0048(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         CurrentTierIndex;                                  // 0x0058(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         LastTierIndex;                                     // 0x005C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RequiredExp;                                       // 0x0060(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CurrentExp;                                        // 0x0064(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Cleared;                                           // 0x0068(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_69[0x7];                                       // 0x0069(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FAccelByteModelsSeason                 Season;                                            // 0x0070(0x0050)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FDateTime                              CreatedAt;                                         // 0x00C0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDateTime                              UpdatedAt;                                         // 0x00C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TotalPaidForExp;                                   // 0x00D0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TotalSweatExp;                                     // 0x00D4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TotalExp;                                          // 0x00D8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_DC[0x4];                                       // 0x00DC(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAccelByteModelsUserSeasonInfoWithoutReward) == 0x000008, "Wrong alignment on FAccelByteModelsUserSeasonInfoWithoutReward");
static_assert(sizeof(FAccelByteModelsUserSeasonInfoWithoutReward) == 0x0000E0, "Wrong size on FAccelByteModelsUserSeasonInfoWithoutReward");
static_assert(offsetof(FAccelByteModelsUserSeasonInfoWithoutReward, ID) == 0x000000, "Member 'FAccelByteModelsUserSeasonInfoWithoutReward::ID' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsUserSeasonInfoWithoutReward, Namespace) == 0x000010, "Member 'FAccelByteModelsUserSeasonInfoWithoutReward::Namespace' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsUserSeasonInfoWithoutReward, UserId) == 0x000020, "Member 'FAccelByteModelsUserSeasonInfoWithoutReward::UserId' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsUserSeasonInfoWithoutReward, SeasonId) == 0x000030, "Member 'FAccelByteModelsUserSeasonInfoWithoutReward::SeasonId' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsUserSeasonInfoWithoutReward, EnrolledAt) == 0x000040, "Member 'FAccelByteModelsUserSeasonInfoWithoutReward::EnrolledAt' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsUserSeasonInfoWithoutReward, EnrolledPasses) == 0x000048, "Member 'FAccelByteModelsUserSeasonInfoWithoutReward::EnrolledPasses' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsUserSeasonInfoWithoutReward, CurrentTierIndex) == 0x000058, "Member 'FAccelByteModelsUserSeasonInfoWithoutReward::CurrentTierIndex' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsUserSeasonInfoWithoutReward, LastTierIndex) == 0x00005C, "Member 'FAccelByteModelsUserSeasonInfoWithoutReward::LastTierIndex' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsUserSeasonInfoWithoutReward, RequiredExp) == 0x000060, "Member 'FAccelByteModelsUserSeasonInfoWithoutReward::RequiredExp' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsUserSeasonInfoWithoutReward, CurrentExp) == 0x000064, "Member 'FAccelByteModelsUserSeasonInfoWithoutReward::CurrentExp' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsUserSeasonInfoWithoutReward, Cleared) == 0x000068, "Member 'FAccelByteModelsUserSeasonInfoWithoutReward::Cleared' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsUserSeasonInfoWithoutReward, Season) == 0x000070, "Member 'FAccelByteModelsUserSeasonInfoWithoutReward::Season' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsUserSeasonInfoWithoutReward, CreatedAt) == 0x0000C0, "Member 'FAccelByteModelsUserSeasonInfoWithoutReward::CreatedAt' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsUserSeasonInfoWithoutReward, UpdatedAt) == 0x0000C8, "Member 'FAccelByteModelsUserSeasonInfoWithoutReward::UpdatedAt' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsUserSeasonInfoWithoutReward, TotalPaidForExp) == 0x0000D0, "Member 'FAccelByteModelsUserSeasonInfoWithoutReward::TotalPaidForExp' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsUserSeasonInfoWithoutReward, TotalSweatExp) == 0x0000D4, "Member 'FAccelByteModelsUserSeasonInfoWithoutReward::TotalSweatExp' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsUserSeasonInfoWithoutReward, TotalExp) == 0x0000D8, "Member 'FAccelByteModelsUserSeasonInfoWithoutReward::TotalExp' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsSeasonPassTierJsonObject
// 0x0038 (0x0038 - 0x0000)
struct FAccelByteModelsSeasonPassTierJsonObject final
{
public:
	class FString                                 ID;                                                // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RequiredExp;                                       // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FJsonObjectWrapper                     Rewards;                                           // 0x0018(0x0020)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsSeasonPassTierJsonObject) == 0x000008, "Wrong alignment on FAccelByteModelsSeasonPassTierJsonObject");
static_assert(sizeof(FAccelByteModelsSeasonPassTierJsonObject) == 0x000038, "Wrong size on FAccelByteModelsSeasonPassTierJsonObject");
static_assert(offsetof(FAccelByteModelsSeasonPassTierJsonObject, ID) == 0x000000, "Member 'FAccelByteModelsSeasonPassTierJsonObject::ID' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsSeasonPassTierJsonObject, RequiredExp) == 0x000010, "Member 'FAccelByteModelsSeasonPassTierJsonObject::RequiredExp' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsSeasonPassTierJsonObject, Rewards) == 0x000018, "Member 'FAccelByteModelsSeasonPassTierJsonObject::Rewards' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsSeasonTierRewardAsJsonObject
// 0x0138 (0x0138 - 0x0000)
struct FAccelByteModelsSeasonTierRewardAsJsonObject final
{
public:
	class FString                                 Title;                                             // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Description;                                       // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ID;                                                // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Namespace;                                         // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Name;                                              // 0x0040(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDateTime                              Start;                                             // 0x0050(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDateTime                              End;                                               // 0x0058(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 TierItemId;                                        // 0x0060(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          AutoClaim;                                         // 0x0070(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_71[0x7];                                       // 0x0071(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FAccelByteModelsItemImage>      Images;                                            // 0x0078(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class FString>                         PassCodes;                                         // 0x0088(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	EAccelByteSeasonPassStatus                    Status;                                            // 0x0098(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_99[0x7];                                       // 0x0099(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FDateTime                              PublishedAt;                                       // 0x00A0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Language;                                          // 0x00A8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDateTime                              CreatedAt;                                         // 0x00B8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDateTime                              UpdatedAt;                                         // 0x00C0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FAccelByteModelsSeasonPass>     Passes;                                            // 0x00C8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TMap<class FString, struct FAccelByteModelsSeasonPassReward> Rewards;                                           // 0x00D8(0x0050)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	TArray<struct FAccelByteModelsSeasonPassTierJsonObject> Tiers;                                             // 0x0128(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsSeasonTierRewardAsJsonObject) == 0x000008, "Wrong alignment on FAccelByteModelsSeasonTierRewardAsJsonObject");
static_assert(sizeof(FAccelByteModelsSeasonTierRewardAsJsonObject) == 0x000138, "Wrong size on FAccelByteModelsSeasonTierRewardAsJsonObject");
static_assert(offsetof(FAccelByteModelsSeasonTierRewardAsJsonObject, Title) == 0x000000, "Member 'FAccelByteModelsSeasonTierRewardAsJsonObject::Title' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsSeasonTierRewardAsJsonObject, Description) == 0x000010, "Member 'FAccelByteModelsSeasonTierRewardAsJsonObject::Description' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsSeasonTierRewardAsJsonObject, ID) == 0x000020, "Member 'FAccelByteModelsSeasonTierRewardAsJsonObject::ID' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsSeasonTierRewardAsJsonObject, Namespace) == 0x000030, "Member 'FAccelByteModelsSeasonTierRewardAsJsonObject::Namespace' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsSeasonTierRewardAsJsonObject, Name) == 0x000040, "Member 'FAccelByteModelsSeasonTierRewardAsJsonObject::Name' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsSeasonTierRewardAsJsonObject, Start) == 0x000050, "Member 'FAccelByteModelsSeasonTierRewardAsJsonObject::Start' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsSeasonTierRewardAsJsonObject, End) == 0x000058, "Member 'FAccelByteModelsSeasonTierRewardAsJsonObject::End' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsSeasonTierRewardAsJsonObject, TierItemId) == 0x000060, "Member 'FAccelByteModelsSeasonTierRewardAsJsonObject::TierItemId' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsSeasonTierRewardAsJsonObject, AutoClaim) == 0x000070, "Member 'FAccelByteModelsSeasonTierRewardAsJsonObject::AutoClaim' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsSeasonTierRewardAsJsonObject, Images) == 0x000078, "Member 'FAccelByteModelsSeasonTierRewardAsJsonObject::Images' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsSeasonTierRewardAsJsonObject, PassCodes) == 0x000088, "Member 'FAccelByteModelsSeasonTierRewardAsJsonObject::PassCodes' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsSeasonTierRewardAsJsonObject, Status) == 0x000098, "Member 'FAccelByteModelsSeasonTierRewardAsJsonObject::Status' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsSeasonTierRewardAsJsonObject, PublishedAt) == 0x0000A0, "Member 'FAccelByteModelsSeasonTierRewardAsJsonObject::PublishedAt' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsSeasonTierRewardAsJsonObject, Language) == 0x0000A8, "Member 'FAccelByteModelsSeasonTierRewardAsJsonObject::Language' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsSeasonTierRewardAsJsonObject, CreatedAt) == 0x0000B8, "Member 'FAccelByteModelsSeasonTierRewardAsJsonObject::CreatedAt' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsSeasonTierRewardAsJsonObject, UpdatedAt) == 0x0000C0, "Member 'FAccelByteModelsSeasonTierRewardAsJsonObject::UpdatedAt' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsSeasonTierRewardAsJsonObject, Passes) == 0x0000C8, "Member 'FAccelByteModelsSeasonTierRewardAsJsonObject::Passes' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsSeasonTierRewardAsJsonObject, Rewards) == 0x0000D8, "Member 'FAccelByteModelsSeasonTierRewardAsJsonObject::Rewards' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsSeasonTierRewardAsJsonObject, Tiers) == 0x000128, "Member 'FAccelByteModelsSeasonTierRewardAsJsonObject::Tiers' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsSessionBrowserJoinSessionRequest
// 0x0010 (0x0010 - 0x0000)
struct FAccelByteModelsSessionBrowserJoinSessionRequest final
{
public:
	class FString                                 Password;                                          // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsSessionBrowserJoinSessionRequest) == 0x000008, "Wrong alignment on FAccelByteModelsSessionBrowserJoinSessionRequest");
static_assert(sizeof(FAccelByteModelsSessionBrowserJoinSessionRequest) == 0x000010, "Wrong size on FAccelByteModelsSessionBrowserJoinSessionRequest");
static_assert(offsetof(FAccelByteModelsSessionBrowserJoinSessionRequest, Password) == 0x000000, "Member 'FAccelByteModelsSessionBrowserJoinSessionRequest::Password' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsSessionBrowserAddPlayerRequest
// 0x0018 (0x0018 - 0x0000)
struct FAccelByteModelsSessionBrowserAddPlayerRequest final
{
public:
	class FString                                 User_id;                                           // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          As_spectator;                                      // 0x0010(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAccelByteModelsSessionBrowserAddPlayerRequest) == 0x000008, "Wrong alignment on FAccelByteModelsSessionBrowserAddPlayerRequest");
static_assert(sizeof(FAccelByteModelsSessionBrowserAddPlayerRequest) == 0x000018, "Wrong size on FAccelByteModelsSessionBrowserAddPlayerRequest");
static_assert(offsetof(FAccelByteModelsSessionBrowserAddPlayerRequest, User_id) == 0x000000, "Member 'FAccelByteModelsSessionBrowserAddPlayerRequest::User_id' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsSessionBrowserAddPlayerRequest, As_spectator) == 0x000010, "Member 'FAccelByteModelsSessionBrowserAddPlayerRequest::As_spectator' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsSessionBrowserCreateRequest
// 0x00A8 (0x00A8 - 0x0000)
struct FAccelByteModelsSessionBrowserCreateRequest final
{
public:
	class FString                                 Namespace;                                         // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Session_type;                                      // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Username;                                          // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Game_version;                                      // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FAccelByteModelsSessionBrowserGameSetting Game_session_setting;                              // 0x0040(0x0068)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsSessionBrowserCreateRequest) == 0x000008, "Wrong alignment on FAccelByteModelsSessionBrowserCreateRequest");
static_assert(sizeof(FAccelByteModelsSessionBrowserCreateRequest) == 0x0000A8, "Wrong size on FAccelByteModelsSessionBrowserCreateRequest");
static_assert(offsetof(FAccelByteModelsSessionBrowserCreateRequest, Namespace) == 0x000000, "Member 'FAccelByteModelsSessionBrowserCreateRequest::Namespace' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsSessionBrowserCreateRequest, Session_type) == 0x000010, "Member 'FAccelByteModelsSessionBrowserCreateRequest::Session_type' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsSessionBrowserCreateRequest, Username) == 0x000020, "Member 'FAccelByteModelsSessionBrowserCreateRequest::Username' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsSessionBrowserCreateRequest, Game_version) == 0x000030, "Member 'FAccelByteModelsSessionBrowserCreateRequest::Game_version' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsSessionBrowserCreateRequest, Game_session_setting) == 0x000040, "Member 'FAccelByteModelsSessionBrowserCreateRequest::Game_session_setting' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsBulkUserStatItemInc
// 0x0028 (0x0028 - 0x0000)
struct FAccelByteModelsBulkUserStatItemInc final
{
public:
	float                                         Inc;                                               // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 UserId;                                            // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 StatCode;                                          // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsBulkUserStatItemInc) == 0x000008, "Wrong alignment on FAccelByteModelsBulkUserStatItemInc");
static_assert(sizeof(FAccelByteModelsBulkUserStatItemInc) == 0x000028, "Wrong size on FAccelByteModelsBulkUserStatItemInc");
static_assert(offsetof(FAccelByteModelsBulkUserStatItemInc, Inc) == 0x000000, "Member 'FAccelByteModelsBulkUserStatItemInc::Inc' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsBulkUserStatItemInc, UserId) == 0x000008, "Member 'FAccelByteModelsBulkUserStatItemInc::UserId' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsBulkUserStatItemInc, StatCode) == 0x000018, "Member 'FAccelByteModelsBulkUserStatItemInc::StatCode' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsStatItemIncResult
// 0x0004 (0x0004 - 0x0000)
struct FAccelByteModelsStatItemIncResult final
{
public:
	float                                         CurrentValue;                                      // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsStatItemIncResult) == 0x000004, "Wrong alignment on FAccelByteModelsStatItemIncResult");
static_assert(sizeof(FAccelByteModelsStatItemIncResult) == 0x000004, "Wrong size on FAccelByteModelsStatItemIncResult");
static_assert(offsetof(FAccelByteModelsStatItemIncResult, CurrentValue) == 0x000000, "Member 'FAccelByteModelsStatItemIncResult::CurrentValue' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsTurnServerList
// 0x0010 (0x0010 - 0x0000)
struct FAccelByteModelsTurnServerList final
{
public:
	TArray<struct FAccelByteModelsTurnServer>     Servers;                                           // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsTurnServerList) == 0x000008, "Wrong alignment on FAccelByteModelsTurnServerList");
static_assert(sizeof(FAccelByteModelsTurnServerList) == 0x000010, "Wrong size on FAccelByteModelsTurnServerList");
static_assert(offsetof(FAccelByteModelsTurnServerList, Servers) == 0x000000, "Member 'FAccelByteModelsTurnServerList::Servers' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.BannedBy
// 0x0020 (0x0020 - 0x0000)
struct FBannedBy final
{
public:
	class FString                                 DisplayName;                                       // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 UserId;                                            // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBannedBy) == 0x000008, "Wrong alignment on FBannedBy");
static_assert(sizeof(FBannedBy) == 0x000020, "Wrong size on FBannedBy");
static_assert(offsetof(FBannedBy, DisplayName) == 0x000000, "Member 'FBannedBy::DisplayName' has a wrong offset!");
static_assert(offsetof(FBannedBy, UserId) == 0x000010, "Member 'FBannedBy::UserId' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.BanUserResponse
// 0x00B0 (0x00B0 - 0x0000)
struct FBanUserResponse final
{
public:
	class FString                                 Ban;                                               // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 BanId;                                             // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FBannedBy                              BannedBy;                                          // 0x0020(0x0020)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	class FString                                 Comment;                                           // 0x0040(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 CreatedAt;                                         // 0x0050(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 DisableDate;                                       // 0x0060(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Enabled;                                           // 0x0070(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_71[0x7];                                       // 0x0071(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 EndDate;                                           // 0x0078(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Namespace;                                         // 0x0088(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EBanReason                                    Reason;                                            // 0x0098(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_99[0x7];                                       // 0x0099(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 UserId;                                            // 0x00A0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBanUserResponse) == 0x000008, "Wrong alignment on FBanUserResponse");
static_assert(sizeof(FBanUserResponse) == 0x0000B0, "Wrong size on FBanUserResponse");
static_assert(offsetof(FBanUserResponse, Ban) == 0x000000, "Member 'FBanUserResponse::Ban' has a wrong offset!");
static_assert(offsetof(FBanUserResponse, BanId) == 0x000010, "Member 'FBanUserResponse::BanId' has a wrong offset!");
static_assert(offsetof(FBanUserResponse, BannedBy) == 0x000020, "Member 'FBanUserResponse::BannedBy' has a wrong offset!");
static_assert(offsetof(FBanUserResponse, Comment) == 0x000040, "Member 'FBanUserResponse::Comment' has a wrong offset!");
static_assert(offsetof(FBanUserResponse, CreatedAt) == 0x000050, "Member 'FBanUserResponse::CreatedAt' has a wrong offset!");
static_assert(offsetof(FBanUserResponse, DisableDate) == 0x000060, "Member 'FBanUserResponse::DisableDate' has a wrong offset!");
static_assert(offsetof(FBanUserResponse, Enabled) == 0x000070, "Member 'FBanUserResponse::Enabled' has a wrong offset!");
static_assert(offsetof(FBanUserResponse, EndDate) == 0x000078, "Member 'FBanUserResponse::EndDate' has a wrong offset!");
static_assert(offsetof(FBanUserResponse, Namespace) == 0x000088, "Member 'FBanUserResponse::Namespace' has a wrong offset!");
static_assert(offsetof(FBanUserResponse, Reason) == 0x000098, "Member 'FBanUserResponse::Reason' has a wrong offset!");
static_assert(offsetof(FBanUserResponse, UserId) == 0x0000A0, "Member 'FBanUserResponse::UserId' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.User2FaSecretKey
// 0x0020 (0x0020 - 0x0000)
struct FUser2FaSecretKey final
{
public:
	class FString                                 SecretKey;                                         // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Uri;                                               // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FUser2FaSecretKey) == 0x000008, "Wrong alignment on FUser2FaSecretKey");
static_assert(sizeof(FUser2FaSecretKey) == 0x000020, "Wrong size on FUser2FaSecretKey");
static_assert(offsetof(FUser2FaSecretKey, SecretKey) == 0x000000, "Member 'FUser2FaSecretKey::SecretKey' has a wrong offset!");
static_assert(offsetof(FUser2FaSecretKey, Uri) == 0x000010, "Member 'FUser2FaSecretKey::Uri' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.User2FaMethod
// 0x0020 (0x0020 - 0x0000)
struct FUser2FaMethod final
{
public:
	class FString                                 Default;                                           // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FString>                         Enabled;                                           // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FUser2FaMethod) == 0x000008, "Wrong alignment on FUser2FaMethod");
static_assert(sizeof(FUser2FaMethod) == 0x000020, "Wrong size on FUser2FaMethod");
static_assert(offsetof(FUser2FaMethod, Default) == 0x000000, "Member 'FUser2FaMethod::Default' has a wrong offset!");
static_assert(offsetof(FUser2FaMethod, Enabled) == 0x000010, "Member 'FUser2FaMethod::Enabled' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.User2FaBackupCode
// 0x0028 (0x0028 - 0x0000)
struct FUser2FaBackupCode final
{
public:
	int64                                         GeneratedAt;                                       // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FString>                         InvalidCodes;                                      // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class FString>                         ValidCodes;                                        // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FUser2FaBackupCode) == 0x000008, "Wrong alignment on FUser2FaBackupCode");
static_assert(sizeof(FUser2FaBackupCode) == 0x000028, "Wrong size on FUser2FaBackupCode");
static_assert(offsetof(FUser2FaBackupCode, GeneratedAt) == 0x000000, "Member 'FUser2FaBackupCode::GeneratedAt' has a wrong offset!");
static_assert(offsetof(FUser2FaBackupCode, InvalidCodes) == 0x000008, "Member 'FUser2FaBackupCode::InvalidCodes' has a wrong offset!");
static_assert(offsetof(FUser2FaBackupCode, ValidCodes) == 0x000018, "Member 'FUser2FaBackupCode::ValidCodes' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.InputValidation
// 0x0018 (0x0018 - 0x0000)
struct FInputValidation final
{
public:
	TArray<struct FDataInputValidation>           Data;                                              // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         Version;                                           // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FInputValidation) == 0x000008, "Wrong alignment on FInputValidation");
static_assert(sizeof(FInputValidation) == 0x000018, "Wrong size on FInputValidation");
static_assert(offsetof(FInputValidation, Data) == 0x000000, "Member 'FInputValidation::Data' has a wrong offset!");
static_assert(offsetof(FInputValidation, Version) == 0x000010, "Member 'FInputValidation::Version' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.UserOtherPlatformInfo
// 0x0168 (0x0168 - 0x0000)
struct FUserOtherPlatformInfo final
{
public:
	class FString                                 AuthType;                                          // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FBan>                           Bans;                                              // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	class FString                                 Country;                                           // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 CreatedAt;                                         // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 DateOfBirth;                                       // 0x0040(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          DeletionStatus;                                    // 0x0050(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_51[0x7];                                       // 0x0051(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 DisplayName;                                       // 0x0058(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 EmailAddress;                                      // 0x0068(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          EmailVerified;                                     // 0x0078(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Enabled;                                           // 0x0079(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_7A[0x6];                                       // 0x007A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 LastDateOfBirthChangedTime;                        // 0x0080(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 LastEnabledChangedTime;                            // 0x0090(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Namespace;                                         // 0x00A0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FNamespaceRole>                 NamespaceRoles;                                    // 0x00B0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	class FString                                 NewEmailAddress;                                   // 0x00C0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 OldEmailAddress;                                   // 0x00D0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FPermission>                    Permissions;                                       // 0x00E0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	class FString                                 PhoneNumber;                                       // 0x00F0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          PhoneVerified;                                     // 0x0100(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_101[0x7];                                      // 0x0101(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 PlatformDisplayName;                               // 0x0108(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 PlatformId;                                        // 0x0118(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 PlatformUserId;                                    // 0x0128(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FString>                         Roles;                                             // 0x0138(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	class FString                                 UserId;                                            // 0x0148(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Username;                                          // 0x0158(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FUserOtherPlatformInfo) == 0x000008, "Wrong alignment on FUserOtherPlatformInfo");
static_assert(sizeof(FUserOtherPlatformInfo) == 0x000168, "Wrong size on FUserOtherPlatformInfo");
static_assert(offsetof(FUserOtherPlatformInfo, AuthType) == 0x000000, "Member 'FUserOtherPlatformInfo::AuthType' has a wrong offset!");
static_assert(offsetof(FUserOtherPlatformInfo, Bans) == 0x000010, "Member 'FUserOtherPlatformInfo::Bans' has a wrong offset!");
static_assert(offsetof(FUserOtherPlatformInfo, Country) == 0x000020, "Member 'FUserOtherPlatformInfo::Country' has a wrong offset!");
static_assert(offsetof(FUserOtherPlatformInfo, CreatedAt) == 0x000030, "Member 'FUserOtherPlatformInfo::CreatedAt' has a wrong offset!");
static_assert(offsetof(FUserOtherPlatformInfo, DateOfBirth) == 0x000040, "Member 'FUserOtherPlatformInfo::DateOfBirth' has a wrong offset!");
static_assert(offsetof(FUserOtherPlatformInfo, DeletionStatus) == 0x000050, "Member 'FUserOtherPlatformInfo::DeletionStatus' has a wrong offset!");
static_assert(offsetof(FUserOtherPlatformInfo, DisplayName) == 0x000058, "Member 'FUserOtherPlatformInfo::DisplayName' has a wrong offset!");
static_assert(offsetof(FUserOtherPlatformInfo, EmailAddress) == 0x000068, "Member 'FUserOtherPlatformInfo::EmailAddress' has a wrong offset!");
static_assert(offsetof(FUserOtherPlatformInfo, EmailVerified) == 0x000078, "Member 'FUserOtherPlatformInfo::EmailVerified' has a wrong offset!");
static_assert(offsetof(FUserOtherPlatformInfo, Enabled) == 0x000079, "Member 'FUserOtherPlatformInfo::Enabled' has a wrong offset!");
static_assert(offsetof(FUserOtherPlatformInfo, LastDateOfBirthChangedTime) == 0x000080, "Member 'FUserOtherPlatformInfo::LastDateOfBirthChangedTime' has a wrong offset!");
static_assert(offsetof(FUserOtherPlatformInfo, LastEnabledChangedTime) == 0x000090, "Member 'FUserOtherPlatformInfo::LastEnabledChangedTime' has a wrong offset!");
static_assert(offsetof(FUserOtherPlatformInfo, Namespace) == 0x0000A0, "Member 'FUserOtherPlatformInfo::Namespace' has a wrong offset!");
static_assert(offsetof(FUserOtherPlatformInfo, NamespaceRoles) == 0x0000B0, "Member 'FUserOtherPlatformInfo::NamespaceRoles' has a wrong offset!");
static_assert(offsetof(FUserOtherPlatformInfo, NewEmailAddress) == 0x0000C0, "Member 'FUserOtherPlatformInfo::NewEmailAddress' has a wrong offset!");
static_assert(offsetof(FUserOtherPlatformInfo, OldEmailAddress) == 0x0000D0, "Member 'FUserOtherPlatformInfo::OldEmailAddress' has a wrong offset!");
static_assert(offsetof(FUserOtherPlatformInfo, Permissions) == 0x0000E0, "Member 'FUserOtherPlatformInfo::Permissions' has a wrong offset!");
static_assert(offsetof(FUserOtherPlatformInfo, PhoneNumber) == 0x0000F0, "Member 'FUserOtherPlatformInfo::PhoneNumber' has a wrong offset!");
static_assert(offsetof(FUserOtherPlatformInfo, PhoneVerified) == 0x000100, "Member 'FUserOtherPlatformInfo::PhoneVerified' has a wrong offset!");
static_assert(offsetof(FUserOtherPlatformInfo, PlatformDisplayName) == 0x000108, "Member 'FUserOtherPlatformInfo::PlatformDisplayName' has a wrong offset!");
static_assert(offsetof(FUserOtherPlatformInfo, PlatformId) == 0x000118, "Member 'FUserOtherPlatformInfo::PlatformId' has a wrong offset!");
static_assert(offsetof(FUserOtherPlatformInfo, PlatformUserId) == 0x000128, "Member 'FUserOtherPlatformInfo::PlatformUserId' has a wrong offset!");
static_assert(offsetof(FUserOtherPlatformInfo, Roles) == 0x000138, "Member 'FUserOtherPlatformInfo::Roles' has a wrong offset!");
static_assert(offsetof(FUserOtherPlatformInfo, UserId) == 0x000148, "Member 'FUserOtherPlatformInfo::UserId' has a wrong offset!");
static_assert(offsetof(FUserOtherPlatformInfo, Username) == 0x000158, "Member 'FUserOtherPlatformInfo::Username' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.PagedUserOtherPlatformInfo
// 0x0058 (0x0058 - 0x0000)
struct FPagedUserOtherPlatformInfo final
{
public:
	TArray<struct FUserOtherPlatformInfo>         Data;                                              // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FAccelByteModelsPaging                 Paging;                                            // 0x0010(0x0040)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	int32                                         TotalData;                                         // 0x0050(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_54[0x4];                                       // 0x0054(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FPagedUserOtherPlatformInfo) == 0x000008, "Wrong alignment on FPagedUserOtherPlatformInfo");
static_assert(sizeof(FPagedUserOtherPlatformInfo) == 0x000058, "Wrong size on FPagedUserOtherPlatformInfo");
static_assert(offsetof(FPagedUserOtherPlatformInfo, Data) == 0x000000, "Member 'FPagedUserOtherPlatformInfo::Data' has a wrong offset!");
static_assert(offsetof(FPagedUserOtherPlatformInfo, Paging) == 0x000010, "Member 'FPagedUserOtherPlatformInfo::Paging' has a wrong offset!");
static_assert(offsetof(FPagedUserOtherPlatformInfo, TotalData) == 0x000050, "Member 'FPagedUserOtherPlatformInfo::TotalData' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.JsonWebTokenResponse
// 0x0020 (0x0020 - 0x0000)
struct FJsonWebTokenResponse final
{
public:
	class FString                                 Jwt_token;                                         // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Session_id;                                        // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJsonWebTokenResponse) == 0x000008, "Wrong alignment on FJsonWebTokenResponse");
static_assert(sizeof(FJsonWebTokenResponse) == 0x000020, "Wrong size on FJsonWebTokenResponse");
static_assert(offsetof(FJsonWebTokenResponse, Jwt_token) == 0x000000, "Member 'FJsonWebTokenResponse::Jwt_token' has a wrong offset!");
static_assert(offsetof(FJsonWebTokenResponse, Session_id) == 0x000010, "Member 'FJsonWebTokenResponse::Session_id' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.UpdateEmailRequest
// 0x0020 (0x0020 - 0x0000)
struct FUpdateEmailRequest final
{
public:
	class FString                                 Code;                                              // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 EmailAddress;                                      // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FUpdateEmailRequest) == 0x000008, "Wrong alignment on FUpdateEmailRequest");
static_assert(sizeof(FUpdateEmailRequest) == 0x000020, "Wrong size on FUpdateEmailRequest");
static_assert(offsetof(FUpdateEmailRequest, Code) == 0x000000, "Member 'FUpdateEmailRequest::Code' has a wrong offset!");
static_assert(offsetof(FUpdateEmailRequest, EmailAddress) == 0x000010, "Member 'FUpdateEmailRequest::EmailAddress' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.LinkPlatformAccountRequest
// 0x0020 (0x0020 - 0x0000)
struct FLinkPlatformAccountRequest final
{
public:
	class FString                                 PlatformId;                                        // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 PlatformUserId;                                    // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FLinkPlatformAccountRequest) == 0x000008, "Wrong alignment on FLinkPlatformAccountRequest");
static_assert(sizeof(FLinkPlatformAccountRequest) == 0x000020, "Wrong size on FLinkPlatformAccountRequest");
static_assert(offsetof(FLinkPlatformAccountRequest, PlatformId) == 0x000000, "Member 'FLinkPlatformAccountRequest::PlatformId' has a wrong offset!");
static_assert(offsetof(FLinkPlatformAccountRequest, PlatformUserId) == 0x000010, "Member 'FLinkPlatformAccountRequest::PlatformUserId' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.UpgradeUserRequest
// 0x0018 (0x0018 - 0x0000)
struct FUpgradeUserRequest final
{
public:
	class FString                                 Temporary_session_id;                              // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Expires_in;                                        // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FUpgradeUserRequest) == 0x000008, "Wrong alignment on FUpgradeUserRequest");
static_assert(sizeof(FUpgradeUserRequest) == 0x000018, "Wrong size on FUpgradeUserRequest");
static_assert(offsetof(FUpgradeUserRequest, Temporary_session_id) == 0x000000, "Member 'FUpgradeUserRequest::Temporary_session_id' has a wrong offset!");
static_assert(offsetof(FUpgradeUserRequest, Expires_in) == 0x000010, "Member 'FUpgradeUserRequest::Expires_in' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.BulkPlatformUserIdRequest
// 0x0010 (0x0010 - 0x0000)
struct FBulkPlatformUserIdRequest final
{
public:
	TArray<class FString>                         PlatformUserIds;                                   // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBulkPlatformUserIdRequest) == 0x000008, "Wrong alignment on FBulkPlatformUserIdRequest");
static_assert(sizeof(FBulkPlatformUserIdRequest) == 0x000010, "Wrong size on FBulkPlatformUserIdRequest");
static_assert(offsetof(FBulkPlatformUserIdRequest, PlatformUserIds) == 0x000000, "Member 'FBulkPlatformUserIdRequest::PlatformUserIds' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.UpgradeAndVerifyRequest
// 0x0080 (0x0080 - 0x0000)
struct FUpgradeAndVerifyRequest final
{
public:
	class FString                                 Code;                                              // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Country;                                           // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 DateOfBirth;                                       // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 DisplayName;                                       // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 EmailAddress;                                      // 0x0040(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Password;                                          // 0x0050(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReachMinimumAge;                                   // 0x0060(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_61[0x7];                                       // 0x0061(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Username;                                          // 0x0068(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ValidateOnly;                                      // 0x0078(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_79[0x7];                                       // 0x0079(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FUpgradeAndVerifyRequest) == 0x000008, "Wrong alignment on FUpgradeAndVerifyRequest");
static_assert(sizeof(FUpgradeAndVerifyRequest) == 0x000080, "Wrong size on FUpgradeAndVerifyRequest");
static_assert(offsetof(FUpgradeAndVerifyRequest, Code) == 0x000000, "Member 'FUpgradeAndVerifyRequest::Code' has a wrong offset!");
static_assert(offsetof(FUpgradeAndVerifyRequest, Country) == 0x000010, "Member 'FUpgradeAndVerifyRequest::Country' has a wrong offset!");
static_assert(offsetof(FUpgradeAndVerifyRequest, DateOfBirth) == 0x000020, "Member 'FUpgradeAndVerifyRequest::DateOfBirth' has a wrong offset!");
static_assert(offsetof(FUpgradeAndVerifyRequest, DisplayName) == 0x000030, "Member 'FUpgradeAndVerifyRequest::DisplayName' has a wrong offset!");
static_assert(offsetof(FUpgradeAndVerifyRequest, EmailAddress) == 0x000040, "Member 'FUpgradeAndVerifyRequest::EmailAddress' has a wrong offset!");
static_assert(offsetof(FUpgradeAndVerifyRequest, Password) == 0x000050, "Member 'FUpgradeAndVerifyRequest::Password' has a wrong offset!");
static_assert(offsetof(FUpgradeAndVerifyRequest, ReachMinimumAge) == 0x000060, "Member 'FUpgradeAndVerifyRequest::ReachMinimumAge' has a wrong offset!");
static_assert(offsetof(FUpgradeAndVerifyRequest, Username) == 0x000068, "Member 'FUpgradeAndVerifyRequest::Username' has a wrong offset!");
static_assert(offsetof(FUpgradeAndVerifyRequest, ValidateOnly) == 0x000078, "Member 'FUpgradeAndVerifyRequest::ValidateOnly' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.VerificationCodeRequest
// 0x0028 (0x0028 - 0x0000)
struct FVerificationCodeRequest final
{
public:
	EVerificationContext                          Context;                                           // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 LanguageTag;                                       // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 EmailAddress;                                      // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FVerificationCodeRequest) == 0x000008, "Wrong alignment on FVerificationCodeRequest");
static_assert(sizeof(FVerificationCodeRequest) == 0x000028, "Wrong size on FVerificationCodeRequest");
static_assert(offsetof(FVerificationCodeRequest, Context) == 0x000000, "Member 'FVerificationCodeRequest::Context' has a wrong offset!");
static_assert(offsetof(FVerificationCodeRequest, LanguageTag) == 0x000008, "Member 'FVerificationCodeRequest::LanguageTag' has a wrong offset!");
static_assert(offsetof(FVerificationCodeRequest, EmailAddress) == 0x000018, "Member 'FVerificationCodeRequest::EmailAddress' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.RegisterRequestv2
// 0x0070 (0x0070 - 0x0000)
struct FRegisterRequestv2 final
{
public:
	class FString                                 AuthType;                                          // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 DisplayName;                                       // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 EmailAddress;                                      // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Password;                                          // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Country;                                           // 0x0040(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 DateOfBirth;                                       // 0x0050(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Username;                                          // 0x0060(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRegisterRequestv2) == 0x000008, "Wrong alignment on FRegisterRequestv2");
static_assert(sizeof(FRegisterRequestv2) == 0x000070, "Wrong size on FRegisterRequestv2");
static_assert(offsetof(FRegisterRequestv2, AuthType) == 0x000000, "Member 'FRegisterRequestv2::AuthType' has a wrong offset!");
static_assert(offsetof(FRegisterRequestv2, DisplayName) == 0x000010, "Member 'FRegisterRequestv2::DisplayName' has a wrong offset!");
static_assert(offsetof(FRegisterRequestv2, EmailAddress) == 0x000020, "Member 'FRegisterRequestv2::EmailAddress' has a wrong offset!");
static_assert(offsetof(FRegisterRequestv2, Password) == 0x000030, "Member 'FRegisterRequestv2::Password' has a wrong offset!");
static_assert(offsetof(FRegisterRequestv2, Country) == 0x000040, "Member 'FRegisterRequestv2::Country' has a wrong offset!");
static_assert(offsetof(FRegisterRequestv2, DateOfBirth) == 0x000050, "Member 'FRegisterRequestv2::DateOfBirth' has a wrong offset!");
static_assert(offsetof(FRegisterRequestv2, Username) == 0x000060, "Member 'FRegisterRequestv2::Username' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.RegisterRequest
// 0x0060 (0x0060 - 0x0000)
struct FRegisterRequest final
{
public:
	class FString                                 AuthType;                                          // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 DisplayName;                                       // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 EmailAddress;                                      // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Password;                                          // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Country;                                           // 0x0040(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 DateOfBirth;                                       // 0x0050(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRegisterRequest) == 0x000008, "Wrong alignment on FRegisterRequest");
static_assert(sizeof(FRegisterRequest) == 0x000060, "Wrong size on FRegisterRequest");
static_assert(offsetof(FRegisterRequest, AuthType) == 0x000000, "Member 'FRegisterRequest::AuthType' has a wrong offset!");
static_assert(offsetof(FRegisterRequest, DisplayName) == 0x000010, "Member 'FRegisterRequest::DisplayName' has a wrong offset!");
static_assert(offsetof(FRegisterRequest, EmailAddress) == 0x000020, "Member 'FRegisterRequest::EmailAddress' has a wrong offset!");
static_assert(offsetof(FRegisterRequest, Password) == 0x000030, "Member 'FRegisterRequest::Password' has a wrong offset!");
static_assert(offsetof(FRegisterRequest, Country) == 0x000040, "Member 'FRegisterRequest::Country' has a wrong offset!");
static_assert(offsetof(FRegisterRequest, DateOfBirth) == 0x000050, "Member 'FRegisterRequest::DateOfBirth' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsPublicUserProfileInfo
// 0x00C0 (0x00C0 - 0x0000)
struct FAccelByteModelsPublicUserProfileInfo final
{
public:
	class FString                                 UserId;                                            // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Namespace;                                         // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 AvatarSmallUrl;                                    // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 AvatarUrl;                                         // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 AvatarLargeUrl;                                    // 0x0040(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<class FString, struct FJsonObjectWrapper> CustomAttributes;                                  // 0x0050(0x0050)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	class FString                                 PublicId;                                          // 0x00A0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Timezone;                                          // 0x00B0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsPublicUserProfileInfo) == 0x000008, "Wrong alignment on FAccelByteModelsPublicUserProfileInfo");
static_assert(sizeof(FAccelByteModelsPublicUserProfileInfo) == 0x0000C0, "Wrong size on FAccelByteModelsPublicUserProfileInfo");
static_assert(offsetof(FAccelByteModelsPublicUserProfileInfo, UserId) == 0x000000, "Member 'FAccelByteModelsPublicUserProfileInfo::UserId' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsPublicUserProfileInfo, Namespace) == 0x000010, "Member 'FAccelByteModelsPublicUserProfileInfo::Namespace' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsPublicUserProfileInfo, AvatarSmallUrl) == 0x000020, "Member 'FAccelByteModelsPublicUserProfileInfo::AvatarSmallUrl' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsPublicUserProfileInfo, AvatarUrl) == 0x000030, "Member 'FAccelByteModelsPublicUserProfileInfo::AvatarUrl' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsPublicUserProfileInfo, AvatarLargeUrl) == 0x000040, "Member 'FAccelByteModelsPublicUserProfileInfo::AvatarLargeUrl' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsPublicUserProfileInfo, CustomAttributes) == 0x000050, "Member 'FAccelByteModelsPublicUserProfileInfo::CustomAttributes' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsPublicUserProfileInfo, PublicId) == 0x0000A0, "Member 'FAccelByteModelsPublicUserProfileInfo::PublicId' has a wrong offset!");
static_assert(offsetof(FAccelByteModelsPublicUserProfileInfo, Timezone) == 0x0000B0, "Member 'FAccelByteModelsPublicUserProfileInfo::Timezone' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.AccelByteModelsPubIp
// 0x0010 (0x0010 - 0x0000)
struct FAccelByteModelsPubIp final
{
public:
	class FString                                 Ip;                                                // 0x0000(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccelByteModelsPubIp) == 0x000008, "Wrong alignment on FAccelByteModelsPubIp");
static_assert(sizeof(FAccelByteModelsPubIp) == 0x000010, "Wrong size on FAccelByteModelsPubIp");
static_assert(offsetof(FAccelByteModelsPubIp, Ip) == 0x000000, "Member 'FAccelByteModelsPubIp::Ip' has a wrong offset!");

// ScriptStruct AccelByteUe4Sdk.VersionInfo
// 0x0040 (0x0040 - 0x0000)
struct FVersionInfo final
{
public:
	class FString                                 Name;                                              // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Version;                                           // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 GitHash;                                           // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Realm;                                             // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FVersionInfo) == 0x000008, "Wrong alignment on FVersionInfo");
static_assert(sizeof(FVersionInfo) == 0x000040, "Wrong size on FVersionInfo");
static_assert(offsetof(FVersionInfo, Name) == 0x000000, "Member 'FVersionInfo::Name' has a wrong offset!");
static_assert(offsetof(FVersionInfo, Version) == 0x000010, "Member 'FVersionInfo::Version' has a wrong offset!");
static_assert(offsetof(FVersionInfo, GitHash) == 0x000020, "Member 'FVersionInfo::GitHash' has a wrong offset!");
static_assert(offsetof(FVersionInfo, Realm) == 0x000030, "Member 'FVersionInfo::Realm' has a wrong offset!");

}

