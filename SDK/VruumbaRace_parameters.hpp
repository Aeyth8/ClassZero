#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: VruumbaRace

#include "Basic.hpp"

#include "AkAudio_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "Engine_structs.hpp"


namespace SDK::Params
{

// Function VruumbaRace.VruumbaRace_C.ExecuteUbergraph_VruumbaRace
// 0x0530 (0x0530 - 0x0000)
struct VruumbaRace_C_ExecuteUbergraph_VruumbaRace final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable;                                 // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TDelegate<void(int32 NextCheckPoint)>         K2Node_CreateDelegate_OutputDelegate;              // 0x0010(0x0010)(ZeroConstructor, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable;                                // 0x0021(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_2;                    // 0x0022(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_1;                              // 0x0023(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_MakeVector_ReturnValue;                   // 0x0024(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_HasAuthority_ReturnValue;                 // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_31[0x3];                                       // 0x0031(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_1;                 // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_2;                              // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsDedicatedServer_ReturnValue;            // 0x0041(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_HasAuthority_ReturnValue_1;               // 0x0042(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_43[0x1];                                       // 0x0043(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0044(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AVruumbaRaceCheckPoint_C*               CallFunc_Array_Get_Item;                           // 0x0048(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue_1;               // 0x0050(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable_1;                   // 0x0054(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsDedicatedServer_ReturnValue_1;          // 0x0058(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_59[0x7];                                       // 0x0059(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AVruumbaRaceCheckPoint_C*               CallFunc_Array_Get_Item_1;                         // 0x0060(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_2;                 // 0x0068(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue;          // 0x006C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    K2Node_ComponentBoundEvent_OverlappedComponent;    // 0x0078(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 K2Node_ComponentBoundEvent_OtherActor;             // 0x0080(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    K2Node_ComponentBoundEvent_OtherComp;              // 0x0088(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_ComponentBoundEvent_OtherBodyIndex;         // 0x0090(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_94[0x4];                                       // 0x0094(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AVruumbaSCTBP_C*                        K2Node_DynamicCast_AsVruumba_SCTBP;                // 0x0098(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x00A0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_A1[0x3];                                       // 0x00A1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_GetVelocity_ReturnValue;                  // 0x00A4(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsLocallyControlled_ReturnValue;          // 0x00B0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_B1[0x7];                                       // 0x00B1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AVruumbaSCTBP_C*                        K2Node_CustomEvent_LeadingVruumbaPlayer_1;         // 0x00B8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_CustomEvent_Time_2;                         // 0x00C0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C4[0x4];                                       // 0x00C4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UVruumbaRaceWI_C*>               CallFunc_GetAllWidgetsOfClass_FoundWidgets;        // 0x00C8(0x0010)(ReferenceParm, ContainsInstancedReference)
	bool                                          CallFunc_K2_AttachToComponent_ReturnValue;         // 0x00D8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_D9[0x7];                                       // 0x00D9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UVruumbaRaceWI_C*                       CallFunc_Array_Get_Item_2;                         // 0x00E0(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue_2;               // 0x00E8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_CustomEvent_Time_1;                         // 0x00EC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AVruumbaSCTBP_C*                        K2Node_CustomEvent_LeadingVruumbaPlayer;           // 0x00F0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x00F8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_F9[0x7];                                       // 0x00F9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ASCTPlayerState*                        CallFunc_GetSCTPlayerState_ReturnValue;            // 0x0100(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_3;                    // 0x0108(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_109[0x7];                                      // 0x0109(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_GetPlayerName_ReturnValue;                // 0x0110(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	int32                                         CallFunc_FFloor_ReturnValue;                       // 0x0120(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Percent_FloatFloat_ReturnValue;           // 0x0124(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Conv_IntToFloat_ReturnValue;              // 0x0128(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_FFloor_ReturnValue_1;                     // 0x012C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue;          // 0x0130(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_134[0x4];                                      // 0x0134(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_Conv_IntToString_ReturnValue;             // 0x0138(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue;          // 0x0148(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_14C[0x4];                                      // 0x014C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_Concat_StrStr_ReturnValue;                // 0x0150(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	int32                                         CallFunc_FFloor_ReturnValue_2;                     // 0x0160(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_164[0x4];                                      // 0x0164(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_Conv_IntToString_ReturnValue_1;           // 0x0168(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_IntInt_ReturnValue;               // 0x0178(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_179[0x7];                                      // 0x0179(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_Conv_IntToString_ReturnValue_2;           // 0x0180(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Conv_IntToString_ReturnValue_3;           // 0x0190(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_IntInt_ReturnValue_1;             // 0x01A0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1A1[0x7];                                      // 0x01A1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_1;              // 0x01A8(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	float                                         CallFunc_Divide_FloatFloat_ReturnValue;            // 0x01B8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_FFloor_ReturnValue_3;                     // 0x01BC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Conv_IntToString_ReturnValue_4;           // 0x01C0(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Conv_IntToString_ReturnValue_5;           // 0x01D0(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_2;              // 0x01E0(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_IntInt_ReturnValue_2;             // 0x01F0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1F1[0x7];                                      // 0x01F1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 K2Node_Select_Default;                             // 0x01F8(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_3;              // 0x0208(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	float                                         CallFunc_Check_Best_Personal_Race_Time_BestPersonalTime; // 0x0218(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_CustomEvent_NextCheckPoint_1;               // 0x021C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_CustomEvent_Time;                           // 0x0220(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_224[0x4];                                      // 0x0224(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AVruumbaSCTBP_C*                        K2Node_CustomEvent_VruumbaPlayer;                  // 0x0228(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable_1;                  // 0x0230(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue_1;                // 0x0234(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_235[0x3];                                      // 0x0235(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue_3;                 // 0x0238(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_23C[0x4];                                      // 0x023C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ACharacter*                             CallFunc_GetPlayerCharacter_ReturnValue;           // 0x0240(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TScriptInterface<class IICharacterSCT_C>      K2Node_DynamicCast_AsICharacter_SCT;               // 0x0248(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x0258(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsAliveBPI_Alive;                         // 0x0259(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_25A[0x6];                                      // 0x025A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class AVruumbaSCTBP_C*                        K2Node_CustomEvent_Vruumba_Player;                 // 0x0260(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AVruumbaRaceCheckPoint_C*               CallFunc_Array_Get_Item_3;                         // 0x0268(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue_3;               // 0x0270(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue_2;                // 0x0274(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_4;                    // 0x0275(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Has_Been_Initd_Variable;                 // 0x0276(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_CustomEvent_FirstCheckPoint;                // 0x0277(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	class AVruumbaRaceCheckPoint_C*               K2Node_CustomEvent_NextCheckPoint;                 // 0x0278(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AVruumbaRaceCheckPoint_C*               K2Node_CustomEvent_PreviousCheckPoint;             // 0x0280(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_5;                    // 0x0288(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_289[0x3];                                      // 0x0289(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_K2_GetComponentLocation_ReturnValue;      // 0x028C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetComponentLocation_ReturnValue_1;    // 0x0298(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_3;                              // 0x02A4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_4;                              // 0x02A5(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2A6[0x2];                                      // 0x02A6(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 K2Node_Select_Default_1;                           // 0x02A8(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 K2Node_Select_Default_2;                           // 0x02B8(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_4;              // 0x02C8(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class USplineComponent*                       K2Node_Select_Default_3;                           // 0x02D8(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_5;              // 0x02E0(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	float                                         CallFunc_GetSplineLength_ReturnValue;              // 0x02F0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2F4[0x4];                                      // 0x02F4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_6;              // 0x02F8(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_1;        // 0x0308(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_30C[0x4];                                      // 0x030C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   CallFunc_Conv_StringToText_ReturnValue;            // 0x0310(0x0018)()
	struct FRotator                               CallFunc_GetRotationAtDistanceAlongSpline_ReturnValue; // 0x0328(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_GetLocationAtDistanceAlongSpline_ReturnValue; // 0x0334(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_IsClosed_Variable;                       // 0x0340(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_341[0xF];                                      // 0x0341(0x000F)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CallFunc_MakeTransform_ReturnValue;                // 0x0350(0x0030)(IsPlainOldData, NoDestructor)
	struct FHitResult                             CallFunc_K2_SetWorldTransform_SweepHitResult;      // 0x0380(0x008C)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	uint8                                         Pad_40C[0x4];                                      // 0x040C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ACharacter*                             CallFunc_GetPlayerCharacter_ReturnValue_1;         // 0x0410(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TScriptInterface<class IICharacterSCT_C>      K2Node_DynamicCast_AsICharacter_SCT_1;             // 0x0418(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper)
	bool                                          K2Node_DynamicCast_bSuccess_2;                     // 0x0428(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsAliveBPI_Alive_1;                       // 0x0429(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_42A[0x2];                                      // 0x042A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_GetActorRightVector_ReturnValue;          // 0x042C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USplineComponent*                       K2Node_Select_Default_4;                           // 0x0438(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Dot_VectorVector_ReturnValue;             // 0x0440(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetSplineLength_ReturnValue_1;            // 0x0444(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue;           // 0x0448(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_449[0x3];                                      // 0x0449(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_2;        // 0x044C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_GetRotationAtDistanceAlongSpline_ReturnValue_1; // 0x0450(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_GetLocationAtDistanceAlongSpline_ReturnValue_1; // 0x045C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_468[0x8];                                      // 0x0468(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CallFunc_MakeTransform_ReturnValue_1;              // 0x0470(0x0030)(IsPlainOldData, NoDestructor)
	struct FHitResult                             CallFunc_K2_SetWorldTransform_SweepHitResult_1;    // 0x04A0(0x008C)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
};
static_assert(alignof(VruumbaRace_C_ExecuteUbergraph_VruumbaRace) == 0x000010, "Wrong alignment on VruumbaRace_C_ExecuteUbergraph_VruumbaRace");
static_assert(sizeof(VruumbaRace_C_ExecuteUbergraph_VruumbaRace) == 0x000530, "Wrong size on VruumbaRace_C_ExecuteUbergraph_VruumbaRace");
static_assert(offsetof(VruumbaRace_C_ExecuteUbergraph_VruumbaRace, EntryPoint) == 0x000000, "Member 'VruumbaRace_C_ExecuteUbergraph_VruumbaRace::EntryPoint' has a wrong offset!");
static_assert(offsetof(VruumbaRace_C_ExecuteUbergraph_VruumbaRace, Temp_int_Variable) == 0x000004, "Member 'VruumbaRace_C_ExecuteUbergraph_VruumbaRace::Temp_int_Variable' has a wrong offset!");
static_assert(offsetof(VruumbaRace_C_ExecuteUbergraph_VruumbaRace, CallFunc_IsValid_ReturnValue) == 0x000008, "Member 'VruumbaRace_C_ExecuteUbergraph_VruumbaRace::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(VruumbaRace_C_ExecuteUbergraph_VruumbaRace, CallFunc_Add_IntInt_ReturnValue) == 0x00000C, "Member 'VruumbaRace_C_ExecuteUbergraph_VruumbaRace::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(VruumbaRace_C_ExecuteUbergraph_VruumbaRace, K2Node_CreateDelegate_OutputDelegate) == 0x000010, "Member 'VruumbaRace_C_ExecuteUbergraph_VruumbaRace::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(VruumbaRace_C_ExecuteUbergraph_VruumbaRace, CallFunc_IsValid_ReturnValue_1) == 0x000020, "Member 'VruumbaRace_C_ExecuteUbergraph_VruumbaRace::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(VruumbaRace_C_ExecuteUbergraph_VruumbaRace, Temp_bool_Variable) == 0x000021, "Member 'VruumbaRace_C_ExecuteUbergraph_VruumbaRace::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(VruumbaRace_C_ExecuteUbergraph_VruumbaRace, CallFunc_IsValid_ReturnValue_2) == 0x000022, "Member 'VruumbaRace_C_ExecuteUbergraph_VruumbaRace::CallFunc_IsValid_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(VruumbaRace_C_ExecuteUbergraph_VruumbaRace, Temp_bool_Variable_1) == 0x000023, "Member 'VruumbaRace_C_ExecuteUbergraph_VruumbaRace::Temp_bool_Variable_1' has a wrong offset!");
static_assert(offsetof(VruumbaRace_C_ExecuteUbergraph_VruumbaRace, CallFunc_MakeVector_ReturnValue) == 0x000024, "Member 'VruumbaRace_C_ExecuteUbergraph_VruumbaRace::CallFunc_MakeVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(VruumbaRace_C_ExecuteUbergraph_VruumbaRace, CallFunc_HasAuthority_ReturnValue) == 0x000030, "Member 'VruumbaRace_C_ExecuteUbergraph_VruumbaRace::CallFunc_HasAuthority_ReturnValue' has a wrong offset!");
static_assert(offsetof(VruumbaRace_C_ExecuteUbergraph_VruumbaRace, Temp_int_Loop_Counter_Variable) == 0x000034, "Member 'VruumbaRace_C_ExecuteUbergraph_VruumbaRace::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(VruumbaRace_C_ExecuteUbergraph_VruumbaRace, CallFunc_Add_IntInt_ReturnValue_1) == 0x000038, "Member 'VruumbaRace_C_ExecuteUbergraph_VruumbaRace::CallFunc_Add_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(VruumbaRace_C_ExecuteUbergraph_VruumbaRace, Temp_int_Array_Index_Variable) == 0x00003C, "Member 'VruumbaRace_C_ExecuteUbergraph_VruumbaRace::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(VruumbaRace_C_ExecuteUbergraph_VruumbaRace, Temp_bool_Variable_2) == 0x000040, "Member 'VruumbaRace_C_ExecuteUbergraph_VruumbaRace::Temp_bool_Variable_2' has a wrong offset!");
static_assert(offsetof(VruumbaRace_C_ExecuteUbergraph_VruumbaRace, CallFunc_IsDedicatedServer_ReturnValue) == 0x000041, "Member 'VruumbaRace_C_ExecuteUbergraph_VruumbaRace::CallFunc_IsDedicatedServer_ReturnValue' has a wrong offset!");
static_assert(offsetof(VruumbaRace_C_ExecuteUbergraph_VruumbaRace, CallFunc_HasAuthority_ReturnValue_1) == 0x000042, "Member 'VruumbaRace_C_ExecuteUbergraph_VruumbaRace::CallFunc_HasAuthority_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(VruumbaRace_C_ExecuteUbergraph_VruumbaRace, CallFunc_Array_Length_ReturnValue) == 0x000044, "Member 'VruumbaRace_C_ExecuteUbergraph_VruumbaRace::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(VruumbaRace_C_ExecuteUbergraph_VruumbaRace, CallFunc_Array_Get_Item) == 0x000048, "Member 'VruumbaRace_C_ExecuteUbergraph_VruumbaRace::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(VruumbaRace_C_ExecuteUbergraph_VruumbaRace, CallFunc_Array_Length_ReturnValue_1) == 0x000050, "Member 'VruumbaRace_C_ExecuteUbergraph_VruumbaRace::CallFunc_Array_Length_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(VruumbaRace_C_ExecuteUbergraph_VruumbaRace, Temp_int_Array_Index_Variable_1) == 0x000054, "Member 'VruumbaRace_C_ExecuteUbergraph_VruumbaRace::Temp_int_Array_Index_Variable_1' has a wrong offset!");
static_assert(offsetof(VruumbaRace_C_ExecuteUbergraph_VruumbaRace, CallFunc_IsDedicatedServer_ReturnValue_1) == 0x000058, "Member 'VruumbaRace_C_ExecuteUbergraph_VruumbaRace::CallFunc_IsDedicatedServer_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(VruumbaRace_C_ExecuteUbergraph_VruumbaRace, CallFunc_Array_Get_Item_1) == 0x000060, "Member 'VruumbaRace_C_ExecuteUbergraph_VruumbaRace::CallFunc_Array_Get_Item_1' has a wrong offset!");
static_assert(offsetof(VruumbaRace_C_ExecuteUbergraph_VruumbaRace, CallFunc_Add_IntInt_ReturnValue_2) == 0x000068, "Member 'VruumbaRace_C_ExecuteUbergraph_VruumbaRace::CallFunc_Add_IntInt_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(VruumbaRace_C_ExecuteUbergraph_VruumbaRace, CallFunc_K2_GetActorLocation_ReturnValue) == 0x00006C, "Member 'VruumbaRace_C_ExecuteUbergraph_VruumbaRace::CallFunc_K2_GetActorLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(VruumbaRace_C_ExecuteUbergraph_VruumbaRace, K2Node_ComponentBoundEvent_OverlappedComponent) == 0x000078, "Member 'VruumbaRace_C_ExecuteUbergraph_VruumbaRace::K2Node_ComponentBoundEvent_OverlappedComponent' has a wrong offset!");
static_assert(offsetof(VruumbaRace_C_ExecuteUbergraph_VruumbaRace, K2Node_ComponentBoundEvent_OtherActor) == 0x000080, "Member 'VruumbaRace_C_ExecuteUbergraph_VruumbaRace::K2Node_ComponentBoundEvent_OtherActor' has a wrong offset!");
static_assert(offsetof(VruumbaRace_C_ExecuteUbergraph_VruumbaRace, K2Node_ComponentBoundEvent_OtherComp) == 0x000088, "Member 'VruumbaRace_C_ExecuteUbergraph_VruumbaRace::K2Node_ComponentBoundEvent_OtherComp' has a wrong offset!");
static_assert(offsetof(VruumbaRace_C_ExecuteUbergraph_VruumbaRace, K2Node_ComponentBoundEvent_OtherBodyIndex) == 0x000090, "Member 'VruumbaRace_C_ExecuteUbergraph_VruumbaRace::K2Node_ComponentBoundEvent_OtherBodyIndex' has a wrong offset!");
static_assert(offsetof(VruumbaRace_C_ExecuteUbergraph_VruumbaRace, K2Node_DynamicCast_AsVruumba_SCTBP) == 0x000098, "Member 'VruumbaRace_C_ExecuteUbergraph_VruumbaRace::K2Node_DynamicCast_AsVruumba_SCTBP' has a wrong offset!");
static_assert(offsetof(VruumbaRace_C_ExecuteUbergraph_VruumbaRace, K2Node_DynamicCast_bSuccess) == 0x0000A0, "Member 'VruumbaRace_C_ExecuteUbergraph_VruumbaRace::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(VruumbaRace_C_ExecuteUbergraph_VruumbaRace, CallFunc_GetVelocity_ReturnValue) == 0x0000A4, "Member 'VruumbaRace_C_ExecuteUbergraph_VruumbaRace::CallFunc_GetVelocity_ReturnValue' has a wrong offset!");
static_assert(offsetof(VruumbaRace_C_ExecuteUbergraph_VruumbaRace, CallFunc_IsLocallyControlled_ReturnValue) == 0x0000B0, "Member 'VruumbaRace_C_ExecuteUbergraph_VruumbaRace::CallFunc_IsLocallyControlled_ReturnValue' has a wrong offset!");
static_assert(offsetof(VruumbaRace_C_ExecuteUbergraph_VruumbaRace, K2Node_CustomEvent_LeadingVruumbaPlayer_1) == 0x0000B8, "Member 'VruumbaRace_C_ExecuteUbergraph_VruumbaRace::K2Node_CustomEvent_LeadingVruumbaPlayer_1' has a wrong offset!");
static_assert(offsetof(VruumbaRace_C_ExecuteUbergraph_VruumbaRace, K2Node_CustomEvent_Time_2) == 0x0000C0, "Member 'VruumbaRace_C_ExecuteUbergraph_VruumbaRace::K2Node_CustomEvent_Time_2' has a wrong offset!");
static_assert(offsetof(VruumbaRace_C_ExecuteUbergraph_VruumbaRace, CallFunc_GetAllWidgetsOfClass_FoundWidgets) == 0x0000C8, "Member 'VruumbaRace_C_ExecuteUbergraph_VruumbaRace::CallFunc_GetAllWidgetsOfClass_FoundWidgets' has a wrong offset!");
static_assert(offsetof(VruumbaRace_C_ExecuteUbergraph_VruumbaRace, CallFunc_K2_AttachToComponent_ReturnValue) == 0x0000D8, "Member 'VruumbaRace_C_ExecuteUbergraph_VruumbaRace::CallFunc_K2_AttachToComponent_ReturnValue' has a wrong offset!");
static_assert(offsetof(VruumbaRace_C_ExecuteUbergraph_VruumbaRace, CallFunc_Array_Get_Item_2) == 0x0000E0, "Member 'VruumbaRace_C_ExecuteUbergraph_VruumbaRace::CallFunc_Array_Get_Item_2' has a wrong offset!");
static_assert(offsetof(VruumbaRace_C_ExecuteUbergraph_VruumbaRace, CallFunc_Array_Length_ReturnValue_2) == 0x0000E8, "Member 'VruumbaRace_C_ExecuteUbergraph_VruumbaRace::CallFunc_Array_Length_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(VruumbaRace_C_ExecuteUbergraph_VruumbaRace, K2Node_CustomEvent_Time_1) == 0x0000EC, "Member 'VruumbaRace_C_ExecuteUbergraph_VruumbaRace::K2Node_CustomEvent_Time_1' has a wrong offset!");
static_assert(offsetof(VruumbaRace_C_ExecuteUbergraph_VruumbaRace, K2Node_CustomEvent_LeadingVruumbaPlayer) == 0x0000F0, "Member 'VruumbaRace_C_ExecuteUbergraph_VruumbaRace::K2Node_CustomEvent_LeadingVruumbaPlayer' has a wrong offset!");
static_assert(offsetof(VruumbaRace_C_ExecuteUbergraph_VruumbaRace, CallFunc_Less_IntInt_ReturnValue) == 0x0000F8, "Member 'VruumbaRace_C_ExecuteUbergraph_VruumbaRace::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(VruumbaRace_C_ExecuteUbergraph_VruumbaRace, CallFunc_GetSCTPlayerState_ReturnValue) == 0x000100, "Member 'VruumbaRace_C_ExecuteUbergraph_VruumbaRace::CallFunc_GetSCTPlayerState_ReturnValue' has a wrong offset!");
static_assert(offsetof(VruumbaRace_C_ExecuteUbergraph_VruumbaRace, CallFunc_IsValid_ReturnValue_3) == 0x000108, "Member 'VruumbaRace_C_ExecuteUbergraph_VruumbaRace::CallFunc_IsValid_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(VruumbaRace_C_ExecuteUbergraph_VruumbaRace, CallFunc_GetPlayerName_ReturnValue) == 0x000110, "Member 'VruumbaRace_C_ExecuteUbergraph_VruumbaRace::CallFunc_GetPlayerName_ReturnValue' has a wrong offset!");
static_assert(offsetof(VruumbaRace_C_ExecuteUbergraph_VruumbaRace, CallFunc_FFloor_ReturnValue) == 0x000120, "Member 'VruumbaRace_C_ExecuteUbergraph_VruumbaRace::CallFunc_FFloor_ReturnValue' has a wrong offset!");
static_assert(offsetof(VruumbaRace_C_ExecuteUbergraph_VruumbaRace, CallFunc_Percent_FloatFloat_ReturnValue) == 0x000124, "Member 'VruumbaRace_C_ExecuteUbergraph_VruumbaRace::CallFunc_Percent_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(VruumbaRace_C_ExecuteUbergraph_VruumbaRace, CallFunc_Conv_IntToFloat_ReturnValue) == 0x000128, "Member 'VruumbaRace_C_ExecuteUbergraph_VruumbaRace::CallFunc_Conv_IntToFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(VruumbaRace_C_ExecuteUbergraph_VruumbaRace, CallFunc_FFloor_ReturnValue_1) == 0x00012C, "Member 'VruumbaRace_C_ExecuteUbergraph_VruumbaRace::CallFunc_FFloor_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(VruumbaRace_C_ExecuteUbergraph_VruumbaRace, CallFunc_Subtract_FloatFloat_ReturnValue) == 0x000130, "Member 'VruumbaRace_C_ExecuteUbergraph_VruumbaRace::CallFunc_Subtract_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(VruumbaRace_C_ExecuteUbergraph_VruumbaRace, CallFunc_Conv_IntToString_ReturnValue) == 0x000138, "Member 'VruumbaRace_C_ExecuteUbergraph_VruumbaRace::CallFunc_Conv_IntToString_ReturnValue' has a wrong offset!");
static_assert(offsetof(VruumbaRace_C_ExecuteUbergraph_VruumbaRace, CallFunc_Multiply_FloatFloat_ReturnValue) == 0x000148, "Member 'VruumbaRace_C_ExecuteUbergraph_VruumbaRace::CallFunc_Multiply_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(VruumbaRace_C_ExecuteUbergraph_VruumbaRace, CallFunc_Concat_StrStr_ReturnValue) == 0x000150, "Member 'VruumbaRace_C_ExecuteUbergraph_VruumbaRace::CallFunc_Concat_StrStr_ReturnValue' has a wrong offset!");
static_assert(offsetof(VruumbaRace_C_ExecuteUbergraph_VruumbaRace, CallFunc_FFloor_ReturnValue_2) == 0x000160, "Member 'VruumbaRace_C_ExecuteUbergraph_VruumbaRace::CallFunc_FFloor_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(VruumbaRace_C_ExecuteUbergraph_VruumbaRace, CallFunc_Conv_IntToString_ReturnValue_1) == 0x000168, "Member 'VruumbaRace_C_ExecuteUbergraph_VruumbaRace::CallFunc_Conv_IntToString_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(VruumbaRace_C_ExecuteUbergraph_VruumbaRace, CallFunc_Greater_IntInt_ReturnValue) == 0x000178, "Member 'VruumbaRace_C_ExecuteUbergraph_VruumbaRace::CallFunc_Greater_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(VruumbaRace_C_ExecuteUbergraph_VruumbaRace, CallFunc_Conv_IntToString_ReturnValue_2) == 0x000180, "Member 'VruumbaRace_C_ExecuteUbergraph_VruumbaRace::CallFunc_Conv_IntToString_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(VruumbaRace_C_ExecuteUbergraph_VruumbaRace, CallFunc_Conv_IntToString_ReturnValue_3) == 0x000190, "Member 'VruumbaRace_C_ExecuteUbergraph_VruumbaRace::CallFunc_Conv_IntToString_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(VruumbaRace_C_ExecuteUbergraph_VruumbaRace, CallFunc_Greater_IntInt_ReturnValue_1) == 0x0001A0, "Member 'VruumbaRace_C_ExecuteUbergraph_VruumbaRace::CallFunc_Greater_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(VruumbaRace_C_ExecuteUbergraph_VruumbaRace, CallFunc_Concat_StrStr_ReturnValue_1) == 0x0001A8, "Member 'VruumbaRace_C_ExecuteUbergraph_VruumbaRace::CallFunc_Concat_StrStr_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(VruumbaRace_C_ExecuteUbergraph_VruumbaRace, CallFunc_Divide_FloatFloat_ReturnValue) == 0x0001B8, "Member 'VruumbaRace_C_ExecuteUbergraph_VruumbaRace::CallFunc_Divide_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(VruumbaRace_C_ExecuteUbergraph_VruumbaRace, CallFunc_FFloor_ReturnValue_3) == 0x0001BC, "Member 'VruumbaRace_C_ExecuteUbergraph_VruumbaRace::CallFunc_FFloor_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(VruumbaRace_C_ExecuteUbergraph_VruumbaRace, CallFunc_Conv_IntToString_ReturnValue_4) == 0x0001C0, "Member 'VruumbaRace_C_ExecuteUbergraph_VruumbaRace::CallFunc_Conv_IntToString_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(VruumbaRace_C_ExecuteUbergraph_VruumbaRace, CallFunc_Conv_IntToString_ReturnValue_5) == 0x0001D0, "Member 'VruumbaRace_C_ExecuteUbergraph_VruumbaRace::CallFunc_Conv_IntToString_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(VruumbaRace_C_ExecuteUbergraph_VruumbaRace, CallFunc_Concat_StrStr_ReturnValue_2) == 0x0001E0, "Member 'VruumbaRace_C_ExecuteUbergraph_VruumbaRace::CallFunc_Concat_StrStr_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(VruumbaRace_C_ExecuteUbergraph_VruumbaRace, CallFunc_Greater_IntInt_ReturnValue_2) == 0x0001F0, "Member 'VruumbaRace_C_ExecuteUbergraph_VruumbaRace::CallFunc_Greater_IntInt_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(VruumbaRace_C_ExecuteUbergraph_VruumbaRace, K2Node_Select_Default) == 0x0001F8, "Member 'VruumbaRace_C_ExecuteUbergraph_VruumbaRace::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(VruumbaRace_C_ExecuteUbergraph_VruumbaRace, CallFunc_Concat_StrStr_ReturnValue_3) == 0x000208, "Member 'VruumbaRace_C_ExecuteUbergraph_VruumbaRace::CallFunc_Concat_StrStr_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(VruumbaRace_C_ExecuteUbergraph_VruumbaRace, CallFunc_Check_Best_Personal_Race_Time_BestPersonalTime) == 0x000218, "Member 'VruumbaRace_C_ExecuteUbergraph_VruumbaRace::CallFunc_Check_Best_Personal_Race_Time_BestPersonalTime' has a wrong offset!");
static_assert(offsetof(VruumbaRace_C_ExecuteUbergraph_VruumbaRace, K2Node_CustomEvent_NextCheckPoint_1) == 0x00021C, "Member 'VruumbaRace_C_ExecuteUbergraph_VruumbaRace::K2Node_CustomEvent_NextCheckPoint_1' has a wrong offset!");
static_assert(offsetof(VruumbaRace_C_ExecuteUbergraph_VruumbaRace, K2Node_CustomEvent_Time) == 0x000220, "Member 'VruumbaRace_C_ExecuteUbergraph_VruumbaRace::K2Node_CustomEvent_Time' has a wrong offset!");
static_assert(offsetof(VruumbaRace_C_ExecuteUbergraph_VruumbaRace, K2Node_CustomEvent_VruumbaPlayer) == 0x000228, "Member 'VruumbaRace_C_ExecuteUbergraph_VruumbaRace::K2Node_CustomEvent_VruumbaPlayer' has a wrong offset!");
static_assert(offsetof(VruumbaRace_C_ExecuteUbergraph_VruumbaRace, Temp_int_Loop_Counter_Variable_1) == 0x000230, "Member 'VruumbaRace_C_ExecuteUbergraph_VruumbaRace::Temp_int_Loop_Counter_Variable_1' has a wrong offset!");
static_assert(offsetof(VruumbaRace_C_ExecuteUbergraph_VruumbaRace, CallFunc_Less_IntInt_ReturnValue_1) == 0x000234, "Member 'VruumbaRace_C_ExecuteUbergraph_VruumbaRace::CallFunc_Less_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(VruumbaRace_C_ExecuteUbergraph_VruumbaRace, CallFunc_Add_IntInt_ReturnValue_3) == 0x000238, "Member 'VruumbaRace_C_ExecuteUbergraph_VruumbaRace::CallFunc_Add_IntInt_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(VruumbaRace_C_ExecuteUbergraph_VruumbaRace, CallFunc_GetPlayerCharacter_ReturnValue) == 0x000240, "Member 'VruumbaRace_C_ExecuteUbergraph_VruumbaRace::CallFunc_GetPlayerCharacter_ReturnValue' has a wrong offset!");
static_assert(offsetof(VruumbaRace_C_ExecuteUbergraph_VruumbaRace, K2Node_DynamicCast_AsICharacter_SCT) == 0x000248, "Member 'VruumbaRace_C_ExecuteUbergraph_VruumbaRace::K2Node_DynamicCast_AsICharacter_SCT' has a wrong offset!");
static_assert(offsetof(VruumbaRace_C_ExecuteUbergraph_VruumbaRace, K2Node_DynamicCast_bSuccess_1) == 0x000258, "Member 'VruumbaRace_C_ExecuteUbergraph_VruumbaRace::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(VruumbaRace_C_ExecuteUbergraph_VruumbaRace, CallFunc_IsAliveBPI_Alive) == 0x000259, "Member 'VruumbaRace_C_ExecuteUbergraph_VruumbaRace::CallFunc_IsAliveBPI_Alive' has a wrong offset!");
static_assert(offsetof(VruumbaRace_C_ExecuteUbergraph_VruumbaRace, K2Node_CustomEvent_Vruumba_Player) == 0x000260, "Member 'VruumbaRace_C_ExecuteUbergraph_VruumbaRace::K2Node_CustomEvent_Vruumba_Player' has a wrong offset!");
static_assert(offsetof(VruumbaRace_C_ExecuteUbergraph_VruumbaRace, CallFunc_Array_Get_Item_3) == 0x000268, "Member 'VruumbaRace_C_ExecuteUbergraph_VruumbaRace::CallFunc_Array_Get_Item_3' has a wrong offset!");
static_assert(offsetof(VruumbaRace_C_ExecuteUbergraph_VruumbaRace, CallFunc_Array_Length_ReturnValue_3) == 0x000270, "Member 'VruumbaRace_C_ExecuteUbergraph_VruumbaRace::CallFunc_Array_Length_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(VruumbaRace_C_ExecuteUbergraph_VruumbaRace, CallFunc_Less_IntInt_ReturnValue_2) == 0x000274, "Member 'VruumbaRace_C_ExecuteUbergraph_VruumbaRace::CallFunc_Less_IntInt_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(VruumbaRace_C_ExecuteUbergraph_VruumbaRace, CallFunc_IsValid_ReturnValue_4) == 0x000275, "Member 'VruumbaRace_C_ExecuteUbergraph_VruumbaRace::CallFunc_IsValid_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(VruumbaRace_C_ExecuteUbergraph_VruumbaRace, Temp_bool_Has_Been_Initd_Variable) == 0x000276, "Member 'VruumbaRace_C_ExecuteUbergraph_VruumbaRace::Temp_bool_Has_Been_Initd_Variable' has a wrong offset!");
static_assert(offsetof(VruumbaRace_C_ExecuteUbergraph_VruumbaRace, K2Node_CustomEvent_FirstCheckPoint) == 0x000277, "Member 'VruumbaRace_C_ExecuteUbergraph_VruumbaRace::K2Node_CustomEvent_FirstCheckPoint' has a wrong offset!");
static_assert(offsetof(VruumbaRace_C_ExecuteUbergraph_VruumbaRace, K2Node_CustomEvent_NextCheckPoint) == 0x000278, "Member 'VruumbaRace_C_ExecuteUbergraph_VruumbaRace::K2Node_CustomEvent_NextCheckPoint' has a wrong offset!");
static_assert(offsetof(VruumbaRace_C_ExecuteUbergraph_VruumbaRace, K2Node_CustomEvent_PreviousCheckPoint) == 0x000280, "Member 'VruumbaRace_C_ExecuteUbergraph_VruumbaRace::K2Node_CustomEvent_PreviousCheckPoint' has a wrong offset!");
static_assert(offsetof(VruumbaRace_C_ExecuteUbergraph_VruumbaRace, CallFunc_IsValid_ReturnValue_5) == 0x000288, "Member 'VruumbaRace_C_ExecuteUbergraph_VruumbaRace::CallFunc_IsValid_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(VruumbaRace_C_ExecuteUbergraph_VruumbaRace, CallFunc_K2_GetComponentLocation_ReturnValue) == 0x00028C, "Member 'VruumbaRace_C_ExecuteUbergraph_VruumbaRace::CallFunc_K2_GetComponentLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(VruumbaRace_C_ExecuteUbergraph_VruumbaRace, CallFunc_K2_GetComponentLocation_ReturnValue_1) == 0x000298, "Member 'VruumbaRace_C_ExecuteUbergraph_VruumbaRace::CallFunc_K2_GetComponentLocation_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(VruumbaRace_C_ExecuteUbergraph_VruumbaRace, Temp_bool_Variable_3) == 0x0002A4, "Member 'VruumbaRace_C_ExecuteUbergraph_VruumbaRace::Temp_bool_Variable_3' has a wrong offset!");
static_assert(offsetof(VruumbaRace_C_ExecuteUbergraph_VruumbaRace, Temp_bool_Variable_4) == 0x0002A5, "Member 'VruumbaRace_C_ExecuteUbergraph_VruumbaRace::Temp_bool_Variable_4' has a wrong offset!");
static_assert(offsetof(VruumbaRace_C_ExecuteUbergraph_VruumbaRace, K2Node_Select_Default_1) == 0x0002A8, "Member 'VruumbaRace_C_ExecuteUbergraph_VruumbaRace::K2Node_Select_Default_1' has a wrong offset!");
static_assert(offsetof(VruumbaRace_C_ExecuteUbergraph_VruumbaRace, K2Node_Select_Default_2) == 0x0002B8, "Member 'VruumbaRace_C_ExecuteUbergraph_VruumbaRace::K2Node_Select_Default_2' has a wrong offset!");
static_assert(offsetof(VruumbaRace_C_ExecuteUbergraph_VruumbaRace, CallFunc_Concat_StrStr_ReturnValue_4) == 0x0002C8, "Member 'VruumbaRace_C_ExecuteUbergraph_VruumbaRace::CallFunc_Concat_StrStr_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(VruumbaRace_C_ExecuteUbergraph_VruumbaRace, K2Node_Select_Default_3) == 0x0002D8, "Member 'VruumbaRace_C_ExecuteUbergraph_VruumbaRace::K2Node_Select_Default_3' has a wrong offset!");
static_assert(offsetof(VruumbaRace_C_ExecuteUbergraph_VruumbaRace, CallFunc_Concat_StrStr_ReturnValue_5) == 0x0002E0, "Member 'VruumbaRace_C_ExecuteUbergraph_VruumbaRace::CallFunc_Concat_StrStr_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(VruumbaRace_C_ExecuteUbergraph_VruumbaRace, CallFunc_GetSplineLength_ReturnValue) == 0x0002F0, "Member 'VruumbaRace_C_ExecuteUbergraph_VruumbaRace::CallFunc_GetSplineLength_ReturnValue' has a wrong offset!");
static_assert(offsetof(VruumbaRace_C_ExecuteUbergraph_VruumbaRace, CallFunc_Concat_StrStr_ReturnValue_6) == 0x0002F8, "Member 'VruumbaRace_C_ExecuteUbergraph_VruumbaRace::CallFunc_Concat_StrStr_ReturnValue_6' has a wrong offset!");
static_assert(offsetof(VruumbaRace_C_ExecuteUbergraph_VruumbaRace, CallFunc_Multiply_FloatFloat_ReturnValue_1) == 0x000308, "Member 'VruumbaRace_C_ExecuteUbergraph_VruumbaRace::CallFunc_Multiply_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(VruumbaRace_C_ExecuteUbergraph_VruumbaRace, CallFunc_Conv_StringToText_ReturnValue) == 0x000310, "Member 'VruumbaRace_C_ExecuteUbergraph_VruumbaRace::CallFunc_Conv_StringToText_ReturnValue' has a wrong offset!");
static_assert(offsetof(VruumbaRace_C_ExecuteUbergraph_VruumbaRace, CallFunc_GetRotationAtDistanceAlongSpline_ReturnValue) == 0x000328, "Member 'VruumbaRace_C_ExecuteUbergraph_VruumbaRace::CallFunc_GetRotationAtDistanceAlongSpline_ReturnValue' has a wrong offset!");
static_assert(offsetof(VruumbaRace_C_ExecuteUbergraph_VruumbaRace, CallFunc_GetLocationAtDistanceAlongSpline_ReturnValue) == 0x000334, "Member 'VruumbaRace_C_ExecuteUbergraph_VruumbaRace::CallFunc_GetLocationAtDistanceAlongSpline_ReturnValue' has a wrong offset!");
static_assert(offsetof(VruumbaRace_C_ExecuteUbergraph_VruumbaRace, Temp_bool_IsClosed_Variable) == 0x000340, "Member 'VruumbaRace_C_ExecuteUbergraph_VruumbaRace::Temp_bool_IsClosed_Variable' has a wrong offset!");
static_assert(offsetof(VruumbaRace_C_ExecuteUbergraph_VruumbaRace, CallFunc_MakeTransform_ReturnValue) == 0x000350, "Member 'VruumbaRace_C_ExecuteUbergraph_VruumbaRace::CallFunc_MakeTransform_ReturnValue' has a wrong offset!");
static_assert(offsetof(VruumbaRace_C_ExecuteUbergraph_VruumbaRace, CallFunc_K2_SetWorldTransform_SweepHitResult) == 0x000380, "Member 'VruumbaRace_C_ExecuteUbergraph_VruumbaRace::CallFunc_K2_SetWorldTransform_SweepHitResult' has a wrong offset!");
static_assert(offsetof(VruumbaRace_C_ExecuteUbergraph_VruumbaRace, CallFunc_GetPlayerCharacter_ReturnValue_1) == 0x000410, "Member 'VruumbaRace_C_ExecuteUbergraph_VruumbaRace::CallFunc_GetPlayerCharacter_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(VruumbaRace_C_ExecuteUbergraph_VruumbaRace, K2Node_DynamicCast_AsICharacter_SCT_1) == 0x000418, "Member 'VruumbaRace_C_ExecuteUbergraph_VruumbaRace::K2Node_DynamicCast_AsICharacter_SCT_1' has a wrong offset!");
static_assert(offsetof(VruumbaRace_C_ExecuteUbergraph_VruumbaRace, K2Node_DynamicCast_bSuccess_2) == 0x000428, "Member 'VruumbaRace_C_ExecuteUbergraph_VruumbaRace::K2Node_DynamicCast_bSuccess_2' has a wrong offset!");
static_assert(offsetof(VruumbaRace_C_ExecuteUbergraph_VruumbaRace, CallFunc_IsAliveBPI_Alive_1) == 0x000429, "Member 'VruumbaRace_C_ExecuteUbergraph_VruumbaRace::CallFunc_IsAliveBPI_Alive_1' has a wrong offset!");
static_assert(offsetof(VruumbaRace_C_ExecuteUbergraph_VruumbaRace, CallFunc_GetActorRightVector_ReturnValue) == 0x00042C, "Member 'VruumbaRace_C_ExecuteUbergraph_VruumbaRace::CallFunc_GetActorRightVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(VruumbaRace_C_ExecuteUbergraph_VruumbaRace, K2Node_Select_Default_4) == 0x000438, "Member 'VruumbaRace_C_ExecuteUbergraph_VruumbaRace::K2Node_Select_Default_4' has a wrong offset!");
static_assert(offsetof(VruumbaRace_C_ExecuteUbergraph_VruumbaRace, CallFunc_Dot_VectorVector_ReturnValue) == 0x000440, "Member 'VruumbaRace_C_ExecuteUbergraph_VruumbaRace::CallFunc_Dot_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(VruumbaRace_C_ExecuteUbergraph_VruumbaRace, CallFunc_GetSplineLength_ReturnValue_1) == 0x000444, "Member 'VruumbaRace_C_ExecuteUbergraph_VruumbaRace::CallFunc_GetSplineLength_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(VruumbaRace_C_ExecuteUbergraph_VruumbaRace, CallFunc_Greater_FloatFloat_ReturnValue) == 0x000448, "Member 'VruumbaRace_C_ExecuteUbergraph_VruumbaRace::CallFunc_Greater_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(VruumbaRace_C_ExecuteUbergraph_VruumbaRace, CallFunc_Multiply_FloatFloat_ReturnValue_2) == 0x00044C, "Member 'VruumbaRace_C_ExecuteUbergraph_VruumbaRace::CallFunc_Multiply_FloatFloat_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(VruumbaRace_C_ExecuteUbergraph_VruumbaRace, CallFunc_GetRotationAtDistanceAlongSpline_ReturnValue_1) == 0x000450, "Member 'VruumbaRace_C_ExecuteUbergraph_VruumbaRace::CallFunc_GetRotationAtDistanceAlongSpline_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(VruumbaRace_C_ExecuteUbergraph_VruumbaRace, CallFunc_GetLocationAtDistanceAlongSpline_ReturnValue_1) == 0x00045C, "Member 'VruumbaRace_C_ExecuteUbergraph_VruumbaRace::CallFunc_GetLocationAtDistanceAlongSpline_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(VruumbaRace_C_ExecuteUbergraph_VruumbaRace, CallFunc_MakeTransform_ReturnValue_1) == 0x000470, "Member 'VruumbaRace_C_ExecuteUbergraph_VruumbaRace::CallFunc_MakeTransform_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(VruumbaRace_C_ExecuteUbergraph_VruumbaRace, CallFunc_K2_SetWorldTransform_SweepHitResult_1) == 0x0004A0, "Member 'VruumbaRace_C_ExecuteUbergraph_VruumbaRace::CallFunc_K2_SetWorldTransform_SweepHitResult_1' has a wrong offset!");

// Function VruumbaRace.VruumbaRace_C.Draw Spline
// 0x0018 (0x0018 - 0x0000)
struct VruumbaRace_C_Draw_Spline final
{
public:
	bool                                          FirstCheckPoint;                                   // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AVruumbaRaceCheckPoint_C*               NextCheckPoint;                                    // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AVruumbaRaceCheckPoint_C*               PreviousCheckpoint;                                // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(VruumbaRace_C_Draw_Spline) == 0x000008, "Wrong alignment on VruumbaRace_C_Draw_Spline");
static_assert(sizeof(VruumbaRace_C_Draw_Spline) == 0x000018, "Wrong size on VruumbaRace_C_Draw_Spline");
static_assert(offsetof(VruumbaRace_C_Draw_Spline, FirstCheckPoint) == 0x000000, "Member 'VruumbaRace_C_Draw_Spline::FirstCheckPoint' has a wrong offset!");
static_assert(offsetof(VruumbaRace_C_Draw_Spline, NextCheckPoint) == 0x000008, "Member 'VruumbaRace_C_Draw_Spline::NextCheckPoint' has a wrong offset!");
static_assert(offsetof(VruumbaRace_C_Draw_Spline, PreviousCheckpoint) == 0x000010, "Member 'VruumbaRace_C_Draw_Spline::PreviousCheckpoint' has a wrong offset!");

// Function VruumbaRace.VruumbaRace_C.Server Give Score
// 0x0008 (0x0008 - 0x0000)
struct VruumbaRace_C_Server_Give_Score final
{
public:
	class AVruumbaSCTBP_C*                        Vruumba_Player;                                    // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(VruumbaRace_C_Server_Give_Score) == 0x000008, "Wrong alignment on VruumbaRace_C_Server_Give_Score");
static_assert(sizeof(VruumbaRace_C_Server_Give_Score) == 0x000008, "Wrong size on VruumbaRace_C_Server_Give_Score");
static_assert(offsetof(VruumbaRace_C_Server_Give_Score, Vruumba_Player) == 0x000000, "Member 'VruumbaRace_C_Server_Give_Score::Vruumba_Player' has a wrong offset!");

// Function VruumbaRace.VruumbaRace_C.Server Check Best Time
// 0x0010 (0x0010 - 0x0000)
struct VruumbaRace_C_Server_Check_Best_Time final
{
public:
	float                                         Time;                                              // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AVruumbaSCTBP_C*                        VruumbaPlayer_0;                                   // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(VruumbaRace_C_Server_Check_Best_Time) == 0x000008, "Wrong alignment on VruumbaRace_C_Server_Check_Best_Time");
static_assert(sizeof(VruumbaRace_C_Server_Check_Best_Time) == 0x000010, "Wrong size on VruumbaRace_C_Server_Check_Best_Time");
static_assert(offsetof(VruumbaRace_C_Server_Check_Best_Time, Time) == 0x000000, "Member 'VruumbaRace_C_Server_Check_Best_Time::Time' has a wrong offset!");
static_assert(offsetof(VruumbaRace_C_Server_Check_Best_Time, VruumbaPlayer_0) == 0x000008, "Member 'VruumbaRace_C_Server_Check_Best_Time::VruumbaPlayer_0' has a wrong offset!");

// Function VruumbaRace.VruumbaRace_C.CheckPoint Cleared
// 0x0004 (0x0004 - 0x0000)
struct VruumbaRace_C_CheckPoint_Cleared final
{
public:
	int32                                         NextCheckPoint;                                    // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(VruumbaRace_C_CheckPoint_Cleared) == 0x000004, "Wrong alignment on VruumbaRace_C_CheckPoint_Cleared");
static_assert(sizeof(VruumbaRace_C_CheckPoint_Cleared) == 0x000004, "Wrong size on VruumbaRace_C_CheckPoint_Cleared");
static_assert(offsetof(VruumbaRace_C_CheckPoint_Cleared, NextCheckPoint) == 0x000000, "Member 'VruumbaRace_C_CheckPoint_Cleared::NextCheckPoint' has a wrong offset!");

// Function VruumbaRace.VruumbaRace_C.Widget Update Leading Player
// 0x0010 (0x0010 - 0x0000)
struct VruumbaRace_C_Widget_Update_Leading_Player final
{
public:
	float                                         Time;                                              // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AVruumbaSCTBP_C*                        LeadingVruumbaPlayer;                              // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(VruumbaRace_C_Widget_Update_Leading_Player) == 0x000008, "Wrong alignment on VruumbaRace_C_Widget_Update_Leading_Player");
static_assert(sizeof(VruumbaRace_C_Widget_Update_Leading_Player) == 0x000010, "Wrong size on VruumbaRace_C_Widget_Update_Leading_Player");
static_assert(offsetof(VruumbaRace_C_Widget_Update_Leading_Player, Time) == 0x000000, "Member 'VruumbaRace_C_Widget_Update_Leading_Player::Time' has a wrong offset!");
static_assert(offsetof(VruumbaRace_C_Widget_Update_Leading_Player, LeadingVruumbaPlayer) == 0x000008, "Member 'VruumbaRace_C_Widget_Update_Leading_Player::LeadingVruumbaPlayer' has a wrong offset!");

// Function VruumbaRace.VruumbaRace_C.NewLeadingPlayer
// 0x0010 (0x0010 - 0x0000)
struct VruumbaRace_C_NewLeadingPlayer final
{
public:
	class AVruumbaSCTBP_C*                        LeadingVruumbaPlayer;                              // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Time;                                              // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(VruumbaRace_C_NewLeadingPlayer) == 0x000008, "Wrong alignment on VruumbaRace_C_NewLeadingPlayer");
static_assert(sizeof(VruumbaRace_C_NewLeadingPlayer) == 0x000010, "Wrong size on VruumbaRace_C_NewLeadingPlayer");
static_assert(offsetof(VruumbaRace_C_NewLeadingPlayer, LeadingVruumbaPlayer) == 0x000000, "Member 'VruumbaRace_C_NewLeadingPlayer::LeadingVruumbaPlayer' has a wrong offset!");
static_assert(offsetof(VruumbaRace_C_NewLeadingPlayer, Time) == 0x000008, "Member 'VruumbaRace_C_NewLeadingPlayer::Time' has a wrong offset!");

// Function VruumbaRace.VruumbaRace_C.BndEvt__Box_K2Node_ComponentBoundEvent_1_ComponentEndOverlapSignature__DelegateSignature
// 0x0020 (0x0020 - 0x0000)
struct VruumbaRace_C_BndEvt__Box_K2Node_ComponentBoundEvent_1_ComponentEndOverlapSignature__DelegateSignature final
{
public:
	class UPrimitiveComponent*                    OverlappedComponent;                               // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         OtherBodyIndex;                                    // 0x0018(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(VruumbaRace_C_BndEvt__Box_K2Node_ComponentBoundEvent_1_ComponentEndOverlapSignature__DelegateSignature) == 0x000008, "Wrong alignment on VruumbaRace_C_BndEvt__Box_K2Node_ComponentBoundEvent_1_ComponentEndOverlapSignature__DelegateSignature");
static_assert(sizeof(VruumbaRace_C_BndEvt__Box_K2Node_ComponentBoundEvent_1_ComponentEndOverlapSignature__DelegateSignature) == 0x000020, "Wrong size on VruumbaRace_C_BndEvt__Box_K2Node_ComponentBoundEvent_1_ComponentEndOverlapSignature__DelegateSignature");
static_assert(offsetof(VruumbaRace_C_BndEvt__Box_K2Node_ComponentBoundEvent_1_ComponentEndOverlapSignature__DelegateSignature, OverlappedComponent) == 0x000000, "Member 'VruumbaRace_C_BndEvt__Box_K2Node_ComponentBoundEvent_1_ComponentEndOverlapSignature__DelegateSignature::OverlappedComponent' has a wrong offset!");
static_assert(offsetof(VruumbaRace_C_BndEvt__Box_K2Node_ComponentBoundEvent_1_ComponentEndOverlapSignature__DelegateSignature, OtherActor) == 0x000008, "Member 'VruumbaRace_C_BndEvt__Box_K2Node_ComponentBoundEvent_1_ComponentEndOverlapSignature__DelegateSignature::OtherActor' has a wrong offset!");
static_assert(offsetof(VruumbaRace_C_BndEvt__Box_K2Node_ComponentBoundEvent_1_ComponentEndOverlapSignature__DelegateSignature, OtherComp) == 0x000010, "Member 'VruumbaRace_C_BndEvt__Box_K2Node_ComponentBoundEvent_1_ComponentEndOverlapSignature__DelegateSignature::OtherComp' has a wrong offset!");
static_assert(offsetof(VruumbaRace_C_BndEvt__Box_K2Node_ComponentBoundEvent_1_ComponentEndOverlapSignature__DelegateSignature, OtherBodyIndex) == 0x000018, "Member 'VruumbaRace_C_BndEvt__Box_K2Node_ComponentBoundEvent_1_ComponentEndOverlapSignature__DelegateSignature::OtherBodyIndex' has a wrong offset!");

// Function VruumbaRace.VruumbaRace_C.ActivateCheckpoint
// 0x0018 (0x0018 - 0x0000)
struct VruumbaRace_C_ActivateCheckpoint final
{
public:
	class AVruumbaRaceCheckPoint_C*               NextCheckPoint;                                    // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          FirstCheckPoint;                                   // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          LastCheckPoint;                                    // 0x0009(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_A[0x6];                                        // 0x000A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class AVruumbaRaceCheckPoint_C*               PreviousCheckpoint;                                // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(VruumbaRace_C_ActivateCheckpoint) == 0x000008, "Wrong alignment on VruumbaRace_C_ActivateCheckpoint");
static_assert(sizeof(VruumbaRace_C_ActivateCheckpoint) == 0x000018, "Wrong size on VruumbaRace_C_ActivateCheckpoint");
static_assert(offsetof(VruumbaRace_C_ActivateCheckpoint, NextCheckPoint) == 0x000000, "Member 'VruumbaRace_C_ActivateCheckpoint::NextCheckPoint' has a wrong offset!");
static_assert(offsetof(VruumbaRace_C_ActivateCheckpoint, FirstCheckPoint) == 0x000008, "Member 'VruumbaRace_C_ActivateCheckpoint::FirstCheckPoint' has a wrong offset!");
static_assert(offsetof(VruumbaRace_C_ActivateCheckpoint, LastCheckPoint) == 0x000009, "Member 'VruumbaRace_C_ActivateCheckpoint::LastCheckPoint' has a wrong offset!");
static_assert(offsetof(VruumbaRace_C_ActivateCheckpoint, PreviousCheckpoint) == 0x000010, "Member 'VruumbaRace_C_ActivateCheckpoint::PreviousCheckpoint' has a wrong offset!");

// Function VruumbaRace.VruumbaRace_C.RaceCheck
// 0x0060 (0x0060 - 0x0000)
struct VruumbaRace_C_RaceCheck final
{
public:
	int32                                         Checkpoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AVruumbaRaceCheckPoint_C*               CheckPointRef;                                     // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AVruumbaRaceCheckPoint_C*               PreviousCheckpoint;                                // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         LCheckpoint;                                       // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TDelegate<void(EAkCallbackType CallbackType, class UAkCallbackInfo* CallbackInfo)> Temp_delegate_Variable;                            // 0x001C(0x0010)(ConstParm, ZeroConstructor, NoDestructor)
	int32                                         CallFunc_Subtract_IntInt_ReturnValue;              // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<struct FAkExternalSourceInfo>          Temp_struct_Variable;                              // 0x0030(0x0010)(ConstParm, ReferenceParm)
	class AVruumbaRaceCheckPoint_C*               CallFunc_Array_Get_Item;                           // 0x0040(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_PostAkEvent_ReturnValue;                  // 0x0048(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Subtract_IntInt_ReturnValue_1;            // 0x004C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue;            // 0x0050(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue_1;          // 0x0051(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_52[0x6];                                       // 0x0052(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class AVruumbaRaceCheckPoint_C*               CallFunc_Array_Get_Item_1;                         // 0x0058(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(VruumbaRace_C_RaceCheck) == 0x000008, "Wrong alignment on VruumbaRace_C_RaceCheck");
static_assert(sizeof(VruumbaRace_C_RaceCheck) == 0x000060, "Wrong size on VruumbaRace_C_RaceCheck");
static_assert(offsetof(VruumbaRace_C_RaceCheck, Checkpoint) == 0x000000, "Member 'VruumbaRace_C_RaceCheck::Checkpoint' has a wrong offset!");
static_assert(offsetof(VruumbaRace_C_RaceCheck, CheckPointRef) == 0x000008, "Member 'VruumbaRace_C_RaceCheck::CheckPointRef' has a wrong offset!");
static_assert(offsetof(VruumbaRace_C_RaceCheck, PreviousCheckpoint) == 0x000010, "Member 'VruumbaRace_C_RaceCheck::PreviousCheckpoint' has a wrong offset!");
static_assert(offsetof(VruumbaRace_C_RaceCheck, LCheckpoint) == 0x000018, "Member 'VruumbaRace_C_RaceCheck::LCheckpoint' has a wrong offset!");
static_assert(offsetof(VruumbaRace_C_RaceCheck, Temp_delegate_Variable) == 0x00001C, "Member 'VruumbaRace_C_RaceCheck::Temp_delegate_Variable' has a wrong offset!");
static_assert(offsetof(VruumbaRace_C_RaceCheck, CallFunc_Subtract_IntInt_ReturnValue) == 0x00002C, "Member 'VruumbaRace_C_RaceCheck::CallFunc_Subtract_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(VruumbaRace_C_RaceCheck, Temp_struct_Variable) == 0x000030, "Member 'VruumbaRace_C_RaceCheck::Temp_struct_Variable' has a wrong offset!");
static_assert(offsetof(VruumbaRace_C_RaceCheck, CallFunc_Array_Get_Item) == 0x000040, "Member 'VruumbaRace_C_RaceCheck::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(VruumbaRace_C_RaceCheck, CallFunc_PostAkEvent_ReturnValue) == 0x000048, "Member 'VruumbaRace_C_RaceCheck::CallFunc_PostAkEvent_ReturnValue' has a wrong offset!");
static_assert(offsetof(VruumbaRace_C_RaceCheck, CallFunc_Subtract_IntInt_ReturnValue_1) == 0x00004C, "Member 'VruumbaRace_C_RaceCheck::CallFunc_Subtract_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(VruumbaRace_C_RaceCheck, CallFunc_EqualEqual_IntInt_ReturnValue) == 0x000050, "Member 'VruumbaRace_C_RaceCheck::CallFunc_EqualEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(VruumbaRace_C_RaceCheck, CallFunc_EqualEqual_IntInt_ReturnValue_1) == 0x000051, "Member 'VruumbaRace_C_RaceCheck::CallFunc_EqualEqual_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(VruumbaRace_C_RaceCheck, CallFunc_Array_Get_Item_1) == 0x000058, "Member 'VruumbaRace_C_RaceCheck::CallFunc_Array_Get_Item_1' has a wrong offset!");

// Function VruumbaRace.VruumbaRace_C.Check Best Global Time
// 0x0018 (0x0018 - 0x0000)
struct VruumbaRace_C_Check_Best_Global_Time final
{
public:
	float                                         Time;                                              // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AVruumbaSCTBP_C*                        InVruumbaPlayer;                                   // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_FloatFloat_ReturnValue;         // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Less_FloatFloat_ReturnValue;              // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(VruumbaRace_C_Check_Best_Global_Time) == 0x000008, "Wrong alignment on VruumbaRace_C_Check_Best_Global_Time");
static_assert(sizeof(VruumbaRace_C_Check_Best_Global_Time) == 0x000018, "Wrong size on VruumbaRace_C_Check_Best_Global_Time");
static_assert(offsetof(VruumbaRace_C_Check_Best_Global_Time, Time) == 0x000000, "Member 'VruumbaRace_C_Check_Best_Global_Time::Time' has a wrong offset!");
static_assert(offsetof(VruumbaRace_C_Check_Best_Global_Time, InVruumbaPlayer) == 0x000008, "Member 'VruumbaRace_C_Check_Best_Global_Time::InVruumbaPlayer' has a wrong offset!");
static_assert(offsetof(VruumbaRace_C_Check_Best_Global_Time, CallFunc_LessEqual_FloatFloat_ReturnValue) == 0x000010, "Member 'VruumbaRace_C_Check_Best_Global_Time::CallFunc_LessEqual_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(VruumbaRace_C_Check_Best_Global_Time, CallFunc_Less_FloatFloat_ReturnValue) == 0x000011, "Member 'VruumbaRace_C_Check_Best_Global_Time::CallFunc_Less_FloatFloat_ReturnValue' has a wrong offset!");

// Function VruumbaRace.VruumbaRace_C.Calculate Result
// 0x0008 (0x0008 - 0x0000)
struct VruumbaRace_C_Calculate_Result final
{
public:
	class APlayerState*                           VruumbaPlayerState;                                // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(VruumbaRace_C_Calculate_Result) == 0x000008, "Wrong alignment on VruumbaRace_C_Calculate_Result");
static_assert(sizeof(VruumbaRace_C_Calculate_Result) == 0x000008, "Wrong size on VruumbaRace_C_Calculate_Result");
static_assert(offsetof(VruumbaRace_C_Calculate_Result, VruumbaPlayerState) == 0x000000, "Member 'VruumbaRace_C_Calculate_Result::VruumbaPlayerState' has a wrong offset!");

// Function VruumbaRace.VruumbaRace_C.Hide Check Points
// 0x0020 (0x0020 - 0x0000)
struct VruumbaRace_C_Hide_Check_Points final
{
public:
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AVruumbaRaceCheckPoint_C*               CallFunc_Array_Get_Item;                           // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(VruumbaRace_C_Hide_Check_Points) == 0x000008, "Wrong alignment on VruumbaRace_C_Hide_Check_Points");
static_assert(sizeof(VruumbaRace_C_Hide_Check_Points) == 0x000020, "Wrong size on VruumbaRace_C_Hide_Check_Points");
static_assert(offsetof(VruumbaRace_C_Hide_Check_Points, Temp_int_Array_Index_Variable) == 0x000000, "Member 'VruumbaRace_C_Hide_Check_Points::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(VruumbaRace_C_Hide_Check_Points, Temp_int_Loop_Counter_Variable) == 0x000004, "Member 'VruumbaRace_C_Hide_Check_Points::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(VruumbaRace_C_Hide_Check_Points, CallFunc_Add_IntInt_ReturnValue) == 0x000008, "Member 'VruumbaRace_C_Hide_Check_Points::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(VruumbaRace_C_Hide_Check_Points, CallFunc_Array_Length_ReturnValue) == 0x00000C, "Member 'VruumbaRace_C_Hide_Check_Points::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(VruumbaRace_C_Hide_Check_Points, CallFunc_Array_Get_Item) == 0x000010, "Member 'VruumbaRace_C_Hide_Check_Points::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(VruumbaRace_C_Hide_Check_Points, CallFunc_Less_IntInt_ReturnValue) == 0x000018, "Member 'VruumbaRace_C_Hide_Check_Points::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");

}

