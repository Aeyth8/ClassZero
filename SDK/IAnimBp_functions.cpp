#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: IAnimBp

#include "Basic.hpp"

#include "IAnimBp_classes.hpp"
#include "IAnimBp_parameters.hpp"


namespace SDK
{

// Function IAnimBp.IAnimBp_C.GetSetupValuesBPI
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   InCrouchSpeed                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   InWalkSpeed                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   InRunSpeed                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   InSprintSpeed                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    InFemale                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// float                                   CrouchSpeed                                            (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   WalkSpeed                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   RunSpeed                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   SprintSpeed                                            (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Female                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void IIAnimBp_C::GetSetupValuesBPI(float InCrouchSpeed, float InWalkSpeed, float InRunSpeed, float InSprintSpeed, bool InFemale, float* CrouchSpeed, float* WalkSpeed, float* RunSpeed, float* SprintSpeed, bool* Female)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("IAnimBp_C", "GetSetupValuesBPI");

	Params::IAnimBp_C_GetSetupValuesBPI Parms{};

	Parms.InCrouchSpeed = InCrouchSpeed;
	Parms.InWalkSpeed = InWalkSpeed;
	Parms.InRunSpeed = InRunSpeed;
	Parms.InSprintSpeed = InSprintSpeed;
	Parms.InFemale = InFemale;

	UObject::ProcessEvent(Func, &Parms);

	if (CrouchSpeed != nullptr)
		*CrouchSpeed = Parms.CrouchSpeed;

	if (WalkSpeed != nullptr)
		*WalkSpeed = Parms.WalkSpeed;

	if (RunSpeed != nullptr)
		*RunSpeed = Parms.RunSpeed;

	if (SprintSpeed != nullptr)
		*SprintSpeed = Parms.SprintSpeed;

	if (Female != nullptr)
		*Female = Parms.Female;
}


// Function IAnimBp.IAnimBp_C.GetEssentialValuesBPI
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FVector                          InVelocity                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    InIsMoving                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    InHasMovementInput                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    InIsAiming                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// uint8                                   InAimType                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   InDirection                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   InCharacterRotationDifference                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   InVelocityDifference                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   InAimYawDelta                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   InAimYawRate                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FRotator                         InCharacterRotation                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// struct FRotator                         InLookingRotation                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// struct FRotator                         InLastVelocityRotation                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// struct FRotator                         InLastMovementInputRotation                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    InCarryingCorpse                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    InBeingCarriedCorpse                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// float                                   InAlcoholPercent                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          Velocity                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    IsMoving                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    HasMovementInput                                       (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    IsAiming                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
// uint8                                   AimType                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   Direction                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   CharacterRotationDifference                            (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   VelocityDifference                                     (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   AimYawDelta                                            (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   AimYawRate                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FRotator                         CharacterRotation                                      (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
// struct FRotator                         LookingRotation                                        (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
// struct FRotator                         LastVelocityRotation                                   (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
// struct FRotator                         LastMovementInputRotation                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    CarryingCorpse                                         (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    BeingCarriedCorpse                                     (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
// float                                   AlcoholPercent                                         (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IIAnimBp_C::GetEssentialValuesBPI(const struct FVector& InVelocity, bool InIsMoving, bool InHasMovementInput, bool InIsAiming, uint8 InAimType, float InDirection, float InCharacterRotationDifference, float InVelocityDifference, float InAimYawDelta, float InAimYawRate, const struct FRotator& InCharacterRotation, const struct FRotator& InLookingRotation, const struct FRotator& InLastVelocityRotation, const struct FRotator& InLastMovementInputRotation, bool InCarryingCorpse, bool InBeingCarriedCorpse, float InAlcoholPercent, struct FVector* Velocity, bool* IsMoving, bool* HasMovementInput, bool* IsAiming, uint8* AimType, float* Direction, float* CharacterRotationDifference, float* VelocityDifference, float* AimYawDelta, float* AimYawRate, struct FRotator* CharacterRotation, struct FRotator* LookingRotation, struct FRotator* LastVelocityRotation, struct FRotator* LastMovementInputRotation, bool* CarryingCorpse, bool* BeingCarriedCorpse, float* AlcoholPercent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("IAnimBp_C", "GetEssentialValuesBPI");

	Params::IAnimBp_C_GetEssentialValuesBPI Parms{};

	Parms.InVelocity = std::move(InVelocity);
	Parms.InIsMoving = InIsMoving;
	Parms.InHasMovementInput = InHasMovementInput;
	Parms.InIsAiming = InIsAiming;
	Parms.InAimType = InAimType;
	Parms.InDirection = InDirection;
	Parms.InCharacterRotationDifference = InCharacterRotationDifference;
	Parms.InVelocityDifference = InVelocityDifference;
	Parms.InAimYawDelta = InAimYawDelta;
	Parms.InAimYawRate = InAimYawRate;
	Parms.InCharacterRotation = std::move(InCharacterRotation);
	Parms.InLookingRotation = std::move(InLookingRotation);
	Parms.InLastVelocityRotation = std::move(InLastVelocityRotation);
	Parms.InLastMovementInputRotation = std::move(InLastMovementInputRotation);
	Parms.InCarryingCorpse = InCarryingCorpse;
	Parms.InBeingCarriedCorpse = InBeingCarriedCorpse;
	Parms.InAlcoholPercent = InAlcoholPercent;

	UObject::ProcessEvent(Func, &Parms);

	if (Velocity != nullptr)
		*Velocity = std::move(Parms.Velocity);

	if (IsMoving != nullptr)
		*IsMoving = Parms.IsMoving;

	if (HasMovementInput != nullptr)
		*HasMovementInput = Parms.HasMovementInput;

	if (IsAiming != nullptr)
		*IsAiming = Parms.IsAiming;

	if (AimType != nullptr)
		*AimType = Parms.AimType;

	if (Direction != nullptr)
		*Direction = Parms.Direction;

	if (CharacterRotationDifference != nullptr)
		*CharacterRotationDifference = Parms.CharacterRotationDifference;

	if (VelocityDifference != nullptr)
		*VelocityDifference = Parms.VelocityDifference;

	if (AimYawDelta != nullptr)
		*AimYawDelta = Parms.AimYawDelta;

	if (AimYawRate != nullptr)
		*AimYawRate = Parms.AimYawRate;

	if (CharacterRotation != nullptr)
		*CharacterRotation = std::move(Parms.CharacterRotation);

	if (LookingRotation != nullptr)
		*LookingRotation = std::move(Parms.LookingRotation);

	if (LastVelocityRotation != nullptr)
		*LastVelocityRotation = std::move(Parms.LastVelocityRotation);

	if (LastMovementInputRotation != nullptr)
		*LastMovementInputRotation = std::move(Parms.LastMovementInputRotation);

	if (CarryingCorpse != nullptr)
		*CarryingCorpse = Parms.CarryingCorpse;

	if (BeingCarriedCorpse != nullptr)
		*BeingCarriedCorpse = Parms.BeingCarriedCorpse;

	if (AlcoholPercent != nullptr)
		*AlcoholPercent = Parms.AlcoholPercent;
}


// Function IAnimBp.IAnimBp_C.AddCharacterRotationBPI
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FRotator                         AddAmount                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void IIAnimBp_C::AddCharacterRotationBPI(const struct FRotator& AddAmount)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("IAnimBp_C", "AddCharacterRotationBPI");

	Params::IAnimBp_C_AddCharacterRotationBPI Parms{};

	Parms.AddAmount = std::move(AddAmount);

	UObject::ProcessEvent(Func, &Parms);
}


// Function IAnimBp.IAnimBp_C.MovementModeChangedBPI
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// Engine::EMovementMode                   PrevMovementMode                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// Engine::EMovementMode                   NewMovementMode                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// uint8                                   PrevCustomMode                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// uint8                                   NewCustomMode                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IIAnimBp_C::MovementModeChangedBPI(Engine::EMovementMode PrevMovementMode, Engine::EMovementMode NewMovementMode, uint8 PrevCustomMode, uint8 NewCustomMode)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("IAnimBp_C", "MovementModeChangedBPI");

	Params::IAnimBp_C_MovementModeChangedBPI Parms{};

	Parms.PrevMovementMode = PrevMovementMode;
	Parms.NewMovementMode = NewMovementMode;
	Parms.PrevCustomMode = PrevCustomMode;
	Parms.NewCustomMode = NewCustomMode;

	UObject::ProcessEvent(Func, &Parms);
}


// Function IAnimBp.IAnimBp_C.SetStanceBPI
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// EStance                                 NewStance                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IIAnimBp_C::SetStanceBPI(EStance NewStance)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("IAnimBp_C", "SetStanceBPI");

	Params::IAnimBp_C_SetStanceBPI Parms{};

	Parms.NewStance = NewStance;

	UObject::ProcessEvent(Func, &Parms);
}


// Function IAnimBp.IAnimBp_C.LandedBPI
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FHitResult                       Hit                                                    (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, ContainsInstancedReference)

void IIAnimBp_C::LandedBPI(const struct FHitResult& Hit)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("IAnimBp_C", "LandedBPI");

	Params::IAnimBp_C_LandedBPI Parms{};

	Parms.Hit = std::move(Hit);

	UObject::ProcessEvent(Func, &Parms);
}


// Function IAnimBp.IAnimBp_C.ShouldSprintBPI
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    ShouldSprint                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void IIAnimBp_C::ShouldSprintBPI(bool ShouldSprint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("IAnimBp_C", "ShouldSprintBPI");

	Params::IAnimBp_C_ShouldSprintBPI Parms{};

	Parms.ShouldSprint = ShouldSprint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function IAnimBp.IAnimBp_C.ReinitBPI
// (Public, BlueprintCallable, BlueprintEvent)

void IIAnimBp_C::ReinitBPI()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("IAnimBp_C", "ReinitBPI");

	UObject::ProcessEvent(Func, nullptr);
}


// Function IAnimBp.IAnimBp_C.ToRagdollBPI
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    ToRagdoll                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// struct FVector                          OptionalImpulse                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Force                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void IIAnimBp_C::ToRagdollBPI(bool ToRagdoll, const struct FVector& OptionalImpulse, bool Force)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("IAnimBp_C", "ToRagdollBPI");

	Params::IAnimBp_C_ToRagdollBPI Parms{};

	Parms.ToRagdoll = ToRagdoll;
	Parms.OptionalImpulse = std::move(OptionalImpulse);
	Parms.Force = Force;

	UObject::ProcessEvent(Func, &Parms);
}


// Function IAnimBp.IAnimBp_C.SetCharacterRotationBPI
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// ERPC_Enum                               RPC                                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    EnableRotationOverride                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// struct FRotator                         Rotation                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void IIAnimBp_C::SetCharacterRotationBPI(ERPC_Enum RPC, bool EnableRotationOverride, const struct FRotator& Rotation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("IAnimBp_C", "SetCharacterRotationBPI");

	Params::IAnimBp_C_SetCharacterRotationBPI Parms{};

	Parms.RPC = RPC;
	Parms.EnableRotationOverride = EnableRotationOverride;
	Parms.Rotation = std::move(Rotation);

	UObject::ProcessEvent(Func, &Parms);
}


// Function IAnimBp.IAnimBp_C.PlayEmoteBPI
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// uint8                                   EmoteID                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IIAnimBp_C::PlayEmoteBPI(uint8 EmoteID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("IAnimBp_C", "PlayEmoteBPI");

	Params::IAnimBp_C_PlayEmoteBPI Parms{};

	Parms.EmoteID = EmoteID;

	UObject::ProcessEvent(Func, &Parms);
}


// Function IAnimBp.IAnimBp_C.SetAimingBPI
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Aiming                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// uint8                                   AimType                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IIAnimBp_C::SetAimingBPI(bool Aiming, uint8 AimType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("IAnimBp_C", "SetAimingBPI");

	Params::IAnimBp_C_SetAimingBPI Parms{};

	Parms.Aiming = Aiming;
	Parms.AimType = AimType;

	UObject::ProcessEvent(Func, &Parms);
}


// Function IAnimBp.IAnimBp_C.SetMovementModeBPI
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// MovementMode::EMovementMode             NewMovementMode                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IIAnimBp_C::SetMovementModeBPI(MovementMode::EMovementMode NewMovementMode)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("IAnimBp_C", "SetMovementModeBPI");

	Params::IAnimBp_C_SetMovementModeBPI Parms{};

	Parms.NewMovementMode = NewMovementMode;

	UObject::ProcessEvent(Func, &Parms);
}


// Function IAnimBp.IAnimBp_C.SetGaitBPI
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// EGait                                   NewGait                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IIAnimBp_C::SetGaitBPI(EGait NewGait)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("IAnimBp_C", "SetGaitBPI");

	Params::IAnimBp_C_SetGaitBPI Parms{};

	Parms.NewGait = NewGait;

	UObject::ProcessEvent(Func, &Parms);
}


// Function IAnimBp.IAnimBp_C.SavePoseSnapshotBPI
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FName                             PoseName                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IIAnimBp_C::SavePoseSnapshotBPI(class FName PoseName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("IAnimBp_C", "SavePoseSnapshotBPI");

	Params::IAnimBp_C_SavePoseSnapshotBPI Parms{};

	Parms.PoseName = PoseName;

	UObject::ProcessEvent(Func, &Parms);
}


// Function IAnimBp.IAnimBp_C.PlayGetUpAnimBPI
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    FaceDown                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void IIAnimBp_C::PlayGetUpAnimBPI(bool FaceDown)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("IAnimBp_C", "PlayGetUpAnimBPI");

	Params::IAnimBp_C_PlayGetUpAnimBPI Parms{};

	Parms.FaceDown = FaceDown;

	UObject::ProcessEvent(Func, &Parms);
}


// Function IAnimBp.IAnimBp_C.AnimNotifyPivotBPI
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FPivotParams                     PivotParameters                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IIAnimBp_C::AnimNotifyPivotBPI(const struct FPivotParams& PivotParameters)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("IAnimBp_C", "AnimNotifyPivotBPI");

	Params::IAnimBp_C_AnimNotifyPivotBPI Parms{};

	Parms.PivotParameters = std::move(PivotParameters);

	UObject::ProcessEvent(Func, &Parms);
}


// Function IAnimBp.IAnimBp_C.AnimNotifyTurnInPlaceBPI
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UAnimMontage*                     TurnInPlaceMontage                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    ShouldTurnInPlace                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    TurningInPlace                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    TurningRight                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void IIAnimBp_C::AnimNotifyTurnInPlaceBPI(class UAnimMontage* TurnInPlaceMontage, bool ShouldTurnInPlace, bool TurningInPlace, bool TurningRight)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("IAnimBp_C", "AnimNotifyTurnInPlaceBPI");

	Params::IAnimBp_C_AnimNotifyTurnInPlaceBPI Parms{};

	Parms.TurnInPlaceMontage = TurnInPlaceMontage;
	Parms.ShouldTurnInPlace = ShouldTurnInPlace;
	Parms.TurningInPlace = TurningInPlace;
	Parms.TurningRight = TurningRight;

	UObject::ProcessEvent(Func, &Parms);
}


// Function IAnimBp.IAnimBp_C.AnimNotifyIdleEntryStateBPI
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// EIdleEntryState                         IdleEntryState                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IIAnimBp_C::AnimNotifyIdleEntryStateBPI(EIdleEntryState IdleEntryState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("IAnimBp_C", "AnimNotifyIdleEntryStateBPI");

	Params::IAnimBp_C_AnimNotifyIdleEntryStateBPI Parms{};

	Parms.IdleEntryState = IdleEntryState;

	UObject::ProcessEvent(Func, &Parms);
}


// Function IAnimBp.IAnimBp_C.EnableIKandAimOffsetBPI
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Enable                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void IIAnimBp_C::EnableIKandAimOffsetBPI(bool Enable)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("IAnimBp_C", "EnableIKandAimOffsetBPI");

	Params::IAnimBp_C_EnableIKandAimOffsetBPI Parms{};

	Parms.Enable = Enable;

	UObject::ProcessEvent(Func, &Parms);
}


// Function IAnimBp.IAnimBp_C.LaunchRagdollBPI
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FVector                          TargetLocation                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          Direction                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IIAnimBp_C::LaunchRagdollBPI(const struct FVector& TargetLocation, const struct FVector& Direction)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("IAnimBp_C", "LaunchRagdollBPI");

	Params::IAnimBp_C_LaunchRagdollBPI Parms{};

	Parms.TargetLocation = std::move(TargetLocation);
	Parms.Direction = std::move(Direction);

	UObject::ProcessEvent(Func, &Parms);
}


// Function IAnimBp.IAnimBp_C.BeingCarriedCorpseBPI
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    InputValue                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void IIAnimBp_C::BeingCarriedCorpseBPI(bool InputValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("IAnimBp_C", "BeingCarriedCorpseBPI");

	Params::IAnimBp_C_BeingCarriedCorpseBPI Parms{};

	Parms.InputValue = InputValue;

	UObject::ProcessEvent(Func, &Parms);
}


// Function IAnimBp.IAnimBp_C.CarryingCorpseBPI
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    InputValue                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void IIAnimBp_C::CarryingCorpseBPI(bool InputValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("IAnimBp_C", "CarryingCorpseBPI");

	Params::IAnimBp_C_CarryingCorpseBPI Parms{};

	Parms.InputValue = InputValue;

	UObject::ProcessEvent(Func, &Parms);
}

}

