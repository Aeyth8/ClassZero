#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_AAS_BeltSystem

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "BP_AAS_V2Base_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_AAS_BeltSystem.BP_AAS_BeltSystem_C
// 0x0080 (0x0570 - 0x04F0)
class ABP_AAS_BeltSystem_C final : public ABP_AAS_V2Base_C
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame_BP_AAS_BeltSystem_C;                // 0x04F0(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UStaticMeshComponent*                   SphereRangeCenter;                                 // 0x04F8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   SphereRangeMax;                                    // 0x0500(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   SphereRangeMin;                                    // 0x0508(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   IndicatorRangeInner;                               // 0x0510(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   IndicatorRangeOuter;                               // 0x0518(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   IndicatorRadiusBottom;                             // 0x0520(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   IndicatorRadiusMiddle;                             // 0x0528(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   IndicatorRadiusTop;                                // 0x0530(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              Radius;                                            // 0x0538(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Width;                                             // 0x0540(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Height;                                            // 0x0544(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         OrbitRange;                                        // 0x0548(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CenterAngle;                                       // 0x054C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Enable_Border_Shrinking;                           // 0x0550(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_551[0x3];                                      // 0x0551(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Border_Shrink_Strength;                            // 0x0554(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Border_Shrink_Threshold;                           // 0x0558(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Border_Shrink_Randomness;                          // 0x055C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Enable_Range_Shrinking;                            // 0x0560(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_561[0x3];                                      // 0x0561(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Range_Shrink_Strength;                             // 0x0564(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Range_Shrink_Threshold;                            // 0x0568(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Range_Shrink_Randomness;                           // 0x056C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_BP_AAS_BeltSystem(int32 EntryPoint);
	void Get_Indicator_Scale(const struct FVector2D& Radius_0, struct FVector* Return);
	struct FVector2D Get_Belt_Range_Inner();
	struct FVector2D Get_Belt_Range_Outer();
	void Get_New_Orbit_Position(struct FVector* New_Location, float* BeltStrength, float* OrbitStrength);
	void Get_Orbit_Range(struct FVector2D* Range);
	void ReceiveBeginPlay();
	void UpdateIndicators(bool* Completed);
	void Generate_Asteroid_Data(int32 Option_Index, int32 Asteroid_Index, const struct FStruct_AAS_AsteroidDefaults& Defaults, const struct FStruct_AAS_AsteroidOption& Options, bool* GenerationValid, struct FStruct_AAS_AsteroidInstanceData* New_Asteroid_Instance_Data);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_AAS_BeltSystem_C">();
	}
	static class ABP_AAS_BeltSystem_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_AAS_BeltSystem_C>();
	}
};
static_assert(alignof(ABP_AAS_BeltSystem_C) == 0x000010, "Wrong alignment on ABP_AAS_BeltSystem_C");
static_assert(sizeof(ABP_AAS_BeltSystem_C) == 0x000570, "Wrong size on ABP_AAS_BeltSystem_C");
static_assert(offsetof(ABP_AAS_BeltSystem_C, UberGraphFrame_BP_AAS_BeltSystem_C) == 0x0004F0, "Member 'ABP_AAS_BeltSystem_C::UberGraphFrame_BP_AAS_BeltSystem_C' has a wrong offset!");
static_assert(offsetof(ABP_AAS_BeltSystem_C, SphereRangeCenter) == 0x0004F8, "Member 'ABP_AAS_BeltSystem_C::SphereRangeCenter' has a wrong offset!");
static_assert(offsetof(ABP_AAS_BeltSystem_C, SphereRangeMax) == 0x000500, "Member 'ABP_AAS_BeltSystem_C::SphereRangeMax' has a wrong offset!");
static_assert(offsetof(ABP_AAS_BeltSystem_C, SphereRangeMin) == 0x000508, "Member 'ABP_AAS_BeltSystem_C::SphereRangeMin' has a wrong offset!");
static_assert(offsetof(ABP_AAS_BeltSystem_C, IndicatorRangeInner) == 0x000510, "Member 'ABP_AAS_BeltSystem_C::IndicatorRangeInner' has a wrong offset!");
static_assert(offsetof(ABP_AAS_BeltSystem_C, IndicatorRangeOuter) == 0x000518, "Member 'ABP_AAS_BeltSystem_C::IndicatorRangeOuter' has a wrong offset!");
static_assert(offsetof(ABP_AAS_BeltSystem_C, IndicatorRadiusBottom) == 0x000520, "Member 'ABP_AAS_BeltSystem_C::IndicatorRadiusBottom' has a wrong offset!");
static_assert(offsetof(ABP_AAS_BeltSystem_C, IndicatorRadiusMiddle) == 0x000528, "Member 'ABP_AAS_BeltSystem_C::IndicatorRadiusMiddle' has a wrong offset!");
static_assert(offsetof(ABP_AAS_BeltSystem_C, IndicatorRadiusTop) == 0x000530, "Member 'ABP_AAS_BeltSystem_C::IndicatorRadiusTop' has a wrong offset!");
static_assert(offsetof(ABP_AAS_BeltSystem_C, Radius) == 0x000538, "Member 'ABP_AAS_BeltSystem_C::Radius' has a wrong offset!");
static_assert(offsetof(ABP_AAS_BeltSystem_C, Width) == 0x000540, "Member 'ABP_AAS_BeltSystem_C::Width' has a wrong offset!");
static_assert(offsetof(ABP_AAS_BeltSystem_C, Height) == 0x000544, "Member 'ABP_AAS_BeltSystem_C::Height' has a wrong offset!");
static_assert(offsetof(ABP_AAS_BeltSystem_C, OrbitRange) == 0x000548, "Member 'ABP_AAS_BeltSystem_C::OrbitRange' has a wrong offset!");
static_assert(offsetof(ABP_AAS_BeltSystem_C, CenterAngle) == 0x00054C, "Member 'ABP_AAS_BeltSystem_C::CenterAngle' has a wrong offset!");
static_assert(offsetof(ABP_AAS_BeltSystem_C, Enable_Border_Shrinking) == 0x000550, "Member 'ABP_AAS_BeltSystem_C::Enable_Border_Shrinking' has a wrong offset!");
static_assert(offsetof(ABP_AAS_BeltSystem_C, Border_Shrink_Strength) == 0x000554, "Member 'ABP_AAS_BeltSystem_C::Border_Shrink_Strength' has a wrong offset!");
static_assert(offsetof(ABP_AAS_BeltSystem_C, Border_Shrink_Threshold) == 0x000558, "Member 'ABP_AAS_BeltSystem_C::Border_Shrink_Threshold' has a wrong offset!");
static_assert(offsetof(ABP_AAS_BeltSystem_C, Border_Shrink_Randomness) == 0x00055C, "Member 'ABP_AAS_BeltSystem_C::Border_Shrink_Randomness' has a wrong offset!");
static_assert(offsetof(ABP_AAS_BeltSystem_C, Enable_Range_Shrinking) == 0x000560, "Member 'ABP_AAS_BeltSystem_C::Enable_Range_Shrinking' has a wrong offset!");
static_assert(offsetof(ABP_AAS_BeltSystem_C, Range_Shrink_Strength) == 0x000564, "Member 'ABP_AAS_BeltSystem_C::Range_Shrink_Strength' has a wrong offset!");
static_assert(offsetof(ABP_AAS_BeltSystem_C, Range_Shrink_Threshold) == 0x000568, "Member 'ABP_AAS_BeltSystem_C::Range_Shrink_Threshold' has a wrong offset!");
static_assert(offsetof(ABP_AAS_BeltSystem_C, Range_Shrink_Randomness) == 0x00056C, "Member 'ABP_AAS_BeltSystem_C::Range_Shrink_Randomness' has a wrong offset!");

}

