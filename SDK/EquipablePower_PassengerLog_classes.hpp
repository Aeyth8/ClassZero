#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: EquipablePower_PassengerLog

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "SCT_structs.hpp"
#include "SCT_classes.hpp"
#include "PassengerLogFactType_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass EquipablePower_PassengerLog.EquipablePower_PassengerLog_C
// 0x0020 (0x0258 - 0x0238)
class AEquipablePower_PassengerLog_C final : public AEquipablePower
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0238(0x0008)(ZeroConstructor, Transient, DuplicateTransient, UObjectWrapper)
	class UStaticMeshComponent*                   StaticMesh;                                        // 0x0240(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        DefaultSceneRoot;                                  // 0x0248(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	bool                                          HiddenInGame;                                      // 0x0250(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor)

public:
	void ExecuteUbergraph_EquipablePower_PassengerLog(int32 EntryPoint);
	void On_Character_Destiny(const struct FDestiny& UltimateDestiny, bool IsPersonoid);
	void Initialize();
	void DisplayAirlockWidgetBPI(bool Show);
	void LogOutBPI();
	void AddAlcoholBPI(float InputValue, bool Delay);
	void TeleportLocationRotationBPI(const struct FVector& TargetLocation, const struct FRotator& TargetRotation);
	void EnableIK_AimDelayBPI();
	void SetDestinyBPI(EFate Fate, const struct FVector& Impulse);
	void PassengerLogVoteBPI(class AActor* AirlockTarget, class ACharacter* TargetCharacter, class ACharacter* VotingCharacter);
	void TrustVoteBPI(class AActor* TargetAirlock, bool Yes, class ACharacter* VotingCharacter);
	void EliminationVoteBPI(class AActor* AirlockTarget, class ACharacter* VotedCharacter, class ACharacter* VotingCharacter);
	void InitiateAirlockSequenceBPI();
	void StartElevatorBPI();
	void SetAimingStateBPI(bool Aiming, uint8 AimType);
	void RagdollCharacterBPI(bool ToRagdoll, float Duration, const struct FVector& OptionalImpulse, bool Force);
	void OnRep_HiddenInGame();
	void IsAliveBPI(bool* Alive);
	void GetHeldLogInfoBPI(EPassengerLogFactType* FactType, TArray<struct FPlayerData>* Players, bool* HasLog);
	void IsPersonoidBPI(bool* IsPersonoid);
	void GetPlayerNameBPI(class FString* Name_0);
	bool IsFemaleBPI();
	class UAbilitySystemComponent* GetAbilitySystemComponentBPI();
	class UTexture2D* GetPortrait();
	class USceneComponent* GetHomingTargetBPI();
	void IsPlayerBlocked(class APlayerState* Player, bool* bLocked);
	void IsPlayerConsoleCommunicationBlocked(class APlayerState* Player, bool* bLocked);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"EquipablePower_PassengerLog_C">();
	}
	static class AEquipablePower_PassengerLog_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<AEquipablePower_PassengerLog_C>();
	}
};
static_assert(alignof(AEquipablePower_PassengerLog_C) == 0x000008, "Wrong alignment on AEquipablePower_PassengerLog_C");
static_assert(sizeof(AEquipablePower_PassengerLog_C) == 0x000258, "Wrong size on AEquipablePower_PassengerLog_C");
static_assert(offsetof(AEquipablePower_PassengerLog_C, UberGraphFrame) == 0x000238, "Member 'AEquipablePower_PassengerLog_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(AEquipablePower_PassengerLog_C, StaticMesh) == 0x000240, "Member 'AEquipablePower_PassengerLog_C::StaticMesh' has a wrong offset!");
static_assert(offsetof(AEquipablePower_PassengerLog_C, DefaultSceneRoot) == 0x000248, "Member 'AEquipablePower_PassengerLog_C::DefaultSceneRoot' has a wrong offset!");
static_assert(offsetof(AEquipablePower_PassengerLog_C, HiddenInGame) == 0x000250, "Member 'AEquipablePower_PassengerLog_C::HiddenInGame' has a wrong offset!");

}

