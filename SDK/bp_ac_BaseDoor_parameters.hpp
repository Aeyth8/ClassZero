#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: bp_ac_BaseDoor

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "SCT_structs.hpp"
#include "AkAudio_structs.hpp"


namespace SDK::Params
{

// Function bp_ac_BaseDoor.bp_ac_BaseDoor_C.ExecuteUbergraph_bp_ac_BaseDoor
// 0x0368 (0x0368 - 0x0000)
struct bp_ac_BaseDoor_C_ExecuteUbergraph_bp_ac_BaseDoor final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FAkExternalSourceInfo>          Temp_struct_Variable;                              // 0x0008(0x0010)(ConstParm, ReferenceParm)
	bool                                          Temp_bool_IsClosed_Variable;                       // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Has_Been_Initd_Variable;                 // 0x0019(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x001A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsDedicatedServer_ReturnValue;            // 0x001B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsDedicatedServer_ReturnValue_1;          // 0x001C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UPrimitiveComponent*                    K2Node_ComponentBoundEvent_OverlappedComponent_1;  // 0x0020(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 K2Node_ComponentBoundEvent_OtherActor_1;           // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    K2Node_ComponentBoundEvent_OtherComp_1;            // 0x0030(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_ComponentBoundEvent_OtherBodyIndex_1;       // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_ComponentBoundEvent_bFromSweep;             // 0x003C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3D[0x3];                                       // 0x003D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             K2Node_ComponentBoundEvent_SweepResult;            // 0x0040(0x008C)(ConstParm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
	uint8                                         Pad_CC[0x4];                                       // 0x00CC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UPrimitiveComponent*                    K2Node_ComponentBoundEvent_OverlappedComponent;    // 0x00D0(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 K2Node_ComponentBoundEvent_OtherActor;             // 0x00D8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    K2Node_ComponentBoundEvent_OtherComp;              // 0x00E0(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_ComponentBoundEvent_OtherBodyIndex;         // 0x00E8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_EC[0x4];                                       // 0x00EC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UPrimitiveComponent*>            K2Node_MakeArray_Array;                            // 0x00F0(0x0010)(ReferenceParm, ContainsInstancedReference)
	class AVruumbaSCTBP_C*                        K2Node_DynamicCast_AsVruumba_SCTBP;                // 0x0100(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0108(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsACharacterOverlapping_Return_Value;     // 0x0109(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_10A[0x6];                                      // 0x010A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class AVruumbaSCTBP_C*                        K2Node_DynamicCast_AsVruumba_SCTBP_1;              // 0x0110(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x0118(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0119(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Has_Been_Initd_Variable_1;               // 0x011A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x011B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_2;                    // 0x011C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_CustomEvent_IsSabotaged;                    // 0x011D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_11E[0x2];                                      // 0x011E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         K2Node_CustomEvent_CooldownLeft;                   // 0x0120(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0124(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue_1;                // 0x0125(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_AnyCharacterWithinTrigger_CharacerFound;  // 0x0126(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_CustomEvent_IsLocked;                       // 0x0127(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_CustomEvent_IsOnCooldown;                   // 0x0128(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_IsClosed_Variable_1;                     // 0x0129(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_12A[0x2];                                      // 0x012A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         K2Node_CustomEvent_ButtonID;                       // 0x012C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 K2Node_CustomEvent_PressingPawn;                   // 0x0130(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_PressedUnlockByTiming_Unlocked;           // 0x0138(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_PressedUnlockBySequence_Unlocked;         // 0x0139(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_13A[0x2];                                      // 0x013A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Variable;                                 // 0x013C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_3;                    // 0x0140(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_141[0x3];                                      // 0x0141(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0144(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_CustomEvent_Buttons_attached_by_last_index; // 0x0148(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_14C[0x4];                                      // 0x014C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UPrimitiveComponent*>            CallFunc_GetOverlappingComponents_OutOverlappingComponents; // 0x0150(0x0010)(ReferenceParm, ContainsInstancedReference)
	bool                                          CallFunc_LessEqual_IntInt_ReturnValue;             // 0x0160(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsACharacterOverlapping_Return_Value_1;   // 0x0161(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue_2;                // 0x0162(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue_1;                 // 0x0163(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x0164(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_4;                    // 0x0165(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_166[0x2];                                      // 0x0166(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         K2Node_CustomEvent_CooldownRemaining;              // 0x0168(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_HasAuthority_ReturnValue;                 // 0x016C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_16D[0x3];                                      // 0x016D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void(EAkCallbackType CallbackType, class UAkCallbackInfo* CallbackInfo)> Temp_delegate_Variable;                            // 0x0170(0x0010)(ConstParm, ZeroConstructor, NoDestructor)
	TArray<struct FAkExternalSourceInfo>          Temp_struct_Variable_1;                            // 0x0180(0x0010)(ConstParm, ReferenceParm)
	bool                                          CallFunc_HasAuthority_ReturnValue_1;               // 0x0190(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_191[0x3];                                      // 0x0191(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Variable_1;                               // 0x0194(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Add_ReturnValue;                    // 0x0198(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_IntInt_ReturnValue_1;           // 0x019C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_19D[0x3];                                      // 0x019D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue_1;                 // 0x01A0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TDelegate<void(EAkCallbackType CallbackType, class UAkCallbackInfo* CallbackInfo)> Temp_delegate_Variable_1;                          // 0x01A4(0x0010)(ConstParm, ZeroConstructor, NoDestructor)
	bool                                          CallFunc_HasAuthority_ReturnValue_2;               // 0x01B4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_SwitchEnum_CmpSuccess_1;                    // 0x01B5(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_CanAutoClose_ReturnValue;                 // 0x01B6(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1B7[0x1];                                      // 0x01B7(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate;              // 0x01B8(0x0010)(ZeroConstructor, NoDestructor)
	struct FTimerHandle                           CallFunc_K2_SetTimerDelegate_ReturnValue;          // 0x01C8(0x0008)(NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue_2;                 // 0x01D0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1D1[0x3];                                      // 0x01D1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate_1;            // 0x01D4(0x0010)(ZeroConstructor, NoDestructor)
	uint8                                         Pad_1E4[0x4];                                      // 0x01E4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UPrimitiveComponent*>            CallFunc_GetOverlappingComponents_OutOverlappingComponents_1; // 0x01E8(0x0010)(ReferenceParm, ContainsInstancedReference)
	float                                         K2Node_Event_DeltaSeconds;                         // 0x01F8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsACharacterOverlapping_Return_Value_2;   // 0x01FC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1FD[0x3];                                      // 0x01FD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_CalculateDoorPosition_CurvedOpenAmount;   // 0x0200(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_204[0x4];                                      // 0x0204(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FAkExternalSourceInfo>          Temp_struct_Variable_2;                            // 0x0208(0x0010)(ConstParm, ReferenceParm)
	int32                                         CallFunc_PostAkEvent_ReturnValue;                  // 0x0218(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue_3;                // 0x021C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_HasAuthority_ReturnValue_3;               // 0x021D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable;                                // 0x021E(0x0001)(ConstParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_CustomEvent_IsOpened;                       // 0x021F(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanXOR_ReturnValue;                   // 0x0220(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_5;                    // 0x0221(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_222[0x2];                                      // 0x0222(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_PostAkEvent_ReturnValue_1;                // 0x0224(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_CustomEvent_IsHacked;                       // 0x0228(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_229[0x3];                                      // 0x0229(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void(EAkCallbackType CallbackType, class UAkCallbackInfo* CallbackInfo)> Temp_delegate_Variable_2;                          // 0x022C(0x0010)(ConstParm, ZeroConstructor, NoDestructor)
	uint8                                         Pad_23C[0x4];                                      // 0x023C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class APlayerState*                           K2Node_Event_SolvingPlayerPlayerState_1;           // 0x0240(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class APlayerState*                           K2Node_Event_SolvingPlayerPlayerState;             // 0x0248(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_RemoveGameplayTag_ReturnValue;            // 0x0250(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_251[0x7];                                      // 0x0251(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTimerHandle                           CallFunc_K2_SetTimerDelegate_ReturnValue_1;        // 0x0258(0x0008)(NoDestructor, HasGetValueTypeHash)
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate_2;            // 0x0260(0x0010)(ZeroConstructor, NoDestructor)
	struct FTimerHandle                           CallFunc_K2_SetTimerDelegate_ReturnValue_2;        // 0x0270(0x0008)(NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_ComponentBoundEvent_IsOpening;              // 0x0278(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_279[0x7];                                      // 0x0279(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FInteractionPayload                    K2Node_ComponentBoundEvent_payload_2;              // 0x0280(0x0030)(ConstParm, NoDestructor, ContainsInstancedReference)
	bool                                          CallFunc_RemoveGameplayTag_ReturnValue_1;          // 0x02B0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_RemoveGameplayTag_ReturnValue_2;          // 0x02B1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2B2[0x6];                                      // 0x02B2(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FInteractionPayload                    K2Node_ComponentBoundEvent_payload_1;              // 0x02B8(0x0030)(ConstParm, NoDestructor, ContainsInstancedReference)
	struct FInteractionPayload                    K2Node_ComponentBoundEvent_payload;                // 0x02E8(0x0030)(ConstParm, NoDestructor, ContainsInstancedReference)
	bool                                          K2Node_ComponentBoundEvent_wasCancelled;           // 0x0318(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_319[0x7];                                      // 0x0319(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ACharacterSCTBP_C*                      K2Node_DynamicCast_AsCharacter_SCTBP;              // 0x0320(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_2;                     // 0x0328(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_329[0x7];                                      // 0x0329(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ACharacterSCTBP_C*                      K2Node_DynamicCast_AsCharacter_SCTBP_1;            // 0x0330(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_3;                     // 0x0338(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_339[0x7];                                      // 0x0339(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FAkExternalSourceInfo>          Temp_struct_Variable_3;                            // 0x0340(0x0010)(ConstParm, ReferenceParm)
	int32                                         CallFunc_PostAkEvent_ReturnValue_2;                // 0x0350(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TDelegate<void(EAkCallbackType CallbackType, class UAkCallbackInfo* CallbackInfo)> Temp_delegate_Variable_3;                          // 0x0354(0x0010)(ConstParm, ZeroConstructor, NoDestructor)
	int32                                         CallFunc_PostAkEvent_ReturnValue_3;                // 0x0364(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(bp_ac_BaseDoor_C_ExecuteUbergraph_bp_ac_BaseDoor) == 0x000008, "Wrong alignment on bp_ac_BaseDoor_C_ExecuteUbergraph_bp_ac_BaseDoor");
static_assert(sizeof(bp_ac_BaseDoor_C_ExecuteUbergraph_bp_ac_BaseDoor) == 0x000368, "Wrong size on bp_ac_BaseDoor_C_ExecuteUbergraph_bp_ac_BaseDoor");
static_assert(offsetof(bp_ac_BaseDoor_C_ExecuteUbergraph_bp_ac_BaseDoor, EntryPoint) == 0x000000, "Member 'bp_ac_BaseDoor_C_ExecuteUbergraph_bp_ac_BaseDoor::EntryPoint' has a wrong offset!");
static_assert(offsetof(bp_ac_BaseDoor_C_ExecuteUbergraph_bp_ac_BaseDoor, Temp_struct_Variable) == 0x000008, "Member 'bp_ac_BaseDoor_C_ExecuteUbergraph_bp_ac_BaseDoor::Temp_struct_Variable' has a wrong offset!");
static_assert(offsetof(bp_ac_BaseDoor_C_ExecuteUbergraph_bp_ac_BaseDoor, Temp_bool_IsClosed_Variable) == 0x000018, "Member 'bp_ac_BaseDoor_C_ExecuteUbergraph_bp_ac_BaseDoor::Temp_bool_IsClosed_Variable' has a wrong offset!");
static_assert(offsetof(bp_ac_BaseDoor_C_ExecuteUbergraph_bp_ac_BaseDoor, Temp_bool_Has_Been_Initd_Variable) == 0x000019, "Member 'bp_ac_BaseDoor_C_ExecuteUbergraph_bp_ac_BaseDoor::Temp_bool_Has_Been_Initd_Variable' has a wrong offset!");
static_assert(offsetof(bp_ac_BaseDoor_C_ExecuteUbergraph_bp_ac_BaseDoor, CallFunc_IsValid_ReturnValue) == 0x00001A, "Member 'bp_ac_BaseDoor_C_ExecuteUbergraph_bp_ac_BaseDoor::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(bp_ac_BaseDoor_C_ExecuteUbergraph_bp_ac_BaseDoor, CallFunc_IsDedicatedServer_ReturnValue) == 0x00001B, "Member 'bp_ac_BaseDoor_C_ExecuteUbergraph_bp_ac_BaseDoor::CallFunc_IsDedicatedServer_ReturnValue' has a wrong offset!");
static_assert(offsetof(bp_ac_BaseDoor_C_ExecuteUbergraph_bp_ac_BaseDoor, CallFunc_IsDedicatedServer_ReturnValue_1) == 0x00001C, "Member 'bp_ac_BaseDoor_C_ExecuteUbergraph_bp_ac_BaseDoor::CallFunc_IsDedicatedServer_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(bp_ac_BaseDoor_C_ExecuteUbergraph_bp_ac_BaseDoor, K2Node_ComponentBoundEvent_OverlappedComponent_1) == 0x000020, "Member 'bp_ac_BaseDoor_C_ExecuteUbergraph_bp_ac_BaseDoor::K2Node_ComponentBoundEvent_OverlappedComponent_1' has a wrong offset!");
static_assert(offsetof(bp_ac_BaseDoor_C_ExecuteUbergraph_bp_ac_BaseDoor, K2Node_ComponentBoundEvent_OtherActor_1) == 0x000028, "Member 'bp_ac_BaseDoor_C_ExecuteUbergraph_bp_ac_BaseDoor::K2Node_ComponentBoundEvent_OtherActor_1' has a wrong offset!");
static_assert(offsetof(bp_ac_BaseDoor_C_ExecuteUbergraph_bp_ac_BaseDoor, K2Node_ComponentBoundEvent_OtherComp_1) == 0x000030, "Member 'bp_ac_BaseDoor_C_ExecuteUbergraph_bp_ac_BaseDoor::K2Node_ComponentBoundEvent_OtherComp_1' has a wrong offset!");
static_assert(offsetof(bp_ac_BaseDoor_C_ExecuteUbergraph_bp_ac_BaseDoor, K2Node_ComponentBoundEvent_OtherBodyIndex_1) == 0x000038, "Member 'bp_ac_BaseDoor_C_ExecuteUbergraph_bp_ac_BaseDoor::K2Node_ComponentBoundEvent_OtherBodyIndex_1' has a wrong offset!");
static_assert(offsetof(bp_ac_BaseDoor_C_ExecuteUbergraph_bp_ac_BaseDoor, K2Node_ComponentBoundEvent_bFromSweep) == 0x00003C, "Member 'bp_ac_BaseDoor_C_ExecuteUbergraph_bp_ac_BaseDoor::K2Node_ComponentBoundEvent_bFromSweep' has a wrong offset!");
static_assert(offsetof(bp_ac_BaseDoor_C_ExecuteUbergraph_bp_ac_BaseDoor, K2Node_ComponentBoundEvent_SweepResult) == 0x000040, "Member 'bp_ac_BaseDoor_C_ExecuteUbergraph_bp_ac_BaseDoor::K2Node_ComponentBoundEvent_SweepResult' has a wrong offset!");
static_assert(offsetof(bp_ac_BaseDoor_C_ExecuteUbergraph_bp_ac_BaseDoor, K2Node_ComponentBoundEvent_OverlappedComponent) == 0x0000D0, "Member 'bp_ac_BaseDoor_C_ExecuteUbergraph_bp_ac_BaseDoor::K2Node_ComponentBoundEvent_OverlappedComponent' has a wrong offset!");
static_assert(offsetof(bp_ac_BaseDoor_C_ExecuteUbergraph_bp_ac_BaseDoor, K2Node_ComponentBoundEvent_OtherActor) == 0x0000D8, "Member 'bp_ac_BaseDoor_C_ExecuteUbergraph_bp_ac_BaseDoor::K2Node_ComponentBoundEvent_OtherActor' has a wrong offset!");
static_assert(offsetof(bp_ac_BaseDoor_C_ExecuteUbergraph_bp_ac_BaseDoor, K2Node_ComponentBoundEvent_OtherComp) == 0x0000E0, "Member 'bp_ac_BaseDoor_C_ExecuteUbergraph_bp_ac_BaseDoor::K2Node_ComponentBoundEvent_OtherComp' has a wrong offset!");
static_assert(offsetof(bp_ac_BaseDoor_C_ExecuteUbergraph_bp_ac_BaseDoor, K2Node_ComponentBoundEvent_OtherBodyIndex) == 0x0000E8, "Member 'bp_ac_BaseDoor_C_ExecuteUbergraph_bp_ac_BaseDoor::K2Node_ComponentBoundEvent_OtherBodyIndex' has a wrong offset!");
static_assert(offsetof(bp_ac_BaseDoor_C_ExecuteUbergraph_bp_ac_BaseDoor, K2Node_MakeArray_Array) == 0x0000F0, "Member 'bp_ac_BaseDoor_C_ExecuteUbergraph_bp_ac_BaseDoor::K2Node_MakeArray_Array' has a wrong offset!");
static_assert(offsetof(bp_ac_BaseDoor_C_ExecuteUbergraph_bp_ac_BaseDoor, K2Node_DynamicCast_AsVruumba_SCTBP) == 0x000100, "Member 'bp_ac_BaseDoor_C_ExecuteUbergraph_bp_ac_BaseDoor::K2Node_DynamicCast_AsVruumba_SCTBP' has a wrong offset!");
static_assert(offsetof(bp_ac_BaseDoor_C_ExecuteUbergraph_bp_ac_BaseDoor, K2Node_DynamicCast_bSuccess) == 0x000108, "Member 'bp_ac_BaseDoor_C_ExecuteUbergraph_bp_ac_BaseDoor::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(bp_ac_BaseDoor_C_ExecuteUbergraph_bp_ac_BaseDoor, CallFunc_IsACharacterOverlapping_Return_Value) == 0x000109, "Member 'bp_ac_BaseDoor_C_ExecuteUbergraph_bp_ac_BaseDoor::CallFunc_IsACharacterOverlapping_Return_Value' has a wrong offset!");
static_assert(offsetof(bp_ac_BaseDoor_C_ExecuteUbergraph_bp_ac_BaseDoor, K2Node_DynamicCast_AsVruumba_SCTBP_1) == 0x000110, "Member 'bp_ac_BaseDoor_C_ExecuteUbergraph_bp_ac_BaseDoor::K2Node_DynamicCast_AsVruumba_SCTBP_1' has a wrong offset!");
static_assert(offsetof(bp_ac_BaseDoor_C_ExecuteUbergraph_bp_ac_BaseDoor, K2Node_DynamicCast_bSuccess_1) == 0x000118, "Member 'bp_ac_BaseDoor_C_ExecuteUbergraph_bp_ac_BaseDoor::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(bp_ac_BaseDoor_C_ExecuteUbergraph_bp_ac_BaseDoor, CallFunc_BooleanAND_ReturnValue) == 0x000119, "Member 'bp_ac_BaseDoor_C_ExecuteUbergraph_bp_ac_BaseDoor::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(bp_ac_BaseDoor_C_ExecuteUbergraph_bp_ac_BaseDoor, Temp_bool_Has_Been_Initd_Variable_1) == 0x00011A, "Member 'bp_ac_BaseDoor_C_ExecuteUbergraph_bp_ac_BaseDoor::Temp_bool_Has_Been_Initd_Variable_1' has a wrong offset!");
static_assert(offsetof(bp_ac_BaseDoor_C_ExecuteUbergraph_bp_ac_BaseDoor, CallFunc_IsValid_ReturnValue_1) == 0x00011B, "Member 'bp_ac_BaseDoor_C_ExecuteUbergraph_bp_ac_BaseDoor::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(bp_ac_BaseDoor_C_ExecuteUbergraph_bp_ac_BaseDoor, CallFunc_IsValid_ReturnValue_2) == 0x00011C, "Member 'bp_ac_BaseDoor_C_ExecuteUbergraph_bp_ac_BaseDoor::CallFunc_IsValid_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(bp_ac_BaseDoor_C_ExecuteUbergraph_bp_ac_BaseDoor, K2Node_CustomEvent_IsSabotaged) == 0x00011D, "Member 'bp_ac_BaseDoor_C_ExecuteUbergraph_bp_ac_BaseDoor::K2Node_CustomEvent_IsSabotaged' has a wrong offset!");
static_assert(offsetof(bp_ac_BaseDoor_C_ExecuteUbergraph_bp_ac_BaseDoor, K2Node_CustomEvent_CooldownLeft) == 0x000120, "Member 'bp_ac_BaseDoor_C_ExecuteUbergraph_bp_ac_BaseDoor::K2Node_CustomEvent_CooldownLeft' has a wrong offset!");
static_assert(offsetof(bp_ac_BaseDoor_C_ExecuteUbergraph_bp_ac_BaseDoor, CallFunc_Not_PreBool_ReturnValue) == 0x000124, "Member 'bp_ac_BaseDoor_C_ExecuteUbergraph_bp_ac_BaseDoor::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(bp_ac_BaseDoor_C_ExecuteUbergraph_bp_ac_BaseDoor, CallFunc_Not_PreBool_ReturnValue_1) == 0x000125, "Member 'bp_ac_BaseDoor_C_ExecuteUbergraph_bp_ac_BaseDoor::CallFunc_Not_PreBool_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(bp_ac_BaseDoor_C_ExecuteUbergraph_bp_ac_BaseDoor, CallFunc_AnyCharacterWithinTrigger_CharacerFound) == 0x000126, "Member 'bp_ac_BaseDoor_C_ExecuteUbergraph_bp_ac_BaseDoor::CallFunc_AnyCharacterWithinTrigger_CharacerFound' has a wrong offset!");
static_assert(offsetof(bp_ac_BaseDoor_C_ExecuteUbergraph_bp_ac_BaseDoor, K2Node_CustomEvent_IsLocked) == 0x000127, "Member 'bp_ac_BaseDoor_C_ExecuteUbergraph_bp_ac_BaseDoor::K2Node_CustomEvent_IsLocked' has a wrong offset!");
static_assert(offsetof(bp_ac_BaseDoor_C_ExecuteUbergraph_bp_ac_BaseDoor, K2Node_CustomEvent_IsOnCooldown) == 0x000128, "Member 'bp_ac_BaseDoor_C_ExecuteUbergraph_bp_ac_BaseDoor::K2Node_CustomEvent_IsOnCooldown' has a wrong offset!");
static_assert(offsetof(bp_ac_BaseDoor_C_ExecuteUbergraph_bp_ac_BaseDoor, Temp_bool_IsClosed_Variable_1) == 0x000129, "Member 'bp_ac_BaseDoor_C_ExecuteUbergraph_bp_ac_BaseDoor::Temp_bool_IsClosed_Variable_1' has a wrong offset!");
static_assert(offsetof(bp_ac_BaseDoor_C_ExecuteUbergraph_bp_ac_BaseDoor, K2Node_CustomEvent_ButtonID) == 0x00012C, "Member 'bp_ac_BaseDoor_C_ExecuteUbergraph_bp_ac_BaseDoor::K2Node_CustomEvent_ButtonID' has a wrong offset!");
static_assert(offsetof(bp_ac_BaseDoor_C_ExecuteUbergraph_bp_ac_BaseDoor, K2Node_CustomEvent_PressingPawn) == 0x000130, "Member 'bp_ac_BaseDoor_C_ExecuteUbergraph_bp_ac_BaseDoor::K2Node_CustomEvent_PressingPawn' has a wrong offset!");
static_assert(offsetof(bp_ac_BaseDoor_C_ExecuteUbergraph_bp_ac_BaseDoor, CallFunc_PressedUnlockByTiming_Unlocked) == 0x000138, "Member 'bp_ac_BaseDoor_C_ExecuteUbergraph_bp_ac_BaseDoor::CallFunc_PressedUnlockByTiming_Unlocked' has a wrong offset!");
static_assert(offsetof(bp_ac_BaseDoor_C_ExecuteUbergraph_bp_ac_BaseDoor, CallFunc_PressedUnlockBySequence_Unlocked) == 0x000139, "Member 'bp_ac_BaseDoor_C_ExecuteUbergraph_bp_ac_BaseDoor::CallFunc_PressedUnlockBySequence_Unlocked' has a wrong offset!");
static_assert(offsetof(bp_ac_BaseDoor_C_ExecuteUbergraph_bp_ac_BaseDoor, Temp_int_Variable) == 0x00013C, "Member 'bp_ac_BaseDoor_C_ExecuteUbergraph_bp_ac_BaseDoor::Temp_int_Variable' has a wrong offset!");
static_assert(offsetof(bp_ac_BaseDoor_C_ExecuteUbergraph_bp_ac_BaseDoor, CallFunc_IsValid_ReturnValue_3) == 0x000140, "Member 'bp_ac_BaseDoor_C_ExecuteUbergraph_bp_ac_BaseDoor::CallFunc_IsValid_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(bp_ac_BaseDoor_C_ExecuteUbergraph_bp_ac_BaseDoor, CallFunc_Add_IntInt_ReturnValue) == 0x000144, "Member 'bp_ac_BaseDoor_C_ExecuteUbergraph_bp_ac_BaseDoor::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(bp_ac_BaseDoor_C_ExecuteUbergraph_bp_ac_BaseDoor, K2Node_CustomEvent_Buttons_attached_by_last_index) == 0x000148, "Member 'bp_ac_BaseDoor_C_ExecuteUbergraph_bp_ac_BaseDoor::K2Node_CustomEvent_Buttons_attached_by_last_index' has a wrong offset!");
static_assert(offsetof(bp_ac_BaseDoor_C_ExecuteUbergraph_bp_ac_BaseDoor, CallFunc_GetOverlappingComponents_OutOverlappingComponents) == 0x000150, "Member 'bp_ac_BaseDoor_C_ExecuteUbergraph_bp_ac_BaseDoor::CallFunc_GetOverlappingComponents_OutOverlappingComponents' has a wrong offset!");
static_assert(offsetof(bp_ac_BaseDoor_C_ExecuteUbergraph_bp_ac_BaseDoor, CallFunc_LessEqual_IntInt_ReturnValue) == 0x000160, "Member 'bp_ac_BaseDoor_C_ExecuteUbergraph_bp_ac_BaseDoor::CallFunc_LessEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(bp_ac_BaseDoor_C_ExecuteUbergraph_bp_ac_BaseDoor, CallFunc_IsACharacterOverlapping_Return_Value_1) == 0x000161, "Member 'bp_ac_BaseDoor_C_ExecuteUbergraph_bp_ac_BaseDoor::CallFunc_IsACharacterOverlapping_Return_Value_1' has a wrong offset!");
static_assert(offsetof(bp_ac_BaseDoor_C_ExecuteUbergraph_bp_ac_BaseDoor, CallFunc_Not_PreBool_ReturnValue_2) == 0x000162, "Member 'bp_ac_BaseDoor_C_ExecuteUbergraph_bp_ac_BaseDoor::CallFunc_Not_PreBool_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(bp_ac_BaseDoor_C_ExecuteUbergraph_bp_ac_BaseDoor, CallFunc_BooleanAND_ReturnValue_1) == 0x000163, "Member 'bp_ac_BaseDoor_C_ExecuteUbergraph_bp_ac_BaseDoor::CallFunc_BooleanAND_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(bp_ac_BaseDoor_C_ExecuteUbergraph_bp_ac_BaseDoor, K2Node_SwitchEnum_CmpSuccess) == 0x000164, "Member 'bp_ac_BaseDoor_C_ExecuteUbergraph_bp_ac_BaseDoor::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");
static_assert(offsetof(bp_ac_BaseDoor_C_ExecuteUbergraph_bp_ac_BaseDoor, CallFunc_IsValid_ReturnValue_4) == 0x000165, "Member 'bp_ac_BaseDoor_C_ExecuteUbergraph_bp_ac_BaseDoor::CallFunc_IsValid_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(bp_ac_BaseDoor_C_ExecuteUbergraph_bp_ac_BaseDoor, K2Node_CustomEvent_CooldownRemaining) == 0x000168, "Member 'bp_ac_BaseDoor_C_ExecuteUbergraph_bp_ac_BaseDoor::K2Node_CustomEvent_CooldownRemaining' has a wrong offset!");
static_assert(offsetof(bp_ac_BaseDoor_C_ExecuteUbergraph_bp_ac_BaseDoor, CallFunc_HasAuthority_ReturnValue) == 0x00016C, "Member 'bp_ac_BaseDoor_C_ExecuteUbergraph_bp_ac_BaseDoor::CallFunc_HasAuthority_ReturnValue' has a wrong offset!");
static_assert(offsetof(bp_ac_BaseDoor_C_ExecuteUbergraph_bp_ac_BaseDoor, Temp_delegate_Variable) == 0x000170, "Member 'bp_ac_BaseDoor_C_ExecuteUbergraph_bp_ac_BaseDoor::Temp_delegate_Variable' has a wrong offset!");
static_assert(offsetof(bp_ac_BaseDoor_C_ExecuteUbergraph_bp_ac_BaseDoor, Temp_struct_Variable_1) == 0x000180, "Member 'bp_ac_BaseDoor_C_ExecuteUbergraph_bp_ac_BaseDoor::Temp_struct_Variable_1' has a wrong offset!");
static_assert(offsetof(bp_ac_BaseDoor_C_ExecuteUbergraph_bp_ac_BaseDoor, CallFunc_HasAuthority_ReturnValue_1) == 0x000190, "Member 'bp_ac_BaseDoor_C_ExecuteUbergraph_bp_ac_BaseDoor::CallFunc_HasAuthority_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(bp_ac_BaseDoor_C_ExecuteUbergraph_bp_ac_BaseDoor, Temp_int_Variable_1) == 0x000194, "Member 'bp_ac_BaseDoor_C_ExecuteUbergraph_bp_ac_BaseDoor::Temp_int_Variable_1' has a wrong offset!");
static_assert(offsetof(bp_ac_BaseDoor_C_ExecuteUbergraph_bp_ac_BaseDoor, CallFunc_Array_Add_ReturnValue) == 0x000198, "Member 'bp_ac_BaseDoor_C_ExecuteUbergraph_bp_ac_BaseDoor::CallFunc_Array_Add_ReturnValue' has a wrong offset!");
static_assert(offsetof(bp_ac_BaseDoor_C_ExecuteUbergraph_bp_ac_BaseDoor, CallFunc_LessEqual_IntInt_ReturnValue_1) == 0x00019C, "Member 'bp_ac_BaseDoor_C_ExecuteUbergraph_bp_ac_BaseDoor::CallFunc_LessEqual_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(bp_ac_BaseDoor_C_ExecuteUbergraph_bp_ac_BaseDoor, CallFunc_Add_IntInt_ReturnValue_1) == 0x0001A0, "Member 'bp_ac_BaseDoor_C_ExecuteUbergraph_bp_ac_BaseDoor::CallFunc_Add_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(bp_ac_BaseDoor_C_ExecuteUbergraph_bp_ac_BaseDoor, Temp_delegate_Variable_1) == 0x0001A4, "Member 'bp_ac_BaseDoor_C_ExecuteUbergraph_bp_ac_BaseDoor::Temp_delegate_Variable_1' has a wrong offset!");
static_assert(offsetof(bp_ac_BaseDoor_C_ExecuteUbergraph_bp_ac_BaseDoor, CallFunc_HasAuthority_ReturnValue_2) == 0x0001B4, "Member 'bp_ac_BaseDoor_C_ExecuteUbergraph_bp_ac_BaseDoor::CallFunc_HasAuthority_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(bp_ac_BaseDoor_C_ExecuteUbergraph_bp_ac_BaseDoor, K2Node_SwitchEnum_CmpSuccess_1) == 0x0001B5, "Member 'bp_ac_BaseDoor_C_ExecuteUbergraph_bp_ac_BaseDoor::K2Node_SwitchEnum_CmpSuccess_1' has a wrong offset!");
static_assert(offsetof(bp_ac_BaseDoor_C_ExecuteUbergraph_bp_ac_BaseDoor, CallFunc_CanAutoClose_ReturnValue) == 0x0001B6, "Member 'bp_ac_BaseDoor_C_ExecuteUbergraph_bp_ac_BaseDoor::CallFunc_CanAutoClose_ReturnValue' has a wrong offset!");
static_assert(offsetof(bp_ac_BaseDoor_C_ExecuteUbergraph_bp_ac_BaseDoor, K2Node_CreateDelegate_OutputDelegate) == 0x0001B8, "Member 'bp_ac_BaseDoor_C_ExecuteUbergraph_bp_ac_BaseDoor::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(bp_ac_BaseDoor_C_ExecuteUbergraph_bp_ac_BaseDoor, CallFunc_K2_SetTimerDelegate_ReturnValue) == 0x0001C8, "Member 'bp_ac_BaseDoor_C_ExecuteUbergraph_bp_ac_BaseDoor::CallFunc_K2_SetTimerDelegate_ReturnValue' has a wrong offset!");
static_assert(offsetof(bp_ac_BaseDoor_C_ExecuteUbergraph_bp_ac_BaseDoor, CallFunc_BooleanAND_ReturnValue_2) == 0x0001D0, "Member 'bp_ac_BaseDoor_C_ExecuteUbergraph_bp_ac_BaseDoor::CallFunc_BooleanAND_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(bp_ac_BaseDoor_C_ExecuteUbergraph_bp_ac_BaseDoor, K2Node_CreateDelegate_OutputDelegate_1) == 0x0001D4, "Member 'bp_ac_BaseDoor_C_ExecuteUbergraph_bp_ac_BaseDoor::K2Node_CreateDelegate_OutputDelegate_1' has a wrong offset!");
static_assert(offsetof(bp_ac_BaseDoor_C_ExecuteUbergraph_bp_ac_BaseDoor, CallFunc_GetOverlappingComponents_OutOverlappingComponents_1) == 0x0001E8, "Member 'bp_ac_BaseDoor_C_ExecuteUbergraph_bp_ac_BaseDoor::CallFunc_GetOverlappingComponents_OutOverlappingComponents_1' has a wrong offset!");
static_assert(offsetof(bp_ac_BaseDoor_C_ExecuteUbergraph_bp_ac_BaseDoor, K2Node_Event_DeltaSeconds) == 0x0001F8, "Member 'bp_ac_BaseDoor_C_ExecuteUbergraph_bp_ac_BaseDoor::K2Node_Event_DeltaSeconds' has a wrong offset!");
static_assert(offsetof(bp_ac_BaseDoor_C_ExecuteUbergraph_bp_ac_BaseDoor, CallFunc_IsACharacterOverlapping_Return_Value_2) == 0x0001FC, "Member 'bp_ac_BaseDoor_C_ExecuteUbergraph_bp_ac_BaseDoor::CallFunc_IsACharacterOverlapping_Return_Value_2' has a wrong offset!");
static_assert(offsetof(bp_ac_BaseDoor_C_ExecuteUbergraph_bp_ac_BaseDoor, CallFunc_CalculateDoorPosition_CurvedOpenAmount) == 0x000200, "Member 'bp_ac_BaseDoor_C_ExecuteUbergraph_bp_ac_BaseDoor::CallFunc_CalculateDoorPosition_CurvedOpenAmount' has a wrong offset!");
static_assert(offsetof(bp_ac_BaseDoor_C_ExecuteUbergraph_bp_ac_BaseDoor, Temp_struct_Variable_2) == 0x000208, "Member 'bp_ac_BaseDoor_C_ExecuteUbergraph_bp_ac_BaseDoor::Temp_struct_Variable_2' has a wrong offset!");
static_assert(offsetof(bp_ac_BaseDoor_C_ExecuteUbergraph_bp_ac_BaseDoor, CallFunc_PostAkEvent_ReturnValue) == 0x000218, "Member 'bp_ac_BaseDoor_C_ExecuteUbergraph_bp_ac_BaseDoor::CallFunc_PostAkEvent_ReturnValue' has a wrong offset!");
static_assert(offsetof(bp_ac_BaseDoor_C_ExecuteUbergraph_bp_ac_BaseDoor, CallFunc_Not_PreBool_ReturnValue_3) == 0x00021C, "Member 'bp_ac_BaseDoor_C_ExecuteUbergraph_bp_ac_BaseDoor::CallFunc_Not_PreBool_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(bp_ac_BaseDoor_C_ExecuteUbergraph_bp_ac_BaseDoor, CallFunc_HasAuthority_ReturnValue_3) == 0x00021D, "Member 'bp_ac_BaseDoor_C_ExecuteUbergraph_bp_ac_BaseDoor::CallFunc_HasAuthority_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(bp_ac_BaseDoor_C_ExecuteUbergraph_bp_ac_BaseDoor, Temp_bool_Variable) == 0x00021E, "Member 'bp_ac_BaseDoor_C_ExecuteUbergraph_bp_ac_BaseDoor::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(bp_ac_BaseDoor_C_ExecuteUbergraph_bp_ac_BaseDoor, K2Node_CustomEvent_IsOpened) == 0x00021F, "Member 'bp_ac_BaseDoor_C_ExecuteUbergraph_bp_ac_BaseDoor::K2Node_CustomEvent_IsOpened' has a wrong offset!");
static_assert(offsetof(bp_ac_BaseDoor_C_ExecuteUbergraph_bp_ac_BaseDoor, CallFunc_BooleanXOR_ReturnValue) == 0x000220, "Member 'bp_ac_BaseDoor_C_ExecuteUbergraph_bp_ac_BaseDoor::CallFunc_BooleanXOR_ReturnValue' has a wrong offset!");
static_assert(offsetof(bp_ac_BaseDoor_C_ExecuteUbergraph_bp_ac_BaseDoor, CallFunc_IsValid_ReturnValue_5) == 0x000221, "Member 'bp_ac_BaseDoor_C_ExecuteUbergraph_bp_ac_BaseDoor::CallFunc_IsValid_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(bp_ac_BaseDoor_C_ExecuteUbergraph_bp_ac_BaseDoor, CallFunc_PostAkEvent_ReturnValue_1) == 0x000224, "Member 'bp_ac_BaseDoor_C_ExecuteUbergraph_bp_ac_BaseDoor::CallFunc_PostAkEvent_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(bp_ac_BaseDoor_C_ExecuteUbergraph_bp_ac_BaseDoor, K2Node_CustomEvent_IsHacked) == 0x000228, "Member 'bp_ac_BaseDoor_C_ExecuteUbergraph_bp_ac_BaseDoor::K2Node_CustomEvent_IsHacked' has a wrong offset!");
static_assert(offsetof(bp_ac_BaseDoor_C_ExecuteUbergraph_bp_ac_BaseDoor, Temp_delegate_Variable_2) == 0x00022C, "Member 'bp_ac_BaseDoor_C_ExecuteUbergraph_bp_ac_BaseDoor::Temp_delegate_Variable_2' has a wrong offset!");
static_assert(offsetof(bp_ac_BaseDoor_C_ExecuteUbergraph_bp_ac_BaseDoor, K2Node_Event_SolvingPlayerPlayerState_1) == 0x000240, "Member 'bp_ac_BaseDoor_C_ExecuteUbergraph_bp_ac_BaseDoor::K2Node_Event_SolvingPlayerPlayerState_1' has a wrong offset!");
static_assert(offsetof(bp_ac_BaseDoor_C_ExecuteUbergraph_bp_ac_BaseDoor, K2Node_Event_SolvingPlayerPlayerState) == 0x000248, "Member 'bp_ac_BaseDoor_C_ExecuteUbergraph_bp_ac_BaseDoor::K2Node_Event_SolvingPlayerPlayerState' has a wrong offset!");
static_assert(offsetof(bp_ac_BaseDoor_C_ExecuteUbergraph_bp_ac_BaseDoor, CallFunc_RemoveGameplayTag_ReturnValue) == 0x000250, "Member 'bp_ac_BaseDoor_C_ExecuteUbergraph_bp_ac_BaseDoor::CallFunc_RemoveGameplayTag_ReturnValue' has a wrong offset!");
static_assert(offsetof(bp_ac_BaseDoor_C_ExecuteUbergraph_bp_ac_BaseDoor, CallFunc_K2_SetTimerDelegate_ReturnValue_1) == 0x000258, "Member 'bp_ac_BaseDoor_C_ExecuteUbergraph_bp_ac_BaseDoor::CallFunc_K2_SetTimerDelegate_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(bp_ac_BaseDoor_C_ExecuteUbergraph_bp_ac_BaseDoor, K2Node_CreateDelegate_OutputDelegate_2) == 0x000260, "Member 'bp_ac_BaseDoor_C_ExecuteUbergraph_bp_ac_BaseDoor::K2Node_CreateDelegate_OutputDelegate_2' has a wrong offset!");
static_assert(offsetof(bp_ac_BaseDoor_C_ExecuteUbergraph_bp_ac_BaseDoor, CallFunc_K2_SetTimerDelegate_ReturnValue_2) == 0x000270, "Member 'bp_ac_BaseDoor_C_ExecuteUbergraph_bp_ac_BaseDoor::CallFunc_K2_SetTimerDelegate_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(bp_ac_BaseDoor_C_ExecuteUbergraph_bp_ac_BaseDoor, K2Node_ComponentBoundEvent_IsOpening) == 0x000278, "Member 'bp_ac_BaseDoor_C_ExecuteUbergraph_bp_ac_BaseDoor::K2Node_ComponentBoundEvent_IsOpening' has a wrong offset!");
static_assert(offsetof(bp_ac_BaseDoor_C_ExecuteUbergraph_bp_ac_BaseDoor, K2Node_ComponentBoundEvent_payload_2) == 0x000280, "Member 'bp_ac_BaseDoor_C_ExecuteUbergraph_bp_ac_BaseDoor::K2Node_ComponentBoundEvent_payload_2' has a wrong offset!");
static_assert(offsetof(bp_ac_BaseDoor_C_ExecuteUbergraph_bp_ac_BaseDoor, CallFunc_RemoveGameplayTag_ReturnValue_1) == 0x0002B0, "Member 'bp_ac_BaseDoor_C_ExecuteUbergraph_bp_ac_BaseDoor::CallFunc_RemoveGameplayTag_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(bp_ac_BaseDoor_C_ExecuteUbergraph_bp_ac_BaseDoor, CallFunc_RemoveGameplayTag_ReturnValue_2) == 0x0002B1, "Member 'bp_ac_BaseDoor_C_ExecuteUbergraph_bp_ac_BaseDoor::CallFunc_RemoveGameplayTag_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(bp_ac_BaseDoor_C_ExecuteUbergraph_bp_ac_BaseDoor, K2Node_ComponentBoundEvent_payload_1) == 0x0002B8, "Member 'bp_ac_BaseDoor_C_ExecuteUbergraph_bp_ac_BaseDoor::K2Node_ComponentBoundEvent_payload_1' has a wrong offset!");
static_assert(offsetof(bp_ac_BaseDoor_C_ExecuteUbergraph_bp_ac_BaseDoor, K2Node_ComponentBoundEvent_payload) == 0x0002E8, "Member 'bp_ac_BaseDoor_C_ExecuteUbergraph_bp_ac_BaseDoor::K2Node_ComponentBoundEvent_payload' has a wrong offset!");
static_assert(offsetof(bp_ac_BaseDoor_C_ExecuteUbergraph_bp_ac_BaseDoor, K2Node_ComponentBoundEvent_wasCancelled) == 0x000318, "Member 'bp_ac_BaseDoor_C_ExecuteUbergraph_bp_ac_BaseDoor::K2Node_ComponentBoundEvent_wasCancelled' has a wrong offset!");
static_assert(offsetof(bp_ac_BaseDoor_C_ExecuteUbergraph_bp_ac_BaseDoor, K2Node_DynamicCast_AsCharacter_SCTBP) == 0x000320, "Member 'bp_ac_BaseDoor_C_ExecuteUbergraph_bp_ac_BaseDoor::K2Node_DynamicCast_AsCharacter_SCTBP' has a wrong offset!");
static_assert(offsetof(bp_ac_BaseDoor_C_ExecuteUbergraph_bp_ac_BaseDoor, K2Node_DynamicCast_bSuccess_2) == 0x000328, "Member 'bp_ac_BaseDoor_C_ExecuteUbergraph_bp_ac_BaseDoor::K2Node_DynamicCast_bSuccess_2' has a wrong offset!");
static_assert(offsetof(bp_ac_BaseDoor_C_ExecuteUbergraph_bp_ac_BaseDoor, K2Node_DynamicCast_AsCharacter_SCTBP_1) == 0x000330, "Member 'bp_ac_BaseDoor_C_ExecuteUbergraph_bp_ac_BaseDoor::K2Node_DynamicCast_AsCharacter_SCTBP_1' has a wrong offset!");
static_assert(offsetof(bp_ac_BaseDoor_C_ExecuteUbergraph_bp_ac_BaseDoor, K2Node_DynamicCast_bSuccess_3) == 0x000338, "Member 'bp_ac_BaseDoor_C_ExecuteUbergraph_bp_ac_BaseDoor::K2Node_DynamicCast_bSuccess_3' has a wrong offset!");
static_assert(offsetof(bp_ac_BaseDoor_C_ExecuteUbergraph_bp_ac_BaseDoor, Temp_struct_Variable_3) == 0x000340, "Member 'bp_ac_BaseDoor_C_ExecuteUbergraph_bp_ac_BaseDoor::Temp_struct_Variable_3' has a wrong offset!");
static_assert(offsetof(bp_ac_BaseDoor_C_ExecuteUbergraph_bp_ac_BaseDoor, CallFunc_PostAkEvent_ReturnValue_2) == 0x000350, "Member 'bp_ac_BaseDoor_C_ExecuteUbergraph_bp_ac_BaseDoor::CallFunc_PostAkEvent_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(bp_ac_BaseDoor_C_ExecuteUbergraph_bp_ac_BaseDoor, Temp_delegate_Variable_3) == 0x000354, "Member 'bp_ac_BaseDoor_C_ExecuteUbergraph_bp_ac_BaseDoor::Temp_delegate_Variable_3' has a wrong offset!");
static_assert(offsetof(bp_ac_BaseDoor_C_ExecuteUbergraph_bp_ac_BaseDoor, CallFunc_PostAkEvent_ReturnValue_3) == 0x000364, "Member 'bp_ac_BaseDoor_C_ExecuteUbergraph_bp_ac_BaseDoor::CallFunc_PostAkEvent_ReturnValue_3' has a wrong offset!");

// Function bp_ac_BaseDoor.bp_ac_BaseDoor_C.BndEvt__ForceOpenIntaractionComponent_K2Node_ComponentBoundEvent_7_InteractionEndedDelegate__DelegateSignature
// 0x0038 (0x0038 - 0x0000)
struct bp_ac_BaseDoor_C_BndEvt__ForceOpenIntaractionComponent_K2Node_ComponentBoundEvent_7_InteractionEndedDelegate__DelegateSignature final
{
public:
	struct FInteractionPayload                    Payload;                                           // 0x0000(0x0030)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, NoDestructor, ContainsInstancedReference)
	bool                                          WasCancelled;                                      // 0x0030(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(bp_ac_BaseDoor_C_BndEvt__ForceOpenIntaractionComponent_K2Node_ComponentBoundEvent_7_InteractionEndedDelegate__DelegateSignature) == 0x000008, "Wrong alignment on bp_ac_BaseDoor_C_BndEvt__ForceOpenIntaractionComponent_K2Node_ComponentBoundEvent_7_InteractionEndedDelegate__DelegateSignature");
static_assert(sizeof(bp_ac_BaseDoor_C_BndEvt__ForceOpenIntaractionComponent_K2Node_ComponentBoundEvent_7_InteractionEndedDelegate__DelegateSignature) == 0x000038, "Wrong size on bp_ac_BaseDoor_C_BndEvt__ForceOpenIntaractionComponent_K2Node_ComponentBoundEvent_7_InteractionEndedDelegate__DelegateSignature");
static_assert(offsetof(bp_ac_BaseDoor_C_BndEvt__ForceOpenIntaractionComponent_K2Node_ComponentBoundEvent_7_InteractionEndedDelegate__DelegateSignature, Payload) == 0x000000, "Member 'bp_ac_BaseDoor_C_BndEvt__ForceOpenIntaractionComponent_K2Node_ComponentBoundEvent_7_InteractionEndedDelegate__DelegateSignature::Payload' has a wrong offset!");
static_assert(offsetof(bp_ac_BaseDoor_C_BndEvt__ForceOpenIntaractionComponent_K2Node_ComponentBoundEvent_7_InteractionEndedDelegate__DelegateSignature, WasCancelled) == 0x000030, "Member 'bp_ac_BaseDoor_C_BndEvt__ForceOpenIntaractionComponent_K2Node_ComponentBoundEvent_7_InteractionEndedDelegate__DelegateSignature::WasCancelled' has a wrong offset!");

// Function bp_ac_BaseDoor.bp_ac_BaseDoor_C.BndEvt__ForceOpenIntaractionComponent_K2Node_ComponentBoundEvent_6_InteractionDelegate__DelegateSignature
// 0x0030 (0x0030 - 0x0000)
struct bp_ac_BaseDoor_C_BndEvt__ForceOpenIntaractionComponent_K2Node_ComponentBoundEvent_6_InteractionDelegate__DelegateSignature final
{
public:
	struct FInteractionPayload                    Payload;                                           // 0x0000(0x0030)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, NoDestructor, ContainsInstancedReference)
};
static_assert(alignof(bp_ac_BaseDoor_C_BndEvt__ForceOpenIntaractionComponent_K2Node_ComponentBoundEvent_6_InteractionDelegate__DelegateSignature) == 0x000008, "Wrong alignment on bp_ac_BaseDoor_C_BndEvt__ForceOpenIntaractionComponent_K2Node_ComponentBoundEvent_6_InteractionDelegate__DelegateSignature");
static_assert(sizeof(bp_ac_BaseDoor_C_BndEvt__ForceOpenIntaractionComponent_K2Node_ComponentBoundEvent_6_InteractionDelegate__DelegateSignature) == 0x000030, "Wrong size on bp_ac_BaseDoor_C_BndEvt__ForceOpenIntaractionComponent_K2Node_ComponentBoundEvent_6_InteractionDelegate__DelegateSignature");
static_assert(offsetof(bp_ac_BaseDoor_C_BndEvt__ForceOpenIntaractionComponent_K2Node_ComponentBoundEvent_6_InteractionDelegate__DelegateSignature, Payload) == 0x000000, "Member 'bp_ac_BaseDoor_C_BndEvt__ForceOpenIntaractionComponent_K2Node_ComponentBoundEvent_6_InteractionDelegate__DelegateSignature::Payload' has a wrong offset!");

// Function bp_ac_BaseDoor.bp_ac_BaseDoor_C.BndEvt__Force Open Interaction_K2Node_ComponentBoundEvent_3_InteractionDelegate__DelegateSignature
// 0x0030 (0x0030 - 0x0000)
struct bp_ac_BaseDoor_C_BndEvt__Force_Open_Interaction_K2Node_ComponentBoundEvent_3_InteractionDelegate__DelegateSignature final
{
public:
	struct FInteractionPayload                    Payload;                                           // 0x0000(0x0030)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, NoDestructor, ContainsInstancedReference)
};
static_assert(alignof(bp_ac_BaseDoor_C_BndEvt__Force_Open_Interaction_K2Node_ComponentBoundEvent_3_InteractionDelegate__DelegateSignature) == 0x000008, "Wrong alignment on bp_ac_BaseDoor_C_BndEvt__Force_Open_Interaction_K2Node_ComponentBoundEvent_3_InteractionDelegate__DelegateSignature");
static_assert(sizeof(bp_ac_BaseDoor_C_BndEvt__Force_Open_Interaction_K2Node_ComponentBoundEvent_3_InteractionDelegate__DelegateSignature) == 0x000030, "Wrong size on bp_ac_BaseDoor_C_BndEvt__Force_Open_Interaction_K2Node_ComponentBoundEvent_3_InteractionDelegate__DelegateSignature");
static_assert(offsetof(bp_ac_BaseDoor_C_BndEvt__Force_Open_Interaction_K2Node_ComponentBoundEvent_3_InteractionDelegate__DelegateSignature, Payload) == 0x000000, "Member 'bp_ac_BaseDoor_C_BndEvt__Force_Open_Interaction_K2Node_ComponentBoundEvent_3_InteractionDelegate__DelegateSignature::Payload' has a wrong offset!");

// Function bp_ac_BaseDoor.bp_ac_BaseDoor_C.BndEvt__Opener Door_K2Node_ComponentBoundEvent_5_OnOpenStateChanged__DelegateSignature
// 0x0001 (0x0001 - 0x0000)
struct bp_ac_BaseDoor_C_BndEvt__Opener_Door_K2Node_ComponentBoundEvent_5_OnOpenStateChanged__DelegateSignature final
{
public:
	bool                                          IsOpening;                                         // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(bp_ac_BaseDoor_C_BndEvt__Opener_Door_K2Node_ComponentBoundEvent_5_OnOpenStateChanged__DelegateSignature) == 0x000001, "Wrong alignment on bp_ac_BaseDoor_C_BndEvt__Opener_Door_K2Node_ComponentBoundEvent_5_OnOpenStateChanged__DelegateSignature");
static_assert(sizeof(bp_ac_BaseDoor_C_BndEvt__Opener_Door_K2Node_ComponentBoundEvent_5_OnOpenStateChanged__DelegateSignature) == 0x000001, "Wrong size on bp_ac_BaseDoor_C_BndEvt__Opener_Door_K2Node_ComponentBoundEvent_5_OnOpenStateChanged__DelegateSignature");
static_assert(offsetof(bp_ac_BaseDoor_C_BndEvt__Opener_Door_K2Node_ComponentBoundEvent_5_OnOpenStateChanged__DelegateSignature, IsOpening) == 0x000000, "Member 'bp_ac_BaseDoor_C_BndEvt__Opener_Door_K2Node_ComponentBoundEvent_5_OnOpenStateChanged__DelegateSignature::IsOpening' has a wrong offset!");

// Function bp_ac_BaseDoor.bp_ac_BaseDoor_C.IncorrectlySolved
// 0x0008 (0x0008 - 0x0000)
struct bp_ac_BaseDoor_C_IncorrectlySolved final
{
public:
	class APlayerState*                           SolvingPlayerPlayerState;                          // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(bp_ac_BaseDoor_C_IncorrectlySolved) == 0x000008, "Wrong alignment on bp_ac_BaseDoor_C_IncorrectlySolved");
static_assert(sizeof(bp_ac_BaseDoor_C_IncorrectlySolved) == 0x000008, "Wrong size on bp_ac_BaseDoor_C_IncorrectlySolved");
static_assert(offsetof(bp_ac_BaseDoor_C_IncorrectlySolved, SolvingPlayerPlayerState) == 0x000000, "Member 'bp_ac_BaseDoor_C_IncorrectlySolved::SolvingPlayerPlayerState' has a wrong offset!");

// Function bp_ac_BaseDoor.bp_ac_BaseDoor_C.CorrectlySolved
// 0x0008 (0x0008 - 0x0000)
struct bp_ac_BaseDoor_C_CorrectlySolved final
{
public:
	class APlayerState*                           SolvingPlayerPlayerState;                          // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(bp_ac_BaseDoor_C_CorrectlySolved) == 0x000008, "Wrong alignment on bp_ac_BaseDoor_C_CorrectlySolved");
static_assert(sizeof(bp_ac_BaseDoor_C_CorrectlySolved) == 0x000008, "Wrong size on bp_ac_BaseDoor_C_CorrectlySolved");
static_assert(offsetof(bp_ac_BaseDoor_C_CorrectlySolved, SolvingPlayerPlayerState) == 0x000000, "Member 'bp_ac_BaseDoor_C_CorrectlySolved::SolvingPlayerPlayerState' has a wrong offset!");

// Function bp_ac_BaseDoor.bp_ac_BaseDoor_C.HandleHackingStateChanged
// 0x0001 (0x0001 - 0x0000)
struct bp_ac_BaseDoor_C_HandleHackingStateChanged final
{
public:
	bool                                          IsHacked;                                          // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(bp_ac_BaseDoor_C_HandleHackingStateChanged) == 0x000001, "Wrong alignment on bp_ac_BaseDoor_C_HandleHackingStateChanged");
static_assert(sizeof(bp_ac_BaseDoor_C_HandleHackingStateChanged) == 0x000001, "Wrong size on bp_ac_BaseDoor_C_HandleHackingStateChanged");
static_assert(offsetof(bp_ac_BaseDoor_C_HandleHackingStateChanged, IsHacked) == 0x000000, "Member 'bp_ac_BaseDoor_C_HandleHackingStateChanged::IsHacked' has a wrong offset!");

// Function bp_ac_BaseDoor.bp_ac_BaseDoor_C.HandleDoorOpenStateChanged
// 0x0001 (0x0001 - 0x0000)
struct bp_ac_BaseDoor_C_HandleDoorOpenStateChanged final
{
public:
	bool                                          IsOpened;                                          // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(bp_ac_BaseDoor_C_HandleDoorOpenStateChanged) == 0x000001, "Wrong alignment on bp_ac_BaseDoor_C_HandleDoorOpenStateChanged");
static_assert(sizeof(bp_ac_BaseDoor_C_HandleDoorOpenStateChanged) == 0x000001, "Wrong size on bp_ac_BaseDoor_C_HandleDoorOpenStateChanged");
static_assert(offsetof(bp_ac_BaseDoor_C_HandleDoorOpenStateChanged, IsOpened) == 0x000000, "Member 'bp_ac_BaseDoor_C_HandleDoorOpenStateChanged::IsOpened' has a wrong offset!");

// Function bp_ac_BaseDoor.bp_ac_BaseDoor_C.ReceiveTick
// 0x0004 (0x0004 - 0x0000)
struct bp_ac_BaseDoor_C_ReceiveTick final
{
public:
	float                                         DeltaSeconds;                                      // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(bp_ac_BaseDoor_C_ReceiveTick) == 0x000004, "Wrong alignment on bp_ac_BaseDoor_C_ReceiveTick");
static_assert(sizeof(bp_ac_BaseDoor_C_ReceiveTick) == 0x000004, "Wrong size on bp_ac_BaseDoor_C_ReceiveTick");
static_assert(offsetof(bp_ac_BaseDoor_C_ReceiveTick, DeltaSeconds) == 0x000000, "Member 'bp_ac_BaseDoor_C_ReceiveTick::DeltaSeconds' has a wrong offset!");

// Function bp_ac_BaseDoor.bp_ac_BaseDoor_C.HandleFailCooldownUpdate
// 0x0004 (0x0004 - 0x0000)
struct bp_ac_BaseDoor_C_HandleFailCooldownUpdate final
{
public:
	float                                         CooldownRemaining;                                 // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(bp_ac_BaseDoor_C_HandleFailCooldownUpdate) == 0x000004, "Wrong alignment on bp_ac_BaseDoor_C_HandleFailCooldownUpdate");
static_assert(sizeof(bp_ac_BaseDoor_C_HandleFailCooldownUpdate) == 0x000004, "Wrong size on bp_ac_BaseDoor_C_HandleFailCooldownUpdate");
static_assert(offsetof(bp_ac_BaseDoor_C_HandleFailCooldownUpdate, CooldownRemaining) == 0x000000, "Member 'bp_ac_BaseDoor_C_HandleFailCooldownUpdate::CooldownRemaining' has a wrong offset!");

// Function bp_ac_BaseDoor.bp_ac_BaseDoor_C.InitDoor
// 0x0004 (0x0004 - 0x0000)
struct bp_ac_BaseDoor_C_InitDoor final
{
public:
	int32                                         Buttons_attached_by_last_index;                    // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(bp_ac_BaseDoor_C_InitDoor) == 0x000004, "Wrong alignment on bp_ac_BaseDoor_C_InitDoor");
static_assert(sizeof(bp_ac_BaseDoor_C_InitDoor) == 0x000004, "Wrong size on bp_ac_BaseDoor_C_InitDoor");
static_assert(offsetof(bp_ac_BaseDoor_C_InitDoor, Buttons_attached_by_last_index) == 0x000000, "Member 'bp_ac_BaseDoor_C_InitDoor::Buttons_attached_by_last_index' has a wrong offset!");

// Function bp_ac_BaseDoor.bp_ac_BaseDoor_C.DoorButtonPressedServer
// 0x0010 (0x0010 - 0x0000)
struct bp_ac_BaseDoor_C_DoorButtonPressedServer final
{
public:
	int32                                         ButtonID;                                          // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 PressingPawn;                                      // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(bp_ac_BaseDoor_C_DoorButtonPressedServer) == 0x000008, "Wrong alignment on bp_ac_BaseDoor_C_DoorButtonPressedServer");
static_assert(sizeof(bp_ac_BaseDoor_C_DoorButtonPressedServer) == 0x000010, "Wrong size on bp_ac_BaseDoor_C_DoorButtonPressedServer");
static_assert(offsetof(bp_ac_BaseDoor_C_DoorButtonPressedServer, ButtonID) == 0x000000, "Member 'bp_ac_BaseDoor_C_DoorButtonPressedServer::ButtonID' has a wrong offset!");
static_assert(offsetof(bp_ac_BaseDoor_C_DoorButtonPressedServer, PressingPawn) == 0x000008, "Member 'bp_ac_BaseDoor_C_DoorButtonPressedServer::PressingPawn' has a wrong offset!");

// Function bp_ac_BaseDoor.bp_ac_BaseDoor_C.HandleLockedStateChanged
// 0x0002 (0x0002 - 0x0000)
struct bp_ac_BaseDoor_C_HandleLockedStateChanged final
{
public:
	bool                                          IsLocked;                                          // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          IsOnCooldown;                                      // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(bp_ac_BaseDoor_C_HandleLockedStateChanged) == 0x000001, "Wrong alignment on bp_ac_BaseDoor_C_HandleLockedStateChanged");
static_assert(sizeof(bp_ac_BaseDoor_C_HandleLockedStateChanged) == 0x000002, "Wrong size on bp_ac_BaseDoor_C_HandleLockedStateChanged");
static_assert(offsetof(bp_ac_BaseDoor_C_HandleLockedStateChanged, IsLocked) == 0x000000, "Member 'bp_ac_BaseDoor_C_HandleLockedStateChanged::IsLocked' has a wrong offset!");
static_assert(offsetof(bp_ac_BaseDoor_C_HandleLockedStateChanged, IsOnCooldown) == 0x000001, "Member 'bp_ac_BaseDoor_C_HandleLockedStateChanged::IsOnCooldown' has a wrong offset!");

// Function bp_ac_BaseDoor.bp_ac_BaseDoor_C.HandleSabotageCooldownUpdate
// 0x0004 (0x0004 - 0x0000)
struct bp_ac_BaseDoor_C_HandleSabotageCooldownUpdate final
{
public:
	float                                         CooldownLeft;                                      // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(bp_ac_BaseDoor_C_HandleSabotageCooldownUpdate) == 0x000004, "Wrong alignment on bp_ac_BaseDoor_C_HandleSabotageCooldownUpdate");
static_assert(sizeof(bp_ac_BaseDoor_C_HandleSabotageCooldownUpdate) == 0x000004, "Wrong size on bp_ac_BaseDoor_C_HandleSabotageCooldownUpdate");
static_assert(offsetof(bp_ac_BaseDoor_C_HandleSabotageCooldownUpdate, CooldownLeft) == 0x000000, "Member 'bp_ac_BaseDoor_C_HandleSabotageCooldownUpdate::CooldownLeft' has a wrong offset!");

// Function bp_ac_BaseDoor.bp_ac_BaseDoor_C.HandleSabotageStateChange
// 0x0001 (0x0001 - 0x0000)
struct bp_ac_BaseDoor_C_HandleSabotageStateChange final
{
public:
	bool                                          IsSabotaged;                                       // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(bp_ac_BaseDoor_C_HandleSabotageStateChange) == 0x000001, "Wrong alignment on bp_ac_BaseDoor_C_HandleSabotageStateChange");
static_assert(sizeof(bp_ac_BaseDoor_C_HandleSabotageStateChange) == 0x000001, "Wrong size on bp_ac_BaseDoor_C_HandleSabotageStateChange");
static_assert(offsetof(bp_ac_BaseDoor_C_HandleSabotageStateChange, IsSabotaged) == 0x000000, "Member 'bp_ac_BaseDoor_C_HandleSabotageStateChange::IsSabotaged' has a wrong offset!");

// Function bp_ac_BaseDoor.bp_ac_BaseDoor_C.BndEvt__ProximityCollider_K2Node_ComponentBoundEvent_4_ComponentEndOverlapSignature__DelegateSignature
// 0x0020 (0x0020 - 0x0000)
struct bp_ac_BaseDoor_C_BndEvt__ProximityCollider_K2Node_ComponentBoundEvent_4_ComponentEndOverlapSignature__DelegateSignature final
{
public:
	class UPrimitiveComponent*                    OverlappedComponent;                               // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         OtherBodyIndex;                                    // 0x0018(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(bp_ac_BaseDoor_C_BndEvt__ProximityCollider_K2Node_ComponentBoundEvent_4_ComponentEndOverlapSignature__DelegateSignature) == 0x000008, "Wrong alignment on bp_ac_BaseDoor_C_BndEvt__ProximityCollider_K2Node_ComponentBoundEvent_4_ComponentEndOverlapSignature__DelegateSignature");
static_assert(sizeof(bp_ac_BaseDoor_C_BndEvt__ProximityCollider_K2Node_ComponentBoundEvent_4_ComponentEndOverlapSignature__DelegateSignature) == 0x000020, "Wrong size on bp_ac_BaseDoor_C_BndEvt__ProximityCollider_K2Node_ComponentBoundEvent_4_ComponentEndOverlapSignature__DelegateSignature");
static_assert(offsetof(bp_ac_BaseDoor_C_BndEvt__ProximityCollider_K2Node_ComponentBoundEvent_4_ComponentEndOverlapSignature__DelegateSignature, OverlappedComponent) == 0x000000, "Member 'bp_ac_BaseDoor_C_BndEvt__ProximityCollider_K2Node_ComponentBoundEvent_4_ComponentEndOverlapSignature__DelegateSignature::OverlappedComponent' has a wrong offset!");
static_assert(offsetof(bp_ac_BaseDoor_C_BndEvt__ProximityCollider_K2Node_ComponentBoundEvent_4_ComponentEndOverlapSignature__DelegateSignature, OtherActor) == 0x000008, "Member 'bp_ac_BaseDoor_C_BndEvt__ProximityCollider_K2Node_ComponentBoundEvent_4_ComponentEndOverlapSignature__DelegateSignature::OtherActor' has a wrong offset!");
static_assert(offsetof(bp_ac_BaseDoor_C_BndEvt__ProximityCollider_K2Node_ComponentBoundEvent_4_ComponentEndOverlapSignature__DelegateSignature, OtherComp) == 0x000010, "Member 'bp_ac_BaseDoor_C_BndEvt__ProximityCollider_K2Node_ComponentBoundEvent_4_ComponentEndOverlapSignature__DelegateSignature::OtherComp' has a wrong offset!");
static_assert(offsetof(bp_ac_BaseDoor_C_BndEvt__ProximityCollider_K2Node_ComponentBoundEvent_4_ComponentEndOverlapSignature__DelegateSignature, OtherBodyIndex) == 0x000018, "Member 'bp_ac_BaseDoor_C_BndEvt__ProximityCollider_K2Node_ComponentBoundEvent_4_ComponentEndOverlapSignature__DelegateSignature::OtherBodyIndex' has a wrong offset!");

// Function bp_ac_BaseDoor.bp_ac_BaseDoor_C.BndEvt__ProximityCollider_K2Node_ComponentBoundEvent_1_ComponentBeginOverlapSignature__DelegateSignature
// 0x00B0 (0x00B0 - 0x0000)
struct bp_ac_BaseDoor_C_BndEvt__ProximityCollider_K2Node_ComponentBoundEvent_1_ComponentBeginOverlapSignature__DelegateSignature final
{
public:
	class UPrimitiveComponent*                    OverlappedComponent;                               // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         OtherBodyIndex;                                    // 0x0018(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bFromSweep;                                        // 0x001C(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             SweepResult;                                       // 0x0020(0x008C)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
};
static_assert(alignof(bp_ac_BaseDoor_C_BndEvt__ProximityCollider_K2Node_ComponentBoundEvent_1_ComponentBeginOverlapSignature__DelegateSignature) == 0x000008, "Wrong alignment on bp_ac_BaseDoor_C_BndEvt__ProximityCollider_K2Node_ComponentBoundEvent_1_ComponentBeginOverlapSignature__DelegateSignature");
static_assert(sizeof(bp_ac_BaseDoor_C_BndEvt__ProximityCollider_K2Node_ComponentBoundEvent_1_ComponentBeginOverlapSignature__DelegateSignature) == 0x0000B0, "Wrong size on bp_ac_BaseDoor_C_BndEvt__ProximityCollider_K2Node_ComponentBoundEvent_1_ComponentBeginOverlapSignature__DelegateSignature");
static_assert(offsetof(bp_ac_BaseDoor_C_BndEvt__ProximityCollider_K2Node_ComponentBoundEvent_1_ComponentBeginOverlapSignature__DelegateSignature, OverlappedComponent) == 0x000000, "Member 'bp_ac_BaseDoor_C_BndEvt__ProximityCollider_K2Node_ComponentBoundEvent_1_ComponentBeginOverlapSignature__DelegateSignature::OverlappedComponent' has a wrong offset!");
static_assert(offsetof(bp_ac_BaseDoor_C_BndEvt__ProximityCollider_K2Node_ComponentBoundEvent_1_ComponentBeginOverlapSignature__DelegateSignature, OtherActor) == 0x000008, "Member 'bp_ac_BaseDoor_C_BndEvt__ProximityCollider_K2Node_ComponentBoundEvent_1_ComponentBeginOverlapSignature__DelegateSignature::OtherActor' has a wrong offset!");
static_assert(offsetof(bp_ac_BaseDoor_C_BndEvt__ProximityCollider_K2Node_ComponentBoundEvent_1_ComponentBeginOverlapSignature__DelegateSignature, OtherComp) == 0x000010, "Member 'bp_ac_BaseDoor_C_BndEvt__ProximityCollider_K2Node_ComponentBoundEvent_1_ComponentBeginOverlapSignature__DelegateSignature::OtherComp' has a wrong offset!");
static_assert(offsetof(bp_ac_BaseDoor_C_BndEvt__ProximityCollider_K2Node_ComponentBoundEvent_1_ComponentBeginOverlapSignature__DelegateSignature, OtherBodyIndex) == 0x000018, "Member 'bp_ac_BaseDoor_C_BndEvt__ProximityCollider_K2Node_ComponentBoundEvent_1_ComponentBeginOverlapSignature__DelegateSignature::OtherBodyIndex' has a wrong offset!");
static_assert(offsetof(bp_ac_BaseDoor_C_BndEvt__ProximityCollider_K2Node_ComponentBoundEvent_1_ComponentBeginOverlapSignature__DelegateSignature, bFromSweep) == 0x00001C, "Member 'bp_ac_BaseDoor_C_BndEvt__ProximityCollider_K2Node_ComponentBoundEvent_1_ComponentBeginOverlapSignature__DelegateSignature::bFromSweep' has a wrong offset!");
static_assert(offsetof(bp_ac_BaseDoor_C_BndEvt__ProximityCollider_K2Node_ComponentBoundEvent_1_ComponentBeginOverlapSignature__DelegateSignature, SweepResult) == 0x000020, "Member 'bp_ac_BaseDoor_C_BndEvt__ProximityCollider_K2Node_ComponentBoundEvent_1_ComponentBeginOverlapSignature__DelegateSignature::SweepResult' has a wrong offset!");

// Function bp_ac_BaseDoor.bp_ac_BaseDoor_C.UserConstructionScript
// 0x00F8 (0x00F8 - 0x0000)
struct bp_ac_BaseDoor_C_UserConstructionScript final
{
public:
	TScriptInterface<class IInteractionSubComponentInterface> CallFunc_AddSubComponent_component_CastInput;      // 0x0000(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInterface*                     CallFunc_GetMaterial_ReturnValue;                  // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_X;                            // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y;                            // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z;                            // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInstanceDynamic*               CallFunc_CreateDynamicMaterialInstance_ReturnValue; // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Divide_FloatFloat_ReturnValue;            // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Divide_FloatFloat_ReturnValue_1;          // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue;                   // 0x0040(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_X_1;                          // 0x004C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y_1;                          // 0x0050(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z_1;                          // 0x0054(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue;          // 0x0058(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue_1;                 // 0x005C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             CallFunc_K2_SetRelativeLocation_SweepHitResult;    // 0x0068(0x008C)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
};
static_assert(alignof(bp_ac_BaseDoor_C_UserConstructionScript) == 0x000008, "Wrong alignment on bp_ac_BaseDoor_C_UserConstructionScript");
static_assert(sizeof(bp_ac_BaseDoor_C_UserConstructionScript) == 0x0000F8, "Wrong size on bp_ac_BaseDoor_C_UserConstructionScript");
static_assert(offsetof(bp_ac_BaseDoor_C_UserConstructionScript, CallFunc_AddSubComponent_component_CastInput) == 0x000000, "Member 'bp_ac_BaseDoor_C_UserConstructionScript::CallFunc_AddSubComponent_component_CastInput' has a wrong offset!");
static_assert(offsetof(bp_ac_BaseDoor_C_UserConstructionScript, CallFunc_Not_PreBool_ReturnValue) == 0x000010, "Member 'bp_ac_BaseDoor_C_UserConstructionScript::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(bp_ac_BaseDoor_C_UserConstructionScript, CallFunc_GetMaterial_ReturnValue) == 0x000018, "Member 'bp_ac_BaseDoor_C_UserConstructionScript::CallFunc_GetMaterial_ReturnValue' has a wrong offset!");
static_assert(offsetof(bp_ac_BaseDoor_C_UserConstructionScript, CallFunc_BreakVector_X) == 0x000020, "Member 'bp_ac_BaseDoor_C_UserConstructionScript::CallFunc_BreakVector_X' has a wrong offset!");
static_assert(offsetof(bp_ac_BaseDoor_C_UserConstructionScript, CallFunc_BreakVector_Y) == 0x000024, "Member 'bp_ac_BaseDoor_C_UserConstructionScript::CallFunc_BreakVector_Y' has a wrong offset!");
static_assert(offsetof(bp_ac_BaseDoor_C_UserConstructionScript, CallFunc_BreakVector_Z) == 0x000028, "Member 'bp_ac_BaseDoor_C_UserConstructionScript::CallFunc_BreakVector_Z' has a wrong offset!");
static_assert(offsetof(bp_ac_BaseDoor_C_UserConstructionScript, CallFunc_CreateDynamicMaterialInstance_ReturnValue) == 0x000030, "Member 'bp_ac_BaseDoor_C_UserConstructionScript::CallFunc_CreateDynamicMaterialInstance_ReturnValue' has a wrong offset!");
static_assert(offsetof(bp_ac_BaseDoor_C_UserConstructionScript, CallFunc_Divide_FloatFloat_ReturnValue) == 0x000038, "Member 'bp_ac_BaseDoor_C_UserConstructionScript::CallFunc_Divide_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(bp_ac_BaseDoor_C_UserConstructionScript, CallFunc_Divide_FloatFloat_ReturnValue_1) == 0x00003C, "Member 'bp_ac_BaseDoor_C_UserConstructionScript::CallFunc_Divide_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(bp_ac_BaseDoor_C_UserConstructionScript, CallFunc_MakeVector_ReturnValue) == 0x000040, "Member 'bp_ac_BaseDoor_C_UserConstructionScript::CallFunc_MakeVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(bp_ac_BaseDoor_C_UserConstructionScript, CallFunc_BreakVector_X_1) == 0x00004C, "Member 'bp_ac_BaseDoor_C_UserConstructionScript::CallFunc_BreakVector_X_1' has a wrong offset!");
static_assert(offsetof(bp_ac_BaseDoor_C_UserConstructionScript, CallFunc_BreakVector_Y_1) == 0x000050, "Member 'bp_ac_BaseDoor_C_UserConstructionScript::CallFunc_BreakVector_Y_1' has a wrong offset!");
static_assert(offsetof(bp_ac_BaseDoor_C_UserConstructionScript, CallFunc_BreakVector_Z_1) == 0x000054, "Member 'bp_ac_BaseDoor_C_UserConstructionScript::CallFunc_BreakVector_Z_1' has a wrong offset!");
static_assert(offsetof(bp_ac_BaseDoor_C_UserConstructionScript, CallFunc_Multiply_FloatFloat_ReturnValue) == 0x000058, "Member 'bp_ac_BaseDoor_C_UserConstructionScript::CallFunc_Multiply_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(bp_ac_BaseDoor_C_UserConstructionScript, CallFunc_MakeVector_ReturnValue_1) == 0x00005C, "Member 'bp_ac_BaseDoor_C_UserConstructionScript::CallFunc_MakeVector_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(bp_ac_BaseDoor_C_UserConstructionScript, CallFunc_K2_SetRelativeLocation_SweepHitResult) == 0x000068, "Member 'bp_ac_BaseDoor_C_UserConstructionScript::CallFunc_K2_SetRelativeLocation_SweepHitResult' has a wrong offset!");

// Function bp_ac_BaseDoor.bp_ac_BaseDoor_C.AnyCharacterWithinTrigger
// 0x0060 (0x0060 - 0x0000)
struct bp_ac_BaseDoor_C_AnyCharacterWithinTrigger final
{
public:
	bool                                          CharacerFound;                                     // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class UPrimitiveComponent*>            CallFunc_GetOverlappingComponents_OutOverlappingComponents; // 0x0010(0x0010)(ReferenceParm, ContainsInstancedReference)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UPrimitiveComponent*                    CallFunc_Array_Get_Item;                           // 0x0028(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UCapsuleComponent*                      K2Node_DynamicCast_AsCapsule_Collision;            // 0x0038(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_41[0x7];                                       // 0x0041(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_GetOwner_ReturnValue;                     // 0x0048(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ACharacter*                             K2Node_DynamicCast_AsCharacter;                    // 0x0050(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x0058(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(bp_ac_BaseDoor_C_AnyCharacterWithinTrigger) == 0x000008, "Wrong alignment on bp_ac_BaseDoor_C_AnyCharacterWithinTrigger");
static_assert(sizeof(bp_ac_BaseDoor_C_AnyCharacterWithinTrigger) == 0x000060, "Wrong size on bp_ac_BaseDoor_C_AnyCharacterWithinTrigger");
static_assert(offsetof(bp_ac_BaseDoor_C_AnyCharacterWithinTrigger, CharacerFound) == 0x000000, "Member 'bp_ac_BaseDoor_C_AnyCharacterWithinTrigger::CharacerFound' has a wrong offset!");
static_assert(offsetof(bp_ac_BaseDoor_C_AnyCharacterWithinTrigger, Temp_int_Array_Index_Variable) == 0x000004, "Member 'bp_ac_BaseDoor_C_AnyCharacterWithinTrigger::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(bp_ac_BaseDoor_C_AnyCharacterWithinTrigger, Temp_int_Loop_Counter_Variable) == 0x000008, "Member 'bp_ac_BaseDoor_C_AnyCharacterWithinTrigger::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(bp_ac_BaseDoor_C_AnyCharacterWithinTrigger, CallFunc_Add_IntInt_ReturnValue) == 0x00000C, "Member 'bp_ac_BaseDoor_C_AnyCharacterWithinTrigger::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(bp_ac_BaseDoor_C_AnyCharacterWithinTrigger, CallFunc_GetOverlappingComponents_OutOverlappingComponents) == 0x000010, "Member 'bp_ac_BaseDoor_C_AnyCharacterWithinTrigger::CallFunc_GetOverlappingComponents_OutOverlappingComponents' has a wrong offset!");
static_assert(offsetof(bp_ac_BaseDoor_C_AnyCharacterWithinTrigger, CallFunc_Array_Length_ReturnValue) == 0x000020, "Member 'bp_ac_BaseDoor_C_AnyCharacterWithinTrigger::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(bp_ac_BaseDoor_C_AnyCharacterWithinTrigger, CallFunc_Array_Get_Item) == 0x000028, "Member 'bp_ac_BaseDoor_C_AnyCharacterWithinTrigger::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(bp_ac_BaseDoor_C_AnyCharacterWithinTrigger, CallFunc_Less_IntInt_ReturnValue) == 0x000030, "Member 'bp_ac_BaseDoor_C_AnyCharacterWithinTrigger::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(bp_ac_BaseDoor_C_AnyCharacterWithinTrigger, K2Node_DynamicCast_AsCapsule_Collision) == 0x000038, "Member 'bp_ac_BaseDoor_C_AnyCharacterWithinTrigger::K2Node_DynamicCast_AsCapsule_Collision' has a wrong offset!");
static_assert(offsetof(bp_ac_BaseDoor_C_AnyCharacterWithinTrigger, K2Node_DynamicCast_bSuccess) == 0x000040, "Member 'bp_ac_BaseDoor_C_AnyCharacterWithinTrigger::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(bp_ac_BaseDoor_C_AnyCharacterWithinTrigger, CallFunc_GetOwner_ReturnValue) == 0x000048, "Member 'bp_ac_BaseDoor_C_AnyCharacterWithinTrigger::CallFunc_GetOwner_ReturnValue' has a wrong offset!");
static_assert(offsetof(bp_ac_BaseDoor_C_AnyCharacterWithinTrigger, K2Node_DynamicCast_AsCharacter) == 0x000050, "Member 'bp_ac_BaseDoor_C_AnyCharacterWithinTrigger::K2Node_DynamicCast_AsCharacter' has a wrong offset!");
static_assert(offsetof(bp_ac_BaseDoor_C_AnyCharacterWithinTrigger, K2Node_DynamicCast_bSuccess_1) == 0x000058, "Member 'bp_ac_BaseDoor_C_AnyCharacterWithinTrigger::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");

// Function bp_ac_BaseDoor.bp_ac_BaseDoor_C.BindToSabotageComponentEvents
// 0x0020 (0x0020 - 0x0000)
struct bp_ac_BaseDoor_C_BindToSabotageComponentEvents final
{
public:
	TDelegate<void(float CooldownLeft)>           K2Node_CreateDelegate_OutputDelegate;              // 0x0000(0x0010)(ZeroConstructor, NoDestructor)
	TDelegate<void(bool IsSabotaged)>             K2Node_CreateDelegate_OutputDelegate_1;            // 0x0010(0x0010)(ZeroConstructor, NoDestructor)
};
static_assert(alignof(bp_ac_BaseDoor_C_BindToSabotageComponentEvents) == 0x000004, "Wrong alignment on bp_ac_BaseDoor_C_BindToSabotageComponentEvents");
static_assert(sizeof(bp_ac_BaseDoor_C_BindToSabotageComponentEvents) == 0x000020, "Wrong size on bp_ac_BaseDoor_C_BindToSabotageComponentEvents");
static_assert(offsetof(bp_ac_BaseDoor_C_BindToSabotageComponentEvents, K2Node_CreateDelegate_OutputDelegate) == 0x000000, "Member 'bp_ac_BaseDoor_C_BindToSabotageComponentEvents::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(bp_ac_BaseDoor_C_BindToSabotageComponentEvents, K2Node_CreateDelegate_OutputDelegate_1) == 0x000010, "Member 'bp_ac_BaseDoor_C_BindToSabotageComponentEvents::K2Node_CreateDelegate_OutputDelegate_1' has a wrong offset!");

// Function bp_ac_BaseDoor.bp_ac_BaseDoor_C.BindToDoorLockComponentEvents
// 0x0020 (0x0020 - 0x0000)
struct bp_ac_BaseDoor_C_BindToDoorLockComponentEvents final
{
public:
	TDelegate<void(float CooldownLeft)>           K2Node_CreateDelegate_OutputDelegate;              // 0x0000(0x0010)(ZeroConstructor, NoDestructor)
	TDelegate<void(bool IsLocked, bool IsOnCooldown)> K2Node_CreateDelegate_OutputDelegate_1;            // 0x0010(0x0010)(ZeroConstructor, NoDestructor)
};
static_assert(alignof(bp_ac_BaseDoor_C_BindToDoorLockComponentEvents) == 0x000004, "Wrong alignment on bp_ac_BaseDoor_C_BindToDoorLockComponentEvents");
static_assert(sizeof(bp_ac_BaseDoor_C_BindToDoorLockComponentEvents) == 0x000020, "Wrong size on bp_ac_BaseDoor_C_BindToDoorLockComponentEvents");
static_assert(offsetof(bp_ac_BaseDoor_C_BindToDoorLockComponentEvents, K2Node_CreateDelegate_OutputDelegate) == 0x000000, "Member 'bp_ac_BaseDoor_C_BindToDoorLockComponentEvents::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(bp_ac_BaseDoor_C_BindToDoorLockComponentEvents, K2Node_CreateDelegate_OutputDelegate_1) == 0x000010, "Member 'bp_ac_BaseDoor_C_BindToDoorLockComponentEvents::K2Node_CreateDelegate_OutputDelegate_1' has a wrong offset!");

// Function bp_ac_BaseDoor.bp_ac_BaseDoor_C.PressedUnlockByTiming
// 0x0050 (0x0050 - 0x0000)
struct bp_ac_BaseDoor_C_PressedUnlockByTiming final
{
public:
	int32                                         ButtonID;                                          // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Unlocked;                                          // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         L_ButtonID;                                        // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x000C(0x0001)(ConstParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<bool>                                  CallFunc_Map_Values_Values;                        // 0x0020(0x0010)(ReferenceParm)
	bool                                          CallFunc_Array_Get_Item;                           // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_31[0x3];                                       // 0x0031(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTimerHandle                           CallFunc_K2_SetTimer_ReturnValue;                  // 0x0040(0x0008)(NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_K2_IsTimerActiveHandle_ReturnValue;       // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(bp_ac_BaseDoor_C_PressedUnlockByTiming) == 0x000008, "Wrong alignment on bp_ac_BaseDoor_C_PressedUnlockByTiming");
static_assert(sizeof(bp_ac_BaseDoor_C_PressedUnlockByTiming) == 0x000050, "Wrong size on bp_ac_BaseDoor_C_PressedUnlockByTiming");
static_assert(offsetof(bp_ac_BaseDoor_C_PressedUnlockByTiming, ButtonID) == 0x000000, "Member 'bp_ac_BaseDoor_C_PressedUnlockByTiming::ButtonID' has a wrong offset!");
static_assert(offsetof(bp_ac_BaseDoor_C_PressedUnlockByTiming, Unlocked) == 0x000004, "Member 'bp_ac_BaseDoor_C_PressedUnlockByTiming::Unlocked' has a wrong offset!");
static_assert(offsetof(bp_ac_BaseDoor_C_PressedUnlockByTiming, L_ButtonID) == 0x000008, "Member 'bp_ac_BaseDoor_C_PressedUnlockByTiming::L_ButtonID' has a wrong offset!");
static_assert(offsetof(bp_ac_BaseDoor_C_PressedUnlockByTiming, Temp_bool_Variable) == 0x00000C, "Member 'bp_ac_BaseDoor_C_PressedUnlockByTiming::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(bp_ac_BaseDoor_C_PressedUnlockByTiming, Temp_int_Array_Index_Variable) == 0x000010, "Member 'bp_ac_BaseDoor_C_PressedUnlockByTiming::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(bp_ac_BaseDoor_C_PressedUnlockByTiming, Temp_int_Loop_Counter_Variable) == 0x000014, "Member 'bp_ac_BaseDoor_C_PressedUnlockByTiming::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(bp_ac_BaseDoor_C_PressedUnlockByTiming, CallFunc_Add_IntInt_ReturnValue) == 0x000018, "Member 'bp_ac_BaseDoor_C_PressedUnlockByTiming::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(bp_ac_BaseDoor_C_PressedUnlockByTiming, CallFunc_Map_Values_Values) == 0x000020, "Member 'bp_ac_BaseDoor_C_PressedUnlockByTiming::CallFunc_Map_Values_Values' has a wrong offset!");
static_assert(offsetof(bp_ac_BaseDoor_C_PressedUnlockByTiming, CallFunc_Array_Get_Item) == 0x000030, "Member 'bp_ac_BaseDoor_C_PressedUnlockByTiming::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(bp_ac_BaseDoor_C_PressedUnlockByTiming, CallFunc_Array_Length_ReturnValue) == 0x000034, "Member 'bp_ac_BaseDoor_C_PressedUnlockByTiming::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(bp_ac_BaseDoor_C_PressedUnlockByTiming, CallFunc_Less_IntInt_ReturnValue) == 0x000038, "Member 'bp_ac_BaseDoor_C_PressedUnlockByTiming::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(bp_ac_BaseDoor_C_PressedUnlockByTiming, CallFunc_K2_SetTimer_ReturnValue) == 0x000040, "Member 'bp_ac_BaseDoor_C_PressedUnlockByTiming::CallFunc_K2_SetTimer_ReturnValue' has a wrong offset!");
static_assert(offsetof(bp_ac_BaseDoor_C_PressedUnlockByTiming, CallFunc_K2_IsTimerActiveHandle_ReturnValue) == 0x000048, "Member 'bp_ac_BaseDoor_C_PressedUnlockByTiming::CallFunc_K2_IsTimerActiveHandle_ReturnValue' has a wrong offset!");

// Function bp_ac_BaseDoor.bp_ac_BaseDoor_C.FailedUnlockByTiming
// 0x0030 (0x0030 - 0x0000)
struct bp_ac_BaseDoor_C_FailedUnlockByTiming final
{
public:
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0004(0x0001)(ConstParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<int32>                                 CallFunc_Map_Keys_Keys;                            // 0x0010(0x0010)(ReferenceParm)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Get_Item;                           // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(bp_ac_BaseDoor_C_FailedUnlockByTiming) == 0x000008, "Wrong alignment on bp_ac_BaseDoor_C_FailedUnlockByTiming");
static_assert(sizeof(bp_ac_BaseDoor_C_FailedUnlockByTiming) == 0x000030, "Wrong size on bp_ac_BaseDoor_C_FailedUnlockByTiming");
static_assert(offsetof(bp_ac_BaseDoor_C_FailedUnlockByTiming, Temp_int_Array_Index_Variable) == 0x000000, "Member 'bp_ac_BaseDoor_C_FailedUnlockByTiming::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(bp_ac_BaseDoor_C_FailedUnlockByTiming, Temp_bool_Variable) == 0x000004, "Member 'bp_ac_BaseDoor_C_FailedUnlockByTiming::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(bp_ac_BaseDoor_C_FailedUnlockByTiming, Temp_int_Loop_Counter_Variable) == 0x000008, "Member 'bp_ac_BaseDoor_C_FailedUnlockByTiming::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(bp_ac_BaseDoor_C_FailedUnlockByTiming, CallFunc_Add_IntInt_ReturnValue) == 0x00000C, "Member 'bp_ac_BaseDoor_C_FailedUnlockByTiming::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(bp_ac_BaseDoor_C_FailedUnlockByTiming, CallFunc_Map_Keys_Keys) == 0x000010, "Member 'bp_ac_BaseDoor_C_FailedUnlockByTiming::CallFunc_Map_Keys_Keys' has a wrong offset!");
static_assert(offsetof(bp_ac_BaseDoor_C_FailedUnlockByTiming, CallFunc_Array_Length_ReturnValue) == 0x000020, "Member 'bp_ac_BaseDoor_C_FailedUnlockByTiming::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(bp_ac_BaseDoor_C_FailedUnlockByTiming, CallFunc_Array_Get_Item) == 0x000024, "Member 'bp_ac_BaseDoor_C_FailedUnlockByTiming::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(bp_ac_BaseDoor_C_FailedUnlockByTiming, CallFunc_Less_IntInt_ReturnValue) == 0x000028, "Member 'bp_ac_BaseDoor_C_FailedUnlockByTiming::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");

// Function bp_ac_BaseDoor.bp_ac_BaseDoor_C.PressedUnlockBySequence
// 0x001C (0x001C - 0x0000)
struct bp_ac_BaseDoor_C_PressedUnlockBySequence final
{
public:
	int32                                         ButtonID;                                          // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Unlocked;                                          // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         L_ButtonID;                                        // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable;                                 // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue;            // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Array_IsValidIndex_ReturnValue;           // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(bp_ac_BaseDoor_C_PressedUnlockBySequence) == 0x000004, "Wrong alignment on bp_ac_BaseDoor_C_PressedUnlockBySequence");
static_assert(sizeof(bp_ac_BaseDoor_C_PressedUnlockBySequence) == 0x00001C, "Wrong size on bp_ac_BaseDoor_C_PressedUnlockBySequence");
static_assert(offsetof(bp_ac_BaseDoor_C_PressedUnlockBySequence, ButtonID) == 0x000000, "Member 'bp_ac_BaseDoor_C_PressedUnlockBySequence::ButtonID' has a wrong offset!");
static_assert(offsetof(bp_ac_BaseDoor_C_PressedUnlockBySequence, Unlocked) == 0x000004, "Member 'bp_ac_BaseDoor_C_PressedUnlockBySequence::Unlocked' has a wrong offset!");
static_assert(offsetof(bp_ac_BaseDoor_C_PressedUnlockBySequence, L_ButtonID) == 0x000008, "Member 'bp_ac_BaseDoor_C_PressedUnlockBySequence::L_ButtonID' has a wrong offset!");
static_assert(offsetof(bp_ac_BaseDoor_C_PressedUnlockBySequence, Temp_int_Variable) == 0x00000C, "Member 'bp_ac_BaseDoor_C_PressedUnlockBySequence::Temp_int_Variable' has a wrong offset!");
static_assert(offsetof(bp_ac_BaseDoor_C_PressedUnlockBySequence, CallFunc_EqualEqual_IntInt_ReturnValue) == 0x000010, "Member 'bp_ac_BaseDoor_C_PressedUnlockBySequence::CallFunc_EqualEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(bp_ac_BaseDoor_C_PressedUnlockBySequence, CallFunc_Add_IntInt_ReturnValue) == 0x000014, "Member 'bp_ac_BaseDoor_C_PressedUnlockBySequence::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(bp_ac_BaseDoor_C_PressedUnlockBySequence, CallFunc_Array_IsValidIndex_ReturnValue) == 0x000018, "Member 'bp_ac_BaseDoor_C_PressedUnlockBySequence::CallFunc_Array_IsValidIndex_ReturnValue' has a wrong offset!");

// Function bp_ac_BaseDoor.bp_ac_BaseDoor_C.KeyCardInserted
// 0x0048 (0x0048 - 0x0000)
struct bp_ac_BaseDoor_C_KeyCardInserted final
{
public:
	int32                                         ButtonID;                                          // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Unlocked;                                          // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         L_KeyCardsRemaining;                               // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x000C(0x0001)(ConstParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable;                                 // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue;            // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_21[0x3];                                       // 0x0021(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue_1;                 // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<bool>                                  CallFunc_Map_Values_Values;                        // 0x0028(0x0010)(ReferenceParm)
	bool                                          CallFunc_Array_Get_Item;                           // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_39[0x3];                                       // 0x0039(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(bp_ac_BaseDoor_C_KeyCardInserted) == 0x000008, "Wrong alignment on bp_ac_BaseDoor_C_KeyCardInserted");
static_assert(sizeof(bp_ac_BaseDoor_C_KeyCardInserted) == 0x000048, "Wrong size on bp_ac_BaseDoor_C_KeyCardInserted");
static_assert(offsetof(bp_ac_BaseDoor_C_KeyCardInserted, ButtonID) == 0x000000, "Member 'bp_ac_BaseDoor_C_KeyCardInserted::ButtonID' has a wrong offset!");
static_assert(offsetof(bp_ac_BaseDoor_C_KeyCardInserted, Unlocked) == 0x000004, "Member 'bp_ac_BaseDoor_C_KeyCardInserted::Unlocked' has a wrong offset!");
static_assert(offsetof(bp_ac_BaseDoor_C_KeyCardInserted, L_KeyCardsRemaining) == 0x000008, "Member 'bp_ac_BaseDoor_C_KeyCardInserted::L_KeyCardsRemaining' has a wrong offset!");
static_assert(offsetof(bp_ac_BaseDoor_C_KeyCardInserted, Temp_bool_Variable) == 0x00000C, "Member 'bp_ac_BaseDoor_C_KeyCardInserted::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(bp_ac_BaseDoor_C_KeyCardInserted, Temp_int_Loop_Counter_Variable) == 0x000010, "Member 'bp_ac_BaseDoor_C_KeyCardInserted::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(bp_ac_BaseDoor_C_KeyCardInserted, CallFunc_Add_IntInt_ReturnValue) == 0x000014, "Member 'bp_ac_BaseDoor_C_KeyCardInserted::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(bp_ac_BaseDoor_C_KeyCardInserted, Temp_int_Array_Index_Variable) == 0x000018, "Member 'bp_ac_BaseDoor_C_KeyCardInserted::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(bp_ac_BaseDoor_C_KeyCardInserted, Temp_int_Variable) == 0x00001C, "Member 'bp_ac_BaseDoor_C_KeyCardInserted::Temp_int_Variable' has a wrong offset!");
static_assert(offsetof(bp_ac_BaseDoor_C_KeyCardInserted, CallFunc_EqualEqual_IntInt_ReturnValue) == 0x000020, "Member 'bp_ac_BaseDoor_C_KeyCardInserted::CallFunc_EqualEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(bp_ac_BaseDoor_C_KeyCardInserted, CallFunc_Add_IntInt_ReturnValue_1) == 0x000024, "Member 'bp_ac_BaseDoor_C_KeyCardInserted::CallFunc_Add_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(bp_ac_BaseDoor_C_KeyCardInserted, CallFunc_Map_Values_Values) == 0x000028, "Member 'bp_ac_BaseDoor_C_KeyCardInserted::CallFunc_Map_Values_Values' has a wrong offset!");
static_assert(offsetof(bp_ac_BaseDoor_C_KeyCardInserted, CallFunc_Array_Get_Item) == 0x000038, "Member 'bp_ac_BaseDoor_C_KeyCardInserted::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(bp_ac_BaseDoor_C_KeyCardInserted, CallFunc_Array_Length_ReturnValue) == 0x00003C, "Member 'bp_ac_BaseDoor_C_KeyCardInserted::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(bp_ac_BaseDoor_C_KeyCardInserted, CallFunc_Less_IntInt_ReturnValue) == 0x000040, "Member 'bp_ac_BaseDoor_C_KeyCardInserted::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");

// Function bp_ac_BaseDoor.bp_ac_BaseDoor_C.CalculateDoorPosition
// 0x0020 (0x0020 - 0x0000)
struct bp_ac_BaseDoor_C_CalculateDoorPosition final
{
public:
	bool                                          Open;                                              // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CurvedOpenAmount;                                  // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetWorldDeltaSeconds_ReturnValue;         // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetFloatValue_ReturnValue;                // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_MathExpression_ReturnValue;                 // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetWorldDeltaSeconds_ReturnValue_1;       // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_MathExpression_ReturnValue_1;               // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue;           // 0x001C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Less_FloatFloat_ReturnValue;              // 0x001D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(bp_ac_BaseDoor_C_CalculateDoorPosition) == 0x000004, "Wrong alignment on bp_ac_BaseDoor_C_CalculateDoorPosition");
static_assert(sizeof(bp_ac_BaseDoor_C_CalculateDoorPosition) == 0x000020, "Wrong size on bp_ac_BaseDoor_C_CalculateDoorPosition");
static_assert(offsetof(bp_ac_BaseDoor_C_CalculateDoorPosition, Open) == 0x000000, "Member 'bp_ac_BaseDoor_C_CalculateDoorPosition::Open' has a wrong offset!");
static_assert(offsetof(bp_ac_BaseDoor_C_CalculateDoorPosition, CurvedOpenAmount) == 0x000004, "Member 'bp_ac_BaseDoor_C_CalculateDoorPosition::CurvedOpenAmount' has a wrong offset!");
static_assert(offsetof(bp_ac_BaseDoor_C_CalculateDoorPosition, CallFunc_GetWorldDeltaSeconds_ReturnValue) == 0x000008, "Member 'bp_ac_BaseDoor_C_CalculateDoorPosition::CallFunc_GetWorldDeltaSeconds_ReturnValue' has a wrong offset!");
static_assert(offsetof(bp_ac_BaseDoor_C_CalculateDoorPosition, CallFunc_GetFloatValue_ReturnValue) == 0x00000C, "Member 'bp_ac_BaseDoor_C_CalculateDoorPosition::CallFunc_GetFloatValue_ReturnValue' has a wrong offset!");
static_assert(offsetof(bp_ac_BaseDoor_C_CalculateDoorPosition, K2Node_MathExpression_ReturnValue) == 0x000010, "Member 'bp_ac_BaseDoor_C_CalculateDoorPosition::K2Node_MathExpression_ReturnValue' has a wrong offset!");
static_assert(offsetof(bp_ac_BaseDoor_C_CalculateDoorPosition, CallFunc_GetWorldDeltaSeconds_ReturnValue_1) == 0x000014, "Member 'bp_ac_BaseDoor_C_CalculateDoorPosition::CallFunc_GetWorldDeltaSeconds_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(bp_ac_BaseDoor_C_CalculateDoorPosition, K2Node_MathExpression_ReturnValue_1) == 0x000018, "Member 'bp_ac_BaseDoor_C_CalculateDoorPosition::K2Node_MathExpression_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(bp_ac_BaseDoor_C_CalculateDoorPosition, CallFunc_Greater_FloatFloat_ReturnValue) == 0x00001C, "Member 'bp_ac_BaseDoor_C_CalculateDoorPosition::CallFunc_Greater_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(bp_ac_BaseDoor_C_CalculateDoorPosition, CallFunc_Less_FloatFloat_ReturnValue) == 0x00001D, "Member 'bp_ac_BaseDoor_C_CalculateDoorPosition::CallFunc_Less_FloatFloat_ReturnValue' has a wrong offset!");

// Function bp_ac_BaseDoor.bp_ac_BaseDoor_C.MoveDoors
// 0x0004 (0x0004 - 0x0000)
struct bp_ac_BaseDoor_C_MoveDoors final
{
public:
	float                                         CurvedMovePositionNormalized;                      // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(bp_ac_BaseDoor_C_MoveDoors) == 0x000004, "Wrong alignment on bp_ac_BaseDoor_C_MoveDoors");
static_assert(sizeof(bp_ac_BaseDoor_C_MoveDoors) == 0x000004, "Wrong size on bp_ac_BaseDoor_C_MoveDoors");
static_assert(offsetof(bp_ac_BaseDoor_C_MoveDoors, CurvedMovePositionNormalized) == 0x000000, "Member 'bp_ac_BaseDoor_C_MoveDoors::CurvedMovePositionNormalized' has a wrong offset!");

// Function bp_ac_BaseDoor.bp_ac_BaseDoor_C.BindToDoorOpenerComponentEvents
// 0x0010 (0x0010 - 0x0000)
struct bp_ac_BaseDoor_C_BindToDoorOpenerComponentEvents final
{
public:
	TDelegate<void(bool IsOpening)>               K2Node_CreateDelegate_OutputDelegate;              // 0x0000(0x0010)(ZeroConstructor, NoDestructor)
};
static_assert(alignof(bp_ac_BaseDoor_C_BindToDoorOpenerComponentEvents) == 0x000004, "Wrong alignment on bp_ac_BaseDoor_C_BindToDoorOpenerComponentEvents");
static_assert(sizeof(bp_ac_BaseDoor_C_BindToDoorOpenerComponentEvents) == 0x000010, "Wrong size on bp_ac_BaseDoor_C_BindToDoorOpenerComponentEvents");
static_assert(offsetof(bp_ac_BaseDoor_C_BindToDoorOpenerComponentEvents, K2Node_CreateDelegate_OutputDelegate) == 0x000000, "Member 'bp_ac_BaseDoor_C_BindToDoorOpenerComponentEvents::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");

// Function bp_ac_BaseDoor.bp_ac_BaseDoor_C.BindToHackingComponentEvents
// 0x0010 (0x0010 - 0x0000)
struct bp_ac_BaseDoor_C_BindToHackingComponentEvents final
{
public:
	TDelegate<void(bool IsHacked)>                K2Node_CreateDelegate_OutputDelegate;              // 0x0000(0x0010)(ZeroConstructor, NoDestructor)
};
static_assert(alignof(bp_ac_BaseDoor_C_BindToHackingComponentEvents) == 0x000004, "Wrong alignment on bp_ac_BaseDoor_C_BindToHackingComponentEvents");
static_assert(sizeof(bp_ac_BaseDoor_C_BindToHackingComponentEvents) == 0x000010, "Wrong size on bp_ac_BaseDoor_C_BindToHackingComponentEvents");
static_assert(offsetof(bp_ac_BaseDoor_C_BindToHackingComponentEvents, K2Node_CreateDelegate_OutputDelegate) == 0x000000, "Member 'bp_ac_BaseDoor_C_BindToHackingComponentEvents::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");

// Function bp_ac_BaseDoor.bp_ac_BaseDoor_C.IsACharacterOverlapping
// 0x0050 (0x0050 - 0x0000)
struct bp_ac_BaseDoor_C_IsACharacterOverlapping final
{
public:
	TArray<class UPrimitiveComponent*>            OtherComp;                                         // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, ContainsInstancedReference)
	bool                                          Return_Value;                                      // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    CallFunc_Array_Get_Item;                           // 0x0020(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UCapsuleComponent*                      K2Node_DynamicCast_AsCapsule_Collision;            // 0x0028(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0031(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_32[0x6];                                       // 0x0032(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_GetOwner_ReturnValue;                     // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class APawn*                                  K2Node_DynamicCast_AsPawn;                         // 0x0040(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_49[0x3];                                       // 0x0049(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x004C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(bp_ac_BaseDoor_C_IsACharacterOverlapping) == 0x000008, "Wrong alignment on bp_ac_BaseDoor_C_IsACharacterOverlapping");
static_assert(sizeof(bp_ac_BaseDoor_C_IsACharacterOverlapping) == 0x000050, "Wrong size on bp_ac_BaseDoor_C_IsACharacterOverlapping");
static_assert(offsetof(bp_ac_BaseDoor_C_IsACharacterOverlapping, OtherComp) == 0x000000, "Member 'bp_ac_BaseDoor_C_IsACharacterOverlapping::OtherComp' has a wrong offset!");
static_assert(offsetof(bp_ac_BaseDoor_C_IsACharacterOverlapping, Return_Value) == 0x000010, "Member 'bp_ac_BaseDoor_C_IsACharacterOverlapping::Return_Value' has a wrong offset!");
static_assert(offsetof(bp_ac_BaseDoor_C_IsACharacterOverlapping, CallFunc_Array_Length_ReturnValue) == 0x000014, "Member 'bp_ac_BaseDoor_C_IsACharacterOverlapping::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(bp_ac_BaseDoor_C_IsACharacterOverlapping, Temp_int_Array_Index_Variable) == 0x000018, "Member 'bp_ac_BaseDoor_C_IsACharacterOverlapping::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(bp_ac_BaseDoor_C_IsACharacterOverlapping, Temp_int_Loop_Counter_Variable) == 0x00001C, "Member 'bp_ac_BaseDoor_C_IsACharacterOverlapping::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(bp_ac_BaseDoor_C_IsACharacterOverlapping, CallFunc_Array_Get_Item) == 0x000020, "Member 'bp_ac_BaseDoor_C_IsACharacterOverlapping::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(bp_ac_BaseDoor_C_IsACharacterOverlapping, K2Node_DynamicCast_AsCapsule_Collision) == 0x000028, "Member 'bp_ac_BaseDoor_C_IsACharacterOverlapping::K2Node_DynamicCast_AsCapsule_Collision' has a wrong offset!");
static_assert(offsetof(bp_ac_BaseDoor_C_IsACharacterOverlapping, K2Node_DynamicCast_bSuccess) == 0x000030, "Member 'bp_ac_BaseDoor_C_IsACharacterOverlapping::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(bp_ac_BaseDoor_C_IsACharacterOverlapping, CallFunc_Less_IntInt_ReturnValue) == 0x000031, "Member 'bp_ac_BaseDoor_C_IsACharacterOverlapping::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(bp_ac_BaseDoor_C_IsACharacterOverlapping, CallFunc_GetOwner_ReturnValue) == 0x000038, "Member 'bp_ac_BaseDoor_C_IsACharacterOverlapping::CallFunc_GetOwner_ReturnValue' has a wrong offset!");
static_assert(offsetof(bp_ac_BaseDoor_C_IsACharacterOverlapping, K2Node_DynamicCast_AsPawn) == 0x000040, "Member 'bp_ac_BaseDoor_C_IsACharacterOverlapping::K2Node_DynamicCast_AsPawn' has a wrong offset!");
static_assert(offsetof(bp_ac_BaseDoor_C_IsACharacterOverlapping, K2Node_DynamicCast_bSuccess_1) == 0x000048, "Member 'bp_ac_BaseDoor_C_IsACharacterOverlapping::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(bp_ac_BaseDoor_C_IsACharacterOverlapping, CallFunc_Add_IntInt_ReturnValue) == 0x00004C, "Member 'bp_ac_BaseDoor_C_IsACharacterOverlapping::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");

// Function bp_ac_BaseDoor.bp_ac_BaseDoor_C.CanAutoClose
// 0x0003 (0x0003 - 0x0000)
struct bp_ac_BaseDoor_C_CanAutoClose final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_K2_IsTimerActiveHandle_ReturnValue;       // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(bp_ac_BaseDoor_C_CanAutoClose) == 0x000001, "Wrong alignment on bp_ac_BaseDoor_C_CanAutoClose");
static_assert(sizeof(bp_ac_BaseDoor_C_CanAutoClose) == 0x000003, "Wrong size on bp_ac_BaseDoor_C_CanAutoClose");
static_assert(offsetof(bp_ac_BaseDoor_C_CanAutoClose, ReturnValue) == 0x000000, "Member 'bp_ac_BaseDoor_C_CanAutoClose::ReturnValue' has a wrong offset!");
static_assert(offsetof(bp_ac_BaseDoor_C_CanAutoClose, CallFunc_K2_IsTimerActiveHandle_ReturnValue) == 0x000001, "Member 'bp_ac_BaseDoor_C_CanAutoClose::CallFunc_K2_IsTimerActiveHandle_ReturnValue' has a wrong offset!");
static_assert(offsetof(bp_ac_BaseDoor_C_CanAutoClose, CallFunc_Not_PreBool_ReturnValue) == 0x000002, "Member 'bp_ac_BaseDoor_C_CanAutoClose::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");

// Function bp_ac_BaseDoor.bp_ac_BaseDoor_C.GetKeyCardSlotsCount
// 0x0008 (0x0008 - 0x0000)
struct bp_ac_BaseDoor_C_GetKeyCardSlotsCount final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Map_Length_ReturnValue;                   // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(bp_ac_BaseDoor_C_GetKeyCardSlotsCount) == 0x000004, "Wrong alignment on bp_ac_BaseDoor_C_GetKeyCardSlotsCount");
static_assert(sizeof(bp_ac_BaseDoor_C_GetKeyCardSlotsCount) == 0x000008, "Wrong size on bp_ac_BaseDoor_C_GetKeyCardSlotsCount");
static_assert(offsetof(bp_ac_BaseDoor_C_GetKeyCardSlotsCount, ReturnValue) == 0x000000, "Member 'bp_ac_BaseDoor_C_GetKeyCardSlotsCount::ReturnValue' has a wrong offset!");
static_assert(offsetof(bp_ac_BaseDoor_C_GetKeyCardSlotsCount, CallFunc_Map_Length_ReturnValue) == 0x000004, "Member 'bp_ac_BaseDoor_C_GetKeyCardSlotsCount::CallFunc_Map_Length_ReturnValue' has a wrong offset!");

// Function bp_ac_BaseDoor.bp_ac_BaseDoor_C.IsOpenedWithKeyCards
// 0x0002 (0x0002 - 0x0000)
struct bp_ac_BaseDoor_C_IsOpenedWithKeyCards final
{
public:
	bool                                          Return_Value;                                      // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(bp_ac_BaseDoor_C_IsOpenedWithKeyCards) == 0x000001, "Wrong alignment on bp_ac_BaseDoor_C_IsOpenedWithKeyCards");
static_assert(sizeof(bp_ac_BaseDoor_C_IsOpenedWithKeyCards) == 0x000002, "Wrong size on bp_ac_BaseDoor_C_IsOpenedWithKeyCards");
static_assert(offsetof(bp_ac_BaseDoor_C_IsOpenedWithKeyCards, Return_Value) == 0x000000, "Member 'bp_ac_BaseDoor_C_IsOpenedWithKeyCards::Return_Value' has a wrong offset!");
static_assert(offsetof(bp_ac_BaseDoor_C_IsOpenedWithKeyCards, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x000001, "Member 'bp_ac_BaseDoor_C_IsOpenedWithKeyCards::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");

}

