#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: VruumbaRace

#include "Basic.hpp"

#include "VruumbaRace_classes.hpp"
#include "VruumbaRace_parameters.hpp"


namespace SDK
{

// Function VruumbaRace.VruumbaRace_C.UpdatedRaceScore__DelegateSignature
// (Public, Delegate, BlueprintCallable, BlueprintEvent)

void AVruumbaRace_C::UpdatedRaceScore__DelegateSignature()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VruumbaRace_C", "UpdatedRaceScore__DelegateSignature");

	UObject::ProcessEvent(Func, nullptr);
}


// Function VruumbaRace.VruumbaRace_C.CheckGlobal__DelegateSignature
// (Public, Delegate, BlueprintCallable, BlueprintEvent)

void AVruumbaRace_C::CheckGlobal__DelegateSignature()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VruumbaRace_C", "CheckGlobal__DelegateSignature");

	UObject::ProcessEvent(Func, nullptr);
}


// Function VruumbaRace.VruumbaRace_C.ExecuteUbergraph_VruumbaRace
// (Final, UbergraphFunction, HasDefaults)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AVruumbaRace_C::ExecuteUbergraph_VruumbaRace(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VruumbaRace_C", "ExecuteUbergraph_VruumbaRace");

	Params::VruumbaRace_C_ExecuteUbergraph_VruumbaRace Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function VruumbaRace.VruumbaRace_C.ReceiveDestroyed
// (Event, Public, BlueprintEvent)

void AVruumbaRace_C::ReceiveDestroyed()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VruumbaRace_C", "ReceiveDestroyed");

	UObject::ProcessEvent(Func, nullptr);
}


// Function VruumbaRace.VruumbaRace_C.Stop Timelines
// (BlueprintCallable, BlueprintEvent)

void AVruumbaRace_C::Stop_Timelines()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VruumbaRace_C", "Stop Timelines");

	UObject::ProcessEvent(Func, nullptr);
}


// Function VruumbaRace.VruumbaRace_C.Start Timelines
// (BlueprintCallable, BlueprintEvent)

void AVruumbaRace_C::Start_Timelines()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VruumbaRace_C", "Start Timelines");

	UObject::ProcessEvent(Func, nullptr);
}


// Function VruumbaRace.VruumbaRace_C.Stop Spline
// (BlueprintCallable, BlueprintEvent)

void AVruumbaRace_C::Stop_Spline()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VruumbaRace_C", "Stop Spline");

	UObject::ProcessEvent(Func, nullptr);
}


// Function VruumbaRace.VruumbaRace_C.Draw Spline
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    FirstCheckPoint                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// class AVruumbaRaceCheckPoint_C*         NextCheckPoint                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class AVruumbaRaceCheckPoint_C*         PreviousCheckpoint                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AVruumbaRace_C::Draw_Spline(bool FirstCheckPoint, class AVruumbaRaceCheckPoint_C* NextCheckPoint, class AVruumbaRaceCheckPoint_C* PreviousCheckpoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VruumbaRace_C", "Draw Spline");

	Params::VruumbaRace_C_Draw_Spline Parms{};

	Parms.FirstCheckPoint = FirstCheckPoint;
	Parms.NextCheckPoint = NextCheckPoint;
	Parms.PreviousCheckpoint = PreviousCheckpoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function VruumbaRace.VruumbaRace_C.Server Give Score
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// class AVruumbaSCTBP_C*                  Vruumba_Player                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AVruumbaRace_C::Server_Give_Score(class AVruumbaSCTBP_C* Vruumba_Player)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VruumbaRace_C", "Server Give Score");

	Params::VruumbaRace_C_Server_Give_Score Parms{};

	Parms.Vruumba_Player = Vruumba_Player;

	UObject::ProcessEvent(Func, &Parms);
}


// Function VruumbaRace.VruumbaRace_C.POI visible first time
// (BlueprintCallable, BlueprintEvent)

void AVruumbaRace_C::POI_visible_first_time()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VruumbaRace_C", "POI visible first time");

	UObject::ProcessEvent(Func, nullptr);
}


// Function VruumbaRace.VruumbaRace_C.Server Check Best Time
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   Time                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class AVruumbaSCTBP_C*                  VruumbaPlayer_0                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AVruumbaRace_C::Server_Check_Best_Time(float Time, class AVruumbaSCTBP_C* VruumbaPlayer_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VruumbaRace_C", "Server Check Best Time");

	Params::VruumbaRace_C_Server_Check_Best_Time Parms{};

	Parms.Time = Time;
	Parms.VruumbaPlayer_0 = VruumbaPlayer_0;

	UObject::ProcessEvent(Func, &Parms);
}


// Function VruumbaRace.VruumbaRace_C.CheckPoint Cleared
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   NextCheckPoint                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AVruumbaRace_C::CheckPoint_Cleared(int32 NextCheckPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VruumbaRace_C", "CheckPoint Cleared");

	Params::VruumbaRace_C_CheckPoint_Cleared Parms{};

	Parms.NextCheckPoint = NextCheckPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function VruumbaRace.VruumbaRace_C.Widget Update Leading Player
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   Time                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class AVruumbaSCTBP_C*                  LeadingVruumbaPlayer                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AVruumbaRace_C::Widget_Update_Leading_Player(float Time, class AVruumbaSCTBP_C* LeadingVruumbaPlayer)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VruumbaRace_C", "Widget Update Leading Player");

	Params::VruumbaRace_C_Widget_Update_Leading_Player Parms{};

	Parms.Time = Time;
	Parms.LeadingVruumbaPlayer = LeadingVruumbaPlayer;

	UObject::ProcessEvent(Func, &Parms);
}


// Function VruumbaRace.VruumbaRace_C.NewLeadingPlayer
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// class AVruumbaSCTBP_C*                  LeadingVruumbaPlayer                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   Time                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AVruumbaRace_C::NewLeadingPlayer(class AVruumbaSCTBP_C* LeadingVruumbaPlayer, float Time)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VruumbaRace_C", "NewLeadingPlayer");

	Params::VruumbaRace_C_NewLeadingPlayer Parms{};

	Parms.LeadingVruumbaPlayer = LeadingVruumbaPlayer;
	Parms.Time = Time;

	UObject::ProcessEvent(Func, &Parms);
}


// Function VruumbaRace.VruumbaRace_C.BndEvt__Box_K2Node_ComponentBoundEvent_1_ComponentEndOverlapSignature__DelegateSignature
// (BlueprintEvent)
// Parameters:
// class UPrimitiveComponent*              OverlappedComponent                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class AActor*                           OtherActor                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UPrimitiveComponent*              OtherComp                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   OtherBodyIndex                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AVruumbaRace_C::BndEvt__Box_K2Node_ComponentBoundEvent_1_ComponentEndOverlapSignature__DelegateSignature(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VruumbaRace_C", "BndEvt__Box_K2Node_ComponentBoundEvent_1_ComponentEndOverlapSignature__DelegateSignature");

	Params::VruumbaRace_C_BndEvt__Box_K2Node_ComponentBoundEvent_1_ComponentEndOverlapSignature__DelegateSignature Parms{};

	Parms.OverlappedComponent = OverlappedComponent;
	Parms.OtherActor = OtherActor;
	Parms.OtherComp = OtherComp;
	Parms.OtherBodyIndex = OtherBodyIndex;

	UObject::ProcessEvent(Func, &Parms);
}


// Function VruumbaRace.VruumbaRace_C.RaceComplete
// (BlueprintCallable, BlueprintEvent)

void AVruumbaRace_C::RaceComplete()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VruumbaRace_C", "RaceComplete");

	UObject::ProcessEvent(Func, nullptr);
}


// Function VruumbaRace.VruumbaRace_C.Start Sequence
// (BlueprintCallable, BlueprintEvent)

void AVruumbaRace_C::Start_Sequence()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VruumbaRace_C", "Start Sequence");

	UObject::ProcessEvent(Func, nullptr);
}


// Function VruumbaRace.VruumbaRace_C.StopRaceTime
// (BlueprintCallable, BlueprintEvent)

void AVruumbaRace_C::StopRaceTime()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VruumbaRace_C", "StopRaceTime");

	UObject::ProcessEvent(Func, nullptr);
}


// Function VruumbaRace.VruumbaRace_C.StartRaceTime
// (BlueprintCallable, BlueprintEvent)

void AVruumbaRace_C::StartRaceTime()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VruumbaRace_C", "StartRaceTime");

	UObject::ProcessEvent(Func, nullptr);
}


// Function VruumbaRace.VruumbaRace_C.Timeline_2__UpdateFunc
// (BlueprintEvent)

void AVruumbaRace_C::Timeline_2__UpdateFunc()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VruumbaRace_C", "Timeline_2__UpdateFunc");

	UObject::ProcessEvent(Func, nullptr);
}


// Function VruumbaRace.VruumbaRace_C.Timeline_2__FinishedFunc
// (BlueprintEvent)

void AVruumbaRace_C::Timeline_2__FinishedFunc()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VruumbaRace_C", "Timeline_2__FinishedFunc");

	UObject::ProcessEvent(Func, nullptr);
}


// Function VruumbaRace.VruumbaRace_C.Timeline_1__UpdateFunc
// (BlueprintEvent)

void AVruumbaRace_C::Timeline_1__UpdateFunc()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VruumbaRace_C", "Timeline_1__UpdateFunc");

	UObject::ProcessEvent(Func, nullptr);
}


// Function VruumbaRace.VruumbaRace_C.Timeline_1__FinishedFunc
// (BlueprintEvent)

void AVruumbaRace_C::Timeline_1__FinishedFunc()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VruumbaRace_C", "Timeline_1__FinishedFunc");

	UObject::ProcessEvent(Func, nullptr);
}


// Function VruumbaRace.VruumbaRace_C.Timeline_0__UpdateFunc
// (BlueprintEvent)

void AVruumbaRace_C::Timeline_0__UpdateFunc()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VruumbaRace_C", "Timeline_0__UpdateFunc");

	UObject::ProcessEvent(Func, nullptr);
}


// Function VruumbaRace.VruumbaRace_C.Timeline_0__FinishedFunc
// (BlueprintEvent)

void AVruumbaRace_C::Timeline_0__FinishedFunc()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VruumbaRace_C", "Timeline_0__FinishedFunc");

	UObject::ProcessEvent(Func, nullptr);
}


// Function VruumbaRace.VruumbaRace_C.RaceTime__UpdateFunc
// (BlueprintEvent)

void AVruumbaRace_C::RaceTime__UpdateFunc()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VruumbaRace_C", "RaceTime__UpdateFunc");

	UObject::ProcessEvent(Func, nullptr);
}


// Function VruumbaRace.VruumbaRace_C.RaceTime__FinishedFunc
// (BlueprintEvent)

void AVruumbaRace_C::RaceTime__FinishedFunc()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VruumbaRace_C", "RaceTime__FinishedFunc");

	UObject::ProcessEvent(Func, nullptr);
}


// Function VruumbaRace.VruumbaRace_C.ActivateCheckpoint
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AVruumbaRaceCheckPoint_C*         NextCheckPoint                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    FirstCheckPoint                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    LastCheckPoint                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// class AVruumbaRaceCheckPoint_C*         PreviousCheckpoint                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AVruumbaRace_C::ActivateCheckpoint(class AVruumbaRaceCheckPoint_C* NextCheckPoint, bool FirstCheckPoint, bool LastCheckPoint, class AVruumbaRaceCheckPoint_C* PreviousCheckpoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VruumbaRace_C", "ActivateCheckpoint");

	Params::VruumbaRace_C_ActivateCheckpoint Parms{};

	Parms.NextCheckPoint = NextCheckPoint;
	Parms.FirstCheckPoint = FirstCheckPoint;
	Parms.LastCheckPoint = LastCheckPoint;
	Parms.PreviousCheckpoint = PreviousCheckpoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function VruumbaRace.VruumbaRace_C.RaceCheck
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   Checkpoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class AVruumbaRaceCheckPoint_C*         CheckPointRef                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AVruumbaRace_C::RaceCheck(int32 Checkpoint, class AVruumbaRaceCheckPoint_C* CheckPointRef)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VruumbaRace_C", "RaceCheck");

	Params::VruumbaRace_C_RaceCheck Parms{};

	Parms.Checkpoint = Checkpoint;
	Parms.CheckPointRef = CheckPointRef;

	UObject::ProcessEvent(Func, &Parms);
}


// Function VruumbaRace.VruumbaRace_C.Check Best Global Time
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   Time                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class AVruumbaSCTBP_C*                  InVruumbaPlayer                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AVruumbaRace_C::Check_Best_Global_Time(float Time, class AVruumbaSCTBP_C* InVruumbaPlayer)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VruumbaRace_C", "Check Best Global Time");

	Params::VruumbaRace_C_Check_Best_Global_Time Parms{};

	Parms.Time = Time;
	Parms.InVruumbaPlayer = InVruumbaPlayer;

	UObject::ProcessEvent(Func, &Parms);
}


// Function VruumbaRace.VruumbaRace_C.Calculate Result
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class APlayerState*                     VruumbaPlayerState                                     (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AVruumbaRace_C::Calculate_Result(class APlayerState** VruumbaPlayerState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VruumbaRace_C", "Calculate Result");

	Params::VruumbaRace_C_Calculate_Result Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (VruumbaPlayerState != nullptr)
		*VruumbaPlayerState = Parms.VruumbaPlayerState;
}


// Function VruumbaRace.VruumbaRace_C.Hide Check Points
// (Public, BlueprintCallable, BlueprintEvent)

void AVruumbaRace_C::Hide_Check_Points()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VruumbaRace_C", "Hide Check Points");

	UObject::ProcessEvent(Func, nullptr);
}


// Function VruumbaRace.VruumbaRace_C.OnRep_BestRaceTime
// (BlueprintCallable, BlueprintEvent)

void AVruumbaRace_C::OnRep_BestRaceTime()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VruumbaRace_C", "OnRep_BestRaceTime");

	UObject::ProcessEvent(Func, nullptr);
}

}

