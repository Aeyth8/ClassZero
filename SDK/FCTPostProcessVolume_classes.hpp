#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: FCTPostProcessVolume

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass FCTPostProcessVolume.FCTPostProcessVolume_C
// 0x07A0 (0x09C0 - 0x0220)
class AFCTPostProcessVolume_C final : public AActor
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0220(0x0008)(ZeroConstructor, Transient, DuplicateTransient, UObjectWrapper)
	class UBillboardComponent*                    Icon;                                              // 0x0228(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UPostProcessComponent*                  PostProcess;                                       // 0x0230(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBoxComponent*                          Volume;                                            // 0x0238(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	float                                         PersonoidScanTimeline_Alpha_90B8635248F183D3B68FECB156614DB5; // 0x0240(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            PersonoidScanTimeline__Direction_90B8635248F183D3B68FECB156614DB5; // 0x0244(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	uint8                                         Pad_245[0x3];                                      // 0x0245(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     PersonoidScanTimeline;                             // 0x0248(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         TimelineBlizzard_Alpha_9586910B470E74348AC747AC45620A91; // 0x0250(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            TimelineBlizzard__Direction_9586910B470E74348AC747AC45620A91; // 0x0254(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	uint8                                         Pad_255[0x3];                                      // 0x0255(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     TimelineBlizzard;                                  // 0x0258(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FPostProcessSettings                   NativePostProcess;                                 // 0x0260(0x0550)(Edit, BlueprintVisible)
	float                                         Priority;                                          // 0x07B0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         BlendRadius;                                       // 0x07B4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         BlendWeight;                                       // 0x07B8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Enabled;                                           // 0x07BC(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Unbound;                                           // 0x07BD(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Outline;                                           // 0x07BE(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7BF[0x1];                                      // 0x07BF(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         OutlineBlendWeight;                                // 0x07C0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         OutlineOpacity;                                    // 0x07C4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         OutlineThickness;                                  // 0x07C8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         OutlineDepth;                                      // 0x07CC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         OutlinePower;                                      // 0x07D0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         OutlineDistanceFade;                               // 0x07D4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         OutlineDistanceSharpness;                          // 0x07D8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         OutlineTransparencyReduction;                      // 0x07DC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TSoftObjectPtr<class UMaterialInterface>      OutlineMaterial;                                   // 0x07E0(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	bool                                          AmbientOcclusionHatching;                          // 0x0808(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_809[0x7];                                      // 0x0809(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class UMaterialInterface>      AOHatchMaterial_World;                             // 0x0810(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	float                                         AOHatchBlendWeight;                                // 0x0838(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          AOHatchWorldSpace;                                 // 0x083C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_83D[0x3];                                      // 0x083D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         AOHatchTextureScale;                               // 0x0840(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         AOHatchAOStrength;                                 // 0x0844(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         AOHatchOverlayOpacity;                             // 0x0848(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_84C[0x4];                                      // 0x084C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class UTexture>                AOHatchTexture;                                    // 0x0850(0x0028)(Edit, BlueprintVisible, HasGetValueTypeHash)
	TSoftObjectPtr<class UMaterialInterface>      AOHatchMaterial_Screen;                            // 0x0878(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	TSoftObjectPtr<class UMaterialInterface>      WorldOverlayMaterial;                              // 0x08A0(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	bool                                          WorldOverlay;                                      // 0x08C8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8C9[0x3];                                      // 0x08C9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         WorldOverlayBlendWeight;                           // 0x08CC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         WorldOverlayGreyValue;                             // 0x08D0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         WorldOverlayOpacity;                               // 0x08D4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         WorldOverlayTextureScale;                          // 0x08D8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_8DC[0x4];                                      // 0x08DC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class UTexture>                WorldOverlayTexture;                               // 0x08E0(0x0028)(Edit, BlueprintVisible, HasGetValueTypeHash)
	TSoftObjectPtr<class UMaterialInterface>      DistanceFogMaterial;                               // 0x0908(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	bool                                          DistanceFog;                                       // 0x0930(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_931[0x3];                                      // 0x0931(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         DistanceFogBlendWeight;                            // 0x0934(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Distance_Fog_Near_Color;                           // 0x0938(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Distance_Fog_Far_Color;                            // 0x0948(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Distance_Fog_Distance;                             // 0x0958(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Distance_Fog_Edge_Sharpness;                       // 0x095C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         TargetBlizzardFogFarColorAlpha;                    // 0x0960(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         TargetBlizzardFogDistance;                         // 0x0964(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           InitialDistanceFogFarColor;                        // 0x0968(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         InitialDistanceFogDistance;                        // 0x0978(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_97C[0x4];                                      // 0x097C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInstanceDynamic*               DistanceFogMID;                                    // 0x0980(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         DistanceFogMaxDistance;                            // 0x0988(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_98C[0x4];                                      // 0x098C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInstanceDynamic*               PersonoidScanMID;                                  // 0x0990(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           NormalOutlineColor;                                // 0x0998(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           XrayOutlineColor;                                  // 0x09A8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_FCTPostProcessVolume(int32 EntryPoint);
	void ReceiveBeginPlay();
	void Stop_Blizzard_PP();
	void Start_Blizzard_PP();
	void StopPersonoidScan();
	void StartPersonoidScan(float Duration);
	void TimelineBlizzard__UpdateFunc();
	void TimelineBlizzard__FinishedFunc();
	void PersonoidScanTimeline__UpdateFunc();
	void PersonoidScanTimeline__FinishedFunc();
	void UserConstructionScript();
	void SetupBlendables();
	void OutlineBlendable();
	void AOHatchBlendable();
	void WorldOverlayBlendable();
	class UMaterialInstanceDynamic* CreateDynamicInstance(TSoftObjectPtr<class UObject> InAsset, float InBlendWeight);
	void DistanceFogBlendable();
	void SetFogFarColorAlpha(float Alpha);
	void SetFogDistance(float Alpha);
	void UpdateDistanceFog();
	void PersonoidVisionBlendable();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"FCTPostProcessVolume_C">();
	}
	static class AFCTPostProcessVolume_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<AFCTPostProcessVolume_C>();
	}
};
static_assert(alignof(AFCTPostProcessVolume_C) == 0x000010, "Wrong alignment on AFCTPostProcessVolume_C");
static_assert(sizeof(AFCTPostProcessVolume_C) == 0x0009C0, "Wrong size on AFCTPostProcessVolume_C");
static_assert(offsetof(AFCTPostProcessVolume_C, UberGraphFrame) == 0x000220, "Member 'AFCTPostProcessVolume_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(AFCTPostProcessVolume_C, Icon) == 0x000228, "Member 'AFCTPostProcessVolume_C::Icon' has a wrong offset!");
static_assert(offsetof(AFCTPostProcessVolume_C, PostProcess) == 0x000230, "Member 'AFCTPostProcessVolume_C::PostProcess' has a wrong offset!");
static_assert(offsetof(AFCTPostProcessVolume_C, Volume) == 0x000238, "Member 'AFCTPostProcessVolume_C::Volume' has a wrong offset!");
static_assert(offsetof(AFCTPostProcessVolume_C, PersonoidScanTimeline_Alpha_90B8635248F183D3B68FECB156614DB5) == 0x000240, "Member 'AFCTPostProcessVolume_C::PersonoidScanTimeline_Alpha_90B8635248F183D3B68FECB156614DB5' has a wrong offset!");
static_assert(offsetof(AFCTPostProcessVolume_C, PersonoidScanTimeline__Direction_90B8635248F183D3B68FECB156614DB5) == 0x000244, "Member 'AFCTPostProcessVolume_C::PersonoidScanTimeline__Direction_90B8635248F183D3B68FECB156614DB5' has a wrong offset!");
static_assert(offsetof(AFCTPostProcessVolume_C, PersonoidScanTimeline) == 0x000248, "Member 'AFCTPostProcessVolume_C::PersonoidScanTimeline' has a wrong offset!");
static_assert(offsetof(AFCTPostProcessVolume_C, TimelineBlizzard_Alpha_9586910B470E74348AC747AC45620A91) == 0x000250, "Member 'AFCTPostProcessVolume_C::TimelineBlizzard_Alpha_9586910B470E74348AC747AC45620A91' has a wrong offset!");
static_assert(offsetof(AFCTPostProcessVolume_C, TimelineBlizzard__Direction_9586910B470E74348AC747AC45620A91) == 0x000254, "Member 'AFCTPostProcessVolume_C::TimelineBlizzard__Direction_9586910B470E74348AC747AC45620A91' has a wrong offset!");
static_assert(offsetof(AFCTPostProcessVolume_C, TimelineBlizzard) == 0x000258, "Member 'AFCTPostProcessVolume_C::TimelineBlizzard' has a wrong offset!");
static_assert(offsetof(AFCTPostProcessVolume_C, NativePostProcess) == 0x000260, "Member 'AFCTPostProcessVolume_C::NativePostProcess' has a wrong offset!");
static_assert(offsetof(AFCTPostProcessVolume_C, Priority) == 0x0007B0, "Member 'AFCTPostProcessVolume_C::Priority' has a wrong offset!");
static_assert(offsetof(AFCTPostProcessVolume_C, BlendRadius) == 0x0007B4, "Member 'AFCTPostProcessVolume_C::BlendRadius' has a wrong offset!");
static_assert(offsetof(AFCTPostProcessVolume_C, BlendWeight) == 0x0007B8, "Member 'AFCTPostProcessVolume_C::BlendWeight' has a wrong offset!");
static_assert(offsetof(AFCTPostProcessVolume_C, Enabled) == 0x0007BC, "Member 'AFCTPostProcessVolume_C::Enabled' has a wrong offset!");
static_assert(offsetof(AFCTPostProcessVolume_C, Unbound) == 0x0007BD, "Member 'AFCTPostProcessVolume_C::Unbound' has a wrong offset!");
static_assert(offsetof(AFCTPostProcessVolume_C, Outline) == 0x0007BE, "Member 'AFCTPostProcessVolume_C::Outline' has a wrong offset!");
static_assert(offsetof(AFCTPostProcessVolume_C, OutlineBlendWeight) == 0x0007C0, "Member 'AFCTPostProcessVolume_C::OutlineBlendWeight' has a wrong offset!");
static_assert(offsetof(AFCTPostProcessVolume_C, OutlineOpacity) == 0x0007C4, "Member 'AFCTPostProcessVolume_C::OutlineOpacity' has a wrong offset!");
static_assert(offsetof(AFCTPostProcessVolume_C, OutlineThickness) == 0x0007C8, "Member 'AFCTPostProcessVolume_C::OutlineThickness' has a wrong offset!");
static_assert(offsetof(AFCTPostProcessVolume_C, OutlineDepth) == 0x0007CC, "Member 'AFCTPostProcessVolume_C::OutlineDepth' has a wrong offset!");
static_assert(offsetof(AFCTPostProcessVolume_C, OutlinePower) == 0x0007D0, "Member 'AFCTPostProcessVolume_C::OutlinePower' has a wrong offset!");
static_assert(offsetof(AFCTPostProcessVolume_C, OutlineDistanceFade) == 0x0007D4, "Member 'AFCTPostProcessVolume_C::OutlineDistanceFade' has a wrong offset!");
static_assert(offsetof(AFCTPostProcessVolume_C, OutlineDistanceSharpness) == 0x0007D8, "Member 'AFCTPostProcessVolume_C::OutlineDistanceSharpness' has a wrong offset!");
static_assert(offsetof(AFCTPostProcessVolume_C, OutlineTransparencyReduction) == 0x0007DC, "Member 'AFCTPostProcessVolume_C::OutlineTransparencyReduction' has a wrong offset!");
static_assert(offsetof(AFCTPostProcessVolume_C, OutlineMaterial) == 0x0007E0, "Member 'AFCTPostProcessVolume_C::OutlineMaterial' has a wrong offset!");
static_assert(offsetof(AFCTPostProcessVolume_C, AmbientOcclusionHatching) == 0x000808, "Member 'AFCTPostProcessVolume_C::AmbientOcclusionHatching' has a wrong offset!");
static_assert(offsetof(AFCTPostProcessVolume_C, AOHatchMaterial_World) == 0x000810, "Member 'AFCTPostProcessVolume_C::AOHatchMaterial_World' has a wrong offset!");
static_assert(offsetof(AFCTPostProcessVolume_C, AOHatchBlendWeight) == 0x000838, "Member 'AFCTPostProcessVolume_C::AOHatchBlendWeight' has a wrong offset!");
static_assert(offsetof(AFCTPostProcessVolume_C, AOHatchWorldSpace) == 0x00083C, "Member 'AFCTPostProcessVolume_C::AOHatchWorldSpace' has a wrong offset!");
static_assert(offsetof(AFCTPostProcessVolume_C, AOHatchTextureScale) == 0x000840, "Member 'AFCTPostProcessVolume_C::AOHatchTextureScale' has a wrong offset!");
static_assert(offsetof(AFCTPostProcessVolume_C, AOHatchAOStrength) == 0x000844, "Member 'AFCTPostProcessVolume_C::AOHatchAOStrength' has a wrong offset!");
static_assert(offsetof(AFCTPostProcessVolume_C, AOHatchOverlayOpacity) == 0x000848, "Member 'AFCTPostProcessVolume_C::AOHatchOverlayOpacity' has a wrong offset!");
static_assert(offsetof(AFCTPostProcessVolume_C, AOHatchTexture) == 0x000850, "Member 'AFCTPostProcessVolume_C::AOHatchTexture' has a wrong offset!");
static_assert(offsetof(AFCTPostProcessVolume_C, AOHatchMaterial_Screen) == 0x000878, "Member 'AFCTPostProcessVolume_C::AOHatchMaterial_Screen' has a wrong offset!");
static_assert(offsetof(AFCTPostProcessVolume_C, WorldOverlayMaterial) == 0x0008A0, "Member 'AFCTPostProcessVolume_C::WorldOverlayMaterial' has a wrong offset!");
static_assert(offsetof(AFCTPostProcessVolume_C, WorldOverlay) == 0x0008C8, "Member 'AFCTPostProcessVolume_C::WorldOverlay' has a wrong offset!");
static_assert(offsetof(AFCTPostProcessVolume_C, WorldOverlayBlendWeight) == 0x0008CC, "Member 'AFCTPostProcessVolume_C::WorldOverlayBlendWeight' has a wrong offset!");
static_assert(offsetof(AFCTPostProcessVolume_C, WorldOverlayGreyValue) == 0x0008D0, "Member 'AFCTPostProcessVolume_C::WorldOverlayGreyValue' has a wrong offset!");
static_assert(offsetof(AFCTPostProcessVolume_C, WorldOverlayOpacity) == 0x0008D4, "Member 'AFCTPostProcessVolume_C::WorldOverlayOpacity' has a wrong offset!");
static_assert(offsetof(AFCTPostProcessVolume_C, WorldOverlayTextureScale) == 0x0008D8, "Member 'AFCTPostProcessVolume_C::WorldOverlayTextureScale' has a wrong offset!");
static_assert(offsetof(AFCTPostProcessVolume_C, WorldOverlayTexture) == 0x0008E0, "Member 'AFCTPostProcessVolume_C::WorldOverlayTexture' has a wrong offset!");
static_assert(offsetof(AFCTPostProcessVolume_C, DistanceFogMaterial) == 0x000908, "Member 'AFCTPostProcessVolume_C::DistanceFogMaterial' has a wrong offset!");
static_assert(offsetof(AFCTPostProcessVolume_C, DistanceFog) == 0x000930, "Member 'AFCTPostProcessVolume_C::DistanceFog' has a wrong offset!");
static_assert(offsetof(AFCTPostProcessVolume_C, DistanceFogBlendWeight) == 0x000934, "Member 'AFCTPostProcessVolume_C::DistanceFogBlendWeight' has a wrong offset!");
static_assert(offsetof(AFCTPostProcessVolume_C, Distance_Fog_Near_Color) == 0x000938, "Member 'AFCTPostProcessVolume_C::Distance_Fog_Near_Color' has a wrong offset!");
static_assert(offsetof(AFCTPostProcessVolume_C, Distance_Fog_Far_Color) == 0x000948, "Member 'AFCTPostProcessVolume_C::Distance_Fog_Far_Color' has a wrong offset!");
static_assert(offsetof(AFCTPostProcessVolume_C, Distance_Fog_Distance) == 0x000958, "Member 'AFCTPostProcessVolume_C::Distance_Fog_Distance' has a wrong offset!");
static_assert(offsetof(AFCTPostProcessVolume_C, Distance_Fog_Edge_Sharpness) == 0x00095C, "Member 'AFCTPostProcessVolume_C::Distance_Fog_Edge_Sharpness' has a wrong offset!");
static_assert(offsetof(AFCTPostProcessVolume_C, TargetBlizzardFogFarColorAlpha) == 0x000960, "Member 'AFCTPostProcessVolume_C::TargetBlizzardFogFarColorAlpha' has a wrong offset!");
static_assert(offsetof(AFCTPostProcessVolume_C, TargetBlizzardFogDistance) == 0x000964, "Member 'AFCTPostProcessVolume_C::TargetBlizzardFogDistance' has a wrong offset!");
static_assert(offsetof(AFCTPostProcessVolume_C, InitialDistanceFogFarColor) == 0x000968, "Member 'AFCTPostProcessVolume_C::InitialDistanceFogFarColor' has a wrong offset!");
static_assert(offsetof(AFCTPostProcessVolume_C, InitialDistanceFogDistance) == 0x000978, "Member 'AFCTPostProcessVolume_C::InitialDistanceFogDistance' has a wrong offset!");
static_assert(offsetof(AFCTPostProcessVolume_C, DistanceFogMID) == 0x000980, "Member 'AFCTPostProcessVolume_C::DistanceFogMID' has a wrong offset!");
static_assert(offsetof(AFCTPostProcessVolume_C, DistanceFogMaxDistance) == 0x000988, "Member 'AFCTPostProcessVolume_C::DistanceFogMaxDistance' has a wrong offset!");
static_assert(offsetof(AFCTPostProcessVolume_C, PersonoidScanMID) == 0x000990, "Member 'AFCTPostProcessVolume_C::PersonoidScanMID' has a wrong offset!");
static_assert(offsetof(AFCTPostProcessVolume_C, NormalOutlineColor) == 0x000998, "Member 'AFCTPostProcessVolume_C::NormalOutlineColor' has a wrong offset!");
static_assert(offsetof(AFCTPostProcessVolume_C, XrayOutlineColor) == 0x0009A8, "Member 'AFCTPostProcessVolume_C::XrayOutlineColor' has a wrong offset!");

}

