#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: ALS_Interface

#include "Basic.hpp"

#include "ALS_ViewMode_structs.hpp"
#include "ALS_MovementMode_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "ALS_Gait_structs.hpp"
#include "IdleEntryState_structs.hpp"
#include "PivotParams_structs.hpp"
#include "ALS_RotationMode_structs.hpp"
#include "ALS_Stance_structs.hpp"


namespace SDK::Params
{

// Function ALS_Interface.ALS_Interface_C.Set ALS_Gait BPI
// 0x0001 (0x0001 - 0x0000)
struct ALS_Interface_C_Set_ALS_Gait_BPI final
{
public:
	EALS_Gait                                     ALS_Gait;                                          // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ALS_Interface_C_Set_ALS_Gait_BPI) == 0x000001, "Wrong alignment on ALS_Interface_C_Set_ALS_Gait_BPI");
static_assert(sizeof(ALS_Interface_C_Set_ALS_Gait_BPI) == 0x000001, "Wrong size on ALS_Interface_C_Set_ALS_Gait_BPI");
static_assert(offsetof(ALS_Interface_C_Set_ALS_Gait_BPI, ALS_Gait) == 0x000000, "Member 'ALS_Interface_C_Set_ALS_Gait_BPI::ALS_Gait' has a wrong offset!");

// Function ALS_Interface.ALS_Interface_C.Set ALS_Stance BPI
// 0x0001 (0x0001 - 0x0000)
struct ALS_Interface_C_Set_ALS_Stance_BPI final
{
public:
	EALS_Stance                                   ALS_Stance;                                        // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ALS_Interface_C_Set_ALS_Stance_BPI) == 0x000001, "Wrong alignment on ALS_Interface_C_Set_ALS_Stance_BPI");
static_assert(sizeof(ALS_Interface_C_Set_ALS_Stance_BPI) == 0x000001, "Wrong size on ALS_Interface_C_Set_ALS_Stance_BPI");
static_assert(offsetof(ALS_Interface_C_Set_ALS_Stance_BPI, ALS_Stance) == 0x000000, "Member 'ALS_Interface_C_Set_ALS_Stance_BPI::ALS_Stance' has a wrong offset!");

// Function ALS_Interface.ALS_Interface_C.Set ALS_RotationMode BPI
// 0x0001 (0x0001 - 0x0000)
struct ALS_Interface_C_Set_ALS_RotationMode_BPI final
{
public:
	EALS_RotationMode                             ALS_RotationMode_BPI;                              // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ALS_Interface_C_Set_ALS_RotationMode_BPI) == 0x000001, "Wrong alignment on ALS_Interface_C_Set_ALS_RotationMode_BPI");
static_assert(sizeof(ALS_Interface_C_Set_ALS_RotationMode_BPI) == 0x000001, "Wrong size on ALS_Interface_C_Set_ALS_RotationMode_BPI");
static_assert(offsetof(ALS_Interface_C_Set_ALS_RotationMode_BPI, ALS_RotationMode_BPI) == 0x000000, "Member 'ALS_Interface_C_Set_ALS_RotationMode_BPI::ALS_RotationMode_BPI' has a wrong offset!");

// Function ALS_Interface.ALS_Interface_C.Set ALS_MovementMode BPI
// 0x0001 (0x0001 - 0x0000)
struct ALS_Interface_C_Set_ALS_MovementMode_BPI final
{
public:
	EALS_MovementMode                             ALS_MovementMode;                                  // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ALS_Interface_C_Set_ALS_MovementMode_BPI) == 0x000001, "Wrong alignment on ALS_Interface_C_Set_ALS_MovementMode_BPI");
static_assert(sizeof(ALS_Interface_C_Set_ALS_MovementMode_BPI) == 0x000001, "Wrong size on ALS_Interface_C_Set_ALS_MovementMode_BPI");
static_assert(offsetof(ALS_Interface_C_Set_ALS_MovementMode_BPI, ALS_MovementMode) == 0x000000, "Member 'ALS_Interface_C_Set_ALS_MovementMode_BPI::ALS_MovementMode' has a wrong offset!");

// Function ALS_Interface.ALS_Interface_C.AnimNotify_Pivot BPI
// 0x0014 (0x0014 - 0x0000)
struct ALS_Interface_C_AnimNotify_Pivot_BPI final
{
public:
	struct FPivotParams                           PivotParams;                                       // 0x0000(0x0014)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ALS_Interface_C_AnimNotify_Pivot_BPI) == 0x000004, "Wrong alignment on ALS_Interface_C_AnimNotify_Pivot_BPI");
static_assert(sizeof(ALS_Interface_C_AnimNotify_Pivot_BPI) == 0x000014, "Wrong size on ALS_Interface_C_AnimNotify_Pivot_BPI");
static_assert(offsetof(ALS_Interface_C_AnimNotify_Pivot_BPI, PivotParams) == 0x000000, "Member 'ALS_Interface_C_AnimNotify_Pivot_BPI::PivotParams' has a wrong offset!");

// Function ALS_Interface.ALS_Interface_C.AnimNotify_TurningInPlace BPI
// 0x0010 (0x0010 - 0x0000)
struct ALS_Interface_C_AnimNotify_TurningInPlace_BPI final
{
public:
	class UAnimMontage*                           TurnInPlaceMontage;                                // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ShouldTurnInPlace;                                 // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          TurningInPlace;                                    // 0x0009(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          TurningRight;                                      // 0x000A(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(ALS_Interface_C_AnimNotify_TurningInPlace_BPI) == 0x000008, "Wrong alignment on ALS_Interface_C_AnimNotify_TurningInPlace_BPI");
static_assert(sizeof(ALS_Interface_C_AnimNotify_TurningInPlace_BPI) == 0x000010, "Wrong size on ALS_Interface_C_AnimNotify_TurningInPlace_BPI");
static_assert(offsetof(ALS_Interface_C_AnimNotify_TurningInPlace_BPI, TurnInPlaceMontage) == 0x000000, "Member 'ALS_Interface_C_AnimNotify_TurningInPlace_BPI::TurnInPlaceMontage' has a wrong offset!");
static_assert(offsetof(ALS_Interface_C_AnimNotify_TurningInPlace_BPI, ShouldTurnInPlace) == 0x000008, "Member 'ALS_Interface_C_AnimNotify_TurningInPlace_BPI::ShouldTurnInPlace' has a wrong offset!");
static_assert(offsetof(ALS_Interface_C_AnimNotify_TurningInPlace_BPI, TurningInPlace) == 0x000009, "Member 'ALS_Interface_C_AnimNotify_TurningInPlace_BPI::TurningInPlace' has a wrong offset!");
static_assert(offsetof(ALS_Interface_C_AnimNotify_TurningInPlace_BPI, TurningRight) == 0x00000A, "Member 'ALS_Interface_C_AnimNotify_TurningInPlace_BPI::TurningRight' has a wrong offset!");

// Function ALS_Interface.ALS_Interface_C.AnimNotify_IdleEntryState BPI
// 0x0001 (0x0001 - 0x0000)
struct ALS_Interface_C_AnimNotify_IdleEntryState_BPI final
{
public:
	EIdleEntryState                               IdleEntryState;                                    // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ALS_Interface_C_AnimNotify_IdleEntryState_BPI) == 0x000001, "Wrong alignment on ALS_Interface_C_AnimNotify_IdleEntryState_BPI");
static_assert(sizeof(ALS_Interface_C_AnimNotify_IdleEntryState_BPI) == 0x000001, "Wrong size on ALS_Interface_C_AnimNotify_IdleEntryState_BPI");
static_assert(offsetof(ALS_Interface_C_AnimNotify_IdleEntryState_BPI, IdleEntryState) == 0x000000, "Member 'ALS_Interface_C_AnimNotify_IdleEntryState_BPI::IdleEntryState' has a wrong offset!");

// Function ALS_Interface.ALS_Interface_C.Set ALS_Aiming BPI
// 0x0001 (0x0001 - 0x0000)
struct ALS_Interface_C_Set_ALS_Aiming_BPI final
{
public:
	bool                                          Aiming;                                            // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(ALS_Interface_C_Set_ALS_Aiming_BPI) == 0x000001, "Wrong alignment on ALS_Interface_C_Set_ALS_Aiming_BPI");
static_assert(sizeof(ALS_Interface_C_Set_ALS_Aiming_BPI) == 0x000001, "Wrong size on ALS_Interface_C_Set_ALS_Aiming_BPI");
static_assert(offsetof(ALS_Interface_C_Set_ALS_Aiming_BPI, Aiming) == 0x000000, "Member 'ALS_Interface_C_Set_ALS_Aiming_BPI::Aiming' has a wrong offset!");

// Function ALS_Interface.ALS_Interface_C.Play_GetUp_Anim BPI
// 0x0001 (0x0001 - 0x0000)
struct ALS_Interface_C_Play_GetUp_Anim_BPI final
{
public:
	bool                                          FaceDown;                                          // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(ALS_Interface_C_Play_GetUp_Anim_BPI) == 0x000001, "Wrong alignment on ALS_Interface_C_Play_GetUp_Anim_BPI");
static_assert(sizeof(ALS_Interface_C_Play_GetUp_Anim_BPI) == 0x000001, "Wrong size on ALS_Interface_C_Play_GetUp_Anim_BPI");
static_assert(offsetof(ALS_Interface_C_Play_GetUp_Anim_BPI, FaceDown) == 0x000000, "Member 'ALS_Interface_C_Play_GetUp_Anim_BPI::FaceDown' has a wrong offset!");

// Function ALS_Interface.ALS_Interface_C.SavePoseSnapshot_BPI
// 0x0008 (0x0008 - 0x0000)
struct ALS_Interface_C_SavePoseSnapshot_BPI final
{
public:
	class FName                                   PoseName;                                          // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ALS_Interface_C_SavePoseSnapshot_BPI) == 0x000004, "Wrong alignment on ALS_Interface_C_SavePoseSnapshot_BPI");
static_assert(sizeof(ALS_Interface_C_SavePoseSnapshot_BPI) == 0x000008, "Wrong size on ALS_Interface_C_SavePoseSnapshot_BPI");
static_assert(offsetof(ALS_Interface_C_SavePoseSnapshot_BPI, PoseName) == 0x000000, "Member 'ALS_Interface_C_SavePoseSnapshot_BPI::PoseName' has a wrong offset!");

// Function ALS_Interface.ALS_Interface_C.AddCharacterRotation_BPI
// 0x000C (0x000C - 0x0000)
struct ALS_Interface_C_AddCharacterRotation_BPI final
{
public:
	struct FRotator                               AddAmount;                                         // 0x0000(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(ALS_Interface_C_AddCharacterRotation_BPI) == 0x000004, "Wrong alignment on ALS_Interface_C_AddCharacterRotation_BPI");
static_assert(sizeof(ALS_Interface_C_AddCharacterRotation_BPI) == 0x00000C, "Wrong size on ALS_Interface_C_AddCharacterRotation_BPI");
static_assert(offsetof(ALS_Interface_C_AddCharacterRotation_BPI, AddAmount) == 0x000000, "Member 'ALS_Interface_C_AddCharacterRotation_BPI::AddAmount' has a wrong offset!");

// Function ALS_Interface.ALS_Interface_C.Set ALS_ViewMode BPI
// 0x0001 (0x0001 - 0x0000)
struct ALS_Interface_C_Set_ALS_ViewMode_BPI final
{
public:
	EALS_ViewMode                                 ViewMode;                                          // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ALS_Interface_C_Set_ALS_ViewMode_BPI) == 0x000001, "Wrong alignment on ALS_Interface_C_Set_ALS_ViewMode_BPI");
static_assert(sizeof(ALS_Interface_C_Set_ALS_ViewMode_BPI) == 0x000001, "Wrong size on ALS_Interface_C_Set_ALS_ViewMode_BPI");
static_assert(offsetof(ALS_Interface_C_Set_ALS_ViewMode_BPI, ViewMode) == 0x000000, "Member 'ALS_Interface_C_Set_ALS_ViewMode_BPI::ViewMode' has a wrong offset!");

// Function ALS_Interface.ALS_Interface_C.ShowTraces_BPI
// 0x0001 (0x0001 - 0x0000)
struct ALS_Interface_C_ShowTraces_BPI final
{
public:
	bool                                          ShowTraces;                                        // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(ALS_Interface_C_ShowTraces_BPI) == 0x000001, "Wrong alignment on ALS_Interface_C_ShowTraces_BPI");
static_assert(sizeof(ALS_Interface_C_ShowTraces_BPI) == 0x000001, "Wrong size on ALS_Interface_C_ShowTraces_BPI");
static_assert(offsetof(ALS_Interface_C_ShowTraces_BPI, ShowTraces) == 0x000000, "Member 'ALS_Interface_C_ShowTraces_BPI::ShowTraces' has a wrong offset!");

// Function ALS_Interface.ALS_Interface_C.Set WalkingSpeed BPI
// 0x0004 (0x0004 - 0x0000)
struct ALS_Interface_C_Set_WalkingSpeed_BPI final
{
public:
	float                                         WalkingSpeed;                                      // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ALS_Interface_C_Set_WalkingSpeed_BPI) == 0x000004, "Wrong alignment on ALS_Interface_C_Set_WalkingSpeed_BPI");
static_assert(sizeof(ALS_Interface_C_Set_WalkingSpeed_BPI) == 0x000004, "Wrong size on ALS_Interface_C_Set_WalkingSpeed_BPI");
static_assert(offsetof(ALS_Interface_C_Set_WalkingSpeed_BPI, WalkingSpeed) == 0x000000, "Member 'ALS_Interface_C_Set_WalkingSpeed_BPI::WalkingSpeed' has a wrong offset!");

// Function ALS_Interface.ALS_Interface_C.Set RunningSpeed BPI
// 0x0004 (0x0004 - 0x0000)
struct ALS_Interface_C_Set_RunningSpeed_BPI final
{
public:
	float                                         RunningSpeed;                                      // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ALS_Interface_C_Set_RunningSpeed_BPI) == 0x000004, "Wrong alignment on ALS_Interface_C_Set_RunningSpeed_BPI");
static_assert(sizeof(ALS_Interface_C_Set_RunningSpeed_BPI) == 0x000004, "Wrong size on ALS_Interface_C_Set_RunningSpeed_BPI");
static_assert(offsetof(ALS_Interface_C_Set_RunningSpeed_BPI, RunningSpeed) == 0x000000, "Member 'ALS_Interface_C_Set_RunningSpeed_BPI::RunningSpeed' has a wrong offset!");

// Function ALS_Interface.ALS_Interface_C.Set SprintingSpeed BPI
// 0x0004 (0x0004 - 0x0000)
struct ALS_Interface_C_Set_SprintingSpeed_BPI final
{
public:
	float                                         SprintingSpeed;                                    // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ALS_Interface_C_Set_SprintingSpeed_BPI) == 0x000004, "Wrong alignment on ALS_Interface_C_Set_SprintingSpeed_BPI");
static_assert(sizeof(ALS_Interface_C_Set_SprintingSpeed_BPI) == 0x000004, "Wrong size on ALS_Interface_C_Set_SprintingSpeed_BPI");
static_assert(offsetof(ALS_Interface_C_Set_SprintingSpeed_BPI, SprintingSpeed) == 0x000000, "Member 'ALS_Interface_C_Set_SprintingSpeed_BPI::SprintingSpeed' has a wrong offset!");

// Function ALS_Interface.ALS_Interface_C.Set CrouchingSpeed BPI
// 0x0004 (0x0004 - 0x0000)
struct ALS_Interface_C_Set_CrouchingSpeed_BPI final
{
public:
	float                                         CrouchingSpeed;                                    // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ALS_Interface_C_Set_CrouchingSpeed_BPI) == 0x000004, "Wrong alignment on ALS_Interface_C_Set_CrouchingSpeed_BPI");
static_assert(sizeof(ALS_Interface_C_Set_CrouchingSpeed_BPI) == 0x000004, "Wrong size on ALS_Interface_C_Set_CrouchingSpeed_BPI");
static_assert(offsetof(ALS_Interface_C_Set_CrouchingSpeed_BPI, CrouchingSpeed) == 0x000000, "Member 'ALS_Interface_C_Set_CrouchingSpeed_BPI::CrouchingSpeed' has a wrong offset!");

// Function ALS_Interface.ALS_Interface_C.CameraShake_BPI
// 0x0010 (0x0010 - 0x0000)
struct ALS_Interface_C_CameraShake_BPI final
{
public:
	class UClass*                                 ShakeClass;                                        // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Scale;                                             // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ALS_Interface_C_CameraShake_BPI) == 0x000008, "Wrong alignment on ALS_Interface_C_CameraShake_BPI");
static_assert(sizeof(ALS_Interface_C_CameraShake_BPI) == 0x000010, "Wrong size on ALS_Interface_C_CameraShake_BPI");
static_assert(offsetof(ALS_Interface_C_CameraShake_BPI, ShakeClass) == 0x000000, "Member 'ALS_Interface_C_CameraShake_BPI::ShakeClass' has a wrong offset!");
static_assert(offsetof(ALS_Interface_C_CameraShake_BPI, Scale) == 0x000008, "Member 'ALS_Interface_C_CameraShake_BPI::Scale' has a wrong offset!");

// Function ALS_Interface.ALS_Interface_C.Set RF_BPI
// 0x0001 (0x0001 - 0x0000)
struct ALS_Interface_C_Set_RF_BPI final
{
public:
	bool                                          RF;                                                // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(ALS_Interface_C_Set_RF_BPI) == 0x000001, "Wrong alignment on ALS_Interface_C_Set_RF_BPI");
static_assert(sizeof(ALS_Interface_C_Set_RF_BPI) == 0x000001, "Wrong size on ALS_Interface_C_Set_RF_BPI");
static_assert(offsetof(ALS_Interface_C_Set_RF_BPI, RF) == 0x000000, "Member 'ALS_Interface_C_Set_RF_BPI::RF' has a wrong offset!");

}

