#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: ICharacterSCT

#include "Basic.hpp"

#include "CoreUObject_classes.hpp"
#include "SCT_structs.hpp"
#include "PassengerLogFactType_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass ICharacterSCT.ICharacterSCT_C
// 0x0000 (0x0028 - 0x0028)
class IICharacterSCT_C final : public IInterface
{
public:
	void RagdollCharacterBPI(bool ToRagdoll, float Duration, const struct FVector& OptionalImpulse, bool Force);
	void SetAimingStateBPI(bool Aiming, uint8 AimType);
	void GetPlayerNameBPI(class FString* Name_0);
	void IsPersonoidBPI(bool* IsPersonoid);
	void GetHeldLogInfoBPI(EPassengerLogFactType* FactType, TArray<struct FPlayerData>* Players, bool* HasLog);
	void IsAliveBPI(bool* Alive);
	void StartElevatorBPI();
	void InitiateAirlockSequenceBPI();
	void EliminationVoteBPI(class AActor* AirlockTarget, class ACharacter* VotedCharacter, class ACharacter* VotingCharacter);
	void TrustVoteBPI(class AActor* TargetAirlock, bool Yes, class ACharacter* VotingCharacter);
	void PassengerLogVoteBPI(class AActor* AirlockTarget, class ACharacter* TargetCharacter, class ACharacter* VotingCharacter);
	void SetDestinyBPI(EFate Fate, const struct FVector& Impulse);
	void EnableIK_AimDelayBPI();
	bool IsFemaleBPI();
	void TeleportLocationRotationBPI(const struct FVector& TargetLocation, const struct FRotator& TargetRotation);
	class UAbilitySystemComponent* GetAbilitySystemComponentBPI();
	void AddAlcoholBPI(float InputValue, bool Delay);
	void LogOutBPI();
	class UTexture2D* GetPortrait();
	class USceneComponent* GetHomingTargetBPI();
	void DisplayAirlockWidgetBPI(bool Show);
	void IsPlayerBlocked(class APlayerState* Player, bool* bLocked);
	void IsPlayerConsoleCommunicationBlocked(class APlayerState* Player, bool* bLocked);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"ICharacterSCT_C">();
	}
	static class IICharacterSCT_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<IICharacterSCT_C>();
	}
};
static_assert(alignof(IICharacterSCT_C) == 0x000008, "Wrong alignment on IICharacterSCT_C");
static_assert(sizeof(IICharacterSCT_C) == 0x000028, "Wrong size on IICharacterSCT_C");

}

