#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BPFL_AAS

#include "Basic.hpp"

#include "Engine_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BPFL_AAS.BPFL_AAS_C
// 0x0000 (0x0028 - 0x0028)
class UBPFL_AAS_C final : public UBlueprintFunctionLibrary
{
public:
	static struct FVector Clamp_Vector(const struct FVector& Value, const struct FVector& Min, const struct FVector& Max, class UObject* __WorldContext);
	static void Make_Randomized_Asteroid_Transform(struct FRandomStream& Random_Stream, const struct FVector& Location, const struct FStruct_AAS_AsteroidDefaults& Asteroid_Defaults, const struct FStruct_AAS_Parameters& Parameters, class UObject* __WorldContext, struct FTransform* Transform);
	static struct FRotator Random_Rotator_in_Range_from_Stream(const struct FRotator& Min, const struct FRotator& Max, struct FRandomStream& Stream, class UObject* __WorldContext);
	static struct FRotator Rotator_Plus_Rotator(const struct FRotator& Rotator_A, const struct FRotator& Rotator_B, class UObject* __WorldContext);
	static struct FVector Random_Vector_in_Range_from_Stream(const struct FVector& Min, const struct FVector& Max, struct FRandomStream& Stream, class UObject* __WorldContext);
	static void Calculate_Orbit_Position(const struct FVector& Center, const struct FRotator& Direction, float Angle_in_Orbit, float Orbit_X_Width, float Orbit_Y_Length, class UObject* __WorldContext, struct FVector* New_Location);
	static void Get_In_Orbit_Rotation_of_Location(const struct FVector& Location, const struct FTransform& Transform, class UObject* __WorldContext, struct FRotator* Rotator);
	static void VectorToRotator(const struct FVector& Vector, class UObject* __WorldContext, struct FRotator* Rotator);
	static struct FVector Max__Vector_(const struct FVector& Vector_A, const struct FVector& Vector_B, class UObject* __WorldContext);
	static void AddTransform(const struct FTransform& Transform_A, const struct FTransform& Transform_B, class UObject* __WorldContext, struct FTransform* New_Transform);
	static void GetSinNoiseValue(const struct FVector& Location, const struct FVector& Parameters, class UObject* __WorldContext, float* Value);
	static void GetSimpleNoiseValue(const struct FVector& Location, const struct FVector& Parameters, class UObject* __WorldContext, float* Value);
	static float MapThreshold(float Value, float Threshold, class UObject* __WorldContext);
	static void AsteroidScaleShrinking(float Value, const struct FVector& OriginalScale, float Threshold, float Strength, class UObject* __WorldContext, struct FVector* Shrinked_Scale);
	static void Get_All_AAS_System_Actors(class UObject* __WorldContext, TArray<class ABP_AAS_V2Base_C*>* System_Actors);
	static void Get_All_AAS_Follower_Components(class UObject* __WorldContext, TArray<class UBPC_AAS_Follower_C*>* Follower_Components);
	static float AsteroidFloatMapper(float Value, float Threshold, float Strength, class UObject* __WorldContext);
	static float MapThresholdNew(float Value, float Threshold, class UObject* __WorldContext);
	static void AsteroidScaleShrinkingNew(float Value, const struct FVector& OriginalScale, float Threshold, float Strength, class UObject* __WorldContext, struct FVector* Shrinked_Scale);
	static void GetModifierData(struct FStruct_AAS_Modifier& AAS_Modifier, struct FRandomStream& Generation_Stream, struct FRandomStream& Randomness_Stream, float Value, class UObject* __WorldContext, bool* Valid, bool* Bool_Value, float* Float_Value);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BPFL_AAS_C">();
	}
	static class UBPFL_AAS_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBPFL_AAS_C>();
	}
};
static_assert(alignof(UBPFL_AAS_C) == 0x000008, "Wrong alignment on UBPFL_AAS_C");
static_assert(sizeof(UBPFL_AAS_C) == 0x000028, "Wrong size on UBPFL_AAS_C");

}

