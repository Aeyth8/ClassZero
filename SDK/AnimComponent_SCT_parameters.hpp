#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: AnimComponent_SCT

#include "Basic.hpp"

#include "Gait_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "Engine_structs.hpp"
#include "E_interactionAnimState_structs.hpp"
#include "E_interactionAnim_structs.hpp"
#include "MovementMode_structs.hpp"
#include "Stance_structs.hpp"
#include "InteractionAnim_structs.hpp"
#include "CardinalDirection_structs.hpp"
#include "PivotParams_structs.hpp"
#include "IdleEntryState_structs.hpp"
#include "RPC_Enum_structs.hpp"
#include "E_ItemAnimation_structs.hpp"


namespace SDK::Params
{

// Function AnimComponent_SCT.AnimComponent_SCT_C.ExecuteUbergraph_AnimComponent_SCT
// 0x04B0 (0x04B0 - 0x0000)
struct AnimComponent_SCT_C_ExecuteUbergraph_AnimComponent_SCT final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate;              // 0x0004(0x0010)(ZeroConstructor, NoDestructor)
	bool                                          CallFunc_HasAuthority_ReturnValue;                 // 0x0014(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x0015(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsDedicatedServer_ReturnValue;            // 0x0016(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	MovementMode::EMovementMode                   K2Node_Event_NewMovementMode_1;                    // 0x0017(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EGait                                         K2Node_Event_NewGait;                              // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   K2Node_Event_PoseName;                             // 0x001C(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_FaceDown;                             // 0x0024(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_25[0x3];                                       // 0x0025(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPivotParams                           K2Node_Event_PivotParameters;                      // 0x0028(0x0014)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UAnimMontage*                           K2Node_Event_TurnInPlaceMontage;                   // 0x0040(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_ShouldTurnInPlace;                    // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_Event_TurningInPlace;                       // 0x0049(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_Event_TurningRight;                         // 0x004A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	EIdleEntryState                               K2Node_Event_IdleEntryState;                       // 0x004B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Event_DeltaSeconds;                         // 0x004C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Has_Been_Initd_Variable;                 // 0x0050(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_51[0x3];                                       // 0x0051(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_RandomFloatInRange_ReturnValue;           // 0x0054(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTimerHandle                           CallFunc_K2_SetTimerDelegate_ReturnValue;          // 0x0058(0x0008)(NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetGameTimeInSeconds_ReturnValue;         // 0x0060(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetPhysicsLinearVelocity_ReturnValue;     // 0x0064(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_VSizeSquared_ReturnValue;                 // 0x0070(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0074(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_FloatFloat_ReturnValue;              // 0x0078(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_79[0x3];                                       // 0x0079(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               CallFunc_K2_GetActorRotation_ReturnValue;          // 0x007C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	class UAnimInstance*                          CallFunc_GetAnimInstance_ReturnValue;              // 0x0088(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TScriptInterface<class IIAnimBp_C>            K2Node_DynamicCast_AsIAnim_Bp;                     // 0x0090(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x00A0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_CanRotate_CanRotate;                      // 0x00A1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_IsClosed_Variable;                       // 0x00A2(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_A3[0x1];                                       // 0x00A3(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_CalculateRotationRate_ReturnValue;        // 0x00A4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_CalculateRotationRate_ReturnValue_1;      // 0x00A8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_LookingDirectionWithOffset_TargetRotation; // 0x00AC(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_SelectFloat_ReturnValue;                  // 0x00B8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_HasAuthority_ReturnValue_1;               // 0x00BC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsLocallyControlled_ReturnValue;          // 0x00BD(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_Event_InputValue_1;                         // 0x00BE(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_Event_InputValue;                           // 0x00BF(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x00C0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsPlayingRootMotion_ReturnValue;          // 0x00C1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_C2[0x2];                                       // 0x00C2(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                K2Node_Event_TargetLocation;                       // 0x00C4(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                K2Node_Event_Direction;                            // 0x00D0(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_X;                            // 0x00DC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y;                            // 0x00E0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z;                            // 0x00E4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Roll;                        // 0x00E8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Pitch;                       // 0x00EC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Yaw;                         // 0x00F0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_MakeRotator_ReturnValue;                  // 0x00F4(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FRotator                               CallFunc_MakeRotator_ReturnValue_1;                // 0x0100(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_10C[0x4];                                      // 0x010C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CallFunc_MakeTransform_ReturnValue;                // 0x0110(0x0030)(IsPlainOldData, NoDestructor)
	bool                                          K2Node_CustomEvent_Enable;                         // 0x0140(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_141[0x7];                                      // 0x0141(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IIAnimBp_C>            K2Node_DynamicCast_AsIAnim_Bp_1;                   // 0x0148(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x0158(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_159[0x7];                                      // 0x0159(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IIAnimBp_C>            K2Node_DynamicCast_AsIAnim_Bp_2;                   // 0x0160(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper)
	bool                                          K2Node_DynamicCast_bSuccess_2;                     // 0x0170(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_Event_Enable;                               // 0x0171(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_Event_Aiming;                               // 0x0172(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         K2Node_Event_AimType;                              // 0x0173(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         K2Node_Event_EmoteID;                              // 0x0174(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ERPC_Enum                                     K2Node_Event_RPC;                                  // 0x0175(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_EnableRotationOverride;               // 0x0176(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_177[0x1];                                      // 0x0177(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               K2Node_Event_Rotation;                             // 0x0178(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_SwitchEnum_CmpSuccess_1;                    // 0x0184(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_HasAuthority_ReturnValue_2;               // 0x0185(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_186[0x2];                                      // 0x0186(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Variable;                                 // 0x0188(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum_CmpSuccess_2;                    // 0x018C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_GreaterEqual_IntInt_ReturnValue;          // 0x018D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_Event_ToRagdoll;                            // 0x018E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_18F[0x1];                                      // 0x018F(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                K2Node_Event_OptionalImpulse;                      // 0x0190(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_Force;                                // 0x019C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_Event_ShouldSprint;                         // 0x019D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_19E[0x2];                                      // 0x019E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             K2Node_Event_Hit;                                  // 0x01A0(0x008C)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	EStance                                       K2Node_Event_NewStance;                            // 0x022C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	Engine::EMovementMode                         K2Node_Event_PrevMovementMode;                     // 0x022D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	Engine::EMovementMode                         K2Node_Event_NewMovementMode;                      // 0x022E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         K2Node_Event_PrevCustomMode;                       // 0x022F(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         K2Node_Event_NewCustomMode;                        // 0x0230(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum_CmpSuccess_3;                    // 0x0231(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_232[0x2];                                      // 0x0232(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               K2Node_Event_AddAmount;                            // 0x0234(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_GetGameTimeInSeconds_ReturnValue_1;       // 0x0240(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_HasAuthority_ReturnValue_3;               // 0x0244(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	E_ItemAnimation                               K2Node_CustomEvent_Animation_1;                    // 0x0245(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_246[0x2];                                      // 0x0246(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate_1;            // 0x0248(0x0010)(ZeroConstructor, NoDestructor)
	struct FTimerHandle                           CallFunc_K2_SetTimerDelegate_ReturnValue_1;        // 0x0258(0x0008)(NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum_CmpSuccess_4;                    // 0x0260(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	E_ItemAnimation                               K2Node_CustomEvent_Animation;                      // 0x0261(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_262[0x6];                                      // 0x0262(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class USCT_AnimBpSCT_C*                       K2Node_DynamicCast_AsSCT_Anim_Bp_SCT;              // 0x0268(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_3;                     // 0x0270(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_271[0xF];                                      // 0x0271(0x000F)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CallFunc_GetTransform_ReturnValue;                 // 0x0280(0x0030)(ConstParm, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_BreakTransform_Location;                  // 0x02B0(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_BreakTransform_Rotation;                  // 0x02BC(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_BreakTransform_Scale;                     // 0x02C8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_CustomEvent_EnableRotationOverride_4;       // 0x02D4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2D5[0x3];                                      // 0x02D5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               K2Node_CustomEvent_Rotation_4;                     // 0x02D8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_CustomEvent_EnableRotationOverride_3;       // 0x02E4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2E5[0x3];                                      // 0x02E5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               K2Node_CustomEvent_Rotation_3;                     // 0x02E8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_CustomEvent_EnableRotationOverride_2;       // 0x02F4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2F5[0x3];                                      // 0x02F5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               K2Node_CustomEvent_Rotation_2;                     // 0x02F8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_CustomEvent_EnableRotationOverride_1;       // 0x0304(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_305[0x3];                                      // 0x0305(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               K2Node_CustomEvent_Rotation_1;                     // 0x0308(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_SwitchEnum_CmpSuccess_5;                    // 0x0314(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_SwitchEnum_CmpSuccess_6;                    // 0x0315(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_316[0xA];                                      // 0x0316(0x000A)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             K2Node_CustomEvent_LaunchTransform_1;              // 0x0320(0x0030)(IsPlainOldData, NoDestructor)
	struct FTransform                             K2Node_CustomEvent_LaunchTransform;                // 0x0350(0x0030)(IsPlainOldData, NoDestructor)
	bool                                          K2Node_CustomEvent_Aiming;                         // 0x0380(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         K2Node_CustomEvent_AimType;                        // 0x0381(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsSimulatingPhysics_ReturnValue;          // 0x0382(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_383[0x1];                                      // 0x0383(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_GetComponentVelocity_ReturnValue;         // 0x0384(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_CustomEvent_ToRagdoll_1;                    // 0x0390(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_391[0x3];                                      // 0x0391(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                K2Node_CustomEvent_NewVel;                         // 0x0394(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                K2Node_CustomEvent_NewLocation;                    // 0x03A0(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               K2Node_CustomEvent_NewRotation;                    // 0x03AC(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	TScriptInterface<class IIAnimBp_C>            K2Node_DynamicCast_AsIAnim_Bp_3;                   // 0x03B8(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper)
	bool                                          K2Node_DynamicCast_bSuccess_4;                     // 0x03C8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3C9[0x3];                                      // 0x03C9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             CallFunc_K2_SetActorLocationAndRotation_SweepHitResult; // 0x03CC(0x008C)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          CallFunc_K2_SetActorLocationAndRotation_ReturnValue; // 0x0458(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         K2Node_CustomEvent_EmoteID_1;                      // 0x0459(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         K2Node_CustomEvent_EmoteID;                        // 0x045A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_CustomEvent_EnableRotationOverride;         // 0x045B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FRotator                               K2Node_CustomEvent_Rotation;                       // 0x045C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_CustomEvent_ToRagdoll;                      // 0x0468(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_469[0x3];                                      // 0x0469(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                K2Node_CustomEvent_OptionalImpulse;                // 0x046C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_CustomEvent_Force;                          // 0x0478(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_479[0x3];                                      // 0x0479(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue;             // 0x047C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_BoolBool_ReturnValue;            // 0x0488(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	EGait                                         K2Node_CustomEvent_NewGait;                        // 0x0489(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_48A[0x2];                                      // 0x048A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                K2Node_CustomEvent_MovementInput;                  // 0x048C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               K2Node_CustomEvent_LookingRotation;                // 0x0498(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(AnimComponent_SCT_C_ExecuteUbergraph_AnimComponent_SCT) == 0x000010, "Wrong alignment on AnimComponent_SCT_C_ExecuteUbergraph_AnimComponent_SCT");
static_assert(sizeof(AnimComponent_SCT_C_ExecuteUbergraph_AnimComponent_SCT) == 0x0004B0, "Wrong size on AnimComponent_SCT_C_ExecuteUbergraph_AnimComponent_SCT");
static_assert(offsetof(AnimComponent_SCT_C_ExecuteUbergraph_AnimComponent_SCT, EntryPoint) == 0x000000, "Member 'AnimComponent_SCT_C_ExecuteUbergraph_AnimComponent_SCT::EntryPoint' has a wrong offset!");
static_assert(offsetof(AnimComponent_SCT_C_ExecuteUbergraph_AnimComponent_SCT, K2Node_CreateDelegate_OutputDelegate) == 0x000004, "Member 'AnimComponent_SCT_C_ExecuteUbergraph_AnimComponent_SCT::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(AnimComponent_SCT_C_ExecuteUbergraph_AnimComponent_SCT, CallFunc_HasAuthority_ReturnValue) == 0x000014, "Member 'AnimComponent_SCT_C_ExecuteUbergraph_AnimComponent_SCT::CallFunc_HasAuthority_ReturnValue' has a wrong offset!");
static_assert(offsetof(AnimComponent_SCT_C_ExecuteUbergraph_AnimComponent_SCT, K2Node_SwitchEnum_CmpSuccess) == 0x000015, "Member 'AnimComponent_SCT_C_ExecuteUbergraph_AnimComponent_SCT::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");
static_assert(offsetof(AnimComponent_SCT_C_ExecuteUbergraph_AnimComponent_SCT, CallFunc_IsDedicatedServer_ReturnValue) == 0x000016, "Member 'AnimComponent_SCT_C_ExecuteUbergraph_AnimComponent_SCT::CallFunc_IsDedicatedServer_ReturnValue' has a wrong offset!");
static_assert(offsetof(AnimComponent_SCT_C_ExecuteUbergraph_AnimComponent_SCT, K2Node_Event_NewMovementMode_1) == 0x000017, "Member 'AnimComponent_SCT_C_ExecuteUbergraph_AnimComponent_SCT::K2Node_Event_NewMovementMode_1' has a wrong offset!");
static_assert(offsetof(AnimComponent_SCT_C_ExecuteUbergraph_AnimComponent_SCT, K2Node_Event_NewGait) == 0x000018, "Member 'AnimComponent_SCT_C_ExecuteUbergraph_AnimComponent_SCT::K2Node_Event_NewGait' has a wrong offset!");
static_assert(offsetof(AnimComponent_SCT_C_ExecuteUbergraph_AnimComponent_SCT, K2Node_Event_PoseName) == 0x00001C, "Member 'AnimComponent_SCT_C_ExecuteUbergraph_AnimComponent_SCT::K2Node_Event_PoseName' has a wrong offset!");
static_assert(offsetof(AnimComponent_SCT_C_ExecuteUbergraph_AnimComponent_SCT, K2Node_Event_FaceDown) == 0x000024, "Member 'AnimComponent_SCT_C_ExecuteUbergraph_AnimComponent_SCT::K2Node_Event_FaceDown' has a wrong offset!");
static_assert(offsetof(AnimComponent_SCT_C_ExecuteUbergraph_AnimComponent_SCT, K2Node_Event_PivotParameters) == 0x000028, "Member 'AnimComponent_SCT_C_ExecuteUbergraph_AnimComponent_SCT::K2Node_Event_PivotParameters' has a wrong offset!");
static_assert(offsetof(AnimComponent_SCT_C_ExecuteUbergraph_AnimComponent_SCT, K2Node_Event_TurnInPlaceMontage) == 0x000040, "Member 'AnimComponent_SCT_C_ExecuteUbergraph_AnimComponent_SCT::K2Node_Event_TurnInPlaceMontage' has a wrong offset!");
static_assert(offsetof(AnimComponent_SCT_C_ExecuteUbergraph_AnimComponent_SCT, K2Node_Event_ShouldTurnInPlace) == 0x000048, "Member 'AnimComponent_SCT_C_ExecuteUbergraph_AnimComponent_SCT::K2Node_Event_ShouldTurnInPlace' has a wrong offset!");
static_assert(offsetof(AnimComponent_SCT_C_ExecuteUbergraph_AnimComponent_SCT, K2Node_Event_TurningInPlace) == 0x000049, "Member 'AnimComponent_SCT_C_ExecuteUbergraph_AnimComponent_SCT::K2Node_Event_TurningInPlace' has a wrong offset!");
static_assert(offsetof(AnimComponent_SCT_C_ExecuteUbergraph_AnimComponent_SCT, K2Node_Event_TurningRight) == 0x00004A, "Member 'AnimComponent_SCT_C_ExecuteUbergraph_AnimComponent_SCT::K2Node_Event_TurningRight' has a wrong offset!");
static_assert(offsetof(AnimComponent_SCT_C_ExecuteUbergraph_AnimComponent_SCT, K2Node_Event_IdleEntryState) == 0x00004B, "Member 'AnimComponent_SCT_C_ExecuteUbergraph_AnimComponent_SCT::K2Node_Event_IdleEntryState' has a wrong offset!");
static_assert(offsetof(AnimComponent_SCT_C_ExecuteUbergraph_AnimComponent_SCT, K2Node_Event_DeltaSeconds) == 0x00004C, "Member 'AnimComponent_SCT_C_ExecuteUbergraph_AnimComponent_SCT::K2Node_Event_DeltaSeconds' has a wrong offset!");
static_assert(offsetof(AnimComponent_SCT_C_ExecuteUbergraph_AnimComponent_SCT, Temp_bool_Has_Been_Initd_Variable) == 0x000050, "Member 'AnimComponent_SCT_C_ExecuteUbergraph_AnimComponent_SCT::Temp_bool_Has_Been_Initd_Variable' has a wrong offset!");
static_assert(offsetof(AnimComponent_SCT_C_ExecuteUbergraph_AnimComponent_SCT, CallFunc_RandomFloatInRange_ReturnValue) == 0x000054, "Member 'AnimComponent_SCT_C_ExecuteUbergraph_AnimComponent_SCT::CallFunc_RandomFloatInRange_ReturnValue' has a wrong offset!");
static_assert(offsetof(AnimComponent_SCT_C_ExecuteUbergraph_AnimComponent_SCT, CallFunc_K2_SetTimerDelegate_ReturnValue) == 0x000058, "Member 'AnimComponent_SCT_C_ExecuteUbergraph_AnimComponent_SCT::CallFunc_K2_SetTimerDelegate_ReturnValue' has a wrong offset!");
static_assert(offsetof(AnimComponent_SCT_C_ExecuteUbergraph_AnimComponent_SCT, CallFunc_GetGameTimeInSeconds_ReturnValue) == 0x000060, "Member 'AnimComponent_SCT_C_ExecuteUbergraph_AnimComponent_SCT::CallFunc_GetGameTimeInSeconds_ReturnValue' has a wrong offset!");
static_assert(offsetof(AnimComponent_SCT_C_ExecuteUbergraph_AnimComponent_SCT, CallFunc_GetPhysicsLinearVelocity_ReturnValue) == 0x000064, "Member 'AnimComponent_SCT_C_ExecuteUbergraph_AnimComponent_SCT::CallFunc_GetPhysicsLinearVelocity_ReturnValue' has a wrong offset!");
static_assert(offsetof(AnimComponent_SCT_C_ExecuteUbergraph_AnimComponent_SCT, CallFunc_VSizeSquared_ReturnValue) == 0x000070, "Member 'AnimComponent_SCT_C_ExecuteUbergraph_AnimComponent_SCT::CallFunc_VSizeSquared_ReturnValue' has a wrong offset!");
static_assert(offsetof(AnimComponent_SCT_C_ExecuteUbergraph_AnimComponent_SCT, CallFunc_Add_IntInt_ReturnValue) == 0x000074, "Member 'AnimComponent_SCT_C_ExecuteUbergraph_AnimComponent_SCT::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(AnimComponent_SCT_C_ExecuteUbergraph_AnimComponent_SCT, CallFunc_Less_FloatFloat_ReturnValue) == 0x000078, "Member 'AnimComponent_SCT_C_ExecuteUbergraph_AnimComponent_SCT::CallFunc_Less_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(AnimComponent_SCT_C_ExecuteUbergraph_AnimComponent_SCT, CallFunc_K2_GetActorRotation_ReturnValue) == 0x00007C, "Member 'AnimComponent_SCT_C_ExecuteUbergraph_AnimComponent_SCT::CallFunc_K2_GetActorRotation_ReturnValue' has a wrong offset!");
static_assert(offsetof(AnimComponent_SCT_C_ExecuteUbergraph_AnimComponent_SCT, CallFunc_GetAnimInstance_ReturnValue) == 0x000088, "Member 'AnimComponent_SCT_C_ExecuteUbergraph_AnimComponent_SCT::CallFunc_GetAnimInstance_ReturnValue' has a wrong offset!");
static_assert(offsetof(AnimComponent_SCT_C_ExecuteUbergraph_AnimComponent_SCT, K2Node_DynamicCast_AsIAnim_Bp) == 0x000090, "Member 'AnimComponent_SCT_C_ExecuteUbergraph_AnimComponent_SCT::K2Node_DynamicCast_AsIAnim_Bp' has a wrong offset!");
static_assert(offsetof(AnimComponent_SCT_C_ExecuteUbergraph_AnimComponent_SCT, K2Node_DynamicCast_bSuccess) == 0x0000A0, "Member 'AnimComponent_SCT_C_ExecuteUbergraph_AnimComponent_SCT::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(AnimComponent_SCT_C_ExecuteUbergraph_AnimComponent_SCT, CallFunc_CanRotate_CanRotate) == 0x0000A1, "Member 'AnimComponent_SCT_C_ExecuteUbergraph_AnimComponent_SCT::CallFunc_CanRotate_CanRotate' has a wrong offset!");
static_assert(offsetof(AnimComponent_SCT_C_ExecuteUbergraph_AnimComponent_SCT, Temp_bool_IsClosed_Variable) == 0x0000A2, "Member 'AnimComponent_SCT_C_ExecuteUbergraph_AnimComponent_SCT::Temp_bool_IsClosed_Variable' has a wrong offset!");
static_assert(offsetof(AnimComponent_SCT_C_ExecuteUbergraph_AnimComponent_SCT, CallFunc_CalculateRotationRate_ReturnValue) == 0x0000A4, "Member 'AnimComponent_SCT_C_ExecuteUbergraph_AnimComponent_SCT::CallFunc_CalculateRotationRate_ReturnValue' has a wrong offset!");
static_assert(offsetof(AnimComponent_SCT_C_ExecuteUbergraph_AnimComponent_SCT, CallFunc_CalculateRotationRate_ReturnValue_1) == 0x0000A8, "Member 'AnimComponent_SCT_C_ExecuteUbergraph_AnimComponent_SCT::CallFunc_CalculateRotationRate_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(AnimComponent_SCT_C_ExecuteUbergraph_AnimComponent_SCT, CallFunc_LookingDirectionWithOffset_TargetRotation) == 0x0000AC, "Member 'AnimComponent_SCT_C_ExecuteUbergraph_AnimComponent_SCT::CallFunc_LookingDirectionWithOffset_TargetRotation' has a wrong offset!");
static_assert(offsetof(AnimComponent_SCT_C_ExecuteUbergraph_AnimComponent_SCT, CallFunc_SelectFloat_ReturnValue) == 0x0000B8, "Member 'AnimComponent_SCT_C_ExecuteUbergraph_AnimComponent_SCT::CallFunc_SelectFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(AnimComponent_SCT_C_ExecuteUbergraph_AnimComponent_SCT, CallFunc_HasAuthority_ReturnValue_1) == 0x0000BC, "Member 'AnimComponent_SCT_C_ExecuteUbergraph_AnimComponent_SCT::CallFunc_HasAuthority_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(AnimComponent_SCT_C_ExecuteUbergraph_AnimComponent_SCT, CallFunc_IsLocallyControlled_ReturnValue) == 0x0000BD, "Member 'AnimComponent_SCT_C_ExecuteUbergraph_AnimComponent_SCT::CallFunc_IsLocallyControlled_ReturnValue' has a wrong offset!");
static_assert(offsetof(AnimComponent_SCT_C_ExecuteUbergraph_AnimComponent_SCT, K2Node_Event_InputValue_1) == 0x0000BE, "Member 'AnimComponent_SCT_C_ExecuteUbergraph_AnimComponent_SCT::K2Node_Event_InputValue_1' has a wrong offset!");
static_assert(offsetof(AnimComponent_SCT_C_ExecuteUbergraph_AnimComponent_SCT, K2Node_Event_InputValue) == 0x0000BF, "Member 'AnimComponent_SCT_C_ExecuteUbergraph_AnimComponent_SCT::K2Node_Event_InputValue' has a wrong offset!");
static_assert(offsetof(AnimComponent_SCT_C_ExecuteUbergraph_AnimComponent_SCT, CallFunc_Not_PreBool_ReturnValue) == 0x0000C0, "Member 'AnimComponent_SCT_C_ExecuteUbergraph_AnimComponent_SCT::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(AnimComponent_SCT_C_ExecuteUbergraph_AnimComponent_SCT, CallFunc_IsPlayingRootMotion_ReturnValue) == 0x0000C1, "Member 'AnimComponent_SCT_C_ExecuteUbergraph_AnimComponent_SCT::CallFunc_IsPlayingRootMotion_ReturnValue' has a wrong offset!");
static_assert(offsetof(AnimComponent_SCT_C_ExecuteUbergraph_AnimComponent_SCT, K2Node_Event_TargetLocation) == 0x0000C4, "Member 'AnimComponent_SCT_C_ExecuteUbergraph_AnimComponent_SCT::K2Node_Event_TargetLocation' has a wrong offset!");
static_assert(offsetof(AnimComponent_SCT_C_ExecuteUbergraph_AnimComponent_SCT, K2Node_Event_Direction) == 0x0000D0, "Member 'AnimComponent_SCT_C_ExecuteUbergraph_AnimComponent_SCT::K2Node_Event_Direction' has a wrong offset!");
static_assert(offsetof(AnimComponent_SCT_C_ExecuteUbergraph_AnimComponent_SCT, CallFunc_BreakVector_X) == 0x0000DC, "Member 'AnimComponent_SCT_C_ExecuteUbergraph_AnimComponent_SCT::CallFunc_BreakVector_X' has a wrong offset!");
static_assert(offsetof(AnimComponent_SCT_C_ExecuteUbergraph_AnimComponent_SCT, CallFunc_BreakVector_Y) == 0x0000E0, "Member 'AnimComponent_SCT_C_ExecuteUbergraph_AnimComponent_SCT::CallFunc_BreakVector_Y' has a wrong offset!");
static_assert(offsetof(AnimComponent_SCT_C_ExecuteUbergraph_AnimComponent_SCT, CallFunc_BreakVector_Z) == 0x0000E4, "Member 'AnimComponent_SCT_C_ExecuteUbergraph_AnimComponent_SCT::CallFunc_BreakVector_Z' has a wrong offset!");
static_assert(offsetof(AnimComponent_SCT_C_ExecuteUbergraph_AnimComponent_SCT, CallFunc_BreakRotator_Roll) == 0x0000E8, "Member 'AnimComponent_SCT_C_ExecuteUbergraph_AnimComponent_SCT::CallFunc_BreakRotator_Roll' has a wrong offset!");
static_assert(offsetof(AnimComponent_SCT_C_ExecuteUbergraph_AnimComponent_SCT, CallFunc_BreakRotator_Pitch) == 0x0000EC, "Member 'AnimComponent_SCT_C_ExecuteUbergraph_AnimComponent_SCT::CallFunc_BreakRotator_Pitch' has a wrong offset!");
static_assert(offsetof(AnimComponent_SCT_C_ExecuteUbergraph_AnimComponent_SCT, CallFunc_BreakRotator_Yaw) == 0x0000F0, "Member 'AnimComponent_SCT_C_ExecuteUbergraph_AnimComponent_SCT::CallFunc_BreakRotator_Yaw' has a wrong offset!");
static_assert(offsetof(AnimComponent_SCT_C_ExecuteUbergraph_AnimComponent_SCT, CallFunc_MakeRotator_ReturnValue) == 0x0000F4, "Member 'AnimComponent_SCT_C_ExecuteUbergraph_AnimComponent_SCT::CallFunc_MakeRotator_ReturnValue' has a wrong offset!");
static_assert(offsetof(AnimComponent_SCT_C_ExecuteUbergraph_AnimComponent_SCT, CallFunc_MakeRotator_ReturnValue_1) == 0x000100, "Member 'AnimComponent_SCT_C_ExecuteUbergraph_AnimComponent_SCT::CallFunc_MakeRotator_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(AnimComponent_SCT_C_ExecuteUbergraph_AnimComponent_SCT, CallFunc_MakeTransform_ReturnValue) == 0x000110, "Member 'AnimComponent_SCT_C_ExecuteUbergraph_AnimComponent_SCT::CallFunc_MakeTransform_ReturnValue' has a wrong offset!");
static_assert(offsetof(AnimComponent_SCT_C_ExecuteUbergraph_AnimComponent_SCT, K2Node_CustomEvent_Enable) == 0x000140, "Member 'AnimComponent_SCT_C_ExecuteUbergraph_AnimComponent_SCT::K2Node_CustomEvent_Enable' has a wrong offset!");
static_assert(offsetof(AnimComponent_SCT_C_ExecuteUbergraph_AnimComponent_SCT, K2Node_DynamicCast_AsIAnim_Bp_1) == 0x000148, "Member 'AnimComponent_SCT_C_ExecuteUbergraph_AnimComponent_SCT::K2Node_DynamicCast_AsIAnim_Bp_1' has a wrong offset!");
static_assert(offsetof(AnimComponent_SCT_C_ExecuteUbergraph_AnimComponent_SCT, K2Node_DynamicCast_bSuccess_1) == 0x000158, "Member 'AnimComponent_SCT_C_ExecuteUbergraph_AnimComponent_SCT::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(AnimComponent_SCT_C_ExecuteUbergraph_AnimComponent_SCT, K2Node_DynamicCast_AsIAnim_Bp_2) == 0x000160, "Member 'AnimComponent_SCT_C_ExecuteUbergraph_AnimComponent_SCT::K2Node_DynamicCast_AsIAnim_Bp_2' has a wrong offset!");
static_assert(offsetof(AnimComponent_SCT_C_ExecuteUbergraph_AnimComponent_SCT, K2Node_DynamicCast_bSuccess_2) == 0x000170, "Member 'AnimComponent_SCT_C_ExecuteUbergraph_AnimComponent_SCT::K2Node_DynamicCast_bSuccess_2' has a wrong offset!");
static_assert(offsetof(AnimComponent_SCT_C_ExecuteUbergraph_AnimComponent_SCT, K2Node_Event_Enable) == 0x000171, "Member 'AnimComponent_SCT_C_ExecuteUbergraph_AnimComponent_SCT::K2Node_Event_Enable' has a wrong offset!");
static_assert(offsetof(AnimComponent_SCT_C_ExecuteUbergraph_AnimComponent_SCT, K2Node_Event_Aiming) == 0x000172, "Member 'AnimComponent_SCT_C_ExecuteUbergraph_AnimComponent_SCT::K2Node_Event_Aiming' has a wrong offset!");
static_assert(offsetof(AnimComponent_SCT_C_ExecuteUbergraph_AnimComponent_SCT, K2Node_Event_AimType) == 0x000173, "Member 'AnimComponent_SCT_C_ExecuteUbergraph_AnimComponent_SCT::K2Node_Event_AimType' has a wrong offset!");
static_assert(offsetof(AnimComponent_SCT_C_ExecuteUbergraph_AnimComponent_SCT, K2Node_Event_EmoteID) == 0x000174, "Member 'AnimComponent_SCT_C_ExecuteUbergraph_AnimComponent_SCT::K2Node_Event_EmoteID' has a wrong offset!");
static_assert(offsetof(AnimComponent_SCT_C_ExecuteUbergraph_AnimComponent_SCT, K2Node_Event_RPC) == 0x000175, "Member 'AnimComponent_SCT_C_ExecuteUbergraph_AnimComponent_SCT::K2Node_Event_RPC' has a wrong offset!");
static_assert(offsetof(AnimComponent_SCT_C_ExecuteUbergraph_AnimComponent_SCT, K2Node_Event_EnableRotationOverride) == 0x000176, "Member 'AnimComponent_SCT_C_ExecuteUbergraph_AnimComponent_SCT::K2Node_Event_EnableRotationOverride' has a wrong offset!");
static_assert(offsetof(AnimComponent_SCT_C_ExecuteUbergraph_AnimComponent_SCT, K2Node_Event_Rotation) == 0x000178, "Member 'AnimComponent_SCT_C_ExecuteUbergraph_AnimComponent_SCT::K2Node_Event_Rotation' has a wrong offset!");
static_assert(offsetof(AnimComponent_SCT_C_ExecuteUbergraph_AnimComponent_SCT, K2Node_SwitchEnum_CmpSuccess_1) == 0x000184, "Member 'AnimComponent_SCT_C_ExecuteUbergraph_AnimComponent_SCT::K2Node_SwitchEnum_CmpSuccess_1' has a wrong offset!");
static_assert(offsetof(AnimComponent_SCT_C_ExecuteUbergraph_AnimComponent_SCT, CallFunc_HasAuthority_ReturnValue_2) == 0x000185, "Member 'AnimComponent_SCT_C_ExecuteUbergraph_AnimComponent_SCT::CallFunc_HasAuthority_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(AnimComponent_SCT_C_ExecuteUbergraph_AnimComponent_SCT, Temp_int_Variable) == 0x000188, "Member 'AnimComponent_SCT_C_ExecuteUbergraph_AnimComponent_SCT::Temp_int_Variable' has a wrong offset!");
static_assert(offsetof(AnimComponent_SCT_C_ExecuteUbergraph_AnimComponent_SCT, K2Node_SwitchEnum_CmpSuccess_2) == 0x00018C, "Member 'AnimComponent_SCT_C_ExecuteUbergraph_AnimComponent_SCT::K2Node_SwitchEnum_CmpSuccess_2' has a wrong offset!");
static_assert(offsetof(AnimComponent_SCT_C_ExecuteUbergraph_AnimComponent_SCT, CallFunc_GreaterEqual_IntInt_ReturnValue) == 0x00018D, "Member 'AnimComponent_SCT_C_ExecuteUbergraph_AnimComponent_SCT::CallFunc_GreaterEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(AnimComponent_SCT_C_ExecuteUbergraph_AnimComponent_SCT, K2Node_Event_ToRagdoll) == 0x00018E, "Member 'AnimComponent_SCT_C_ExecuteUbergraph_AnimComponent_SCT::K2Node_Event_ToRagdoll' has a wrong offset!");
static_assert(offsetof(AnimComponent_SCT_C_ExecuteUbergraph_AnimComponent_SCT, K2Node_Event_OptionalImpulse) == 0x000190, "Member 'AnimComponent_SCT_C_ExecuteUbergraph_AnimComponent_SCT::K2Node_Event_OptionalImpulse' has a wrong offset!");
static_assert(offsetof(AnimComponent_SCT_C_ExecuteUbergraph_AnimComponent_SCT, K2Node_Event_Force) == 0x00019C, "Member 'AnimComponent_SCT_C_ExecuteUbergraph_AnimComponent_SCT::K2Node_Event_Force' has a wrong offset!");
static_assert(offsetof(AnimComponent_SCT_C_ExecuteUbergraph_AnimComponent_SCT, K2Node_Event_ShouldSprint) == 0x00019D, "Member 'AnimComponent_SCT_C_ExecuteUbergraph_AnimComponent_SCT::K2Node_Event_ShouldSprint' has a wrong offset!");
static_assert(offsetof(AnimComponent_SCT_C_ExecuteUbergraph_AnimComponent_SCT, K2Node_Event_Hit) == 0x0001A0, "Member 'AnimComponent_SCT_C_ExecuteUbergraph_AnimComponent_SCT::K2Node_Event_Hit' has a wrong offset!");
static_assert(offsetof(AnimComponent_SCT_C_ExecuteUbergraph_AnimComponent_SCT, K2Node_Event_NewStance) == 0x00022C, "Member 'AnimComponent_SCT_C_ExecuteUbergraph_AnimComponent_SCT::K2Node_Event_NewStance' has a wrong offset!");
static_assert(offsetof(AnimComponent_SCT_C_ExecuteUbergraph_AnimComponent_SCT, K2Node_Event_PrevMovementMode) == 0x00022D, "Member 'AnimComponent_SCT_C_ExecuteUbergraph_AnimComponent_SCT::K2Node_Event_PrevMovementMode' has a wrong offset!");
static_assert(offsetof(AnimComponent_SCT_C_ExecuteUbergraph_AnimComponent_SCT, K2Node_Event_NewMovementMode) == 0x00022E, "Member 'AnimComponent_SCT_C_ExecuteUbergraph_AnimComponent_SCT::K2Node_Event_NewMovementMode' has a wrong offset!");
static_assert(offsetof(AnimComponent_SCT_C_ExecuteUbergraph_AnimComponent_SCT, K2Node_Event_PrevCustomMode) == 0x00022F, "Member 'AnimComponent_SCT_C_ExecuteUbergraph_AnimComponent_SCT::K2Node_Event_PrevCustomMode' has a wrong offset!");
static_assert(offsetof(AnimComponent_SCT_C_ExecuteUbergraph_AnimComponent_SCT, K2Node_Event_NewCustomMode) == 0x000230, "Member 'AnimComponent_SCT_C_ExecuteUbergraph_AnimComponent_SCT::K2Node_Event_NewCustomMode' has a wrong offset!");
static_assert(offsetof(AnimComponent_SCT_C_ExecuteUbergraph_AnimComponent_SCT, K2Node_SwitchEnum_CmpSuccess_3) == 0x000231, "Member 'AnimComponent_SCT_C_ExecuteUbergraph_AnimComponent_SCT::K2Node_SwitchEnum_CmpSuccess_3' has a wrong offset!");
static_assert(offsetof(AnimComponent_SCT_C_ExecuteUbergraph_AnimComponent_SCT, K2Node_Event_AddAmount) == 0x000234, "Member 'AnimComponent_SCT_C_ExecuteUbergraph_AnimComponent_SCT::K2Node_Event_AddAmount' has a wrong offset!");
static_assert(offsetof(AnimComponent_SCT_C_ExecuteUbergraph_AnimComponent_SCT, CallFunc_GetGameTimeInSeconds_ReturnValue_1) == 0x000240, "Member 'AnimComponent_SCT_C_ExecuteUbergraph_AnimComponent_SCT::CallFunc_GetGameTimeInSeconds_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(AnimComponent_SCT_C_ExecuteUbergraph_AnimComponent_SCT, CallFunc_HasAuthority_ReturnValue_3) == 0x000244, "Member 'AnimComponent_SCT_C_ExecuteUbergraph_AnimComponent_SCT::CallFunc_HasAuthority_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(AnimComponent_SCT_C_ExecuteUbergraph_AnimComponent_SCT, K2Node_CustomEvent_Animation_1) == 0x000245, "Member 'AnimComponent_SCT_C_ExecuteUbergraph_AnimComponent_SCT::K2Node_CustomEvent_Animation_1' has a wrong offset!");
static_assert(offsetof(AnimComponent_SCT_C_ExecuteUbergraph_AnimComponent_SCT, K2Node_CreateDelegate_OutputDelegate_1) == 0x000248, "Member 'AnimComponent_SCT_C_ExecuteUbergraph_AnimComponent_SCT::K2Node_CreateDelegate_OutputDelegate_1' has a wrong offset!");
static_assert(offsetof(AnimComponent_SCT_C_ExecuteUbergraph_AnimComponent_SCT, CallFunc_K2_SetTimerDelegate_ReturnValue_1) == 0x000258, "Member 'AnimComponent_SCT_C_ExecuteUbergraph_AnimComponent_SCT::CallFunc_K2_SetTimerDelegate_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(AnimComponent_SCT_C_ExecuteUbergraph_AnimComponent_SCT, K2Node_SwitchEnum_CmpSuccess_4) == 0x000260, "Member 'AnimComponent_SCT_C_ExecuteUbergraph_AnimComponent_SCT::K2Node_SwitchEnum_CmpSuccess_4' has a wrong offset!");
static_assert(offsetof(AnimComponent_SCT_C_ExecuteUbergraph_AnimComponent_SCT, K2Node_CustomEvent_Animation) == 0x000261, "Member 'AnimComponent_SCT_C_ExecuteUbergraph_AnimComponent_SCT::K2Node_CustomEvent_Animation' has a wrong offset!");
static_assert(offsetof(AnimComponent_SCT_C_ExecuteUbergraph_AnimComponent_SCT, K2Node_DynamicCast_AsSCT_Anim_Bp_SCT) == 0x000268, "Member 'AnimComponent_SCT_C_ExecuteUbergraph_AnimComponent_SCT::K2Node_DynamicCast_AsSCT_Anim_Bp_SCT' has a wrong offset!");
static_assert(offsetof(AnimComponent_SCT_C_ExecuteUbergraph_AnimComponent_SCT, K2Node_DynamicCast_bSuccess_3) == 0x000270, "Member 'AnimComponent_SCT_C_ExecuteUbergraph_AnimComponent_SCT::K2Node_DynamicCast_bSuccess_3' has a wrong offset!");
static_assert(offsetof(AnimComponent_SCT_C_ExecuteUbergraph_AnimComponent_SCT, CallFunc_GetTransform_ReturnValue) == 0x000280, "Member 'AnimComponent_SCT_C_ExecuteUbergraph_AnimComponent_SCT::CallFunc_GetTransform_ReturnValue' has a wrong offset!");
static_assert(offsetof(AnimComponent_SCT_C_ExecuteUbergraph_AnimComponent_SCT, CallFunc_BreakTransform_Location) == 0x0002B0, "Member 'AnimComponent_SCT_C_ExecuteUbergraph_AnimComponent_SCT::CallFunc_BreakTransform_Location' has a wrong offset!");
static_assert(offsetof(AnimComponent_SCT_C_ExecuteUbergraph_AnimComponent_SCT, CallFunc_BreakTransform_Rotation) == 0x0002BC, "Member 'AnimComponent_SCT_C_ExecuteUbergraph_AnimComponent_SCT::CallFunc_BreakTransform_Rotation' has a wrong offset!");
static_assert(offsetof(AnimComponent_SCT_C_ExecuteUbergraph_AnimComponent_SCT, CallFunc_BreakTransform_Scale) == 0x0002C8, "Member 'AnimComponent_SCT_C_ExecuteUbergraph_AnimComponent_SCT::CallFunc_BreakTransform_Scale' has a wrong offset!");
static_assert(offsetof(AnimComponent_SCT_C_ExecuteUbergraph_AnimComponent_SCT, K2Node_CustomEvent_EnableRotationOverride_4) == 0x0002D4, "Member 'AnimComponent_SCT_C_ExecuteUbergraph_AnimComponent_SCT::K2Node_CustomEvent_EnableRotationOverride_4' has a wrong offset!");
static_assert(offsetof(AnimComponent_SCT_C_ExecuteUbergraph_AnimComponent_SCT, K2Node_CustomEvent_Rotation_4) == 0x0002D8, "Member 'AnimComponent_SCT_C_ExecuteUbergraph_AnimComponent_SCT::K2Node_CustomEvent_Rotation_4' has a wrong offset!");
static_assert(offsetof(AnimComponent_SCT_C_ExecuteUbergraph_AnimComponent_SCT, K2Node_CustomEvent_EnableRotationOverride_3) == 0x0002E4, "Member 'AnimComponent_SCT_C_ExecuteUbergraph_AnimComponent_SCT::K2Node_CustomEvent_EnableRotationOverride_3' has a wrong offset!");
static_assert(offsetof(AnimComponent_SCT_C_ExecuteUbergraph_AnimComponent_SCT, K2Node_CustomEvent_Rotation_3) == 0x0002E8, "Member 'AnimComponent_SCT_C_ExecuteUbergraph_AnimComponent_SCT::K2Node_CustomEvent_Rotation_3' has a wrong offset!");
static_assert(offsetof(AnimComponent_SCT_C_ExecuteUbergraph_AnimComponent_SCT, K2Node_CustomEvent_EnableRotationOverride_2) == 0x0002F4, "Member 'AnimComponent_SCT_C_ExecuteUbergraph_AnimComponent_SCT::K2Node_CustomEvent_EnableRotationOverride_2' has a wrong offset!");
static_assert(offsetof(AnimComponent_SCT_C_ExecuteUbergraph_AnimComponent_SCT, K2Node_CustomEvent_Rotation_2) == 0x0002F8, "Member 'AnimComponent_SCT_C_ExecuteUbergraph_AnimComponent_SCT::K2Node_CustomEvent_Rotation_2' has a wrong offset!");
static_assert(offsetof(AnimComponent_SCT_C_ExecuteUbergraph_AnimComponent_SCT, K2Node_CustomEvent_EnableRotationOverride_1) == 0x000304, "Member 'AnimComponent_SCT_C_ExecuteUbergraph_AnimComponent_SCT::K2Node_CustomEvent_EnableRotationOverride_1' has a wrong offset!");
static_assert(offsetof(AnimComponent_SCT_C_ExecuteUbergraph_AnimComponent_SCT, K2Node_CustomEvent_Rotation_1) == 0x000308, "Member 'AnimComponent_SCT_C_ExecuteUbergraph_AnimComponent_SCT::K2Node_CustomEvent_Rotation_1' has a wrong offset!");
static_assert(offsetof(AnimComponent_SCT_C_ExecuteUbergraph_AnimComponent_SCT, K2Node_SwitchEnum_CmpSuccess_5) == 0x000314, "Member 'AnimComponent_SCT_C_ExecuteUbergraph_AnimComponent_SCT::K2Node_SwitchEnum_CmpSuccess_5' has a wrong offset!");
static_assert(offsetof(AnimComponent_SCT_C_ExecuteUbergraph_AnimComponent_SCT, K2Node_SwitchEnum_CmpSuccess_6) == 0x000315, "Member 'AnimComponent_SCT_C_ExecuteUbergraph_AnimComponent_SCT::K2Node_SwitchEnum_CmpSuccess_6' has a wrong offset!");
static_assert(offsetof(AnimComponent_SCT_C_ExecuteUbergraph_AnimComponent_SCT, K2Node_CustomEvent_LaunchTransform_1) == 0x000320, "Member 'AnimComponent_SCT_C_ExecuteUbergraph_AnimComponent_SCT::K2Node_CustomEvent_LaunchTransform_1' has a wrong offset!");
static_assert(offsetof(AnimComponent_SCT_C_ExecuteUbergraph_AnimComponent_SCT, K2Node_CustomEvent_LaunchTransform) == 0x000350, "Member 'AnimComponent_SCT_C_ExecuteUbergraph_AnimComponent_SCT::K2Node_CustomEvent_LaunchTransform' has a wrong offset!");
static_assert(offsetof(AnimComponent_SCT_C_ExecuteUbergraph_AnimComponent_SCT, K2Node_CustomEvent_Aiming) == 0x000380, "Member 'AnimComponent_SCT_C_ExecuteUbergraph_AnimComponent_SCT::K2Node_CustomEvent_Aiming' has a wrong offset!");
static_assert(offsetof(AnimComponent_SCT_C_ExecuteUbergraph_AnimComponent_SCT, K2Node_CustomEvent_AimType) == 0x000381, "Member 'AnimComponent_SCT_C_ExecuteUbergraph_AnimComponent_SCT::K2Node_CustomEvent_AimType' has a wrong offset!");
static_assert(offsetof(AnimComponent_SCT_C_ExecuteUbergraph_AnimComponent_SCT, CallFunc_IsSimulatingPhysics_ReturnValue) == 0x000382, "Member 'AnimComponent_SCT_C_ExecuteUbergraph_AnimComponent_SCT::CallFunc_IsSimulatingPhysics_ReturnValue' has a wrong offset!");
static_assert(offsetof(AnimComponent_SCT_C_ExecuteUbergraph_AnimComponent_SCT, CallFunc_GetComponentVelocity_ReturnValue) == 0x000384, "Member 'AnimComponent_SCT_C_ExecuteUbergraph_AnimComponent_SCT::CallFunc_GetComponentVelocity_ReturnValue' has a wrong offset!");
static_assert(offsetof(AnimComponent_SCT_C_ExecuteUbergraph_AnimComponent_SCT, K2Node_CustomEvent_ToRagdoll_1) == 0x000390, "Member 'AnimComponent_SCT_C_ExecuteUbergraph_AnimComponent_SCT::K2Node_CustomEvent_ToRagdoll_1' has a wrong offset!");
static_assert(offsetof(AnimComponent_SCT_C_ExecuteUbergraph_AnimComponent_SCT, K2Node_CustomEvent_NewVel) == 0x000394, "Member 'AnimComponent_SCT_C_ExecuteUbergraph_AnimComponent_SCT::K2Node_CustomEvent_NewVel' has a wrong offset!");
static_assert(offsetof(AnimComponent_SCT_C_ExecuteUbergraph_AnimComponent_SCT, K2Node_CustomEvent_NewLocation) == 0x0003A0, "Member 'AnimComponent_SCT_C_ExecuteUbergraph_AnimComponent_SCT::K2Node_CustomEvent_NewLocation' has a wrong offset!");
static_assert(offsetof(AnimComponent_SCT_C_ExecuteUbergraph_AnimComponent_SCT, K2Node_CustomEvent_NewRotation) == 0x0003AC, "Member 'AnimComponent_SCT_C_ExecuteUbergraph_AnimComponent_SCT::K2Node_CustomEvent_NewRotation' has a wrong offset!");
static_assert(offsetof(AnimComponent_SCT_C_ExecuteUbergraph_AnimComponent_SCT, K2Node_DynamicCast_AsIAnim_Bp_3) == 0x0003B8, "Member 'AnimComponent_SCT_C_ExecuteUbergraph_AnimComponent_SCT::K2Node_DynamicCast_AsIAnim_Bp_3' has a wrong offset!");
static_assert(offsetof(AnimComponent_SCT_C_ExecuteUbergraph_AnimComponent_SCT, K2Node_DynamicCast_bSuccess_4) == 0x0003C8, "Member 'AnimComponent_SCT_C_ExecuteUbergraph_AnimComponent_SCT::K2Node_DynamicCast_bSuccess_4' has a wrong offset!");
static_assert(offsetof(AnimComponent_SCT_C_ExecuteUbergraph_AnimComponent_SCT, CallFunc_K2_SetActorLocationAndRotation_SweepHitResult) == 0x0003CC, "Member 'AnimComponent_SCT_C_ExecuteUbergraph_AnimComponent_SCT::CallFunc_K2_SetActorLocationAndRotation_SweepHitResult' has a wrong offset!");
static_assert(offsetof(AnimComponent_SCT_C_ExecuteUbergraph_AnimComponent_SCT, CallFunc_K2_SetActorLocationAndRotation_ReturnValue) == 0x000458, "Member 'AnimComponent_SCT_C_ExecuteUbergraph_AnimComponent_SCT::CallFunc_K2_SetActorLocationAndRotation_ReturnValue' has a wrong offset!");
static_assert(offsetof(AnimComponent_SCT_C_ExecuteUbergraph_AnimComponent_SCT, K2Node_CustomEvent_EmoteID_1) == 0x000459, "Member 'AnimComponent_SCT_C_ExecuteUbergraph_AnimComponent_SCT::K2Node_CustomEvent_EmoteID_1' has a wrong offset!");
static_assert(offsetof(AnimComponent_SCT_C_ExecuteUbergraph_AnimComponent_SCT, K2Node_CustomEvent_EmoteID) == 0x00045A, "Member 'AnimComponent_SCT_C_ExecuteUbergraph_AnimComponent_SCT::K2Node_CustomEvent_EmoteID' has a wrong offset!");
static_assert(offsetof(AnimComponent_SCT_C_ExecuteUbergraph_AnimComponent_SCT, K2Node_CustomEvent_EnableRotationOverride) == 0x00045B, "Member 'AnimComponent_SCT_C_ExecuteUbergraph_AnimComponent_SCT::K2Node_CustomEvent_EnableRotationOverride' has a wrong offset!");
static_assert(offsetof(AnimComponent_SCT_C_ExecuteUbergraph_AnimComponent_SCT, K2Node_CustomEvent_Rotation) == 0x00045C, "Member 'AnimComponent_SCT_C_ExecuteUbergraph_AnimComponent_SCT::K2Node_CustomEvent_Rotation' has a wrong offset!");
static_assert(offsetof(AnimComponent_SCT_C_ExecuteUbergraph_AnimComponent_SCT, K2Node_CustomEvent_ToRagdoll) == 0x000468, "Member 'AnimComponent_SCT_C_ExecuteUbergraph_AnimComponent_SCT::K2Node_CustomEvent_ToRagdoll' has a wrong offset!");
static_assert(offsetof(AnimComponent_SCT_C_ExecuteUbergraph_AnimComponent_SCT, K2Node_CustomEvent_OptionalImpulse) == 0x00046C, "Member 'AnimComponent_SCT_C_ExecuteUbergraph_AnimComponent_SCT::K2Node_CustomEvent_OptionalImpulse' has a wrong offset!");
static_assert(offsetof(AnimComponent_SCT_C_ExecuteUbergraph_AnimComponent_SCT, K2Node_CustomEvent_Force) == 0x000478, "Member 'AnimComponent_SCT_C_ExecuteUbergraph_AnimComponent_SCT::K2Node_CustomEvent_Force' has a wrong offset!");
static_assert(offsetof(AnimComponent_SCT_C_ExecuteUbergraph_AnimComponent_SCT, CallFunc_Add_VectorVector_ReturnValue) == 0x00047C, "Member 'AnimComponent_SCT_C_ExecuteUbergraph_AnimComponent_SCT::CallFunc_Add_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(AnimComponent_SCT_C_ExecuteUbergraph_AnimComponent_SCT, CallFunc_NotEqual_BoolBool_ReturnValue) == 0x000488, "Member 'AnimComponent_SCT_C_ExecuteUbergraph_AnimComponent_SCT::CallFunc_NotEqual_BoolBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(AnimComponent_SCT_C_ExecuteUbergraph_AnimComponent_SCT, K2Node_CustomEvent_NewGait) == 0x000489, "Member 'AnimComponent_SCT_C_ExecuteUbergraph_AnimComponent_SCT::K2Node_CustomEvent_NewGait' has a wrong offset!");
static_assert(offsetof(AnimComponent_SCT_C_ExecuteUbergraph_AnimComponent_SCT, K2Node_CustomEvent_MovementInput) == 0x00048C, "Member 'AnimComponent_SCT_C_ExecuteUbergraph_AnimComponent_SCT::K2Node_CustomEvent_MovementInput' has a wrong offset!");
static_assert(offsetof(AnimComponent_SCT_C_ExecuteUbergraph_AnimComponent_SCT, K2Node_CustomEvent_LookingRotation) == 0x000498, "Member 'AnimComponent_SCT_C_ExecuteUbergraph_AnimComponent_SCT::K2Node_CustomEvent_LookingRotation' has a wrong offset!");

// Function AnimComponent_SCT.AnimComponent_SCT_C.ServerMovementTransform
// 0x0018 (0x0018 - 0x0000)
struct AnimComponent_SCT_C_ServerMovementTransform final
{
public:
	struct FVector                                MovementInput_0;                                   // 0x0000(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               LookingRotation_0;                                 // 0x000C(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(AnimComponent_SCT_C_ServerMovementTransform) == 0x000004, "Wrong alignment on AnimComponent_SCT_C_ServerMovementTransform");
static_assert(sizeof(AnimComponent_SCT_C_ServerMovementTransform) == 0x000018, "Wrong size on AnimComponent_SCT_C_ServerMovementTransform");
static_assert(offsetof(AnimComponent_SCT_C_ServerMovementTransform, MovementInput_0) == 0x000000, "Member 'AnimComponent_SCT_C_ServerMovementTransform::MovementInput_0' has a wrong offset!");
static_assert(offsetof(AnimComponent_SCT_C_ServerMovementTransform, LookingRotation_0) == 0x00000C, "Member 'AnimComponent_SCT_C_ServerMovementTransform::LookingRotation_0' has a wrong offset!");

// Function AnimComponent_SCT.AnimComponent_SCT_C.ServerSetGait
// 0x0001 (0x0001 - 0x0000)
struct AnimComponent_SCT_C_ServerSetGait final
{
public:
	EGait                                         NewGait;                                           // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(AnimComponent_SCT_C_ServerSetGait) == 0x000001, "Wrong alignment on AnimComponent_SCT_C_ServerSetGait");
static_assert(sizeof(AnimComponent_SCT_C_ServerSetGait) == 0x000001, "Wrong size on AnimComponent_SCT_C_ServerSetGait");
static_assert(offsetof(AnimComponent_SCT_C_ServerSetGait, NewGait) == 0x000000, "Member 'AnimComponent_SCT_C_ServerSetGait::NewGait' has a wrong offset!");

// Function AnimComponent_SCT.AnimComponent_SCT_C.ServerRagdoll
// 0x0014 (0x0014 - 0x0000)
struct AnimComponent_SCT_C_ServerRagdoll final
{
public:
	bool                                          ToRagdoll;                                         // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                OptionalImpulse;                                   // 0x0004(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Force;                                             // 0x0010(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(AnimComponent_SCT_C_ServerRagdoll) == 0x000004, "Wrong alignment on AnimComponent_SCT_C_ServerRagdoll");
static_assert(sizeof(AnimComponent_SCT_C_ServerRagdoll) == 0x000014, "Wrong size on AnimComponent_SCT_C_ServerRagdoll");
static_assert(offsetof(AnimComponent_SCT_C_ServerRagdoll, ToRagdoll) == 0x000000, "Member 'AnimComponent_SCT_C_ServerRagdoll::ToRagdoll' has a wrong offset!");
static_assert(offsetof(AnimComponent_SCT_C_ServerRagdoll, OptionalImpulse) == 0x000004, "Member 'AnimComponent_SCT_C_ServerRagdoll::OptionalImpulse' has a wrong offset!");
static_assert(offsetof(AnimComponent_SCT_C_ServerRagdoll, Force) == 0x000010, "Member 'AnimComponent_SCT_C_ServerRagdoll::Force' has a wrong offset!");

// Function AnimComponent_SCT.AnimComponent_SCT_C.SetCharacterRotationSERVER
// 0x0010 (0x0010 - 0x0000)
struct AnimComponent_SCT_C_SetCharacterRotationSERVER final
{
public:
	bool                                          EnableRotationOverride;                            // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               Rotation;                                          // 0x0004(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(AnimComponent_SCT_C_SetCharacterRotationSERVER) == 0x000004, "Wrong alignment on AnimComponent_SCT_C_SetCharacterRotationSERVER");
static_assert(sizeof(AnimComponent_SCT_C_SetCharacterRotationSERVER) == 0x000010, "Wrong size on AnimComponent_SCT_C_SetCharacterRotationSERVER");
static_assert(offsetof(AnimComponent_SCT_C_SetCharacterRotationSERVER, EnableRotationOverride) == 0x000000, "Member 'AnimComponent_SCT_C_SetCharacterRotationSERVER::EnableRotationOverride' has a wrong offset!");
static_assert(offsetof(AnimComponent_SCT_C_SetCharacterRotationSERVER, Rotation) == 0x000004, "Member 'AnimComponent_SCT_C_SetCharacterRotationSERVER::Rotation' has a wrong offset!");

// Function AnimComponent_SCT.AnimComponent_SCT_C.ServerPlayEmote
// 0x0001 (0x0001 - 0x0000)
struct AnimComponent_SCT_C_ServerPlayEmote final
{
public:
	uint8                                         EmoteID;                                           // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(AnimComponent_SCT_C_ServerPlayEmote) == 0x000001, "Wrong alignment on AnimComponent_SCT_C_ServerPlayEmote");
static_assert(sizeof(AnimComponent_SCT_C_ServerPlayEmote) == 0x000001, "Wrong size on AnimComponent_SCT_C_ServerPlayEmote");
static_assert(offsetof(AnimComponent_SCT_C_ServerPlayEmote, EmoteID) == 0x000000, "Member 'AnimComponent_SCT_C_ServerPlayEmote::EmoteID' has a wrong offset!");

// Function AnimComponent_SCT.AnimComponent_SCT_C.MulticastPlayEmote
// 0x0001 (0x0001 - 0x0000)
struct AnimComponent_SCT_C_MulticastPlayEmote final
{
public:
	uint8                                         EmoteID;                                           // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(AnimComponent_SCT_C_MulticastPlayEmote) == 0x000001, "Wrong alignment on AnimComponent_SCT_C_MulticastPlayEmote");
static_assert(sizeof(AnimComponent_SCT_C_MulticastPlayEmote) == 0x000001, "Wrong size on AnimComponent_SCT_C_MulticastPlayEmote");
static_assert(offsetof(AnimComponent_SCT_C_MulticastPlayEmote, EmoteID) == 0x000000, "Member 'AnimComponent_SCT_C_MulticastPlayEmote::EmoteID' has a wrong offset!");

// Function AnimComponent_SCT.AnimComponent_SCT_C.MulticastRagdoll
// 0x0028 (0x0028 - 0x0000)
struct AnimComponent_SCT_C_MulticastRagdoll final
{
public:
	bool                                          ToRagdoll;                                         // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                NewVel;                                            // 0x0004(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                NewLocation;                                       // 0x0010(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               NewRotation;                                       // 0x001C(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(AnimComponent_SCT_C_MulticastRagdoll) == 0x000004, "Wrong alignment on AnimComponent_SCT_C_MulticastRagdoll");
static_assert(sizeof(AnimComponent_SCT_C_MulticastRagdoll) == 0x000028, "Wrong size on AnimComponent_SCT_C_MulticastRagdoll");
static_assert(offsetof(AnimComponent_SCT_C_MulticastRagdoll, ToRagdoll) == 0x000000, "Member 'AnimComponent_SCT_C_MulticastRagdoll::ToRagdoll' has a wrong offset!");
static_assert(offsetof(AnimComponent_SCT_C_MulticastRagdoll, NewVel) == 0x000004, "Member 'AnimComponent_SCT_C_MulticastRagdoll::NewVel' has a wrong offset!");
static_assert(offsetof(AnimComponent_SCT_C_MulticastRagdoll, NewLocation) == 0x000010, "Member 'AnimComponent_SCT_C_MulticastRagdoll::NewLocation' has a wrong offset!");
static_assert(offsetof(AnimComponent_SCT_C_MulticastRagdoll, NewRotation) == 0x00001C, "Member 'AnimComponent_SCT_C_MulticastRagdoll::NewRotation' has a wrong offset!");

// Function AnimComponent_SCT.AnimComponent_SCT_C.AimingServer
// 0x0002 (0x0002 - 0x0000)
struct AnimComponent_SCT_C_AimingServer final
{
public:
	bool                                          Aiming;                                            // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         AimType_0;                                         // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(AnimComponent_SCT_C_AimingServer) == 0x000001, "Wrong alignment on AnimComponent_SCT_C_AimingServer");
static_assert(sizeof(AnimComponent_SCT_C_AimingServer) == 0x000002, "Wrong size on AnimComponent_SCT_C_AimingServer");
static_assert(offsetof(AnimComponent_SCT_C_AimingServer, Aiming) == 0x000000, "Member 'AnimComponent_SCT_C_AimingServer::Aiming' has a wrong offset!");
static_assert(offsetof(AnimComponent_SCT_C_AimingServer, AimType_0) == 0x000001, "Member 'AnimComponent_SCT_C_AimingServer::AimType_0' has a wrong offset!");

// Function AnimComponent_SCT.AnimComponent_SCT_C.LaunchRagdollServer
// 0x0030 (0x0030 - 0x0000)
struct AnimComponent_SCT_C_LaunchRagdollServer final
{
public:
	struct FTransform                             LaunchTransform_0;                                 // 0x0000(0x0030)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
};
static_assert(alignof(AnimComponent_SCT_C_LaunchRagdollServer) == 0x000010, "Wrong alignment on AnimComponent_SCT_C_LaunchRagdollServer");
static_assert(sizeof(AnimComponent_SCT_C_LaunchRagdollServer) == 0x000030, "Wrong size on AnimComponent_SCT_C_LaunchRagdollServer");
static_assert(offsetof(AnimComponent_SCT_C_LaunchRagdollServer, LaunchTransform_0) == 0x000000, "Member 'AnimComponent_SCT_C_LaunchRagdollServer::LaunchTransform_0' has a wrong offset!");

// Function AnimComponent_SCT.AnimComponent_SCT_C.LaunchRagdollMulticast
// 0x0030 (0x0030 - 0x0000)
struct AnimComponent_SCT_C_LaunchRagdollMulticast final
{
public:
	struct FTransform                             LaunchTransform_0;                                 // 0x0000(0x0030)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
};
static_assert(alignof(AnimComponent_SCT_C_LaunchRagdollMulticast) == 0x000010, "Wrong alignment on AnimComponent_SCT_C_LaunchRagdollMulticast");
static_assert(sizeof(AnimComponent_SCT_C_LaunchRagdollMulticast) == 0x000030, "Wrong size on AnimComponent_SCT_C_LaunchRagdollMulticast");
static_assert(offsetof(AnimComponent_SCT_C_LaunchRagdollMulticast, LaunchTransform_0) == 0x000000, "Member 'AnimComponent_SCT_C_LaunchRagdollMulticast::LaunchTransform_0' has a wrong offset!");

// Function AnimComponent_SCT.AnimComponent_SCT_C.SetCharacterRotationNONE
// 0x0010 (0x0010 - 0x0000)
struct AnimComponent_SCT_C_SetCharacterRotationNONE final
{
public:
	bool                                          EnableRotationOverride;                            // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               Rotation;                                          // 0x0004(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(AnimComponent_SCT_C_SetCharacterRotationNONE) == 0x000004, "Wrong alignment on AnimComponent_SCT_C_SetCharacterRotationNONE");
static_assert(sizeof(AnimComponent_SCT_C_SetCharacterRotationNONE) == 0x000010, "Wrong size on AnimComponent_SCT_C_SetCharacterRotationNONE");
static_assert(offsetof(AnimComponent_SCT_C_SetCharacterRotationNONE, EnableRotationOverride) == 0x000000, "Member 'AnimComponent_SCT_C_SetCharacterRotationNONE::EnableRotationOverride' has a wrong offset!");
static_assert(offsetof(AnimComponent_SCT_C_SetCharacterRotationNONE, Rotation) == 0x000004, "Member 'AnimComponent_SCT_C_SetCharacterRotationNONE::Rotation' has a wrong offset!");

// Function AnimComponent_SCT.AnimComponent_SCT_C.SetCharacterRotationMULTICAST
// 0x0010 (0x0010 - 0x0000)
struct AnimComponent_SCT_C_SetCharacterRotationMULTICAST final
{
public:
	bool                                          EnableRotationOverride;                            // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               Rotation;                                          // 0x0004(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(AnimComponent_SCT_C_SetCharacterRotationMULTICAST) == 0x000004, "Wrong alignment on AnimComponent_SCT_C_SetCharacterRotationMULTICAST");
static_assert(sizeof(AnimComponent_SCT_C_SetCharacterRotationMULTICAST) == 0x000010, "Wrong size on AnimComponent_SCT_C_SetCharacterRotationMULTICAST");
static_assert(offsetof(AnimComponent_SCT_C_SetCharacterRotationMULTICAST, EnableRotationOverride) == 0x000000, "Member 'AnimComponent_SCT_C_SetCharacterRotationMULTICAST::EnableRotationOverride' has a wrong offset!");
static_assert(offsetof(AnimComponent_SCT_C_SetCharacterRotationMULTICAST, Rotation) == 0x000004, "Member 'AnimComponent_SCT_C_SetCharacterRotationMULTICAST::Rotation' has a wrong offset!");

// Function AnimComponent_SCT.AnimComponent_SCT_C.SetCharacterRotationOWNING
// 0x0010 (0x0010 - 0x0000)
struct AnimComponent_SCT_C_SetCharacterRotationOWNING final
{
public:
	bool                                          EnableRotationOverride;                            // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               Rotation;                                          // 0x0004(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(AnimComponent_SCT_C_SetCharacterRotationOWNING) == 0x000004, "Wrong alignment on AnimComponent_SCT_C_SetCharacterRotationOWNING");
static_assert(sizeof(AnimComponent_SCT_C_SetCharacterRotationOWNING) == 0x000010, "Wrong size on AnimComponent_SCT_C_SetCharacterRotationOWNING");
static_assert(offsetof(AnimComponent_SCT_C_SetCharacterRotationOWNING, EnableRotationOverride) == 0x000000, "Member 'AnimComponent_SCT_C_SetCharacterRotationOWNING::EnableRotationOverride' has a wrong offset!");
static_assert(offsetof(AnimComponent_SCT_C_SetCharacterRotationOWNING, Rotation) == 0x000004, "Member 'AnimComponent_SCT_C_SetCharacterRotationOWNING::Rotation' has a wrong offset!");

// Function AnimComponent_SCT.AnimComponent_SCT_C.SetCharacterRotationOMNI
// 0x0010 (0x0010 - 0x0000)
struct AnimComponent_SCT_C_SetCharacterRotationOMNI final
{
public:
	bool                                          EnableRotationOverride;                            // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               Rotation;                                          // 0x0004(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(AnimComponent_SCT_C_SetCharacterRotationOMNI) == 0x000004, "Wrong alignment on AnimComponent_SCT_C_SetCharacterRotationOMNI");
static_assert(sizeof(AnimComponent_SCT_C_SetCharacterRotationOMNI) == 0x000010, "Wrong size on AnimComponent_SCT_C_SetCharacterRotationOMNI");
static_assert(offsetof(AnimComponent_SCT_C_SetCharacterRotationOMNI, EnableRotationOverride) == 0x000000, "Member 'AnimComponent_SCT_C_SetCharacterRotationOMNI::EnableRotationOverride' has a wrong offset!");
static_assert(offsetof(AnimComponent_SCT_C_SetCharacterRotationOMNI, Rotation) == 0x000004, "Member 'AnimComponent_SCT_C_SetCharacterRotationOMNI::Rotation' has a wrong offset!");

// Function AnimComponent_SCT.AnimComponent_SCT_C.ItemAnimationEvent
// 0x0001 (0x0001 - 0x0000)
struct AnimComponent_SCT_C_ItemAnimationEvent final
{
public:
	E_ItemAnimation                               Animation;                                         // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(AnimComponent_SCT_C_ItemAnimationEvent) == 0x000001, "Wrong alignment on AnimComponent_SCT_C_ItemAnimationEvent");
static_assert(sizeof(AnimComponent_SCT_C_ItemAnimationEvent) == 0x000001, "Wrong size on AnimComponent_SCT_C_ItemAnimationEvent");
static_assert(offsetof(AnimComponent_SCT_C_ItemAnimationEvent, Animation) == 0x000000, "Member 'AnimComponent_SCT_C_ItemAnimationEvent::Animation' has a wrong offset!");

// Function AnimComponent_SCT.AnimComponent_SCT_C.ItemAnimationMulticast
// 0x0001 (0x0001 - 0x0000)
struct AnimComponent_SCT_C_ItemAnimationMulticast final
{
public:
	E_ItemAnimation                               Animation;                                         // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(AnimComponent_SCT_C_ItemAnimationMulticast) == 0x000001, "Wrong alignment on AnimComponent_SCT_C_ItemAnimationMulticast");
static_assert(sizeof(AnimComponent_SCT_C_ItemAnimationMulticast) == 0x000001, "Wrong size on AnimComponent_SCT_C_ItemAnimationMulticast");
static_assert(offsetof(AnimComponent_SCT_C_ItemAnimationMulticast, Animation) == 0x000000, "Member 'AnimComponent_SCT_C_ItemAnimationMulticast::Animation' has a wrong offset!");

// Function AnimComponent_SCT.AnimComponent_SCT_C.AddCharacterRotationBPI
// 0x000C (0x000C - 0x0000)
struct AnimComponent_SCT_C_AddCharacterRotationBPI final
{
public:
	struct FRotator                               AddAmount;                                         // 0x0000(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(AnimComponent_SCT_C_AddCharacterRotationBPI) == 0x000004, "Wrong alignment on AnimComponent_SCT_C_AddCharacterRotationBPI");
static_assert(sizeof(AnimComponent_SCT_C_AddCharacterRotationBPI) == 0x00000C, "Wrong size on AnimComponent_SCT_C_AddCharacterRotationBPI");
static_assert(offsetof(AnimComponent_SCT_C_AddCharacterRotationBPI, AddAmount) == 0x000000, "Member 'AnimComponent_SCT_C_AddCharacterRotationBPI::AddAmount' has a wrong offset!");

// Function AnimComponent_SCT.AnimComponent_SCT_C.MovementModeChangedBPI
// 0x0004 (0x0004 - 0x0000)
struct AnimComponent_SCT_C_MovementModeChangedBPI final
{
public:
	Engine::EMovementMode                         PrevMovementMode;                                  // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	Engine::EMovementMode                         NewMovementMode;                                   // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         PrevCustomMode;                                    // 0x0002(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         NewCustomMode;                                     // 0x0003(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(AnimComponent_SCT_C_MovementModeChangedBPI) == 0x000001, "Wrong alignment on AnimComponent_SCT_C_MovementModeChangedBPI");
static_assert(sizeof(AnimComponent_SCT_C_MovementModeChangedBPI) == 0x000004, "Wrong size on AnimComponent_SCT_C_MovementModeChangedBPI");
static_assert(offsetof(AnimComponent_SCT_C_MovementModeChangedBPI, PrevMovementMode) == 0x000000, "Member 'AnimComponent_SCT_C_MovementModeChangedBPI::PrevMovementMode' has a wrong offset!");
static_assert(offsetof(AnimComponent_SCT_C_MovementModeChangedBPI, NewMovementMode) == 0x000001, "Member 'AnimComponent_SCT_C_MovementModeChangedBPI::NewMovementMode' has a wrong offset!");
static_assert(offsetof(AnimComponent_SCT_C_MovementModeChangedBPI, PrevCustomMode) == 0x000002, "Member 'AnimComponent_SCT_C_MovementModeChangedBPI::PrevCustomMode' has a wrong offset!");
static_assert(offsetof(AnimComponent_SCT_C_MovementModeChangedBPI, NewCustomMode) == 0x000003, "Member 'AnimComponent_SCT_C_MovementModeChangedBPI::NewCustomMode' has a wrong offset!");

// Function AnimComponent_SCT.AnimComponent_SCT_C.SetStanceBPI
// 0x0001 (0x0001 - 0x0000)
struct AnimComponent_SCT_C_SetStanceBPI final
{
public:
	EStance                                       NewStance;                                         // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(AnimComponent_SCT_C_SetStanceBPI) == 0x000001, "Wrong alignment on AnimComponent_SCT_C_SetStanceBPI");
static_assert(sizeof(AnimComponent_SCT_C_SetStanceBPI) == 0x000001, "Wrong size on AnimComponent_SCT_C_SetStanceBPI");
static_assert(offsetof(AnimComponent_SCT_C_SetStanceBPI, NewStance) == 0x000000, "Member 'AnimComponent_SCT_C_SetStanceBPI::NewStance' has a wrong offset!");

// Function AnimComponent_SCT.AnimComponent_SCT_C.LandedBPI
// 0x008C (0x008C - 0x0000)
struct AnimComponent_SCT_C_LandedBPI final
{
public:
	struct FHitResult                             Hit;                                               // 0x0000(0x008C)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
};
static_assert(alignof(AnimComponent_SCT_C_LandedBPI) == 0x000004, "Wrong alignment on AnimComponent_SCT_C_LandedBPI");
static_assert(sizeof(AnimComponent_SCT_C_LandedBPI) == 0x00008C, "Wrong size on AnimComponent_SCT_C_LandedBPI");
static_assert(offsetof(AnimComponent_SCT_C_LandedBPI, Hit) == 0x000000, "Member 'AnimComponent_SCT_C_LandedBPI::Hit' has a wrong offset!");

// Function AnimComponent_SCT.AnimComponent_SCT_C.ShouldSprintBPI
// 0x0001 (0x0001 - 0x0000)
struct AnimComponent_SCT_C_ShouldSprintBPI final
{
public:
	bool                                          ShouldSprint_0;                                    // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(AnimComponent_SCT_C_ShouldSprintBPI) == 0x000001, "Wrong alignment on AnimComponent_SCT_C_ShouldSprintBPI");
static_assert(sizeof(AnimComponent_SCT_C_ShouldSprintBPI) == 0x000001, "Wrong size on AnimComponent_SCT_C_ShouldSprintBPI");
static_assert(offsetof(AnimComponent_SCT_C_ShouldSprintBPI, ShouldSprint_0) == 0x000000, "Member 'AnimComponent_SCT_C_ShouldSprintBPI::ShouldSprint_0' has a wrong offset!");

// Function AnimComponent_SCT.AnimComponent_SCT_C.ToRagdollBPI
// 0x0014 (0x0014 - 0x0000)
struct AnimComponent_SCT_C_ToRagdollBPI final
{
public:
	bool                                          ToRagdoll;                                         // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                OptionalImpulse;                                   // 0x0004(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Force;                                             // 0x0010(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(AnimComponent_SCT_C_ToRagdollBPI) == 0x000004, "Wrong alignment on AnimComponent_SCT_C_ToRagdollBPI");
static_assert(sizeof(AnimComponent_SCT_C_ToRagdollBPI) == 0x000014, "Wrong size on AnimComponent_SCT_C_ToRagdollBPI");
static_assert(offsetof(AnimComponent_SCT_C_ToRagdollBPI, ToRagdoll) == 0x000000, "Member 'AnimComponent_SCT_C_ToRagdollBPI::ToRagdoll' has a wrong offset!");
static_assert(offsetof(AnimComponent_SCT_C_ToRagdollBPI, OptionalImpulse) == 0x000004, "Member 'AnimComponent_SCT_C_ToRagdollBPI::OptionalImpulse' has a wrong offset!");
static_assert(offsetof(AnimComponent_SCT_C_ToRagdollBPI, Force) == 0x000010, "Member 'AnimComponent_SCT_C_ToRagdollBPI::Force' has a wrong offset!");

// Function AnimComponent_SCT.AnimComponent_SCT_C.SetCharacterRotationBPI
// 0x0010 (0x0010 - 0x0000)
struct AnimComponent_SCT_C_SetCharacterRotationBPI final
{
public:
	ERPC_Enum                                     RPC;                                               // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          EnableRotationOverride;                            // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2[0x2];                                        // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               Rotation;                                          // 0x0004(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(AnimComponent_SCT_C_SetCharacterRotationBPI) == 0x000004, "Wrong alignment on AnimComponent_SCT_C_SetCharacterRotationBPI");
static_assert(sizeof(AnimComponent_SCT_C_SetCharacterRotationBPI) == 0x000010, "Wrong size on AnimComponent_SCT_C_SetCharacterRotationBPI");
static_assert(offsetof(AnimComponent_SCT_C_SetCharacterRotationBPI, RPC) == 0x000000, "Member 'AnimComponent_SCT_C_SetCharacterRotationBPI::RPC' has a wrong offset!");
static_assert(offsetof(AnimComponent_SCT_C_SetCharacterRotationBPI, EnableRotationOverride) == 0x000001, "Member 'AnimComponent_SCT_C_SetCharacterRotationBPI::EnableRotationOverride' has a wrong offset!");
static_assert(offsetof(AnimComponent_SCT_C_SetCharacterRotationBPI, Rotation) == 0x000004, "Member 'AnimComponent_SCT_C_SetCharacterRotationBPI::Rotation' has a wrong offset!");

// Function AnimComponent_SCT.AnimComponent_SCT_C.PlayEmoteBPI
// 0x0001 (0x0001 - 0x0000)
struct AnimComponent_SCT_C_PlayEmoteBPI final
{
public:
	uint8                                         EmoteID;                                           // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(AnimComponent_SCT_C_PlayEmoteBPI) == 0x000001, "Wrong alignment on AnimComponent_SCT_C_PlayEmoteBPI");
static_assert(sizeof(AnimComponent_SCT_C_PlayEmoteBPI) == 0x000001, "Wrong size on AnimComponent_SCT_C_PlayEmoteBPI");
static_assert(offsetof(AnimComponent_SCT_C_PlayEmoteBPI, EmoteID) == 0x000000, "Member 'AnimComponent_SCT_C_PlayEmoteBPI::EmoteID' has a wrong offset!");

// Function AnimComponent_SCT.AnimComponent_SCT_C.SetAimingBPI
// 0x0002 (0x0002 - 0x0000)
struct AnimComponent_SCT_C_SetAimingBPI final
{
public:
	bool                                          Aiming;                                            // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         AimType_0;                                         // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(AnimComponent_SCT_C_SetAimingBPI) == 0x000001, "Wrong alignment on AnimComponent_SCT_C_SetAimingBPI");
static_assert(sizeof(AnimComponent_SCT_C_SetAimingBPI) == 0x000002, "Wrong size on AnimComponent_SCT_C_SetAimingBPI");
static_assert(offsetof(AnimComponent_SCT_C_SetAimingBPI, Aiming) == 0x000000, "Member 'AnimComponent_SCT_C_SetAimingBPI::Aiming' has a wrong offset!");
static_assert(offsetof(AnimComponent_SCT_C_SetAimingBPI, AimType_0) == 0x000001, "Member 'AnimComponent_SCT_C_SetAimingBPI::AimType_0' has a wrong offset!");

// Function AnimComponent_SCT.AnimComponent_SCT_C.EnableIKandAimOffsetBPI
// 0x0001 (0x0001 - 0x0000)
struct AnimComponent_SCT_C_EnableIKandAimOffsetBPI final
{
public:
	bool                                          Enable;                                            // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(AnimComponent_SCT_C_EnableIKandAimOffsetBPI) == 0x000001, "Wrong alignment on AnimComponent_SCT_C_EnableIKandAimOffsetBPI");
static_assert(sizeof(AnimComponent_SCT_C_EnableIKandAimOffsetBPI) == 0x000001, "Wrong size on AnimComponent_SCT_C_EnableIKandAimOffsetBPI");
static_assert(offsetof(AnimComponent_SCT_C_EnableIKandAimOffsetBPI, Enable) == 0x000000, "Member 'AnimComponent_SCT_C_EnableIKandAimOffsetBPI::Enable' has a wrong offset!");

// Function AnimComponent_SCT.AnimComponent_SCT_C.MulticastEnableIK
// 0x0001 (0x0001 - 0x0000)
struct AnimComponent_SCT_C_MulticastEnableIK final
{
public:
	bool                                          Enable;                                            // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(AnimComponent_SCT_C_MulticastEnableIK) == 0x000001, "Wrong alignment on AnimComponent_SCT_C_MulticastEnableIK");
static_assert(sizeof(AnimComponent_SCT_C_MulticastEnableIK) == 0x000001, "Wrong size on AnimComponent_SCT_C_MulticastEnableIK");
static_assert(offsetof(AnimComponent_SCT_C_MulticastEnableIK, Enable) == 0x000000, "Member 'AnimComponent_SCT_C_MulticastEnableIK::Enable' has a wrong offset!");

// Function AnimComponent_SCT.AnimComponent_SCT_C.LaunchRagdollBPI
// 0x0018 (0x0018 - 0x0000)
struct AnimComponent_SCT_C_LaunchRagdollBPI final
{
public:
	struct FVector                                TargetLocation;                                    // 0x0000(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Direction_0;                                       // 0x000C(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(AnimComponent_SCT_C_LaunchRagdollBPI) == 0x000004, "Wrong alignment on AnimComponent_SCT_C_LaunchRagdollBPI");
static_assert(sizeof(AnimComponent_SCT_C_LaunchRagdollBPI) == 0x000018, "Wrong size on AnimComponent_SCT_C_LaunchRagdollBPI");
static_assert(offsetof(AnimComponent_SCT_C_LaunchRagdollBPI, TargetLocation) == 0x000000, "Member 'AnimComponent_SCT_C_LaunchRagdollBPI::TargetLocation' has a wrong offset!");
static_assert(offsetof(AnimComponent_SCT_C_LaunchRagdollBPI, Direction_0) == 0x00000C, "Member 'AnimComponent_SCT_C_LaunchRagdollBPI::Direction_0' has a wrong offset!");

// Function AnimComponent_SCT.AnimComponent_SCT_C.CarryingCorpseBPI
// 0x0001 (0x0001 - 0x0000)
struct AnimComponent_SCT_C_CarryingCorpseBPI final
{
public:
	bool                                          InputValue;                                        // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(AnimComponent_SCT_C_CarryingCorpseBPI) == 0x000001, "Wrong alignment on AnimComponent_SCT_C_CarryingCorpseBPI");
static_assert(sizeof(AnimComponent_SCT_C_CarryingCorpseBPI) == 0x000001, "Wrong size on AnimComponent_SCT_C_CarryingCorpseBPI");
static_assert(offsetof(AnimComponent_SCT_C_CarryingCorpseBPI, InputValue) == 0x000000, "Member 'AnimComponent_SCT_C_CarryingCorpseBPI::InputValue' has a wrong offset!");

// Function AnimComponent_SCT.AnimComponent_SCT_C.BeingCarriedCorpseBPI
// 0x0001 (0x0001 - 0x0000)
struct AnimComponent_SCT_C_BeingCarriedCorpseBPI final
{
public:
	bool                                          InputValue;                                        // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(AnimComponent_SCT_C_BeingCarriedCorpseBPI) == 0x000001, "Wrong alignment on AnimComponent_SCT_C_BeingCarriedCorpseBPI");
static_assert(sizeof(AnimComponent_SCT_C_BeingCarriedCorpseBPI) == 0x000001, "Wrong size on AnimComponent_SCT_C_BeingCarriedCorpseBPI");
static_assert(offsetof(AnimComponent_SCT_C_BeingCarriedCorpseBPI, InputValue) == 0x000000, "Member 'AnimComponent_SCT_C_BeingCarriedCorpseBPI::InputValue' has a wrong offset!");

// Function AnimComponent_SCT.AnimComponent_SCT_C.ReceiveTick
// 0x0004 (0x0004 - 0x0000)
struct AnimComponent_SCT_C_ReceiveTick final
{
public:
	float                                         DeltaSeconds;                                      // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(AnimComponent_SCT_C_ReceiveTick) == 0x000004, "Wrong alignment on AnimComponent_SCT_C_ReceiveTick");
static_assert(sizeof(AnimComponent_SCT_C_ReceiveTick) == 0x000004, "Wrong size on AnimComponent_SCT_C_ReceiveTick");
static_assert(offsetof(AnimComponent_SCT_C_ReceiveTick, DeltaSeconds) == 0x000000, "Member 'AnimComponent_SCT_C_ReceiveTick::DeltaSeconds' has a wrong offset!");

// Function AnimComponent_SCT.AnimComponent_SCT_C.AnimNotifyIdleEntryStateBPI
// 0x0001 (0x0001 - 0x0000)
struct AnimComponent_SCT_C_AnimNotifyIdleEntryStateBPI final
{
public:
	EIdleEntryState                               IdleEntryState;                                    // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(AnimComponent_SCT_C_AnimNotifyIdleEntryStateBPI) == 0x000001, "Wrong alignment on AnimComponent_SCT_C_AnimNotifyIdleEntryStateBPI");
static_assert(sizeof(AnimComponent_SCT_C_AnimNotifyIdleEntryStateBPI) == 0x000001, "Wrong size on AnimComponent_SCT_C_AnimNotifyIdleEntryStateBPI");
static_assert(offsetof(AnimComponent_SCT_C_AnimNotifyIdleEntryStateBPI, IdleEntryState) == 0x000000, "Member 'AnimComponent_SCT_C_AnimNotifyIdleEntryStateBPI::IdleEntryState' has a wrong offset!");

// Function AnimComponent_SCT.AnimComponent_SCT_C.AnimNotifyTurnInPlaceBPI
// 0x0010 (0x0010 - 0x0000)
struct AnimComponent_SCT_C_AnimNotifyTurnInPlaceBPI final
{
public:
	class UAnimMontage*                           TurnInPlaceMontage;                                // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ShouldTurnInPlace;                                 // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          TurningInPlace;                                    // 0x0009(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          TurningRight;                                      // 0x000A(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(AnimComponent_SCT_C_AnimNotifyTurnInPlaceBPI) == 0x000008, "Wrong alignment on AnimComponent_SCT_C_AnimNotifyTurnInPlaceBPI");
static_assert(sizeof(AnimComponent_SCT_C_AnimNotifyTurnInPlaceBPI) == 0x000010, "Wrong size on AnimComponent_SCT_C_AnimNotifyTurnInPlaceBPI");
static_assert(offsetof(AnimComponent_SCT_C_AnimNotifyTurnInPlaceBPI, TurnInPlaceMontage) == 0x000000, "Member 'AnimComponent_SCT_C_AnimNotifyTurnInPlaceBPI::TurnInPlaceMontage' has a wrong offset!");
static_assert(offsetof(AnimComponent_SCT_C_AnimNotifyTurnInPlaceBPI, ShouldTurnInPlace) == 0x000008, "Member 'AnimComponent_SCT_C_AnimNotifyTurnInPlaceBPI::ShouldTurnInPlace' has a wrong offset!");
static_assert(offsetof(AnimComponent_SCT_C_AnimNotifyTurnInPlaceBPI, TurningInPlace) == 0x000009, "Member 'AnimComponent_SCT_C_AnimNotifyTurnInPlaceBPI::TurningInPlace' has a wrong offset!");
static_assert(offsetof(AnimComponent_SCT_C_AnimNotifyTurnInPlaceBPI, TurningRight) == 0x00000A, "Member 'AnimComponent_SCT_C_AnimNotifyTurnInPlaceBPI::TurningRight' has a wrong offset!");

// Function AnimComponent_SCT.AnimComponent_SCT_C.AnimNotifyPivotBPI
// 0x0014 (0x0014 - 0x0000)
struct AnimComponent_SCT_C_AnimNotifyPivotBPI final
{
public:
	struct FPivotParams                           PivotParameters;                                   // 0x0000(0x0014)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(AnimComponent_SCT_C_AnimNotifyPivotBPI) == 0x000004, "Wrong alignment on AnimComponent_SCT_C_AnimNotifyPivotBPI");
static_assert(sizeof(AnimComponent_SCT_C_AnimNotifyPivotBPI) == 0x000014, "Wrong size on AnimComponent_SCT_C_AnimNotifyPivotBPI");
static_assert(offsetof(AnimComponent_SCT_C_AnimNotifyPivotBPI, PivotParameters) == 0x000000, "Member 'AnimComponent_SCT_C_AnimNotifyPivotBPI::PivotParameters' has a wrong offset!");

// Function AnimComponent_SCT.AnimComponent_SCT_C.PlayGetUpAnimBPI
// 0x0001 (0x0001 - 0x0000)
struct AnimComponent_SCT_C_PlayGetUpAnimBPI final
{
public:
	bool                                          FaceDown;                                          // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(AnimComponent_SCT_C_PlayGetUpAnimBPI) == 0x000001, "Wrong alignment on AnimComponent_SCT_C_PlayGetUpAnimBPI");
static_assert(sizeof(AnimComponent_SCT_C_PlayGetUpAnimBPI) == 0x000001, "Wrong size on AnimComponent_SCT_C_PlayGetUpAnimBPI");
static_assert(offsetof(AnimComponent_SCT_C_PlayGetUpAnimBPI, FaceDown) == 0x000000, "Member 'AnimComponent_SCT_C_PlayGetUpAnimBPI::FaceDown' has a wrong offset!");

// Function AnimComponent_SCT.AnimComponent_SCT_C.SavePoseSnapshotBPI
// 0x0008 (0x0008 - 0x0000)
struct AnimComponent_SCT_C_SavePoseSnapshotBPI final
{
public:
	class FName                                   PoseName;                                          // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(AnimComponent_SCT_C_SavePoseSnapshotBPI) == 0x000004, "Wrong alignment on AnimComponent_SCT_C_SavePoseSnapshotBPI");
static_assert(sizeof(AnimComponent_SCT_C_SavePoseSnapshotBPI) == 0x000008, "Wrong size on AnimComponent_SCT_C_SavePoseSnapshotBPI");
static_assert(offsetof(AnimComponent_SCT_C_SavePoseSnapshotBPI, PoseName) == 0x000000, "Member 'AnimComponent_SCT_C_SavePoseSnapshotBPI::PoseName' has a wrong offset!");

// Function AnimComponent_SCT.AnimComponent_SCT_C.SetGaitBPI
// 0x0001 (0x0001 - 0x0000)
struct AnimComponent_SCT_C_SetGaitBPI final
{
public:
	EGait                                         NewGait;                                           // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(AnimComponent_SCT_C_SetGaitBPI) == 0x000001, "Wrong alignment on AnimComponent_SCT_C_SetGaitBPI");
static_assert(sizeof(AnimComponent_SCT_C_SetGaitBPI) == 0x000001, "Wrong size on AnimComponent_SCT_C_SetGaitBPI");
static_assert(offsetof(AnimComponent_SCT_C_SetGaitBPI, NewGait) == 0x000000, "Member 'AnimComponent_SCT_C_SetGaitBPI::NewGait' has a wrong offset!");

// Function AnimComponent_SCT.AnimComponent_SCT_C.SetMovementModeBPI
// 0x0001 (0x0001 - 0x0000)
struct AnimComponent_SCT_C_SetMovementModeBPI final
{
public:
	MovementMode::EMovementMode                   NewMovementMode;                                   // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(AnimComponent_SCT_C_SetMovementModeBPI) == 0x000001, "Wrong alignment on AnimComponent_SCT_C_SetMovementModeBPI");
static_assert(sizeof(AnimComponent_SCT_C_SetMovementModeBPI) == 0x000001, "Wrong size on AnimComponent_SCT_C_SetMovementModeBPI");
static_assert(offsetof(AnimComponent_SCT_C_SetMovementModeBPI, NewMovementMode) == 0x000000, "Member 'AnimComponent_SCT_C_SetMovementModeBPI::NewMovementMode' has a wrong offset!");

// Function AnimComponent_SCT.AnimComponent_SCT_C.CalculateEssentialValues
// 0x00D8 (0x00D8 - 0x0000)
struct AnimComponent_SCT_C_CalculateEssentialValues final
{
public:
	float                                         PreviousAimYaw;                                    // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsLocallyControlled_ReturnValue;          // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_NotEqual_VectorVector_ReturnValue;        // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsLocallyControlled_ReturnValue_1;        // 0x0006(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7[0x1];                                        // 0x0007(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               CallFunc_NormalizedDeltaRotator_ReturnValue;       // 0x0008(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_BreakRotator_Roll;                        // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Pitch;                       // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Yaw;                         // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Roll_1;                      // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Pitch_1;                     // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Yaw_1;                       // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue;          // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetWorldDeltaSeconds_ReturnValue;         // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Divide_FloatFloat_ReturnValue;            // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_GetControlRotation_ReturnValue;           // 0x0038(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_BreakRotator_Roll_2;                      // 0x0044(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Pitch_2;                     // 0x0048(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Yaw_2;                       // 0x004C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_NormalizedDeltaRotator_ReturnValue_1;     // 0x0050(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_BreakRotator_Roll_3;                      // 0x005C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Pitch_3;                     // 0x0060(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Yaw_3;                       // 0x0064(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_Conv_VectorToRotator_ReturnValue;         // 0x0068(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_GetLastInputVector_ReturnValue;           // 0x0074(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_NormalizedDeltaRotator_ReturnValue_2;     // 0x0080(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_BreakRotator_Roll_4;                      // 0x008C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Pitch_4;                     // 0x0090(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Yaw_4;                       // 0x0094(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetVelocity_ReturnValue;                  // 0x0098(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_Conv_VectorToRotator_ReturnValue_1;       // 0x00A4(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_GetVelocity_ReturnValue_1;                // 0x00B0(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_X;                            // 0x00BC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y;                            // 0x00C0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z;                            // 0x00C4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue;                   // 0x00C8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_VectorVector_ReturnValue_1;      // 0x00D4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(AnimComponent_SCT_C_CalculateEssentialValues) == 0x000004, "Wrong alignment on AnimComponent_SCT_C_CalculateEssentialValues");
static_assert(sizeof(AnimComponent_SCT_C_CalculateEssentialValues) == 0x0000D8, "Wrong size on AnimComponent_SCT_C_CalculateEssentialValues");
static_assert(offsetof(AnimComponent_SCT_C_CalculateEssentialValues, PreviousAimYaw) == 0x000000, "Member 'AnimComponent_SCT_C_CalculateEssentialValues::PreviousAimYaw' has a wrong offset!");
static_assert(offsetof(AnimComponent_SCT_C_CalculateEssentialValues, CallFunc_IsLocallyControlled_ReturnValue) == 0x000004, "Member 'AnimComponent_SCT_C_CalculateEssentialValues::CallFunc_IsLocallyControlled_ReturnValue' has a wrong offset!");
static_assert(offsetof(AnimComponent_SCT_C_CalculateEssentialValues, CallFunc_NotEqual_VectorVector_ReturnValue) == 0x000005, "Member 'AnimComponent_SCT_C_CalculateEssentialValues::CallFunc_NotEqual_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(AnimComponent_SCT_C_CalculateEssentialValues, CallFunc_IsLocallyControlled_ReturnValue_1) == 0x000006, "Member 'AnimComponent_SCT_C_CalculateEssentialValues::CallFunc_IsLocallyControlled_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(AnimComponent_SCT_C_CalculateEssentialValues, CallFunc_NormalizedDeltaRotator_ReturnValue) == 0x000008, "Member 'AnimComponent_SCT_C_CalculateEssentialValues::CallFunc_NormalizedDeltaRotator_ReturnValue' has a wrong offset!");
static_assert(offsetof(AnimComponent_SCT_C_CalculateEssentialValues, CallFunc_BreakRotator_Roll) == 0x000014, "Member 'AnimComponent_SCT_C_CalculateEssentialValues::CallFunc_BreakRotator_Roll' has a wrong offset!");
static_assert(offsetof(AnimComponent_SCT_C_CalculateEssentialValues, CallFunc_BreakRotator_Pitch) == 0x000018, "Member 'AnimComponent_SCT_C_CalculateEssentialValues::CallFunc_BreakRotator_Pitch' has a wrong offset!");
static_assert(offsetof(AnimComponent_SCT_C_CalculateEssentialValues, CallFunc_BreakRotator_Yaw) == 0x00001C, "Member 'AnimComponent_SCT_C_CalculateEssentialValues::CallFunc_BreakRotator_Yaw' has a wrong offset!");
static_assert(offsetof(AnimComponent_SCT_C_CalculateEssentialValues, CallFunc_BreakRotator_Roll_1) == 0x000020, "Member 'AnimComponent_SCT_C_CalculateEssentialValues::CallFunc_BreakRotator_Roll_1' has a wrong offset!");
static_assert(offsetof(AnimComponent_SCT_C_CalculateEssentialValues, CallFunc_BreakRotator_Pitch_1) == 0x000024, "Member 'AnimComponent_SCT_C_CalculateEssentialValues::CallFunc_BreakRotator_Pitch_1' has a wrong offset!");
static_assert(offsetof(AnimComponent_SCT_C_CalculateEssentialValues, CallFunc_BreakRotator_Yaw_1) == 0x000028, "Member 'AnimComponent_SCT_C_CalculateEssentialValues::CallFunc_BreakRotator_Yaw_1' has a wrong offset!");
static_assert(offsetof(AnimComponent_SCT_C_CalculateEssentialValues, CallFunc_Subtract_FloatFloat_ReturnValue) == 0x00002C, "Member 'AnimComponent_SCT_C_CalculateEssentialValues::CallFunc_Subtract_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(AnimComponent_SCT_C_CalculateEssentialValues, CallFunc_GetWorldDeltaSeconds_ReturnValue) == 0x000030, "Member 'AnimComponent_SCT_C_CalculateEssentialValues::CallFunc_GetWorldDeltaSeconds_ReturnValue' has a wrong offset!");
static_assert(offsetof(AnimComponent_SCT_C_CalculateEssentialValues, CallFunc_Divide_FloatFloat_ReturnValue) == 0x000034, "Member 'AnimComponent_SCT_C_CalculateEssentialValues::CallFunc_Divide_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(AnimComponent_SCT_C_CalculateEssentialValues, CallFunc_GetControlRotation_ReturnValue) == 0x000038, "Member 'AnimComponent_SCT_C_CalculateEssentialValues::CallFunc_GetControlRotation_ReturnValue' has a wrong offset!");
static_assert(offsetof(AnimComponent_SCT_C_CalculateEssentialValues, CallFunc_BreakRotator_Roll_2) == 0x000044, "Member 'AnimComponent_SCT_C_CalculateEssentialValues::CallFunc_BreakRotator_Roll_2' has a wrong offset!");
static_assert(offsetof(AnimComponent_SCT_C_CalculateEssentialValues, CallFunc_BreakRotator_Pitch_2) == 0x000048, "Member 'AnimComponent_SCT_C_CalculateEssentialValues::CallFunc_BreakRotator_Pitch_2' has a wrong offset!");
static_assert(offsetof(AnimComponent_SCT_C_CalculateEssentialValues, CallFunc_BreakRotator_Yaw_2) == 0x00004C, "Member 'AnimComponent_SCT_C_CalculateEssentialValues::CallFunc_BreakRotator_Yaw_2' has a wrong offset!");
static_assert(offsetof(AnimComponent_SCT_C_CalculateEssentialValues, CallFunc_NormalizedDeltaRotator_ReturnValue_1) == 0x000050, "Member 'AnimComponent_SCT_C_CalculateEssentialValues::CallFunc_NormalizedDeltaRotator_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(AnimComponent_SCT_C_CalculateEssentialValues, CallFunc_BreakRotator_Roll_3) == 0x00005C, "Member 'AnimComponent_SCT_C_CalculateEssentialValues::CallFunc_BreakRotator_Roll_3' has a wrong offset!");
static_assert(offsetof(AnimComponent_SCT_C_CalculateEssentialValues, CallFunc_BreakRotator_Pitch_3) == 0x000060, "Member 'AnimComponent_SCT_C_CalculateEssentialValues::CallFunc_BreakRotator_Pitch_3' has a wrong offset!");
static_assert(offsetof(AnimComponent_SCT_C_CalculateEssentialValues, CallFunc_BreakRotator_Yaw_3) == 0x000064, "Member 'AnimComponent_SCT_C_CalculateEssentialValues::CallFunc_BreakRotator_Yaw_3' has a wrong offset!");
static_assert(offsetof(AnimComponent_SCT_C_CalculateEssentialValues, CallFunc_Conv_VectorToRotator_ReturnValue) == 0x000068, "Member 'AnimComponent_SCT_C_CalculateEssentialValues::CallFunc_Conv_VectorToRotator_ReturnValue' has a wrong offset!");
static_assert(offsetof(AnimComponent_SCT_C_CalculateEssentialValues, CallFunc_GetLastInputVector_ReturnValue) == 0x000074, "Member 'AnimComponent_SCT_C_CalculateEssentialValues::CallFunc_GetLastInputVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(AnimComponent_SCT_C_CalculateEssentialValues, CallFunc_NormalizedDeltaRotator_ReturnValue_2) == 0x000080, "Member 'AnimComponent_SCT_C_CalculateEssentialValues::CallFunc_NormalizedDeltaRotator_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(AnimComponent_SCT_C_CalculateEssentialValues, CallFunc_BreakRotator_Roll_4) == 0x00008C, "Member 'AnimComponent_SCT_C_CalculateEssentialValues::CallFunc_BreakRotator_Roll_4' has a wrong offset!");
static_assert(offsetof(AnimComponent_SCT_C_CalculateEssentialValues, CallFunc_BreakRotator_Pitch_4) == 0x000090, "Member 'AnimComponent_SCT_C_CalculateEssentialValues::CallFunc_BreakRotator_Pitch_4' has a wrong offset!");
static_assert(offsetof(AnimComponent_SCT_C_CalculateEssentialValues, CallFunc_BreakRotator_Yaw_4) == 0x000094, "Member 'AnimComponent_SCT_C_CalculateEssentialValues::CallFunc_BreakRotator_Yaw_4' has a wrong offset!");
static_assert(offsetof(AnimComponent_SCT_C_CalculateEssentialValues, CallFunc_GetVelocity_ReturnValue) == 0x000098, "Member 'AnimComponent_SCT_C_CalculateEssentialValues::CallFunc_GetVelocity_ReturnValue' has a wrong offset!");
static_assert(offsetof(AnimComponent_SCT_C_CalculateEssentialValues, CallFunc_Conv_VectorToRotator_ReturnValue_1) == 0x0000A4, "Member 'AnimComponent_SCT_C_CalculateEssentialValues::CallFunc_Conv_VectorToRotator_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(AnimComponent_SCT_C_CalculateEssentialValues, CallFunc_GetVelocity_ReturnValue_1) == 0x0000B0, "Member 'AnimComponent_SCT_C_CalculateEssentialValues::CallFunc_GetVelocity_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(AnimComponent_SCT_C_CalculateEssentialValues, CallFunc_BreakVector_X) == 0x0000BC, "Member 'AnimComponent_SCT_C_CalculateEssentialValues::CallFunc_BreakVector_X' has a wrong offset!");
static_assert(offsetof(AnimComponent_SCT_C_CalculateEssentialValues, CallFunc_BreakVector_Y) == 0x0000C0, "Member 'AnimComponent_SCT_C_CalculateEssentialValues::CallFunc_BreakVector_Y' has a wrong offset!");
static_assert(offsetof(AnimComponent_SCT_C_CalculateEssentialValues, CallFunc_BreakVector_Z) == 0x0000C4, "Member 'AnimComponent_SCT_C_CalculateEssentialValues::CallFunc_BreakVector_Z' has a wrong offset!");
static_assert(offsetof(AnimComponent_SCT_C_CalculateEssentialValues, CallFunc_MakeVector_ReturnValue) == 0x0000C8, "Member 'AnimComponent_SCT_C_CalculateEssentialValues::CallFunc_MakeVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(AnimComponent_SCT_C_CalculateEssentialValues, CallFunc_NotEqual_VectorVector_ReturnValue_1) == 0x0000D4, "Member 'AnimComponent_SCT_C_CalculateEssentialValues::CallFunc_NotEqual_VectorVector_ReturnValue_1' has a wrong offset!");

// Function AnimComponent_SCT.AnimComponent_SCT_C.UpdateCharacterMovementSettings
// 0x000C (0x000C - 0x0000)
struct AnimComponent_SCT_C_UpdateCharacterMovementSettings final
{
public:
	float                                         CallFunc_ChooseMaxAcceleration_MaxAcceleration;    // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_ChooseMaxWalkSpeed_MaxWalkSpeed;          // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_ChooseBrakingDeceleration_MaxBrakingDeceleration; // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(AnimComponent_SCT_C_UpdateCharacterMovementSettings) == 0x000004, "Wrong alignment on AnimComponent_SCT_C_UpdateCharacterMovementSettings");
static_assert(sizeof(AnimComponent_SCT_C_UpdateCharacterMovementSettings) == 0x00000C, "Wrong size on AnimComponent_SCT_C_UpdateCharacterMovementSettings");
static_assert(offsetof(AnimComponent_SCT_C_UpdateCharacterMovementSettings, CallFunc_ChooseMaxAcceleration_MaxAcceleration) == 0x000000, "Member 'AnimComponent_SCT_C_UpdateCharacterMovementSettings::CallFunc_ChooseMaxAcceleration_MaxAcceleration' has a wrong offset!");
static_assert(offsetof(AnimComponent_SCT_C_UpdateCharacterMovementSettings, CallFunc_ChooseMaxWalkSpeed_MaxWalkSpeed) == 0x000004, "Member 'AnimComponent_SCT_C_UpdateCharacterMovementSettings::CallFunc_ChooseMaxWalkSpeed_MaxWalkSpeed' has a wrong offset!");
static_assert(offsetof(AnimComponent_SCT_C_UpdateCharacterMovementSettings, CallFunc_ChooseBrakingDeceleration_MaxBrakingDeceleration) == 0x000008, "Member 'AnimComponent_SCT_C_UpdateCharacterMovementSettings::CallFunc_ChooseBrakingDeceleration_MaxBrakingDeceleration' has a wrong offset!");

// Function AnimComponent_SCT.AnimComponent_SCT_C.ChooseMaxWalkSpeed
// 0x0014 (0x0014 - 0x0000)
struct AnimComponent_SCT_C_ChooseMaxWalkSpeed final
{
public:
	float                                         MaxWalkSpeed;                                      // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Add_FloatFloat_ReturnValue;               // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue;          // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum_CmpSuccess_1;                    // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_SwitchEnum_CmpSuccess_2;                    // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_SwitchEnum_CmpSuccess_3;                    // 0x0012(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(AnimComponent_SCT_C_ChooseMaxWalkSpeed) == 0x000004, "Wrong alignment on AnimComponent_SCT_C_ChooseMaxWalkSpeed");
static_assert(sizeof(AnimComponent_SCT_C_ChooseMaxWalkSpeed) == 0x000014, "Wrong size on AnimComponent_SCT_C_ChooseMaxWalkSpeed");
static_assert(offsetof(AnimComponent_SCT_C_ChooseMaxWalkSpeed, MaxWalkSpeed) == 0x000000, "Member 'AnimComponent_SCT_C_ChooseMaxWalkSpeed::MaxWalkSpeed' has a wrong offset!");
static_assert(offsetof(AnimComponent_SCT_C_ChooseMaxWalkSpeed, K2Node_SwitchEnum_CmpSuccess) == 0x000004, "Member 'AnimComponent_SCT_C_ChooseMaxWalkSpeed::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");
static_assert(offsetof(AnimComponent_SCT_C_ChooseMaxWalkSpeed, CallFunc_Add_FloatFloat_ReturnValue) == 0x000008, "Member 'AnimComponent_SCT_C_ChooseMaxWalkSpeed::CallFunc_Add_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(AnimComponent_SCT_C_ChooseMaxWalkSpeed, CallFunc_Subtract_FloatFloat_ReturnValue) == 0x00000C, "Member 'AnimComponent_SCT_C_ChooseMaxWalkSpeed::CallFunc_Subtract_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(AnimComponent_SCT_C_ChooseMaxWalkSpeed, K2Node_SwitchEnum_CmpSuccess_1) == 0x000010, "Member 'AnimComponent_SCT_C_ChooseMaxWalkSpeed::K2Node_SwitchEnum_CmpSuccess_1' has a wrong offset!");
static_assert(offsetof(AnimComponent_SCT_C_ChooseMaxWalkSpeed, K2Node_SwitchEnum_CmpSuccess_2) == 0x000011, "Member 'AnimComponent_SCT_C_ChooseMaxWalkSpeed::K2Node_SwitchEnum_CmpSuccess_2' has a wrong offset!");
static_assert(offsetof(AnimComponent_SCT_C_ChooseMaxWalkSpeed, K2Node_SwitchEnum_CmpSuccess_3) == 0x000012, "Member 'AnimComponent_SCT_C_ChooseMaxWalkSpeed::K2Node_SwitchEnum_CmpSuccess_3' has a wrong offset!");

// Function AnimComponent_SCT.AnimComponent_SCT_C.ChooseMaxAcceleration
// 0x0008 (0x0008 - 0x0000)
struct AnimComponent_SCT_C_ChooseMaxAcceleration final
{
public:
	float                                         MaxAcceleration;                                   // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(AnimComponent_SCT_C_ChooseMaxAcceleration) == 0x000004, "Wrong alignment on AnimComponent_SCT_C_ChooseMaxAcceleration");
static_assert(sizeof(AnimComponent_SCT_C_ChooseMaxAcceleration) == 0x000008, "Wrong size on AnimComponent_SCT_C_ChooseMaxAcceleration");
static_assert(offsetof(AnimComponent_SCT_C_ChooseMaxAcceleration, MaxAcceleration) == 0x000000, "Member 'AnimComponent_SCT_C_ChooseMaxAcceleration::MaxAcceleration' has a wrong offset!");
static_assert(offsetof(AnimComponent_SCT_C_ChooseMaxAcceleration, K2Node_SwitchEnum_CmpSuccess) == 0x000004, "Member 'AnimComponent_SCT_C_ChooseMaxAcceleration::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");

// Function AnimComponent_SCT.AnimComponent_SCT_C.ChooseBrakingDeceleration
// 0x0008 (0x0008 - 0x0000)
struct AnimComponent_SCT_C_ChooseBrakingDeceleration final
{
public:
	float                                         MaxBrakingDeceleration;                            // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(AnimComponent_SCT_C_ChooseBrakingDeceleration) == 0x000004, "Wrong alignment on AnimComponent_SCT_C_ChooseBrakingDeceleration");
static_assert(sizeof(AnimComponent_SCT_C_ChooseBrakingDeceleration) == 0x000008, "Wrong size on AnimComponent_SCT_C_ChooseBrakingDeceleration");
static_assert(offsetof(AnimComponent_SCT_C_ChooseBrakingDeceleration, MaxBrakingDeceleration) == 0x000000, "Member 'AnimComponent_SCT_C_ChooseBrakingDeceleration::MaxBrakingDeceleration' has a wrong offset!");
static_assert(offsetof(AnimComponent_SCT_C_ChooseBrakingDeceleration, K2Node_SwitchEnum_CmpSuccess) == 0x000004, "Member 'AnimComponent_SCT_C_ChooseBrakingDeceleration::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");

// Function AnimComponent_SCT.AnimComponent_SCT_C.ChooseGroundFriction
// 0x0008 (0x0008 - 0x0000)
struct AnimComponent_SCT_C_ChooseGroundFriction final
{
public:
	float                                         GroundFriction;                                    // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(AnimComponent_SCT_C_ChooseGroundFriction) == 0x000004, "Wrong alignment on AnimComponent_SCT_C_ChooseGroundFriction");
static_assert(sizeof(AnimComponent_SCT_C_ChooseGroundFriction) == 0x000008, "Wrong size on AnimComponent_SCT_C_ChooseGroundFriction");
static_assert(offsetof(AnimComponent_SCT_C_ChooseGroundFriction, GroundFriction) == 0x000000, "Member 'AnimComponent_SCT_C_ChooseGroundFriction::GroundFriction' has a wrong offset!");
static_assert(offsetof(AnimComponent_SCT_C_ChooseGroundFriction, K2Node_SwitchEnum_CmpSuccess) == 0x000004, "Member 'AnimComponent_SCT_C_ChooseGroundFriction::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");

// Function AnimComponent_SCT.AnimComponent_SCT_C.CanSprint
// 0x0002 (0x0002 - 0x0000)
struct AnimComponent_SCT_C_CanSprint final
{
public:
	bool                                          CanSprint_0;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(AnimComponent_SCT_C_CanSprint) == 0x000001, "Wrong alignment on AnimComponent_SCT_C_CanSprint");
static_assert(sizeof(AnimComponent_SCT_C_CanSprint) == 0x000002, "Wrong size on AnimComponent_SCT_C_CanSprint");
static_assert(offsetof(AnimComponent_SCT_C_CanSprint, CanSprint_0) == 0x000000, "Member 'AnimComponent_SCT_C_CanSprint::CanSprint_0' has a wrong offset!");
static_assert(offsetof(AnimComponent_SCT_C_CanSprint, K2Node_SwitchEnum_CmpSuccess) == 0x000001, "Member 'AnimComponent_SCT_C_CanSprint::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");

// Function AnimComponent_SCT.AnimComponent_SCT_C.LookingDirectionWithOffset
// 0x00E0 (0x00E0 - 0x0000)
struct AnimComponent_SCT_C_LookingDirectionWithOffset final
{
public:
	float                                         OffsetInterpSpeed;                                 // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         NEAngle;                                           // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         NWAngle;                                           // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         SEAngle;                                           // 0x000C(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         SWAngle;                                           // 0x0010(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Buffer;                                            // 0x0014(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               TargetRotation_0;                                  // 0x0018(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_Add_FloatFloat_ReturnValue;               // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue;          // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue_1;             // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue_1;        // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue_2;             // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue_2;        // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue_3;             // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue_3;        // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue_4;             // 0x0044(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue_4;        // 0x0048(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue_5;             // 0x004C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue_5;        // 0x0050(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0054(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ECardinalDirection                            Temp_byte_Variable;                                // 0x0055(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_1;                              // 0x0056(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_57[0x1];                                       // 0x0057(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Temp_float_Variable;                               // 0x0058(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_2;                              // 0x005C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	EGait                                         Temp_byte_Variable_1;                              // 0x005D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_3;                              // 0x005E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         CallFunc_MakeLiteralByte_ReturnValue;              // 0x005F(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x0060(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         CallFunc_MakeLiteralByte_ReturnValue_1;            // 0x0061(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_1;        // 0x0062(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_4;                              // 0x0063(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         CallFunc_MakeLiteralByte_ReturnValue_2;            // 0x0064(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_2;        // 0x0065(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_66[0x2];                                       // 0x0066(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               K2Node_Select_Default;                             // 0x0068(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_GetWorldDeltaSeconds_ReturnValue;         // 0x0074(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_NormalizedDeltaRotator_ReturnValue;       // 0x0078(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_BreakRotator_Roll;                        // 0x0084(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Pitch;                       // 0x0088(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Yaw;                         // 0x008C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Roll_1;                      // 0x0090(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Pitch_1;                     // 0x0094(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Yaw_1;                       // 0x0098(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_InRange_FloatFloat_ReturnValue;           // 0x009C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9D[0x3];                                       // 0x009D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Add_FloatFloat_ReturnValue_6;             // 0x00A0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_InRange_FloatFloat_ReturnValue_1;         // 0x00A4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_A5[0x3];                                       // 0x00A5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               CallFunc_MakeRotator_ReturnValue;                  // 0x00A8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_Select_Default_1;                           // 0x00B4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_InRange_FloatFloat_ReturnValue_2;         // 0x00B5(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_InRange_FloatFloat_ReturnValue_3;         // 0x00B6(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_InRange_FloatFloat_ReturnValue_4;         // 0x00B7(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_Select_Default_2;                           // 0x00B8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_InRange_FloatFloat_ReturnValue_5;         // 0x00B9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_Select_Default_3;                           // 0x00BA(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue;           // 0x00BB(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_Add_FloatFloat_ReturnValue_7;             // 0x00BC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue_6;        // 0x00C0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue_8;             // 0x00C4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_SelectFloat_ReturnValue;                  // 0x00C8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue_7;        // 0x00CC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Select_Default_4;                           // 0x00D0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Select_Default_5;                           // 0x00D4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Select_Default_6;                           // 0x00D8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_FInterpTo_ReturnValue;                    // 0x00DC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(AnimComponent_SCT_C_LookingDirectionWithOffset) == 0x000004, "Wrong alignment on AnimComponent_SCT_C_LookingDirectionWithOffset");
static_assert(sizeof(AnimComponent_SCT_C_LookingDirectionWithOffset) == 0x0000E0, "Wrong size on AnimComponent_SCT_C_LookingDirectionWithOffset");
static_assert(offsetof(AnimComponent_SCT_C_LookingDirectionWithOffset, OffsetInterpSpeed) == 0x000000, "Member 'AnimComponent_SCT_C_LookingDirectionWithOffset::OffsetInterpSpeed' has a wrong offset!");
static_assert(offsetof(AnimComponent_SCT_C_LookingDirectionWithOffset, NEAngle) == 0x000004, "Member 'AnimComponent_SCT_C_LookingDirectionWithOffset::NEAngle' has a wrong offset!");
static_assert(offsetof(AnimComponent_SCT_C_LookingDirectionWithOffset, NWAngle) == 0x000008, "Member 'AnimComponent_SCT_C_LookingDirectionWithOffset::NWAngle' has a wrong offset!");
static_assert(offsetof(AnimComponent_SCT_C_LookingDirectionWithOffset, SEAngle) == 0x00000C, "Member 'AnimComponent_SCT_C_LookingDirectionWithOffset::SEAngle' has a wrong offset!");
static_assert(offsetof(AnimComponent_SCT_C_LookingDirectionWithOffset, SWAngle) == 0x000010, "Member 'AnimComponent_SCT_C_LookingDirectionWithOffset::SWAngle' has a wrong offset!");
static_assert(offsetof(AnimComponent_SCT_C_LookingDirectionWithOffset, Buffer) == 0x000014, "Member 'AnimComponent_SCT_C_LookingDirectionWithOffset::Buffer' has a wrong offset!");
static_assert(offsetof(AnimComponent_SCT_C_LookingDirectionWithOffset, TargetRotation_0) == 0x000018, "Member 'AnimComponent_SCT_C_LookingDirectionWithOffset::TargetRotation_0' has a wrong offset!");
static_assert(offsetof(AnimComponent_SCT_C_LookingDirectionWithOffset, CallFunc_Add_FloatFloat_ReturnValue) == 0x000024, "Member 'AnimComponent_SCT_C_LookingDirectionWithOffset::CallFunc_Add_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(AnimComponent_SCT_C_LookingDirectionWithOffset, CallFunc_Subtract_FloatFloat_ReturnValue) == 0x000028, "Member 'AnimComponent_SCT_C_LookingDirectionWithOffset::CallFunc_Subtract_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(AnimComponent_SCT_C_LookingDirectionWithOffset, CallFunc_Add_FloatFloat_ReturnValue_1) == 0x00002C, "Member 'AnimComponent_SCT_C_LookingDirectionWithOffset::CallFunc_Add_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(AnimComponent_SCT_C_LookingDirectionWithOffset, CallFunc_Subtract_FloatFloat_ReturnValue_1) == 0x000030, "Member 'AnimComponent_SCT_C_LookingDirectionWithOffset::CallFunc_Subtract_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(AnimComponent_SCT_C_LookingDirectionWithOffset, CallFunc_Add_FloatFloat_ReturnValue_2) == 0x000034, "Member 'AnimComponent_SCT_C_LookingDirectionWithOffset::CallFunc_Add_FloatFloat_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(AnimComponent_SCT_C_LookingDirectionWithOffset, CallFunc_Subtract_FloatFloat_ReturnValue_2) == 0x000038, "Member 'AnimComponent_SCT_C_LookingDirectionWithOffset::CallFunc_Subtract_FloatFloat_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(AnimComponent_SCT_C_LookingDirectionWithOffset, CallFunc_Add_FloatFloat_ReturnValue_3) == 0x00003C, "Member 'AnimComponent_SCT_C_LookingDirectionWithOffset::CallFunc_Add_FloatFloat_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(AnimComponent_SCT_C_LookingDirectionWithOffset, CallFunc_Subtract_FloatFloat_ReturnValue_3) == 0x000040, "Member 'AnimComponent_SCT_C_LookingDirectionWithOffset::CallFunc_Subtract_FloatFloat_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(AnimComponent_SCT_C_LookingDirectionWithOffset, CallFunc_Add_FloatFloat_ReturnValue_4) == 0x000044, "Member 'AnimComponent_SCT_C_LookingDirectionWithOffset::CallFunc_Add_FloatFloat_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(AnimComponent_SCT_C_LookingDirectionWithOffset, CallFunc_Subtract_FloatFloat_ReturnValue_4) == 0x000048, "Member 'AnimComponent_SCT_C_LookingDirectionWithOffset::CallFunc_Subtract_FloatFloat_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(AnimComponent_SCT_C_LookingDirectionWithOffset, CallFunc_Add_FloatFloat_ReturnValue_5) == 0x00004C, "Member 'AnimComponent_SCT_C_LookingDirectionWithOffset::CallFunc_Add_FloatFloat_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(AnimComponent_SCT_C_LookingDirectionWithOffset, CallFunc_Subtract_FloatFloat_ReturnValue_5) == 0x000050, "Member 'AnimComponent_SCT_C_LookingDirectionWithOffset::CallFunc_Subtract_FloatFloat_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(AnimComponent_SCT_C_LookingDirectionWithOffset, Temp_bool_Variable) == 0x000054, "Member 'AnimComponent_SCT_C_LookingDirectionWithOffset::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(AnimComponent_SCT_C_LookingDirectionWithOffset, Temp_byte_Variable) == 0x000055, "Member 'AnimComponent_SCT_C_LookingDirectionWithOffset::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(AnimComponent_SCT_C_LookingDirectionWithOffset, Temp_bool_Variable_1) == 0x000056, "Member 'AnimComponent_SCT_C_LookingDirectionWithOffset::Temp_bool_Variable_1' has a wrong offset!");
static_assert(offsetof(AnimComponent_SCT_C_LookingDirectionWithOffset, Temp_float_Variable) == 0x000058, "Member 'AnimComponent_SCT_C_LookingDirectionWithOffset::Temp_float_Variable' has a wrong offset!");
static_assert(offsetof(AnimComponent_SCT_C_LookingDirectionWithOffset, Temp_bool_Variable_2) == 0x00005C, "Member 'AnimComponent_SCT_C_LookingDirectionWithOffset::Temp_bool_Variable_2' has a wrong offset!");
static_assert(offsetof(AnimComponent_SCT_C_LookingDirectionWithOffset, Temp_byte_Variable_1) == 0x00005D, "Member 'AnimComponent_SCT_C_LookingDirectionWithOffset::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(AnimComponent_SCT_C_LookingDirectionWithOffset, Temp_bool_Variable_3) == 0x00005E, "Member 'AnimComponent_SCT_C_LookingDirectionWithOffset::Temp_bool_Variable_3' has a wrong offset!");
static_assert(offsetof(AnimComponent_SCT_C_LookingDirectionWithOffset, CallFunc_MakeLiteralByte_ReturnValue) == 0x00005F, "Member 'AnimComponent_SCT_C_LookingDirectionWithOffset::CallFunc_MakeLiteralByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(AnimComponent_SCT_C_LookingDirectionWithOffset, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x000060, "Member 'AnimComponent_SCT_C_LookingDirectionWithOffset::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(AnimComponent_SCT_C_LookingDirectionWithOffset, CallFunc_MakeLiteralByte_ReturnValue_1) == 0x000061, "Member 'AnimComponent_SCT_C_LookingDirectionWithOffset::CallFunc_MakeLiteralByte_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(AnimComponent_SCT_C_LookingDirectionWithOffset, CallFunc_EqualEqual_ByteByte_ReturnValue_1) == 0x000062, "Member 'AnimComponent_SCT_C_LookingDirectionWithOffset::CallFunc_EqualEqual_ByteByte_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(AnimComponent_SCT_C_LookingDirectionWithOffset, Temp_bool_Variable_4) == 0x000063, "Member 'AnimComponent_SCT_C_LookingDirectionWithOffset::Temp_bool_Variable_4' has a wrong offset!");
static_assert(offsetof(AnimComponent_SCT_C_LookingDirectionWithOffset, CallFunc_MakeLiteralByte_ReturnValue_2) == 0x000064, "Member 'AnimComponent_SCT_C_LookingDirectionWithOffset::CallFunc_MakeLiteralByte_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(AnimComponent_SCT_C_LookingDirectionWithOffset, CallFunc_EqualEqual_ByteByte_ReturnValue_2) == 0x000065, "Member 'AnimComponent_SCT_C_LookingDirectionWithOffset::CallFunc_EqualEqual_ByteByte_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(AnimComponent_SCT_C_LookingDirectionWithOffset, K2Node_Select_Default) == 0x000068, "Member 'AnimComponent_SCT_C_LookingDirectionWithOffset::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(AnimComponent_SCT_C_LookingDirectionWithOffset, CallFunc_GetWorldDeltaSeconds_ReturnValue) == 0x000074, "Member 'AnimComponent_SCT_C_LookingDirectionWithOffset::CallFunc_GetWorldDeltaSeconds_ReturnValue' has a wrong offset!");
static_assert(offsetof(AnimComponent_SCT_C_LookingDirectionWithOffset, CallFunc_NormalizedDeltaRotator_ReturnValue) == 0x000078, "Member 'AnimComponent_SCT_C_LookingDirectionWithOffset::CallFunc_NormalizedDeltaRotator_ReturnValue' has a wrong offset!");
static_assert(offsetof(AnimComponent_SCT_C_LookingDirectionWithOffset, CallFunc_BreakRotator_Roll) == 0x000084, "Member 'AnimComponent_SCT_C_LookingDirectionWithOffset::CallFunc_BreakRotator_Roll' has a wrong offset!");
static_assert(offsetof(AnimComponent_SCT_C_LookingDirectionWithOffset, CallFunc_BreakRotator_Pitch) == 0x000088, "Member 'AnimComponent_SCT_C_LookingDirectionWithOffset::CallFunc_BreakRotator_Pitch' has a wrong offset!");
static_assert(offsetof(AnimComponent_SCT_C_LookingDirectionWithOffset, CallFunc_BreakRotator_Yaw) == 0x00008C, "Member 'AnimComponent_SCT_C_LookingDirectionWithOffset::CallFunc_BreakRotator_Yaw' has a wrong offset!");
static_assert(offsetof(AnimComponent_SCT_C_LookingDirectionWithOffset, CallFunc_BreakRotator_Roll_1) == 0x000090, "Member 'AnimComponent_SCT_C_LookingDirectionWithOffset::CallFunc_BreakRotator_Roll_1' has a wrong offset!");
static_assert(offsetof(AnimComponent_SCT_C_LookingDirectionWithOffset, CallFunc_BreakRotator_Pitch_1) == 0x000094, "Member 'AnimComponent_SCT_C_LookingDirectionWithOffset::CallFunc_BreakRotator_Pitch_1' has a wrong offset!");
static_assert(offsetof(AnimComponent_SCT_C_LookingDirectionWithOffset, CallFunc_BreakRotator_Yaw_1) == 0x000098, "Member 'AnimComponent_SCT_C_LookingDirectionWithOffset::CallFunc_BreakRotator_Yaw_1' has a wrong offset!");
static_assert(offsetof(AnimComponent_SCT_C_LookingDirectionWithOffset, CallFunc_InRange_FloatFloat_ReturnValue) == 0x00009C, "Member 'AnimComponent_SCT_C_LookingDirectionWithOffset::CallFunc_InRange_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(AnimComponent_SCT_C_LookingDirectionWithOffset, CallFunc_Add_FloatFloat_ReturnValue_6) == 0x0000A0, "Member 'AnimComponent_SCT_C_LookingDirectionWithOffset::CallFunc_Add_FloatFloat_ReturnValue_6' has a wrong offset!");
static_assert(offsetof(AnimComponent_SCT_C_LookingDirectionWithOffset, CallFunc_InRange_FloatFloat_ReturnValue_1) == 0x0000A4, "Member 'AnimComponent_SCT_C_LookingDirectionWithOffset::CallFunc_InRange_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(AnimComponent_SCT_C_LookingDirectionWithOffset, CallFunc_MakeRotator_ReturnValue) == 0x0000A8, "Member 'AnimComponent_SCT_C_LookingDirectionWithOffset::CallFunc_MakeRotator_ReturnValue' has a wrong offset!");
static_assert(offsetof(AnimComponent_SCT_C_LookingDirectionWithOffset, K2Node_Select_Default_1) == 0x0000B4, "Member 'AnimComponent_SCT_C_LookingDirectionWithOffset::K2Node_Select_Default_1' has a wrong offset!");
static_assert(offsetof(AnimComponent_SCT_C_LookingDirectionWithOffset, CallFunc_InRange_FloatFloat_ReturnValue_2) == 0x0000B5, "Member 'AnimComponent_SCT_C_LookingDirectionWithOffset::CallFunc_InRange_FloatFloat_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(AnimComponent_SCT_C_LookingDirectionWithOffset, CallFunc_InRange_FloatFloat_ReturnValue_3) == 0x0000B6, "Member 'AnimComponent_SCT_C_LookingDirectionWithOffset::CallFunc_InRange_FloatFloat_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(AnimComponent_SCT_C_LookingDirectionWithOffset, CallFunc_InRange_FloatFloat_ReturnValue_4) == 0x0000B7, "Member 'AnimComponent_SCT_C_LookingDirectionWithOffset::CallFunc_InRange_FloatFloat_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(AnimComponent_SCT_C_LookingDirectionWithOffset, K2Node_Select_Default_2) == 0x0000B8, "Member 'AnimComponent_SCT_C_LookingDirectionWithOffset::K2Node_Select_Default_2' has a wrong offset!");
static_assert(offsetof(AnimComponent_SCT_C_LookingDirectionWithOffset, CallFunc_InRange_FloatFloat_ReturnValue_5) == 0x0000B9, "Member 'AnimComponent_SCT_C_LookingDirectionWithOffset::CallFunc_InRange_FloatFloat_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(AnimComponent_SCT_C_LookingDirectionWithOffset, K2Node_Select_Default_3) == 0x0000BA, "Member 'AnimComponent_SCT_C_LookingDirectionWithOffset::K2Node_Select_Default_3' has a wrong offset!");
static_assert(offsetof(AnimComponent_SCT_C_LookingDirectionWithOffset, CallFunc_Greater_FloatFloat_ReturnValue) == 0x0000BB, "Member 'AnimComponent_SCT_C_LookingDirectionWithOffset::CallFunc_Greater_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(AnimComponent_SCT_C_LookingDirectionWithOffset, CallFunc_Add_FloatFloat_ReturnValue_7) == 0x0000BC, "Member 'AnimComponent_SCT_C_LookingDirectionWithOffset::CallFunc_Add_FloatFloat_ReturnValue_7' has a wrong offset!");
static_assert(offsetof(AnimComponent_SCT_C_LookingDirectionWithOffset, CallFunc_Subtract_FloatFloat_ReturnValue_6) == 0x0000C0, "Member 'AnimComponent_SCT_C_LookingDirectionWithOffset::CallFunc_Subtract_FloatFloat_ReturnValue_6' has a wrong offset!");
static_assert(offsetof(AnimComponent_SCT_C_LookingDirectionWithOffset, CallFunc_Add_FloatFloat_ReturnValue_8) == 0x0000C4, "Member 'AnimComponent_SCT_C_LookingDirectionWithOffset::CallFunc_Add_FloatFloat_ReturnValue_8' has a wrong offset!");
static_assert(offsetof(AnimComponent_SCT_C_LookingDirectionWithOffset, CallFunc_SelectFloat_ReturnValue) == 0x0000C8, "Member 'AnimComponent_SCT_C_LookingDirectionWithOffset::CallFunc_SelectFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(AnimComponent_SCT_C_LookingDirectionWithOffset, CallFunc_Subtract_FloatFloat_ReturnValue_7) == 0x0000CC, "Member 'AnimComponent_SCT_C_LookingDirectionWithOffset::CallFunc_Subtract_FloatFloat_ReturnValue_7' has a wrong offset!");
static_assert(offsetof(AnimComponent_SCT_C_LookingDirectionWithOffset, K2Node_Select_Default_4) == 0x0000D0, "Member 'AnimComponent_SCT_C_LookingDirectionWithOffset::K2Node_Select_Default_4' has a wrong offset!");
static_assert(offsetof(AnimComponent_SCT_C_LookingDirectionWithOffset, K2Node_Select_Default_5) == 0x0000D4, "Member 'AnimComponent_SCT_C_LookingDirectionWithOffset::K2Node_Select_Default_5' has a wrong offset!");
static_assert(offsetof(AnimComponent_SCT_C_LookingDirectionWithOffset, K2Node_Select_Default_6) == 0x0000D8, "Member 'AnimComponent_SCT_C_LookingDirectionWithOffset::K2Node_Select_Default_6' has a wrong offset!");
static_assert(offsetof(AnimComponent_SCT_C_LookingDirectionWithOffset, CallFunc_FInterpTo_ReturnValue) == 0x0000DC, "Member 'AnimComponent_SCT_C_LookingDirectionWithOffset::CallFunc_FInterpTo_ReturnValue' has a wrong offset!");

// Function AnimComponent_SCT.AnimComponent_SCT_C.SetCharacterRotation
// 0x0044 (0x0044 - 0x0000)
struct AnimComponent_SCT_C_SetCharacterRotation final
{
public:
	struct FRotator                               TargetRotation_0;                                  // 0x0000(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          InterpRotation;                                    // 0x000C(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         InterpSpeed;                                       // 0x0010(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_FloatFloat_ReturnValue;          // 0x0014(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetWorldDeltaSeconds_ReturnValue;         // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_K2_SetActorRotation_ReturnValue;          // 0x001C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               CallFunc_RInterpTo_ReturnValue;                    // 0x0020(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FRotator                               CallFunc_NormalizedDeltaRotator_ReturnValue;       // 0x002C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_BreakRotator_Roll;                        // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Pitch;                       // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Yaw;                         // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(AnimComponent_SCT_C_SetCharacterRotation) == 0x000004, "Wrong alignment on AnimComponent_SCT_C_SetCharacterRotation");
static_assert(sizeof(AnimComponent_SCT_C_SetCharacterRotation) == 0x000044, "Wrong size on AnimComponent_SCT_C_SetCharacterRotation");
static_assert(offsetof(AnimComponent_SCT_C_SetCharacterRotation, TargetRotation_0) == 0x000000, "Member 'AnimComponent_SCT_C_SetCharacterRotation::TargetRotation_0' has a wrong offset!");
static_assert(offsetof(AnimComponent_SCT_C_SetCharacterRotation, InterpRotation) == 0x00000C, "Member 'AnimComponent_SCT_C_SetCharacterRotation::InterpRotation' has a wrong offset!");
static_assert(offsetof(AnimComponent_SCT_C_SetCharacterRotation, InterpSpeed) == 0x000010, "Member 'AnimComponent_SCT_C_SetCharacterRotation::InterpSpeed' has a wrong offset!");
static_assert(offsetof(AnimComponent_SCT_C_SetCharacterRotation, CallFunc_NotEqual_FloatFloat_ReturnValue) == 0x000014, "Member 'AnimComponent_SCT_C_SetCharacterRotation::CallFunc_NotEqual_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(AnimComponent_SCT_C_SetCharacterRotation, CallFunc_GetWorldDeltaSeconds_ReturnValue) == 0x000018, "Member 'AnimComponent_SCT_C_SetCharacterRotation::CallFunc_GetWorldDeltaSeconds_ReturnValue' has a wrong offset!");
static_assert(offsetof(AnimComponent_SCT_C_SetCharacterRotation, CallFunc_K2_SetActorRotation_ReturnValue) == 0x00001C, "Member 'AnimComponent_SCT_C_SetCharacterRotation::CallFunc_K2_SetActorRotation_ReturnValue' has a wrong offset!");
static_assert(offsetof(AnimComponent_SCT_C_SetCharacterRotation, CallFunc_RInterpTo_ReturnValue) == 0x000020, "Member 'AnimComponent_SCT_C_SetCharacterRotation::CallFunc_RInterpTo_ReturnValue' has a wrong offset!");
static_assert(offsetof(AnimComponent_SCT_C_SetCharacterRotation, CallFunc_NormalizedDeltaRotator_ReturnValue) == 0x00002C, "Member 'AnimComponent_SCT_C_SetCharacterRotation::CallFunc_NormalizedDeltaRotator_ReturnValue' has a wrong offset!");
static_assert(offsetof(AnimComponent_SCT_C_SetCharacterRotation, CallFunc_BreakRotator_Roll) == 0x000038, "Member 'AnimComponent_SCT_C_SetCharacterRotation::CallFunc_BreakRotator_Roll' has a wrong offset!");
static_assert(offsetof(AnimComponent_SCT_C_SetCharacterRotation, CallFunc_BreakRotator_Pitch) == 0x00003C, "Member 'AnimComponent_SCT_C_SetCharacterRotation::CallFunc_BreakRotator_Pitch' has a wrong offset!");
static_assert(offsetof(AnimComponent_SCT_C_SetCharacterRotation, CallFunc_BreakRotator_Yaw) == 0x000040, "Member 'AnimComponent_SCT_C_SetCharacterRotation::CallFunc_BreakRotator_Yaw' has a wrong offset!");

// Function AnimComponent_SCT.AnimComponent_SCT_C.CalculateRotationRate
// 0x0068 (0x0068 - 0x0000)
struct AnimComponent_SCT_C_CalculateRotationRate final
{
public:
	float                                         SlowSpeed;                                         // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         SlowSpeedRate;                                     // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         FastSpeed;                                         // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         FastSpeedRate;                                     // 0x000C(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ReturnValue;                                       // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue;           // 0x0014(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_GetVelocity_ReturnValue;                  // 0x0018(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0024(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_25[0x3];                                       // 0x0025(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_BreakVector_X;                            // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y;                            // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z;                            // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue;                   // 0x0034(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_VSize_ReturnValue;                        // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetWorldDeltaSeconds_ReturnValue;         // 0x0044(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_MapRangeUnclamped_ReturnValue;            // 0x0048(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue;               // 0x004C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_MapRangeClamped_ReturnValue;              // 0x0050(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_FClamp_ReturnValue;                       // 0x0054(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Select_Default;                             // 0x0058(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue;          // 0x005C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_FClamp_ReturnValue_1;                     // 0x0060(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_FloatFloat_ReturnValue;        // 0x0064(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(AnimComponent_SCT_C_CalculateRotationRate) == 0x000004, "Wrong alignment on AnimComponent_SCT_C_CalculateRotationRate");
static_assert(sizeof(AnimComponent_SCT_C_CalculateRotationRate) == 0x000068, "Wrong size on AnimComponent_SCT_C_CalculateRotationRate");
static_assert(offsetof(AnimComponent_SCT_C_CalculateRotationRate, SlowSpeed) == 0x000000, "Member 'AnimComponent_SCT_C_CalculateRotationRate::SlowSpeed' has a wrong offset!");
static_assert(offsetof(AnimComponent_SCT_C_CalculateRotationRate, SlowSpeedRate) == 0x000004, "Member 'AnimComponent_SCT_C_CalculateRotationRate::SlowSpeedRate' has a wrong offset!");
static_assert(offsetof(AnimComponent_SCT_C_CalculateRotationRate, FastSpeed) == 0x000008, "Member 'AnimComponent_SCT_C_CalculateRotationRate::FastSpeed' has a wrong offset!");
static_assert(offsetof(AnimComponent_SCT_C_CalculateRotationRate, FastSpeedRate) == 0x00000C, "Member 'AnimComponent_SCT_C_CalculateRotationRate::FastSpeedRate' has a wrong offset!");
static_assert(offsetof(AnimComponent_SCT_C_CalculateRotationRate, ReturnValue) == 0x000010, "Member 'AnimComponent_SCT_C_CalculateRotationRate::ReturnValue' has a wrong offset!");
static_assert(offsetof(AnimComponent_SCT_C_CalculateRotationRate, CallFunc_Greater_FloatFloat_ReturnValue) == 0x000014, "Member 'AnimComponent_SCT_C_CalculateRotationRate::CallFunc_Greater_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(AnimComponent_SCT_C_CalculateRotationRate, CallFunc_GetVelocity_ReturnValue) == 0x000018, "Member 'AnimComponent_SCT_C_CalculateRotationRate::CallFunc_GetVelocity_ReturnValue' has a wrong offset!");
static_assert(offsetof(AnimComponent_SCT_C_CalculateRotationRate, Temp_bool_Variable) == 0x000024, "Member 'AnimComponent_SCT_C_CalculateRotationRate::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(AnimComponent_SCT_C_CalculateRotationRate, CallFunc_BreakVector_X) == 0x000028, "Member 'AnimComponent_SCT_C_CalculateRotationRate::CallFunc_BreakVector_X' has a wrong offset!");
static_assert(offsetof(AnimComponent_SCT_C_CalculateRotationRate, CallFunc_BreakVector_Y) == 0x00002C, "Member 'AnimComponent_SCT_C_CalculateRotationRate::CallFunc_BreakVector_Y' has a wrong offset!");
static_assert(offsetof(AnimComponent_SCT_C_CalculateRotationRate, CallFunc_BreakVector_Z) == 0x000030, "Member 'AnimComponent_SCT_C_CalculateRotationRate::CallFunc_BreakVector_Z' has a wrong offset!");
static_assert(offsetof(AnimComponent_SCT_C_CalculateRotationRate, CallFunc_MakeVector_ReturnValue) == 0x000034, "Member 'AnimComponent_SCT_C_CalculateRotationRate::CallFunc_MakeVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(AnimComponent_SCT_C_CalculateRotationRate, CallFunc_VSize_ReturnValue) == 0x000040, "Member 'AnimComponent_SCT_C_CalculateRotationRate::CallFunc_VSize_ReturnValue' has a wrong offset!");
static_assert(offsetof(AnimComponent_SCT_C_CalculateRotationRate, CallFunc_GetWorldDeltaSeconds_ReturnValue) == 0x000044, "Member 'AnimComponent_SCT_C_CalculateRotationRate::CallFunc_GetWorldDeltaSeconds_ReturnValue' has a wrong offset!");
static_assert(offsetof(AnimComponent_SCT_C_CalculateRotationRate, CallFunc_MapRangeUnclamped_ReturnValue) == 0x000048, "Member 'AnimComponent_SCT_C_CalculateRotationRate::CallFunc_MapRangeUnclamped_ReturnValue' has a wrong offset!");
static_assert(offsetof(AnimComponent_SCT_C_CalculateRotationRate, CallFunc_Add_FloatFloat_ReturnValue) == 0x00004C, "Member 'AnimComponent_SCT_C_CalculateRotationRate::CallFunc_Add_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(AnimComponent_SCT_C_CalculateRotationRate, CallFunc_MapRangeClamped_ReturnValue) == 0x000050, "Member 'AnimComponent_SCT_C_CalculateRotationRate::CallFunc_MapRangeClamped_ReturnValue' has a wrong offset!");
static_assert(offsetof(AnimComponent_SCT_C_CalculateRotationRate, CallFunc_FClamp_ReturnValue) == 0x000054, "Member 'AnimComponent_SCT_C_CalculateRotationRate::CallFunc_FClamp_ReturnValue' has a wrong offset!");
static_assert(offsetof(AnimComponent_SCT_C_CalculateRotationRate, K2Node_Select_Default) == 0x000058, "Member 'AnimComponent_SCT_C_CalculateRotationRate::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(AnimComponent_SCT_C_CalculateRotationRate, CallFunc_Multiply_FloatFloat_ReturnValue) == 0x00005C, "Member 'AnimComponent_SCT_C_CalculateRotationRate::CallFunc_Multiply_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(AnimComponent_SCT_C_CalculateRotationRate, CallFunc_FClamp_ReturnValue_1) == 0x000060, "Member 'AnimComponent_SCT_C_CalculateRotationRate::CallFunc_FClamp_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(AnimComponent_SCT_C_CalculateRotationRate, CallFunc_EqualEqual_FloatFloat_ReturnValue) == 0x000064, "Member 'AnimComponent_SCT_C_CalculateRotationRate::CallFunc_EqualEqual_FloatFloat_ReturnValue' has a wrong offset!");

// Function AnimComponent_SCT.AnimComponent_SCT_C.LimitRotation
// 0x003C (0x003C - 0x0000)
struct AnimComponent_SCT_C_LimitRotation final
{
public:
	float                                         AimYawLimit;                                       // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         InterpSpeed;                                       // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_BreakRotator_Roll;                        // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Pitch;                       // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Yaw;                         // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue;           // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Add_FloatFloat_ReturnValue;               // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue;          // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Abs_ReturnValue;                          // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Select_Default;                             // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue_1;         // 0x002C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2D[0x3];                                       // 0x002D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               CallFunc_MakeRotator_ReturnValue;                  // 0x0030(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(AnimComponent_SCT_C_LimitRotation) == 0x000004, "Wrong alignment on AnimComponent_SCT_C_LimitRotation");
static_assert(sizeof(AnimComponent_SCT_C_LimitRotation) == 0x00003C, "Wrong size on AnimComponent_SCT_C_LimitRotation");
static_assert(offsetof(AnimComponent_SCT_C_LimitRotation, AimYawLimit) == 0x000000, "Member 'AnimComponent_SCT_C_LimitRotation::AimYawLimit' has a wrong offset!");
static_assert(offsetof(AnimComponent_SCT_C_LimitRotation, InterpSpeed) == 0x000004, "Member 'AnimComponent_SCT_C_LimitRotation::InterpSpeed' has a wrong offset!");
static_assert(offsetof(AnimComponent_SCT_C_LimitRotation, Temp_bool_Variable) == 0x000008, "Member 'AnimComponent_SCT_C_LimitRotation::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(AnimComponent_SCT_C_LimitRotation, CallFunc_BreakRotator_Roll) == 0x00000C, "Member 'AnimComponent_SCT_C_LimitRotation::CallFunc_BreakRotator_Roll' has a wrong offset!");
static_assert(offsetof(AnimComponent_SCT_C_LimitRotation, CallFunc_BreakRotator_Pitch) == 0x000010, "Member 'AnimComponent_SCT_C_LimitRotation::CallFunc_BreakRotator_Pitch' has a wrong offset!");
static_assert(offsetof(AnimComponent_SCT_C_LimitRotation, CallFunc_BreakRotator_Yaw) == 0x000014, "Member 'AnimComponent_SCT_C_LimitRotation::CallFunc_BreakRotator_Yaw' has a wrong offset!");
static_assert(offsetof(AnimComponent_SCT_C_LimitRotation, CallFunc_Greater_FloatFloat_ReturnValue) == 0x000018, "Member 'AnimComponent_SCT_C_LimitRotation::CallFunc_Greater_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(AnimComponent_SCT_C_LimitRotation, CallFunc_Add_FloatFloat_ReturnValue) == 0x00001C, "Member 'AnimComponent_SCT_C_LimitRotation::CallFunc_Add_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(AnimComponent_SCT_C_LimitRotation, CallFunc_Subtract_FloatFloat_ReturnValue) == 0x000020, "Member 'AnimComponent_SCT_C_LimitRotation::CallFunc_Subtract_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(AnimComponent_SCT_C_LimitRotation, CallFunc_Abs_ReturnValue) == 0x000024, "Member 'AnimComponent_SCT_C_LimitRotation::CallFunc_Abs_ReturnValue' has a wrong offset!");
static_assert(offsetof(AnimComponent_SCT_C_LimitRotation, K2Node_Select_Default) == 0x000028, "Member 'AnimComponent_SCT_C_LimitRotation::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(AnimComponent_SCT_C_LimitRotation, CallFunc_Greater_FloatFloat_ReturnValue_1) == 0x00002C, "Member 'AnimComponent_SCT_C_LimitRotation::CallFunc_Greater_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(AnimComponent_SCT_C_LimitRotation, CallFunc_MakeRotator_ReturnValue) == 0x000030, "Member 'AnimComponent_SCT_C_LimitRotation::CallFunc_MakeRotator_ReturnValue' has a wrong offset!");

// Function AnimComponent_SCT.AnimComponent_SCT_C.AddCharacterRotation
// 0x004C (0x004C - 0x0000)
struct AnimComponent_SCT_C_AddCharacterRotation final
{
public:
	struct FRotator                               AddAmount;                                         // 0x0000(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FRotator                               CallFunc_NegateRotator_ReturnValue;                // 0x000C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_HasAuthority_ReturnValue;                 // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_K2_SetActorRotation_ReturnValue;          // 0x0019(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1A[0x2];                                       // 0x001A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               CallFunc_NormalizedDeltaRotator_ReturnValue;       // 0x001C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FRotator                               CallFunc_NormalizedDeltaRotator_ReturnValue_1;     // 0x0028(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_BreakRotator_Roll;                        // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Pitch;                       // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Yaw;                         // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_NormalizedDeltaRotator_ReturnValue_2;     // 0x0040(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(AnimComponent_SCT_C_AddCharacterRotation) == 0x000004, "Wrong alignment on AnimComponent_SCT_C_AddCharacterRotation");
static_assert(sizeof(AnimComponent_SCT_C_AddCharacterRotation) == 0x00004C, "Wrong size on AnimComponent_SCT_C_AddCharacterRotation");
static_assert(offsetof(AnimComponent_SCT_C_AddCharacterRotation, AddAmount) == 0x000000, "Member 'AnimComponent_SCT_C_AddCharacterRotation::AddAmount' has a wrong offset!");
static_assert(offsetof(AnimComponent_SCT_C_AddCharacterRotation, CallFunc_NegateRotator_ReturnValue) == 0x00000C, "Member 'AnimComponent_SCT_C_AddCharacterRotation::CallFunc_NegateRotator_ReturnValue' has a wrong offset!");
static_assert(offsetof(AnimComponent_SCT_C_AddCharacterRotation, CallFunc_HasAuthority_ReturnValue) == 0x000018, "Member 'AnimComponent_SCT_C_AddCharacterRotation::CallFunc_HasAuthority_ReturnValue' has a wrong offset!");
static_assert(offsetof(AnimComponent_SCT_C_AddCharacterRotation, CallFunc_K2_SetActorRotation_ReturnValue) == 0x000019, "Member 'AnimComponent_SCT_C_AddCharacterRotation::CallFunc_K2_SetActorRotation_ReturnValue' has a wrong offset!");
static_assert(offsetof(AnimComponent_SCT_C_AddCharacterRotation, CallFunc_NormalizedDeltaRotator_ReturnValue) == 0x00001C, "Member 'AnimComponent_SCT_C_AddCharacterRotation::CallFunc_NormalizedDeltaRotator_ReturnValue' has a wrong offset!");
static_assert(offsetof(AnimComponent_SCT_C_AddCharacterRotation, CallFunc_NormalizedDeltaRotator_ReturnValue_1) == 0x000028, "Member 'AnimComponent_SCT_C_AddCharacterRotation::CallFunc_NormalizedDeltaRotator_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(AnimComponent_SCT_C_AddCharacterRotation, CallFunc_BreakRotator_Roll) == 0x000034, "Member 'AnimComponent_SCT_C_AddCharacterRotation::CallFunc_BreakRotator_Roll' has a wrong offset!");
static_assert(offsetof(AnimComponent_SCT_C_AddCharacterRotation, CallFunc_BreakRotator_Pitch) == 0x000038, "Member 'AnimComponent_SCT_C_AddCharacterRotation::CallFunc_BreakRotator_Pitch' has a wrong offset!");
static_assert(offsetof(AnimComponent_SCT_C_AddCharacterRotation, CallFunc_BreakRotator_Yaw) == 0x00003C, "Member 'AnimComponent_SCT_C_AddCharacterRotation::CallFunc_BreakRotator_Yaw' has a wrong offset!");
static_assert(offsetof(AnimComponent_SCT_C_AddCharacterRotation, CallFunc_NormalizedDeltaRotator_ReturnValue_2) == 0x000040, "Member 'AnimComponent_SCT_C_AddCharacterRotation::CallFunc_NormalizedDeltaRotator_ReturnValue_2' has a wrong offset!");

// Function AnimComponent_SCT.AnimComponent_SCT_C.SetMovementMode
// 0x0002 (0x0002 - 0x0000)
struct AnimComponent_SCT_C_SetMovementMode final
{
public:
	MovementMode::EMovementMode                   NewMovementMode;                                   // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_ByteByte_ReturnValue;            // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(AnimComponent_SCT_C_SetMovementMode) == 0x000001, "Wrong alignment on AnimComponent_SCT_C_SetMovementMode");
static_assert(sizeof(AnimComponent_SCT_C_SetMovementMode) == 0x000002, "Wrong size on AnimComponent_SCT_C_SetMovementMode");
static_assert(offsetof(AnimComponent_SCT_C_SetMovementMode, NewMovementMode) == 0x000000, "Member 'AnimComponent_SCT_C_SetMovementMode::NewMovementMode' has a wrong offset!");
static_assert(offsetof(AnimComponent_SCT_C_SetMovementMode, CallFunc_NotEqual_ByteByte_ReturnValue) == 0x000001, "Member 'AnimComponent_SCT_C_SetMovementMode::CallFunc_NotEqual_ByteByte_ReturnValue' has a wrong offset!");

// Function AnimComponent_SCT.AnimComponent_SCT_C.MovementModeChanged
// 0x0030 (0x0030 - 0x0000)
struct AnimComponent_SCT_C_MovementModeChanged final
{
public:
	bool                                          Temp_bool_Variable;                                // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               K2Node_Select_Default;                             // 0x0004(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IIAnimBp_C>            K2Node_DynamicCast_AsIAnim_Bp;                     // 0x0018(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(AnimComponent_SCT_C_MovementModeChanged) == 0x000008, "Wrong alignment on AnimComponent_SCT_C_MovementModeChanged");
static_assert(sizeof(AnimComponent_SCT_C_MovementModeChanged) == 0x000030, "Wrong size on AnimComponent_SCT_C_MovementModeChanged");
static_assert(offsetof(AnimComponent_SCT_C_MovementModeChanged, Temp_bool_Variable) == 0x000000, "Member 'AnimComponent_SCT_C_MovementModeChanged::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(AnimComponent_SCT_C_MovementModeChanged, K2Node_Select_Default) == 0x000004, "Member 'AnimComponent_SCT_C_MovementModeChanged::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(AnimComponent_SCT_C_MovementModeChanged, K2Node_SwitchEnum_CmpSuccess) == 0x000010, "Member 'AnimComponent_SCT_C_MovementModeChanged::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");
static_assert(offsetof(AnimComponent_SCT_C_MovementModeChanged, K2Node_DynamicCast_AsIAnim_Bp) == 0x000018, "Member 'AnimComponent_SCT_C_MovementModeChanged::K2Node_DynamicCast_AsIAnim_Bp' has a wrong offset!");
static_assert(offsetof(AnimComponent_SCT_C_MovementModeChanged, K2Node_DynamicCast_bSuccess) == 0x000028, "Member 'AnimComponent_SCT_C_MovementModeChanged::K2Node_DynamicCast_bSuccess' has a wrong offset!");

// Function AnimComponent_SCT.AnimComponent_SCT_C.SetStance
// 0x0002 (0x0002 - 0x0000)
struct AnimComponent_SCT_C_SetStance final
{
public:
	EStance                                       NewStance;                                         // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_ByteByte_ReturnValue;            // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(AnimComponent_SCT_C_SetStance) == 0x000001, "Wrong alignment on AnimComponent_SCT_C_SetStance");
static_assert(sizeof(AnimComponent_SCT_C_SetStance) == 0x000002, "Wrong size on AnimComponent_SCT_C_SetStance");
static_assert(offsetof(AnimComponent_SCT_C_SetStance, NewStance) == 0x000000, "Member 'AnimComponent_SCT_C_SetStance::NewStance' has a wrong offset!");
static_assert(offsetof(AnimComponent_SCT_C_SetStance, CallFunc_NotEqual_ByteByte_ReturnValue) == 0x000001, "Member 'AnimComponent_SCT_C_SetStance::CallFunc_NotEqual_ByteByte_ReturnValue' has a wrong offset!");

// Function AnimComponent_SCT.AnimComponent_SCT_C.StanceChanged
// 0x0018 (0x0018 - 0x0000)
struct AnimComponent_SCT_C_StanceChanged final
{
public:
	TScriptInterface<class IIAnimBp_C>            K2Node_DynamicCast_AsIAnim_Bp;                     // 0x0000(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(AnimComponent_SCT_C_StanceChanged) == 0x000008, "Wrong alignment on AnimComponent_SCT_C_StanceChanged");
static_assert(sizeof(AnimComponent_SCT_C_StanceChanged) == 0x000018, "Wrong size on AnimComponent_SCT_C_StanceChanged");
static_assert(offsetof(AnimComponent_SCT_C_StanceChanged, K2Node_DynamicCast_AsIAnim_Bp) == 0x000000, "Member 'AnimComponent_SCT_C_StanceChanged::K2Node_DynamicCast_AsIAnim_Bp' has a wrong offset!");
static_assert(offsetof(AnimComponent_SCT_C_StanceChanged, K2Node_DynamicCast_bSuccess) == 0x000010, "Member 'AnimComponent_SCT_C_StanceChanged::K2Node_DynamicCast_bSuccess' has a wrong offset!");

// Function AnimComponent_SCT.AnimComponent_SCT_C.SetGait
// 0x0003 (0x0003 - 0x0000)
struct AnimComponent_SCT_C_SetGait final
{
public:
	EGait                                         NewGait;                                           // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsLocallyControlled_ReturnValue;          // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_NotEqual_ByteByte_ReturnValue;            // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(AnimComponent_SCT_C_SetGait) == 0x000001, "Wrong alignment on AnimComponent_SCT_C_SetGait");
static_assert(sizeof(AnimComponent_SCT_C_SetGait) == 0x000003, "Wrong size on AnimComponent_SCT_C_SetGait");
static_assert(offsetof(AnimComponent_SCT_C_SetGait, NewGait) == 0x000000, "Member 'AnimComponent_SCT_C_SetGait::NewGait' has a wrong offset!");
static_assert(offsetof(AnimComponent_SCT_C_SetGait, CallFunc_IsLocallyControlled_ReturnValue) == 0x000001, "Member 'AnimComponent_SCT_C_SetGait::CallFunc_IsLocallyControlled_ReturnValue' has a wrong offset!");
static_assert(offsetof(AnimComponent_SCT_C_SetGait, CallFunc_NotEqual_ByteByte_ReturnValue) == 0x000002, "Member 'AnimComponent_SCT_C_SetGait::CallFunc_NotEqual_ByteByte_ReturnValue' has a wrong offset!");

// Function AnimComponent_SCT.AnimComponent_SCT_C.GaitChanged
// 0x0018 (0x0018 - 0x0000)
struct AnimComponent_SCT_C_GaitChanged final
{
public:
	TScriptInterface<class IIAnimBp_C>            K2Node_DynamicCast_AsIAnim_Bp;                     // 0x0000(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(AnimComponent_SCT_C_GaitChanged) == 0x000008, "Wrong alignment on AnimComponent_SCT_C_GaitChanged");
static_assert(sizeof(AnimComponent_SCT_C_GaitChanged) == 0x000018, "Wrong size on AnimComponent_SCT_C_GaitChanged");
static_assert(offsetof(AnimComponent_SCT_C_GaitChanged, K2Node_DynamicCast_AsIAnim_Bp) == 0x000000, "Member 'AnimComponent_SCT_C_GaitChanged::K2Node_DynamicCast_AsIAnim_Bp' has a wrong offset!");
static_assert(offsetof(AnimComponent_SCT_C_GaitChanged, K2Node_DynamicCast_bSuccess) == 0x000010, "Member 'AnimComponent_SCT_C_GaitChanged::K2Node_DynamicCast_bSuccess' has a wrong offset!");

// Function AnimComponent_SCT.AnimComponent_SCT_C.UpdateRagdollLocation
// 0x01F0 (0x01F0 - 0x0000)
struct AnimComponent_SCT_C_UpdateRagdollLocation final
{
public:
	float                                         CallFunc_GetGameTimeInSeconds_ReturnValue;         // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue;               // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetSocketLocation_ReturnValue;            // 0x0008(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_FloatFloat_ReturnValue;      // 0x0014(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_GetPhysicsLinearVelocity_ReturnValue;     // 0x0018(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AActor*>                         Temp_object_Variable;                              // 0x0028(0x0010)(ConstParm, ReferenceParm)
	float                                         CallFunc_VSizeSquared_ReturnValue;                 // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_FloatFloat_ReturnValue;              // 0x003C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3D[0x3];                                       // 0x003D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue;          // 0x0040(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_CalculateRagdollLocationRotation_OutLocation; // 0x004C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_CalculateRagdollLocationRotation_OutRotation; // 0x0058(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_GetScaledCapsuleHalfHeight_ReturnValue;   // 0x0064(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetScaledCapsuleRadius_ReturnValue;       // 0x0068(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetComponentLocation_ReturnValue;      // 0x006C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue;             // 0x0078(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             CallFunc_K2_SetActorLocationAndRotation_SweepHitResult; // 0x0084(0x008C)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          CallFunc_K2_SetActorLocationAndRotation_ReturnValue; // 0x0110(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_111[0x3];                                      // 0x0111(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             CallFunc_CapsuleTraceSingle_OutHit;                // 0x0114(0x008C)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          CallFunc_CapsuleTraceSingle_ReturnValue;           // 0x01A0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1A1[0x3];                                      // 0x01A1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_GetRagdollVelocity_Velocity;              // 0x01A4(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_X;                            // 0x01B0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y;                            // 0x01B4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z;                            // 0x01B8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_FloatFloat_ReturnValue_1;            // 0x01BC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x01BD(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1BE[0x2];                                      // 0x01BE(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_GetRagdollVelocity_Velocity_1;            // 0x01C0(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_VSize_ReturnValue;                        // 0x01CC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_MapRangeClamped_ReturnValue;              // 0x01D0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_HasAuthority_ReturnValue;                 // 0x01D4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1D5[0x3];                                      // 0x01D5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               CallFunc_NormalizedDeltaRotator_ReturnValue;       // 0x01D8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_BreakRotator_Roll;                        // 0x01E4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Pitch;                       // 0x01E8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Yaw;                         // 0x01EC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(AnimComponent_SCT_C_UpdateRagdollLocation) == 0x000008, "Wrong alignment on AnimComponent_SCT_C_UpdateRagdollLocation");
static_assert(sizeof(AnimComponent_SCT_C_UpdateRagdollLocation) == 0x0001F0, "Wrong size on AnimComponent_SCT_C_UpdateRagdollLocation");
static_assert(offsetof(AnimComponent_SCT_C_UpdateRagdollLocation, CallFunc_GetGameTimeInSeconds_ReturnValue) == 0x000000, "Member 'AnimComponent_SCT_C_UpdateRagdollLocation::CallFunc_GetGameTimeInSeconds_ReturnValue' has a wrong offset!");
static_assert(offsetof(AnimComponent_SCT_C_UpdateRagdollLocation, CallFunc_Add_FloatFloat_ReturnValue) == 0x000004, "Member 'AnimComponent_SCT_C_UpdateRagdollLocation::CallFunc_Add_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(AnimComponent_SCT_C_UpdateRagdollLocation, CallFunc_GetSocketLocation_ReturnValue) == 0x000008, "Member 'AnimComponent_SCT_C_UpdateRagdollLocation::CallFunc_GetSocketLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(AnimComponent_SCT_C_UpdateRagdollLocation, CallFunc_GreaterEqual_FloatFloat_ReturnValue) == 0x000014, "Member 'AnimComponent_SCT_C_UpdateRagdollLocation::CallFunc_GreaterEqual_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(AnimComponent_SCT_C_UpdateRagdollLocation, CallFunc_GetPhysicsLinearVelocity_ReturnValue) == 0x000018, "Member 'AnimComponent_SCT_C_UpdateRagdollLocation::CallFunc_GetPhysicsLinearVelocity_ReturnValue' has a wrong offset!");
static_assert(offsetof(AnimComponent_SCT_C_UpdateRagdollLocation, Temp_object_Variable) == 0x000028, "Member 'AnimComponent_SCT_C_UpdateRagdollLocation::Temp_object_Variable' has a wrong offset!");
static_assert(offsetof(AnimComponent_SCT_C_UpdateRagdollLocation, CallFunc_VSizeSquared_ReturnValue) == 0x000038, "Member 'AnimComponent_SCT_C_UpdateRagdollLocation::CallFunc_VSizeSquared_ReturnValue' has a wrong offset!");
static_assert(offsetof(AnimComponent_SCT_C_UpdateRagdollLocation, CallFunc_Less_FloatFloat_ReturnValue) == 0x00003C, "Member 'AnimComponent_SCT_C_UpdateRagdollLocation::CallFunc_Less_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(AnimComponent_SCT_C_UpdateRagdollLocation, CallFunc_K2_GetActorLocation_ReturnValue) == 0x000040, "Member 'AnimComponent_SCT_C_UpdateRagdollLocation::CallFunc_K2_GetActorLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(AnimComponent_SCT_C_UpdateRagdollLocation, CallFunc_CalculateRagdollLocationRotation_OutLocation) == 0x00004C, "Member 'AnimComponent_SCT_C_UpdateRagdollLocation::CallFunc_CalculateRagdollLocationRotation_OutLocation' has a wrong offset!");
static_assert(offsetof(AnimComponent_SCT_C_UpdateRagdollLocation, CallFunc_CalculateRagdollLocationRotation_OutRotation) == 0x000058, "Member 'AnimComponent_SCT_C_UpdateRagdollLocation::CallFunc_CalculateRagdollLocationRotation_OutRotation' has a wrong offset!");
static_assert(offsetof(AnimComponent_SCT_C_UpdateRagdollLocation, CallFunc_GetScaledCapsuleHalfHeight_ReturnValue) == 0x000064, "Member 'AnimComponent_SCT_C_UpdateRagdollLocation::CallFunc_GetScaledCapsuleHalfHeight_ReturnValue' has a wrong offset!");
static_assert(offsetof(AnimComponent_SCT_C_UpdateRagdollLocation, CallFunc_GetScaledCapsuleRadius_ReturnValue) == 0x000068, "Member 'AnimComponent_SCT_C_UpdateRagdollLocation::CallFunc_GetScaledCapsuleRadius_ReturnValue' has a wrong offset!");
static_assert(offsetof(AnimComponent_SCT_C_UpdateRagdollLocation, CallFunc_K2_GetComponentLocation_ReturnValue) == 0x00006C, "Member 'AnimComponent_SCT_C_UpdateRagdollLocation::CallFunc_K2_GetComponentLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(AnimComponent_SCT_C_UpdateRagdollLocation, CallFunc_Add_VectorVector_ReturnValue) == 0x000078, "Member 'AnimComponent_SCT_C_UpdateRagdollLocation::CallFunc_Add_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(AnimComponent_SCT_C_UpdateRagdollLocation, CallFunc_K2_SetActorLocationAndRotation_SweepHitResult) == 0x000084, "Member 'AnimComponent_SCT_C_UpdateRagdollLocation::CallFunc_K2_SetActorLocationAndRotation_SweepHitResult' has a wrong offset!");
static_assert(offsetof(AnimComponent_SCT_C_UpdateRagdollLocation, CallFunc_K2_SetActorLocationAndRotation_ReturnValue) == 0x000110, "Member 'AnimComponent_SCT_C_UpdateRagdollLocation::CallFunc_K2_SetActorLocationAndRotation_ReturnValue' has a wrong offset!");
static_assert(offsetof(AnimComponent_SCT_C_UpdateRagdollLocation, CallFunc_CapsuleTraceSingle_OutHit) == 0x000114, "Member 'AnimComponent_SCT_C_UpdateRagdollLocation::CallFunc_CapsuleTraceSingle_OutHit' has a wrong offset!");
static_assert(offsetof(AnimComponent_SCT_C_UpdateRagdollLocation, CallFunc_CapsuleTraceSingle_ReturnValue) == 0x0001A0, "Member 'AnimComponent_SCT_C_UpdateRagdollLocation::CallFunc_CapsuleTraceSingle_ReturnValue' has a wrong offset!");
static_assert(offsetof(AnimComponent_SCT_C_UpdateRagdollLocation, CallFunc_GetRagdollVelocity_Velocity) == 0x0001A4, "Member 'AnimComponent_SCT_C_UpdateRagdollLocation::CallFunc_GetRagdollVelocity_Velocity' has a wrong offset!");
static_assert(offsetof(AnimComponent_SCT_C_UpdateRagdollLocation, CallFunc_BreakVector_X) == 0x0001B0, "Member 'AnimComponent_SCT_C_UpdateRagdollLocation::CallFunc_BreakVector_X' has a wrong offset!");
static_assert(offsetof(AnimComponent_SCT_C_UpdateRagdollLocation, CallFunc_BreakVector_Y) == 0x0001B4, "Member 'AnimComponent_SCT_C_UpdateRagdollLocation::CallFunc_BreakVector_Y' has a wrong offset!");
static_assert(offsetof(AnimComponent_SCT_C_UpdateRagdollLocation, CallFunc_BreakVector_Z) == 0x0001B8, "Member 'AnimComponent_SCT_C_UpdateRagdollLocation::CallFunc_BreakVector_Z' has a wrong offset!");
static_assert(offsetof(AnimComponent_SCT_C_UpdateRagdollLocation, CallFunc_Less_FloatFloat_ReturnValue_1) == 0x0001BC, "Member 'AnimComponent_SCT_C_UpdateRagdollLocation::CallFunc_Less_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(AnimComponent_SCT_C_UpdateRagdollLocation, CallFunc_BooleanOR_ReturnValue) == 0x0001BD, "Member 'AnimComponent_SCT_C_UpdateRagdollLocation::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");
static_assert(offsetof(AnimComponent_SCT_C_UpdateRagdollLocation, CallFunc_GetRagdollVelocity_Velocity_1) == 0x0001C0, "Member 'AnimComponent_SCT_C_UpdateRagdollLocation::CallFunc_GetRagdollVelocity_Velocity_1' has a wrong offset!");
static_assert(offsetof(AnimComponent_SCT_C_UpdateRagdollLocation, CallFunc_VSize_ReturnValue) == 0x0001CC, "Member 'AnimComponent_SCT_C_UpdateRagdollLocation::CallFunc_VSize_ReturnValue' has a wrong offset!");
static_assert(offsetof(AnimComponent_SCT_C_UpdateRagdollLocation, CallFunc_MapRangeClamped_ReturnValue) == 0x0001D0, "Member 'AnimComponent_SCT_C_UpdateRagdollLocation::CallFunc_MapRangeClamped_ReturnValue' has a wrong offset!");
static_assert(offsetof(AnimComponent_SCT_C_UpdateRagdollLocation, CallFunc_HasAuthority_ReturnValue) == 0x0001D4, "Member 'AnimComponent_SCT_C_UpdateRagdollLocation::CallFunc_HasAuthority_ReturnValue' has a wrong offset!");
static_assert(offsetof(AnimComponent_SCT_C_UpdateRagdollLocation, CallFunc_NormalizedDeltaRotator_ReturnValue) == 0x0001D8, "Member 'AnimComponent_SCT_C_UpdateRagdollLocation::CallFunc_NormalizedDeltaRotator_ReturnValue' has a wrong offset!");
static_assert(offsetof(AnimComponent_SCT_C_UpdateRagdollLocation, CallFunc_BreakRotator_Roll) == 0x0001E4, "Member 'AnimComponent_SCT_C_UpdateRagdollLocation::CallFunc_BreakRotator_Roll' has a wrong offset!");
static_assert(offsetof(AnimComponent_SCT_C_UpdateRagdollLocation, CallFunc_BreakRotator_Pitch) == 0x0001E8, "Member 'AnimComponent_SCT_C_UpdateRagdollLocation::CallFunc_BreakRotator_Pitch' has a wrong offset!");
static_assert(offsetof(AnimComponent_SCT_C_UpdateRagdollLocation, CallFunc_BreakRotator_Yaw) == 0x0001EC, "Member 'AnimComponent_SCT_C_UpdateRagdollLocation::CallFunc_BreakRotator_Yaw' has a wrong offset!");

// Function AnimComponent_SCT.AnimComponent_SCT_C.GetRagdollVelocity
// 0x0020 (0x0020 - 0x0000)
struct AnimComponent_SCT_C_GetRagdollVelocity final
{
public:
	struct FVector                                Velocity;                                          // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_MakeLiteralName_ReturnValue;              // 0x000C(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetPhysicsLinearVelocity_ReturnValue;     // 0x0014(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(AnimComponent_SCT_C_GetRagdollVelocity) == 0x000004, "Wrong alignment on AnimComponent_SCT_C_GetRagdollVelocity");
static_assert(sizeof(AnimComponent_SCT_C_GetRagdollVelocity) == 0x000020, "Wrong size on AnimComponent_SCT_C_GetRagdollVelocity");
static_assert(offsetof(AnimComponent_SCT_C_GetRagdollVelocity, Velocity) == 0x000000, "Member 'AnimComponent_SCT_C_GetRagdollVelocity::Velocity' has a wrong offset!");
static_assert(offsetof(AnimComponent_SCT_C_GetRagdollVelocity, CallFunc_MakeLiteralName_ReturnValue) == 0x00000C, "Member 'AnimComponent_SCT_C_GetRagdollVelocity::CallFunc_MakeLiteralName_ReturnValue' has a wrong offset!");
static_assert(offsetof(AnimComponent_SCT_C_GetRagdollVelocity, CallFunc_GetPhysicsLinearVelocity_ReturnValue) == 0x000014, "Member 'AnimComponent_SCT_C_GetRagdollVelocity::CallFunc_GetPhysicsLinearVelocity_ReturnValue' has a wrong offset!");

// Function AnimComponent_SCT.AnimComponent_SCT_C.CalculateRagdollLocationRotation
// 0x01F8 (0x01F8 - 0x0000)
struct AnimComponent_SCT_C_CalculateRagdollLocationRotation final
{
public:
	struct FVector                                OutLocation;                                       // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               OutRotation;                                       // 0x000C(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable;                                // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Temp_float_Variable;                               // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class AActor*>                         Temp_object_Variable;                              // 0x0020(0x0010)(ConstParm, ReferenceParm)
	struct FRotator                               CallFunc_GetSocketRotation_ReturnValue;            // 0x0030(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FRotator                               CallFunc_ComposeRotators_ReturnValue;              // 0x003C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_GetScaledCapsuleHalfHeight_ReturnValue;   // 0x0048(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Roll;                        // 0x004C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Pitch;                       // 0x0050(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Yaw;                         // 0x0054(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetSocketLocation_ReturnValue;            // 0x0058(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue;          // 0x0064(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_X;                            // 0x0068(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y;                            // 0x006C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z;                            // 0x0070(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_X_1;                          // 0x0074(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y_1;                          // 0x0078(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z_1;                          // 0x007C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue;           // 0x0080(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_81[0x3];                                       // 0x0081(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetScaledCapsuleHalfHeight_ReturnValue_1; // 0x0084(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_1;                              // 0x0088(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_89[0x3];                                       // 0x0089(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue_1;        // 0x008C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue;                   // 0x0090(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Select_Default;                             // 0x009C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             CallFunc_LineTraceSingle_OutHit;                   // 0x00A0(0x008C)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          CallFunc_LineTraceSingle_ReturnValue;              // 0x012C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_12D[0x3];                                      // 0x012D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               CallFunc_MakeRotator_ReturnValue;                  // 0x0130(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BreakHitResult_bBlockingHit;              // 0x013C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BreakHitResult_bInitialOverlap;           // 0x013D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_13E[0x2];                                      // 0x013E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_BreakHitResult_Time;                      // 0x0140(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakHitResult_Distance;                  // 0x0144(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_Location;                  // 0x0148(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactPoint;               // 0x0154(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_Normal;                    // 0x0160(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactNormal;              // 0x016C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPhysicalMaterial*                      CallFunc_BreakHitResult_PhysMat;                   // 0x0178(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_BreakHitResult_HitActor;                  // 0x0180(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    CallFunc_BreakHitResult_HitComponent;              // 0x0188(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_BreakHitResult_HitBoneName;               // 0x0190(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_HitItem;                   // 0x0198(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_FaceIndex;                 // 0x019C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_TraceStart;                // 0x01A0(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_TraceEnd;                  // 0x01AC(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_X_2;                          // 0x01B8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y_2;                          // 0x01BC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z_2;                          // 0x01C0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_X_3;                          // 0x01C4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y_3;                          // 0x01C8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z_3;                          // 0x01CC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue_2;        // 0x01D0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Abs_ReturnValue;                          // 0x01D4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue_3;        // 0x01D8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue;               // 0x01DC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Select_Default_1;                           // 0x01E0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue_1;             // 0x01E4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue_1;                 // 0x01E8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(AnimComponent_SCT_C_CalculateRagdollLocationRotation) == 0x000008, "Wrong alignment on AnimComponent_SCT_C_CalculateRagdollLocationRotation");
static_assert(sizeof(AnimComponent_SCT_C_CalculateRagdollLocationRotation) == 0x0001F8, "Wrong size on AnimComponent_SCT_C_CalculateRagdollLocationRotation");
static_assert(offsetof(AnimComponent_SCT_C_CalculateRagdollLocationRotation, OutLocation) == 0x000000, "Member 'AnimComponent_SCT_C_CalculateRagdollLocationRotation::OutLocation' has a wrong offset!");
static_assert(offsetof(AnimComponent_SCT_C_CalculateRagdollLocationRotation, OutRotation) == 0x00000C, "Member 'AnimComponent_SCT_C_CalculateRagdollLocationRotation::OutRotation' has a wrong offset!");
static_assert(offsetof(AnimComponent_SCT_C_CalculateRagdollLocationRotation, Temp_bool_Variable) == 0x000018, "Member 'AnimComponent_SCT_C_CalculateRagdollLocationRotation::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(AnimComponent_SCT_C_CalculateRagdollLocationRotation, Temp_float_Variable) == 0x00001C, "Member 'AnimComponent_SCT_C_CalculateRagdollLocationRotation::Temp_float_Variable' has a wrong offset!");
static_assert(offsetof(AnimComponent_SCT_C_CalculateRagdollLocationRotation, Temp_object_Variable) == 0x000020, "Member 'AnimComponent_SCT_C_CalculateRagdollLocationRotation::Temp_object_Variable' has a wrong offset!");
static_assert(offsetof(AnimComponent_SCT_C_CalculateRagdollLocationRotation, CallFunc_GetSocketRotation_ReturnValue) == 0x000030, "Member 'AnimComponent_SCT_C_CalculateRagdollLocationRotation::CallFunc_GetSocketRotation_ReturnValue' has a wrong offset!");
static_assert(offsetof(AnimComponent_SCT_C_CalculateRagdollLocationRotation, CallFunc_ComposeRotators_ReturnValue) == 0x00003C, "Member 'AnimComponent_SCT_C_CalculateRagdollLocationRotation::CallFunc_ComposeRotators_ReturnValue' has a wrong offset!");
static_assert(offsetof(AnimComponent_SCT_C_CalculateRagdollLocationRotation, CallFunc_GetScaledCapsuleHalfHeight_ReturnValue) == 0x000048, "Member 'AnimComponent_SCT_C_CalculateRagdollLocationRotation::CallFunc_GetScaledCapsuleHalfHeight_ReturnValue' has a wrong offset!");
static_assert(offsetof(AnimComponent_SCT_C_CalculateRagdollLocationRotation, CallFunc_BreakRotator_Roll) == 0x00004C, "Member 'AnimComponent_SCT_C_CalculateRagdollLocationRotation::CallFunc_BreakRotator_Roll' has a wrong offset!");
static_assert(offsetof(AnimComponent_SCT_C_CalculateRagdollLocationRotation, CallFunc_BreakRotator_Pitch) == 0x000050, "Member 'AnimComponent_SCT_C_CalculateRagdollLocationRotation::CallFunc_BreakRotator_Pitch' has a wrong offset!");
static_assert(offsetof(AnimComponent_SCT_C_CalculateRagdollLocationRotation, CallFunc_BreakRotator_Yaw) == 0x000054, "Member 'AnimComponent_SCT_C_CalculateRagdollLocationRotation::CallFunc_BreakRotator_Yaw' has a wrong offset!");
static_assert(offsetof(AnimComponent_SCT_C_CalculateRagdollLocationRotation, CallFunc_GetSocketLocation_ReturnValue) == 0x000058, "Member 'AnimComponent_SCT_C_CalculateRagdollLocationRotation::CallFunc_GetSocketLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(AnimComponent_SCT_C_CalculateRagdollLocationRotation, CallFunc_Subtract_FloatFloat_ReturnValue) == 0x000064, "Member 'AnimComponent_SCT_C_CalculateRagdollLocationRotation::CallFunc_Subtract_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(AnimComponent_SCT_C_CalculateRagdollLocationRotation, CallFunc_BreakVector_X) == 0x000068, "Member 'AnimComponent_SCT_C_CalculateRagdollLocationRotation::CallFunc_BreakVector_X' has a wrong offset!");
static_assert(offsetof(AnimComponent_SCT_C_CalculateRagdollLocationRotation, CallFunc_BreakVector_Y) == 0x00006C, "Member 'AnimComponent_SCT_C_CalculateRagdollLocationRotation::CallFunc_BreakVector_Y' has a wrong offset!");
static_assert(offsetof(AnimComponent_SCT_C_CalculateRagdollLocationRotation, CallFunc_BreakVector_Z) == 0x000070, "Member 'AnimComponent_SCT_C_CalculateRagdollLocationRotation::CallFunc_BreakVector_Z' has a wrong offset!");
static_assert(offsetof(AnimComponent_SCT_C_CalculateRagdollLocationRotation, CallFunc_BreakVector_X_1) == 0x000074, "Member 'AnimComponent_SCT_C_CalculateRagdollLocationRotation::CallFunc_BreakVector_X_1' has a wrong offset!");
static_assert(offsetof(AnimComponent_SCT_C_CalculateRagdollLocationRotation, CallFunc_BreakVector_Y_1) == 0x000078, "Member 'AnimComponent_SCT_C_CalculateRagdollLocationRotation::CallFunc_BreakVector_Y_1' has a wrong offset!");
static_assert(offsetof(AnimComponent_SCT_C_CalculateRagdollLocationRotation, CallFunc_BreakVector_Z_1) == 0x00007C, "Member 'AnimComponent_SCT_C_CalculateRagdollLocationRotation::CallFunc_BreakVector_Z_1' has a wrong offset!");
static_assert(offsetof(AnimComponent_SCT_C_CalculateRagdollLocationRotation, CallFunc_Greater_FloatFloat_ReturnValue) == 0x000080, "Member 'AnimComponent_SCT_C_CalculateRagdollLocationRotation::CallFunc_Greater_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(AnimComponent_SCT_C_CalculateRagdollLocationRotation, CallFunc_GetScaledCapsuleHalfHeight_ReturnValue_1) == 0x000084, "Member 'AnimComponent_SCT_C_CalculateRagdollLocationRotation::CallFunc_GetScaledCapsuleHalfHeight_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(AnimComponent_SCT_C_CalculateRagdollLocationRotation, Temp_bool_Variable_1) == 0x000088, "Member 'AnimComponent_SCT_C_CalculateRagdollLocationRotation::Temp_bool_Variable_1' has a wrong offset!");
static_assert(offsetof(AnimComponent_SCT_C_CalculateRagdollLocationRotation, CallFunc_Subtract_FloatFloat_ReturnValue_1) == 0x00008C, "Member 'AnimComponent_SCT_C_CalculateRagdollLocationRotation::CallFunc_Subtract_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(AnimComponent_SCT_C_CalculateRagdollLocationRotation, CallFunc_MakeVector_ReturnValue) == 0x000090, "Member 'AnimComponent_SCT_C_CalculateRagdollLocationRotation::CallFunc_MakeVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(AnimComponent_SCT_C_CalculateRagdollLocationRotation, K2Node_Select_Default) == 0x00009C, "Member 'AnimComponent_SCT_C_CalculateRagdollLocationRotation::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(AnimComponent_SCT_C_CalculateRagdollLocationRotation, CallFunc_LineTraceSingle_OutHit) == 0x0000A0, "Member 'AnimComponent_SCT_C_CalculateRagdollLocationRotation::CallFunc_LineTraceSingle_OutHit' has a wrong offset!");
static_assert(offsetof(AnimComponent_SCT_C_CalculateRagdollLocationRotation, CallFunc_LineTraceSingle_ReturnValue) == 0x00012C, "Member 'AnimComponent_SCT_C_CalculateRagdollLocationRotation::CallFunc_LineTraceSingle_ReturnValue' has a wrong offset!");
static_assert(offsetof(AnimComponent_SCT_C_CalculateRagdollLocationRotation, CallFunc_MakeRotator_ReturnValue) == 0x000130, "Member 'AnimComponent_SCT_C_CalculateRagdollLocationRotation::CallFunc_MakeRotator_ReturnValue' has a wrong offset!");
static_assert(offsetof(AnimComponent_SCT_C_CalculateRagdollLocationRotation, CallFunc_BreakHitResult_bBlockingHit) == 0x00013C, "Member 'AnimComponent_SCT_C_CalculateRagdollLocationRotation::CallFunc_BreakHitResult_bBlockingHit' has a wrong offset!");
static_assert(offsetof(AnimComponent_SCT_C_CalculateRagdollLocationRotation, CallFunc_BreakHitResult_bInitialOverlap) == 0x00013D, "Member 'AnimComponent_SCT_C_CalculateRagdollLocationRotation::CallFunc_BreakHitResult_bInitialOverlap' has a wrong offset!");
static_assert(offsetof(AnimComponent_SCT_C_CalculateRagdollLocationRotation, CallFunc_BreakHitResult_Time) == 0x000140, "Member 'AnimComponent_SCT_C_CalculateRagdollLocationRotation::CallFunc_BreakHitResult_Time' has a wrong offset!");
static_assert(offsetof(AnimComponent_SCT_C_CalculateRagdollLocationRotation, CallFunc_BreakHitResult_Distance) == 0x000144, "Member 'AnimComponent_SCT_C_CalculateRagdollLocationRotation::CallFunc_BreakHitResult_Distance' has a wrong offset!");
static_assert(offsetof(AnimComponent_SCT_C_CalculateRagdollLocationRotation, CallFunc_BreakHitResult_Location) == 0x000148, "Member 'AnimComponent_SCT_C_CalculateRagdollLocationRotation::CallFunc_BreakHitResult_Location' has a wrong offset!");
static_assert(offsetof(AnimComponent_SCT_C_CalculateRagdollLocationRotation, CallFunc_BreakHitResult_ImpactPoint) == 0x000154, "Member 'AnimComponent_SCT_C_CalculateRagdollLocationRotation::CallFunc_BreakHitResult_ImpactPoint' has a wrong offset!");
static_assert(offsetof(AnimComponent_SCT_C_CalculateRagdollLocationRotation, CallFunc_BreakHitResult_Normal) == 0x000160, "Member 'AnimComponent_SCT_C_CalculateRagdollLocationRotation::CallFunc_BreakHitResult_Normal' has a wrong offset!");
static_assert(offsetof(AnimComponent_SCT_C_CalculateRagdollLocationRotation, CallFunc_BreakHitResult_ImpactNormal) == 0x00016C, "Member 'AnimComponent_SCT_C_CalculateRagdollLocationRotation::CallFunc_BreakHitResult_ImpactNormal' has a wrong offset!");
static_assert(offsetof(AnimComponent_SCT_C_CalculateRagdollLocationRotation, CallFunc_BreakHitResult_PhysMat) == 0x000178, "Member 'AnimComponent_SCT_C_CalculateRagdollLocationRotation::CallFunc_BreakHitResult_PhysMat' has a wrong offset!");
static_assert(offsetof(AnimComponent_SCT_C_CalculateRagdollLocationRotation, CallFunc_BreakHitResult_HitActor) == 0x000180, "Member 'AnimComponent_SCT_C_CalculateRagdollLocationRotation::CallFunc_BreakHitResult_HitActor' has a wrong offset!");
static_assert(offsetof(AnimComponent_SCT_C_CalculateRagdollLocationRotation, CallFunc_BreakHitResult_HitComponent) == 0x000188, "Member 'AnimComponent_SCT_C_CalculateRagdollLocationRotation::CallFunc_BreakHitResult_HitComponent' has a wrong offset!");
static_assert(offsetof(AnimComponent_SCT_C_CalculateRagdollLocationRotation, CallFunc_BreakHitResult_HitBoneName) == 0x000190, "Member 'AnimComponent_SCT_C_CalculateRagdollLocationRotation::CallFunc_BreakHitResult_HitBoneName' has a wrong offset!");
static_assert(offsetof(AnimComponent_SCT_C_CalculateRagdollLocationRotation, CallFunc_BreakHitResult_HitItem) == 0x000198, "Member 'AnimComponent_SCT_C_CalculateRagdollLocationRotation::CallFunc_BreakHitResult_HitItem' has a wrong offset!");
static_assert(offsetof(AnimComponent_SCT_C_CalculateRagdollLocationRotation, CallFunc_BreakHitResult_FaceIndex) == 0x00019C, "Member 'AnimComponent_SCT_C_CalculateRagdollLocationRotation::CallFunc_BreakHitResult_FaceIndex' has a wrong offset!");
static_assert(offsetof(AnimComponent_SCT_C_CalculateRagdollLocationRotation, CallFunc_BreakHitResult_TraceStart) == 0x0001A0, "Member 'AnimComponent_SCT_C_CalculateRagdollLocationRotation::CallFunc_BreakHitResult_TraceStart' has a wrong offset!");
static_assert(offsetof(AnimComponent_SCT_C_CalculateRagdollLocationRotation, CallFunc_BreakHitResult_TraceEnd) == 0x0001AC, "Member 'AnimComponent_SCT_C_CalculateRagdollLocationRotation::CallFunc_BreakHitResult_TraceEnd' has a wrong offset!");
static_assert(offsetof(AnimComponent_SCT_C_CalculateRagdollLocationRotation, CallFunc_BreakVector_X_2) == 0x0001B8, "Member 'AnimComponent_SCT_C_CalculateRagdollLocationRotation::CallFunc_BreakVector_X_2' has a wrong offset!");
static_assert(offsetof(AnimComponent_SCT_C_CalculateRagdollLocationRotation, CallFunc_BreakVector_Y_2) == 0x0001BC, "Member 'AnimComponent_SCT_C_CalculateRagdollLocationRotation::CallFunc_BreakVector_Y_2' has a wrong offset!");
static_assert(offsetof(AnimComponent_SCT_C_CalculateRagdollLocationRotation, CallFunc_BreakVector_Z_2) == 0x0001C0, "Member 'AnimComponent_SCT_C_CalculateRagdollLocationRotation::CallFunc_BreakVector_Z_2' has a wrong offset!");
static_assert(offsetof(AnimComponent_SCT_C_CalculateRagdollLocationRotation, CallFunc_BreakVector_X_3) == 0x0001C4, "Member 'AnimComponent_SCT_C_CalculateRagdollLocationRotation::CallFunc_BreakVector_X_3' has a wrong offset!");
static_assert(offsetof(AnimComponent_SCT_C_CalculateRagdollLocationRotation, CallFunc_BreakVector_Y_3) == 0x0001C8, "Member 'AnimComponent_SCT_C_CalculateRagdollLocationRotation::CallFunc_BreakVector_Y_3' has a wrong offset!");
static_assert(offsetof(AnimComponent_SCT_C_CalculateRagdollLocationRotation, CallFunc_BreakVector_Z_3) == 0x0001CC, "Member 'AnimComponent_SCT_C_CalculateRagdollLocationRotation::CallFunc_BreakVector_Z_3' has a wrong offset!");
static_assert(offsetof(AnimComponent_SCT_C_CalculateRagdollLocationRotation, CallFunc_Subtract_FloatFloat_ReturnValue_2) == 0x0001D0, "Member 'AnimComponent_SCT_C_CalculateRagdollLocationRotation::CallFunc_Subtract_FloatFloat_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(AnimComponent_SCT_C_CalculateRagdollLocationRotation, CallFunc_Abs_ReturnValue) == 0x0001D4, "Member 'AnimComponent_SCT_C_CalculateRagdollLocationRotation::CallFunc_Abs_ReturnValue' has a wrong offset!");
static_assert(offsetof(AnimComponent_SCT_C_CalculateRagdollLocationRotation, CallFunc_Subtract_FloatFloat_ReturnValue_3) == 0x0001D8, "Member 'AnimComponent_SCT_C_CalculateRagdollLocationRotation::CallFunc_Subtract_FloatFloat_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(AnimComponent_SCT_C_CalculateRagdollLocationRotation, CallFunc_Add_FloatFloat_ReturnValue) == 0x0001DC, "Member 'AnimComponent_SCT_C_CalculateRagdollLocationRotation::CallFunc_Add_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(AnimComponent_SCT_C_CalculateRagdollLocationRotation, K2Node_Select_Default_1) == 0x0001E0, "Member 'AnimComponent_SCT_C_CalculateRagdollLocationRotation::K2Node_Select_Default_1' has a wrong offset!");
static_assert(offsetof(AnimComponent_SCT_C_CalculateRagdollLocationRotation, CallFunc_Add_FloatFloat_ReturnValue_1) == 0x0001E4, "Member 'AnimComponent_SCT_C_CalculateRagdollLocationRotation::CallFunc_Add_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(AnimComponent_SCT_C_CalculateRagdollLocationRotation, CallFunc_MakeVector_ReturnValue_1) == 0x0001E8, "Member 'AnimComponent_SCT_C_CalculateRagdollLocationRotation::CallFunc_MakeVector_ReturnValue_1' has a wrong offset!");

// Function AnimComponent_SCT.AnimComponent_SCT_C.Ragdoll
// 0x0138 (0x0138 - 0x0000)
struct AnimComponent_SCT_C_Ragdoll final
{
public:
	bool                                          ToRagdoll;                                         // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	Engine::EMovementMode                         Temp_byte_Variable;                                // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	Engine::EMovementMode                         Temp_byte_Variable_1;                              // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3[0x1];                                        // 0x0003(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetGameTimeInSeconds_ReturnValue;         // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetSocketLocation_ReturnValue;            // 0x0008(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_MakeLiteralName_ReturnValue;              // 0x0014(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_MakeLiteralName_ReturnValue_1;            // 0x001C(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_GetOwner_ReturnValue;                     // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AHumanoidCharacter*                     K2Node_DynamicCast_AsHumanoid_Character;           // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_39[0x3];                                       // 0x0039(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue;          // 0x003C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsAlive_ReturnValue;                      // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0049(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_HasAuthority_ReturnValue;                 // 0x004A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4B[0x1];                                       // 0x004B(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             CallFunc_K2_SetActorLocation_SweepHitResult;       // 0x004C(0x008C)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          CallFunc_K2_SetActorLocation_ReturnValue;          // 0x00D8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_D9[0x7];                                       // 0x00D9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IIAnimBp_C>            K2Node_DynamicCast_AsIAnim_Bp;                     // 0x00E0(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x00F0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_F1[0x7];                                       // 0x00F1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IIAnimBp_C>            K2Node_DynamicCast_AsIAnim_Bp_1;                   // 0x00F8(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper)
	bool                                          K2Node_DynamicCast_bSuccess_2;                     // 0x0108(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_109[0x3];                                      // 0x0109(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               CallFunc_GetSocketRotation_ReturnValue;            // 0x010C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FRotator                               CallFunc_ComposeRotators_ReturnValue;              // 0x0118(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_BreakRotator_Roll;                        // 0x0124(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Pitch;                       // 0x0128(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Yaw;                         // 0x012C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue;           // 0x0130(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable;                                // 0x0131(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	Engine::EMovementMode                         K2Node_Select_Default;                             // 0x0132(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_HasAuthority_ReturnValue_1;               // 0x0133(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(AnimComponent_SCT_C_Ragdoll) == 0x000008, "Wrong alignment on AnimComponent_SCT_C_Ragdoll");
static_assert(sizeof(AnimComponent_SCT_C_Ragdoll) == 0x000138, "Wrong size on AnimComponent_SCT_C_Ragdoll");
static_assert(offsetof(AnimComponent_SCT_C_Ragdoll, ToRagdoll) == 0x000000, "Member 'AnimComponent_SCT_C_Ragdoll::ToRagdoll' has a wrong offset!");
static_assert(offsetof(AnimComponent_SCT_C_Ragdoll, Temp_byte_Variable) == 0x000001, "Member 'AnimComponent_SCT_C_Ragdoll::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(AnimComponent_SCT_C_Ragdoll, Temp_byte_Variable_1) == 0x000002, "Member 'AnimComponent_SCT_C_Ragdoll::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(AnimComponent_SCT_C_Ragdoll, CallFunc_GetGameTimeInSeconds_ReturnValue) == 0x000004, "Member 'AnimComponent_SCT_C_Ragdoll::CallFunc_GetGameTimeInSeconds_ReturnValue' has a wrong offset!");
static_assert(offsetof(AnimComponent_SCT_C_Ragdoll, CallFunc_GetSocketLocation_ReturnValue) == 0x000008, "Member 'AnimComponent_SCT_C_Ragdoll::CallFunc_GetSocketLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(AnimComponent_SCT_C_Ragdoll, CallFunc_MakeLiteralName_ReturnValue) == 0x000014, "Member 'AnimComponent_SCT_C_Ragdoll::CallFunc_MakeLiteralName_ReturnValue' has a wrong offset!");
static_assert(offsetof(AnimComponent_SCT_C_Ragdoll, CallFunc_MakeLiteralName_ReturnValue_1) == 0x00001C, "Member 'AnimComponent_SCT_C_Ragdoll::CallFunc_MakeLiteralName_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(AnimComponent_SCT_C_Ragdoll, CallFunc_GetOwner_ReturnValue) == 0x000028, "Member 'AnimComponent_SCT_C_Ragdoll::CallFunc_GetOwner_ReturnValue' has a wrong offset!");
static_assert(offsetof(AnimComponent_SCT_C_Ragdoll, K2Node_DynamicCast_AsHumanoid_Character) == 0x000030, "Member 'AnimComponent_SCT_C_Ragdoll::K2Node_DynamicCast_AsHumanoid_Character' has a wrong offset!");
static_assert(offsetof(AnimComponent_SCT_C_Ragdoll, K2Node_DynamicCast_bSuccess) == 0x000038, "Member 'AnimComponent_SCT_C_Ragdoll::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(AnimComponent_SCT_C_Ragdoll, CallFunc_K2_GetActorLocation_ReturnValue) == 0x00003C, "Member 'AnimComponent_SCT_C_Ragdoll::CallFunc_K2_GetActorLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(AnimComponent_SCT_C_Ragdoll, CallFunc_IsAlive_ReturnValue) == 0x000048, "Member 'AnimComponent_SCT_C_Ragdoll::CallFunc_IsAlive_ReturnValue' has a wrong offset!");
static_assert(offsetof(AnimComponent_SCT_C_Ragdoll, CallFunc_Not_PreBool_ReturnValue) == 0x000049, "Member 'AnimComponent_SCT_C_Ragdoll::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(AnimComponent_SCT_C_Ragdoll, CallFunc_HasAuthority_ReturnValue) == 0x00004A, "Member 'AnimComponent_SCT_C_Ragdoll::CallFunc_HasAuthority_ReturnValue' has a wrong offset!");
static_assert(offsetof(AnimComponent_SCT_C_Ragdoll, CallFunc_K2_SetActorLocation_SweepHitResult) == 0x00004C, "Member 'AnimComponent_SCT_C_Ragdoll::CallFunc_K2_SetActorLocation_SweepHitResult' has a wrong offset!");
static_assert(offsetof(AnimComponent_SCT_C_Ragdoll, CallFunc_K2_SetActorLocation_ReturnValue) == 0x0000D8, "Member 'AnimComponent_SCT_C_Ragdoll::CallFunc_K2_SetActorLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(AnimComponent_SCT_C_Ragdoll, K2Node_DynamicCast_AsIAnim_Bp) == 0x0000E0, "Member 'AnimComponent_SCT_C_Ragdoll::K2Node_DynamicCast_AsIAnim_Bp' has a wrong offset!");
static_assert(offsetof(AnimComponent_SCT_C_Ragdoll, K2Node_DynamicCast_bSuccess_1) == 0x0000F0, "Member 'AnimComponent_SCT_C_Ragdoll::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(AnimComponent_SCT_C_Ragdoll, K2Node_DynamicCast_AsIAnim_Bp_1) == 0x0000F8, "Member 'AnimComponent_SCT_C_Ragdoll::K2Node_DynamicCast_AsIAnim_Bp_1' has a wrong offset!");
static_assert(offsetof(AnimComponent_SCT_C_Ragdoll, K2Node_DynamicCast_bSuccess_2) == 0x000108, "Member 'AnimComponent_SCT_C_Ragdoll::K2Node_DynamicCast_bSuccess_2' has a wrong offset!");
static_assert(offsetof(AnimComponent_SCT_C_Ragdoll, CallFunc_GetSocketRotation_ReturnValue) == 0x00010C, "Member 'AnimComponent_SCT_C_Ragdoll::CallFunc_GetSocketRotation_ReturnValue' has a wrong offset!");
static_assert(offsetof(AnimComponent_SCT_C_Ragdoll, CallFunc_ComposeRotators_ReturnValue) == 0x000118, "Member 'AnimComponent_SCT_C_Ragdoll::CallFunc_ComposeRotators_ReturnValue' has a wrong offset!");
static_assert(offsetof(AnimComponent_SCT_C_Ragdoll, CallFunc_BreakRotator_Roll) == 0x000124, "Member 'AnimComponent_SCT_C_Ragdoll::CallFunc_BreakRotator_Roll' has a wrong offset!");
static_assert(offsetof(AnimComponent_SCT_C_Ragdoll, CallFunc_BreakRotator_Pitch) == 0x000128, "Member 'AnimComponent_SCT_C_Ragdoll::CallFunc_BreakRotator_Pitch' has a wrong offset!");
static_assert(offsetof(AnimComponent_SCT_C_Ragdoll, CallFunc_BreakRotator_Yaw) == 0x00012C, "Member 'AnimComponent_SCT_C_Ragdoll::CallFunc_BreakRotator_Yaw' has a wrong offset!");
static_assert(offsetof(AnimComponent_SCT_C_Ragdoll, CallFunc_Greater_FloatFloat_ReturnValue) == 0x000130, "Member 'AnimComponent_SCT_C_Ragdoll::CallFunc_Greater_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(AnimComponent_SCT_C_Ragdoll, Temp_bool_Variable) == 0x000131, "Member 'AnimComponent_SCT_C_Ragdoll::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(AnimComponent_SCT_C_Ragdoll, K2Node_Select_Default) == 0x000132, "Member 'AnimComponent_SCT_C_Ragdoll::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(AnimComponent_SCT_C_Ragdoll, CallFunc_HasAuthority_ReturnValue_1) == 0x000133, "Member 'AnimComponent_SCT_C_Ragdoll::CallFunc_HasAuthority_ReturnValue_1' has a wrong offset!");

// Function AnimComponent_SCT.AnimComponent_SCT_C.RagdollLaunchForce
// 0x00C0 (0x00C0 - 0x0000)
struct AnimComponent_SCT_C_RagdollLaunchForce final
{
public:
	int32                                         Temp_int_Variable;                                 // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   Temp_name_Variable;                                // 0x0004(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   Temp_name_Variable_1;                              // 0x000C(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   Temp_name_Variable_2;                              // 0x0014(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   Temp_name_Variable_3;                              // 0x001C(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   Temp_name_Variable_4;                              // 0x0024(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   Temp_name_Variable_5;                              // 0x002C(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_MakeLiteralName_ReturnValue;              // 0x0034(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_RandomIntegerInRange_ReturnValue;         // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakTransform_Location;                  // 0x0040(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_BreakTransform_Rotation;                  // 0x004C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_BreakTransform_Scale;                     // 0x0058(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   K2Node_Select_Default;                             // 0x0064(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Roll;                        // 0x006C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Pitch;                       // 0x0070(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Yaw;                         // 0x0074(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue;                   // 0x0078(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetSocketLocation_ReturnValue;            // 0x0084(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsSimulatingPhysics_ReturnValue;          // 0x0090(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_91[0x3];                                       // 0x0091(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_Subtract_VectorVector_ReturnValue;        // 0x0094(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Normal_ReturnValue;                       // 0x00A0(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorFloat_ReturnValue;         // 0x00AC(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Dot_VectorVector_ReturnValue;             // 0x00B8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue;           // 0x00BC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x00BD(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(AnimComponent_SCT_C_RagdollLaunchForce) == 0x000004, "Wrong alignment on AnimComponent_SCT_C_RagdollLaunchForce");
static_assert(sizeof(AnimComponent_SCT_C_RagdollLaunchForce) == 0x0000C0, "Wrong size on AnimComponent_SCT_C_RagdollLaunchForce");
static_assert(offsetof(AnimComponent_SCT_C_RagdollLaunchForce, Temp_int_Variable) == 0x000000, "Member 'AnimComponent_SCT_C_RagdollLaunchForce::Temp_int_Variable' has a wrong offset!");
static_assert(offsetof(AnimComponent_SCT_C_RagdollLaunchForce, Temp_name_Variable) == 0x000004, "Member 'AnimComponent_SCT_C_RagdollLaunchForce::Temp_name_Variable' has a wrong offset!");
static_assert(offsetof(AnimComponent_SCT_C_RagdollLaunchForce, Temp_name_Variable_1) == 0x00000C, "Member 'AnimComponent_SCT_C_RagdollLaunchForce::Temp_name_Variable_1' has a wrong offset!");
static_assert(offsetof(AnimComponent_SCT_C_RagdollLaunchForce, Temp_name_Variable_2) == 0x000014, "Member 'AnimComponent_SCT_C_RagdollLaunchForce::Temp_name_Variable_2' has a wrong offset!");
static_assert(offsetof(AnimComponent_SCT_C_RagdollLaunchForce, Temp_name_Variable_3) == 0x00001C, "Member 'AnimComponent_SCT_C_RagdollLaunchForce::Temp_name_Variable_3' has a wrong offset!");
static_assert(offsetof(AnimComponent_SCT_C_RagdollLaunchForce, Temp_name_Variable_4) == 0x000024, "Member 'AnimComponent_SCT_C_RagdollLaunchForce::Temp_name_Variable_4' has a wrong offset!");
static_assert(offsetof(AnimComponent_SCT_C_RagdollLaunchForce, Temp_name_Variable_5) == 0x00002C, "Member 'AnimComponent_SCT_C_RagdollLaunchForce::Temp_name_Variable_5' has a wrong offset!");
static_assert(offsetof(AnimComponent_SCT_C_RagdollLaunchForce, CallFunc_MakeLiteralName_ReturnValue) == 0x000034, "Member 'AnimComponent_SCT_C_RagdollLaunchForce::CallFunc_MakeLiteralName_ReturnValue' has a wrong offset!");
static_assert(offsetof(AnimComponent_SCT_C_RagdollLaunchForce, CallFunc_RandomIntegerInRange_ReturnValue) == 0x00003C, "Member 'AnimComponent_SCT_C_RagdollLaunchForce::CallFunc_RandomIntegerInRange_ReturnValue' has a wrong offset!");
static_assert(offsetof(AnimComponent_SCT_C_RagdollLaunchForce, CallFunc_BreakTransform_Location) == 0x000040, "Member 'AnimComponent_SCT_C_RagdollLaunchForce::CallFunc_BreakTransform_Location' has a wrong offset!");
static_assert(offsetof(AnimComponent_SCT_C_RagdollLaunchForce, CallFunc_BreakTransform_Rotation) == 0x00004C, "Member 'AnimComponent_SCT_C_RagdollLaunchForce::CallFunc_BreakTransform_Rotation' has a wrong offset!");
static_assert(offsetof(AnimComponent_SCT_C_RagdollLaunchForce, CallFunc_BreakTransform_Scale) == 0x000058, "Member 'AnimComponent_SCT_C_RagdollLaunchForce::CallFunc_BreakTransform_Scale' has a wrong offset!");
static_assert(offsetof(AnimComponent_SCT_C_RagdollLaunchForce, K2Node_Select_Default) == 0x000064, "Member 'AnimComponent_SCT_C_RagdollLaunchForce::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(AnimComponent_SCT_C_RagdollLaunchForce, CallFunc_BreakRotator_Roll) == 0x00006C, "Member 'AnimComponent_SCT_C_RagdollLaunchForce::CallFunc_BreakRotator_Roll' has a wrong offset!");
static_assert(offsetof(AnimComponent_SCT_C_RagdollLaunchForce, CallFunc_BreakRotator_Pitch) == 0x000070, "Member 'AnimComponent_SCT_C_RagdollLaunchForce::CallFunc_BreakRotator_Pitch' has a wrong offset!");
static_assert(offsetof(AnimComponent_SCT_C_RagdollLaunchForce, CallFunc_BreakRotator_Yaw) == 0x000074, "Member 'AnimComponent_SCT_C_RagdollLaunchForce::CallFunc_BreakRotator_Yaw' has a wrong offset!");
static_assert(offsetof(AnimComponent_SCT_C_RagdollLaunchForce, CallFunc_MakeVector_ReturnValue) == 0x000078, "Member 'AnimComponent_SCT_C_RagdollLaunchForce::CallFunc_MakeVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(AnimComponent_SCT_C_RagdollLaunchForce, CallFunc_GetSocketLocation_ReturnValue) == 0x000084, "Member 'AnimComponent_SCT_C_RagdollLaunchForce::CallFunc_GetSocketLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(AnimComponent_SCT_C_RagdollLaunchForce, CallFunc_IsSimulatingPhysics_ReturnValue) == 0x000090, "Member 'AnimComponent_SCT_C_RagdollLaunchForce::CallFunc_IsSimulatingPhysics_ReturnValue' has a wrong offset!");
static_assert(offsetof(AnimComponent_SCT_C_RagdollLaunchForce, CallFunc_Subtract_VectorVector_ReturnValue) == 0x000094, "Member 'AnimComponent_SCT_C_RagdollLaunchForce::CallFunc_Subtract_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(AnimComponent_SCT_C_RagdollLaunchForce, CallFunc_Normal_ReturnValue) == 0x0000A0, "Member 'AnimComponent_SCT_C_RagdollLaunchForce::CallFunc_Normal_ReturnValue' has a wrong offset!");
static_assert(offsetof(AnimComponent_SCT_C_RagdollLaunchForce, CallFunc_Multiply_VectorFloat_ReturnValue) == 0x0000AC, "Member 'AnimComponent_SCT_C_RagdollLaunchForce::CallFunc_Multiply_VectorFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(AnimComponent_SCT_C_RagdollLaunchForce, CallFunc_Dot_VectorVector_ReturnValue) == 0x0000B8, "Member 'AnimComponent_SCT_C_RagdollLaunchForce::CallFunc_Dot_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(AnimComponent_SCT_C_RagdollLaunchForce, CallFunc_Greater_FloatFloat_ReturnValue) == 0x0000BC, "Member 'AnimComponent_SCT_C_RagdollLaunchForce::CallFunc_Greater_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(AnimComponent_SCT_C_RagdollLaunchForce, CallFunc_BooleanAND_ReturnValue) == 0x0000BD, "Member 'AnimComponent_SCT_C_RagdollLaunchForce::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");

// Function AnimComponent_SCT.AnimComponent_SCT_C.OnRep_isDancing
// 0x0018 (0x0018 - 0x0000)
struct AnimComponent_SCT_C_OnRep_isDancing final
{
public:
	class UAnimInstance*                          CallFunc_GetAnimInstance_ReturnValue;              // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAnimBpSCT_C*                           K2Node_DynamicCast_AsAnim_Bp_SCT;                  // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(AnimComponent_SCT_C_OnRep_isDancing) == 0x000008, "Wrong alignment on AnimComponent_SCT_C_OnRep_isDancing");
static_assert(sizeof(AnimComponent_SCT_C_OnRep_isDancing) == 0x000018, "Wrong size on AnimComponent_SCT_C_OnRep_isDancing");
static_assert(offsetof(AnimComponent_SCT_C_OnRep_isDancing, CallFunc_GetAnimInstance_ReturnValue) == 0x000000, "Member 'AnimComponent_SCT_C_OnRep_isDancing::CallFunc_GetAnimInstance_ReturnValue' has a wrong offset!");
static_assert(offsetof(AnimComponent_SCT_C_OnRep_isDancing, K2Node_DynamicCast_AsAnim_Bp_SCT) == 0x000008, "Member 'AnimComponent_SCT_C_OnRep_isDancing::K2Node_DynamicCast_AsAnim_Bp_SCT' has a wrong offset!");
static_assert(offsetof(AnimComponent_SCT_C_OnRep_isDancing, K2Node_DynamicCast_bSuccess) == 0x000010, "Member 'AnimComponent_SCT_C_OnRep_isDancing::K2Node_DynamicCast_bSuccess' has a wrong offset!");

// Function AnimComponent_SCT.AnimComponent_SCT_C.generateRandomIntArray
// 0x0014 (0x0014 - 0x0000)
struct AnimComponent_SCT_C_GenerateRandomIntArray final
{
public:
	int32                                         Temp_int_Variable;                                 // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_RandomIntegerFromStream_ReturnValue;      // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_IntInt_ReturnValue;             // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Add_ReturnValue;                    // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(AnimComponent_SCT_C_GenerateRandomIntArray) == 0x000004, "Wrong alignment on AnimComponent_SCT_C_GenerateRandomIntArray");
static_assert(sizeof(AnimComponent_SCT_C_GenerateRandomIntArray) == 0x000014, "Wrong size on AnimComponent_SCT_C_GenerateRandomIntArray");
static_assert(offsetof(AnimComponent_SCT_C_GenerateRandomIntArray, Temp_int_Variable) == 0x000000, "Member 'AnimComponent_SCT_C_GenerateRandomIntArray::Temp_int_Variable' has a wrong offset!");
static_assert(offsetof(AnimComponent_SCT_C_GenerateRandomIntArray, CallFunc_RandomIntegerFromStream_ReturnValue) == 0x000004, "Member 'AnimComponent_SCT_C_GenerateRandomIntArray::CallFunc_RandomIntegerFromStream_ReturnValue' has a wrong offset!");
static_assert(offsetof(AnimComponent_SCT_C_GenerateRandomIntArray, CallFunc_LessEqual_IntInt_ReturnValue) == 0x000008, "Member 'AnimComponent_SCT_C_GenerateRandomIntArray::CallFunc_LessEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(AnimComponent_SCT_C_GenerateRandomIntArray, CallFunc_Array_Add_ReturnValue) == 0x00000C, "Member 'AnimComponent_SCT_C_GenerateRandomIntArray::CallFunc_Array_Add_ReturnValue' has a wrong offset!");
static_assert(offsetof(AnimComponent_SCT_C_GenerateRandomIntArray, CallFunc_Add_IntInt_ReturnValue) == 0x000010, "Member 'AnimComponent_SCT_C_GenerateRandomIntArray::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");

// Function AnimComponent_SCT.AnimComponent_SCT_C.OnRep_isDrowning
// 0x0038 (0x0038 - 0x0000)
struct AnimComponent_SCT_C_OnRep_isDrowning final
{
public:
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Conv_BoolToFloat_ReturnValue;             // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAnimInstance*                          CallFunc_GetAnimInstance_ReturnValue;              // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USCT_AnimBpSCT_C*                       K2Node_DynamicCast_AsSCT_Anim_Bp_SCT;              // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IIAnimBp_C>            K2Node_DynamicCast_AsIAnim_Bp;                     // 0x0020(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(AnimComponent_SCT_C_OnRep_isDrowning) == 0x000008, "Wrong alignment on AnimComponent_SCT_C_OnRep_isDrowning");
static_assert(sizeof(AnimComponent_SCT_C_OnRep_isDrowning) == 0x000038, "Wrong size on AnimComponent_SCT_C_OnRep_isDrowning");
static_assert(offsetof(AnimComponent_SCT_C_OnRep_isDrowning, CallFunc_Not_PreBool_ReturnValue) == 0x000000, "Member 'AnimComponent_SCT_C_OnRep_isDrowning::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(AnimComponent_SCT_C_OnRep_isDrowning, CallFunc_Conv_BoolToFloat_ReturnValue) == 0x000004, "Member 'AnimComponent_SCT_C_OnRep_isDrowning::CallFunc_Conv_BoolToFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(AnimComponent_SCT_C_OnRep_isDrowning, CallFunc_GetAnimInstance_ReturnValue) == 0x000008, "Member 'AnimComponent_SCT_C_OnRep_isDrowning::CallFunc_GetAnimInstance_ReturnValue' has a wrong offset!");
static_assert(offsetof(AnimComponent_SCT_C_OnRep_isDrowning, K2Node_DynamicCast_AsSCT_Anim_Bp_SCT) == 0x000010, "Member 'AnimComponent_SCT_C_OnRep_isDrowning::K2Node_DynamicCast_AsSCT_Anim_Bp_SCT' has a wrong offset!");
static_assert(offsetof(AnimComponent_SCT_C_OnRep_isDrowning, K2Node_DynamicCast_bSuccess) == 0x000018, "Member 'AnimComponent_SCT_C_OnRep_isDrowning::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(AnimComponent_SCT_C_OnRep_isDrowning, K2Node_DynamicCast_AsIAnim_Bp) == 0x000020, "Member 'AnimComponent_SCT_C_OnRep_isDrowning::K2Node_DynamicCast_AsIAnim_Bp' has a wrong offset!");
static_assert(offsetof(AnimComponent_SCT_C_OnRep_isDrowning, K2Node_DynamicCast_bSuccess_1) == 0x000030, "Member 'AnimComponent_SCT_C_OnRep_isDrowning::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");

// Function AnimComponent_SCT.AnimComponent_SCT_C.OnRep_isDrowned
// 0x0038 (0x0038 - 0x0000)
struct AnimComponent_SCT_C_OnRep_isDrowned final
{
public:
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Conv_BoolToFloat_ReturnValue;             // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAnimInstance*                          CallFunc_GetAnimInstance_ReturnValue;              // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USCT_AnimBpSCT_C*                       K2Node_DynamicCast_AsSCT_Anim_Bp_SCT;              // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IIAnimBp_C>            K2Node_DynamicCast_AsIAnim_Bp;                     // 0x0020(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(AnimComponent_SCT_C_OnRep_isDrowned) == 0x000008, "Wrong alignment on AnimComponent_SCT_C_OnRep_isDrowned");
static_assert(sizeof(AnimComponent_SCT_C_OnRep_isDrowned) == 0x000038, "Wrong size on AnimComponent_SCT_C_OnRep_isDrowned");
static_assert(offsetof(AnimComponent_SCT_C_OnRep_isDrowned, CallFunc_Not_PreBool_ReturnValue) == 0x000000, "Member 'AnimComponent_SCT_C_OnRep_isDrowned::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(AnimComponent_SCT_C_OnRep_isDrowned, CallFunc_Conv_BoolToFloat_ReturnValue) == 0x000004, "Member 'AnimComponent_SCT_C_OnRep_isDrowned::CallFunc_Conv_BoolToFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(AnimComponent_SCT_C_OnRep_isDrowned, CallFunc_GetAnimInstance_ReturnValue) == 0x000008, "Member 'AnimComponent_SCT_C_OnRep_isDrowned::CallFunc_GetAnimInstance_ReturnValue' has a wrong offset!");
static_assert(offsetof(AnimComponent_SCT_C_OnRep_isDrowned, K2Node_DynamicCast_AsSCT_Anim_Bp_SCT) == 0x000010, "Member 'AnimComponent_SCT_C_OnRep_isDrowned::K2Node_DynamicCast_AsSCT_Anim_Bp_SCT' has a wrong offset!");
static_assert(offsetof(AnimComponent_SCT_C_OnRep_isDrowned, K2Node_DynamicCast_bSuccess) == 0x000018, "Member 'AnimComponent_SCT_C_OnRep_isDrowned::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(AnimComponent_SCT_C_OnRep_isDrowned, K2Node_DynamicCast_AsIAnim_Bp) == 0x000020, "Member 'AnimComponent_SCT_C_OnRep_isDrowned::K2Node_DynamicCast_AsIAnim_Bp' has a wrong offset!");
static_assert(offsetof(AnimComponent_SCT_C_OnRep_isDrowned, K2Node_DynamicCast_bSuccess_1) == 0x000030, "Member 'AnimComponent_SCT_C_OnRep_isDrowned::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");

// Function AnimComponent_SCT.AnimComponent_SCT_C.OnRep_isFreezing
// 0x0018 (0x0018 - 0x0000)
struct AnimComponent_SCT_C_OnRep_isFreezing final
{
public:
	class UAnimInstance*                          CallFunc_GetAnimInstance_ReturnValue;              // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USCT_AnimBpSCT_C*                       K2Node_DynamicCast_AsSCT_Anim_Bp_SCT;              // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(AnimComponent_SCT_C_OnRep_isFreezing) == 0x000008, "Wrong alignment on AnimComponent_SCT_C_OnRep_isFreezing");
static_assert(sizeof(AnimComponent_SCT_C_OnRep_isFreezing) == 0x000018, "Wrong size on AnimComponent_SCT_C_OnRep_isFreezing");
static_assert(offsetof(AnimComponent_SCT_C_OnRep_isFreezing, CallFunc_GetAnimInstance_ReturnValue) == 0x000000, "Member 'AnimComponent_SCT_C_OnRep_isFreezing::CallFunc_GetAnimInstance_ReturnValue' has a wrong offset!");
static_assert(offsetof(AnimComponent_SCT_C_OnRep_isFreezing, K2Node_DynamicCast_AsSCT_Anim_Bp_SCT) == 0x000008, "Member 'AnimComponent_SCT_C_OnRep_isFreezing::K2Node_DynamicCast_AsSCT_Anim_Bp_SCT' has a wrong offset!");
static_assert(offsetof(AnimComponent_SCT_C_OnRep_isFreezing, K2Node_DynamicCast_bSuccess) == 0x000010, "Member 'AnimComponent_SCT_C_OnRep_isFreezing::K2Node_DynamicCast_bSuccess' has a wrong offset!");

// Function AnimComponent_SCT.AnimComponent_SCT_C.OnRep_isBurning
// 0x0018 (0x0018 - 0x0000)
struct AnimComponent_SCT_C_OnRep_isBurning final
{
public:
	class UAnimInstance*                          CallFunc_GetAnimInstance_ReturnValue;              // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USCT_AnimBpSCT_C*                       K2Node_DynamicCast_AsSCT_Anim_Bp_SCT;              // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(AnimComponent_SCT_C_OnRep_isBurning) == 0x000008, "Wrong alignment on AnimComponent_SCT_C_OnRep_isBurning");
static_assert(sizeof(AnimComponent_SCT_C_OnRep_isBurning) == 0x000018, "Wrong size on AnimComponent_SCT_C_OnRep_isBurning");
static_assert(offsetof(AnimComponent_SCT_C_OnRep_isBurning, CallFunc_GetAnimInstance_ReturnValue) == 0x000000, "Member 'AnimComponent_SCT_C_OnRep_isBurning::CallFunc_GetAnimInstance_ReturnValue' has a wrong offset!");
static_assert(offsetof(AnimComponent_SCT_C_OnRep_isBurning, K2Node_DynamicCast_AsSCT_Anim_Bp_SCT) == 0x000008, "Member 'AnimComponent_SCT_C_OnRep_isBurning::K2Node_DynamicCast_AsSCT_Anim_Bp_SCT' has a wrong offset!");
static_assert(offsetof(AnimComponent_SCT_C_OnRep_isBurning, K2Node_DynamicCast_bSuccess) == 0x000010, "Member 'AnimComponent_SCT_C_OnRep_isBurning::K2Node_DynamicCast_bSuccess' has a wrong offset!");

// Function AnimComponent_SCT.AnimComponent_SCT_C.OnRep_isBurned
// 0x0020 (0x0020 - 0x0000)
struct AnimComponent_SCT_C_OnRep_isBurned final
{
public:
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UAnimInstance*                          CallFunc_GetAnimInstance_ReturnValue;              // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USCT_AnimBpSCT_C*                       K2Node_DynamicCast_AsSCT_Anim_Bp_SCT;              // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(AnimComponent_SCT_C_OnRep_isBurned) == 0x000008, "Wrong alignment on AnimComponent_SCT_C_OnRep_isBurned");
static_assert(sizeof(AnimComponent_SCT_C_OnRep_isBurned) == 0x000020, "Wrong size on AnimComponent_SCT_C_OnRep_isBurned");
static_assert(offsetof(AnimComponent_SCT_C_OnRep_isBurned, CallFunc_Not_PreBool_ReturnValue) == 0x000000, "Member 'AnimComponent_SCT_C_OnRep_isBurned::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(AnimComponent_SCT_C_OnRep_isBurned, CallFunc_GetAnimInstance_ReturnValue) == 0x000008, "Member 'AnimComponent_SCT_C_OnRep_isBurned::CallFunc_GetAnimInstance_ReturnValue' has a wrong offset!");
static_assert(offsetof(AnimComponent_SCT_C_OnRep_isBurned, K2Node_DynamicCast_AsSCT_Anim_Bp_SCT) == 0x000010, "Member 'AnimComponent_SCT_C_OnRep_isBurned::K2Node_DynamicCast_AsSCT_Anim_Bp_SCT' has a wrong offset!");
static_assert(offsetof(AnimComponent_SCT_C_OnRep_isBurned, K2Node_DynamicCast_bSuccess) == 0x000018, "Member 'AnimComponent_SCT_C_OnRep_isBurned::K2Node_DynamicCast_bSuccess' has a wrong offset!");

// Function AnimComponent_SCT.AnimComponent_SCT_C.OnRep_isPushing
// 0x0018 (0x0018 - 0x0000)
struct AnimComponent_SCT_C_OnRep_isPushing final
{
public:
	class UAnimInstance*                          CallFunc_GetAnimInstance_ReturnValue;              // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USCT_AnimBpSCT_C*                       K2Node_DynamicCast_AsSCT_Anim_Bp_SCT;              // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(AnimComponent_SCT_C_OnRep_isPushing) == 0x000008, "Wrong alignment on AnimComponent_SCT_C_OnRep_isPushing");
static_assert(sizeof(AnimComponent_SCT_C_OnRep_isPushing) == 0x000018, "Wrong size on AnimComponent_SCT_C_OnRep_isPushing");
static_assert(offsetof(AnimComponent_SCT_C_OnRep_isPushing, CallFunc_GetAnimInstance_ReturnValue) == 0x000000, "Member 'AnimComponent_SCT_C_OnRep_isPushing::CallFunc_GetAnimInstance_ReturnValue' has a wrong offset!");
static_assert(offsetof(AnimComponent_SCT_C_OnRep_isPushing, K2Node_DynamicCast_AsSCT_Anim_Bp_SCT) == 0x000008, "Member 'AnimComponent_SCT_C_OnRep_isPushing::K2Node_DynamicCast_AsSCT_Anim_Bp_SCT' has a wrong offset!");
static_assert(offsetof(AnimComponent_SCT_C_OnRep_isPushing, K2Node_DynamicCast_bSuccess) == 0x000010, "Member 'AnimComponent_SCT_C_OnRep_isPushing::K2Node_DynamicCast_bSuccess' has a wrong offset!");

// Function AnimComponent_SCT.AnimComponent_SCT_C.OnRep_isOxygenPot
// 0x0018 (0x0018 - 0x0000)
struct AnimComponent_SCT_C_OnRep_isOxygenPot final
{
public:
	class UAnimInstance*                          CallFunc_GetAnimInstance_ReturnValue;              // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USCT_AnimBpSCT_C*                       K2Node_DynamicCast_AsSCT_Anim_Bp_SCT;              // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(AnimComponent_SCT_C_OnRep_isOxygenPot) == 0x000008, "Wrong alignment on AnimComponent_SCT_C_OnRep_isOxygenPot");
static_assert(sizeof(AnimComponent_SCT_C_OnRep_isOxygenPot) == 0x000018, "Wrong size on AnimComponent_SCT_C_OnRep_isOxygenPot");
static_assert(offsetof(AnimComponent_SCT_C_OnRep_isOxygenPot, CallFunc_GetAnimInstance_ReturnValue) == 0x000000, "Member 'AnimComponent_SCT_C_OnRep_isOxygenPot::CallFunc_GetAnimInstance_ReturnValue' has a wrong offset!");
static_assert(offsetof(AnimComponent_SCT_C_OnRep_isOxygenPot, K2Node_DynamicCast_AsSCT_Anim_Bp_SCT) == 0x000008, "Member 'AnimComponent_SCT_C_OnRep_isOxygenPot::K2Node_DynamicCast_AsSCT_Anim_Bp_SCT' has a wrong offset!");
static_assert(offsetof(AnimComponent_SCT_C_OnRep_isOxygenPot, K2Node_DynamicCast_bSuccess) == 0x000010, "Member 'AnimComponent_SCT_C_OnRep_isOxygenPot::K2Node_DynamicCast_bSuccess' has a wrong offset!");

// Function AnimComponent_SCT.AnimComponent_SCT_C.OnRep_isThrowing
// 0x0018 (0x0018 - 0x0000)
struct AnimComponent_SCT_C_OnRep_isThrowing final
{
public:
	class UAnimInstance*                          CallFunc_GetAnimInstance_ReturnValue;              // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USCT_AnimBpSCT_C*                       K2Node_DynamicCast_AsSCT_Anim_Bp_SCT;              // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(AnimComponent_SCT_C_OnRep_isThrowing) == 0x000008, "Wrong alignment on AnimComponent_SCT_C_OnRep_isThrowing");
static_assert(sizeof(AnimComponent_SCT_C_OnRep_isThrowing) == 0x000018, "Wrong size on AnimComponent_SCT_C_OnRep_isThrowing");
static_assert(offsetof(AnimComponent_SCT_C_OnRep_isThrowing, CallFunc_GetAnimInstance_ReturnValue) == 0x000000, "Member 'AnimComponent_SCT_C_OnRep_isThrowing::CallFunc_GetAnimInstance_ReturnValue' has a wrong offset!");
static_assert(offsetof(AnimComponent_SCT_C_OnRep_isThrowing, K2Node_DynamicCast_AsSCT_Anim_Bp_SCT) == 0x000008, "Member 'AnimComponent_SCT_C_OnRep_isThrowing::K2Node_DynamicCast_AsSCT_Anim_Bp_SCT' has a wrong offset!");
static_assert(offsetof(AnimComponent_SCT_C_OnRep_isThrowing, K2Node_DynamicCast_bSuccess) == 0x000010, "Member 'AnimComponent_SCT_C_OnRep_isThrowing::K2Node_DynamicCast_bSuccess' has a wrong offset!");

// Function AnimComponent_SCT.AnimComponent_SCT_C.OnRep_isElectrocuting
// 0x0018 (0x0018 - 0x0000)
struct AnimComponent_SCT_C_OnRep_isElectrocuting final
{
public:
	class UAnimInstance*                          CallFunc_GetAnimInstance_ReturnValue;              // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USCT_AnimBpSCT_C*                       K2Node_DynamicCast_AsSCT_Anim_Bp_SCT;              // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(AnimComponent_SCT_C_OnRep_isElectrocuting) == 0x000008, "Wrong alignment on AnimComponent_SCT_C_OnRep_isElectrocuting");
static_assert(sizeof(AnimComponent_SCT_C_OnRep_isElectrocuting) == 0x000018, "Wrong size on AnimComponent_SCT_C_OnRep_isElectrocuting");
static_assert(offsetof(AnimComponent_SCT_C_OnRep_isElectrocuting, CallFunc_GetAnimInstance_ReturnValue) == 0x000000, "Member 'AnimComponent_SCT_C_OnRep_isElectrocuting::CallFunc_GetAnimInstance_ReturnValue' has a wrong offset!");
static_assert(offsetof(AnimComponent_SCT_C_OnRep_isElectrocuting, K2Node_DynamicCast_AsSCT_Anim_Bp_SCT) == 0x000008, "Member 'AnimComponent_SCT_C_OnRep_isElectrocuting::K2Node_DynamicCast_AsSCT_Anim_Bp_SCT' has a wrong offset!");
static_assert(offsetof(AnimComponent_SCT_C_OnRep_isElectrocuting, K2Node_DynamicCast_bSuccess) == 0x000010, "Member 'AnimComponent_SCT_C_OnRep_isElectrocuting::K2Node_DynamicCast_bSuccess' has a wrong offset!");

// Function AnimComponent_SCT.AnimComponent_SCT_C.OnRep_isElectrocuted
// 0x0020 (0x0020 - 0x0000)
struct AnimComponent_SCT_C_OnRep_isElectrocuted final
{
public:
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Conv_BoolToFloat_ReturnValue;             // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAnimInstance*                          CallFunc_GetAnimInstance_ReturnValue;              // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USCT_AnimBpSCT_C*                       K2Node_DynamicCast_AsSCT_Anim_Bp_SCT;              // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(AnimComponent_SCT_C_OnRep_isElectrocuted) == 0x000008, "Wrong alignment on AnimComponent_SCT_C_OnRep_isElectrocuted");
static_assert(sizeof(AnimComponent_SCT_C_OnRep_isElectrocuted) == 0x000020, "Wrong size on AnimComponent_SCT_C_OnRep_isElectrocuted");
static_assert(offsetof(AnimComponent_SCT_C_OnRep_isElectrocuted, CallFunc_Not_PreBool_ReturnValue) == 0x000000, "Member 'AnimComponent_SCT_C_OnRep_isElectrocuted::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(AnimComponent_SCT_C_OnRep_isElectrocuted, CallFunc_Conv_BoolToFloat_ReturnValue) == 0x000004, "Member 'AnimComponent_SCT_C_OnRep_isElectrocuted::CallFunc_Conv_BoolToFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(AnimComponent_SCT_C_OnRep_isElectrocuted, CallFunc_GetAnimInstance_ReturnValue) == 0x000008, "Member 'AnimComponent_SCT_C_OnRep_isElectrocuted::CallFunc_GetAnimInstance_ReturnValue' has a wrong offset!");
static_assert(offsetof(AnimComponent_SCT_C_OnRep_isElectrocuted, K2Node_DynamicCast_AsSCT_Anim_Bp_SCT) == 0x000010, "Member 'AnimComponent_SCT_C_OnRep_isElectrocuted::K2Node_DynamicCast_AsSCT_Anim_Bp_SCT' has a wrong offset!");
static_assert(offsetof(AnimComponent_SCT_C_OnRep_isElectrocuted, K2Node_DynamicCast_bSuccess) == 0x000018, "Member 'AnimComponent_SCT_C_OnRep_isElectrocuted::K2Node_DynamicCast_bSuccess' has a wrong offset!");

// Function AnimComponent_SCT.AnimComponent_SCT_C.Interaction Anim
// 0x0005 (0x0005 - 0x0000)
struct AnimComponent_SCT_C_Interaction_Anim final
{
public:
	E_interactionAnim                             Animation;                                         // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_interactionAnimState                        State;                                             // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FInteractionAnim                       K2Node_MakeStruct_interactionAnim;                 // 0x0002(0x0002)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_HasAuthority_ReturnValue;                 // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(AnimComponent_SCT_C_Interaction_Anim) == 0x000001, "Wrong alignment on AnimComponent_SCT_C_Interaction_Anim");
static_assert(sizeof(AnimComponent_SCT_C_Interaction_Anim) == 0x000005, "Wrong size on AnimComponent_SCT_C_Interaction_Anim");
static_assert(offsetof(AnimComponent_SCT_C_Interaction_Anim, Animation) == 0x000000, "Member 'AnimComponent_SCT_C_Interaction_Anim::Animation' has a wrong offset!");
static_assert(offsetof(AnimComponent_SCT_C_Interaction_Anim, State) == 0x000001, "Member 'AnimComponent_SCT_C_Interaction_Anim::State' has a wrong offset!");
static_assert(offsetof(AnimComponent_SCT_C_Interaction_Anim, K2Node_MakeStruct_interactionAnim) == 0x000002, "Member 'AnimComponent_SCT_C_Interaction_Anim::K2Node_MakeStruct_interactionAnim' has a wrong offset!");
static_assert(offsetof(AnimComponent_SCT_C_Interaction_Anim, CallFunc_HasAuthority_ReturnValue) == 0x000004, "Member 'AnimComponent_SCT_C_Interaction_Anim::CallFunc_HasAuthority_ReturnValue' has a wrong offset!");

// Function AnimComponent_SCT.AnimComponent_SCT_C.OnRep_interactionAnim
// 0x0020 (0x0020 - 0x0000)
struct AnimComponent_SCT_C_OnRep_interactionAnim final
{
public:
	bool                                          CallFunc_IsDedicatedServer_ReturnValue;            // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UAnimInstance*                          CallFunc_GetAnimInstance_ReturnValue;              // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USCT_AnimBpSCT_C*                       K2Node_DynamicCast_AsSCT_Anim_Bp_SCT;              // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(AnimComponent_SCT_C_OnRep_interactionAnim) == 0x000008, "Wrong alignment on AnimComponent_SCT_C_OnRep_interactionAnim");
static_assert(sizeof(AnimComponent_SCT_C_OnRep_interactionAnim) == 0x000020, "Wrong size on AnimComponent_SCT_C_OnRep_interactionAnim");
static_assert(offsetof(AnimComponent_SCT_C_OnRep_interactionAnim, CallFunc_IsDedicatedServer_ReturnValue) == 0x000000, "Member 'AnimComponent_SCT_C_OnRep_interactionAnim::CallFunc_IsDedicatedServer_ReturnValue' has a wrong offset!");
static_assert(offsetof(AnimComponent_SCT_C_OnRep_interactionAnim, CallFunc_GetAnimInstance_ReturnValue) == 0x000008, "Member 'AnimComponent_SCT_C_OnRep_interactionAnim::CallFunc_GetAnimInstance_ReturnValue' has a wrong offset!");
static_assert(offsetof(AnimComponent_SCT_C_OnRep_interactionAnim, K2Node_DynamicCast_AsSCT_Anim_Bp_SCT) == 0x000010, "Member 'AnimComponent_SCT_C_OnRep_interactionAnim::K2Node_DynamicCast_AsSCT_Anim_Bp_SCT' has a wrong offset!");
static_assert(offsetof(AnimComponent_SCT_C_OnRep_interactionAnim, K2Node_DynamicCast_bSuccess) == 0x000018, "Member 'AnimComponent_SCT_C_OnRep_interactionAnim::K2Node_DynamicCast_bSuccess' has a wrong offset!");

// Function AnimComponent_SCT.AnimComponent_SCT_C.beingGrabbedFunction
// 0x0020 (0x0020 - 0x0000)
struct AnimComponent_SCT_C_beingGrabbedFunction final
{
public:
	bool                                          beingGrabbed_0;                                    // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UAnimInstance*                          CallFunc_GetAnimInstance_ReturnValue;              // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USCT_AnimBpSCT_C*                       K2Node_DynamicCast_AsSCT_Anim_Bp_SCT;              // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(AnimComponent_SCT_C_beingGrabbedFunction) == 0x000008, "Wrong alignment on AnimComponent_SCT_C_beingGrabbedFunction");
static_assert(sizeof(AnimComponent_SCT_C_beingGrabbedFunction) == 0x000020, "Wrong size on AnimComponent_SCT_C_beingGrabbedFunction");
static_assert(offsetof(AnimComponent_SCT_C_beingGrabbedFunction, beingGrabbed_0) == 0x000000, "Member 'AnimComponent_SCT_C_beingGrabbedFunction::beingGrabbed_0' has a wrong offset!");
static_assert(offsetof(AnimComponent_SCT_C_beingGrabbedFunction, CallFunc_GetAnimInstance_ReturnValue) == 0x000008, "Member 'AnimComponent_SCT_C_beingGrabbedFunction::CallFunc_GetAnimInstance_ReturnValue' has a wrong offset!");
static_assert(offsetof(AnimComponent_SCT_C_beingGrabbedFunction, K2Node_DynamicCast_AsSCT_Anim_Bp_SCT) == 0x000010, "Member 'AnimComponent_SCT_C_beingGrabbedFunction::K2Node_DynamicCast_AsSCT_Anim_Bp_SCT' has a wrong offset!");
static_assert(offsetof(AnimComponent_SCT_C_beingGrabbedFunction, K2Node_DynamicCast_bSuccess) == 0x000018, "Member 'AnimComponent_SCT_C_beingGrabbedFunction::K2Node_DynamicCast_bSuccess' has a wrong offset!");

// Function AnimComponent_SCT.AnimComponent_SCT_C.GrabbingFunction
// 0x0030 (0x0030 - 0x0000)
struct AnimComponent_SCT_C_GrabbingFunction final
{
public:
	bool                                          Grabbing;                                          // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UAnimInstance*                          CallFunc_GetAnimInstance_ReturnValue;              // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USCT_AnimBpSCT_C*                       K2Node_DynamicCast_AsSCT_Anim_Bp_SCT;              // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_GetDisplayName_ReturnValue;               // 0x0020(0x0010)(ZeroConstructor, HasGetValueTypeHash)
};
static_assert(alignof(AnimComponent_SCT_C_GrabbingFunction) == 0x000008, "Wrong alignment on AnimComponent_SCT_C_GrabbingFunction");
static_assert(sizeof(AnimComponent_SCT_C_GrabbingFunction) == 0x000030, "Wrong size on AnimComponent_SCT_C_GrabbingFunction");
static_assert(offsetof(AnimComponent_SCT_C_GrabbingFunction, Grabbing) == 0x000000, "Member 'AnimComponent_SCT_C_GrabbingFunction::Grabbing' has a wrong offset!");
static_assert(offsetof(AnimComponent_SCT_C_GrabbingFunction, CallFunc_GetAnimInstance_ReturnValue) == 0x000008, "Member 'AnimComponent_SCT_C_GrabbingFunction::CallFunc_GetAnimInstance_ReturnValue' has a wrong offset!");
static_assert(offsetof(AnimComponent_SCT_C_GrabbingFunction, K2Node_DynamicCast_AsSCT_Anim_Bp_SCT) == 0x000010, "Member 'AnimComponent_SCT_C_GrabbingFunction::K2Node_DynamicCast_AsSCT_Anim_Bp_SCT' has a wrong offset!");
static_assert(offsetof(AnimComponent_SCT_C_GrabbingFunction, K2Node_DynamicCast_bSuccess) == 0x000018, "Member 'AnimComponent_SCT_C_GrabbingFunction::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(AnimComponent_SCT_C_GrabbingFunction, CallFunc_GetDisplayName_ReturnValue) == 0x000020, "Member 'AnimComponent_SCT_C_GrabbingFunction::CallFunc_GetDisplayName_ReturnValue' has a wrong offset!");

// Function AnimComponent_SCT.AnimComponent_SCT_C.RagdollRandomVariation
// 0x000C (0x000C - 0x0000)
struct AnimComponent_SCT_C_RagdollRandomVariation final
{
public:
	struct FVector                                CallFunc_GetSocketLocation_ReturnValue;            // 0x0000(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(AnimComponent_SCT_C_RagdollRandomVariation) == 0x000004, "Wrong alignment on AnimComponent_SCT_C_RagdollRandomVariation");
static_assert(sizeof(AnimComponent_SCT_C_RagdollRandomVariation) == 0x00000C, "Wrong size on AnimComponent_SCT_C_RagdollRandomVariation");
static_assert(offsetof(AnimComponent_SCT_C_RagdollRandomVariation, CallFunc_GetSocketLocation_ReturnValue) == 0x000000, "Member 'AnimComponent_SCT_C_RagdollRandomVariation::CallFunc_GetSocketLocation_ReturnValue' has a wrong offset!");

// Function AnimComponent_SCT.AnimComponent_SCT_C.OnRep_IsFrozen
// 0x0020 (0x0020 - 0x0000)
struct AnimComponent_SCT_C_OnRep_IsFrozen final
{
public:
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UAnimInstance*                          CallFunc_GetAnimInstance_ReturnValue;              // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USCT_AnimBpSCT_C*                       K2Node_DynamicCast_AsSCT_Anim_Bp_SCT;              // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(AnimComponent_SCT_C_OnRep_IsFrozen) == 0x000008, "Wrong alignment on AnimComponent_SCT_C_OnRep_IsFrozen");
static_assert(sizeof(AnimComponent_SCT_C_OnRep_IsFrozen) == 0x000020, "Wrong size on AnimComponent_SCT_C_OnRep_IsFrozen");
static_assert(offsetof(AnimComponent_SCT_C_OnRep_IsFrozen, CallFunc_Not_PreBool_ReturnValue) == 0x000000, "Member 'AnimComponent_SCT_C_OnRep_IsFrozen::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(AnimComponent_SCT_C_OnRep_IsFrozen, CallFunc_GetAnimInstance_ReturnValue) == 0x000008, "Member 'AnimComponent_SCT_C_OnRep_IsFrozen::CallFunc_GetAnimInstance_ReturnValue' has a wrong offset!");
static_assert(offsetof(AnimComponent_SCT_C_OnRep_IsFrozen, K2Node_DynamicCast_AsSCT_Anim_Bp_SCT) == 0x000010, "Member 'AnimComponent_SCT_C_OnRep_IsFrozen::K2Node_DynamicCast_AsSCT_Anim_Bp_SCT' has a wrong offset!");
static_assert(offsetof(AnimComponent_SCT_C_OnRep_IsFrozen, K2Node_DynamicCast_bSuccess) == 0x000018, "Member 'AnimComponent_SCT_C_OnRep_IsFrozen::K2Node_DynamicCast_bSuccess' has a wrong offset!");

// Function AnimComponent_SCT.AnimComponent_SCT_C.OnRep_isDead
// 0x0010 (0x0010 - 0x0000)
struct AnimComponent_SCT_C_OnRep_isDead final
{
public:
	class USCT_AnimBpSCT_C*                       K2Node_DynamicCast_AsSCT_Anim_Bp_SCT;              // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(AnimComponent_SCT_C_OnRep_isDead) == 0x000008, "Wrong alignment on AnimComponent_SCT_C_OnRep_isDead");
static_assert(sizeof(AnimComponent_SCT_C_OnRep_isDead) == 0x000010, "Wrong size on AnimComponent_SCT_C_OnRep_isDead");
static_assert(offsetof(AnimComponent_SCT_C_OnRep_isDead, K2Node_DynamicCast_AsSCT_Anim_Bp_SCT) == 0x000000, "Member 'AnimComponent_SCT_C_OnRep_isDead::K2Node_DynamicCast_AsSCT_Anim_Bp_SCT' has a wrong offset!");
static_assert(offsetof(AnimComponent_SCT_C_OnRep_isDead, K2Node_DynamicCast_bSuccess) == 0x000008, "Member 'AnimComponent_SCT_C_OnRep_isDead::K2Node_DynamicCast_bSuccess' has a wrong offset!");

// Function AnimComponent_SCT.AnimComponent_SCT_C.interactionType
// 0x0002 (0x0002 - 0x0000)
struct AnimComponent_SCT_C_InteractionType final
{
public:
	E_interactionAnimState                        State;                                             // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_interactionAnim                             Anim;                                              // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(AnimComponent_SCT_C_InteractionType) == 0x000001, "Wrong alignment on AnimComponent_SCT_C_InteractionType");
static_assert(sizeof(AnimComponent_SCT_C_InteractionType) == 0x000002, "Wrong size on AnimComponent_SCT_C_InteractionType");
static_assert(offsetof(AnimComponent_SCT_C_InteractionType, State) == 0x000000, "Member 'AnimComponent_SCT_C_InteractionType::State' has a wrong offset!");
static_assert(offsetof(AnimComponent_SCT_C_InteractionType, Anim) == 0x000001, "Member 'AnimComponent_SCT_C_InteractionType::Anim' has a wrong offset!");

// Function AnimComponent_SCT.AnimComponent_SCT_C.RagdollLocationCorrection
// 0x0074 (0x0074 - 0x0000)
struct AnimComponent_SCT_C_RagdollLocationCorrection final
{
public:
	bool                                          Temp_bool_IsClosed_Variable;                       // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Has_Been_Initd_Variable;                 // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Has_Been_Initd_Variable_1;               // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3[0x1];                                        // 0x0003(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetGameTimeInSeconds_ReturnValue;         // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue;          // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_IsClosed_Variable_1;                     // 0x000C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue;           // 0x000D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_E[0x2];                                        // 0x000E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_GetSocketLocation_ReturnValue;            // 0x0010(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Subtract_VectorVector_ReturnValue;        // 0x001C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetSocketLocation_ReturnValue_1;          // 0x0028(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Normal_ReturnValue;                       // 0x0034(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Vector_Distance_ReturnValue;              // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue_1;         // 0x0044(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_45[0x3];                                       // 0x0045(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue_1;        // 0x0048(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_FMax_ReturnValue;                         // 0x004C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Divide_FloatFloat_ReturnValue;            // 0x0050(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_FMin_ReturnValue;                         // 0x0054(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Lerp_ReturnValue;                         // 0x0058(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorFloat_ReturnValue;         // 0x005C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorFloat_ReturnValue_1;       // 0x0068(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(AnimComponent_SCT_C_RagdollLocationCorrection) == 0x000004, "Wrong alignment on AnimComponent_SCT_C_RagdollLocationCorrection");
static_assert(sizeof(AnimComponent_SCT_C_RagdollLocationCorrection) == 0x000074, "Wrong size on AnimComponent_SCT_C_RagdollLocationCorrection");
static_assert(offsetof(AnimComponent_SCT_C_RagdollLocationCorrection, Temp_bool_IsClosed_Variable) == 0x000000, "Member 'AnimComponent_SCT_C_RagdollLocationCorrection::Temp_bool_IsClosed_Variable' has a wrong offset!");
static_assert(offsetof(AnimComponent_SCT_C_RagdollLocationCorrection, Temp_bool_Has_Been_Initd_Variable) == 0x000001, "Member 'AnimComponent_SCT_C_RagdollLocationCorrection::Temp_bool_Has_Been_Initd_Variable' has a wrong offset!");
static_assert(offsetof(AnimComponent_SCT_C_RagdollLocationCorrection, Temp_bool_Has_Been_Initd_Variable_1) == 0x000002, "Member 'AnimComponent_SCT_C_RagdollLocationCorrection::Temp_bool_Has_Been_Initd_Variable_1' has a wrong offset!");
static_assert(offsetof(AnimComponent_SCT_C_RagdollLocationCorrection, CallFunc_GetGameTimeInSeconds_ReturnValue) == 0x000004, "Member 'AnimComponent_SCT_C_RagdollLocationCorrection::CallFunc_GetGameTimeInSeconds_ReturnValue' has a wrong offset!");
static_assert(offsetof(AnimComponent_SCT_C_RagdollLocationCorrection, CallFunc_Subtract_FloatFloat_ReturnValue) == 0x000008, "Member 'AnimComponent_SCT_C_RagdollLocationCorrection::CallFunc_Subtract_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(AnimComponent_SCT_C_RagdollLocationCorrection, Temp_bool_IsClosed_Variable_1) == 0x00000C, "Member 'AnimComponent_SCT_C_RagdollLocationCorrection::Temp_bool_IsClosed_Variable_1' has a wrong offset!");
static_assert(offsetof(AnimComponent_SCT_C_RagdollLocationCorrection, CallFunc_Greater_FloatFloat_ReturnValue) == 0x00000D, "Member 'AnimComponent_SCT_C_RagdollLocationCorrection::CallFunc_Greater_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(AnimComponent_SCT_C_RagdollLocationCorrection, CallFunc_GetSocketLocation_ReturnValue) == 0x000010, "Member 'AnimComponent_SCT_C_RagdollLocationCorrection::CallFunc_GetSocketLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(AnimComponent_SCT_C_RagdollLocationCorrection, CallFunc_Subtract_VectorVector_ReturnValue) == 0x00001C, "Member 'AnimComponent_SCT_C_RagdollLocationCorrection::CallFunc_Subtract_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(AnimComponent_SCT_C_RagdollLocationCorrection, CallFunc_GetSocketLocation_ReturnValue_1) == 0x000028, "Member 'AnimComponent_SCT_C_RagdollLocationCorrection::CallFunc_GetSocketLocation_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(AnimComponent_SCT_C_RagdollLocationCorrection, CallFunc_Normal_ReturnValue) == 0x000034, "Member 'AnimComponent_SCT_C_RagdollLocationCorrection::CallFunc_Normal_ReturnValue' has a wrong offset!");
static_assert(offsetof(AnimComponent_SCT_C_RagdollLocationCorrection, CallFunc_Vector_Distance_ReturnValue) == 0x000040, "Member 'AnimComponent_SCT_C_RagdollLocationCorrection::CallFunc_Vector_Distance_ReturnValue' has a wrong offset!");
static_assert(offsetof(AnimComponent_SCT_C_RagdollLocationCorrection, CallFunc_Greater_FloatFloat_ReturnValue_1) == 0x000044, "Member 'AnimComponent_SCT_C_RagdollLocationCorrection::CallFunc_Greater_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(AnimComponent_SCT_C_RagdollLocationCorrection, CallFunc_Subtract_FloatFloat_ReturnValue_1) == 0x000048, "Member 'AnimComponent_SCT_C_RagdollLocationCorrection::CallFunc_Subtract_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(AnimComponent_SCT_C_RagdollLocationCorrection, CallFunc_FMax_ReturnValue) == 0x00004C, "Member 'AnimComponent_SCT_C_RagdollLocationCorrection::CallFunc_FMax_ReturnValue' has a wrong offset!");
static_assert(offsetof(AnimComponent_SCT_C_RagdollLocationCorrection, CallFunc_Divide_FloatFloat_ReturnValue) == 0x000050, "Member 'AnimComponent_SCT_C_RagdollLocationCorrection::CallFunc_Divide_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(AnimComponent_SCT_C_RagdollLocationCorrection, CallFunc_FMin_ReturnValue) == 0x000054, "Member 'AnimComponent_SCT_C_RagdollLocationCorrection::CallFunc_FMin_ReturnValue' has a wrong offset!");
static_assert(offsetof(AnimComponent_SCT_C_RagdollLocationCorrection, CallFunc_Lerp_ReturnValue) == 0x000058, "Member 'AnimComponent_SCT_C_RagdollLocationCorrection::CallFunc_Lerp_ReturnValue' has a wrong offset!");
static_assert(offsetof(AnimComponent_SCT_C_RagdollLocationCorrection, CallFunc_Multiply_VectorFloat_ReturnValue) == 0x00005C, "Member 'AnimComponent_SCT_C_RagdollLocationCorrection::CallFunc_Multiply_VectorFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(AnimComponent_SCT_C_RagdollLocationCorrection, CallFunc_Multiply_VectorFloat_ReturnValue_1) == 0x000068, "Member 'AnimComponent_SCT_C_RagdollLocationCorrection::CallFunc_Multiply_VectorFloat_ReturnValue_1' has a wrong offset!");

// Function AnimComponent_SCT.AnimComponent_SCT_C.RagdollCollisionProfileCorrection
// 0x0005 (0x0005 - 0x0000)
struct AnimComponent_SCT_C_RagdollCollisionProfileCorrection final
{
public:
	bool                                          CollisionEnabled;                                  // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	ECollisionResponse                            Temp_byte_Variable;                                // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ECollisionResponse                            Temp_byte_Variable_1;                              // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ECollisionResponse                            K2Node_Select_Default;                             // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(AnimComponent_SCT_C_RagdollCollisionProfileCorrection) == 0x000001, "Wrong alignment on AnimComponent_SCT_C_RagdollCollisionProfileCorrection");
static_assert(sizeof(AnimComponent_SCT_C_RagdollCollisionProfileCorrection) == 0x000005, "Wrong size on AnimComponent_SCT_C_RagdollCollisionProfileCorrection");
static_assert(offsetof(AnimComponent_SCT_C_RagdollCollisionProfileCorrection, CollisionEnabled) == 0x000000, "Member 'AnimComponent_SCT_C_RagdollCollisionProfileCorrection::CollisionEnabled' has a wrong offset!");
static_assert(offsetof(AnimComponent_SCT_C_RagdollCollisionProfileCorrection, Temp_byte_Variable) == 0x000001, "Member 'AnimComponent_SCT_C_RagdollCollisionProfileCorrection::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(AnimComponent_SCT_C_RagdollCollisionProfileCorrection, Temp_byte_Variable_1) == 0x000002, "Member 'AnimComponent_SCT_C_RagdollCollisionProfileCorrection::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(AnimComponent_SCT_C_RagdollCollisionProfileCorrection, Temp_bool_Variable) == 0x000003, "Member 'AnimComponent_SCT_C_RagdollCollisionProfileCorrection::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(AnimComponent_SCT_C_RagdollCollisionProfileCorrection, K2Node_Select_Default) == 0x000004, "Member 'AnimComponent_SCT_C_RagdollCollisionProfileCorrection::K2Node_Select_Default' has a wrong offset!");

// Function AnimComponent_SCT.AnimComponent_SCT_C.UpdateDeviationTime
// 0x000C (0x000C - 0x0000)
struct AnimComponent_SCT_C_UpdateDeviationTime final
{
public:
	float                                         Offset;                                            // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetGameTimeInSeconds_ReturnValue;         // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue;               // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(AnimComponent_SCT_C_UpdateDeviationTime) == 0x000004, "Wrong alignment on AnimComponent_SCT_C_UpdateDeviationTime");
static_assert(sizeof(AnimComponent_SCT_C_UpdateDeviationTime) == 0x00000C, "Wrong size on AnimComponent_SCT_C_UpdateDeviationTime");
static_assert(offsetof(AnimComponent_SCT_C_UpdateDeviationTime, Offset) == 0x000000, "Member 'AnimComponent_SCT_C_UpdateDeviationTime::Offset' has a wrong offset!");
static_assert(offsetof(AnimComponent_SCT_C_UpdateDeviationTime, CallFunc_GetGameTimeInSeconds_ReturnValue) == 0x000004, "Member 'AnimComponent_SCT_C_UpdateDeviationTime::CallFunc_GetGameTimeInSeconds_ReturnValue' has a wrong offset!");
static_assert(offsetof(AnimComponent_SCT_C_UpdateDeviationTime, CallFunc_Add_FloatFloat_ReturnValue) == 0x000008, "Member 'AnimComponent_SCT_C_UpdateDeviationTime::CallFunc_Add_FloatFloat_ReturnValue' has a wrong offset!");

// Function AnimComponent_SCT.AnimComponent_SCT_C.RemoveAllPuzzleWidgets
// 0x0038 (0x0038 - 0x0000)
struct AnimComponent_SCT_C_RemoveAllPuzzleWidgets final
{
public:
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsLocallyControlled_ReturnValue;          // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class Ubp_wi_Puzzle_C*>                CallFunc_GetAllWidgetsOfClass_FoundWidgets;        // 0x0010(0x0010)(ReferenceParm, ContainsInstancedReference)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class Ubp_wi_Puzzle_C*                        CallFunc_Array_Get_Item;                           // 0x0028(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(AnimComponent_SCT_C_RemoveAllPuzzleWidgets) == 0x000008, "Wrong alignment on AnimComponent_SCT_C_RemoveAllPuzzleWidgets");
static_assert(sizeof(AnimComponent_SCT_C_RemoveAllPuzzleWidgets) == 0x000038, "Wrong size on AnimComponent_SCT_C_RemoveAllPuzzleWidgets");
static_assert(offsetof(AnimComponent_SCT_C_RemoveAllPuzzleWidgets, Temp_int_Array_Index_Variable) == 0x000000, "Member 'AnimComponent_SCT_C_RemoveAllPuzzleWidgets::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(AnimComponent_SCT_C_RemoveAllPuzzleWidgets, CallFunc_IsLocallyControlled_ReturnValue) == 0x000004, "Member 'AnimComponent_SCT_C_RemoveAllPuzzleWidgets::CallFunc_IsLocallyControlled_ReturnValue' has a wrong offset!");
static_assert(offsetof(AnimComponent_SCT_C_RemoveAllPuzzleWidgets, Temp_int_Loop_Counter_Variable) == 0x000008, "Member 'AnimComponent_SCT_C_RemoveAllPuzzleWidgets::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(AnimComponent_SCT_C_RemoveAllPuzzleWidgets, CallFunc_Add_IntInt_ReturnValue) == 0x00000C, "Member 'AnimComponent_SCT_C_RemoveAllPuzzleWidgets::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(AnimComponent_SCT_C_RemoveAllPuzzleWidgets, CallFunc_GetAllWidgetsOfClass_FoundWidgets) == 0x000010, "Member 'AnimComponent_SCT_C_RemoveAllPuzzleWidgets::CallFunc_GetAllWidgetsOfClass_FoundWidgets' has a wrong offset!");
static_assert(offsetof(AnimComponent_SCT_C_RemoveAllPuzzleWidgets, CallFunc_Array_Length_ReturnValue) == 0x000020, "Member 'AnimComponent_SCT_C_RemoveAllPuzzleWidgets::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(AnimComponent_SCT_C_RemoveAllPuzzleWidgets, CallFunc_Array_Get_Item) == 0x000028, "Member 'AnimComponent_SCT_C_RemoveAllPuzzleWidgets::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(AnimComponent_SCT_C_RemoveAllPuzzleWidgets, CallFunc_Less_IntInt_ReturnValue) == 0x000030, "Member 'AnimComponent_SCT_C_RemoveAllPuzzleWidgets::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");

// Function AnimComponent_SCT.AnimComponent_SCT_C.GetEssentialValuesBPI
// 0x0138 (0x0138 - 0x0000)
struct AnimComponent_SCT_C_GetEssentialValuesBPI final
{
public:
	struct FVector                                InVelocity;                                        // 0x0000(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          InIsMoving;                                        // 0x000C(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          InHasMovementInput;                                // 0x000D(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          InIsAiming;                                        // 0x000E(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         InAimType;                                         // 0x000F(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         InDirection;                                       // 0x0010(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         InCharacterRotationDifference;                     // 0x0014(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         InVelocityDifference;                              // 0x0018(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         InAimYawDelta;                                     // 0x001C(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         InAimYawRate;                                      // 0x0020(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               InCharacterRotation;                               // 0x0024(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FRotator                               InLookingRotation;                                 // 0x0030(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FRotator                               InLastVelocityRotation;                            // 0x003C(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FRotator                               InLastMovementInputRotation;                       // 0x0048(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          InCarryingCorpse;                                  // 0x0054(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          InBeingCarriedCorpse;                              // 0x0055(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_56[0x2];                                       // 0x0056(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         InAlcoholPercent;                                  // 0x0058(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Velocity;                                          // 0x005C(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsMoving_0;                                        // 0x0068(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          HasMovementInput_0;                                // 0x0069(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          IsAiming_0;                                        // 0x006A(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         AimType_0;                                         // 0x006B(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Direction_0;                                       // 0x006C(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CharacterRotationDifference_0;                     // 0x0070(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         VelocityDifference_0;                              // 0x0074(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         AimYawDelta_0;                                     // 0x0078(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         AimYawRate_0;                                      // 0x007C(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CharacterRotation_0;                               // 0x0080(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FRotator                               LookingRotation_0;                                 // 0x008C(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FRotator                               LastVelocityRotation_0;                            // 0x0098(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FRotator                               LastMovementInputRotation_0;                       // 0x00A4(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CarryingCorpse_0;                                  // 0x00B0(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          BeingCarriedCorpse_0;                              // 0x00B1(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_B2[0x2];                                       // 0x00B2(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         AlcoholPercent;                                    // 0x00B4(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TScriptInterface<class IIAnimBp_C>            K2Node_DynamicCast_AsIAnim_Bp;                     // 0x00B8(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x00C8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_C9[0x3];                                       // 0x00C9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_GetEssentialValuesBPI_Velocity;           // 0x00CC(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GetEssentialValuesBPI_IsMoving;           // 0x00D8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_GetEssentialValuesBPI_HasMovementInput;   // 0x00D9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_GetEssentialValuesBPI_IsAiming;           // 0x00DA(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         CallFunc_GetEssentialValuesBPI_AimType;            // 0x00DB(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetEssentialValuesBPI_Direction;          // 0x00DC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetEssentialValuesBPI_CharacterRotationDifference; // 0x00E0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetEssentialValuesBPI_VelocityDifference; // 0x00E4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetEssentialValuesBPI_AimYawDelta;        // 0x00E8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetEssentialValuesBPI_AimYawRate;         // 0x00EC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_GetEssentialValuesBPI_CharacterRotation;  // 0x00F0(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FRotator                               CallFunc_GetEssentialValuesBPI_LookingRotation;    // 0x00FC(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FRotator                               CallFunc_GetEssentialValuesBPI_LastVelocityRotation; // 0x0108(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FRotator                               CallFunc_GetEssentialValuesBPI_LastMovementInputRotation; // 0x0114(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_GetEssentialValuesBPI_CarryingCorpse;     // 0x0120(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_GetEssentialValuesBPI_BeingCarriedCorpse; // 0x0121(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_122[0x2];                                      // 0x0122(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetEssentialValuesBPI_AlcoholPercent;     // 0x0124(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetVelocity_ReturnValue;                  // 0x0128(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(AnimComponent_SCT_C_GetEssentialValuesBPI) == 0x000008, "Wrong alignment on AnimComponent_SCT_C_GetEssentialValuesBPI");
static_assert(sizeof(AnimComponent_SCT_C_GetEssentialValuesBPI) == 0x000138, "Wrong size on AnimComponent_SCT_C_GetEssentialValuesBPI");
static_assert(offsetof(AnimComponent_SCT_C_GetEssentialValuesBPI, InVelocity) == 0x000000, "Member 'AnimComponent_SCT_C_GetEssentialValuesBPI::InVelocity' has a wrong offset!");
static_assert(offsetof(AnimComponent_SCT_C_GetEssentialValuesBPI, InIsMoving) == 0x00000C, "Member 'AnimComponent_SCT_C_GetEssentialValuesBPI::InIsMoving' has a wrong offset!");
static_assert(offsetof(AnimComponent_SCT_C_GetEssentialValuesBPI, InHasMovementInput) == 0x00000D, "Member 'AnimComponent_SCT_C_GetEssentialValuesBPI::InHasMovementInput' has a wrong offset!");
static_assert(offsetof(AnimComponent_SCT_C_GetEssentialValuesBPI, InIsAiming) == 0x00000E, "Member 'AnimComponent_SCT_C_GetEssentialValuesBPI::InIsAiming' has a wrong offset!");
static_assert(offsetof(AnimComponent_SCT_C_GetEssentialValuesBPI, InAimType) == 0x00000F, "Member 'AnimComponent_SCT_C_GetEssentialValuesBPI::InAimType' has a wrong offset!");
static_assert(offsetof(AnimComponent_SCT_C_GetEssentialValuesBPI, InDirection) == 0x000010, "Member 'AnimComponent_SCT_C_GetEssentialValuesBPI::InDirection' has a wrong offset!");
static_assert(offsetof(AnimComponent_SCT_C_GetEssentialValuesBPI, InCharacterRotationDifference) == 0x000014, "Member 'AnimComponent_SCT_C_GetEssentialValuesBPI::InCharacterRotationDifference' has a wrong offset!");
static_assert(offsetof(AnimComponent_SCT_C_GetEssentialValuesBPI, InVelocityDifference) == 0x000018, "Member 'AnimComponent_SCT_C_GetEssentialValuesBPI::InVelocityDifference' has a wrong offset!");
static_assert(offsetof(AnimComponent_SCT_C_GetEssentialValuesBPI, InAimYawDelta) == 0x00001C, "Member 'AnimComponent_SCT_C_GetEssentialValuesBPI::InAimYawDelta' has a wrong offset!");
static_assert(offsetof(AnimComponent_SCT_C_GetEssentialValuesBPI, InAimYawRate) == 0x000020, "Member 'AnimComponent_SCT_C_GetEssentialValuesBPI::InAimYawRate' has a wrong offset!");
static_assert(offsetof(AnimComponent_SCT_C_GetEssentialValuesBPI, InCharacterRotation) == 0x000024, "Member 'AnimComponent_SCT_C_GetEssentialValuesBPI::InCharacterRotation' has a wrong offset!");
static_assert(offsetof(AnimComponent_SCT_C_GetEssentialValuesBPI, InLookingRotation) == 0x000030, "Member 'AnimComponent_SCT_C_GetEssentialValuesBPI::InLookingRotation' has a wrong offset!");
static_assert(offsetof(AnimComponent_SCT_C_GetEssentialValuesBPI, InLastVelocityRotation) == 0x00003C, "Member 'AnimComponent_SCT_C_GetEssentialValuesBPI::InLastVelocityRotation' has a wrong offset!");
static_assert(offsetof(AnimComponent_SCT_C_GetEssentialValuesBPI, InLastMovementInputRotation) == 0x000048, "Member 'AnimComponent_SCT_C_GetEssentialValuesBPI::InLastMovementInputRotation' has a wrong offset!");
static_assert(offsetof(AnimComponent_SCT_C_GetEssentialValuesBPI, InCarryingCorpse) == 0x000054, "Member 'AnimComponent_SCT_C_GetEssentialValuesBPI::InCarryingCorpse' has a wrong offset!");
static_assert(offsetof(AnimComponent_SCT_C_GetEssentialValuesBPI, InBeingCarriedCorpse) == 0x000055, "Member 'AnimComponent_SCT_C_GetEssentialValuesBPI::InBeingCarriedCorpse' has a wrong offset!");
static_assert(offsetof(AnimComponent_SCT_C_GetEssentialValuesBPI, InAlcoholPercent) == 0x000058, "Member 'AnimComponent_SCT_C_GetEssentialValuesBPI::InAlcoholPercent' has a wrong offset!");
static_assert(offsetof(AnimComponent_SCT_C_GetEssentialValuesBPI, Velocity) == 0x00005C, "Member 'AnimComponent_SCT_C_GetEssentialValuesBPI::Velocity' has a wrong offset!");
static_assert(offsetof(AnimComponent_SCT_C_GetEssentialValuesBPI, IsMoving_0) == 0x000068, "Member 'AnimComponent_SCT_C_GetEssentialValuesBPI::IsMoving_0' has a wrong offset!");
static_assert(offsetof(AnimComponent_SCT_C_GetEssentialValuesBPI, HasMovementInput_0) == 0x000069, "Member 'AnimComponent_SCT_C_GetEssentialValuesBPI::HasMovementInput_0' has a wrong offset!");
static_assert(offsetof(AnimComponent_SCT_C_GetEssentialValuesBPI, IsAiming_0) == 0x00006A, "Member 'AnimComponent_SCT_C_GetEssentialValuesBPI::IsAiming_0' has a wrong offset!");
static_assert(offsetof(AnimComponent_SCT_C_GetEssentialValuesBPI, AimType_0) == 0x00006B, "Member 'AnimComponent_SCT_C_GetEssentialValuesBPI::AimType_0' has a wrong offset!");
static_assert(offsetof(AnimComponent_SCT_C_GetEssentialValuesBPI, Direction_0) == 0x00006C, "Member 'AnimComponent_SCT_C_GetEssentialValuesBPI::Direction_0' has a wrong offset!");
static_assert(offsetof(AnimComponent_SCT_C_GetEssentialValuesBPI, CharacterRotationDifference_0) == 0x000070, "Member 'AnimComponent_SCT_C_GetEssentialValuesBPI::CharacterRotationDifference_0' has a wrong offset!");
static_assert(offsetof(AnimComponent_SCT_C_GetEssentialValuesBPI, VelocityDifference_0) == 0x000074, "Member 'AnimComponent_SCT_C_GetEssentialValuesBPI::VelocityDifference_0' has a wrong offset!");
static_assert(offsetof(AnimComponent_SCT_C_GetEssentialValuesBPI, AimYawDelta_0) == 0x000078, "Member 'AnimComponent_SCT_C_GetEssentialValuesBPI::AimYawDelta_0' has a wrong offset!");
static_assert(offsetof(AnimComponent_SCT_C_GetEssentialValuesBPI, AimYawRate_0) == 0x00007C, "Member 'AnimComponent_SCT_C_GetEssentialValuesBPI::AimYawRate_0' has a wrong offset!");
static_assert(offsetof(AnimComponent_SCT_C_GetEssentialValuesBPI, CharacterRotation_0) == 0x000080, "Member 'AnimComponent_SCT_C_GetEssentialValuesBPI::CharacterRotation_0' has a wrong offset!");
static_assert(offsetof(AnimComponent_SCT_C_GetEssentialValuesBPI, LookingRotation_0) == 0x00008C, "Member 'AnimComponent_SCT_C_GetEssentialValuesBPI::LookingRotation_0' has a wrong offset!");
static_assert(offsetof(AnimComponent_SCT_C_GetEssentialValuesBPI, LastVelocityRotation_0) == 0x000098, "Member 'AnimComponent_SCT_C_GetEssentialValuesBPI::LastVelocityRotation_0' has a wrong offset!");
static_assert(offsetof(AnimComponent_SCT_C_GetEssentialValuesBPI, LastMovementInputRotation_0) == 0x0000A4, "Member 'AnimComponent_SCT_C_GetEssentialValuesBPI::LastMovementInputRotation_0' has a wrong offset!");
static_assert(offsetof(AnimComponent_SCT_C_GetEssentialValuesBPI, CarryingCorpse_0) == 0x0000B0, "Member 'AnimComponent_SCT_C_GetEssentialValuesBPI::CarryingCorpse_0' has a wrong offset!");
static_assert(offsetof(AnimComponent_SCT_C_GetEssentialValuesBPI, BeingCarriedCorpse_0) == 0x0000B1, "Member 'AnimComponent_SCT_C_GetEssentialValuesBPI::BeingCarriedCorpse_0' has a wrong offset!");
static_assert(offsetof(AnimComponent_SCT_C_GetEssentialValuesBPI, AlcoholPercent) == 0x0000B4, "Member 'AnimComponent_SCT_C_GetEssentialValuesBPI::AlcoholPercent' has a wrong offset!");
static_assert(offsetof(AnimComponent_SCT_C_GetEssentialValuesBPI, K2Node_DynamicCast_AsIAnim_Bp) == 0x0000B8, "Member 'AnimComponent_SCT_C_GetEssentialValuesBPI::K2Node_DynamicCast_AsIAnim_Bp' has a wrong offset!");
static_assert(offsetof(AnimComponent_SCT_C_GetEssentialValuesBPI, K2Node_DynamicCast_bSuccess) == 0x0000C8, "Member 'AnimComponent_SCT_C_GetEssentialValuesBPI::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(AnimComponent_SCT_C_GetEssentialValuesBPI, CallFunc_GetEssentialValuesBPI_Velocity) == 0x0000CC, "Member 'AnimComponent_SCT_C_GetEssentialValuesBPI::CallFunc_GetEssentialValuesBPI_Velocity' has a wrong offset!");
static_assert(offsetof(AnimComponent_SCT_C_GetEssentialValuesBPI, CallFunc_GetEssentialValuesBPI_IsMoving) == 0x0000D8, "Member 'AnimComponent_SCT_C_GetEssentialValuesBPI::CallFunc_GetEssentialValuesBPI_IsMoving' has a wrong offset!");
static_assert(offsetof(AnimComponent_SCT_C_GetEssentialValuesBPI, CallFunc_GetEssentialValuesBPI_HasMovementInput) == 0x0000D9, "Member 'AnimComponent_SCT_C_GetEssentialValuesBPI::CallFunc_GetEssentialValuesBPI_HasMovementInput' has a wrong offset!");
static_assert(offsetof(AnimComponent_SCT_C_GetEssentialValuesBPI, CallFunc_GetEssentialValuesBPI_IsAiming) == 0x0000DA, "Member 'AnimComponent_SCT_C_GetEssentialValuesBPI::CallFunc_GetEssentialValuesBPI_IsAiming' has a wrong offset!");
static_assert(offsetof(AnimComponent_SCT_C_GetEssentialValuesBPI, CallFunc_GetEssentialValuesBPI_AimType) == 0x0000DB, "Member 'AnimComponent_SCT_C_GetEssentialValuesBPI::CallFunc_GetEssentialValuesBPI_AimType' has a wrong offset!");
static_assert(offsetof(AnimComponent_SCT_C_GetEssentialValuesBPI, CallFunc_GetEssentialValuesBPI_Direction) == 0x0000DC, "Member 'AnimComponent_SCT_C_GetEssentialValuesBPI::CallFunc_GetEssentialValuesBPI_Direction' has a wrong offset!");
static_assert(offsetof(AnimComponent_SCT_C_GetEssentialValuesBPI, CallFunc_GetEssentialValuesBPI_CharacterRotationDifference) == 0x0000E0, "Member 'AnimComponent_SCT_C_GetEssentialValuesBPI::CallFunc_GetEssentialValuesBPI_CharacterRotationDifference' has a wrong offset!");
static_assert(offsetof(AnimComponent_SCT_C_GetEssentialValuesBPI, CallFunc_GetEssentialValuesBPI_VelocityDifference) == 0x0000E4, "Member 'AnimComponent_SCT_C_GetEssentialValuesBPI::CallFunc_GetEssentialValuesBPI_VelocityDifference' has a wrong offset!");
static_assert(offsetof(AnimComponent_SCT_C_GetEssentialValuesBPI, CallFunc_GetEssentialValuesBPI_AimYawDelta) == 0x0000E8, "Member 'AnimComponent_SCT_C_GetEssentialValuesBPI::CallFunc_GetEssentialValuesBPI_AimYawDelta' has a wrong offset!");
static_assert(offsetof(AnimComponent_SCT_C_GetEssentialValuesBPI, CallFunc_GetEssentialValuesBPI_AimYawRate) == 0x0000EC, "Member 'AnimComponent_SCT_C_GetEssentialValuesBPI::CallFunc_GetEssentialValuesBPI_AimYawRate' has a wrong offset!");
static_assert(offsetof(AnimComponent_SCT_C_GetEssentialValuesBPI, CallFunc_GetEssentialValuesBPI_CharacterRotation) == 0x0000F0, "Member 'AnimComponent_SCT_C_GetEssentialValuesBPI::CallFunc_GetEssentialValuesBPI_CharacterRotation' has a wrong offset!");
static_assert(offsetof(AnimComponent_SCT_C_GetEssentialValuesBPI, CallFunc_GetEssentialValuesBPI_LookingRotation) == 0x0000FC, "Member 'AnimComponent_SCT_C_GetEssentialValuesBPI::CallFunc_GetEssentialValuesBPI_LookingRotation' has a wrong offset!");
static_assert(offsetof(AnimComponent_SCT_C_GetEssentialValuesBPI, CallFunc_GetEssentialValuesBPI_LastVelocityRotation) == 0x000108, "Member 'AnimComponent_SCT_C_GetEssentialValuesBPI::CallFunc_GetEssentialValuesBPI_LastVelocityRotation' has a wrong offset!");
static_assert(offsetof(AnimComponent_SCT_C_GetEssentialValuesBPI, CallFunc_GetEssentialValuesBPI_LastMovementInputRotation) == 0x000114, "Member 'AnimComponent_SCT_C_GetEssentialValuesBPI::CallFunc_GetEssentialValuesBPI_LastMovementInputRotation' has a wrong offset!");
static_assert(offsetof(AnimComponent_SCT_C_GetEssentialValuesBPI, CallFunc_GetEssentialValuesBPI_CarryingCorpse) == 0x000120, "Member 'AnimComponent_SCT_C_GetEssentialValuesBPI::CallFunc_GetEssentialValuesBPI_CarryingCorpse' has a wrong offset!");
static_assert(offsetof(AnimComponent_SCT_C_GetEssentialValuesBPI, CallFunc_GetEssentialValuesBPI_BeingCarriedCorpse) == 0x000121, "Member 'AnimComponent_SCT_C_GetEssentialValuesBPI::CallFunc_GetEssentialValuesBPI_BeingCarriedCorpse' has a wrong offset!");
static_assert(offsetof(AnimComponent_SCT_C_GetEssentialValuesBPI, CallFunc_GetEssentialValuesBPI_AlcoholPercent) == 0x000124, "Member 'AnimComponent_SCT_C_GetEssentialValuesBPI::CallFunc_GetEssentialValuesBPI_AlcoholPercent' has a wrong offset!");
static_assert(offsetof(AnimComponent_SCT_C_GetEssentialValuesBPI, CallFunc_GetVelocity_ReturnValue) == 0x000128, "Member 'AnimComponent_SCT_C_GetEssentialValuesBPI::CallFunc_GetVelocity_ReturnValue' has a wrong offset!");

// Function AnimComponent_SCT.AnimComponent_SCT_C.GetSetupValuesBPI
// 0x0028 (0x0028 - 0x0000)
struct AnimComponent_SCT_C_GetSetupValuesBPI final
{
public:
	float                                         InCrouchSpeed;                                     // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         InWalkSpeed;                                       // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         InRunSpeed;                                        // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         InSprintSpeed;                                     // 0x000C(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          InFemale;                                          // 0x0010(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CrouchSpeed_0;                                     // 0x0014(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         WalkSpeed_0;                                       // 0x0018(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         RunSpeed_0;                                        // 0x001C(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         SprintSpeed_0;                                     // 0x0020(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Female_0;                                          // 0x0024(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(AnimComponent_SCT_C_GetSetupValuesBPI) == 0x000004, "Wrong alignment on AnimComponent_SCT_C_GetSetupValuesBPI");
static_assert(sizeof(AnimComponent_SCT_C_GetSetupValuesBPI) == 0x000028, "Wrong size on AnimComponent_SCT_C_GetSetupValuesBPI");
static_assert(offsetof(AnimComponent_SCT_C_GetSetupValuesBPI, InCrouchSpeed) == 0x000000, "Member 'AnimComponent_SCT_C_GetSetupValuesBPI::InCrouchSpeed' has a wrong offset!");
static_assert(offsetof(AnimComponent_SCT_C_GetSetupValuesBPI, InWalkSpeed) == 0x000004, "Member 'AnimComponent_SCT_C_GetSetupValuesBPI::InWalkSpeed' has a wrong offset!");
static_assert(offsetof(AnimComponent_SCT_C_GetSetupValuesBPI, InRunSpeed) == 0x000008, "Member 'AnimComponent_SCT_C_GetSetupValuesBPI::InRunSpeed' has a wrong offset!");
static_assert(offsetof(AnimComponent_SCT_C_GetSetupValuesBPI, InSprintSpeed) == 0x00000C, "Member 'AnimComponent_SCT_C_GetSetupValuesBPI::InSprintSpeed' has a wrong offset!");
static_assert(offsetof(AnimComponent_SCT_C_GetSetupValuesBPI, InFemale) == 0x000010, "Member 'AnimComponent_SCT_C_GetSetupValuesBPI::InFemale' has a wrong offset!");
static_assert(offsetof(AnimComponent_SCT_C_GetSetupValuesBPI, CrouchSpeed_0) == 0x000014, "Member 'AnimComponent_SCT_C_GetSetupValuesBPI::CrouchSpeed_0' has a wrong offset!");
static_assert(offsetof(AnimComponent_SCT_C_GetSetupValuesBPI, WalkSpeed_0) == 0x000018, "Member 'AnimComponent_SCT_C_GetSetupValuesBPI::WalkSpeed_0' has a wrong offset!");
static_assert(offsetof(AnimComponent_SCT_C_GetSetupValuesBPI, RunSpeed_0) == 0x00001C, "Member 'AnimComponent_SCT_C_GetSetupValuesBPI::RunSpeed_0' has a wrong offset!");
static_assert(offsetof(AnimComponent_SCT_C_GetSetupValuesBPI, SprintSpeed_0) == 0x000020, "Member 'AnimComponent_SCT_C_GetSetupValuesBPI::SprintSpeed_0' has a wrong offset!");
static_assert(offsetof(AnimComponent_SCT_C_GetSetupValuesBPI, Female_0) == 0x000024, "Member 'AnimComponent_SCT_C_GetSetupValuesBPI::Female_0' has a wrong offset!");

// Function AnimComponent_SCT.AnimComponent_SCT_C.CanRotate
// 0x0018 (0x0018 - 0x0000)
struct AnimComponent_SCT_C_CanRotate final
{
public:
	bool                                          CanRotate_0;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ACharacterSCT*                          K2Node_DynamicCast_AsCharacter_SCT;                // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsImmovable_ReturnValue;                  // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_CanRotateCharacter_ReturnValue;           // 0x0012(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0013(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0014(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(AnimComponent_SCT_C_CanRotate) == 0x000008, "Wrong alignment on AnimComponent_SCT_C_CanRotate");
static_assert(sizeof(AnimComponent_SCT_C_CanRotate) == 0x000018, "Wrong size on AnimComponent_SCT_C_CanRotate");
static_assert(offsetof(AnimComponent_SCT_C_CanRotate, CanRotate_0) == 0x000000, "Member 'AnimComponent_SCT_C_CanRotate::CanRotate_0' has a wrong offset!");
static_assert(offsetof(AnimComponent_SCT_C_CanRotate, K2Node_DynamicCast_AsCharacter_SCT) == 0x000008, "Member 'AnimComponent_SCT_C_CanRotate::K2Node_DynamicCast_AsCharacter_SCT' has a wrong offset!");
static_assert(offsetof(AnimComponent_SCT_C_CanRotate, K2Node_DynamicCast_bSuccess) == 0x000010, "Member 'AnimComponent_SCT_C_CanRotate::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(AnimComponent_SCT_C_CanRotate, CallFunc_IsImmovable_ReturnValue) == 0x000011, "Member 'AnimComponent_SCT_C_CanRotate::CallFunc_IsImmovable_ReturnValue' has a wrong offset!");
static_assert(offsetof(AnimComponent_SCT_C_CanRotate, CallFunc_CanRotateCharacter_ReturnValue) == 0x000012, "Member 'AnimComponent_SCT_C_CanRotate::CallFunc_CanRotateCharacter_ReturnValue' has a wrong offset!");
static_assert(offsetof(AnimComponent_SCT_C_CanRotate, CallFunc_Not_PreBool_ReturnValue) == 0x000013, "Member 'AnimComponent_SCT_C_CanRotate::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(AnimComponent_SCT_C_CanRotate, CallFunc_BooleanAND_ReturnValue) == 0x000014, "Member 'AnimComponent_SCT_C_CanRotate::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");

}

