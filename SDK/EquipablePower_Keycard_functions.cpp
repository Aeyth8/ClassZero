#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: EquipablePower_Keycard

#include "Basic.hpp"

#include "EquipablePower_Keycard_classes.hpp"
#include "EquipablePower_Keycard_parameters.hpp"


namespace SDK
{

// Function EquipablePower_Keycard.EquipablePower_Keycard_C.ExecuteUbergraph_EquipablePower_Keycard
// (Final, UbergraphFunction, HasDefaults)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AEquipablePower_Keycard_C::ExecuteUbergraph_EquipablePower_Keycard(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("EquipablePower_Keycard_C", "ExecuteUbergraph_EquipablePower_Keycard");

	Params::EquipablePower_Keycard_C_ExecuteUbergraph_EquipablePower_Keycard Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function EquipablePower_Keycard.EquipablePower_Keycard_C.Multi_Audio Ping
// (Net, NetMulticast, BlueprintCallable, BlueprintEvent)

void AEquipablePower_Keycard_C::Multi_Audio_Ping()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("EquipablePower_Keycard_C", "Multi_Audio Ping");

	UObject::ProcessEvent(Func, nullptr);
}


// Function EquipablePower_Keycard.EquipablePower_Keycard_C.Cancel Ping
// (BlueprintCallable, BlueprintEvent)

void AEquipablePower_Keycard_C::Cancel_Ping()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("EquipablePower_Keycard_C", "Cancel Ping");

	UObject::ProcessEvent(Func, nullptr);
}


// Function EquipablePower_Keycard.EquipablePower_Keycard_C.Start Pinging
// (BlueprintCallable, BlueprintEvent)

void AEquipablePower_Keycard_C::Start_Pinging()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("EquipablePower_Keycard_C", "Start Pinging");

	UObject::ProcessEvent(Func, nullptr);
}


// Function EquipablePower_Keycard.EquipablePower_Keycard_C.On Removed Card
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           DestroyedActor                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AEquipablePower_Keycard_C::On_Removed_Card(class AActor* DestroyedActor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("EquipablePower_Keycard_C", "On Removed Card");

	Params::EquipablePower_Keycard_C_On_Removed_Card Parms{};

	Parms.DestroyedActor = DestroyedActor;

	UObject::ProcessEvent(Func, &Parms);
}


// Function EquipablePower_Keycard.EquipablePower_Keycard_C.Owner_Create Off Screen Indicator
// (Net, NetClient, BlueprintCallable, BlueprintEvent)
// Parameters:
// class APlayerController*                OwningPlayer                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AEquipablePower_Keycard_C::Owner_Create_Off_Screen_Indicator(class APlayerController* OwningPlayer)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("EquipablePower_Keycard_C", "Owner_Create Off Screen Indicator");

	Params::EquipablePower_Keycard_C_Owner_Create_Off_Screen_Indicator Parms{};

	Parms.OwningPlayer = OwningPlayer;

	UObject::ProcessEvent(Func, &Parms);
}


// Function EquipablePower_Keycard.EquipablePower_Keycard_C.Update Offscreen Indicator
// (BlueprintCallable, BlueprintEvent)

void AEquipablePower_Keycard_C::Update_Offscreen_Indicator()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("EquipablePower_Keycard_C", "Update Offscreen Indicator");

	UObject::ProcessEvent(Func, nullptr);
}


// Function EquipablePower_Keycard.EquipablePower_Keycard_C.Initialize
// (Event, Protected, BlueprintEvent)

void AEquipablePower_Keycard_C::Initialize()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("EquipablePower_Keycard_C", "Initialize");

	UObject::ProcessEvent(Func, nullptr);
}


// Function EquipablePower_Keycard.EquipablePower_Keycard_C.UpdateOffScreenIndicator
// (Public, BlueprintCallable, BlueprintEvent)

void AEquipablePower_Keycard_C::UpdateOffScreenIndicator()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("EquipablePower_Keycard_C", "UpdateOffScreenIndicator");

	UObject::ProcessEvent(Func, nullptr);
}


// Function EquipablePower_Keycard.EquipablePower_Keycard_C.OFFSI_SaveRequiredReferences
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AController*                      Controller                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AEquipablePower_Keycard_C::OFFSI_SaveRequiredReferences(class AController* Controller)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("EquipablePower_Keycard_C", "OFFSI_SaveRequiredReferences");

	Params::EquipablePower_Keycard_C_OFFSI_SaveRequiredReferences Parms{};

	Parms.Controller = Controller;

	UObject::ProcessEvent(Func, &Parms);
}


// Function EquipablePower_Keycard.EquipablePower_Keycard_C.RemoveAllExistingKeycardOFFSI
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void AEquipablePower_Keycard_C::RemoveAllExistingKeycardOFFSI()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("EquipablePower_Keycard_C", "RemoveAllExistingKeycardOFFSI");

	UObject::ProcessEvent(Func, nullptr);
}

}

