#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: Agenda_HitWithBottle

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "SCT_structs.hpp"
#include "SCT_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass Agenda_HitWithBottle.Agenda_HitWithBottle_C
// 0x0028 (0x0070 - 0x0048)
class UAgenda_HitWithBottle_C final : public UAgendaObject
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0048(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	int32                                         TargetHit;                                         // 0x0050(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CurrentHit;                                        // 0x0054(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FString                                 HitColorString;                                    // 0x0058(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash)
	class UAgendaCoopPowerEvent*                  HitEvent;                                          // 0x0068(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_Agenda_HitWithBottle(int32 EntryPoint);
	void K2_Initialize();
	void OnHitEventRaised(class APlayerController* Instigator, class APlayerController* Target, class UClass* Power);
	void IncrementHit();

	class FString GetDescription() const;
	class FString GetProgression() const;
	bool IsValid(class APlayerController* Instigator, class UClass* Power) const;

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"Agenda_HitWithBottle_C">();
	}
	static class UAgenda_HitWithBottle_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAgenda_HitWithBottle_C>();
	}
};
static_assert(alignof(UAgenda_HitWithBottle_C) == 0x000008, "Wrong alignment on UAgenda_HitWithBottle_C");
static_assert(sizeof(UAgenda_HitWithBottle_C) == 0x000070, "Wrong size on UAgenda_HitWithBottle_C");
static_assert(offsetof(UAgenda_HitWithBottle_C, UberGraphFrame) == 0x000048, "Member 'UAgenda_HitWithBottle_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UAgenda_HitWithBottle_C, TargetHit) == 0x000050, "Member 'UAgenda_HitWithBottle_C::TargetHit' has a wrong offset!");
static_assert(offsetof(UAgenda_HitWithBottle_C, CurrentHit) == 0x000054, "Member 'UAgenda_HitWithBottle_C::CurrentHit' has a wrong offset!");
static_assert(offsetof(UAgenda_HitWithBottle_C, HitColorString) == 0x000058, "Member 'UAgenda_HitWithBottle_C::HitColorString' has a wrong offset!");
static_assert(offsetof(UAgenda_HitWithBottle_C, HitEvent) == 0x000068, "Member 'UAgenda_HitWithBottle_C::HitEvent' has a wrong offset!");

}

