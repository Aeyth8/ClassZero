#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: AnimComponent_SCT

#include "Basic.hpp"

#include "Gait_structs.hpp"
#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "CoreUObject_structs.hpp"
#include "InteractionAnim_structs.hpp"
#include "CardinalDirection_structs.hpp"
#include "Stance_structs.hpp"
#include "MovementMode_structs.hpp"
#include "E_interactionAnimState_structs.hpp"
#include "E_interactionAnim_structs.hpp"
#include "IdleEntryState_structs.hpp"
#include "RPC_Enum_structs.hpp"
#include "E_ItemAnimation_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass AnimComponent_SCT.AnimComponent_SCT_C
// 0x01E0 (0x0290 - 0x00B0)
class UAnimComponent_SCT_C final : public UActorComponent
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x00B0(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	struct FRotator                               CharacterRotation;                                 // 0x00B8(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FRotator                               TargetRotation;                                    // 0x00C4(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FRotator                               LastMovementInputRotation;                         // 0x00D0(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FRotator                               LookingRotation;                                   // 0x00DC(0x000C)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FRotator                               LastVelocityRotation;                              // 0x00E8(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          ShouldSprint;                                      // 0x00F4(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          IsMoving;                                          // 0x00F5(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          HasMovementInput;                                  // 0x00F6(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          IsAiming;                                          // 0x00F7(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor)
	float                                         Direction;                                         // 0x00F8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CharacterRotationDifference;                       // 0x00FC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         VelocityDifference;                                // 0x0100(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         AimYawRate;                                        // 0x0104(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         AimYawDelta;                                       // 0x0108(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                MovementInput;                                     // 0x010C(0x000C)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EGait                                         Gait;                                              // 0x0118(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash)
	EStance                                       Stance;                                            // 0x0119(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	MovementMode::EMovementMode                   MovementMode;                                      // 0x011A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	MovementMode::EMovementMode                   PreviousMovementMode;                              // 0x011B(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_11C[0x4];                                      // 0x011C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ACharacter*                             OwningCharacter;                                   // 0x0120(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAnimInstance*                          AnimInstance;                                      // 0x0128(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CrouchSpeed;                                       // 0x0130(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         WalkSpeed;                                         // 0x0134(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         RunSpeed;                                          // 0x0138(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         SprintSpeed;                                       // 0x013C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         WalkAcceleration;                                  // 0x0140(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         WalkDeceleration;                                  // 0x0144(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         RunningAcceleration;                               // 0x0148(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         RunDeceleration;                                   // 0x014C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         WalkingGroundFriction;                             // 0x0150(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         RunningGroundFriction;                             // 0x0154(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         RotationOffset;                                    // 0x0158(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ECardinalDirection                            CardinalDirection;                                 // 0x015C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_15D[0x3];                                      // 0x015D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         RotationRateMultiplier;                            // 0x0160(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               JumpRotation;                                      // 0x0164(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          RagdollOnGround;                                   // 0x0170(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          IsRagdolled;                                       // 0x0171(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          ShouldForceRotation;                               // 0x0172(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_173[0x1];                                      // 0x0173(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               ForceRotation;                                     // 0x0174(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         AimType;                                           // 0x0180(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Female;                                            // 0x0181(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          ZeroGravity;                                       // 0x0182(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_183[0xD];                                      // 0x0183(0x000D)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             LaunchTransform;                                   // 0x0190(0x0030)(Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          LaunchCharacter;                                   // 0x01C0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          CarryingCorpse;                                    // 0x01C1(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          BeingCarriedCorpse;                                // 0x01C2(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1C3[0x1];                                      // 0x01C3(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                LastValidRagdollLocation;                          // 0x01C4(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class UCurveFloat*>                    BlinkCurve;                                        // 0x01D0(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	bool                                          ShouldUnragdoll;                                   // 0x01E0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          IsDancing;                                         // 0x01E1(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor)
	uint8                                         Pad_1E2[0x2];                                      // 0x01E2(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         DanceSeed;                                         // 0x01E4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRandomStream                          DanceSeedStream;                                   // 0x01E8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor)
	TArray<int32>                                 RandomIntArray;                                    // 0x01F0(0x0010)(Edit, BlueprintVisible, Net, DisableEditOnInstance)
	int32                                         RandomIntArrayCounter;                             // 0x0200(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         RandomIterations;                                  // 0x0204(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsDrowning;                                        // 0x0208(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor)
	bool                                          IsDrowned;                                         // 0x0209(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor)
	bool                                          IsFreezing;                                        // 0x020A(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor)
	bool                                          IsBurning;                                         // 0x020B(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor)
	bool                                          IsBurned;                                          // 0x020C(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor)
	bool                                          beingGrabbed;                                      // 0x020D(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor)
	bool                                          IsGrabbing;                                        // 0x020E(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor)
	bool                                          IsPushing;                                         // 0x020F(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor)
	bool                                          IsOxygenPot;                                       // 0x0210(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor)
	bool                                          IsThrowing;                                        // 0x0211(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor)
	bool                                          IsElectrocuting;                                   // 0x0212(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor)
	bool                                          IsElectrocuted;                                    // 0x0213(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor)
	struct FRotator                               LastRotation;                                      // 0x0214(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FInteractionAnim                       InteractionAnim;                                   // 0x0220(0x0002)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_222[0x2];                                      // 0x0222(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               PelvisRefactorRotation;                            // 0x0224(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          IsFrozen;                                          // 0x0230(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor)
	bool                                          DoTick;                                            // 0x0231(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          blinkTrue;                                         // 0x0232(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_233[0x1];                                      // 0x0233(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         GameTimeAtBlink;                                   // 0x0234(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          TalkingTrue;                                       // 0x0238(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          IsDead;                                            // 0x0239(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor)
	uint8                                         Pad_23A[0x2];                                      // 0x023A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   PelvisBoneName;                                    // 0x023C(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                RagdollLocation;                                   // 0x0244(0x000C)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         RagdollDeviationAllowance;                         // 0x0250(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         RagdollCorrectionForceMultiplier;                  // 0x0254(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         RagdollDeviationTime;                              // 0x0258(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         DistanceForMaxForce;                               // 0x025C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         RagdollForceCorrectionClose;                       // 0x0260(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         RagdollForceCorrectionFar;                         // 0x0264(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         GetupCheckPerformed;                               // 0x0268(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         GetupCheckAmount;                                  // 0x026C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         GetupCheckInterval;                                // 0x0270(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         GetUpVelocityThreshold;                            // 0x0274(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         RagdollForceMultiplierDistance;                    // 0x0278(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         UnragdollTime;                                     // 0x027C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MaxRagdollTime;                                    // 0x0280(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         TimeForSuperCorrect;                               // 0x0284(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ReplicateRagdoll;                                  // 0x0288(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)

public:
	void ExecuteUbergraph_AnimComponent_SCT(int32 EntryPoint);
	void ServerMovementTransform(const struct FVector& MovementInput_0, const struct FRotator& LookingRotation_0);
	void ServerSetGait(EGait NewGait);
	void ServerRagdoll(bool ToRagdoll, const struct FVector& OptionalImpulse, bool Force);
	void SetCharacterRotationSERVER(bool EnableRotationOverride, const struct FRotator& Rotation);
	void ServerPlayEmote(uint8 EmoteID);
	void MulticastPlayEmote(uint8 EmoteID);
	void MulticastRagdoll(bool ToRagdoll, const struct FVector& NewVel, const struct FVector& NewLocation, const struct FRotator& NewRotation);
	void AimingServer(bool Aiming, uint8 AimType_0);
	void LaunchRagdollServer(const struct FTransform& LaunchTransform_0);
	void LaunchRagdollMulticast(const struct FTransform& LaunchTransform_0);
	void SetCharacterRotationNONE(bool EnableRotationOverride, const struct FRotator& Rotation);
	void SetCharacterRotationMULTICAST(bool EnableRotationOverride, const struct FRotator& Rotation);
	void SetCharacterRotationOWNING(bool EnableRotationOverride, const struct FRotator& Rotation);
	void SetCharacterRotationOMNI(bool EnableRotationOverride, const struct FRotator& Rotation);
	void ItemAnimationEvent(E_ItemAnimation Animation);
	void ItemAnimationMulticast(E_ItemAnimation Animation);
	void AddCharacterRotationBPI(const struct FRotator& AddAmount);
	void MovementModeChangedBPI(Engine::EMovementMode PrevMovementMode, Engine::EMovementMode NewMovementMode, uint8 PrevCustomMode, uint8 NewCustomMode);
	void SetStanceBPI(EStance NewStance);
	void LandedBPI(const struct FHitResult& Hit);
	void ShouldSprintBPI(bool ShouldSprint_0);
	void ToRagdollBPI(bool ToRagdoll, const struct FVector& OptionalImpulse, bool Force);
	void ResyncGroundedState();
	void SetCharacterRotationBPI(ERPC_Enum RPC, bool EnableRotationOverride, const struct FRotator& Rotation);
	void PlayEmoteBPI(uint8 EmoteID);
	void SetAimingBPI(bool Aiming, uint8 AimType_0);
	void EnableIKandAimOffsetBPI(bool Enable);
	void MulticastEnableIK(bool Enable);
	void LaunchRagdollBPI(const struct FVector& TargetLocation, const struct FVector& Direction_0);
	void CarryingCorpseBPI(bool InputValue);
	void BeingCarriedCorpseBPI(bool InputValue);
	void RagdollForceGetUpNice();
	void CancelDelayedGetUp();
	void CheckGetUp();
	void DelayedGetUpRagdoll();
	void TriggerBlink();
	void ReceiveTick(float DeltaSeconds);
	void ReceiveBeginPlay();
	void AnimNotifyIdleEntryStateBPI(EIdleEntryState IdleEntryState);
	void AnimNotifyTurnInPlaceBPI(class UAnimMontage* TurnInPlaceMontage, bool ShouldTurnInPlace, bool TurningInPlace, bool TurningRight);
	void AnimNotifyPivotBPI(const struct FPivotParams& PivotParameters);
	void PlayGetUpAnimBPI(bool FaceDown);
	void SavePoseSnapshotBPI(class FName PoseName);
	void SetGaitBPI(EGait NewGait);
	void SetMovementModeBPI(MovementMode::EMovementMode NewMovementMode);
	void ReinitBPI();
	void CalculateEssentialValues();
	void UpdateCharacterMovementSettings();
	void ChooseMaxWalkSpeed(float* MaxWalkSpeed);
	void ChooseMaxAcceleration(float* MaxAcceleration);
	void ChooseBrakingDeceleration(float* MaxBrakingDeceleration);
	void ChooseGroundFriction(float* GroundFriction);
	void CustomAcceleration();
	void CanSprint(bool* CanSprint_0);
	void LookingDirectionWithOffset(float OffsetInterpSpeed, float NEAngle, float NWAngle, float SEAngle, float SWAngle, float Buffer, struct FRotator* TargetRotation_0);
	void SetCharacterRotation(const struct FRotator& TargetRotation_0, bool InterpRotation, float InterpSpeed);
	float CalculateRotationRate(float SlowSpeed, float SlowSpeedRate, float FastSpeed, float FastSpeedRate);
	void LimitRotation(float AimYawLimit, float InterpSpeed);
	void AddCharacterRotation(const struct FRotator& AddAmount);
	void SetMovementMode(MovementMode::EMovementMode NewMovementMode);
	void MovementModeChanged();
	void SetStance(EStance NewStance);
	void StanceChanged();
	void SetGait(EGait NewGait);
	void GaitChanged();
	void UpdateRagdollLocation();
	void GetRagdollVelocity(struct FVector* Velocity);
	void CalculateRagdollLocationRotation(struct FVector* OutLocation, struct FRotator* OutRotation);
	void OnRep_Gait();
	void Ragdoll(bool ToRagdoll);
	void OnRep_IsAiming();
	void RagdollLaunchForce();
	void OnRep_isDancing();
	void GenerateRandomIntArray();
	void OnRep_isDrowning();
	void OnRep_isDrowned();
	void OnRep_isFreezing();
	void OnRep_isBurning();
	void OnRep_isBurned();
	void OnRep_beingGrabbed();
	void OnRep_isGrabbing();
	void OnRep_isPushing();
	void OnRep_isOxygenPot();
	void OnRep_isThrowing();
	void OnRep_isElectrocuting();
	void OnRep_isElectrocuted();
	void Interaction_Anim(E_interactionAnim Animation, E_interactionAnimState State);
	void OnRep_interactionAnim();
	void beingGrabbedFunction(bool beingGrabbed_0);
	void GrabbingFunction(bool Grabbing);
	void RagdollRandomVariation();
	void OnRep_IsFrozen();
	void Blink();
	void Talking();
	void OnRep_isDead();
	void InteractionType(E_interactionAnimState State, E_interactionAnim Anim);
	void OnRep_BeerLauncher();
	void RagdollLocationCorrection();
	void RagdollCollisionProfileCorrection(bool CollisionEnabled);
	void UpdateDeviationTime(float Offset);
	void RemoveAllPuzzleWidgets();
	void GetEssentialValuesBPI(const struct FVector& InVelocity, bool InIsMoving, bool InHasMovementInput, bool InIsAiming, uint8 InAimType, float InDirection, float InCharacterRotationDifference, float InVelocityDifference, float InAimYawDelta, float InAimYawRate, const struct FRotator& InCharacterRotation, const struct FRotator& InLookingRotation, const struct FRotator& InLastVelocityRotation, const struct FRotator& InLastMovementInputRotation, bool InCarryingCorpse, bool InBeingCarriedCorpse, float InAlcoholPercent, struct FVector* Velocity, bool* IsMoving_0, bool* HasMovementInput_0, bool* IsAiming_0, uint8* AimType_0, float* Direction_0, float* CharacterRotationDifference_0, float* VelocityDifference_0, float* AimYawDelta_0, float* AimYawRate_0, struct FRotator* CharacterRotation_0, struct FRotator* LookingRotation_0, struct FRotator* LastVelocityRotation_0, struct FRotator* LastMovementInputRotation_0, bool* CarryingCorpse_0, bool* BeingCarriedCorpse_0, float* AlcoholPercent);
	void GetSetupValuesBPI(float InCrouchSpeed, float InWalkSpeed, float InRunSpeed, float InSprintSpeed, bool InFemale, float* CrouchSpeed_0, float* WalkSpeed_0, float* RunSpeed_0, float* SprintSpeed_0, bool* Female_0);

	void CanRotate(bool* CanRotate_0) const;

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"AnimComponent_SCT_C">();
	}
	static class UAnimComponent_SCT_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAnimComponent_SCT_C>();
	}
};
static_assert(alignof(UAnimComponent_SCT_C) == 0x000010, "Wrong alignment on UAnimComponent_SCT_C");
static_assert(sizeof(UAnimComponent_SCT_C) == 0x000290, "Wrong size on UAnimComponent_SCT_C");
static_assert(offsetof(UAnimComponent_SCT_C, UberGraphFrame) == 0x0000B0, "Member 'UAnimComponent_SCT_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UAnimComponent_SCT_C, CharacterRotation) == 0x0000B8, "Member 'UAnimComponent_SCT_C::CharacterRotation' has a wrong offset!");
static_assert(offsetof(UAnimComponent_SCT_C, TargetRotation) == 0x0000C4, "Member 'UAnimComponent_SCT_C::TargetRotation' has a wrong offset!");
static_assert(offsetof(UAnimComponent_SCT_C, LastMovementInputRotation) == 0x0000D0, "Member 'UAnimComponent_SCT_C::LastMovementInputRotation' has a wrong offset!");
static_assert(offsetof(UAnimComponent_SCT_C, LookingRotation) == 0x0000DC, "Member 'UAnimComponent_SCT_C::LookingRotation' has a wrong offset!");
static_assert(offsetof(UAnimComponent_SCT_C, LastVelocityRotation) == 0x0000E8, "Member 'UAnimComponent_SCT_C::LastVelocityRotation' has a wrong offset!");
static_assert(offsetof(UAnimComponent_SCT_C, ShouldSprint) == 0x0000F4, "Member 'UAnimComponent_SCT_C::ShouldSprint' has a wrong offset!");
static_assert(offsetof(UAnimComponent_SCT_C, IsMoving) == 0x0000F5, "Member 'UAnimComponent_SCT_C::IsMoving' has a wrong offset!");
static_assert(offsetof(UAnimComponent_SCT_C, HasMovementInput) == 0x0000F6, "Member 'UAnimComponent_SCT_C::HasMovementInput' has a wrong offset!");
static_assert(offsetof(UAnimComponent_SCT_C, IsAiming) == 0x0000F7, "Member 'UAnimComponent_SCT_C::IsAiming' has a wrong offset!");
static_assert(offsetof(UAnimComponent_SCT_C, Direction) == 0x0000F8, "Member 'UAnimComponent_SCT_C::Direction' has a wrong offset!");
static_assert(offsetof(UAnimComponent_SCT_C, CharacterRotationDifference) == 0x0000FC, "Member 'UAnimComponent_SCT_C::CharacterRotationDifference' has a wrong offset!");
static_assert(offsetof(UAnimComponent_SCT_C, VelocityDifference) == 0x000100, "Member 'UAnimComponent_SCT_C::VelocityDifference' has a wrong offset!");
static_assert(offsetof(UAnimComponent_SCT_C, AimYawRate) == 0x000104, "Member 'UAnimComponent_SCT_C::AimYawRate' has a wrong offset!");
static_assert(offsetof(UAnimComponent_SCT_C, AimYawDelta) == 0x000108, "Member 'UAnimComponent_SCT_C::AimYawDelta' has a wrong offset!");
static_assert(offsetof(UAnimComponent_SCT_C, MovementInput) == 0x00010C, "Member 'UAnimComponent_SCT_C::MovementInput' has a wrong offset!");
static_assert(offsetof(UAnimComponent_SCT_C, Gait) == 0x000118, "Member 'UAnimComponent_SCT_C::Gait' has a wrong offset!");
static_assert(offsetof(UAnimComponent_SCT_C, Stance) == 0x000119, "Member 'UAnimComponent_SCT_C::Stance' has a wrong offset!");
static_assert(offsetof(UAnimComponent_SCT_C, MovementMode) == 0x00011A, "Member 'UAnimComponent_SCT_C::MovementMode' has a wrong offset!");
static_assert(offsetof(UAnimComponent_SCT_C, PreviousMovementMode) == 0x00011B, "Member 'UAnimComponent_SCT_C::PreviousMovementMode' has a wrong offset!");
static_assert(offsetof(UAnimComponent_SCT_C, OwningCharacter) == 0x000120, "Member 'UAnimComponent_SCT_C::OwningCharacter' has a wrong offset!");
static_assert(offsetof(UAnimComponent_SCT_C, AnimInstance) == 0x000128, "Member 'UAnimComponent_SCT_C::AnimInstance' has a wrong offset!");
static_assert(offsetof(UAnimComponent_SCT_C, CrouchSpeed) == 0x000130, "Member 'UAnimComponent_SCT_C::CrouchSpeed' has a wrong offset!");
static_assert(offsetof(UAnimComponent_SCT_C, WalkSpeed) == 0x000134, "Member 'UAnimComponent_SCT_C::WalkSpeed' has a wrong offset!");
static_assert(offsetof(UAnimComponent_SCT_C, RunSpeed) == 0x000138, "Member 'UAnimComponent_SCT_C::RunSpeed' has a wrong offset!");
static_assert(offsetof(UAnimComponent_SCT_C, SprintSpeed) == 0x00013C, "Member 'UAnimComponent_SCT_C::SprintSpeed' has a wrong offset!");
static_assert(offsetof(UAnimComponent_SCT_C, WalkAcceleration) == 0x000140, "Member 'UAnimComponent_SCT_C::WalkAcceleration' has a wrong offset!");
static_assert(offsetof(UAnimComponent_SCT_C, WalkDeceleration) == 0x000144, "Member 'UAnimComponent_SCT_C::WalkDeceleration' has a wrong offset!");
static_assert(offsetof(UAnimComponent_SCT_C, RunningAcceleration) == 0x000148, "Member 'UAnimComponent_SCT_C::RunningAcceleration' has a wrong offset!");
static_assert(offsetof(UAnimComponent_SCT_C, RunDeceleration) == 0x00014C, "Member 'UAnimComponent_SCT_C::RunDeceleration' has a wrong offset!");
static_assert(offsetof(UAnimComponent_SCT_C, WalkingGroundFriction) == 0x000150, "Member 'UAnimComponent_SCT_C::WalkingGroundFriction' has a wrong offset!");
static_assert(offsetof(UAnimComponent_SCT_C, RunningGroundFriction) == 0x000154, "Member 'UAnimComponent_SCT_C::RunningGroundFriction' has a wrong offset!");
static_assert(offsetof(UAnimComponent_SCT_C, RotationOffset) == 0x000158, "Member 'UAnimComponent_SCT_C::RotationOffset' has a wrong offset!");
static_assert(offsetof(UAnimComponent_SCT_C, CardinalDirection) == 0x00015C, "Member 'UAnimComponent_SCT_C::CardinalDirection' has a wrong offset!");
static_assert(offsetof(UAnimComponent_SCT_C, RotationRateMultiplier) == 0x000160, "Member 'UAnimComponent_SCT_C::RotationRateMultiplier' has a wrong offset!");
static_assert(offsetof(UAnimComponent_SCT_C, JumpRotation) == 0x000164, "Member 'UAnimComponent_SCT_C::JumpRotation' has a wrong offset!");
static_assert(offsetof(UAnimComponent_SCT_C, RagdollOnGround) == 0x000170, "Member 'UAnimComponent_SCT_C::RagdollOnGround' has a wrong offset!");
static_assert(offsetof(UAnimComponent_SCT_C, IsRagdolled) == 0x000171, "Member 'UAnimComponent_SCT_C::IsRagdolled' has a wrong offset!");
static_assert(offsetof(UAnimComponent_SCT_C, ShouldForceRotation) == 0x000172, "Member 'UAnimComponent_SCT_C::ShouldForceRotation' has a wrong offset!");
static_assert(offsetof(UAnimComponent_SCT_C, ForceRotation) == 0x000174, "Member 'UAnimComponent_SCT_C::ForceRotation' has a wrong offset!");
static_assert(offsetof(UAnimComponent_SCT_C, AimType) == 0x000180, "Member 'UAnimComponent_SCT_C::AimType' has a wrong offset!");
static_assert(offsetof(UAnimComponent_SCT_C, Female) == 0x000181, "Member 'UAnimComponent_SCT_C::Female' has a wrong offset!");
static_assert(offsetof(UAnimComponent_SCT_C, ZeroGravity) == 0x000182, "Member 'UAnimComponent_SCT_C::ZeroGravity' has a wrong offset!");
static_assert(offsetof(UAnimComponent_SCT_C, LaunchTransform) == 0x000190, "Member 'UAnimComponent_SCT_C::LaunchTransform' has a wrong offset!");
static_assert(offsetof(UAnimComponent_SCT_C, LaunchCharacter) == 0x0001C0, "Member 'UAnimComponent_SCT_C::LaunchCharacter' has a wrong offset!");
static_assert(offsetof(UAnimComponent_SCT_C, CarryingCorpse) == 0x0001C1, "Member 'UAnimComponent_SCT_C::CarryingCorpse' has a wrong offset!");
static_assert(offsetof(UAnimComponent_SCT_C, BeingCarriedCorpse) == 0x0001C2, "Member 'UAnimComponent_SCT_C::BeingCarriedCorpse' has a wrong offset!");
static_assert(offsetof(UAnimComponent_SCT_C, LastValidRagdollLocation) == 0x0001C4, "Member 'UAnimComponent_SCT_C::LastValidRagdollLocation' has a wrong offset!");
static_assert(offsetof(UAnimComponent_SCT_C, BlinkCurve) == 0x0001D0, "Member 'UAnimComponent_SCT_C::BlinkCurve' has a wrong offset!");
static_assert(offsetof(UAnimComponent_SCT_C, ShouldUnragdoll) == 0x0001E0, "Member 'UAnimComponent_SCT_C::ShouldUnragdoll' has a wrong offset!");
static_assert(offsetof(UAnimComponent_SCT_C, IsDancing) == 0x0001E1, "Member 'UAnimComponent_SCT_C::IsDancing' has a wrong offset!");
static_assert(offsetof(UAnimComponent_SCT_C, DanceSeed) == 0x0001E4, "Member 'UAnimComponent_SCT_C::DanceSeed' has a wrong offset!");
static_assert(offsetof(UAnimComponent_SCT_C, DanceSeedStream) == 0x0001E8, "Member 'UAnimComponent_SCT_C::DanceSeedStream' has a wrong offset!");
static_assert(offsetof(UAnimComponent_SCT_C, RandomIntArray) == 0x0001F0, "Member 'UAnimComponent_SCT_C::RandomIntArray' has a wrong offset!");
static_assert(offsetof(UAnimComponent_SCT_C, RandomIntArrayCounter) == 0x000200, "Member 'UAnimComponent_SCT_C::RandomIntArrayCounter' has a wrong offset!");
static_assert(offsetof(UAnimComponent_SCT_C, RandomIterations) == 0x000204, "Member 'UAnimComponent_SCT_C::RandomIterations' has a wrong offset!");
static_assert(offsetof(UAnimComponent_SCT_C, IsDrowning) == 0x000208, "Member 'UAnimComponent_SCT_C::IsDrowning' has a wrong offset!");
static_assert(offsetof(UAnimComponent_SCT_C, IsDrowned) == 0x000209, "Member 'UAnimComponent_SCT_C::IsDrowned' has a wrong offset!");
static_assert(offsetof(UAnimComponent_SCT_C, IsFreezing) == 0x00020A, "Member 'UAnimComponent_SCT_C::IsFreezing' has a wrong offset!");
static_assert(offsetof(UAnimComponent_SCT_C, IsBurning) == 0x00020B, "Member 'UAnimComponent_SCT_C::IsBurning' has a wrong offset!");
static_assert(offsetof(UAnimComponent_SCT_C, IsBurned) == 0x00020C, "Member 'UAnimComponent_SCT_C::IsBurned' has a wrong offset!");
static_assert(offsetof(UAnimComponent_SCT_C, beingGrabbed) == 0x00020D, "Member 'UAnimComponent_SCT_C::beingGrabbed' has a wrong offset!");
static_assert(offsetof(UAnimComponent_SCT_C, IsGrabbing) == 0x00020E, "Member 'UAnimComponent_SCT_C::IsGrabbing' has a wrong offset!");
static_assert(offsetof(UAnimComponent_SCT_C, IsPushing) == 0x00020F, "Member 'UAnimComponent_SCT_C::IsPushing' has a wrong offset!");
static_assert(offsetof(UAnimComponent_SCT_C, IsOxygenPot) == 0x000210, "Member 'UAnimComponent_SCT_C::IsOxygenPot' has a wrong offset!");
static_assert(offsetof(UAnimComponent_SCT_C, IsThrowing) == 0x000211, "Member 'UAnimComponent_SCT_C::IsThrowing' has a wrong offset!");
static_assert(offsetof(UAnimComponent_SCT_C, IsElectrocuting) == 0x000212, "Member 'UAnimComponent_SCT_C::IsElectrocuting' has a wrong offset!");
static_assert(offsetof(UAnimComponent_SCT_C, IsElectrocuted) == 0x000213, "Member 'UAnimComponent_SCT_C::IsElectrocuted' has a wrong offset!");
static_assert(offsetof(UAnimComponent_SCT_C, LastRotation) == 0x000214, "Member 'UAnimComponent_SCT_C::LastRotation' has a wrong offset!");
static_assert(offsetof(UAnimComponent_SCT_C, InteractionAnim) == 0x000220, "Member 'UAnimComponent_SCT_C::InteractionAnim' has a wrong offset!");
static_assert(offsetof(UAnimComponent_SCT_C, PelvisRefactorRotation) == 0x000224, "Member 'UAnimComponent_SCT_C::PelvisRefactorRotation' has a wrong offset!");
static_assert(offsetof(UAnimComponent_SCT_C, IsFrozen) == 0x000230, "Member 'UAnimComponent_SCT_C::IsFrozen' has a wrong offset!");
static_assert(offsetof(UAnimComponent_SCT_C, DoTick) == 0x000231, "Member 'UAnimComponent_SCT_C::DoTick' has a wrong offset!");
static_assert(offsetof(UAnimComponent_SCT_C, blinkTrue) == 0x000232, "Member 'UAnimComponent_SCT_C::blinkTrue' has a wrong offset!");
static_assert(offsetof(UAnimComponent_SCT_C, GameTimeAtBlink) == 0x000234, "Member 'UAnimComponent_SCT_C::GameTimeAtBlink' has a wrong offset!");
static_assert(offsetof(UAnimComponent_SCT_C, TalkingTrue) == 0x000238, "Member 'UAnimComponent_SCT_C::TalkingTrue' has a wrong offset!");
static_assert(offsetof(UAnimComponent_SCT_C, IsDead) == 0x000239, "Member 'UAnimComponent_SCT_C::IsDead' has a wrong offset!");
static_assert(offsetof(UAnimComponent_SCT_C, PelvisBoneName) == 0x00023C, "Member 'UAnimComponent_SCT_C::PelvisBoneName' has a wrong offset!");
static_assert(offsetof(UAnimComponent_SCT_C, RagdollLocation) == 0x000244, "Member 'UAnimComponent_SCT_C::RagdollLocation' has a wrong offset!");
static_assert(offsetof(UAnimComponent_SCT_C, RagdollDeviationAllowance) == 0x000250, "Member 'UAnimComponent_SCT_C::RagdollDeviationAllowance' has a wrong offset!");
static_assert(offsetof(UAnimComponent_SCT_C, RagdollCorrectionForceMultiplier) == 0x000254, "Member 'UAnimComponent_SCT_C::RagdollCorrectionForceMultiplier' has a wrong offset!");
static_assert(offsetof(UAnimComponent_SCT_C, RagdollDeviationTime) == 0x000258, "Member 'UAnimComponent_SCT_C::RagdollDeviationTime' has a wrong offset!");
static_assert(offsetof(UAnimComponent_SCT_C, DistanceForMaxForce) == 0x00025C, "Member 'UAnimComponent_SCT_C::DistanceForMaxForce' has a wrong offset!");
static_assert(offsetof(UAnimComponent_SCT_C, RagdollForceCorrectionClose) == 0x000260, "Member 'UAnimComponent_SCT_C::RagdollForceCorrectionClose' has a wrong offset!");
static_assert(offsetof(UAnimComponent_SCT_C, RagdollForceCorrectionFar) == 0x000264, "Member 'UAnimComponent_SCT_C::RagdollForceCorrectionFar' has a wrong offset!");
static_assert(offsetof(UAnimComponent_SCT_C, GetupCheckPerformed) == 0x000268, "Member 'UAnimComponent_SCT_C::GetupCheckPerformed' has a wrong offset!");
static_assert(offsetof(UAnimComponent_SCT_C, GetupCheckAmount) == 0x00026C, "Member 'UAnimComponent_SCT_C::GetupCheckAmount' has a wrong offset!");
static_assert(offsetof(UAnimComponent_SCT_C, GetupCheckInterval) == 0x000270, "Member 'UAnimComponent_SCT_C::GetupCheckInterval' has a wrong offset!");
static_assert(offsetof(UAnimComponent_SCT_C, GetUpVelocityThreshold) == 0x000274, "Member 'UAnimComponent_SCT_C::GetUpVelocityThreshold' has a wrong offset!");
static_assert(offsetof(UAnimComponent_SCT_C, RagdollForceMultiplierDistance) == 0x000278, "Member 'UAnimComponent_SCT_C::RagdollForceMultiplierDistance' has a wrong offset!");
static_assert(offsetof(UAnimComponent_SCT_C, UnragdollTime) == 0x00027C, "Member 'UAnimComponent_SCT_C::UnragdollTime' has a wrong offset!");
static_assert(offsetof(UAnimComponent_SCT_C, MaxRagdollTime) == 0x000280, "Member 'UAnimComponent_SCT_C::MaxRagdollTime' has a wrong offset!");
static_assert(offsetof(UAnimComponent_SCT_C, TimeForSuperCorrect) == 0x000284, "Member 'UAnimComponent_SCT_C::TimeForSuperCorrect' has a wrong offset!");
static_assert(offsetof(UAnimComponent_SCT_C, ReplicateRagdoll) == 0x000288, "Member 'UAnimComponent_SCT_C::ReplicateRagdoll' has a wrong offset!");

}

