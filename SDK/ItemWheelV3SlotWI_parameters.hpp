#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: ItemWheelV3SlotWI

#include "Basic.hpp"

#include "SCT_structs.hpp"
#include "SlateCore_structs.hpp"
#include "E_ItemSlotStates_structs.hpp"


namespace SDK::Params
{

// Function ItemWheelV3SlotWI.ItemWheelV3SlotWI_C.ExecuteUbergraph_ItemWheelV3SlotWI
// 0x00A0 (0x00A0 - 0x0000)
struct ItemWheelV3SlotWI_C_ExecuteUbergraph_ItemWheelV3SlotWI final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_ItemSlotStates                              K2Node_CustomEvent_Selection;                      // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6[0x2];                                        // 0x0006(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FItemDetails                           CallFunc_GetItemDetails_ReturnValue;               // 0x0008(0x0050)(ConstParm)
	bool                                          K2Node_Event_IsDesignTime;                         // 0x0058(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_59[0x7];                                       // 0x0059(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ACharacterSCTBP_C*                      CallFunc_GetSCT_Player_Character_AsCharacter_SCT;  // 0x0060(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UInventory*                             CallFunc_GetSCT_Player_Character_CharacterInventory; // 0x0068(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UTexture2D*                             K2Node_ComponentBoundEvent_Icon_1;                 // 0x0070(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0078(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsDedicatedServer_ReturnValue;            // 0x0079(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7A[0x6];                                       // 0x007A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UTexture2D*                             K2Node_ComponentBoundEvent_Icon;                   // 0x0080(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FText                                   K2Node_ComponentBoundEvent_Text;                   // 0x0088(0x0018)(ConstParm)
};
static_assert(alignof(ItemWheelV3SlotWI_C_ExecuteUbergraph_ItemWheelV3SlotWI) == 0x000008, "Wrong alignment on ItemWheelV3SlotWI_C_ExecuteUbergraph_ItemWheelV3SlotWI");
static_assert(sizeof(ItemWheelV3SlotWI_C_ExecuteUbergraph_ItemWheelV3SlotWI) == 0x0000A0, "Wrong size on ItemWheelV3SlotWI_C_ExecuteUbergraph_ItemWheelV3SlotWI");
static_assert(offsetof(ItemWheelV3SlotWI_C_ExecuteUbergraph_ItemWheelV3SlotWI, EntryPoint) == 0x000000, "Member 'ItemWheelV3SlotWI_C_ExecuteUbergraph_ItemWheelV3SlotWI::EntryPoint' has a wrong offset!");
static_assert(offsetof(ItemWheelV3SlotWI_C_ExecuteUbergraph_ItemWheelV3SlotWI, K2Node_CustomEvent_Selection) == 0x000004, "Member 'ItemWheelV3SlotWI_C_ExecuteUbergraph_ItemWheelV3SlotWI::K2Node_CustomEvent_Selection' has a wrong offset!");
static_assert(offsetof(ItemWheelV3SlotWI_C_ExecuteUbergraph_ItemWheelV3SlotWI, K2Node_SwitchEnum_CmpSuccess) == 0x000005, "Member 'ItemWheelV3SlotWI_C_ExecuteUbergraph_ItemWheelV3SlotWI::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");
static_assert(offsetof(ItemWheelV3SlotWI_C_ExecuteUbergraph_ItemWheelV3SlotWI, CallFunc_GetItemDetails_ReturnValue) == 0x000008, "Member 'ItemWheelV3SlotWI_C_ExecuteUbergraph_ItemWheelV3SlotWI::CallFunc_GetItemDetails_ReturnValue' has a wrong offset!");
static_assert(offsetof(ItemWheelV3SlotWI_C_ExecuteUbergraph_ItemWheelV3SlotWI, K2Node_Event_IsDesignTime) == 0x000058, "Member 'ItemWheelV3SlotWI_C_ExecuteUbergraph_ItemWheelV3SlotWI::K2Node_Event_IsDesignTime' has a wrong offset!");
static_assert(offsetof(ItemWheelV3SlotWI_C_ExecuteUbergraph_ItemWheelV3SlotWI, CallFunc_GetSCT_Player_Character_AsCharacter_SCT) == 0x000060, "Member 'ItemWheelV3SlotWI_C_ExecuteUbergraph_ItemWheelV3SlotWI::CallFunc_GetSCT_Player_Character_AsCharacter_SCT' has a wrong offset!");
static_assert(offsetof(ItemWheelV3SlotWI_C_ExecuteUbergraph_ItemWheelV3SlotWI, CallFunc_GetSCT_Player_Character_CharacterInventory) == 0x000068, "Member 'ItemWheelV3SlotWI_C_ExecuteUbergraph_ItemWheelV3SlotWI::CallFunc_GetSCT_Player_Character_CharacterInventory' has a wrong offset!");
static_assert(offsetof(ItemWheelV3SlotWI_C_ExecuteUbergraph_ItemWheelV3SlotWI, K2Node_ComponentBoundEvent_Icon_1) == 0x000070, "Member 'ItemWheelV3SlotWI_C_ExecuteUbergraph_ItemWheelV3SlotWI::K2Node_ComponentBoundEvent_Icon_1' has a wrong offset!");
static_assert(offsetof(ItemWheelV3SlotWI_C_ExecuteUbergraph_ItemWheelV3SlotWI, CallFunc_IsValid_ReturnValue) == 0x000078, "Member 'ItemWheelV3SlotWI_C_ExecuteUbergraph_ItemWheelV3SlotWI::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(ItemWheelV3SlotWI_C_ExecuteUbergraph_ItemWheelV3SlotWI, CallFunc_IsDedicatedServer_ReturnValue) == 0x000079, "Member 'ItemWheelV3SlotWI_C_ExecuteUbergraph_ItemWheelV3SlotWI::CallFunc_IsDedicatedServer_ReturnValue' has a wrong offset!");
static_assert(offsetof(ItemWheelV3SlotWI_C_ExecuteUbergraph_ItemWheelV3SlotWI, K2Node_ComponentBoundEvent_Icon) == 0x000080, "Member 'ItemWheelV3SlotWI_C_ExecuteUbergraph_ItemWheelV3SlotWI::K2Node_ComponentBoundEvent_Icon' has a wrong offset!");
static_assert(offsetof(ItemWheelV3SlotWI_C_ExecuteUbergraph_ItemWheelV3SlotWI, K2Node_ComponentBoundEvent_Text) == 0x000088, "Member 'ItemWheelV3SlotWI_C_ExecuteUbergraph_ItemWheelV3SlotWI::K2Node_ComponentBoundEvent_Text' has a wrong offset!");

// Function ItemWheelV3SlotWI.ItemWheelV3SlotWI_C.BndEvt__ItemWheelV3SlotWI_ControllerIconHelperWI_K2Node_ComponentBoundEvent_3_OnShowControllerKeyText__DelegateSignature
// 0x0018 (0x0018 - 0x0000)
struct ItemWheelV3SlotWI_C_BndEvt__ItemWheelV3SlotWI_ControllerIconHelperWI_K2Node_ComponentBoundEvent_3_OnShowControllerKeyText__DelegateSignature final
{
public:
	class FText                                   Text;                                              // 0x0000(0x0018)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
};
static_assert(alignof(ItemWheelV3SlotWI_C_BndEvt__ItemWheelV3SlotWI_ControllerIconHelperWI_K2Node_ComponentBoundEvent_3_OnShowControllerKeyText__DelegateSignature) == 0x000008, "Wrong alignment on ItemWheelV3SlotWI_C_BndEvt__ItemWheelV3SlotWI_ControllerIconHelperWI_K2Node_ComponentBoundEvent_3_OnShowControllerKeyText__DelegateSignature");
static_assert(sizeof(ItemWheelV3SlotWI_C_BndEvt__ItemWheelV3SlotWI_ControllerIconHelperWI_K2Node_ComponentBoundEvent_3_OnShowControllerKeyText__DelegateSignature) == 0x000018, "Wrong size on ItemWheelV3SlotWI_C_BndEvt__ItemWheelV3SlotWI_ControllerIconHelperWI_K2Node_ComponentBoundEvent_3_OnShowControllerKeyText__DelegateSignature");
static_assert(offsetof(ItemWheelV3SlotWI_C_BndEvt__ItemWheelV3SlotWI_ControllerIconHelperWI_K2Node_ComponentBoundEvent_3_OnShowControllerKeyText__DelegateSignature, Text) == 0x000000, "Member 'ItemWheelV3SlotWI_C_BndEvt__ItemWheelV3SlotWI_ControllerIconHelperWI_K2Node_ComponentBoundEvent_3_OnShowControllerKeyText__DelegateSignature::Text' has a wrong offset!");

// Function ItemWheelV3SlotWI.ItemWheelV3SlotWI_C.BndEvt__ItemWheelV3SlotWI_ControllerIconHelperWI_K2Node_ComponentBoundEvent_2_OnShowControllerKeyIcon__DelegateSignature
// 0x0008 (0x0008 - 0x0000)
struct ItemWheelV3SlotWI_C_BndEvt__ItemWheelV3SlotWI_ControllerIconHelperWI_K2Node_ComponentBoundEvent_2_OnShowControllerKeyIcon__DelegateSignature final
{
public:
	class UTexture2D*                             Icon;                                              // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ItemWheelV3SlotWI_C_BndEvt__ItemWheelV3SlotWI_ControllerIconHelperWI_K2Node_ComponentBoundEvent_2_OnShowControllerKeyIcon__DelegateSignature) == 0x000008, "Wrong alignment on ItemWheelV3SlotWI_C_BndEvt__ItemWheelV3SlotWI_ControllerIconHelperWI_K2Node_ComponentBoundEvent_2_OnShowControllerKeyIcon__DelegateSignature");
static_assert(sizeof(ItemWheelV3SlotWI_C_BndEvt__ItemWheelV3SlotWI_ControllerIconHelperWI_K2Node_ComponentBoundEvent_2_OnShowControllerKeyIcon__DelegateSignature) == 0x000008, "Wrong size on ItemWheelV3SlotWI_C_BndEvt__ItemWheelV3SlotWI_ControllerIconHelperWI_K2Node_ComponentBoundEvent_2_OnShowControllerKeyIcon__DelegateSignature");
static_assert(offsetof(ItemWheelV3SlotWI_C_BndEvt__ItemWheelV3SlotWI_ControllerIconHelperWI_K2Node_ComponentBoundEvent_2_OnShowControllerKeyIcon__DelegateSignature, Icon) == 0x000000, "Member 'ItemWheelV3SlotWI_C_BndEvt__ItemWheelV3SlotWI_ControllerIconHelperWI_K2Node_ComponentBoundEvent_2_OnShowControllerKeyIcon__DelegateSignature::Icon' has a wrong offset!");

// Function ItemWheelV3SlotWI.ItemWheelV3SlotWI_C.BndEvt__ItemWheelV3SlotWI_ControllerIconHelperWI_K2Node_ComponentBoundEvent_1_OnShowControllerKeyIcon__DelegateSignature
// 0x0008 (0x0008 - 0x0000)
struct ItemWheelV3SlotWI_C_BndEvt__ItemWheelV3SlotWI_ControllerIconHelperWI_K2Node_ComponentBoundEvent_1_OnShowControllerKeyIcon__DelegateSignature final
{
public:
	class UTexture2D*                             Icon;                                              // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ItemWheelV3SlotWI_C_BndEvt__ItemWheelV3SlotWI_ControllerIconHelperWI_K2Node_ComponentBoundEvent_1_OnShowControllerKeyIcon__DelegateSignature) == 0x000008, "Wrong alignment on ItemWheelV3SlotWI_C_BndEvt__ItemWheelV3SlotWI_ControllerIconHelperWI_K2Node_ComponentBoundEvent_1_OnShowControllerKeyIcon__DelegateSignature");
static_assert(sizeof(ItemWheelV3SlotWI_C_BndEvt__ItemWheelV3SlotWI_ControllerIconHelperWI_K2Node_ComponentBoundEvent_1_OnShowControllerKeyIcon__DelegateSignature) == 0x000008, "Wrong size on ItemWheelV3SlotWI_C_BndEvt__ItemWheelV3SlotWI_ControllerIconHelperWI_K2Node_ComponentBoundEvent_1_OnShowControllerKeyIcon__DelegateSignature");
static_assert(offsetof(ItemWheelV3SlotWI_C_BndEvt__ItemWheelV3SlotWI_ControllerIconHelperWI_K2Node_ComponentBoundEvent_1_OnShowControllerKeyIcon__DelegateSignature, Icon) == 0x000000, "Member 'ItemWheelV3SlotWI_C_BndEvt__ItemWheelV3SlotWI_ControllerIconHelperWI_K2Node_ComponentBoundEvent_1_OnShowControllerKeyIcon__DelegateSignature::Icon' has a wrong offset!");

// Function ItemWheelV3SlotWI.ItemWheelV3SlotWI_C.PreConstruct
// 0x0001 (0x0001 - 0x0000)
struct ItemWheelV3SlotWI_C_PreConstruct final
{
public:
	bool                                          IsDesignTime;                                      // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(ItemWheelV3SlotWI_C_PreConstruct) == 0x000001, "Wrong alignment on ItemWheelV3SlotWI_C_PreConstruct");
static_assert(sizeof(ItemWheelV3SlotWI_C_PreConstruct) == 0x000001, "Wrong size on ItemWheelV3SlotWI_C_PreConstruct");
static_assert(offsetof(ItemWheelV3SlotWI_C_PreConstruct, IsDesignTime) == 0x000000, "Member 'ItemWheelV3SlotWI_C_PreConstruct::IsDesignTime' has a wrong offset!");

// Function ItemWheelV3SlotWI.ItemWheelV3SlotWI_C.Rebuild
// 0x0001 (0x0001 - 0x0000)
struct ItemWheelV3SlotWI_C_Rebuild final
{
public:
	E_ItemSlotStates                              Selection;                                         // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ItemWheelV3SlotWI_C_Rebuild) == 0x000001, "Wrong alignment on ItemWheelV3SlotWI_C_Rebuild");
static_assert(sizeof(ItemWheelV3SlotWI_C_Rebuild) == 0x000001, "Wrong size on ItemWheelV3SlotWI_C_Rebuild");
static_assert(offsetof(ItemWheelV3SlotWI_C_Rebuild, Selection) == 0x000000, "Member 'ItemWheelV3SlotWI_C_Rebuild::Selection' has a wrong offset!");

// Function ItemWheelV3SlotWI.ItemWheelV3SlotWI_C.NotEquippedHover
// 0x0078 (0x0078 - 0x0000)
struct ItemWheelV3SlotWI_C_NotEquippedHover final
{
public:
	struct FSlateColor                            K2Node_MakeStruct_SlateColor;                      // 0x0000(0x0028)(UObjectWrapper)
	struct FSlateColor                            K2Node_MakeStruct_SlateColor_1;                    // 0x0028(0x0028)(UObjectWrapper)
	struct FSlateColor                            K2Node_MakeStruct_SlateColor_2;                    // 0x0050(0x0028)(UObjectWrapper)
};
static_assert(alignof(ItemWheelV3SlotWI_C_NotEquippedHover) == 0x000008, "Wrong alignment on ItemWheelV3SlotWI_C_NotEquippedHover");
static_assert(sizeof(ItemWheelV3SlotWI_C_NotEquippedHover) == 0x000078, "Wrong size on ItemWheelV3SlotWI_C_NotEquippedHover");
static_assert(offsetof(ItemWheelV3SlotWI_C_NotEquippedHover, K2Node_MakeStruct_SlateColor) == 0x000000, "Member 'ItemWheelV3SlotWI_C_NotEquippedHover::K2Node_MakeStruct_SlateColor' has a wrong offset!");
static_assert(offsetof(ItemWheelV3SlotWI_C_NotEquippedHover, K2Node_MakeStruct_SlateColor_1) == 0x000028, "Member 'ItemWheelV3SlotWI_C_NotEquippedHover::K2Node_MakeStruct_SlateColor_1' has a wrong offset!");
static_assert(offsetof(ItemWheelV3SlotWI_C_NotEquippedHover, K2Node_MakeStruct_SlateColor_2) == 0x000050, "Member 'ItemWheelV3SlotWI_C_NotEquippedHover::K2Node_MakeStruct_SlateColor_2' has a wrong offset!");

// Function ItemWheelV3SlotWI.ItemWheelV3SlotWI_C.NotEquipped
// 0x0078 (0x0078 - 0x0000)
struct ItemWheelV3SlotWI_C_NotEquipped final
{
public:
	struct FSlateColor                            K2Node_MakeStruct_SlateColor;                      // 0x0000(0x0028)(UObjectWrapper)
	struct FSlateColor                            K2Node_MakeStruct_SlateColor_1;                    // 0x0028(0x0028)(UObjectWrapper)
	struct FSlateColor                            K2Node_MakeStruct_SlateColor_2;                    // 0x0050(0x0028)(UObjectWrapper)
};
static_assert(alignof(ItemWheelV3SlotWI_C_NotEquipped) == 0x000008, "Wrong alignment on ItemWheelV3SlotWI_C_NotEquipped");
static_assert(sizeof(ItemWheelV3SlotWI_C_NotEquipped) == 0x000078, "Wrong size on ItemWheelV3SlotWI_C_NotEquipped");
static_assert(offsetof(ItemWheelV3SlotWI_C_NotEquipped, K2Node_MakeStruct_SlateColor) == 0x000000, "Member 'ItemWheelV3SlotWI_C_NotEquipped::K2Node_MakeStruct_SlateColor' has a wrong offset!");
static_assert(offsetof(ItemWheelV3SlotWI_C_NotEquipped, K2Node_MakeStruct_SlateColor_1) == 0x000028, "Member 'ItemWheelV3SlotWI_C_NotEquipped::K2Node_MakeStruct_SlateColor_1' has a wrong offset!");
static_assert(offsetof(ItemWheelV3SlotWI_C_NotEquipped, K2Node_MakeStruct_SlateColor_2) == 0x000050, "Member 'ItemWheelV3SlotWI_C_NotEquipped::K2Node_MakeStruct_SlateColor_2' has a wrong offset!");

// Function ItemWheelV3SlotWI.ItemWheelV3SlotWI_C.Equipped
// 0x0128 (0x0128 - 0x0000)
struct ItemWheelV3SlotWI_C_Equipped final
{
public:
	EInventorySlotID                              Slot_0;                                            // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EInventorySlotID                              Temp_byte_Variable;                                // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2[0x2];                                        // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   Temp_name_Variable;                                // 0x0004(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	class FName                                   Temp_name_Variable_1;                              // 0x000C(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	class FName                                   Temp_name_Variable_2;                              // 0x0014(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	EInventorySlotID                              Temp_byte_Variable_1;                              // 0x001C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   Temp_text_Variable;                                // 0x0020(0x0018)()
	class FText                                   Temp_text_Variable_1;                              // 0x0038(0x0018)()
	class FText                                   Temp_text_Variable_2;                              // 0x0050(0x0018)()
	class FText                                   K2Node_Select_Default;                             // 0x0068(0x0018)()
	struct FSlateColor                            K2Node_MakeStruct_SlateColor;                      // 0x0080(0x0028)(UObjectWrapper)
	struct FSlateColor                            K2Node_MakeStruct_SlateColor_1;                    // 0x00A8(0x0028)(UObjectWrapper)
	struct FSlateColor                            K2Node_MakeStruct_SlateColor_2;                    // 0x00D0(0x0028)(UObjectWrapper)
	struct FSlateColor                            K2Node_MakeStruct_SlateColor_3;                    // 0x00F8(0x0028)(UObjectWrapper)
	class FName                                   K2Node_Select_Default_1;                           // 0x0120(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
};
static_assert(alignof(ItemWheelV3SlotWI_C_Equipped) == 0x000008, "Wrong alignment on ItemWheelV3SlotWI_C_Equipped");
static_assert(sizeof(ItemWheelV3SlotWI_C_Equipped) == 0x000128, "Wrong size on ItemWheelV3SlotWI_C_Equipped");
static_assert(offsetof(ItemWheelV3SlotWI_C_Equipped, Slot_0) == 0x000000, "Member 'ItemWheelV3SlotWI_C_Equipped::Slot_0' has a wrong offset!");
static_assert(offsetof(ItemWheelV3SlotWI_C_Equipped, Temp_byte_Variable) == 0x000001, "Member 'ItemWheelV3SlotWI_C_Equipped::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(ItemWheelV3SlotWI_C_Equipped, Temp_name_Variable) == 0x000004, "Member 'ItemWheelV3SlotWI_C_Equipped::Temp_name_Variable' has a wrong offset!");
static_assert(offsetof(ItemWheelV3SlotWI_C_Equipped, Temp_name_Variable_1) == 0x00000C, "Member 'ItemWheelV3SlotWI_C_Equipped::Temp_name_Variable_1' has a wrong offset!");
static_assert(offsetof(ItemWheelV3SlotWI_C_Equipped, Temp_name_Variable_2) == 0x000014, "Member 'ItemWheelV3SlotWI_C_Equipped::Temp_name_Variable_2' has a wrong offset!");
static_assert(offsetof(ItemWheelV3SlotWI_C_Equipped, Temp_byte_Variable_1) == 0x00001C, "Member 'ItemWheelV3SlotWI_C_Equipped::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(ItemWheelV3SlotWI_C_Equipped, Temp_text_Variable) == 0x000020, "Member 'ItemWheelV3SlotWI_C_Equipped::Temp_text_Variable' has a wrong offset!");
static_assert(offsetof(ItemWheelV3SlotWI_C_Equipped, Temp_text_Variable_1) == 0x000038, "Member 'ItemWheelV3SlotWI_C_Equipped::Temp_text_Variable_1' has a wrong offset!");
static_assert(offsetof(ItemWheelV3SlotWI_C_Equipped, Temp_text_Variable_2) == 0x000050, "Member 'ItemWheelV3SlotWI_C_Equipped::Temp_text_Variable_2' has a wrong offset!");
static_assert(offsetof(ItemWheelV3SlotWI_C_Equipped, K2Node_Select_Default) == 0x000068, "Member 'ItemWheelV3SlotWI_C_Equipped::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(ItemWheelV3SlotWI_C_Equipped, K2Node_MakeStruct_SlateColor) == 0x000080, "Member 'ItemWheelV3SlotWI_C_Equipped::K2Node_MakeStruct_SlateColor' has a wrong offset!");
static_assert(offsetof(ItemWheelV3SlotWI_C_Equipped, K2Node_MakeStruct_SlateColor_1) == 0x0000A8, "Member 'ItemWheelV3SlotWI_C_Equipped::K2Node_MakeStruct_SlateColor_1' has a wrong offset!");
static_assert(offsetof(ItemWheelV3SlotWI_C_Equipped, K2Node_MakeStruct_SlateColor_2) == 0x0000D0, "Member 'ItemWheelV3SlotWI_C_Equipped::K2Node_MakeStruct_SlateColor_2' has a wrong offset!");
static_assert(offsetof(ItemWheelV3SlotWI_C_Equipped, K2Node_MakeStruct_SlateColor_3) == 0x0000F8, "Member 'ItemWheelV3SlotWI_C_Equipped::K2Node_MakeStruct_SlateColor_3' has a wrong offset!");
static_assert(offsetof(ItemWheelV3SlotWI_C_Equipped, K2Node_Select_Default_1) == 0x000120, "Member 'ItemWheelV3SlotWI_C_Equipped::K2Node_Select_Default_1' has a wrong offset!");

// Function ItemWheelV3SlotWI.ItemWheelV3SlotWI_C.EquippedHover
// 0x00A0 (0x00A0 - 0x0000)
struct ItemWheelV3SlotWI_C_EquippedHover final
{
public:
	struct FSlateColor                            K2Node_MakeStruct_SlateColor;                      // 0x0000(0x0028)(UObjectWrapper)
	struct FSlateColor                            K2Node_MakeStruct_SlateColor_1;                    // 0x0028(0x0028)(UObjectWrapper)
	struct FSlateColor                            K2Node_MakeStruct_SlateColor_2;                    // 0x0050(0x0028)(UObjectWrapper)
	struct FSlateColor                            K2Node_MakeStruct_SlateColor_3;                    // 0x0078(0x0028)(UObjectWrapper)
};
static_assert(alignof(ItemWheelV3SlotWI_C_EquippedHover) == 0x000008, "Wrong alignment on ItemWheelV3SlotWI_C_EquippedHover");
static_assert(sizeof(ItemWheelV3SlotWI_C_EquippedHover) == 0x0000A0, "Wrong size on ItemWheelV3SlotWI_C_EquippedHover");
static_assert(offsetof(ItemWheelV3SlotWI_C_EquippedHover, K2Node_MakeStruct_SlateColor) == 0x000000, "Member 'ItemWheelV3SlotWI_C_EquippedHover::K2Node_MakeStruct_SlateColor' has a wrong offset!");
static_assert(offsetof(ItemWheelV3SlotWI_C_EquippedHover, K2Node_MakeStruct_SlateColor_1) == 0x000028, "Member 'ItemWheelV3SlotWI_C_EquippedHover::K2Node_MakeStruct_SlateColor_1' has a wrong offset!");
static_assert(offsetof(ItemWheelV3SlotWI_C_EquippedHover, K2Node_MakeStruct_SlateColor_2) == 0x000050, "Member 'ItemWheelV3SlotWI_C_EquippedHover::K2Node_MakeStruct_SlateColor_2' has a wrong offset!");
static_assert(offsetof(ItemWheelV3SlotWI_C_EquippedHover, K2Node_MakeStruct_SlateColor_3) == 0x000078, "Member 'ItemWheelV3SlotWI_C_EquippedHover::K2Node_MakeStruct_SlateColor_3' has a wrong offset!");

// Function ItemWheelV3SlotWI.ItemWheelV3SlotWI_C.Initialize
// 0x0010 (0x0010 - 0x0000)
struct ItemWheelV3SlotWI_C_Initialize final
{
public:
	class UItem*                                  Item_0;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UItemWheelV2WI_C*                       ParentWidgetItemWheel_0;                           // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ItemWheelV3SlotWI_C_Initialize) == 0x000008, "Wrong alignment on ItemWheelV3SlotWI_C_Initialize");
static_assert(sizeof(ItemWheelV3SlotWI_C_Initialize) == 0x000010, "Wrong size on ItemWheelV3SlotWI_C_Initialize");
static_assert(offsetof(ItemWheelV3SlotWI_C_Initialize, Item_0) == 0x000000, "Member 'ItemWheelV3SlotWI_C_Initialize::Item_0' has a wrong offset!");
static_assert(offsetof(ItemWheelV3SlotWI_C_Initialize, ParentWidgetItemWheel_0) == 0x000008, "Member 'ItemWheelV3SlotWI_C_Initialize::ParentWidgetItemWheel_0' has a wrong offset!");

// Function ItemWheelV3SlotWI.ItemWheelV3SlotWI_C.SetIconAndStacks
// 0x00E8 (0x00E8 - 0x0000)
struct ItemWheelV3SlotWI_C_SetIconAndStacks final
{
public:
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FItemDetails                           CallFunc_GetItemDetails_ReturnValue;               // 0x0008(0x0050)(ConstParm)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue;            // 0x0058(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_59[0x7];                                       // 0x0059(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   CallFunc_Conv_IntToText_ReturnValue;               // 0x0060(0x0018)()
	class FString                                 CallFunc_Conv_TextToString_ReturnValue;            // 0x0078(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FText                                   CallFunc_Conv_IntToText_ReturnValue_1;             // 0x0088(0x0018)()
	class FString                                 CallFunc_Conv_TextToString_ReturnValue_1;          // 0x00A0(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue;                // 0x00B0(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_1;              // 0x00C0(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FText                                   CallFunc_Conv_StringToText_ReturnValue;            // 0x00D0(0x0018)()
};
static_assert(alignof(ItemWheelV3SlotWI_C_SetIconAndStacks) == 0x000008, "Wrong alignment on ItemWheelV3SlotWI_C_SetIconAndStacks");
static_assert(sizeof(ItemWheelV3SlotWI_C_SetIconAndStacks) == 0x0000E8, "Wrong size on ItemWheelV3SlotWI_C_SetIconAndStacks");
static_assert(offsetof(ItemWheelV3SlotWI_C_SetIconAndStacks, CallFunc_IsValid_ReturnValue) == 0x000000, "Member 'ItemWheelV3SlotWI_C_SetIconAndStacks::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(ItemWheelV3SlotWI_C_SetIconAndStacks, CallFunc_GetItemDetails_ReturnValue) == 0x000008, "Member 'ItemWheelV3SlotWI_C_SetIconAndStacks::CallFunc_GetItemDetails_ReturnValue' has a wrong offset!");
static_assert(offsetof(ItemWheelV3SlotWI_C_SetIconAndStacks, CallFunc_EqualEqual_IntInt_ReturnValue) == 0x000058, "Member 'ItemWheelV3SlotWI_C_SetIconAndStacks::CallFunc_EqualEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(ItemWheelV3SlotWI_C_SetIconAndStacks, CallFunc_Conv_IntToText_ReturnValue) == 0x000060, "Member 'ItemWheelV3SlotWI_C_SetIconAndStacks::CallFunc_Conv_IntToText_ReturnValue' has a wrong offset!");
static_assert(offsetof(ItemWheelV3SlotWI_C_SetIconAndStacks, CallFunc_Conv_TextToString_ReturnValue) == 0x000078, "Member 'ItemWheelV3SlotWI_C_SetIconAndStacks::CallFunc_Conv_TextToString_ReturnValue' has a wrong offset!");
static_assert(offsetof(ItemWheelV3SlotWI_C_SetIconAndStacks, CallFunc_Conv_IntToText_ReturnValue_1) == 0x000088, "Member 'ItemWheelV3SlotWI_C_SetIconAndStacks::CallFunc_Conv_IntToText_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ItemWheelV3SlotWI_C_SetIconAndStacks, CallFunc_Conv_TextToString_ReturnValue_1) == 0x0000A0, "Member 'ItemWheelV3SlotWI_C_SetIconAndStacks::CallFunc_Conv_TextToString_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ItemWheelV3SlotWI_C_SetIconAndStacks, CallFunc_Concat_StrStr_ReturnValue) == 0x0000B0, "Member 'ItemWheelV3SlotWI_C_SetIconAndStacks::CallFunc_Concat_StrStr_ReturnValue' has a wrong offset!");
static_assert(offsetof(ItemWheelV3SlotWI_C_SetIconAndStacks, CallFunc_Concat_StrStr_ReturnValue_1) == 0x0000C0, "Member 'ItemWheelV3SlotWI_C_SetIconAndStacks::CallFunc_Concat_StrStr_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ItemWheelV3SlotWI_C_SetIconAndStacks, CallFunc_Conv_StringToText_ReturnValue) == 0x0000D0, "Member 'ItemWheelV3SlotWI_C_SetIconAndStacks::CallFunc_Conv_StringToText_ReturnValue' has a wrong offset!");

}

