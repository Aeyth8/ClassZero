#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_AAS_BeltSystem

#include "Basic.hpp"

#include "BP_AAS_BeltSystem_classes.hpp"
#include "BP_AAS_BeltSystem_parameters.hpp"


namespace SDK
{

// Function BP_AAS_BeltSystem.BP_AAS_BeltSystem_C.ExecuteUbergraph_BP_AAS_BeltSystem
// (Final, UbergraphFunction)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_AAS_BeltSystem_C::ExecuteUbergraph_BP_AAS_BeltSystem(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AAS_BeltSystem_C", "ExecuteUbergraph_BP_AAS_BeltSystem");

	Params::BP_AAS_BeltSystem_C_ExecuteUbergraph_BP_AAS_BeltSystem Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_AAS_BeltSystem.BP_AAS_BeltSystem_C.Get Indicator Scale
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// struct FVector2D                        Radius_0                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          Return                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_AAS_BeltSystem_C::Get_Indicator_Scale(const struct FVector2D& Radius_0, struct FVector* Return)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AAS_BeltSystem_C", "Get Indicator Scale");

	Params::BP_AAS_BeltSystem_C_Get_Indicator_Scale Parms{};

	Parms.Radius_0 = std::move(Radius_0);

	UObject::ProcessEvent(Func, &Parms);

	if (Return != nullptr)
		*Return = std::move(Parms.Return);
}


// Function BP_AAS_BeltSystem.BP_AAS_BeltSystem_C.Get Belt Range Inner
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// struct FVector2D                        ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

struct FVector2D ABP_AAS_BeltSystem_C::Get_Belt_Range_Inner()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AAS_BeltSystem_C", "Get Belt Range Inner");

	Params::BP_AAS_BeltSystem_C_Get_Belt_Range_Inner Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function BP_AAS_BeltSystem.BP_AAS_BeltSystem_C.Get Belt Range Outer
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// struct FVector2D                        ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

struct FVector2D ABP_AAS_BeltSystem_C::Get_Belt_Range_Outer()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AAS_BeltSystem_C", "Get Belt Range Outer");

	Params::BP_AAS_BeltSystem_C_Get_Belt_Range_Outer Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function BP_AAS_BeltSystem.BP_AAS_BeltSystem_C.Get New Orbit Position
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FVector                          New_Location                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   BeltStrength                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   OrbitStrength                                          (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_AAS_BeltSystem_C::Get_New_Orbit_Position(struct FVector* New_Location, float* BeltStrength, float* OrbitStrength)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AAS_BeltSystem_C", "Get New Orbit Position");

	Params::BP_AAS_BeltSystem_C_Get_New_Orbit_Position Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (New_Location != nullptr)
		*New_Location = std::move(Parms.New_Location);

	if (BeltStrength != nullptr)
		*BeltStrength = Parms.BeltStrength;

	if (OrbitStrength != nullptr)
		*OrbitStrength = Parms.OrbitStrength;
}


// Function BP_AAS_BeltSystem.BP_AAS_BeltSystem_C.Get Orbit Range
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// struct FVector2D                        Range                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_AAS_BeltSystem_C::Get_Orbit_Range(struct FVector2D* Range)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AAS_BeltSystem_C", "Get Orbit Range");

	Params::BP_AAS_BeltSystem_C_Get_Orbit_Range Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Range != nullptr)
		*Range = std::move(Parms.Range);
}


// Function BP_AAS_BeltSystem.BP_AAS_BeltSystem_C.ReceiveBeginPlay
// (Event, Protected, BlueprintEvent)

void ABP_AAS_BeltSystem_C::ReceiveBeginPlay()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AAS_BeltSystem_C", "ReceiveBeginPlay");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_AAS_BeltSystem.BP_AAS_BeltSystem_C.UpdateIndicators
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Completed                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_AAS_BeltSystem_C::UpdateIndicators(bool* Completed)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AAS_BeltSystem_C", "UpdateIndicators");

	Params::BP_AAS_BeltSystem_C_UpdateIndicators Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Completed != nullptr)
		*Completed = Parms.Completed;
}


// Function BP_AAS_BeltSystem.BP_AAS_BeltSystem_C.Generate Asteroid Data
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   Option_Index                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   Asteroid_Index                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FStruct_AAS_AsteroidDefaults     Defaults                                               (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FStruct_AAS_AsteroidOption       Options                                                (BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, HasGetValueTypeHash)
// bool                                    GenerationValid                                        (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
// struct FStruct_AAS_AsteroidInstanceData New_Asteroid_Instance_Data                             (Parm, OutParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_AAS_BeltSystem_C::Generate_Asteroid_Data(int32 Option_Index, int32 Asteroid_Index, const struct FStruct_AAS_AsteroidDefaults& Defaults, const struct FStruct_AAS_AsteroidOption& Options, bool* GenerationValid, struct FStruct_AAS_AsteroidInstanceData* New_Asteroid_Instance_Data)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AAS_BeltSystem_C", "Generate Asteroid Data");

	Params::BP_AAS_BeltSystem_C_Generate_Asteroid_Data Parms{};

	Parms.Option_Index = Option_Index;
	Parms.Asteroid_Index = Asteroid_Index;
	Parms.Defaults = std::move(Defaults);
	Parms.Options = std::move(Options);

	UObject::ProcessEvent(Func, &Parms);

	if (GenerationValid != nullptr)
		*GenerationValid = Parms.GenerationValid;

	if (New_Asteroid_Instance_Data != nullptr)
		*New_Asteroid_Instance_Data = std::move(Parms.New_Asteroid_Instance_Data);
}

}

