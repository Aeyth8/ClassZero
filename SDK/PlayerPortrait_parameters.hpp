#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: PlayerPortrait

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "SCT_structs.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK::Params
{

// Function PlayerPortrait.PlayerPortrait_C.ExecuteUbergraph_PlayerPortrait
// 0x0070 (0x0070 - 0x0000)
struct PlayerPortrait_C_ExecuteUbergraph_PlayerPortrait final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 K2Node_CustomEvent_AccelByteID_1;                  // 0x0008(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class UTexture2DDynamic*                      K2Node_CustomEvent_AvatarTexture;                  // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TDelegate<void(const class FString& AccelByteId, class UTexture2DDynamic* AvatarTexture)> K2Node_CreateDelegate_OutputDelegate;              // 0x0020(0x0010)(ZeroConstructor, NoDestructor)
	class UTexture2DDynamic*                      Temp_object_Variable;                              // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FString                                 Temp_string_Variable;                              // 0x0038(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_49[0x7];                                       // 0x0049(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 K2Node_CustomEvent_AccelByteID;                    // 0x0050(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class UAccelByteAvatarCacheCallbackProxy*     CallFunc_GetCachedAvatarAsync_ReturnValue;         // 0x0060(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0068(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(PlayerPortrait_C_ExecuteUbergraph_PlayerPortrait) == 0x000008, "Wrong alignment on PlayerPortrait_C_ExecuteUbergraph_PlayerPortrait");
static_assert(sizeof(PlayerPortrait_C_ExecuteUbergraph_PlayerPortrait) == 0x000070, "Wrong size on PlayerPortrait_C_ExecuteUbergraph_PlayerPortrait");
static_assert(offsetof(PlayerPortrait_C_ExecuteUbergraph_PlayerPortrait, EntryPoint) == 0x000000, "Member 'PlayerPortrait_C_ExecuteUbergraph_PlayerPortrait::EntryPoint' has a wrong offset!");
static_assert(offsetof(PlayerPortrait_C_ExecuteUbergraph_PlayerPortrait, K2Node_CustomEvent_AccelByteID_1) == 0x000008, "Member 'PlayerPortrait_C_ExecuteUbergraph_PlayerPortrait::K2Node_CustomEvent_AccelByteID_1' has a wrong offset!");
static_assert(offsetof(PlayerPortrait_C_ExecuteUbergraph_PlayerPortrait, K2Node_CustomEvent_AvatarTexture) == 0x000018, "Member 'PlayerPortrait_C_ExecuteUbergraph_PlayerPortrait::K2Node_CustomEvent_AvatarTexture' has a wrong offset!");
static_assert(offsetof(PlayerPortrait_C_ExecuteUbergraph_PlayerPortrait, K2Node_CreateDelegate_OutputDelegate) == 0x000020, "Member 'PlayerPortrait_C_ExecuteUbergraph_PlayerPortrait::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(PlayerPortrait_C_ExecuteUbergraph_PlayerPortrait, Temp_object_Variable) == 0x000030, "Member 'PlayerPortrait_C_ExecuteUbergraph_PlayerPortrait::Temp_object_Variable' has a wrong offset!");
static_assert(offsetof(PlayerPortrait_C_ExecuteUbergraph_PlayerPortrait, Temp_string_Variable) == 0x000038, "Member 'PlayerPortrait_C_ExecuteUbergraph_PlayerPortrait::Temp_string_Variable' has a wrong offset!");
static_assert(offsetof(PlayerPortrait_C_ExecuteUbergraph_PlayerPortrait, CallFunc_IsValid_ReturnValue) == 0x000048, "Member 'PlayerPortrait_C_ExecuteUbergraph_PlayerPortrait::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(PlayerPortrait_C_ExecuteUbergraph_PlayerPortrait, K2Node_CustomEvent_AccelByteID) == 0x000050, "Member 'PlayerPortrait_C_ExecuteUbergraph_PlayerPortrait::K2Node_CustomEvent_AccelByteID' has a wrong offset!");
static_assert(offsetof(PlayerPortrait_C_ExecuteUbergraph_PlayerPortrait, CallFunc_GetCachedAvatarAsync_ReturnValue) == 0x000060, "Member 'PlayerPortrait_C_ExecuteUbergraph_PlayerPortrait::CallFunc_GetCachedAvatarAsync_ReturnValue' has a wrong offset!");
static_assert(offsetof(PlayerPortrait_C_ExecuteUbergraph_PlayerPortrait, CallFunc_IsValid_ReturnValue_1) == 0x000068, "Member 'PlayerPortrait_C_ExecuteUbergraph_PlayerPortrait::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");

// Function PlayerPortrait.PlayerPortrait_C.OnUpdateAvatarAsync
// 0x0010 (0x0010 - 0x0000)
struct PlayerPortrait_C_OnUpdateAvatarAsync final
{
public:
	class FString                                 AccelByteId_0;                                     // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
};
static_assert(alignof(PlayerPortrait_C_OnUpdateAvatarAsync) == 0x000008, "Wrong alignment on PlayerPortrait_C_OnUpdateAvatarAsync");
static_assert(sizeof(PlayerPortrait_C_OnUpdateAvatarAsync) == 0x000010, "Wrong size on PlayerPortrait_C_OnUpdateAvatarAsync");
static_assert(offsetof(PlayerPortrait_C_OnUpdateAvatarAsync, AccelByteId_0) == 0x000000, "Member 'PlayerPortrait_C_OnUpdateAvatarAsync::AccelByteId_0' has a wrong offset!");

// Function PlayerPortrait.PlayerPortrait_C.OnRetrieved_2CFA8F5F48B364BE270840A2EFA76E67
// 0x0018 (0x0018 - 0x0000)
struct PlayerPortrait_C_OnRetrieved_2CFA8F5F48B364BE270840A2EFA76E67 final
{
public:
	class FString                                 AccelByteId_0;                                     // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
	class UTexture2DDynamic*                      AvatarTexture;                                     // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(PlayerPortrait_C_OnRetrieved_2CFA8F5F48B364BE270840A2EFA76E67) == 0x000008, "Wrong alignment on PlayerPortrait_C_OnRetrieved_2CFA8F5F48B364BE270840A2EFA76E67");
static_assert(sizeof(PlayerPortrait_C_OnRetrieved_2CFA8F5F48B364BE270840A2EFA76E67) == 0x000018, "Wrong size on PlayerPortrait_C_OnRetrieved_2CFA8F5F48B364BE270840A2EFA76E67");
static_assert(offsetof(PlayerPortrait_C_OnRetrieved_2CFA8F5F48B364BE270840A2EFA76E67, AccelByteId_0) == 0x000000, "Member 'PlayerPortrait_C_OnRetrieved_2CFA8F5F48B364BE270840A2EFA76E67::AccelByteId_0' has a wrong offset!");
static_assert(offsetof(PlayerPortrait_C_OnRetrieved_2CFA8F5F48B364BE270840A2EFA76E67, AvatarTexture) == 0x000010, "Member 'PlayerPortrait_C_OnRetrieved_2CFA8F5F48B364BE270840A2EFA76E67::AvatarTexture' has a wrong offset!");

// Function PlayerPortrait.PlayerPortrait_C.SetPortraitAvatar
// 0x0010 (0x0010 - 0x0000)
struct PlayerPortrait_C_SetPortraitAvatar final
{
public:
	class UTexture2D*                             Portrait;                                          // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(PlayerPortrait_C_SetPortraitAvatar) == 0x000008, "Wrong alignment on PlayerPortrait_C_SetPortraitAvatar");
static_assert(sizeof(PlayerPortrait_C_SetPortraitAvatar) == 0x000010, "Wrong size on PlayerPortrait_C_SetPortraitAvatar");
static_assert(offsetof(PlayerPortrait_C_SetPortraitAvatar, Portrait) == 0x000000, "Member 'PlayerPortrait_C_SetPortraitAvatar::Portrait' has a wrong offset!");
static_assert(offsetof(PlayerPortrait_C_SetPortraitAvatar, CallFunc_IsValid_ReturnValue) == 0x000008, "Member 'PlayerPortrait_C_SetPortraitAvatar::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function PlayerPortrait.PlayerPortrait_C.InitWithRawData
// 0x00A0 (0x00A0 - 0x0000)
struct PlayerPortrait_C_InitWithRawData final
{
public:
	int32                                         PlayerId;                                          // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 SteamID_0;                                         // 0x0008(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
	class UClientInfoCacheGIS*                    CallFunc_GetGameInstanceSubsystem_ReturnValue;     // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FClientPlayerInfo                      CallFunc_GetPlayerInfo_ReturnValue;                // 0x0020(0x0078)()
	bool                                          CallFunc_HasPlayerInfo_ReturnValue;                // 0x0098(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0099(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(PlayerPortrait_C_InitWithRawData) == 0x000008, "Wrong alignment on PlayerPortrait_C_InitWithRawData");
static_assert(sizeof(PlayerPortrait_C_InitWithRawData) == 0x0000A0, "Wrong size on PlayerPortrait_C_InitWithRawData");
static_assert(offsetof(PlayerPortrait_C_InitWithRawData, PlayerId) == 0x000000, "Member 'PlayerPortrait_C_InitWithRawData::PlayerId' has a wrong offset!");
static_assert(offsetof(PlayerPortrait_C_InitWithRawData, SteamID_0) == 0x000008, "Member 'PlayerPortrait_C_InitWithRawData::SteamID_0' has a wrong offset!");
static_assert(offsetof(PlayerPortrait_C_InitWithRawData, CallFunc_GetGameInstanceSubsystem_ReturnValue) == 0x000018, "Member 'PlayerPortrait_C_InitWithRawData::CallFunc_GetGameInstanceSubsystem_ReturnValue' has a wrong offset!");
static_assert(offsetof(PlayerPortrait_C_InitWithRawData, CallFunc_GetPlayerInfo_ReturnValue) == 0x000020, "Member 'PlayerPortrait_C_InitWithRawData::CallFunc_GetPlayerInfo_ReturnValue' has a wrong offset!");
static_assert(offsetof(PlayerPortrait_C_InitWithRawData, CallFunc_HasPlayerInfo_ReturnValue) == 0x000098, "Member 'PlayerPortrait_C_InitWithRawData::CallFunc_HasPlayerInfo_ReturnValue' has a wrong offset!");
static_assert(offsetof(PlayerPortrait_C_InitWithRawData, CallFunc_Not_PreBool_ReturnValue) == 0x000099, "Member 'PlayerPortrait_C_InitWithRawData::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");

// Function PlayerPortrait.PlayerPortrait_C.SetupEventBindings
// 0x0050 (0x0050 - 0x0000)
struct PlayerPortrait_C_SetupEventBindings final
{
public:
	TDelegate<void(class APlayerState* PlayerState, const struct FLinearColor& Value)> K2Node_CreateDelegate_OutputDelegate;              // 0x0000(0x0010)(ZeroConstructor, NoDestructor)
	class UObject*                                CallFunc_GetGlobalObject_ReturnValue;              // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UIdentificationColorGlobalEvent*        K2Node_DynamicCast_AsIdentification_Color_Global_Event; // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_21[0x3];                                       // 0x0021(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void(const class FString& SteamID, int32 PlayerId)> K2Node_CreateDelegate_OutputDelegate_1;            // 0x0024(0x0010)(ZeroConstructor, NoDestructor)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                CallFunc_GetGlobalObject_ReturnValue_1;            // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USteamUserIDChanged*                    K2Node_DynamicCast_AsSteam_User_IDChanged;         // 0x0040(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(PlayerPortrait_C_SetupEventBindings) == 0x000008, "Wrong alignment on PlayerPortrait_C_SetupEventBindings");
static_assert(sizeof(PlayerPortrait_C_SetupEventBindings) == 0x000050, "Wrong size on PlayerPortrait_C_SetupEventBindings");
static_assert(offsetof(PlayerPortrait_C_SetupEventBindings, K2Node_CreateDelegate_OutputDelegate) == 0x000000, "Member 'PlayerPortrait_C_SetupEventBindings::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(PlayerPortrait_C_SetupEventBindings, CallFunc_GetGlobalObject_ReturnValue) == 0x000010, "Member 'PlayerPortrait_C_SetupEventBindings::CallFunc_GetGlobalObject_ReturnValue' has a wrong offset!");
static_assert(offsetof(PlayerPortrait_C_SetupEventBindings, K2Node_DynamicCast_AsIdentification_Color_Global_Event) == 0x000018, "Member 'PlayerPortrait_C_SetupEventBindings::K2Node_DynamicCast_AsIdentification_Color_Global_Event' has a wrong offset!");
static_assert(offsetof(PlayerPortrait_C_SetupEventBindings, K2Node_DynamicCast_bSuccess) == 0x000020, "Member 'PlayerPortrait_C_SetupEventBindings::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(PlayerPortrait_C_SetupEventBindings, K2Node_CreateDelegate_OutputDelegate_1) == 0x000024, "Member 'PlayerPortrait_C_SetupEventBindings::K2Node_CreateDelegate_OutputDelegate_1' has a wrong offset!");
static_assert(offsetof(PlayerPortrait_C_SetupEventBindings, CallFunc_GetGlobalObject_ReturnValue_1) == 0x000038, "Member 'PlayerPortrait_C_SetupEventBindings::CallFunc_GetGlobalObject_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(PlayerPortrait_C_SetupEventBindings, K2Node_DynamicCast_AsSteam_User_IDChanged) == 0x000040, "Member 'PlayerPortrait_C_SetupEventBindings::K2Node_DynamicCast_AsSteam_User_IDChanged' has a wrong offset!");
static_assert(offsetof(PlayerPortrait_C_SetupEventBindings, K2Node_DynamicCast_bSuccess_1) == 0x000048, "Member 'PlayerPortrait_C_SetupEventBindings::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");

// Function PlayerPortrait.PlayerPortrait_C.Set Avatar from Steam ID
// 0x0020 (0x0020 - 0x0000)
struct PlayerPortrait_C_Set_Avatar_from_Steam_ID final
{
public:
	class FString                                 ID;                                                // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
	class UTexture2D*                             CallFunc_GetSteamAvatarFromSteamID_ReturnValue;    // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(PlayerPortrait_C_Set_Avatar_from_Steam_ID) == 0x000008, "Wrong alignment on PlayerPortrait_C_Set_Avatar_from_Steam_ID");
static_assert(sizeof(PlayerPortrait_C_Set_Avatar_from_Steam_ID) == 0x000020, "Wrong size on PlayerPortrait_C_Set_Avatar_from_Steam_ID");
static_assert(offsetof(PlayerPortrait_C_Set_Avatar_from_Steam_ID, ID) == 0x000000, "Member 'PlayerPortrait_C_Set_Avatar_from_Steam_ID::ID' has a wrong offset!");
static_assert(offsetof(PlayerPortrait_C_Set_Avatar_from_Steam_ID, CallFunc_GetSteamAvatarFromSteamID_ReturnValue) == 0x000010, "Member 'PlayerPortrait_C_Set_Avatar_from_Steam_ID::CallFunc_GetSteamAvatarFromSteamID_ReturnValue' has a wrong offset!");
static_assert(offsetof(PlayerPortrait_C_Set_Avatar_from_Steam_ID, CallFunc_IsValid_ReturnValue) == 0x000018, "Member 'PlayerPortrait_C_Set_Avatar_from_Steam_ID::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function PlayerPortrait.PlayerPortrait_C.OnSteamIDChanged
// 0x0018 (0x0018 - 0x0000)
struct PlayerPortrait_C_OnSteamIDChanged final
{
public:
	class FString                                 SteamID_0;                                         // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
	int32                                         PlayerId;                                          // 0x0010(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue;            // 0x0014(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(PlayerPortrait_C_OnSteamIDChanged) == 0x000008, "Wrong alignment on PlayerPortrait_C_OnSteamIDChanged");
static_assert(sizeof(PlayerPortrait_C_OnSteamIDChanged) == 0x000018, "Wrong size on PlayerPortrait_C_OnSteamIDChanged");
static_assert(offsetof(PlayerPortrait_C_OnSteamIDChanged, SteamID_0) == 0x000000, "Member 'PlayerPortrait_C_OnSteamIDChanged::SteamID_0' has a wrong offset!");
static_assert(offsetof(PlayerPortrait_C_OnSteamIDChanged, PlayerId) == 0x000010, "Member 'PlayerPortrait_C_OnSteamIDChanged::PlayerId' has a wrong offset!");
static_assert(offsetof(PlayerPortrait_C_OnSteamIDChanged, CallFunc_EqualEqual_IntInt_ReturnValue) == 0x000014, "Member 'PlayerPortrait_C_OnSteamIDChanged::CallFunc_EqualEqual_IntInt_ReturnValue' has a wrong offset!");

// Function PlayerPortrait.PlayerPortrait_C.Set Avatar From PlayerID
// 0x00A8 (0x00A8 - 0x0000)
struct PlayerPortrait_C_Set_Avatar_From_PlayerID final
{
public:
	int32                                         PlayerId;                                          // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UClientInfoCacheGIS*                    CallFunc_GetGameInstanceSubsystem_ReturnValue;     // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UClientInfoCacheGIS*                    CallFunc_GetGameInstanceSubsystem_ReturnValue_1;   // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FClientPlayerInfo                      CallFunc_GetPlayerInfo_ReturnValue;                // 0x0018(0x0078)()
	class FString                                 CallFunc_GetSteamID_ReturnValue;                   // 0x0090(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsEmpty_ReturnValue;                      // 0x00A0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsEmpty_ReturnValue_1;                    // 0x00A1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_HasPlayerInfo_ReturnValue;                // 0x00A2(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x00A3(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(PlayerPortrait_C_Set_Avatar_From_PlayerID) == 0x000008, "Wrong alignment on PlayerPortrait_C_Set_Avatar_From_PlayerID");
static_assert(sizeof(PlayerPortrait_C_Set_Avatar_From_PlayerID) == 0x0000A8, "Wrong size on PlayerPortrait_C_Set_Avatar_From_PlayerID");
static_assert(offsetof(PlayerPortrait_C_Set_Avatar_From_PlayerID, PlayerId) == 0x000000, "Member 'PlayerPortrait_C_Set_Avatar_From_PlayerID::PlayerId' has a wrong offset!");
static_assert(offsetof(PlayerPortrait_C_Set_Avatar_From_PlayerID, CallFunc_GetGameInstanceSubsystem_ReturnValue) == 0x000008, "Member 'PlayerPortrait_C_Set_Avatar_From_PlayerID::CallFunc_GetGameInstanceSubsystem_ReturnValue' has a wrong offset!");
static_assert(offsetof(PlayerPortrait_C_Set_Avatar_From_PlayerID, CallFunc_GetGameInstanceSubsystem_ReturnValue_1) == 0x000010, "Member 'PlayerPortrait_C_Set_Avatar_From_PlayerID::CallFunc_GetGameInstanceSubsystem_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(PlayerPortrait_C_Set_Avatar_From_PlayerID, CallFunc_GetPlayerInfo_ReturnValue) == 0x000018, "Member 'PlayerPortrait_C_Set_Avatar_From_PlayerID::CallFunc_GetPlayerInfo_ReturnValue' has a wrong offset!");
static_assert(offsetof(PlayerPortrait_C_Set_Avatar_From_PlayerID, CallFunc_GetSteamID_ReturnValue) == 0x000090, "Member 'PlayerPortrait_C_Set_Avatar_From_PlayerID::CallFunc_GetSteamID_ReturnValue' has a wrong offset!");
static_assert(offsetof(PlayerPortrait_C_Set_Avatar_From_PlayerID, CallFunc_IsEmpty_ReturnValue) == 0x0000A0, "Member 'PlayerPortrait_C_Set_Avatar_From_PlayerID::CallFunc_IsEmpty_ReturnValue' has a wrong offset!");
static_assert(offsetof(PlayerPortrait_C_Set_Avatar_From_PlayerID, CallFunc_IsEmpty_ReturnValue_1) == 0x0000A1, "Member 'PlayerPortrait_C_Set_Avatar_From_PlayerID::CallFunc_IsEmpty_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(PlayerPortrait_C_Set_Avatar_From_PlayerID, CallFunc_HasPlayerInfo_ReturnValue) == 0x0000A2, "Member 'PlayerPortrait_C_Set_Avatar_From_PlayerID::CallFunc_HasPlayerInfo_ReturnValue' has a wrong offset!");
static_assert(offsetof(PlayerPortrait_C_Set_Avatar_From_PlayerID, CallFunc_Not_PreBool_ReturnValue) == 0x0000A3, "Member 'PlayerPortrait_C_Set_Avatar_From_PlayerID::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");

// Function PlayerPortrait.PlayerPortrait_C.SetBorderColorFromPlayerID
// 0x0098 (0x0098 - 0x0000)
struct PlayerPortrait_C_SetBorderColorFromPlayerID final
{
public:
	class UClientInfoCacheGIS*                    CallFunc_GetGameInstanceSubsystem_ReturnValue;     // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FFormatArgumentData                    K2Node_MakeStruct_FormatArgumentData;              // 0x0008(0x0040)(HasGetValueTypeHash)
	bool                                          CallFunc_HasIdentificationColor_ReturnValue;       // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_49[0x7];                                       // 0x0049(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FFormatArgumentData>            K2Node_MakeArray_Array;                            // 0x0050(0x0010)(ReferenceParm)
	class FText                                   CallFunc_Format_ReturnValue;                       // 0x0060(0x0018)()
	class FString                                 CallFunc_Conv_TextToString_ReturnValue;            // 0x0078(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	struct FLinearColor                           CallFunc_GetIdentificationColor_ReturnValue;       // 0x0088(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(PlayerPortrait_C_SetBorderColorFromPlayerID) == 0x000008, "Wrong alignment on PlayerPortrait_C_SetBorderColorFromPlayerID");
static_assert(sizeof(PlayerPortrait_C_SetBorderColorFromPlayerID) == 0x000098, "Wrong size on PlayerPortrait_C_SetBorderColorFromPlayerID");
static_assert(offsetof(PlayerPortrait_C_SetBorderColorFromPlayerID, CallFunc_GetGameInstanceSubsystem_ReturnValue) == 0x000000, "Member 'PlayerPortrait_C_SetBorderColorFromPlayerID::CallFunc_GetGameInstanceSubsystem_ReturnValue' has a wrong offset!");
static_assert(offsetof(PlayerPortrait_C_SetBorderColorFromPlayerID, K2Node_MakeStruct_FormatArgumentData) == 0x000008, "Member 'PlayerPortrait_C_SetBorderColorFromPlayerID::K2Node_MakeStruct_FormatArgumentData' has a wrong offset!");
static_assert(offsetof(PlayerPortrait_C_SetBorderColorFromPlayerID, CallFunc_HasIdentificationColor_ReturnValue) == 0x000048, "Member 'PlayerPortrait_C_SetBorderColorFromPlayerID::CallFunc_HasIdentificationColor_ReturnValue' has a wrong offset!");
static_assert(offsetof(PlayerPortrait_C_SetBorderColorFromPlayerID, K2Node_MakeArray_Array) == 0x000050, "Member 'PlayerPortrait_C_SetBorderColorFromPlayerID::K2Node_MakeArray_Array' has a wrong offset!");
static_assert(offsetof(PlayerPortrait_C_SetBorderColorFromPlayerID, CallFunc_Format_ReturnValue) == 0x000060, "Member 'PlayerPortrait_C_SetBorderColorFromPlayerID::CallFunc_Format_ReturnValue' has a wrong offset!");
static_assert(offsetof(PlayerPortrait_C_SetBorderColorFromPlayerID, CallFunc_Conv_TextToString_ReturnValue) == 0x000078, "Member 'PlayerPortrait_C_SetBorderColorFromPlayerID::CallFunc_Conv_TextToString_ReturnValue' has a wrong offset!");
static_assert(offsetof(PlayerPortrait_C_SetBorderColorFromPlayerID, CallFunc_GetIdentificationColor_ReturnValue) == 0x000088, "Member 'PlayerPortrait_C_SetBorderColorFromPlayerID::CallFunc_GetIdentificationColor_ReturnValue' has a wrong offset!");

// Function PlayerPortrait.PlayerPortrait_C.OnIdentificationColorChanged
// 0x0020 (0x0020 - 0x0000)
struct PlayerPortrait_C_OnIdentificationColorChanged final
{
public:
	class APlayerState*                           PlayerState;                                       // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Value;                                             // 0x0008(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue;            // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(PlayerPortrait_C_OnIdentificationColorChanged) == 0x000008, "Wrong alignment on PlayerPortrait_C_OnIdentificationColorChanged");
static_assert(sizeof(PlayerPortrait_C_OnIdentificationColorChanged) == 0x000020, "Wrong size on PlayerPortrait_C_OnIdentificationColorChanged");
static_assert(offsetof(PlayerPortrait_C_OnIdentificationColorChanged, PlayerState) == 0x000000, "Member 'PlayerPortrait_C_OnIdentificationColorChanged::PlayerState' has a wrong offset!");
static_assert(offsetof(PlayerPortrait_C_OnIdentificationColorChanged, Value) == 0x000008, "Member 'PlayerPortrait_C_OnIdentificationColorChanged::Value' has a wrong offset!");
static_assert(offsetof(PlayerPortrait_C_OnIdentificationColorChanged, CallFunc_EqualEqual_IntInt_ReturnValue) == 0x000018, "Member 'PlayerPortrait_C_OnIdentificationColorChanged::CallFunc_EqualEqual_IntInt_ReturnValue' has a wrong offset!");

// Function PlayerPortrait.PlayerPortrait_C.UpdateAppearance
// 0x0001 (0x0001 - 0x0000)
struct PlayerPortrait_C_UpdateAppearance final
{
public:
	bool                                          CallFunc_IsEmpty_ReturnValue;                      // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(PlayerPortrait_C_UpdateAppearance) == 0x000001, "Wrong alignment on PlayerPortrait_C_UpdateAppearance");
static_assert(sizeof(PlayerPortrait_C_UpdateAppearance) == 0x000001, "Wrong size on PlayerPortrait_C_UpdateAppearance");
static_assert(offsetof(PlayerPortrait_C_UpdateAppearance, CallFunc_IsEmpty_ReturnValue) == 0x000000, "Member 'PlayerPortrait_C_UpdateAppearance::CallFunc_IsEmpty_ReturnValue' has a wrong offset!");

// Function PlayerPortrait.PlayerPortrait_C.InitWithEndData
// 0x00A8 (0x00A8 - 0x0000)
struct PlayerPortrait_C_InitWithEndData final
{
public:
	struct FPlayerEndData                         PlayerEndData;                                     // 0x0000(0x00A8)(BlueprintVisible, BlueprintReadOnly, Parm)
};
static_assert(alignof(PlayerPortrait_C_InitWithEndData) == 0x000008, "Wrong alignment on PlayerPortrait_C_InitWithEndData");
static_assert(sizeof(PlayerPortrait_C_InitWithEndData) == 0x0000A8, "Wrong size on PlayerPortrait_C_InitWithEndData");
static_assert(offsetof(PlayerPortrait_C_InitWithEndData, PlayerEndData) == 0x000000, "Member 'PlayerPortrait_C_InitWithEndData::PlayerEndData' has a wrong offset!");

// Function PlayerPortrait.PlayerPortrait_C.InitWithPlayerState
// 0x0008 (0x0008 - 0x0000)
struct PlayerPortrait_C_InitWithPlayerState final
{
public:
	class ASCTPlayerState*                        PlayerState;                                       // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(PlayerPortrait_C_InitWithPlayerState) == 0x000008, "Wrong alignment on PlayerPortrait_C_InitWithPlayerState");
static_assert(sizeof(PlayerPortrait_C_InitWithPlayerState) == 0x000008, "Wrong size on PlayerPortrait_C_InitWithPlayerState");
static_assert(offsetof(PlayerPortrait_C_InitWithPlayerState, PlayerState) == 0x000000, "Member 'PlayerPortrait_C_InitWithPlayerState::PlayerState' has a wrong offset!");

// Function PlayerPortrait.PlayerPortrait_C.CheckPlayerID
// 0x0080 (0x0080 - 0x0000)
struct PlayerPortrait_C_CheckPlayerID final
{
public:
	bool                                          CallFunc_IsValidPlayerID_ReturnValue;              // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FFormatArgumentData                    K2Node_MakeStruct_FormatArgumentData;              // 0x0008(0x0040)(HasGetValueTypeHash)
	TArray<struct FFormatArgumentData>            K2Node_MakeArray_Array;                            // 0x0048(0x0010)(ReferenceParm)
	class FText                                   CallFunc_Format_ReturnValue;                       // 0x0058(0x0018)()
	class FString                                 CallFunc_Conv_TextToString_ReturnValue;            // 0x0070(0x0010)(ZeroConstructor, HasGetValueTypeHash)
};
static_assert(alignof(PlayerPortrait_C_CheckPlayerID) == 0x000008, "Wrong alignment on PlayerPortrait_C_CheckPlayerID");
static_assert(sizeof(PlayerPortrait_C_CheckPlayerID) == 0x000080, "Wrong size on PlayerPortrait_C_CheckPlayerID");
static_assert(offsetof(PlayerPortrait_C_CheckPlayerID, CallFunc_IsValidPlayerID_ReturnValue) == 0x000000, "Member 'PlayerPortrait_C_CheckPlayerID::CallFunc_IsValidPlayerID_ReturnValue' has a wrong offset!");
static_assert(offsetof(PlayerPortrait_C_CheckPlayerID, K2Node_MakeStruct_FormatArgumentData) == 0x000008, "Member 'PlayerPortrait_C_CheckPlayerID::K2Node_MakeStruct_FormatArgumentData' has a wrong offset!");
static_assert(offsetof(PlayerPortrait_C_CheckPlayerID, K2Node_MakeArray_Array) == 0x000048, "Member 'PlayerPortrait_C_CheckPlayerID::K2Node_MakeArray_Array' has a wrong offset!");
static_assert(offsetof(PlayerPortrait_C_CheckPlayerID, CallFunc_Format_ReturnValue) == 0x000058, "Member 'PlayerPortrait_C_CheckPlayerID::CallFunc_Format_ReturnValue' has a wrong offset!");
static_assert(offsetof(PlayerPortrait_C_CheckPlayerID, CallFunc_Conv_TextToString_ReturnValue) == 0x000070, "Member 'PlayerPortrait_C_CheckPlayerID::CallFunc_Conv_TextToString_ReturnValue' has a wrong offset!");

// Function PlayerPortrait.PlayerPortrait_C.CheckSteamID
// 0x0098 (0x0098 - 0x0000)
struct PlayerPortrait_C_CheckSteamID final
{
public:
	bool                                          CallFunc_IsEmpty_ReturnValue;                      // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   CallFunc_Conv_StringToText_ReturnValue;            // 0x0008(0x0018)()
	struct FFormatArgumentData                    K2Node_MakeStruct_FormatArgumentData;              // 0x0020(0x0040)(HasGetValueTypeHash)
	TArray<struct FFormatArgumentData>            K2Node_MakeArray_Array;                            // 0x0060(0x0010)(ReferenceParm)
	class FText                                   CallFunc_Format_ReturnValue;                       // 0x0070(0x0018)()
	class FString                                 CallFunc_Conv_TextToString_ReturnValue;            // 0x0088(0x0010)(ZeroConstructor, HasGetValueTypeHash)
};
static_assert(alignof(PlayerPortrait_C_CheckSteamID) == 0x000008, "Wrong alignment on PlayerPortrait_C_CheckSteamID");
static_assert(sizeof(PlayerPortrait_C_CheckSteamID) == 0x000098, "Wrong size on PlayerPortrait_C_CheckSteamID");
static_assert(offsetof(PlayerPortrait_C_CheckSteamID, CallFunc_IsEmpty_ReturnValue) == 0x000000, "Member 'PlayerPortrait_C_CheckSteamID::CallFunc_IsEmpty_ReturnValue' has a wrong offset!");
static_assert(offsetof(PlayerPortrait_C_CheckSteamID, CallFunc_Conv_StringToText_ReturnValue) == 0x000008, "Member 'PlayerPortrait_C_CheckSteamID::CallFunc_Conv_StringToText_ReturnValue' has a wrong offset!");
static_assert(offsetof(PlayerPortrait_C_CheckSteamID, K2Node_MakeStruct_FormatArgumentData) == 0x000020, "Member 'PlayerPortrait_C_CheckSteamID::K2Node_MakeStruct_FormatArgumentData' has a wrong offset!");
static_assert(offsetof(PlayerPortrait_C_CheckSteamID, K2Node_MakeArray_Array) == 0x000060, "Member 'PlayerPortrait_C_CheckSteamID::K2Node_MakeArray_Array' has a wrong offset!");
static_assert(offsetof(PlayerPortrait_C_CheckSteamID, CallFunc_Format_ReturnValue) == 0x000070, "Member 'PlayerPortrait_C_CheckSteamID::CallFunc_Format_ReturnValue' has a wrong offset!");
static_assert(offsetof(PlayerPortrait_C_CheckSteamID, CallFunc_Conv_TextToString_ReturnValue) == 0x000088, "Member 'PlayerPortrait_C_CheckSteamID::CallFunc_Conv_TextToString_ReturnValue' has a wrong offset!");

}

