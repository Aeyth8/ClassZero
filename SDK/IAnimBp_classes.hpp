#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: IAnimBp

#include "Basic.hpp"

#include "CoreUObject_classes.hpp"
#include "IdleEntryState_structs.hpp"
#include "Engine_structs.hpp"
#include "Gait_structs.hpp"
#include "MovementMode_structs.hpp"
#include "RPC_Enum_structs.hpp"
#include "Stance_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass IAnimBp.IAnimBp_C
// 0x0000 (0x0028 - 0x0028)
class IIAnimBp_C final : public IInterface
{
public:
	void GetSetupValuesBPI(float InCrouchSpeed, float InWalkSpeed, float InRunSpeed, float InSprintSpeed, bool InFemale, float* CrouchSpeed, float* WalkSpeed, float* RunSpeed, float* SprintSpeed, bool* Female);
	void GetEssentialValuesBPI(const struct FVector& InVelocity, bool InIsMoving, bool InHasMovementInput, bool InIsAiming, uint8 InAimType, float InDirection, float InCharacterRotationDifference, float InVelocityDifference, float InAimYawDelta, float InAimYawRate, const struct FRotator& InCharacterRotation, const struct FRotator& InLookingRotation, const struct FRotator& InLastVelocityRotation, const struct FRotator& InLastMovementInputRotation, bool InCarryingCorpse, bool InBeingCarriedCorpse, float InAlcoholPercent, struct FVector* Velocity, bool* IsMoving, bool* HasMovementInput, bool* IsAiming, uint8* AimType, float* Direction, float* CharacterRotationDifference, float* VelocityDifference, float* AimYawDelta, float* AimYawRate, struct FRotator* CharacterRotation, struct FRotator* LookingRotation, struct FRotator* LastVelocityRotation, struct FRotator* LastMovementInputRotation, bool* CarryingCorpse, bool* BeingCarriedCorpse, float* AlcoholPercent);
	void AddCharacterRotationBPI(const struct FRotator& AddAmount);
	void MovementModeChangedBPI(Engine::EMovementMode PrevMovementMode, Engine::EMovementMode NewMovementMode, uint8 PrevCustomMode, uint8 NewCustomMode);
	void SetStanceBPI(EStance NewStance);
	void LandedBPI(const struct FHitResult& Hit);
	void ShouldSprintBPI(bool ShouldSprint);
	void ReinitBPI();
	void ToRagdollBPI(bool ToRagdoll, const struct FVector& OptionalImpulse, bool Force);
	void SetCharacterRotationBPI(ERPC_Enum RPC, bool EnableRotationOverride, const struct FRotator& Rotation);
	void PlayEmoteBPI(uint8 EmoteID);
	void SetAimingBPI(bool Aiming, uint8 AimType);
	void SetMovementModeBPI(MovementMode::EMovementMode NewMovementMode);
	void SetGaitBPI(EGait NewGait);
	void SavePoseSnapshotBPI(class FName PoseName);
	void PlayGetUpAnimBPI(bool FaceDown);
	void AnimNotifyPivotBPI(const struct FPivotParams& PivotParameters);
	void AnimNotifyTurnInPlaceBPI(class UAnimMontage* TurnInPlaceMontage, bool ShouldTurnInPlace, bool TurningInPlace, bool TurningRight);
	void AnimNotifyIdleEntryStateBPI(EIdleEntryState IdleEntryState);
	void EnableIKandAimOffsetBPI(bool Enable);
	void LaunchRagdollBPI(const struct FVector& TargetLocation, const struct FVector& Direction);
	void BeingCarriedCorpseBPI(bool InputValue);
	void CarryingCorpseBPI(bool InputValue);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"IAnimBp_C">();
	}
	static class IIAnimBp_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<IIAnimBp_C>();
	}
};
static_assert(alignof(IIAnimBp_C) == 0x000008, "Wrong alignment on IIAnimBp_C");
static_assert(sizeof(IIAnimBp_C) == 0x000028, "Wrong size on IIAnimBp_C");

}

