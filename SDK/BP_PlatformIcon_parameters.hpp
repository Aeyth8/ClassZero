#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_PlatformIcon

#include "Basic.hpp"

#include "SlateCore_structs.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK::Params
{

// Function BP_PlatformIcon.BP_PlatformIcon_C.ExecuteUbergraph_BP_PlatformIcon
// 0x0008 (0x0008 - 0x0000)
struct BP_PlatformIcon_C_ExecuteUbergraph_BP_PlatformIcon final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_IsDesignTime;                         // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_PlatformIcon_C_ExecuteUbergraph_BP_PlatformIcon) == 0x000004, "Wrong alignment on BP_PlatformIcon_C_ExecuteUbergraph_BP_PlatformIcon");
static_assert(sizeof(BP_PlatformIcon_C_ExecuteUbergraph_BP_PlatformIcon) == 0x000008, "Wrong size on BP_PlatformIcon_C_ExecuteUbergraph_BP_PlatformIcon");
static_assert(offsetof(BP_PlatformIcon_C_ExecuteUbergraph_BP_PlatformIcon, EntryPoint) == 0x000000, "Member 'BP_PlatformIcon_C_ExecuteUbergraph_BP_PlatformIcon::EntryPoint' has a wrong offset!");
static_assert(offsetof(BP_PlatformIcon_C_ExecuteUbergraph_BP_PlatformIcon, K2Node_Event_IsDesignTime) == 0x000004, "Member 'BP_PlatformIcon_C_ExecuteUbergraph_BP_PlatformIcon::K2Node_Event_IsDesignTime' has a wrong offset!");
static_assert(offsetof(BP_PlatformIcon_C_ExecuteUbergraph_BP_PlatformIcon, CallFunc_Not_PreBool_ReturnValue) == 0x000005, "Member 'BP_PlatformIcon_C_ExecuteUbergraph_BP_PlatformIcon::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");

// Function BP_PlatformIcon.BP_PlatformIcon_C.PreConstruct
// 0x0001 (0x0001 - 0x0000)
struct BP_PlatformIcon_C_PreConstruct final
{
public:
	bool                                          IsDesignTime;                                      // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_PlatformIcon_C_PreConstruct) == 0x000001, "Wrong alignment on BP_PlatformIcon_C_PreConstruct");
static_assert(sizeof(BP_PlatformIcon_C_PreConstruct) == 0x000001, "Wrong size on BP_PlatformIcon_C_PreConstruct");
static_assert(offsetof(BP_PlatformIcon_C_PreConstruct, IsDesignTime) == 0x000000, "Member 'BP_PlatformIcon_C_PreConstruct::IsDesignTime' has a wrong offset!");

// Function BP_PlatformIcon.BP_PlatformIcon_C.Set Icon
// 0x0018 (0x0018 - 0x0000)
struct BP_PlatformIcon_C_Set_Icon final
{
public:
	class FString                                 PlatformId;                                        // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchString_CmpSuccess;                    // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_PlatformIcon_C_Set_Icon) == 0x000008, "Wrong alignment on BP_PlatformIcon_C_Set_Icon");
static_assert(sizeof(BP_PlatformIcon_C_Set_Icon) == 0x000018, "Wrong size on BP_PlatformIcon_C_Set_Icon");
static_assert(offsetof(BP_PlatformIcon_C_Set_Icon, PlatformId) == 0x000000, "Member 'BP_PlatformIcon_C_Set_Icon::PlatformId' has a wrong offset!");
static_assert(offsetof(BP_PlatformIcon_C_Set_Icon, K2Node_SwitchString_CmpSuccess) == 0x000010, "Member 'BP_PlatformIcon_C_Set_Icon::K2Node_SwitchString_CmpSuccess' has a wrong offset!");

// Function BP_PlatformIcon.BP_PlatformIcon_C.Set Icon Size by Scale
// 0x0020 (0x0020 - 0x0000)
struct BP_PlatformIcon_C_Set_Icon_Size_by_Scale final
{
public:
	class UImage*                                 Image;                                             // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector2D_X;                          // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector2D_Y;                          // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue;          // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_1;        // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_MakeVector2D_ReturnValue;                 // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_PlatformIcon_C_Set_Icon_Size_by_Scale) == 0x000008, "Wrong alignment on BP_PlatformIcon_C_Set_Icon_Size_by_Scale");
static_assert(sizeof(BP_PlatformIcon_C_Set_Icon_Size_by_Scale) == 0x000020, "Wrong size on BP_PlatformIcon_C_Set_Icon_Size_by_Scale");
static_assert(offsetof(BP_PlatformIcon_C_Set_Icon_Size_by_Scale, Image) == 0x000000, "Member 'BP_PlatformIcon_C_Set_Icon_Size_by_Scale::Image' has a wrong offset!");
static_assert(offsetof(BP_PlatformIcon_C_Set_Icon_Size_by_Scale, CallFunc_BreakVector2D_X) == 0x000008, "Member 'BP_PlatformIcon_C_Set_Icon_Size_by_Scale::CallFunc_BreakVector2D_X' has a wrong offset!");
static_assert(offsetof(BP_PlatformIcon_C_Set_Icon_Size_by_Scale, CallFunc_BreakVector2D_Y) == 0x00000C, "Member 'BP_PlatformIcon_C_Set_Icon_Size_by_Scale::CallFunc_BreakVector2D_Y' has a wrong offset!");
static_assert(offsetof(BP_PlatformIcon_C_Set_Icon_Size_by_Scale, CallFunc_Multiply_FloatFloat_ReturnValue) == 0x000010, "Member 'BP_PlatformIcon_C_Set_Icon_Size_by_Scale::CallFunc_Multiply_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlatformIcon_C_Set_Icon_Size_by_Scale, CallFunc_Multiply_FloatFloat_ReturnValue_1) == 0x000014, "Member 'BP_PlatformIcon_C_Set_Icon_Size_by_Scale::CallFunc_Multiply_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_PlatformIcon_C_Set_Icon_Size_by_Scale, CallFunc_MakeVector2D_ReturnValue) == 0x000018, "Member 'BP_PlatformIcon_C_Set_Icon_Size_by_Scale::CallFunc_MakeVector2D_ReturnValue' has a wrong offset!");

// Function BP_PlatformIcon.BP_PlatformIcon_C.SetIconPaddingByDefinedScale
// 0x0038 (0x0038 - 0x0000)
struct BP_PlatformIcon_C_SetIconPaddingByDefinedScale final
{
public:
	class UWidget*                                Widget;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UWidgetSwitcherSlot*                    CallFunc_SlotAsWidgetSwitcherSlot_ReturnValue;     // 0x0008(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue;          // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_1;        // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_2;        // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_3;        // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FMargin                                K2Node_MakeStruct_Margin;                          // 0x0024(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_PlatformIcon_C_SetIconPaddingByDefinedScale) == 0x000008, "Wrong alignment on BP_PlatformIcon_C_SetIconPaddingByDefinedScale");
static_assert(sizeof(BP_PlatformIcon_C_SetIconPaddingByDefinedScale) == 0x000038, "Wrong size on BP_PlatformIcon_C_SetIconPaddingByDefinedScale");
static_assert(offsetof(BP_PlatformIcon_C_SetIconPaddingByDefinedScale, Widget) == 0x000000, "Member 'BP_PlatformIcon_C_SetIconPaddingByDefinedScale::Widget' has a wrong offset!");
static_assert(offsetof(BP_PlatformIcon_C_SetIconPaddingByDefinedScale, CallFunc_SlotAsWidgetSwitcherSlot_ReturnValue) == 0x000008, "Member 'BP_PlatformIcon_C_SetIconPaddingByDefinedScale::CallFunc_SlotAsWidgetSwitcherSlot_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlatformIcon_C_SetIconPaddingByDefinedScale, CallFunc_IsValid_ReturnValue) == 0x000010, "Member 'BP_PlatformIcon_C_SetIconPaddingByDefinedScale::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlatformIcon_C_SetIconPaddingByDefinedScale, CallFunc_Multiply_FloatFloat_ReturnValue) == 0x000014, "Member 'BP_PlatformIcon_C_SetIconPaddingByDefinedScale::CallFunc_Multiply_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlatformIcon_C_SetIconPaddingByDefinedScale, CallFunc_Multiply_FloatFloat_ReturnValue_1) == 0x000018, "Member 'BP_PlatformIcon_C_SetIconPaddingByDefinedScale::CallFunc_Multiply_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_PlatformIcon_C_SetIconPaddingByDefinedScale, CallFunc_Multiply_FloatFloat_ReturnValue_2) == 0x00001C, "Member 'BP_PlatformIcon_C_SetIconPaddingByDefinedScale::CallFunc_Multiply_FloatFloat_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_PlatformIcon_C_SetIconPaddingByDefinedScale, CallFunc_Multiply_FloatFloat_ReturnValue_3) == 0x000020, "Member 'BP_PlatformIcon_C_SetIconPaddingByDefinedScale::CallFunc_Multiply_FloatFloat_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_PlatformIcon_C_SetIconPaddingByDefinedScale, K2Node_MakeStruct_Margin) == 0x000024, "Member 'BP_PlatformIcon_C_SetIconPaddingByDefinedScale::K2Node_MakeStruct_Margin' has a wrong offset!");

// Function BP_PlatformIcon.BP_PlatformIcon_C.Set Scale by Defined Size
// 0x000C (0x000C - 0x0000)
struct BP_PlatformIcon_C_Set_Scale_by_Defined_Size final
{
public:
	float                                         CallFunc_BreakVector2D_X;                          // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector2D_Y;                          // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Divide_FloatFloat_ReturnValue;            // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_PlatformIcon_C_Set_Scale_by_Defined_Size) == 0x000004, "Wrong alignment on BP_PlatformIcon_C_Set_Scale_by_Defined_Size");
static_assert(sizeof(BP_PlatformIcon_C_Set_Scale_by_Defined_Size) == 0x00000C, "Wrong size on BP_PlatformIcon_C_Set_Scale_by_Defined_Size");
static_assert(offsetof(BP_PlatformIcon_C_Set_Scale_by_Defined_Size, CallFunc_BreakVector2D_X) == 0x000000, "Member 'BP_PlatformIcon_C_Set_Scale_by_Defined_Size::CallFunc_BreakVector2D_X' has a wrong offset!");
static_assert(offsetof(BP_PlatformIcon_C_Set_Scale_by_Defined_Size, CallFunc_BreakVector2D_Y) == 0x000004, "Member 'BP_PlatformIcon_C_Set_Scale_by_Defined_Size::CallFunc_BreakVector2D_Y' has a wrong offset!");
static_assert(offsetof(BP_PlatformIcon_C_Set_Scale_by_Defined_Size, CallFunc_Divide_FloatFloat_ReturnValue) == 0x000008, "Member 'BP_PlatformIcon_C_Set_Scale_by_Defined_Size::CallFunc_Divide_FloatFloat_ReturnValue' has a wrong offset!");

// Function BP_PlatformIcon.BP_PlatformIcon_C.SetXboxIcon
// 0x0003 (0x0003 - 0x0000)
struct BP_PlatformIcon_C_SetXboxIcon final
{
public:
	bool                                          CallFunc_IsXboxPlatform_ReturnValue;               // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsWinGDKPlatform_ReturnValue;             // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_PlatformIcon_C_SetXboxIcon) == 0x000001, "Wrong alignment on BP_PlatformIcon_C_SetXboxIcon");
static_assert(sizeof(BP_PlatformIcon_C_SetXboxIcon) == 0x000003, "Wrong size on BP_PlatformIcon_C_SetXboxIcon");
static_assert(offsetof(BP_PlatformIcon_C_SetXboxIcon, CallFunc_IsXboxPlatform_ReturnValue) == 0x000000, "Member 'BP_PlatformIcon_C_SetXboxIcon::CallFunc_IsXboxPlatform_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlatformIcon_C_SetXboxIcon, CallFunc_IsWinGDKPlatform_ReturnValue) == 0x000001, "Member 'BP_PlatformIcon_C_SetXboxIcon::CallFunc_IsWinGDKPlatform_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlatformIcon_C_SetXboxIcon, CallFunc_BooleanOR_ReturnValue) == 0x000002, "Member 'BP_PlatformIcon_C_SetXboxIcon::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");

// Function BP_PlatformIcon.BP_PlatformIcon_C.SetEpicIcon
// 0x0001 (0x0001 - 0x0000)
struct BP_PlatformIcon_C_SetEpicIcon final
{
public:
	bool                                          CallFunc_IsConsolePlatform_ReturnValue;            // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_PlatformIcon_C_SetEpicIcon) == 0x000001, "Wrong alignment on BP_PlatformIcon_C_SetEpicIcon");
static_assert(sizeof(BP_PlatformIcon_C_SetEpicIcon) == 0x000001, "Wrong size on BP_PlatformIcon_C_SetEpicIcon");
static_assert(offsetof(BP_PlatformIcon_C_SetEpicIcon, CallFunc_IsConsolePlatform_ReturnValue) == 0x000000, "Member 'BP_PlatformIcon_C_SetEpicIcon::CallFunc_IsConsolePlatform_ReturnValue' has a wrong offset!");

// Function BP_PlatformIcon.BP_PlatformIcon_C.SetSteamIcon
// 0x0001 (0x0001 - 0x0000)
struct BP_PlatformIcon_C_SetSteamIcon final
{
public:
	bool                                          CallFunc_IsConsolePlatform_ReturnValue;            // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_PlatformIcon_C_SetSteamIcon) == 0x000001, "Wrong alignment on BP_PlatformIcon_C_SetSteamIcon");
static_assert(sizeof(BP_PlatformIcon_C_SetSteamIcon) == 0x000001, "Wrong size on BP_PlatformIcon_C_SetSteamIcon");
static_assert(offsetof(BP_PlatformIcon_C_SetSteamIcon, CallFunc_IsConsolePlatform_ReturnValue) == 0x000000, "Member 'BP_PlatformIcon_C_SetSteamIcon::CallFunc_IsConsolePlatform_ReturnValue' has a wrong offset!");

// Function BP_PlatformIcon.BP_PlatformIcon_C.SetPlaystation4 Icon
// 0x0003 (0x0003 - 0x0000)
struct BP_PlatformIcon_C_SetPlaystation4_Icon final
{
public:
	bool                                          CallFunc_IsPS5Platform_ReturnValue;                // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsPS4Platform_ReturnValue;                // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_PlatformIcon_C_SetPlaystation4_Icon) == 0x000001, "Wrong alignment on BP_PlatformIcon_C_SetPlaystation4_Icon");
static_assert(sizeof(BP_PlatformIcon_C_SetPlaystation4_Icon) == 0x000003, "Wrong size on BP_PlatformIcon_C_SetPlaystation4_Icon");
static_assert(offsetof(BP_PlatformIcon_C_SetPlaystation4_Icon, CallFunc_IsPS5Platform_ReturnValue) == 0x000000, "Member 'BP_PlatformIcon_C_SetPlaystation4_Icon::CallFunc_IsPS5Platform_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlatformIcon_C_SetPlaystation4_Icon, CallFunc_IsPS4Platform_ReturnValue) == 0x000001, "Member 'BP_PlatformIcon_C_SetPlaystation4_Icon::CallFunc_IsPS4Platform_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlatformIcon_C_SetPlaystation4_Icon, CallFunc_BooleanOR_ReturnValue) == 0x000002, "Member 'BP_PlatformIcon_C_SetPlaystation4_Icon::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");

// Function BP_PlatformIcon.BP_PlatformIcon_C.SetPlaystation5 Icon
// 0x0003 (0x0003 - 0x0000)
struct BP_PlatformIcon_C_SetPlaystation5_Icon final
{
public:
	bool                                          CallFunc_IsPS5Platform_ReturnValue;                // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsPS4Platform_ReturnValue;                // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_PlatformIcon_C_SetPlaystation5_Icon) == 0x000001, "Wrong alignment on BP_PlatformIcon_C_SetPlaystation5_Icon");
static_assert(sizeof(BP_PlatformIcon_C_SetPlaystation5_Icon) == 0x000003, "Wrong size on BP_PlatformIcon_C_SetPlaystation5_Icon");
static_assert(offsetof(BP_PlatformIcon_C_SetPlaystation5_Icon, CallFunc_IsPS5Platform_ReturnValue) == 0x000000, "Member 'BP_PlatformIcon_C_SetPlaystation5_Icon::CallFunc_IsPS5Platform_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlatformIcon_C_SetPlaystation5_Icon, CallFunc_IsPS4Platform_ReturnValue) == 0x000001, "Member 'BP_PlatformIcon_C_SetPlaystation5_Icon::CallFunc_IsPS4Platform_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlatformIcon_C_SetPlaystation5_Icon, CallFunc_BooleanOR_ReturnValue) == 0x000002, "Member 'BP_PlatformIcon_C_SetPlaystation5_Icon::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");

}

