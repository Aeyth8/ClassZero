#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: FunctionLibrary_MatchBP

#include "Basic.hpp"

#include "Engine_classes.hpp"
#include "EErrorSeverity_structs.hpp"
#include "PassengerLogFactType_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass FunctionLibrary_MatchBP.FunctionLibrary_MatchBP_C
// 0x0000 (0x0028 - 0x0028)
class UFunctionLibrary_MatchBP_C final : public UBlueprintFunctionLibrary
{
public:
	static void GetSCT_Player_Character(class UObject* __WorldContext, class ACharacterSCTBP_C** AsCharacter_SCT, class UInventory** CharacterInventory);
	static void GetSCT_ItemWheel(class UObject* __WorldContext, class UItemWheelV2WI_C** ItemWheelWI);
	static void GetSCT_CharacterWidget(class UObject* __WorldContext, class UCharacterWI_C** CharacterWI);
	static void GetOwnerLocallyControlled(class AActor* Actor, class UObject* __WorldContext, bool* IsLocallyControlled);
	static void GetCharacterFromActorInfo(class UGameplayAbility* Gameplay_Ability, class UObject* __WorldContext, class ACharacterSCTBP_C** Character);
	static void GetPassengerLogFactByType(EPassengerLogFactType InFactType, class UObject* __WorldContext, EPassengerLogFactType* FactType, TArray<struct FPlayerData>* Players);
	static void FactTypeToText(EPassengerLogFactType FactType, class UObject* __WorldContext, class FText* Text);
	static void GetPlayerInfoByFaction(class UObject* __WorldContext, TArray<struct FPlayerData>* Personoids, TArray<struct FPlayerData>* Residents);
	static void GetAllPawnsExceptSelf(class APawn* Pawn, class UObject* __WorldContext, TArray<class APawn*>* OtherPawns);
	static void VendelWarning(const class FString& InString, EErrorSeverity ErrorSeverity, class UObject* __WorldContext);
	static void SetGamepadFocus(class UWidget* WidgetToFocus, class UObject* __WorldContext);
	static bool IsUsingGamepad(class UObject* __WorldContext);
	static void TriangulatePolygons(TArray<struct FVector>& Vertices, class UObject* __WorldContext, TArray<int32>* Triangles);
	static void FlipPolygon(TArray<struct FVertIndex>& Vert, class UObject* __WorldContext, TArray<struct FVertIndex>* Return);
	static void RecursiveTriangulate(TArray<struct FVertIndex>& Vert, TArray<struct FVertIndex>& FullSetVert, TArray<struct FLineSegment>& BuiltSeg, int32 Thread, class UObject* __WorldContext, TArray<int32>* Triangles);
	static void LineSegmentIntersection(const struct FVector2D& A1, const struct FVector2D& B1, const struct FVector2D& A2, const struct FVector2D& B2, bool IgnoreBackside, class UObject* __WorldContext, bool* Return);
	static bool PointInTriangle(const struct FVector2D& P, const struct FVector2D& A, const struct FVector2D& B, const struct FVector2D& C, bool IgnoreSide, class UObject* __WorldContext);
	static void LoopArrayIndex(int32 Index_0, int32 Shift, int32 ArrayLength, class UObject* __WorldContext, int32* Return);
	static void GetSCT_KarmaWidget(class UObject* __WorldContext, class UBP_WI_KarmaScoreTest_C** KarmaScoreWi);

	static void Get_SCT_Player_Controller_Match(class UObject* __WorldContext, class ASCTPlayerController** SCTPlayerController_MatchBP);
	static void GetAlivePlayers(class UObject* __WorldContext, TArray<class ASCTPlayerState*>* Alive_Players);
	static void GetGameModeMatchSCT(class UObject* __WorldContext, class ASCTGameMode_MatchBP_C** AsSCTGame_Mode_Match_BP);
	static void GetAlivePersonoids(class UObject* __WorldContext, TArray<class ASCTPlayerState*>* Personoids);
	static void GetAliveResidents(class UObject* __WorldContext, TArray<class ASCTPlayerState*>* Residents);
	static void HasMatchStarted(class UObject* __WorldContext, bool* Return_Value);
	static void GetSCTGameState_MatchBP(class UObject* __WorldContext, class ASCTGameState_MatchBP_C** AsSCTGame_State_Match_BP);
	static int32 GetNumAlivePlayers(class UObject* __WorldContext);
	static int32 GetNumAlivePersonoids(class UObject* __WorldContext);
	static int32 GetNumAliveResidents(class UObject* __WorldContext);
	static void GetSCTPlayerController(class UObject* __WorldContext, class ASCTPlayerController** AsSCTPlayer_Controller);
	static TArray<class ASCTPlayerState*> GetDeadPlayers(class UObject* __WorldContext);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"FunctionLibrary_MatchBP_C">();
	}
	static class UFunctionLibrary_MatchBP_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFunctionLibrary_MatchBP_C>();
	}
};
static_assert(alignof(UFunctionLibrary_MatchBP_C) == 0x000008, "Wrong alignment on UFunctionLibrary_MatchBP_C");
static_assert(sizeof(UFunctionLibrary_MatchBP_C) == 0x000028, "Wrong size on UFunctionLibrary_MatchBP_C");

}

