#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: SCT

#include "Basic.hpp"

#include "UMG_structs.hpp"
#include "SCT_structs.hpp"
#include "GameplayTags_structs.hpp"
#include "GameplayAbilities_structs.hpp"
#include "InputCore_structs.hpp"
#include "Engine_structs.hpp"
#include "SlateCore_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "AccelByteUe4Sdk_structs.hpp"
#include "Slate_structs.hpp"


namespace SDK::Params
{

// Function SCT.AccelByteUtilsFunctionLibrary.CreateCustomizationPacket
// 0x0078 (0x0078 - 0x0000)
struct AccelByteUtilsFunctionLibrary_CreateCustomizationPacket final
{
public:
	class ACustomizationOptions*                  Options;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPlayerCustomizationType                      Category;                                          // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FCloudCustomizationPayload             Payload;                                           // 0x000C(0x0044)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	struct FCloudCustomizationPacket              ReturnValue;                                       // 0x0050(0x0028)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(AccelByteUtilsFunctionLibrary_CreateCustomizationPacket) == 0x000008, "Wrong alignment on AccelByteUtilsFunctionLibrary_CreateCustomizationPacket");
static_assert(sizeof(AccelByteUtilsFunctionLibrary_CreateCustomizationPacket) == 0x000078, "Wrong size on AccelByteUtilsFunctionLibrary_CreateCustomizationPacket");
static_assert(offsetof(AccelByteUtilsFunctionLibrary_CreateCustomizationPacket, Options) == 0x000000, "Member 'AccelByteUtilsFunctionLibrary_CreateCustomizationPacket::Options' has a wrong offset!");
static_assert(offsetof(AccelByteUtilsFunctionLibrary_CreateCustomizationPacket, Category) == 0x000008, "Member 'AccelByteUtilsFunctionLibrary_CreateCustomizationPacket::Category' has a wrong offset!");
static_assert(offsetof(AccelByteUtilsFunctionLibrary_CreateCustomizationPacket, Payload) == 0x00000C, "Member 'AccelByteUtilsFunctionLibrary_CreateCustomizationPacket::Payload' has a wrong offset!");
static_assert(offsetof(AccelByteUtilsFunctionLibrary_CreateCustomizationPacket, ReturnValue) == 0x000050, "Member 'AccelByteUtilsFunctionLibrary_CreateCustomizationPacket::ReturnValue' has a wrong offset!");

// Function SCT.AccelByteUtilsFunctionLibrary.FormatAccelByteDateTimeToUnrealDateTime
// 0x0018 (0x0018 - 0x0000)
struct AccelByteUtilsFunctionLibrary_FormatAccelByteDateTimeToUnrealDateTime final
{
public:
	class FString                                 InConvertToDateTime;                               // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDateTime                              ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AccelByteUtilsFunctionLibrary_FormatAccelByteDateTimeToUnrealDateTime) == 0x000008, "Wrong alignment on AccelByteUtilsFunctionLibrary_FormatAccelByteDateTimeToUnrealDateTime");
static_assert(sizeof(AccelByteUtilsFunctionLibrary_FormatAccelByteDateTimeToUnrealDateTime) == 0x000018, "Wrong size on AccelByteUtilsFunctionLibrary_FormatAccelByteDateTimeToUnrealDateTime");
static_assert(offsetof(AccelByteUtilsFunctionLibrary_FormatAccelByteDateTimeToUnrealDateTime, InConvertToDateTime) == 0x000000, "Member 'AccelByteUtilsFunctionLibrary_FormatAccelByteDateTimeToUnrealDateTime::InConvertToDateTime' has a wrong offset!");
static_assert(offsetof(AccelByteUtilsFunctionLibrary_FormatAccelByteDateTimeToUnrealDateTime, ReturnValue) == 0x000010, "Member 'AccelByteUtilsFunctionLibrary_FormatAccelByteDateTimeToUnrealDateTime::ReturnValue' has a wrong offset!");

// Function SCT.AbilitySystemComponentSCT.RemoveGameplayEffectsUsingType
// 0x0008 (0x0008 - 0x0000)
struct AbilitySystemComponentSCT_RemoveGameplayEffectsUsingType final
{
public:
	TSubclassOf<class UGameplayEffect>            EffectType;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AbilitySystemComponentSCT_RemoveGameplayEffectsUsingType) == 0x000008, "Wrong alignment on AbilitySystemComponentSCT_RemoveGameplayEffectsUsingType");
static_assert(sizeof(AbilitySystemComponentSCT_RemoveGameplayEffectsUsingType) == 0x000008, "Wrong size on AbilitySystemComponentSCT_RemoveGameplayEffectsUsingType");
static_assert(offsetof(AbilitySystemComponentSCT_RemoveGameplayEffectsUsingType, EffectType) == 0x000000, "Member 'AbilitySystemComponentSCT_RemoveGameplayEffectsUsingType::EffectType' has a wrong offset!");

// Function SCT.AbilitySystemComponentSCT.GetEffectInstigator
// 0x0010 (0x0010 - 0x0000)
struct AbilitySystemComponentSCT_GetEffectInstigator final
{
public:
	struct FGameplayTag                           Tag;                                               // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AbilitySystemComponentSCT_GetEffectInstigator) == 0x000008, "Wrong alignment on AbilitySystemComponentSCT_GetEffectInstigator");
static_assert(sizeof(AbilitySystemComponentSCT_GetEffectInstigator) == 0x000010, "Wrong size on AbilitySystemComponentSCT_GetEffectInstigator");
static_assert(offsetof(AbilitySystemComponentSCT_GetEffectInstigator, Tag) == 0x000000, "Member 'AbilitySystemComponentSCT_GetEffectInstigator::Tag' has a wrong offset!");
static_assert(offsetof(AbilitySystemComponentSCT_GetEffectInstigator, ReturnValue) == 0x000008, "Member 'AbilitySystemComponentSCT_GetEffectInstigator::ReturnValue' has a wrong offset!");

// Function SCT.AgendaGenericEvent.Call
// 0x0008 (0x0008 - 0x0000)
struct AgendaGenericEvent_Call final
{
public:
	class AActor*                                 WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AgendaGenericEvent_Call) == 0x000008, "Wrong alignment on AgendaGenericEvent_Call");
static_assert(sizeof(AgendaGenericEvent_Call) == 0x000008, "Wrong size on AgendaGenericEvent_Call");
static_assert(offsetof(AgendaGenericEvent_Call, WorldContextObject) == 0x000000, "Member 'AgendaGenericEvent_Call::WorldContextObject' has a wrong offset!");

// Function SCT.FCTGetBlockedPlayerListCallbackProxy.GetBlockedPlayerList
// 0x0008 (0x0008 - 0x0000)
struct FCTGetBlockedPlayerListCallbackProxy_GetBlockedPlayerList final
{
public:
	class UFCTGetBlockedPlayerListCallbackProxy*  ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCTGetBlockedPlayerListCallbackProxy_GetBlockedPlayerList) == 0x000008, "Wrong alignment on FCTGetBlockedPlayerListCallbackProxy_GetBlockedPlayerList");
static_assert(sizeof(FCTGetBlockedPlayerListCallbackProxy_GetBlockedPlayerList) == 0x000008, "Wrong size on FCTGetBlockedPlayerListCallbackProxy_GetBlockedPlayerList");
static_assert(offsetof(FCTGetBlockedPlayerListCallbackProxy_GetBlockedPlayerList, ReturnValue) == 0x000000, "Member 'FCTGetBlockedPlayerListCallbackProxy_GetBlockedPlayerList::ReturnValue' has a wrong offset!");

// Function SCT.AbilitySystemUtility.SendGameplayEvent
// 0x00C0 (0x00C0 - 0x0000)
struct AbilitySystemUtility_SendGameplayEvent final
{
public:
	class UAbilitySystemComponent*                Target;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           EventTag;                                          // 0x0008(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayEventData                     Payload;                                           // 0x0010(0x00B0)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(AbilitySystemUtility_SendGameplayEvent) == 0x000008, "Wrong alignment on AbilitySystemUtility_SendGameplayEvent");
static_assert(sizeof(AbilitySystemUtility_SendGameplayEvent) == 0x0000C0, "Wrong size on AbilitySystemUtility_SendGameplayEvent");
static_assert(offsetof(AbilitySystemUtility_SendGameplayEvent, Target) == 0x000000, "Member 'AbilitySystemUtility_SendGameplayEvent::Target' has a wrong offset!");
static_assert(offsetof(AbilitySystemUtility_SendGameplayEvent, EventTag) == 0x000008, "Member 'AbilitySystemUtility_SendGameplayEvent::EventTag' has a wrong offset!");
static_assert(offsetof(AbilitySystemUtility_SendGameplayEvent, Payload) == 0x000010, "Member 'AbilitySystemUtility_SendGameplayEvent::Payload' has a wrong offset!");

// Function SCT.CharacterSCT.DisableCameraRotationForDuration
// 0x0004 (0x0004 - 0x0000)
struct CharacterSCT_DisableCameraRotationForDuration final
{
public:
	float                                         Duration;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterSCT_DisableCameraRotationForDuration) == 0x000004, "Wrong alignment on CharacterSCT_DisableCameraRotationForDuration");
static_assert(sizeof(CharacterSCT_DisableCameraRotationForDuration) == 0x000004, "Wrong size on CharacterSCT_DisableCameraRotationForDuration");
static_assert(offsetof(CharacterSCT_DisableCameraRotationForDuration, Duration) == 0x000000, "Member 'CharacterSCT_DisableCameraRotationForDuration::Duration' has a wrong offset!");

// Function SCT.CharacterSCT.DisableMovementForFrames
// 0x0004 (0x0004 - 0x0000)
struct CharacterSCT_DisableMovementForFrames final
{
public:
	int32                                         Frames;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterSCT_DisableMovementForFrames) == 0x000004, "Wrong alignment on CharacterSCT_DisableMovementForFrames");
static_assert(sizeof(CharacterSCT_DisableMovementForFrames) == 0x000004, "Wrong size on CharacterSCT_DisableMovementForFrames");
static_assert(offsetof(CharacterSCT_DisableMovementForFrames, Frames) == 0x000000, "Member 'CharacterSCT_DisableMovementForFrames::Frames' has a wrong offset!");

// Function SCT.CharacterSCT.IsUsingPower
// 0x0001 (0x0001 - 0x0000)
struct CharacterSCT_IsUsingPower final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterSCT_IsUsingPower) == 0x000001, "Wrong alignment on CharacterSCT_IsUsingPower");
static_assert(sizeof(CharacterSCT_IsUsingPower) == 0x000001, "Wrong size on CharacterSCT_IsUsingPower");
static_assert(offsetof(CharacterSCT_IsUsingPower, ReturnValue) == 0x000000, "Member 'CharacterSCT_IsUsingPower::ReturnValue' has a wrong offset!");

// Function SCT.CharacterSCT.K2_OnNameChanged
// 0x0010 (0x0010 - 0x0000)
struct CharacterSCT_K2_OnNameChanged final
{
public:
	class FString                                 NewName;                                           // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterSCT_K2_OnNameChanged) == 0x000008, "Wrong alignment on CharacterSCT_K2_OnNameChanged");
static_assert(sizeof(CharacterSCT_K2_OnNameChanged) == 0x000010, "Wrong size on CharacterSCT_K2_OnNameChanged");
static_assert(offsetof(CharacterSCT_K2_OnNameChanged, NewName) == 0x000000, "Member 'CharacterSCT_K2_OnNameChanged::NewName' has a wrong offset!");

// Function SCT.CharacterSCT.K2_OnRepPlayerState
// 0x0001 (0x0001 - 0x0000)
struct CharacterSCT_K2_OnRepPlayerState final
{
public:
	bool                                          IsValid;                                           // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterSCT_K2_OnRepPlayerState) == 0x000001, "Wrong alignment on CharacterSCT_K2_OnRepPlayerState");
static_assert(sizeof(CharacterSCT_K2_OnRepPlayerState) == 0x000001, "Wrong size on CharacterSCT_K2_OnRepPlayerState");
static_assert(offsetof(CharacterSCT_K2_OnRepPlayerState, IsValid) == 0x000000, "Member 'CharacterSCT_K2_OnRepPlayerState::IsValid' has a wrong offset!");

// Function SCT.CharacterSCT.K2_OnSetCustomization
// 0x0010 (0x0010 - 0x0000)
struct CharacterSCT_K2_OnSetCustomization final
{
public:
	class FString                                 PlayerAccelByteID;                                 // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterSCT_K2_OnSetCustomization) == 0x000008, "Wrong alignment on CharacterSCT_K2_OnSetCustomization");
static_assert(sizeof(CharacterSCT_K2_OnSetCustomization) == 0x000010, "Wrong size on CharacterSCT_K2_OnSetCustomization");
static_assert(offsetof(CharacterSCT_K2_OnSetCustomization, PlayerAccelByteID) == 0x000000, "Member 'CharacterSCT_K2_OnSetCustomization::PlayerAccelByteID' has a wrong offset!");

// Function SCT.CharacterSCT.OnDamaged
// 0x00C0 (0x00C0 - 0x0000)
struct CharacterSCT_OnDamaged final
{
public:
	float                                         DamageAmount;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FHitResult                             HitInfo;                                           // 0x0004(0x008C)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  DamageTags;                                        // 0x0090(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class ACharacterSCT*                          InstigatorCharacter;                               // 0x00B0(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 DamageCauser;                                      // 0x00B8(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterSCT_OnDamaged) == 0x000008, "Wrong alignment on CharacterSCT_OnDamaged");
static_assert(sizeof(CharacterSCT_OnDamaged) == 0x0000C0, "Wrong size on CharacterSCT_OnDamaged");
static_assert(offsetof(CharacterSCT_OnDamaged, DamageAmount) == 0x000000, "Member 'CharacterSCT_OnDamaged::DamageAmount' has a wrong offset!");
static_assert(offsetof(CharacterSCT_OnDamaged, HitInfo) == 0x000004, "Member 'CharacterSCT_OnDamaged::HitInfo' has a wrong offset!");
static_assert(offsetof(CharacterSCT_OnDamaged, DamageTags) == 0x000090, "Member 'CharacterSCT_OnDamaged::DamageTags' has a wrong offset!");
static_assert(offsetof(CharacterSCT_OnDamaged, InstigatorCharacter) == 0x0000B0, "Member 'CharacterSCT_OnDamaged::InstigatorCharacter' has a wrong offset!");
static_assert(offsetof(CharacterSCT_OnDamaged, DamageCauser) == 0x0000B8, "Member 'CharacterSCT_OnDamaged::DamageCauser' has a wrong offset!");

// Function SCT.CharacterSCT.OnHealthChanged
// 0x0028 (0x0028 - 0x0000)
struct CharacterSCT_OnHealthChanged final
{
public:
	float                                         DeltaValue;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTagContainer                  EventTags;                                         // 0x0008(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterSCT_OnHealthChanged) == 0x000008, "Wrong alignment on CharacterSCT_OnHealthChanged");
static_assert(sizeof(CharacterSCT_OnHealthChanged) == 0x000028, "Wrong size on CharacterSCT_OnHealthChanged");
static_assert(offsetof(CharacterSCT_OnHealthChanged, DeltaValue) == 0x000000, "Member 'CharacterSCT_OnHealthChanged::DeltaValue' has a wrong offset!");
static_assert(offsetof(CharacterSCT_OnHealthChanged, EventTags) == 0x000008, "Member 'CharacterSCT_OnHealthChanged::EventTags' has a wrong offset!");

// Function SCT.CharacterSCT.OnManaChanged
// 0x0028 (0x0028 - 0x0000)
struct CharacterSCT_OnManaChanged final
{
public:
	float                                         DeltaValue;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTagContainer                  EventTags;                                         // 0x0008(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterSCT_OnManaChanged) == 0x000008, "Wrong alignment on CharacterSCT_OnManaChanged");
static_assert(sizeof(CharacterSCT_OnManaChanged) == 0x000028, "Wrong size on CharacterSCT_OnManaChanged");
static_assert(offsetof(CharacterSCT_OnManaChanged, DeltaValue) == 0x000000, "Member 'CharacterSCT_OnManaChanged::DeltaValue' has a wrong offset!");
static_assert(offsetof(CharacterSCT_OnManaChanged, EventTags) == 0x000008, "Member 'CharacterSCT_OnManaChanged::EventTags' has a wrong offset!");

// Function SCT.CharacterSCT.OnMoveSpeedChanged
// 0x0004 (0x0004 - 0x0000)
struct CharacterSCT_OnMoveSpeedChanged final
{
public:
	float                                         MovementSpeed;                                     // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterSCT_OnMoveSpeedChanged) == 0x000004, "Wrong alignment on CharacterSCT_OnMoveSpeedChanged");
static_assert(sizeof(CharacterSCT_OnMoveSpeedChanged) == 0x000004, "Wrong size on CharacterSCT_OnMoveSpeedChanged");
static_assert(offsetof(CharacterSCT_OnMoveSpeedChanged, MovementSpeed) == 0x000000, "Member 'CharacterSCT_OnMoveSpeedChanged::MovementSpeed' has a wrong offset!");

// Function SCT.CharacterSCT.OnNameChanged
// 0x0010 (0x0010 - 0x0000)
struct CharacterSCT_OnNameChanged final
{
public:
	class FString                                 NewName;                                           // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterSCT_OnNameChanged) == 0x000008, "Wrong alignment on CharacterSCT_OnNameChanged");
static_assert(sizeof(CharacterSCT_OnNameChanged) == 0x000010, "Wrong size on CharacterSCT_OnNameChanged");
static_assert(offsetof(CharacterSCT_OnNameChanged, NewName) == 0x000000, "Member 'CharacterSCT_OnNameChanged::NewName' has a wrong offset!");

// Function SCT.CharacterSCT.Silence
// 0x0004 (0x0004 - 0x0000)
struct CharacterSCT_Silence final
{
public:
	float                                         Duration;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterSCT_Silence) == 0x000004, "Wrong alignment on CharacterSCT_Silence");
static_assert(sizeof(CharacterSCT_Silence) == 0x000004, "Wrong size on CharacterSCT_Silence");
static_assert(offsetof(CharacterSCT_Silence, Duration) == 0x000000, "Member 'CharacterSCT_Silence::Duration' has a wrong offset!");

// Function SCT.CharacterSCT.CanRotateCamera
// 0x0001 (0x0001 - 0x0000)
struct CharacterSCT_CanRotateCamera final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterSCT_CanRotateCamera) == 0x000001, "Wrong alignment on CharacterSCT_CanRotateCamera");
static_assert(sizeof(CharacterSCT_CanRotateCamera) == 0x000001, "Wrong size on CharacterSCT_CanRotateCamera");
static_assert(offsetof(CharacterSCT_CanRotateCamera, ReturnValue) == 0x000000, "Member 'CharacterSCT_CanRotateCamera::ReturnValue' has a wrong offset!");

// Function SCT.CharacterSCT.CanRotateCharacter
// 0x0001 (0x0001 - 0x0000)
struct CharacterSCT_CanRotateCharacter final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterSCT_CanRotateCharacter) == 0x000001, "Wrong alignment on CharacterSCT_CanRotateCharacter");
static_assert(sizeof(CharacterSCT_CanRotateCharacter) == 0x000001, "Wrong size on CharacterSCT_CanRotateCharacter");
static_assert(offsetof(CharacterSCT_CanRotateCharacter, ReturnValue) == 0x000000, "Member 'CharacterSCT_CanRotateCharacter::ReturnValue' has a wrong offset!");

// Function SCT.CharacterSCT.GetCharacerLevel
// 0x0004 (0x0004 - 0x0000)
struct CharacterSCT_GetCharacerLevel final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterSCT_GetCharacerLevel) == 0x000004, "Wrong alignment on CharacterSCT_GetCharacerLevel");
static_assert(sizeof(CharacterSCT_GetCharacerLevel) == 0x000004, "Wrong size on CharacterSCT_GetCharacerLevel");
static_assert(offsetof(CharacterSCT_GetCharacerLevel, ReturnValue) == 0x000000, "Member 'CharacterSCT_GetCharacerLevel::ReturnValue' has a wrong offset!");

// Function SCT.CharacterSCT.GetFate
// 0x0001 (0x0001 - 0x0000)
struct CharacterSCT_GetFate final
{
public:
	EFate                                         ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterSCT_GetFate) == 0x000001, "Wrong alignment on CharacterSCT_GetFate");
static_assert(sizeof(CharacterSCT_GetFate) == 0x000001, "Wrong size on CharacterSCT_GetFate");
static_assert(offsetof(CharacterSCT_GetFate, ReturnValue) == 0x000000, "Member 'CharacterSCT_GetFate::ReturnValue' has a wrong offset!");

// Function SCT.CharacterSCT.GetSCTPlayerState
// 0x0008 (0x0008 - 0x0000)
struct CharacterSCT_GetSCTPlayerState final
{
public:
	class ASCTPlayerState*                        ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterSCT_GetSCTPlayerState) == 0x000008, "Wrong alignment on CharacterSCT_GetSCTPlayerState");
static_assert(sizeof(CharacterSCT_GetSCTPlayerState) == 0x000008, "Wrong size on CharacterSCT_GetSCTPlayerState");
static_assert(offsetof(CharacterSCT_GetSCTPlayerState, ReturnValue) == 0x000000, "Member 'CharacterSCT_GetSCTPlayerState::ReturnValue' has a wrong offset!");

// Function SCT.CharacterSCT.IsAlive
// 0x0001 (0x0001 - 0x0000)
struct CharacterSCT_IsAlive final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterSCT_IsAlive) == 0x000001, "Wrong alignment on CharacterSCT_IsAlive");
static_assert(sizeof(CharacterSCT_IsAlive) == 0x000001, "Wrong size on CharacterSCT_IsAlive");
static_assert(offsetof(CharacterSCT_IsAlive, ReturnValue) == 0x000000, "Member 'CharacterSCT_IsAlive::ReturnValue' has a wrong offset!");

// Function SCT.CharacterSCT.IsFateKnown
// 0x0001 (0x0001 - 0x0000)
struct CharacterSCT_IsFateKnown final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterSCT_IsFateKnown) == 0x000001, "Wrong alignment on CharacterSCT_IsFateKnown");
static_assert(sizeof(CharacterSCT_IsFateKnown) == 0x000001, "Wrong size on CharacterSCT_IsFateKnown");
static_assert(offsetof(CharacterSCT_IsFateKnown, ReturnValue) == 0x000000, "Member 'CharacterSCT_IsFateKnown::ReturnValue' has a wrong offset!");

// Function SCT.CharacterSCT.IsImmovable
// 0x0001 (0x0001 - 0x0000)
struct CharacterSCT_IsImmovable final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterSCT_IsImmovable) == 0x000001, "Wrong alignment on CharacterSCT_IsImmovable");
static_assert(sizeof(CharacterSCT_IsImmovable) == 0x000001, "Wrong size on CharacterSCT_IsImmovable");
static_assert(offsetof(CharacterSCT_IsImmovable, ReturnValue) == 0x000000, "Member 'CharacterSCT_IsImmovable::ReturnValue' has a wrong offset!");

// Function SCT.CharacterSCT.IsInactive
// 0x0001 (0x0001 - 0x0000)
struct CharacterSCT_IsInactive final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterSCT_IsInactive) == 0x000001, "Wrong alignment on CharacterSCT_IsInactive");
static_assert(sizeof(CharacterSCT_IsInactive) == 0x000001, "Wrong size on CharacterSCT_IsInactive");
static_assert(offsetof(CharacterSCT_IsInactive, ReturnValue) == 0x000000, "Member 'CharacterSCT_IsInactive::ReturnValue' has a wrong offset!");

// Function SCT.CharacterSCT.K2_CanCrouch
// 0x0001 (0x0001 - 0x0000)
struct CharacterSCT_K2_CanCrouch final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterSCT_K2_CanCrouch) == 0x000001, "Wrong alignment on CharacterSCT_K2_CanCrouch");
static_assert(sizeof(CharacterSCT_K2_CanCrouch) == 0x000001, "Wrong size on CharacterSCT_K2_CanCrouch");
static_assert(offsetof(CharacterSCT_K2_CanCrouch, ReturnValue) == 0x000000, "Member 'CharacterSCT_K2_CanCrouch::ReturnValue' has a wrong offset!");

// Function SCT.AccelByteGIS.AddNewAchievementToQueue
// 0x0008 (0x0008 - 0x0000)
struct AccelByteGIS_AddNewAchievementToQueue final
{
public:
	class UFCTAchievement*                        NewAchievement;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AccelByteGIS_AddNewAchievementToQueue) == 0x000008, "Wrong alignment on AccelByteGIS_AddNewAchievementToQueue");
static_assert(sizeof(AccelByteGIS_AddNewAchievementToQueue) == 0x000008, "Wrong size on AccelByteGIS_AddNewAchievementToQueue");
static_assert(offsetof(AccelByteGIS_AddNewAchievementToQueue, NewAchievement) == 0x000000, "Member 'AccelByteGIS_AddNewAchievementToQueue::NewAchievement' has a wrong offset!");

// Function SCT.AccelByteGIS.CachePlayedWithLastMatchUser
// 0x0010 (0x0010 - 0x0000)
struct AccelByteGIS_CachePlayedWithLastMatchUser final
{
public:
	class FString                                 UserId;                                            // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AccelByteGIS_CachePlayedWithLastMatchUser) == 0x000008, "Wrong alignment on AccelByteGIS_CachePlayedWithLastMatchUser");
static_assert(sizeof(AccelByteGIS_CachePlayedWithLastMatchUser) == 0x000010, "Wrong size on AccelByteGIS_CachePlayedWithLastMatchUser");
static_assert(offsetof(AccelByteGIS_CachePlayedWithLastMatchUser, UserId) == 0x000000, "Member 'AccelByteGIS_CachePlayedWithLastMatchUser::UserId' has a wrong offset!");

// Function SCT.AccelByteGIS.GetCachedLastMatchUsers
// 0x0010 (0x0010 - 0x0000)
struct AccelByteGIS_GetCachedLastMatchUsers final
{
public:
	struct FFCTRecentlyPlayedWithPayload          ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(AccelByteGIS_GetCachedLastMatchUsers) == 0x000008, "Wrong alignment on AccelByteGIS_GetCachedLastMatchUsers");
static_assert(sizeof(AccelByteGIS_GetCachedLastMatchUsers) == 0x000010, "Wrong size on AccelByteGIS_GetCachedLastMatchUsers");
static_assert(offsetof(AccelByteGIS_GetCachedLastMatchUsers, ReturnValue) == 0x000000, "Member 'AccelByteGIS_GetCachedLastMatchUsers::ReturnValue' has a wrong offset!");

// Function SCT.AccelByteGIS.GetGameCrossplayEnabled
// 0x0001 (0x0001 - 0x0000)
struct AccelByteGIS_GetGameCrossplayEnabled final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AccelByteGIS_GetGameCrossplayEnabled) == 0x000001, "Wrong alignment on AccelByteGIS_GetGameCrossplayEnabled");
static_assert(sizeof(AccelByteGIS_GetGameCrossplayEnabled) == 0x000001, "Wrong size on AccelByteGIS_GetGameCrossplayEnabled");
static_assert(offsetof(AccelByteGIS_GetGameCrossplayEnabled, ReturnValue) == 0x000000, "Member 'AccelByteGIS_GetGameCrossplayEnabled::ReturnValue' has a wrong offset!");

// Function SCT.AccelByteGIS.GetPlatformPlayerNickname
// 0x0010 (0x0010 - 0x0000)
struct AccelByteGIS_GetPlatformPlayerNickname final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AccelByteGIS_GetPlatformPlayerNickname) == 0x000008, "Wrong alignment on AccelByteGIS_GetPlatformPlayerNickname");
static_assert(sizeof(AccelByteGIS_GetPlatformPlayerNickname) == 0x000010, "Wrong size on AccelByteGIS_GetPlatformPlayerNickname");
static_assert(offsetof(AccelByteGIS_GetPlatformPlayerNickname, ReturnValue) == 0x000000, "Member 'AccelByteGIS_GetPlatformPlayerNickname::ReturnValue' has a wrong offset!");

// Function SCT.AccelByteGIS.GetSyncPlatformPurchasesRateLimited
// 0x0001 (0x0001 - 0x0000)
struct AccelByteGIS_GetSyncPlatformPurchasesRateLimited final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AccelByteGIS_GetSyncPlatformPurchasesRateLimited) == 0x000001, "Wrong alignment on AccelByteGIS_GetSyncPlatformPurchasesRateLimited");
static_assert(sizeof(AccelByteGIS_GetSyncPlatformPurchasesRateLimited) == 0x000001, "Wrong size on AccelByteGIS_GetSyncPlatformPurchasesRateLimited");
static_assert(offsetof(AccelByteGIS_GetSyncPlatformPurchasesRateLimited, ReturnValue) == 0x000000, "Member 'AccelByteGIS_GetSyncPlatformPurchasesRateLimited::ReturnValue' has a wrong offset!");

// Function SCT.AccelByteGIS.GetXboxCrossPlayRestricted
// 0x0001 (0x0001 - 0x0000)
struct AccelByteGIS_GetXboxCrossPlayRestricted final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AccelByteGIS_GetXboxCrossPlayRestricted) == 0x000001, "Wrong alignment on AccelByteGIS_GetXboxCrossPlayRestricted");
static_assert(sizeof(AccelByteGIS_GetXboxCrossPlayRestricted) == 0x000001, "Wrong size on AccelByteGIS_GetXboxCrossPlayRestricted");
static_assert(offsetof(AccelByteGIS_GetXboxCrossPlayRestricted, ReturnValue) == 0x000000, "Member 'AccelByteGIS_GetXboxCrossPlayRestricted::ReturnValue' has a wrong offset!");

// Function SCT.AccelByteGIS.HasPendingConsoleLaunchIntent
// 0x0001 (0x0001 - 0x0000)
struct AccelByteGIS_HasPendingConsoleLaunchIntent final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AccelByteGIS_HasPendingConsoleLaunchIntent) == 0x000001, "Wrong alignment on AccelByteGIS_HasPendingConsoleLaunchIntent");
static_assert(sizeof(AccelByteGIS_HasPendingConsoleLaunchIntent) == 0x000001, "Wrong size on AccelByteGIS_HasPendingConsoleLaunchIntent");
static_assert(offsetof(AccelByteGIS_HasPendingConsoleLaunchIntent, ReturnValue) == 0x000000, "Member 'AccelByteGIS_HasPendingConsoleLaunchIntent::ReturnValue' has a wrong offset!");

// Function SCT.AccelByteGIS.HasPendingConsoleLaunchMultiplayerIntent
// 0x0001 (0x0001 - 0x0000)
struct AccelByteGIS_HasPendingConsoleLaunchMultiplayerIntent final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AccelByteGIS_HasPendingConsoleLaunchMultiplayerIntent) == 0x000001, "Wrong alignment on AccelByteGIS_HasPendingConsoleLaunchMultiplayerIntent");
static_assert(sizeof(AccelByteGIS_HasPendingConsoleLaunchMultiplayerIntent) == 0x000001, "Wrong size on AccelByteGIS_HasPendingConsoleLaunchMultiplayerIntent");
static_assert(offsetof(AccelByteGIS_HasPendingConsoleLaunchMultiplayerIntent, ReturnValue) == 0x000000, "Member 'AccelByteGIS_HasPendingConsoleLaunchMultiplayerIntent::ReturnValue' has a wrong offset!");

// Function SCT.AccelByteGIS.HasPendingConsoleSessionInvite
// 0x0001 (0x0001 - 0x0000)
struct AccelByteGIS_HasPendingConsoleSessionInvite final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AccelByteGIS_HasPendingConsoleSessionInvite) == 0x000001, "Wrong alignment on AccelByteGIS_HasPendingConsoleSessionInvite");
static_assert(sizeof(AccelByteGIS_HasPendingConsoleSessionInvite) == 0x000001, "Wrong size on AccelByteGIS_HasPendingConsoleSessionInvite");
static_assert(offsetof(AccelByteGIS_HasPendingConsoleSessionInvite, ReturnValue) == 0x000000, "Member 'AccelByteGIS_HasPendingConsoleSessionInvite::ReturnValue' has a wrong offset!");

// Function SCT.AccelByteGIS.IsLoggedIn
// 0x0001 (0x0001 - 0x0000)
struct AccelByteGIS_IsLoggedIn final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AccelByteGIS_IsLoggedIn) == 0x000001, "Wrong alignment on AccelByteGIS_IsLoggedIn");
static_assert(sizeof(AccelByteGIS_IsLoggedIn) == 0x000001, "Wrong size on AccelByteGIS_IsLoggedIn");
static_assert(offsetof(AccelByteGIS_IsLoggedIn, ReturnValue) == 0x000000, "Member 'AccelByteGIS_IsLoggedIn::ReturnValue' has a wrong offset!");

// Function SCT.AccelByteGIS.LoginClientWithDelay
// 0x0004 (0x0004 - 0x0000)
struct AccelByteGIS_LoginClientWithDelay final
{
public:
	float                                         Delay;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AccelByteGIS_LoginClientWithDelay) == 0x000004, "Wrong alignment on AccelByteGIS_LoginClientWithDelay");
static_assert(sizeof(AccelByteGIS_LoginClientWithDelay) == 0x000004, "Wrong size on AccelByteGIS_LoginClientWithDelay");
static_assert(offsetof(AccelByteGIS_LoginClientWithDelay, Delay) == 0x000000, "Member 'AccelByteGIS_LoginClientWithDelay::Delay' has a wrong offset!");

// Function SCT.AccelByteGIS.OnAchievementPopUpCreated
// 0x0008 (0x0008 - 0x0000)
struct AccelByteGIS_OnAchievementPopUpCreated final
{
public:
	class UTexture2DDynamic*                      IconTexture;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AccelByteGIS_OnAchievementPopUpCreated) == 0x000008, "Wrong alignment on AccelByteGIS_OnAchievementPopUpCreated");
static_assert(sizeof(AccelByteGIS_OnAchievementPopUpCreated) == 0x000008, "Wrong size on AccelByteGIS_OnAchievementPopUpCreated");
static_assert(offsetof(AccelByteGIS_OnAchievementPopUpCreated, IconTexture) == 0x000000, "Member 'AccelByteGIS_OnAchievementPopUpCreated::IconTexture' has a wrong offset!");

// Function SCT.AccelByteGIS.SetGameCrossplayEnabled
// 0x0001 (0x0001 - 0x0000)
struct AccelByteGIS_SetGameCrossplayEnabled final
{
public:
	bool                                          bInEnabled;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AccelByteGIS_SetGameCrossplayEnabled) == 0x000001, "Wrong alignment on AccelByteGIS_SetGameCrossplayEnabled");
static_assert(sizeof(AccelByteGIS_SetGameCrossplayEnabled) == 0x000001, "Wrong size on AccelByteGIS_SetGameCrossplayEnabled");
static_assert(offsetof(AccelByteGIS_SetGameCrossplayEnabled, bInEnabled) == 0x000000, "Member 'AccelByteGIS_SetGameCrossplayEnabled::bInEnabled' has a wrong offset!");

// Function SCT.AccelByteGIS.SetXboxCrossPlayRestricted
// 0x0001 (0x0001 - 0x0000)
struct AccelByteGIS_SetXboxCrossPlayRestricted final
{
public:
	bool                                          bInRestricted;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AccelByteGIS_SetXboxCrossPlayRestricted) == 0x000001, "Wrong alignment on AccelByteGIS_SetXboxCrossPlayRestricted");
static_assert(sizeof(AccelByteGIS_SetXboxCrossPlayRestricted) == 0x000001, "Wrong size on AccelByteGIS_SetXboxCrossPlayRestricted");
static_assert(offsetof(AccelByteGIS_SetXboxCrossPlayRestricted, bInRestricted) == 0x000000, "Member 'AccelByteGIS_SetXboxCrossPlayRestricted::bInRestricted' has a wrong offset!");

// Function SCT.AccelByteGIS.UpdatePlatformAchievementProgress
// 0x0018 (0x0018 - 0x0000)
struct AccelByteGIS_UpdatePlatformAchievementProgress final
{
public:
	class FString                                 AchievementID;                                     // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Progress;                                          // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AccelByteGIS_UpdatePlatformAchievementProgress) == 0x000008, "Wrong alignment on AccelByteGIS_UpdatePlatformAchievementProgress");
static_assert(sizeof(AccelByteGIS_UpdatePlatformAchievementProgress) == 0x000018, "Wrong size on AccelByteGIS_UpdatePlatformAchievementProgress");
static_assert(offsetof(AccelByteGIS_UpdatePlatformAchievementProgress, AchievementID) == 0x000000, "Member 'AccelByteGIS_UpdatePlatformAchievementProgress::AchievementID' has a wrong offset!");
static_assert(offsetof(AccelByteGIS_UpdatePlatformAchievementProgress, Progress) == 0x000010, "Member 'AccelByteGIS_UpdatePlatformAchievementProgress::Progress' has a wrong offset!");

// Function SCT.ProgressionObject.GetCharacter
// 0x0008 (0x0008 - 0x0000)
struct ProgressionObject_GetCharacter final
{
public:
	class ACharacterSCT*                          ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ProgressionObject_GetCharacter) == 0x000008, "Wrong alignment on ProgressionObject_GetCharacter");
static_assert(sizeof(ProgressionObject_GetCharacter) == 0x000008, "Wrong size on ProgressionObject_GetCharacter");
static_assert(offsetof(ProgressionObject_GetCharacter, ReturnValue) == 0x000000, "Member 'ProgressionObject_GetCharacter::ReturnValue' has a wrong offset!");

// Function SCT.ProgressionObject.GetController
// 0x0008 (0x0008 - 0x0000)
struct ProgressionObject_GetController final
{
public:
	class ASCTPlayerController*                   ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ProgressionObject_GetController) == 0x000008, "Wrong alignment on ProgressionObject_GetController");
static_assert(sizeof(ProgressionObject_GetController) == 0x000008, "Wrong size on ProgressionObject_GetController");
static_assert(offsetof(ProgressionObject_GetController, ReturnValue) == 0x000000, "Member 'ProgressionObject_GetController::ReturnValue' has a wrong offset!");

// Function SCT.ProgressionObject.GetGameState
// 0x0008 (0x0008 - 0x0000)
struct ProgressionObject_GetGameState final
{
public:
	class ASCTGameState*                          ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ProgressionObject_GetGameState) == 0x000008, "Wrong alignment on ProgressionObject_GetGameState");
static_assert(sizeof(ProgressionObject_GetGameState) == 0x000008, "Wrong size on ProgressionObject_GetGameState");
static_assert(offsetof(ProgressionObject_GetGameState, ReturnValue) == 0x000000, "Member 'ProgressionObject_GetGameState::ReturnValue' has a wrong offset!");

// Function SCT.ProgressionObject.GetMaxNumberOfPlayers
// 0x0004 (0x0004 - 0x0000)
struct ProgressionObject_GetMaxNumberOfPlayers final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ProgressionObject_GetMaxNumberOfPlayers) == 0x000004, "Wrong alignment on ProgressionObject_GetMaxNumberOfPlayers");
static_assert(sizeof(ProgressionObject_GetMaxNumberOfPlayers) == 0x000004, "Wrong size on ProgressionObject_GetMaxNumberOfPlayers");
static_assert(offsetof(ProgressionObject_GetMaxNumberOfPlayers, ReturnValue) == 0x000000, "Member 'ProgressionObject_GetMaxNumberOfPlayers::ReturnValue' has a wrong offset!");

// Function SCT.ProgressionObject.GetPlayerState
// 0x0008 (0x0008 - 0x0000)
struct ProgressionObject_GetPlayerState final
{
public:
	class ASCTPlayerState*                        ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ProgressionObject_GetPlayerState) == 0x000008, "Wrong alignment on ProgressionObject_GetPlayerState");
static_assert(sizeof(ProgressionObject_GetPlayerState) == 0x000008, "Wrong size on ProgressionObject_GetPlayerState");
static_assert(offsetof(ProgressionObject_GetPlayerState, ReturnValue) == 0x000000, "Member 'ProgressionObject_GetPlayerState::ReturnValue' has a wrong offset!");

// Function SCT.ProgressionObject.GetRandomOtherPlayer
// 0x0008 (0x0008 - 0x0000)
struct ProgressionObject_GetRandomOtherPlayer final
{
public:
	class ASCTPlayerState*                        ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ProgressionObject_GetRandomOtherPlayer) == 0x000008, "Wrong alignment on ProgressionObject_GetRandomOtherPlayer");
static_assert(sizeof(ProgressionObject_GetRandomOtherPlayer) == 0x000008, "Wrong size on ProgressionObject_GetRandomOtherPlayer");
static_assert(offsetof(ProgressionObject_GetRandomOtherPlayer, ReturnValue) == 0x000000, "Member 'ProgressionObject_GetRandomOtherPlayer::ReturnValue' has a wrong offset!");

// Function SCT.ProgressionObject.GetRandomPlayer
// 0x0018 (0x0018 - 0x0000)
struct ProgressionObject_GetRandomPlayer final
{
public:
	TArray<class APlayerState*>                   Ignore;                                            // 0x0000(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	class ASCTPlayerState*                        ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ProgressionObject_GetRandomPlayer) == 0x000008, "Wrong alignment on ProgressionObject_GetRandomPlayer");
static_assert(sizeof(ProgressionObject_GetRandomPlayer) == 0x000018, "Wrong size on ProgressionObject_GetRandomPlayer");
static_assert(offsetof(ProgressionObject_GetRandomPlayer, Ignore) == 0x000000, "Member 'ProgressionObject_GetRandomPlayer::Ignore' has a wrong offset!");
static_assert(offsetof(ProgressionObject_GetRandomPlayer, ReturnValue) == 0x000010, "Member 'ProgressionObject_GetRandomPlayer::ReturnValue' has a wrong offset!");

// Function SCT.ProgressionObject.GetWorldContextObject
// 0x0008 (0x0008 - 0x0000)
struct ProgressionObject_GetWorldContextObject final
{
public:
	class AActor*                                 ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ProgressionObject_GetWorldContextObject) == 0x000008, "Wrong alignment on ProgressionObject_GetWorldContextObject");
static_assert(sizeof(ProgressionObject_GetWorldContextObject) == 0x000008, "Wrong size on ProgressionObject_GetWorldContextObject");
static_assert(offsetof(ProgressionObject_GetWorldContextObject, ReturnValue) == 0x000000, "Member 'ProgressionObject_GetWorldContextObject::ReturnValue' has a wrong offset!");

// Function SCT.ProgressionObject.IsControllerSelf
// 0x0010 (0x0010 - 0x0000)
struct ProgressionObject_IsControllerSelf final
{
public:
	class APlayerController*                      Other;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ProgressionObject_IsControllerSelf) == 0x000008, "Wrong alignment on ProgressionObject_IsControllerSelf");
static_assert(sizeof(ProgressionObject_IsControllerSelf) == 0x000010, "Wrong size on ProgressionObject_IsControllerSelf");
static_assert(offsetof(ProgressionObject_IsControllerSelf, Other) == 0x000000, "Member 'ProgressionObject_IsControllerSelf::Other' has a wrong offset!");
static_assert(offsetof(ProgressionObject_IsControllerSelf, ReturnValue) == 0x000008, "Member 'ProgressionObject_IsControllerSelf::ReturnValue' has a wrong offset!");

// Function SCT.ProgressionObject.IsPlayerStateSelf
// 0x0010 (0x0010 - 0x0000)
struct ProgressionObject_IsPlayerStateSelf final
{
public:
	class APlayerState*                           Other;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ProgressionObject_IsPlayerStateSelf) == 0x000008, "Wrong alignment on ProgressionObject_IsPlayerStateSelf");
static_assert(sizeof(ProgressionObject_IsPlayerStateSelf) == 0x000010, "Wrong size on ProgressionObject_IsPlayerStateSelf");
static_assert(offsetof(ProgressionObject_IsPlayerStateSelf, Other) == 0x000000, "Member 'ProgressionObject_IsPlayerStateSelf::Other' has a wrong offset!");
static_assert(offsetof(ProgressionObject_IsPlayerStateSelf, ReturnValue) == 0x000008, "Member 'ProgressionObject_IsPlayerStateSelf::ReturnValue' has a wrong offset!");

// Function SCT.CustomizationScrollBoxUserWidgetBase.SwapItemCardSelectedStates
// 0x0010 (0x0010 - 0x0000)
struct CustomizationScrollBoxUserWidgetBase_SwapItemCardSelectedStates final
{
public:
	class FString                                 NewItemRowName;                                    // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CustomizationScrollBoxUserWidgetBase_SwapItemCardSelectedStates) == 0x000008, "Wrong alignment on CustomizationScrollBoxUserWidgetBase_SwapItemCardSelectedStates");
static_assert(sizeof(CustomizationScrollBoxUserWidgetBase_SwapItemCardSelectedStates) == 0x000010, "Wrong size on CustomizationScrollBoxUserWidgetBase_SwapItemCardSelectedStates");
static_assert(offsetof(CustomizationScrollBoxUserWidgetBase_SwapItemCardSelectedStates, NewItemRowName) == 0x000000, "Member 'CustomizationScrollBoxUserWidgetBase_SwapItemCardSelectedStates::NewItemRowName' has a wrong offset!");

// Function SCT.CustomizationScrollBoxUserWidgetBase.SwapItemCardSelectedStatesByGrid
// 0x0028 (0x0028 - 0x0000)
struct CustomizationScrollBoxUserWidgetBase_SwapItemCardSelectedStatesByGrid final
{
public:
	class UGridPanel*                             Grid;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 CurrentItemRowName;                                // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 NewItemRowName;                                    // 0x0018(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CustomizationScrollBoxUserWidgetBase_SwapItemCardSelectedStatesByGrid) == 0x000008, "Wrong alignment on CustomizationScrollBoxUserWidgetBase_SwapItemCardSelectedStatesByGrid");
static_assert(sizeof(CustomizationScrollBoxUserWidgetBase_SwapItemCardSelectedStatesByGrid) == 0x000028, "Wrong size on CustomizationScrollBoxUserWidgetBase_SwapItemCardSelectedStatesByGrid");
static_assert(offsetof(CustomizationScrollBoxUserWidgetBase_SwapItemCardSelectedStatesByGrid, Grid) == 0x000000, "Member 'CustomizationScrollBoxUserWidgetBase_SwapItemCardSelectedStatesByGrid::Grid' has a wrong offset!");
static_assert(offsetof(CustomizationScrollBoxUserWidgetBase_SwapItemCardSelectedStatesByGrid, CurrentItemRowName) == 0x000008, "Member 'CustomizationScrollBoxUserWidgetBase_SwapItemCardSelectedStatesByGrid::CurrentItemRowName' has a wrong offset!");
static_assert(offsetof(CustomizationScrollBoxUserWidgetBase_SwapItemCardSelectedStatesByGrid, NewItemRowName) == 0x000018, "Member 'CustomizationScrollBoxUserWidgetBase_SwapItemCardSelectedStatesByGrid::NewItemRowName' has a wrong offset!");

// Function SCT.CustomizationScrollBoxUserWidgetBase.UpdateCategoryVisibility
// 0x0008 (0x0008 - 0x0000)
struct CustomizationScrollBoxUserWidgetBase_UpdateCategoryVisibility final
{
public:
	class UGridPanel*                             CategoryGrid;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CustomizationScrollBoxUserWidgetBase_UpdateCategoryVisibility) == 0x000008, "Wrong alignment on CustomizationScrollBoxUserWidgetBase_UpdateCategoryVisibility");
static_assert(sizeof(CustomizationScrollBoxUserWidgetBase_UpdateCategoryVisibility) == 0x000008, "Wrong size on CustomizationScrollBoxUserWidgetBase_UpdateCategoryVisibility");
static_assert(offsetof(CustomizationScrollBoxUserWidgetBase_UpdateCategoryVisibility, CategoryGrid) == 0x000000, "Member 'CustomizationScrollBoxUserWidgetBase_UpdateCategoryVisibility::CategoryGrid' has a wrong offset!");

// Function SCT.CustomizationScrollBoxUserWidgetBase.VerticalBoundaryHit
// 0x0010 (0x0010 - 0x0000)
struct CustomizationScrollBoxUserWidgetBase_VerticalBoundaryHit final
{
public:
	EUINavigation                                 InNavigation;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UWidget*                                ReturnValue;                                       // 0x0008(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CustomizationScrollBoxUserWidgetBase_VerticalBoundaryHit) == 0x000008, "Wrong alignment on CustomizationScrollBoxUserWidgetBase_VerticalBoundaryHit");
static_assert(sizeof(CustomizationScrollBoxUserWidgetBase_VerticalBoundaryHit) == 0x000010, "Wrong size on CustomizationScrollBoxUserWidgetBase_VerticalBoundaryHit");
static_assert(offsetof(CustomizationScrollBoxUserWidgetBase_VerticalBoundaryHit, InNavigation) == 0x000000, "Member 'CustomizationScrollBoxUserWidgetBase_VerticalBoundaryHit::InNavigation' has a wrong offset!");
static_assert(offsetof(CustomizationScrollBoxUserWidgetBase_VerticalBoundaryHit, ReturnValue) == 0x000008, "Member 'CustomizationScrollBoxUserWidgetBase_VerticalBoundaryHit::ReturnValue' has a wrong offset!");

// Function SCT.CustomizationScrollBoxUserWidget.AppearanceVerticalBoundaryHit
// 0x0010 (0x0010 - 0x0000)
struct CustomizationScrollBoxUserWidget_AppearanceVerticalBoundaryHit final
{
public:
	EUINavigation                                 InNavigation;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UWidget*                                ReturnValue;                                       // 0x0008(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CustomizationScrollBoxUserWidget_AppearanceVerticalBoundaryHit) == 0x000008, "Wrong alignment on CustomizationScrollBoxUserWidget_AppearanceVerticalBoundaryHit");
static_assert(sizeof(CustomizationScrollBoxUserWidget_AppearanceVerticalBoundaryHit) == 0x000010, "Wrong size on CustomizationScrollBoxUserWidget_AppearanceVerticalBoundaryHit");
static_assert(offsetof(CustomizationScrollBoxUserWidget_AppearanceVerticalBoundaryHit, InNavigation) == 0x000000, "Member 'CustomizationScrollBoxUserWidget_AppearanceVerticalBoundaryHit::InNavigation' has a wrong offset!");
static_assert(offsetof(CustomizationScrollBoxUserWidget_AppearanceVerticalBoundaryHit, ReturnValue) == 0x000008, "Member 'CustomizationScrollBoxUserWidget_AppearanceVerticalBoundaryHit::ReturnValue' has a wrong offset!");

// Function SCT.CustomizationScrollBoxUserWidget.HorizontalBoundaryHit
// 0x0010 (0x0010 - 0x0000)
struct CustomizationScrollBoxUserWidget_HorizontalBoundaryHit final
{
public:
	EUINavigation                                 InNavigation;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UWidget*                                ReturnValue;                                       // 0x0008(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CustomizationScrollBoxUserWidget_HorizontalBoundaryHit) == 0x000008, "Wrong alignment on CustomizationScrollBoxUserWidget_HorizontalBoundaryHit");
static_assert(sizeof(CustomizationScrollBoxUserWidget_HorizontalBoundaryHit) == 0x000010, "Wrong size on CustomizationScrollBoxUserWidget_HorizontalBoundaryHit");
static_assert(offsetof(CustomizationScrollBoxUserWidget_HorizontalBoundaryHit, InNavigation) == 0x000000, "Member 'CustomizationScrollBoxUserWidget_HorizontalBoundaryHit::InNavigation' has a wrong offset!");
static_assert(offsetof(CustomizationScrollBoxUserWidget_HorizontalBoundaryHit, ReturnValue) == 0x000008, "Member 'CustomizationScrollBoxUserWidget_HorizontalBoundaryHit::ReturnValue' has a wrong offset!");

// Function SCT.CustomizationScrollBoxUserWidget.K2_UpdateEyeMaterial
// 0x0010 (0x0010 - 0x0000)
struct CustomizationScrollBoxUserWidget_K2_UpdateEyeMaterial final
{
public:
	class FString                                 Selected;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CustomizationScrollBoxUserWidget_K2_UpdateEyeMaterial) == 0x000008, "Wrong alignment on CustomizationScrollBoxUserWidget_K2_UpdateEyeMaterial");
static_assert(sizeof(CustomizationScrollBoxUserWidget_K2_UpdateEyeMaterial) == 0x000010, "Wrong size on CustomizationScrollBoxUserWidget_K2_UpdateEyeMaterial");
static_assert(offsetof(CustomizationScrollBoxUserWidget_K2_UpdateEyeMaterial, Selected) == 0x000000, "Member 'CustomizationScrollBoxUserWidget_K2_UpdateEyeMaterial::Selected' has a wrong offset!");

// Function SCT.CustomizationScrollBoxUserWidget.K2_UpdateHairColor
// 0x0010 (0x0010 - 0x0000)
struct CustomizationScrollBoxUserWidget_K2_UpdateHairColor final
{
public:
	class FString                                 Selected;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CustomizationScrollBoxUserWidget_K2_UpdateHairColor) == 0x000008, "Wrong alignment on CustomizationScrollBoxUserWidget_K2_UpdateHairColor");
static_assert(sizeof(CustomizationScrollBoxUserWidget_K2_UpdateHairColor) == 0x000010, "Wrong size on CustomizationScrollBoxUserWidget_K2_UpdateHairColor");
static_assert(offsetof(CustomizationScrollBoxUserWidget_K2_UpdateHairColor, Selected) == 0x000000, "Member 'CustomizationScrollBoxUserWidget_K2_UpdateHairColor::Selected' has a wrong offset!");

// Function SCT.CustomizationScrollBoxUserWidget.K2_UpdatePreset
// 0x0010 (0x0010 - 0x0000)
struct CustomizationScrollBoxUserWidget_K2_UpdatePreset final
{
public:
	class FString                                 Selected;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CustomizationScrollBoxUserWidget_K2_UpdatePreset) == 0x000008, "Wrong alignment on CustomizationScrollBoxUserWidget_K2_UpdatePreset");
static_assert(sizeof(CustomizationScrollBoxUserWidget_K2_UpdatePreset) == 0x000010, "Wrong size on CustomizationScrollBoxUserWidget_K2_UpdatePreset");
static_assert(offsetof(CustomizationScrollBoxUserWidget_K2_UpdatePreset, Selected) == 0x000000, "Member 'CustomizationScrollBoxUserWidget_K2_UpdatePreset::Selected' has a wrong offset!");

// Function SCT.CustomizationScrollBoxUserWidget.K2_UpdateSkinMaterial
// 0x0010 (0x0010 - 0x0000)
struct CustomizationScrollBoxUserWidget_K2_UpdateSkinMaterial final
{
public:
	class FString                                 Selected;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CustomizationScrollBoxUserWidget_K2_UpdateSkinMaterial) == 0x000008, "Wrong alignment on CustomizationScrollBoxUserWidget_K2_UpdateSkinMaterial");
static_assert(sizeof(CustomizationScrollBoxUserWidget_K2_UpdateSkinMaterial) == 0x000010, "Wrong size on CustomizationScrollBoxUserWidget_K2_UpdateSkinMaterial");
static_assert(offsetof(CustomizationScrollBoxUserWidget_K2_UpdateSkinMaterial, Selected) == 0x000000, "Member 'CustomizationScrollBoxUserWidget_K2_UpdateSkinMaterial::Selected' has a wrong offset!");

// Function SCT.PartyLobbyWidget.GetDebugPartyMembers
// 0x0010 (0x0010 - 0x0000)
struct PartyLobbyWidget_GetDebugPartyMembers final
{
public:
	TArray<class FString>                         ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(PartyLobbyWidget_GetDebugPartyMembers) == 0x000008, "Wrong alignment on PartyLobbyWidget_GetDebugPartyMembers");
static_assert(sizeof(PartyLobbyWidget_GetDebugPartyMembers) == 0x000010, "Wrong size on PartyLobbyWidget_GetDebugPartyMembers");
static_assert(offsetof(PartyLobbyWidget_GetDebugPartyMembers, ReturnValue) == 0x000000, "Member 'PartyLobbyWidget_GetDebugPartyMembers::ReturnValue' has a wrong offset!");

// Function SCT.PartyLobbyWidget.IsDebugMode
// 0x0001 (0x0001 - 0x0000)
struct PartyLobbyWidget_IsDebugMode final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PartyLobbyWidget_IsDebugMode) == 0x000001, "Wrong alignment on PartyLobbyWidget_IsDebugMode");
static_assert(sizeof(PartyLobbyWidget_IsDebugMode) == 0x000001, "Wrong size on PartyLobbyWidget_IsDebugMode");
static_assert(offsetof(PartyLobbyWidget_IsDebugMode, ReturnValue) == 0x000000, "Member 'PartyLobbyWidget_IsDebugMode::ReturnValue' has a wrong offset!");

// Function SCT.PartyLobbyWidget.OnInviteToParty
// 0x0030 (0x0030 - 0x0000)
struct PartyLobbyWidget_OnInviteToParty final
{
public:
	struct FAccelByteModelsPartyGetInvitedNotice  Notification;                                      // 0x0000(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(PartyLobbyWidget_OnInviteToParty) == 0x000008, "Wrong alignment on PartyLobbyWidget_OnInviteToParty");
static_assert(sizeof(PartyLobbyWidget_OnInviteToParty) == 0x000030, "Wrong size on PartyLobbyWidget_OnInviteToParty");
static_assert(offsetof(PartyLobbyWidget_OnInviteToParty, Notification) == 0x000000, "Member 'PartyLobbyWidget_OnInviteToParty::Notification' has a wrong offset!");

// Function SCT.PartyLobbyWidget.OnJoinParty
// 0x0070 (0x0070 - 0x0000)
struct PartyLobbyWidget_OnJoinParty final
{
public:
	struct FAccelByteModelsPartyJoinResponse      Response;                                          // 0x0000(0x0070)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(PartyLobbyWidget_OnJoinParty) == 0x000008, "Wrong alignment on PartyLobbyWidget_OnJoinParty");
static_assert(sizeof(PartyLobbyWidget_OnJoinParty) == 0x000070, "Wrong size on PartyLobbyWidget_OnJoinParty");
static_assert(offsetof(PartyLobbyWidget_OnJoinParty, Response) == 0x000000, "Member 'PartyLobbyWidget_OnJoinParty::Response' has a wrong offset!");

// Function SCT.PartyLobbyWidget.OnKickedFromParty
// 0x0040 (0x0040 - 0x0000)
struct PartyLobbyWidget_OnKickedFromParty final
{
public:
	struct FAccelByteModelsGotKickedFromPartyNotice Notification;                                      // 0x0000(0x0040)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(PartyLobbyWidget_OnKickedFromParty) == 0x000008, "Wrong alignment on PartyLobbyWidget_OnKickedFromParty");
static_assert(sizeof(PartyLobbyWidget_OnKickedFromParty) == 0x000040, "Wrong size on PartyLobbyWidget_OnKickedFromParty");
static_assert(offsetof(PartyLobbyWidget_OnKickedFromParty, Notification) == 0x000000, "Member 'PartyLobbyWidget_OnKickedFromParty::Notification' has a wrong offset!");

// Function SCT.PartyLobbyWidget.OnLeaveParty
// 0x0040 (0x0040 - 0x0000)
struct PartyLobbyWidget_OnLeaveParty final
{
public:
	struct FAccelByteModelsLeavePartyNotice       Notification;                                      // 0x0000(0x0040)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(PartyLobbyWidget_OnLeaveParty) == 0x000008, "Wrong alignment on PartyLobbyWidget_OnLeaveParty");
static_assert(sizeof(PartyLobbyWidget_OnLeaveParty) == 0x000040, "Wrong size on PartyLobbyWidget_OnLeaveParty");
static_assert(offsetof(PartyLobbyWidget_OnLeaveParty, Notification) == 0x000000, "Member 'PartyLobbyWidget_OnLeaveParty::Notification' has a wrong offset!");

// Function SCT.PartyLobbyWidget.OnNewMemberJoinedParty
// 0x0010 (0x0010 - 0x0000)
struct PartyLobbyWidget_OnNewMemberJoinedParty final
{
public:
	struct FAccelByteModelsPartyJoinNotice        Notification;                                      // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(PartyLobbyWidget_OnNewMemberJoinedParty) == 0x000008, "Wrong alignment on PartyLobbyWidget_OnNewMemberJoinedParty");
static_assert(sizeof(PartyLobbyWidget_OnNewMemberJoinedParty) == 0x000010, "Wrong size on PartyLobbyWidget_OnNewMemberJoinedParty");
static_assert(offsetof(PartyLobbyWidget_OnNewMemberJoinedParty, Notification) == 0x000000, "Member 'PartyLobbyWidget_OnNewMemberJoinedParty::Notification' has a wrong offset!");

// Function SCT.AgendaCoopKillEvent.Call
// 0x0018 (0x0018 - 0x0000)
struct AgendaCoopKillEvent_Call final
{
public:
	class APlayerController*                      Grabber;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class APlayerController*                      Killer;                                            // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class APlayerController*                      Victim;                                            // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AgendaCoopKillEvent_Call) == 0x000008, "Wrong alignment on AgendaCoopKillEvent_Call");
static_assert(sizeof(AgendaCoopKillEvent_Call) == 0x000018, "Wrong size on AgendaCoopKillEvent_Call");
static_assert(offsetof(AgendaCoopKillEvent_Call, Grabber) == 0x000000, "Member 'AgendaCoopKillEvent_Call::Grabber' has a wrong offset!");
static_assert(offsetof(AgendaCoopKillEvent_Call, Killer) == 0x000008, "Member 'AgendaCoopKillEvent_Call::Killer' has a wrong offset!");
static_assert(offsetof(AgendaCoopKillEvent_Call, Victim) == 0x000010, "Member 'AgendaCoopKillEvent_Call::Victim' has a wrong offset!");

// Function SCT.AgendaCoopKillEvent.CallWithWorldContextObject
// 0x0020 (0x0020 - 0x0000)
struct AgendaCoopKillEvent_CallWithWorldContextObject final
{
public:
	class APlayerController*                      Grabber;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class APlayerController*                      Killer;                                            // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class APlayerController*                      Victim;                                            // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 WorldContextObject;                                // 0x0018(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AgendaCoopKillEvent_CallWithWorldContextObject) == 0x000008, "Wrong alignment on AgendaCoopKillEvent_CallWithWorldContextObject");
static_assert(sizeof(AgendaCoopKillEvent_CallWithWorldContextObject) == 0x000020, "Wrong size on AgendaCoopKillEvent_CallWithWorldContextObject");
static_assert(offsetof(AgendaCoopKillEvent_CallWithWorldContextObject, Grabber) == 0x000000, "Member 'AgendaCoopKillEvent_CallWithWorldContextObject::Grabber' has a wrong offset!");
static_assert(offsetof(AgendaCoopKillEvent_CallWithWorldContextObject, Killer) == 0x000008, "Member 'AgendaCoopKillEvent_CallWithWorldContextObject::Killer' has a wrong offset!");
static_assert(offsetof(AgendaCoopKillEvent_CallWithWorldContextObject, Victim) == 0x000010, "Member 'AgendaCoopKillEvent_CallWithWorldContextObject::Victim' has a wrong offset!");
static_assert(offsetof(AgendaCoopKillEvent_CallWithWorldContextObject, WorldContextObject) == 0x000018, "Member 'AgendaCoopKillEvent_CallWithWorldContextObject::WorldContextObject' has a wrong offset!");

// Function SCT.Activateable.Deactivate
// 0x0001 (0x0001 - 0x0000)
struct Activateable_Deactivate final
{
public:
	bool                                          WasCancelled;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Activateable_Deactivate) == 0x000001, "Wrong alignment on Activateable_Deactivate");
static_assert(sizeof(Activateable_Deactivate) == 0x000001, "Wrong size on Activateable_Deactivate");
static_assert(offsetof(Activateable_Deactivate, WasCancelled) == 0x000000, "Member 'Activateable_Deactivate::WasCancelled' has a wrong offset!");

// Function SCT.AgendaControllerEvent.Call
// 0x0008 (0x0008 - 0x0000)
struct AgendaControllerEvent_Call final
{
public:
	class APlayerController*                      Controller;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AgendaControllerEvent_Call) == 0x000008, "Wrong alignment on AgendaControllerEvent_Call");
static_assert(sizeof(AgendaControllerEvent_Call) == 0x000008, "Wrong size on AgendaControllerEvent_Call");
static_assert(offsetof(AgendaControllerEvent_Call, Controller) == 0x000000, "Member 'AgendaControllerEvent_Call::Controller' has a wrong offset!");

// Function SCT.AgendaControllerEvent.CallWithWorldContextObject
// 0x0010 (0x0010 - 0x0000)
struct AgendaControllerEvent_CallWithWorldContextObject final
{
public:
	class APlayerController*                      Controller;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 WorldContextObject;                                // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AgendaControllerEvent_CallWithWorldContextObject) == 0x000008, "Wrong alignment on AgendaControllerEvent_CallWithWorldContextObject");
static_assert(sizeof(AgendaControllerEvent_CallWithWorldContextObject) == 0x000010, "Wrong size on AgendaControllerEvent_CallWithWorldContextObject");
static_assert(offsetof(AgendaControllerEvent_CallWithWorldContextObject, Controller) == 0x000000, "Member 'AgendaControllerEvent_CallWithWorldContextObject::Controller' has a wrong offset!");
static_assert(offsetof(AgendaControllerEvent_CallWithWorldContextObject, WorldContextObject) == 0x000008, "Member 'AgendaControllerEvent_CallWithWorldContextObject::WorldContextObject' has a wrong offset!");

// Function SCT.AgendaControllerPowerEvent.Call
// 0x0010 (0x0010 - 0x0000)
struct AgendaControllerPowerEvent_Call final
{
public:
	class APlayerController*                      Controller;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UPower>                     Power;                                             // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AgendaControllerPowerEvent_Call) == 0x000008, "Wrong alignment on AgendaControllerPowerEvent_Call");
static_assert(sizeof(AgendaControllerPowerEvent_Call) == 0x000010, "Wrong size on AgendaControllerPowerEvent_Call");
static_assert(offsetof(AgendaControllerPowerEvent_Call, Controller) == 0x000000, "Member 'AgendaControllerPowerEvent_Call::Controller' has a wrong offset!");
static_assert(offsetof(AgendaControllerPowerEvent_Call, Power) == 0x000008, "Member 'AgendaControllerPowerEvent_Call::Power' has a wrong offset!");

// Function SCT.AgendaControllerPowerEvent.CallWithWorldContextObject
// 0x0018 (0x0018 - 0x0000)
struct AgendaControllerPowerEvent_CallWithWorldContextObject final
{
public:
	class APlayerController*                      Controller;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UPower>                     Power;                                             // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 WorldContextObject;                                // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AgendaControllerPowerEvent_CallWithWorldContextObject) == 0x000008, "Wrong alignment on AgendaControllerPowerEvent_CallWithWorldContextObject");
static_assert(sizeof(AgendaControllerPowerEvent_CallWithWorldContextObject) == 0x000018, "Wrong size on AgendaControllerPowerEvent_CallWithWorldContextObject");
static_assert(offsetof(AgendaControllerPowerEvent_CallWithWorldContextObject, Controller) == 0x000000, "Member 'AgendaControllerPowerEvent_CallWithWorldContextObject::Controller' has a wrong offset!");
static_assert(offsetof(AgendaControllerPowerEvent_CallWithWorldContextObject, Power) == 0x000008, "Member 'AgendaControllerPowerEvent_CallWithWorldContextObject::Power' has a wrong offset!");
static_assert(offsetof(AgendaControllerPowerEvent_CallWithWorldContextObject, WorldContextObject) == 0x000010, "Member 'AgendaControllerPowerEvent_CallWithWorldContextObject::WorldContextObject' has a wrong offset!");

// Function SCT.AgendaCoopPowerEvent.Call
// 0x0018 (0x0018 - 0x0000)
struct AgendaCoopPowerEvent_Call final
{
public:
	class APlayerController*                      InstigatorController;                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class APlayerController*                      TargetController;                                  // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UPower>                     PowerType;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AgendaCoopPowerEvent_Call) == 0x000008, "Wrong alignment on AgendaCoopPowerEvent_Call");
static_assert(sizeof(AgendaCoopPowerEvent_Call) == 0x000018, "Wrong size on AgendaCoopPowerEvent_Call");
static_assert(offsetof(AgendaCoopPowerEvent_Call, InstigatorController) == 0x000000, "Member 'AgendaCoopPowerEvent_Call::InstigatorController' has a wrong offset!");
static_assert(offsetof(AgendaCoopPowerEvent_Call, TargetController) == 0x000008, "Member 'AgendaCoopPowerEvent_Call::TargetController' has a wrong offset!");
static_assert(offsetof(AgendaCoopPowerEvent_Call, PowerType) == 0x000010, "Member 'AgendaCoopPowerEvent_Call::PowerType' has a wrong offset!");

// Function SCT.AgendaCoopPowerEvent.CallWithWorldContextObject
// 0x0020 (0x0020 - 0x0000)
struct AgendaCoopPowerEvent_CallWithWorldContextObject final
{
public:
	class APlayerController*                      InstigatorController;                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class APlayerController*                      TargetController;                                  // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UPower>                     PowerType;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 WorldContextObject;                                // 0x0018(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AgendaCoopPowerEvent_CallWithWorldContextObject) == 0x000008, "Wrong alignment on AgendaCoopPowerEvent_CallWithWorldContextObject");
static_assert(sizeof(AgendaCoopPowerEvent_CallWithWorldContextObject) == 0x000020, "Wrong size on AgendaCoopPowerEvent_CallWithWorldContextObject");
static_assert(offsetof(AgendaCoopPowerEvent_CallWithWorldContextObject, InstigatorController) == 0x000000, "Member 'AgendaCoopPowerEvent_CallWithWorldContextObject::InstigatorController' has a wrong offset!");
static_assert(offsetof(AgendaCoopPowerEvent_CallWithWorldContextObject, TargetController) == 0x000008, "Member 'AgendaCoopPowerEvent_CallWithWorldContextObject::TargetController' has a wrong offset!");
static_assert(offsetof(AgendaCoopPowerEvent_CallWithWorldContextObject, PowerType) == 0x000010, "Member 'AgendaCoopPowerEvent_CallWithWorldContextObject::PowerType' has a wrong offset!");
static_assert(offsetof(AgendaCoopPowerEvent_CallWithWorldContextObject, WorldContextObject) == 0x000018, "Member 'AgendaCoopPowerEvent_CallWithWorldContextObject::WorldContextObject' has a wrong offset!");

// Function SCT.AgendaObject.SetState
// 0x0001 (0x0001 - 0x0000)
struct AgendaObject_SetState final
{
public:
	EAgendaObjectState                            State;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AgendaObject_SetState) == 0x000001, "Wrong alignment on AgendaObject_SetState");
static_assert(sizeof(AgendaObject_SetState) == 0x000001, "Wrong size on AgendaObject_SetState");
static_assert(offsetof(AgendaObject_SetState, State) == 0x000000, "Member 'AgendaObject_SetState::State' has a wrong offset!");

// Function SCT.AgendaObject.GetDescription
// 0x0010 (0x0010 - 0x0000)
struct AgendaObject_GetDescription final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AgendaObject_GetDescription) == 0x000008, "Wrong alignment on AgendaObject_GetDescription");
static_assert(sizeof(AgendaObject_GetDescription) == 0x000010, "Wrong size on AgendaObject_GetDescription");
static_assert(offsetof(AgendaObject_GetDescription, ReturnValue) == 0x000000, "Member 'AgendaObject_GetDescription::ReturnValue' has a wrong offset!");

// Function SCT.AgendaObject.GetProgression
// 0x0010 (0x0010 - 0x0000)
struct AgendaObject_GetProgression final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AgendaObject_GetProgression) == 0x000008, "Wrong alignment on AgendaObject_GetProgression");
static_assert(sizeof(AgendaObject_GetProgression) == 0x000010, "Wrong size on AgendaObject_GetProgression");
static_assert(offsetof(AgendaObject_GetProgression, ReturnValue) == 0x000000, "Member 'AgendaObject_GetProgression::ReturnValue' has a wrong offset!");

// Function SCT.AgendaObject.GetState
// 0x0001 (0x0001 - 0x0000)
struct AgendaObject_GetState final
{
public:
	EAgendaObjectState                            ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AgendaObject_GetState) == 0x000001, "Wrong alignment on AgendaObject_GetState");
static_assert(sizeof(AgendaObject_GetState) == 0x000001, "Wrong size on AgendaObject_GetState");
static_assert(offsetof(AgendaObject_GetState, ReturnValue) == 0x000000, "Member 'AgendaObject_GetState::ReturnValue' has a wrong offset!");

// Function SCT.AgendaObject.HasFailed
// 0x0001 (0x0001 - 0x0000)
struct AgendaObject_HasFailed final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AgendaObject_HasFailed) == 0x000001, "Wrong alignment on AgendaObject_HasFailed");
static_assert(sizeof(AgendaObject_HasFailed) == 0x000001, "Wrong size on AgendaObject_HasFailed");
static_assert(offsetof(AgendaObject_HasFailed, ReturnValue) == 0x000000, "Member 'AgendaObject_HasFailed::ReturnValue' has a wrong offset!");

// Function SCT.AgendaObject.HasGivenScore
// 0x0001 (0x0001 - 0x0000)
struct AgendaObject_HasGivenScore final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AgendaObject_HasGivenScore) == 0x000001, "Wrong alignment on AgendaObject_HasGivenScore");
static_assert(sizeof(AgendaObject_HasGivenScore) == 0x000001, "Wrong size on AgendaObject_HasGivenScore");
static_assert(offsetof(AgendaObject_HasGivenScore, ReturnValue) == 0x000000, "Member 'AgendaObject_HasGivenScore::ReturnValue' has a wrong offset!");

// Function SCT.AgendaObject.HasSucceeded
// 0x0001 (0x0001 - 0x0000)
struct AgendaObject_HasSucceeded final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AgendaObject_HasSucceeded) == 0x000001, "Wrong alignment on AgendaObject_HasSucceeded");
static_assert(sizeof(AgendaObject_HasSucceeded) == 0x000001, "Wrong size on AgendaObject_HasSucceeded");
static_assert(offsetof(AgendaObject_HasSucceeded, ReturnValue) == 0x000000, "Member 'AgendaObject_HasSucceeded::ReturnValue' has a wrong offset!");

// Function SCT.AgendaObject.IsInProgress
// 0x0001 (0x0001 - 0x0000)
struct AgendaObject_IsInProgress final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AgendaObject_IsInProgress) == 0x000001, "Wrong alignment on AgendaObject_IsInProgress");
static_assert(sizeof(AgendaObject_IsInProgress) == 0x000001, "Wrong size on AgendaObject_IsInProgress");
static_assert(offsetof(AgendaObject_IsInProgress, ReturnValue) == 0x000000, "Member 'AgendaObject_IsInProgress::ReturnValue' has a wrong offset!");

// Function SCT.AsyncTaskAttributeChanged.ListenForAttributeChange
// 0x0048 (0x0048 - 0x0000)
struct AsyncTaskAttributeChanged_ListenForAttributeChange final
{
public:
	class UAbilitySystemComponent*                AbilitySystemComponent_0;                          // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayAttribute                     Attribute;                                         // 0x0008(0x0038)(Parm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAsyncTaskAttributeChanged*             ReturnValue;                                       // 0x0040(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AsyncTaskAttributeChanged_ListenForAttributeChange) == 0x000008, "Wrong alignment on AsyncTaskAttributeChanged_ListenForAttributeChange");
static_assert(sizeof(AsyncTaskAttributeChanged_ListenForAttributeChange) == 0x000048, "Wrong size on AsyncTaskAttributeChanged_ListenForAttributeChange");
static_assert(offsetof(AsyncTaskAttributeChanged_ListenForAttributeChange, AbilitySystemComponent_0) == 0x000000, "Member 'AsyncTaskAttributeChanged_ListenForAttributeChange::AbilitySystemComponent_0' has a wrong offset!");
static_assert(offsetof(AsyncTaskAttributeChanged_ListenForAttributeChange, Attribute) == 0x000008, "Member 'AsyncTaskAttributeChanged_ListenForAttributeChange::Attribute' has a wrong offset!");
static_assert(offsetof(AsyncTaskAttributeChanged_ListenForAttributeChange, ReturnValue) == 0x000040, "Member 'AsyncTaskAttributeChanged_ListenForAttributeChange::ReturnValue' has a wrong offset!");

// Function SCT.AsyncTaskAttributeChanged.ListenForAttributesChange
// 0x0020 (0x0020 - 0x0000)
struct AsyncTaskAttributeChanged_ListenForAttributesChange final
{
public:
	class UAbilitySystemComponent*                AbilitySystemComponent_0;                          // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FGameplayAttribute>             Attributes;                                        // 0x0008(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	class UAsyncTaskAttributeChanged*             ReturnValue;                                       // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AsyncTaskAttributeChanged_ListenForAttributesChange) == 0x000008, "Wrong alignment on AsyncTaskAttributeChanged_ListenForAttributesChange");
static_assert(sizeof(AsyncTaskAttributeChanged_ListenForAttributesChange) == 0x000020, "Wrong size on AsyncTaskAttributeChanged_ListenForAttributesChange");
static_assert(offsetof(AsyncTaskAttributeChanged_ListenForAttributesChange, AbilitySystemComponent_0) == 0x000000, "Member 'AsyncTaskAttributeChanged_ListenForAttributesChange::AbilitySystemComponent_0' has a wrong offset!");
static_assert(offsetof(AsyncTaskAttributeChanged_ListenForAttributesChange, Attributes) == 0x000008, "Member 'AsyncTaskAttributeChanged_ListenForAttributesChange::Attributes' has a wrong offset!");
static_assert(offsetof(AsyncTaskAttributeChanged_ListenForAttributesChange, ReturnValue) == 0x000018, "Member 'AsyncTaskAttributeChanged_ListenForAttributesChange::ReturnValue' has a wrong offset!");

// Function SCT.BlueprintConsolePrivilegeCheckerCallbackProxy.CheckConsoleCommunicationPrivilege
// 0x0018 (0x0018 - 0x0000)
struct BlueprintConsolePrivilegeCheckerCallbackProxy_CheckConsoleCommunicationPrivilege final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class APlayerController*                      InPlayerController;                                // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UBlueprintConsolePrivilegeCheckerCallbackProxy* ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BlueprintConsolePrivilegeCheckerCallbackProxy_CheckConsoleCommunicationPrivilege) == 0x000008, "Wrong alignment on BlueprintConsolePrivilegeCheckerCallbackProxy_CheckConsoleCommunicationPrivilege");
static_assert(sizeof(BlueprintConsolePrivilegeCheckerCallbackProxy_CheckConsoleCommunicationPrivilege) == 0x000018, "Wrong size on BlueprintConsolePrivilegeCheckerCallbackProxy_CheckConsoleCommunicationPrivilege");
static_assert(offsetof(BlueprintConsolePrivilegeCheckerCallbackProxy_CheckConsoleCommunicationPrivilege, WorldContextObject) == 0x000000, "Member 'BlueprintConsolePrivilegeCheckerCallbackProxy_CheckConsoleCommunicationPrivilege::WorldContextObject' has a wrong offset!");
static_assert(offsetof(BlueprintConsolePrivilegeCheckerCallbackProxy_CheckConsoleCommunicationPrivilege, InPlayerController) == 0x000008, "Member 'BlueprintConsolePrivilegeCheckerCallbackProxy_CheckConsoleCommunicationPrivilege::InPlayerController' has a wrong offset!");
static_assert(offsetof(BlueprintConsolePrivilegeCheckerCallbackProxy_CheckConsoleCommunicationPrivilege, ReturnValue) == 0x000010, "Member 'BlueprintConsolePrivilegeCheckerCallbackProxy_CheckConsoleCommunicationPrivilege::ReturnValue' has a wrong offset!");

// Function SCT.BlueprintConsolePrivilegeCheckerCallbackProxy.CheckConsoleCrossplayPrivilege
// 0x0018 (0x0018 - 0x0000)
struct BlueprintConsolePrivilegeCheckerCallbackProxy_CheckConsoleCrossplayPrivilege final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class APlayerController*                      InPlayerController;                                // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UBlueprintConsolePrivilegeCheckerCallbackProxy* ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BlueprintConsolePrivilegeCheckerCallbackProxy_CheckConsoleCrossplayPrivilege) == 0x000008, "Wrong alignment on BlueprintConsolePrivilegeCheckerCallbackProxy_CheckConsoleCrossplayPrivilege");
static_assert(sizeof(BlueprintConsolePrivilegeCheckerCallbackProxy_CheckConsoleCrossplayPrivilege) == 0x000018, "Wrong size on BlueprintConsolePrivilegeCheckerCallbackProxy_CheckConsoleCrossplayPrivilege");
static_assert(offsetof(BlueprintConsolePrivilegeCheckerCallbackProxy_CheckConsoleCrossplayPrivilege, WorldContextObject) == 0x000000, "Member 'BlueprintConsolePrivilegeCheckerCallbackProxy_CheckConsoleCrossplayPrivilege::WorldContextObject' has a wrong offset!");
static_assert(offsetof(BlueprintConsolePrivilegeCheckerCallbackProxy_CheckConsoleCrossplayPrivilege, InPlayerController) == 0x000008, "Member 'BlueprintConsolePrivilegeCheckerCallbackProxy_CheckConsoleCrossplayPrivilege::InPlayerController' has a wrong offset!");
static_assert(offsetof(BlueprintConsolePrivilegeCheckerCallbackProxy_CheckConsoleCrossplayPrivilege, ReturnValue) == 0x000010, "Member 'BlueprintConsolePrivilegeCheckerCallbackProxy_CheckConsoleCrossplayPrivilege::ReturnValue' has a wrong offset!");

// Function SCT.BlueprintConsolePrivilegeCheckerCallbackProxy.CheckConsoleOnlinePrivilege
// 0x0018 (0x0018 - 0x0000)
struct BlueprintConsolePrivilegeCheckerCallbackProxy_CheckConsoleOnlinePrivilege final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class APlayerController*                      InPlayerController;                                // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UBlueprintConsolePrivilegeCheckerCallbackProxy* ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BlueprintConsolePrivilegeCheckerCallbackProxy_CheckConsoleOnlinePrivilege) == 0x000008, "Wrong alignment on BlueprintConsolePrivilegeCheckerCallbackProxy_CheckConsoleOnlinePrivilege");
static_assert(sizeof(BlueprintConsolePrivilegeCheckerCallbackProxy_CheckConsoleOnlinePrivilege) == 0x000018, "Wrong size on BlueprintConsolePrivilegeCheckerCallbackProxy_CheckConsoleOnlinePrivilege");
static_assert(offsetof(BlueprintConsolePrivilegeCheckerCallbackProxy_CheckConsoleOnlinePrivilege, WorldContextObject) == 0x000000, "Member 'BlueprintConsolePrivilegeCheckerCallbackProxy_CheckConsoleOnlinePrivilege::WorldContextObject' has a wrong offset!");
static_assert(offsetof(BlueprintConsolePrivilegeCheckerCallbackProxy_CheckConsoleOnlinePrivilege, InPlayerController) == 0x000008, "Member 'BlueprintConsolePrivilegeCheckerCallbackProxy_CheckConsoleOnlinePrivilege::InPlayerController' has a wrong offset!");
static_assert(offsetof(BlueprintConsolePrivilegeCheckerCallbackProxy_CheckConsoleOnlinePrivilege, ReturnValue) == 0x000010, "Member 'BlueprintConsolePrivilegeCheckerCallbackProxy_CheckConsoleOnlinePrivilege::ReturnValue' has a wrong offset!");

// Function SCT.BlueprintConsoleQueryBlockListCallbackProxy.QueryConsoleBlockList
// 0x0018 (0x0018 - 0x0000)
struct BlueprintConsoleQueryBlockListCallbackProxy_QueryConsoleBlockList final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class APlayerController*                      InPlayerController;                                // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UBlueprintConsoleQueryBlockListCallbackProxy* ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BlueprintConsoleQueryBlockListCallbackProxy_QueryConsoleBlockList) == 0x000008, "Wrong alignment on BlueprintConsoleQueryBlockListCallbackProxy_QueryConsoleBlockList");
static_assert(sizeof(BlueprintConsoleQueryBlockListCallbackProxy_QueryConsoleBlockList) == 0x000018, "Wrong size on BlueprintConsoleQueryBlockListCallbackProxy_QueryConsoleBlockList");
static_assert(offsetof(BlueprintConsoleQueryBlockListCallbackProxy_QueryConsoleBlockList, WorldContextObject) == 0x000000, "Member 'BlueprintConsoleQueryBlockListCallbackProxy_QueryConsoleBlockList::WorldContextObject' has a wrong offset!");
static_assert(offsetof(BlueprintConsoleQueryBlockListCallbackProxy_QueryConsoleBlockList, InPlayerController) == 0x000008, "Member 'BlueprintConsoleQueryBlockListCallbackProxy_QueryConsoleBlockList::InPlayerController' has a wrong offset!");
static_assert(offsetof(BlueprintConsoleQueryBlockListCallbackProxy_QueryConsoleBlockList, ReturnValue) == 0x000010, "Member 'BlueprintConsoleQueryBlockListCallbackProxy_QueryConsoleBlockList::ReturnValue' has a wrong offset!");

// Function SCT.BlueprintFunctionLibrarySCT.AddChildMenuToMenuController
// 0x0030 (0x0030 - 0x0000)
struct BlueprintFunctionLibrarySCT_AddChildMenuToMenuController final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UUserWidget*                            Menu;                                              // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UUserWidget*                            ParentMenu;                                        // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          SetFocus;                                          // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          NonInteractable;                                   // 0x0019(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1A[0x6];                                       // 0x001A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class USCTGameInstance*                       GameInstance;                                      // 0x0020(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPanelSlot*                             ReturnValue;                                       // 0x0028(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BlueprintFunctionLibrarySCT_AddChildMenuToMenuController) == 0x000008, "Wrong alignment on BlueprintFunctionLibrarySCT_AddChildMenuToMenuController");
static_assert(sizeof(BlueprintFunctionLibrarySCT_AddChildMenuToMenuController) == 0x000030, "Wrong size on BlueprintFunctionLibrarySCT_AddChildMenuToMenuController");
static_assert(offsetof(BlueprintFunctionLibrarySCT_AddChildMenuToMenuController, WorldContextObject) == 0x000000, "Member 'BlueprintFunctionLibrarySCT_AddChildMenuToMenuController::WorldContextObject' has a wrong offset!");
static_assert(offsetof(BlueprintFunctionLibrarySCT_AddChildMenuToMenuController, Menu) == 0x000008, "Member 'BlueprintFunctionLibrarySCT_AddChildMenuToMenuController::Menu' has a wrong offset!");
static_assert(offsetof(BlueprintFunctionLibrarySCT_AddChildMenuToMenuController, ParentMenu) == 0x000010, "Member 'BlueprintFunctionLibrarySCT_AddChildMenuToMenuController::ParentMenu' has a wrong offset!");
static_assert(offsetof(BlueprintFunctionLibrarySCT_AddChildMenuToMenuController, SetFocus) == 0x000018, "Member 'BlueprintFunctionLibrarySCT_AddChildMenuToMenuController::SetFocus' has a wrong offset!");
static_assert(offsetof(BlueprintFunctionLibrarySCT_AddChildMenuToMenuController, NonInteractable) == 0x000019, "Member 'BlueprintFunctionLibrarySCT_AddChildMenuToMenuController::NonInteractable' has a wrong offset!");
static_assert(offsetof(BlueprintFunctionLibrarySCT_AddChildMenuToMenuController, GameInstance) == 0x000020, "Member 'BlueprintFunctionLibrarySCT_AddChildMenuToMenuController::GameInstance' has a wrong offset!");
static_assert(offsetof(BlueprintFunctionLibrarySCT_AddChildMenuToMenuController, ReturnValue) == 0x000028, "Member 'BlueprintFunctionLibrarySCT_AddChildMenuToMenuController::ReturnValue' has a wrong offset!");

// Function SCT.BlueprintFunctionLibrarySCT.AddMenuToMenuController
// 0x0020 (0x0020 - 0x0000)
struct BlueprintFunctionLibrarySCT_AddMenuToMenuController final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UUserWidget*                            Menu;                                              // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ZOrder;                                            // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          NonInteractable;                                   // 0x0014(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          SetFocus;                                          // 0x0015(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_16[0x2];                                       // 0x0016(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class USCTGameInstance*                       GameInstance;                                      // 0x0018(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BlueprintFunctionLibrarySCT_AddMenuToMenuController) == 0x000008, "Wrong alignment on BlueprintFunctionLibrarySCT_AddMenuToMenuController");
static_assert(sizeof(BlueprintFunctionLibrarySCT_AddMenuToMenuController) == 0x000020, "Wrong size on BlueprintFunctionLibrarySCT_AddMenuToMenuController");
static_assert(offsetof(BlueprintFunctionLibrarySCT_AddMenuToMenuController, WorldContextObject) == 0x000000, "Member 'BlueprintFunctionLibrarySCT_AddMenuToMenuController::WorldContextObject' has a wrong offset!");
static_assert(offsetof(BlueprintFunctionLibrarySCT_AddMenuToMenuController, Menu) == 0x000008, "Member 'BlueprintFunctionLibrarySCT_AddMenuToMenuController::Menu' has a wrong offset!");
static_assert(offsetof(BlueprintFunctionLibrarySCT_AddMenuToMenuController, ZOrder) == 0x000010, "Member 'BlueprintFunctionLibrarySCT_AddMenuToMenuController::ZOrder' has a wrong offset!");
static_assert(offsetof(BlueprintFunctionLibrarySCT_AddMenuToMenuController, NonInteractable) == 0x000014, "Member 'BlueprintFunctionLibrarySCT_AddMenuToMenuController::NonInteractable' has a wrong offset!");
static_assert(offsetof(BlueprintFunctionLibrarySCT_AddMenuToMenuController, SetFocus) == 0x000015, "Member 'BlueprintFunctionLibrarySCT_AddMenuToMenuController::SetFocus' has a wrong offset!");
static_assert(offsetof(BlueprintFunctionLibrarySCT_AddMenuToMenuController, GameInstance) == 0x000018, "Member 'BlueprintFunctionLibrarySCT_AddMenuToMenuController::GameInstance' has a wrong offset!");

// Function SCT.BlueprintFunctionLibrarySCT.AddWorldOxygenLevel
// 0x0010 (0x0010 - 0x0000)
struct BlueprintFunctionLibrarySCT_AddWorldOxygenLevel final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Value;                                             // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BlueprintFunctionLibrarySCT_AddWorldOxygenLevel) == 0x000008, "Wrong alignment on BlueprintFunctionLibrarySCT_AddWorldOxygenLevel");
static_assert(sizeof(BlueprintFunctionLibrarySCT_AddWorldOxygenLevel) == 0x000010, "Wrong size on BlueprintFunctionLibrarySCT_AddWorldOxygenLevel");
static_assert(offsetof(BlueprintFunctionLibrarySCT_AddWorldOxygenLevel, WorldContextObject) == 0x000000, "Member 'BlueprintFunctionLibrarySCT_AddWorldOxygenLevel::WorldContextObject' has a wrong offset!");
static_assert(offsetof(BlueprintFunctionLibrarySCT_AddWorldOxygenLevel, Value) == 0x000008, "Member 'BlueprintFunctionLibrarySCT_AddWorldOxygenLevel::Value' has a wrong offset!");

// Function SCT.BlueprintFunctionLibrarySCT.BlockModalsDuringEmergencyMeeting
// 0x0008 (0x0008 - 0x0000)
struct BlueprintFunctionLibrarySCT_BlockModalsDuringEmergencyMeeting final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BlueprintFunctionLibrarySCT_BlockModalsDuringEmergencyMeeting) == 0x000008, "Wrong alignment on BlueprintFunctionLibrarySCT_BlockModalsDuringEmergencyMeeting");
static_assert(sizeof(BlueprintFunctionLibrarySCT_BlockModalsDuringEmergencyMeeting) == 0x000008, "Wrong size on BlueprintFunctionLibrarySCT_BlockModalsDuringEmergencyMeeting");
static_assert(offsetof(BlueprintFunctionLibrarySCT_BlockModalsDuringEmergencyMeeting, WorldContextObject) == 0x000000, "Member 'BlueprintFunctionLibrarySCT_BlockModalsDuringEmergencyMeeting::WorldContextObject' has a wrong offset!");

// Function SCT.BlueprintFunctionLibrarySCT.CanReviewPS5Match
// 0x0010 (0x0010 - 0x0000)
struct BlueprintFunctionLibrarySCT_CanReviewPS5Match final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BlueprintFunctionLibrarySCT_CanReviewPS5Match) == 0x000008, "Wrong alignment on BlueprintFunctionLibrarySCT_CanReviewPS5Match");
static_assert(sizeof(BlueprintFunctionLibrarySCT_CanReviewPS5Match) == 0x000010, "Wrong size on BlueprintFunctionLibrarySCT_CanReviewPS5Match");
static_assert(offsetof(BlueprintFunctionLibrarySCT_CanReviewPS5Match, WorldContextObject) == 0x000000, "Member 'BlueprintFunctionLibrarySCT_CanReviewPS5Match::WorldContextObject' has a wrong offset!");
static_assert(offsetof(BlueprintFunctionLibrarySCT_CanReviewPS5Match, ReturnValue) == 0x000008, "Member 'BlueprintFunctionLibrarySCT_CanReviewPS5Match::ReturnValue' has a wrong offset!");

// Function SCT.BlueprintFunctionLibrarySCT.ClearBlockedModalsDuringEmergencyMeeting
// 0x0008 (0x0008 - 0x0000)
struct BlueprintFunctionLibrarySCT_ClearBlockedModalsDuringEmergencyMeeting final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BlueprintFunctionLibrarySCT_ClearBlockedModalsDuringEmergencyMeeting) == 0x000008, "Wrong alignment on BlueprintFunctionLibrarySCT_ClearBlockedModalsDuringEmergencyMeeting");
static_assert(sizeof(BlueprintFunctionLibrarySCT_ClearBlockedModalsDuringEmergencyMeeting) == 0x000008, "Wrong size on BlueprintFunctionLibrarySCT_ClearBlockedModalsDuringEmergencyMeeting");
static_assert(offsetof(BlueprintFunctionLibrarySCT_ClearBlockedModalsDuringEmergencyMeeting, WorldContextObject) == 0x000000, "Member 'BlueprintFunctionLibrarySCT_ClearBlockedModalsDuringEmergencyMeeting::WorldContextObject' has a wrong offset!");

// Function SCT.BlueprintFunctionLibrarySCT.ColorToHex
// 0x0020 (0x0020 - 0x0000)
struct BlueprintFunctionLibrarySCT_ColorToHex final
{
public:
	struct FLinearColor                           Color;                                             // 0x0000(0x0010)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ReturnValue;                                       // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BlueprintFunctionLibrarySCT_ColorToHex) == 0x000008, "Wrong alignment on BlueprintFunctionLibrarySCT_ColorToHex");
static_assert(sizeof(BlueprintFunctionLibrarySCT_ColorToHex) == 0x000020, "Wrong size on BlueprintFunctionLibrarySCT_ColorToHex");
static_assert(offsetof(BlueprintFunctionLibrarySCT_ColorToHex, Color) == 0x000000, "Member 'BlueprintFunctionLibrarySCT_ColorToHex::Color' has a wrong offset!");
static_assert(offsetof(BlueprintFunctionLibrarySCT_ColorToHex, ReturnValue) == 0x000010, "Member 'BlueprintFunctionLibrarySCT_ColorToHex::ReturnValue' has a wrong offset!");

// Function SCT.BlueprintFunctionLibrarySCT.CreateEndData
// 0x0028 (0x0028 - 0x0000)
struct BlueprintFunctionLibrarySCT_CreateEndData final
{
public:
	EEndConditions                                EndCondition;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UPlayerInfoGIS*                         PlayerInfo;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FMatchEndData                          ReturnValue;                                       // 0x0010(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(BlueprintFunctionLibrarySCT_CreateEndData) == 0x000008, "Wrong alignment on BlueprintFunctionLibrarySCT_CreateEndData");
static_assert(sizeof(BlueprintFunctionLibrarySCT_CreateEndData) == 0x000028, "Wrong size on BlueprintFunctionLibrarySCT_CreateEndData");
static_assert(offsetof(BlueprintFunctionLibrarySCT_CreateEndData, EndCondition) == 0x000000, "Member 'BlueprintFunctionLibrarySCT_CreateEndData::EndCondition' has a wrong offset!");
static_assert(offsetof(BlueprintFunctionLibrarySCT_CreateEndData, PlayerInfo) == 0x000008, "Member 'BlueprintFunctionLibrarySCT_CreateEndData::PlayerInfo' has a wrong offset!");
static_assert(offsetof(BlueprintFunctionLibrarySCT_CreateEndData, ReturnValue) == 0x000010, "Member 'BlueprintFunctionLibrarySCT_CreateEndData::ReturnValue' has a wrong offset!");

// Function SCT.BlueprintFunctionLibrarySCT.CreateOrganizedWidget
// 0x0020 (0x0020 - 0x0000)
struct BlueprintFunctionLibrarySCT_CreateOrganizedWidget final
{
public:
	TSubclassOf<class UWidgetSCT>                 WidgetType;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         behaviour;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 WorldContextObject;                                // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UUserWidget*                            ReturnValue;                                       // 0x0018(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BlueprintFunctionLibrarySCT_CreateOrganizedWidget) == 0x000008, "Wrong alignment on BlueprintFunctionLibrarySCT_CreateOrganizedWidget");
static_assert(sizeof(BlueprintFunctionLibrarySCT_CreateOrganizedWidget) == 0x000020, "Wrong size on BlueprintFunctionLibrarySCT_CreateOrganizedWidget");
static_assert(offsetof(BlueprintFunctionLibrarySCT_CreateOrganizedWidget, WidgetType) == 0x000000, "Member 'BlueprintFunctionLibrarySCT_CreateOrganizedWidget::WidgetType' has a wrong offset!");
static_assert(offsetof(BlueprintFunctionLibrarySCT_CreateOrganizedWidget, behaviour) == 0x000008, "Member 'BlueprintFunctionLibrarySCT_CreateOrganizedWidget::behaviour' has a wrong offset!");
static_assert(offsetof(BlueprintFunctionLibrarySCT_CreateOrganizedWidget, WorldContextObject) == 0x000010, "Member 'BlueprintFunctionLibrarySCT_CreateOrganizedWidget::WorldContextObject' has a wrong offset!");
static_assert(offsetof(BlueprintFunctionLibrarySCT_CreateOrganizedWidget, ReturnValue) == 0x000018, "Member 'BlueprintFunctionLibrarySCT_CreateOrganizedWidget::ReturnValue' has a wrong offset!");

// Function SCT.BlueprintFunctionLibrarySCT.CreateShuffledIndexArrayWithSelection
// 0x0020 (0x0020 - 0x0000)
struct BlueprintFunctionLibrarySCT_CreateShuffledIndexArrayWithSelection final
{
public:
	int32                                         Seed;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Count;                                             // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SelectedIndex;                                     // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<int32>                                 ReturnValue;                                       // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(BlueprintFunctionLibrarySCT_CreateShuffledIndexArrayWithSelection) == 0x000008, "Wrong alignment on BlueprintFunctionLibrarySCT_CreateShuffledIndexArrayWithSelection");
static_assert(sizeof(BlueprintFunctionLibrarySCT_CreateShuffledIndexArrayWithSelection) == 0x000020, "Wrong size on BlueprintFunctionLibrarySCT_CreateShuffledIndexArrayWithSelection");
static_assert(offsetof(BlueprintFunctionLibrarySCT_CreateShuffledIndexArrayWithSelection, Seed) == 0x000000, "Member 'BlueprintFunctionLibrarySCT_CreateShuffledIndexArrayWithSelection::Seed' has a wrong offset!");
static_assert(offsetof(BlueprintFunctionLibrarySCT_CreateShuffledIndexArrayWithSelection, Count) == 0x000004, "Member 'BlueprintFunctionLibrarySCT_CreateShuffledIndexArrayWithSelection::Count' has a wrong offset!");
static_assert(offsetof(BlueprintFunctionLibrarySCT_CreateShuffledIndexArrayWithSelection, SelectedIndex) == 0x000008, "Member 'BlueprintFunctionLibrarySCT_CreateShuffledIndexArrayWithSelection::SelectedIndex' has a wrong offset!");
static_assert(offsetof(BlueprintFunctionLibrarySCT_CreateShuffledIndexArrayWithSelection, ReturnValue) == 0x000010, "Member 'BlueprintFunctionLibrarySCT_CreateShuffledIndexArrayWithSelection::ReturnValue' has a wrong offset!");

// Function SCT.BlueprintFunctionLibrarySCT.DisableLocalCharacterMovementBriefly
// 0x0008 (0x0008 - 0x0000)
struct BlueprintFunctionLibrarySCT_DisableLocalCharacterMovementBriefly final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BlueprintFunctionLibrarySCT_DisableLocalCharacterMovementBriefly) == 0x000008, "Wrong alignment on BlueprintFunctionLibrarySCT_DisableLocalCharacterMovementBriefly");
static_assert(sizeof(BlueprintFunctionLibrarySCT_DisableLocalCharacterMovementBriefly) == 0x000008, "Wrong size on BlueprintFunctionLibrarySCT_DisableLocalCharacterMovementBriefly");
static_assert(offsetof(BlueprintFunctionLibrarySCT_DisableLocalCharacterMovementBriefly, WorldContextObject) == 0x000000, "Member 'BlueprintFunctionLibrarySCT_DisableLocalCharacterMovementBriefly::WorldContextObject' has a wrong offset!");

// Function SCT.BlueprintFunctionLibrarySCT.GetAgendaProgressionColor
// 0x0030 (0x0030 - 0x0000)
struct BlueprintFunctionLibrarySCT_GetAgendaProgressionColor final
{
public:
	EAgendaObjectState                            State;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSlateColor                            ReturnValue;                                       // 0x0008(0x0028)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(BlueprintFunctionLibrarySCT_GetAgendaProgressionColor) == 0x000008, "Wrong alignment on BlueprintFunctionLibrarySCT_GetAgendaProgressionColor");
static_assert(sizeof(BlueprintFunctionLibrarySCT_GetAgendaProgressionColor) == 0x000030, "Wrong size on BlueprintFunctionLibrarySCT_GetAgendaProgressionColor");
static_assert(offsetof(BlueprintFunctionLibrarySCT_GetAgendaProgressionColor, State) == 0x000000, "Member 'BlueprintFunctionLibrarySCT_GetAgendaProgressionColor::State' has a wrong offset!");
static_assert(offsetof(BlueprintFunctionLibrarySCT_GetAgendaProgressionColor, ReturnValue) == 0x000008, "Member 'BlueprintFunctionLibrarySCT_GetAgendaProgressionColor::ReturnValue' has a wrong offset!");

// Function SCT.BlueprintFunctionLibrarySCT.GetColoredCharacterText
// 0x0020 (0x0020 - 0x0000)
struct BlueprintFunctionLibrarySCT_GetColoredCharacterText final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PlayerId;                                          // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ReturnValue;                                       // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BlueprintFunctionLibrarySCT_GetColoredCharacterText) == 0x000008, "Wrong alignment on BlueprintFunctionLibrarySCT_GetColoredCharacterText");
static_assert(sizeof(BlueprintFunctionLibrarySCT_GetColoredCharacterText) == 0x000020, "Wrong size on BlueprintFunctionLibrarySCT_GetColoredCharacterText");
static_assert(offsetof(BlueprintFunctionLibrarySCT_GetColoredCharacterText, WorldContextObject) == 0x000000, "Member 'BlueprintFunctionLibrarySCT_GetColoredCharacterText::WorldContextObject' has a wrong offset!");
static_assert(offsetof(BlueprintFunctionLibrarySCT_GetColoredCharacterText, PlayerId) == 0x000008, "Member 'BlueprintFunctionLibrarySCT_GetColoredCharacterText::PlayerId' has a wrong offset!");
static_assert(offsetof(BlueprintFunctionLibrarySCT_GetColoredCharacterText, ReturnValue) == 0x000010, "Member 'BlueprintFunctionLibrarySCT_GetColoredCharacterText::ReturnValue' has a wrong offset!");

// Function SCT.BlueprintFunctionLibrarySCT.GetControllerConnectionState
// 0x0018 (0x0018 - 0x0000)
struct BlueprintFunctionLibrarySCT_GetControllerConnectionState final
{
public:
	class APlayerController*                      InPlayerController;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          OutConnected;                                      // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         OutControllerID;                                   // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BlueprintFunctionLibrarySCT_GetControllerConnectionState) == 0x000008, "Wrong alignment on BlueprintFunctionLibrarySCT_GetControllerConnectionState");
static_assert(sizeof(BlueprintFunctionLibrarySCT_GetControllerConnectionState) == 0x000018, "Wrong size on BlueprintFunctionLibrarySCT_GetControllerConnectionState");
static_assert(offsetof(BlueprintFunctionLibrarySCT_GetControllerConnectionState, InPlayerController) == 0x000000, "Member 'BlueprintFunctionLibrarySCT_GetControllerConnectionState::InPlayerController' has a wrong offset!");
static_assert(offsetof(BlueprintFunctionLibrarySCT_GetControllerConnectionState, OutConnected) == 0x000008, "Member 'BlueprintFunctionLibrarySCT_GetControllerConnectionState::OutConnected' has a wrong offset!");
static_assert(offsetof(BlueprintFunctionLibrarySCT_GetControllerConnectionState, OutControllerID) == 0x00000C, "Member 'BlueprintFunctionLibrarySCT_GetControllerConnectionState::OutControllerID' has a wrong offset!");
static_assert(offsetof(BlueprintFunctionLibrarySCT_GetControllerConnectionState, ReturnValue) == 0x000010, "Member 'BlueprintFunctionLibrarySCT_GetControllerConnectionState::ReturnValue' has a wrong offset!");

// Function SCT.BlueprintFunctionLibrarySCT.GetDeathEffectDetails
// 0x0038 (0x0038 - 0x0000)
struct BlueprintFunctionLibrarySCT_GetDeathEffectDetails final
{
public:
	struct FGameplayEffectSpecHandle              Handle;                                            // 0x0000(0x0010)(Parm, NativeAccessSpecifierPublic)
	struct FDeathEffectDetails                    ReturnValue;                                       // 0x0010(0x0028)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(BlueprintFunctionLibrarySCT_GetDeathEffectDetails) == 0x000008, "Wrong alignment on BlueprintFunctionLibrarySCT_GetDeathEffectDetails");
static_assert(sizeof(BlueprintFunctionLibrarySCT_GetDeathEffectDetails) == 0x000038, "Wrong size on BlueprintFunctionLibrarySCT_GetDeathEffectDetails");
static_assert(offsetof(BlueprintFunctionLibrarySCT_GetDeathEffectDetails, Handle) == 0x000000, "Member 'BlueprintFunctionLibrarySCT_GetDeathEffectDetails::Handle' has a wrong offset!");
static_assert(offsetof(BlueprintFunctionLibrarySCT_GetDeathEffectDetails, ReturnValue) == 0x000010, "Member 'BlueprintFunctionLibrarySCT_GetDeathEffectDetails::ReturnValue' has a wrong offset!");

// Function SCT.BlueprintFunctionLibrarySCT.GetExecutionSource
// 0x00F8 (0x00F8 - 0x0000)
struct BlueprintFunctionLibrarySCT_GetExecutionSource final
{
public:
	struct FGameplayEffectCustomExecutionParameters ExecutionParams;                                   // 0x0000(0x00F0)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class UAbilitySystemComponent*                ReturnValue;                                       // 0x00F0(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BlueprintFunctionLibrarySCT_GetExecutionSource) == 0x000008, "Wrong alignment on BlueprintFunctionLibrarySCT_GetExecutionSource");
static_assert(sizeof(BlueprintFunctionLibrarySCT_GetExecutionSource) == 0x0000F8, "Wrong size on BlueprintFunctionLibrarySCT_GetExecutionSource");
static_assert(offsetof(BlueprintFunctionLibrarySCT_GetExecutionSource, ExecutionParams) == 0x000000, "Member 'BlueprintFunctionLibrarySCT_GetExecutionSource::ExecutionParams' has a wrong offset!");
static_assert(offsetof(BlueprintFunctionLibrarySCT_GetExecutionSource, ReturnValue) == 0x0000F0, "Member 'BlueprintFunctionLibrarySCT_GetExecutionSource::ReturnValue' has a wrong offset!");

// Function SCT.BlueprintFunctionLibrarySCT.GetExecutionTarget
// 0x00F8 (0x00F8 - 0x0000)
struct BlueprintFunctionLibrarySCT_GetExecutionTarget final
{
public:
	struct FGameplayEffectCustomExecutionParameters ExecutionParams;                                   // 0x0000(0x00F0)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class UAbilitySystemComponent*                ReturnValue;                                       // 0x00F0(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BlueprintFunctionLibrarySCT_GetExecutionTarget) == 0x000008, "Wrong alignment on BlueprintFunctionLibrarySCT_GetExecutionTarget");
static_assert(sizeof(BlueprintFunctionLibrarySCT_GetExecutionTarget) == 0x0000F8, "Wrong size on BlueprintFunctionLibrarySCT_GetExecutionTarget");
static_assert(offsetof(BlueprintFunctionLibrarySCT_GetExecutionTarget, ExecutionParams) == 0x000000, "Member 'BlueprintFunctionLibrarySCT_GetExecutionTarget::ExecutionParams' has a wrong offset!");
static_assert(offsetof(BlueprintFunctionLibrarySCT_GetExecutionTarget, ReturnValue) == 0x0000F0, "Member 'BlueprintFunctionLibrarySCT_GetExecutionTarget::ReturnValue' has a wrong offset!");

// Function SCT.BlueprintFunctionLibrarySCT.GetFilterdHighestFromActorToIntMap
// 0x00A8 (0x00A8 - 0x0000)
struct BlueprintFunctionLibrarySCT_GetFilterdHighestFromActorToIntMap final
{
public:
	TMap<class AActor*, int32>                    UnfilteredActorToInt;                              // 0x0000(0x0050)(Parm, NativeAccessSpecifierPublic)
	bool                                          DuplicateFound;                                    // 0x0050(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_51[0x7];                                       // 0x0051(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<class AActor*, int32>                    OutFilteredActorToInt;                             // 0x0058(0x0050)(Parm, OutParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(BlueprintFunctionLibrarySCT_GetFilterdHighestFromActorToIntMap) == 0x000008, "Wrong alignment on BlueprintFunctionLibrarySCT_GetFilterdHighestFromActorToIntMap");
static_assert(sizeof(BlueprintFunctionLibrarySCT_GetFilterdHighestFromActorToIntMap) == 0x0000A8, "Wrong size on BlueprintFunctionLibrarySCT_GetFilterdHighestFromActorToIntMap");
static_assert(offsetof(BlueprintFunctionLibrarySCT_GetFilterdHighestFromActorToIntMap, UnfilteredActorToInt) == 0x000000, "Member 'BlueprintFunctionLibrarySCT_GetFilterdHighestFromActorToIntMap::UnfilteredActorToInt' has a wrong offset!");
static_assert(offsetof(BlueprintFunctionLibrarySCT_GetFilterdHighestFromActorToIntMap, DuplicateFound) == 0x000050, "Member 'BlueprintFunctionLibrarySCT_GetFilterdHighestFromActorToIntMap::DuplicateFound' has a wrong offset!");
static_assert(offsetof(BlueprintFunctionLibrarySCT_GetFilterdHighestFromActorToIntMap, OutFilteredActorToInt) == 0x000058, "Member 'BlueprintFunctionLibrarySCT_GetFilterdHighestFromActorToIntMap::OutFilteredActorToInt' has a wrong offset!");

// Function SCT.BlueprintFunctionLibrarySCT.GetGlobalObject
// 0x0018 (0x0018 - 0x0000)
struct BlueprintFunctionLibrarySCT_GetGlobalObject final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UObject>                    ObjectType;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UObject*                                ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BlueprintFunctionLibrarySCT_GetGlobalObject) == 0x000008, "Wrong alignment on BlueprintFunctionLibrarySCT_GetGlobalObject");
static_assert(sizeof(BlueprintFunctionLibrarySCT_GetGlobalObject) == 0x000018, "Wrong size on BlueprintFunctionLibrarySCT_GetGlobalObject");
static_assert(offsetof(BlueprintFunctionLibrarySCT_GetGlobalObject, WorldContextObject) == 0x000000, "Member 'BlueprintFunctionLibrarySCT_GetGlobalObject::WorldContextObject' has a wrong offset!");
static_assert(offsetof(BlueprintFunctionLibrarySCT_GetGlobalObject, ObjectType) == 0x000008, "Member 'BlueprintFunctionLibrarySCT_GetGlobalObject::ObjectType' has a wrong offset!");
static_assert(offsetof(BlueprintFunctionLibrarySCT_GetGlobalObject, ReturnValue) == 0x000010, "Member 'BlueprintFunctionLibrarySCT_GetGlobalObject::ReturnValue' has a wrong offset!");

// Function SCT.BlueprintFunctionLibrarySCT.GetIntermediateLevelsFromProjectSettings
// 0x0050 (0x0050 - 0x0000)
struct BlueprintFunctionLibrarySCT_GetIntermediateLevelsFromProjectSettings final
{
public:
	TMap<int32, class FString>                    Levels;                                            // 0x0000(0x0050)(Parm, OutParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(BlueprintFunctionLibrarySCT_GetIntermediateLevelsFromProjectSettings) == 0x000008, "Wrong alignment on BlueprintFunctionLibrarySCT_GetIntermediateLevelsFromProjectSettings");
static_assert(sizeof(BlueprintFunctionLibrarySCT_GetIntermediateLevelsFromProjectSettings) == 0x000050, "Wrong size on BlueprintFunctionLibrarySCT_GetIntermediateLevelsFromProjectSettings");
static_assert(offsetof(BlueprintFunctionLibrarySCT_GetIntermediateLevelsFromProjectSettings, Levels) == 0x000000, "Member 'BlueprintFunctionLibrarySCT_GetIntermediateLevelsFromProjectSettings::Levels' has a wrong offset!");

// Function SCT.BlueprintFunctionLibrarySCT.GetKeyFromCharacterInput
// 0x0038 (0x0038 - 0x0000)
struct BlueprintFunctionLibrarySCT_GetKeyFromCharacterInput final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ECharacterInput                               Input;                                             // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FInputActionKeyMapping                 ReturnValue;                                       // 0x0010(0x0028)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(BlueprintFunctionLibrarySCT_GetKeyFromCharacterInput) == 0x000008, "Wrong alignment on BlueprintFunctionLibrarySCT_GetKeyFromCharacterInput");
static_assert(sizeof(BlueprintFunctionLibrarySCT_GetKeyFromCharacterInput) == 0x000038, "Wrong size on BlueprintFunctionLibrarySCT_GetKeyFromCharacterInput");
static_assert(offsetof(BlueprintFunctionLibrarySCT_GetKeyFromCharacterInput, WorldContextObject) == 0x000000, "Member 'BlueprintFunctionLibrarySCT_GetKeyFromCharacterInput::WorldContextObject' has a wrong offset!");
static_assert(offsetof(BlueprintFunctionLibrarySCT_GetKeyFromCharacterInput, Input) == 0x000008, "Member 'BlueprintFunctionLibrarySCT_GetKeyFromCharacterInput::Input' has a wrong offset!");
static_assert(offsetof(BlueprintFunctionLibrarySCT_GetKeyFromCharacterInput, ReturnValue) == 0x000010, "Member 'BlueprintFunctionLibrarySCT_GetKeyFromCharacterInput::ReturnValue' has a wrong offset!");

// Function SCT.BlueprintFunctionLibrarySCT.GetLastControllerType
// 0x0010 (0x0010 - 0x0000)
struct BlueprintFunctionLibrarySCT_GetLastControllerType final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESCTControllerType                            ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BlueprintFunctionLibrarySCT_GetLastControllerType) == 0x000008, "Wrong alignment on BlueprintFunctionLibrarySCT_GetLastControllerType");
static_assert(sizeof(BlueprintFunctionLibrarySCT_GetLastControllerType) == 0x000010, "Wrong size on BlueprintFunctionLibrarySCT_GetLastControllerType");
static_assert(offsetof(BlueprintFunctionLibrarySCT_GetLastControllerType, WorldContextObject) == 0x000000, "Member 'BlueprintFunctionLibrarySCT_GetLastControllerType::WorldContextObject' has a wrong offset!");
static_assert(offsetof(BlueprintFunctionLibrarySCT_GetLastControllerType, ReturnValue) == 0x000008, "Member 'BlueprintFunctionLibrarySCT_GetLastControllerType::ReturnValue' has a wrong offset!");

// Function SCT.BlueprintFunctionLibrarySCT.GetLevelVoteData
// 0x0010 (0x0010 - 0x0000)
struct BlueprintFunctionLibrarySCT_GetLevelVoteData final
{
public:
	TArray<struct FLevelVoteData>                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(BlueprintFunctionLibrarySCT_GetLevelVoteData) == 0x000008, "Wrong alignment on BlueprintFunctionLibrarySCT_GetLevelVoteData");
static_assert(sizeof(BlueprintFunctionLibrarySCT_GetLevelVoteData) == 0x000010, "Wrong size on BlueprintFunctionLibrarySCT_GetLevelVoteData");
static_assert(offsetof(BlueprintFunctionLibrarySCT_GetLevelVoteData, ReturnValue) == 0x000000, "Member 'BlueprintFunctionLibrarySCT_GetLevelVoteData::ReturnValue' has a wrong offset!");

// Function SCT.BlueprintFunctionLibrarySCT.GetLevelVoteManager
// 0x0010 (0x0010 - 0x0000)
struct BlueprintFunctionLibrarySCT_GetLevelVoteManager final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ULevelVoteComponent*                    ReturnValue;                                       // 0x0008(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BlueprintFunctionLibrarySCT_GetLevelVoteManager) == 0x000008, "Wrong alignment on BlueprintFunctionLibrarySCT_GetLevelVoteManager");
static_assert(sizeof(BlueprintFunctionLibrarySCT_GetLevelVoteManager) == 0x000010, "Wrong size on BlueprintFunctionLibrarySCT_GetLevelVoteManager");
static_assert(offsetof(BlueprintFunctionLibrarySCT_GetLevelVoteManager, WorldContextObject) == 0x000000, "Member 'BlueprintFunctionLibrarySCT_GetLevelVoteManager::WorldContextObject' has a wrong offset!");
static_assert(offsetof(BlueprintFunctionLibrarySCT_GetLevelVoteManager, ReturnValue) == 0x000008, "Member 'BlueprintFunctionLibrarySCT_GetLevelVoteManager::ReturnValue' has a wrong offset!");

// Function SCT.BlueprintFunctionLibrarySCT.GetLoadingScreenTexture
// 0x0018 (0x0018 - 0x0000)
struct BlueprintFunctionLibrarySCT_GetLoadingScreenTexture final
{
public:
	class FString                                 TargetLevelURL;                                    // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTexture2D*                             ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BlueprintFunctionLibrarySCT_GetLoadingScreenTexture) == 0x000008, "Wrong alignment on BlueprintFunctionLibrarySCT_GetLoadingScreenTexture");
static_assert(sizeof(BlueprintFunctionLibrarySCT_GetLoadingScreenTexture) == 0x000018, "Wrong size on BlueprintFunctionLibrarySCT_GetLoadingScreenTexture");
static_assert(offsetof(BlueprintFunctionLibrarySCT_GetLoadingScreenTexture, TargetLevelURL) == 0x000000, "Member 'BlueprintFunctionLibrarySCT_GetLoadingScreenTexture::TargetLevelURL' has a wrong offset!");
static_assert(offsetof(BlueprintFunctionLibrarySCT_GetLoadingScreenTexture, ReturnValue) == 0x000010, "Member 'BlueprintFunctionLibrarySCT_GetLoadingScreenTexture::ReturnValue' has a wrong offset!");

// Function SCT.BlueprintFunctionLibrarySCT.GetLocalSkillcheckController
// 0x0010 (0x0010 - 0x0000)
struct BlueprintFunctionLibrarySCT_GetLocalSkillcheckController final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USkillcheckController*                  ReturnValue;                                       // 0x0008(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BlueprintFunctionLibrarySCT_GetLocalSkillcheckController) == 0x000008, "Wrong alignment on BlueprintFunctionLibrarySCT_GetLocalSkillcheckController");
static_assert(sizeof(BlueprintFunctionLibrarySCT_GetLocalSkillcheckController) == 0x000010, "Wrong size on BlueprintFunctionLibrarySCT_GetLocalSkillcheckController");
static_assert(offsetof(BlueprintFunctionLibrarySCT_GetLocalSkillcheckController, WorldContextObject) == 0x000000, "Member 'BlueprintFunctionLibrarySCT_GetLocalSkillcheckController::WorldContextObject' has a wrong offset!");
static_assert(offsetof(BlueprintFunctionLibrarySCT_GetLocalSkillcheckController, ReturnValue) == 0x000008, "Member 'BlueprintFunctionLibrarySCT_GetLocalSkillcheckController::ReturnValue' has a wrong offset!");

// Function SCT.BlueprintFunctionLibrarySCT.GetMainMenuPlayerController
// 0x0010 (0x0010 - 0x0000)
struct BlueprintFunctionLibrarySCT_GetMainMenuPlayerController final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AClientEntryPC*                         ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BlueprintFunctionLibrarySCT_GetMainMenuPlayerController) == 0x000008, "Wrong alignment on BlueprintFunctionLibrarySCT_GetMainMenuPlayerController");
static_assert(sizeof(BlueprintFunctionLibrarySCT_GetMainMenuPlayerController) == 0x000010, "Wrong size on BlueprintFunctionLibrarySCT_GetMainMenuPlayerController");
static_assert(offsetof(BlueprintFunctionLibrarySCT_GetMainMenuPlayerController, WorldContextObject) == 0x000000, "Member 'BlueprintFunctionLibrarySCT_GetMainMenuPlayerController::WorldContextObject' has a wrong offset!");
static_assert(offsetof(BlueprintFunctionLibrarySCT_GetMainMenuPlayerController, ReturnValue) == 0x000008, "Member 'BlueprintFunctionLibrarySCT_GetMainMenuPlayerController::ReturnValue' has a wrong offset!");

// Function SCT.BlueprintFunctionLibrarySCT.GetMaxOxygen
// 0x0010 (0x0010 - 0x0000)
struct BlueprintFunctionLibrarySCT_GetMaxOxygen final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BlueprintFunctionLibrarySCT_GetMaxOxygen) == 0x000008, "Wrong alignment on BlueprintFunctionLibrarySCT_GetMaxOxygen");
static_assert(sizeof(BlueprintFunctionLibrarySCT_GetMaxOxygen) == 0x000010, "Wrong size on BlueprintFunctionLibrarySCT_GetMaxOxygen");
static_assert(offsetof(BlueprintFunctionLibrarySCT_GetMaxOxygen, WorldContextObject) == 0x000000, "Member 'BlueprintFunctionLibrarySCT_GetMaxOxygen::WorldContextObject' has a wrong offset!");
static_assert(offsetof(BlueprintFunctionLibrarySCT_GetMaxOxygen, ReturnValue) == 0x000008, "Member 'BlueprintFunctionLibrarySCT_GetMaxOxygen::ReturnValue' has a wrong offset!");

// Function SCT.BlueprintFunctionLibrarySCT.GetNumberOfPersonoids
// 0x0010 (0x0010 - 0x0000)
struct BlueprintFunctionLibrarySCT_GetNumberOfPersonoids final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BlueprintFunctionLibrarySCT_GetNumberOfPersonoids) == 0x000008, "Wrong alignment on BlueprintFunctionLibrarySCT_GetNumberOfPersonoids");
static_assert(sizeof(BlueprintFunctionLibrarySCT_GetNumberOfPersonoids) == 0x000010, "Wrong size on BlueprintFunctionLibrarySCT_GetNumberOfPersonoids");
static_assert(offsetof(BlueprintFunctionLibrarySCT_GetNumberOfPersonoids, WorldContextObject) == 0x000000, "Member 'BlueprintFunctionLibrarySCT_GetNumberOfPersonoids::WorldContextObject' has a wrong offset!");
static_assert(offsetof(BlueprintFunctionLibrarySCT_GetNumberOfPersonoids, ReturnValue) == 0x000008, "Member 'BlueprintFunctionLibrarySCT_GetNumberOfPersonoids::ReturnValue' has a wrong offset!");

// Function SCT.BlueprintFunctionLibrarySCT.GetNumberOfResidents
// 0x0010 (0x0010 - 0x0000)
struct BlueprintFunctionLibrarySCT_GetNumberOfResidents final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BlueprintFunctionLibrarySCT_GetNumberOfResidents) == 0x000008, "Wrong alignment on BlueprintFunctionLibrarySCT_GetNumberOfResidents");
static_assert(sizeof(BlueprintFunctionLibrarySCT_GetNumberOfResidents) == 0x000010, "Wrong size on BlueprintFunctionLibrarySCT_GetNumberOfResidents");
static_assert(offsetof(BlueprintFunctionLibrarySCT_GetNumberOfResidents, WorldContextObject) == 0x000000, "Member 'BlueprintFunctionLibrarySCT_GetNumberOfResidents::WorldContextObject' has a wrong offset!");
static_assert(offsetof(BlueprintFunctionLibrarySCT_GetNumberOfResidents, ReturnValue) == 0x000008, "Member 'BlueprintFunctionLibrarySCT_GetNumberOfResidents::ReturnValue' has a wrong offset!");

// Function SCT.BlueprintFunctionLibrarySCT.GetPlayerController
// 0x0018 (0x0018 - 0x0000)
struct BlueprintFunctionLibrarySCT_GetPlayerController final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          PrintError;                                        // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ASCTPlayerController*                   ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BlueprintFunctionLibrarySCT_GetPlayerController) == 0x000008, "Wrong alignment on BlueprintFunctionLibrarySCT_GetPlayerController");
static_assert(sizeof(BlueprintFunctionLibrarySCT_GetPlayerController) == 0x000018, "Wrong size on BlueprintFunctionLibrarySCT_GetPlayerController");
static_assert(offsetof(BlueprintFunctionLibrarySCT_GetPlayerController, Actor) == 0x000000, "Member 'BlueprintFunctionLibrarySCT_GetPlayerController::Actor' has a wrong offset!");
static_assert(offsetof(BlueprintFunctionLibrarySCT_GetPlayerController, PrintError) == 0x000008, "Member 'BlueprintFunctionLibrarySCT_GetPlayerController::PrintError' has a wrong offset!");
static_assert(offsetof(BlueprintFunctionLibrarySCT_GetPlayerController, ReturnValue) == 0x000010, "Member 'BlueprintFunctionLibrarySCT_GetPlayerController::ReturnValue' has a wrong offset!");

// Function SCT.BlueprintFunctionLibrarySCT.GetPlayerFaction
// 0x0010 (0x0010 - 0x0000)
struct BlueprintFunctionLibrarySCT_GetPlayerFaction final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PlayerId;                                          // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPlayerFaction                                ReturnValue;                                       // 0x000C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BlueprintFunctionLibrarySCT_GetPlayerFaction) == 0x000008, "Wrong alignment on BlueprintFunctionLibrarySCT_GetPlayerFaction");
static_assert(sizeof(BlueprintFunctionLibrarySCT_GetPlayerFaction) == 0x000010, "Wrong size on BlueprintFunctionLibrarySCT_GetPlayerFaction");
static_assert(offsetof(BlueprintFunctionLibrarySCT_GetPlayerFaction, WorldContextObject) == 0x000000, "Member 'BlueprintFunctionLibrarySCT_GetPlayerFaction::WorldContextObject' has a wrong offset!");
static_assert(offsetof(BlueprintFunctionLibrarySCT_GetPlayerFaction, PlayerId) == 0x000008, "Member 'BlueprintFunctionLibrarySCT_GetPlayerFaction::PlayerId' has a wrong offset!");
static_assert(offsetof(BlueprintFunctionLibrarySCT_GetPlayerFaction, ReturnValue) == 0x00000C, "Member 'BlueprintFunctionLibrarySCT_GetPlayerFaction::ReturnValue' has a wrong offset!");

// Function SCT.BlueprintFunctionLibrarySCT.GetProjectVersionHumanReadableName
// 0x0010 (0x0010 - 0x0000)
struct BlueprintFunctionLibrarySCT_GetProjectVersionHumanReadableName final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BlueprintFunctionLibrarySCT_GetProjectVersionHumanReadableName) == 0x000008, "Wrong alignment on BlueprintFunctionLibrarySCT_GetProjectVersionHumanReadableName");
static_assert(sizeof(BlueprintFunctionLibrarySCT_GetProjectVersionHumanReadableName) == 0x000010, "Wrong size on BlueprintFunctionLibrarySCT_GetProjectVersionHumanReadableName");
static_assert(offsetof(BlueprintFunctionLibrarySCT_GetProjectVersionHumanReadableName, ReturnValue) == 0x000000, "Member 'BlueprintFunctionLibrarySCT_GetProjectVersionHumanReadableName::ReturnValue' has a wrong offset!");

// Function SCT.BlueprintFunctionLibrarySCT.GetSelfFaction
// 0x0010 (0x0010 - 0x0000)
struct BlueprintFunctionLibrarySCT_GetSelfFaction final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPlayerFaction                                ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BlueprintFunctionLibrarySCT_GetSelfFaction) == 0x000008, "Wrong alignment on BlueprintFunctionLibrarySCT_GetSelfFaction");
static_assert(sizeof(BlueprintFunctionLibrarySCT_GetSelfFaction) == 0x000010, "Wrong size on BlueprintFunctionLibrarySCT_GetSelfFaction");
static_assert(offsetof(BlueprintFunctionLibrarySCT_GetSelfFaction, WorldContextObject) == 0x000000, "Member 'BlueprintFunctionLibrarySCT_GetSelfFaction::WorldContextObject' has a wrong offset!");
static_assert(offsetof(BlueprintFunctionLibrarySCT_GetSelfFaction, ReturnValue) == 0x000008, "Member 'BlueprintFunctionLibrarySCT_GetSelfFaction::ReturnValue' has a wrong offset!");

// Function SCT.BlueprintFunctionLibrarySCT.GetSteamAvatarFromPlayerID
// 0x0018 (0x0018 - 0x0000)
struct BlueprintFunctionLibrarySCT_GetSteamAvatarFromPlayerID final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PlayerId;                                          // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UTexture2D*                             ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BlueprintFunctionLibrarySCT_GetSteamAvatarFromPlayerID) == 0x000008, "Wrong alignment on BlueprintFunctionLibrarySCT_GetSteamAvatarFromPlayerID");
static_assert(sizeof(BlueprintFunctionLibrarySCT_GetSteamAvatarFromPlayerID) == 0x000018, "Wrong size on BlueprintFunctionLibrarySCT_GetSteamAvatarFromPlayerID");
static_assert(offsetof(BlueprintFunctionLibrarySCT_GetSteamAvatarFromPlayerID, WorldContextObject) == 0x000000, "Member 'BlueprintFunctionLibrarySCT_GetSteamAvatarFromPlayerID::WorldContextObject' has a wrong offset!");
static_assert(offsetof(BlueprintFunctionLibrarySCT_GetSteamAvatarFromPlayerID, PlayerId) == 0x000008, "Member 'BlueprintFunctionLibrarySCT_GetSteamAvatarFromPlayerID::PlayerId' has a wrong offset!");
static_assert(offsetof(BlueprintFunctionLibrarySCT_GetSteamAvatarFromPlayerID, ReturnValue) == 0x000010, "Member 'BlueprintFunctionLibrarySCT_GetSteamAvatarFromPlayerID::ReturnValue' has a wrong offset!");

// Function SCT.BlueprintFunctionLibrarySCT.GetSteamAvatarFromPlayerState
// 0x0018 (0x0018 - 0x0000)
struct BlueprintFunctionLibrarySCT_GetSteamAvatarFromPlayerState final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class ASCTPlayerState*                  PlayerState;                                       // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTexture2D*                             ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BlueprintFunctionLibrarySCT_GetSteamAvatarFromPlayerState) == 0x000008, "Wrong alignment on BlueprintFunctionLibrarySCT_GetSteamAvatarFromPlayerState");
static_assert(sizeof(BlueprintFunctionLibrarySCT_GetSteamAvatarFromPlayerState) == 0x000018, "Wrong size on BlueprintFunctionLibrarySCT_GetSteamAvatarFromPlayerState");
static_assert(offsetof(BlueprintFunctionLibrarySCT_GetSteamAvatarFromPlayerState, WorldContextObject) == 0x000000, "Member 'BlueprintFunctionLibrarySCT_GetSteamAvatarFromPlayerState::WorldContextObject' has a wrong offset!");
static_assert(offsetof(BlueprintFunctionLibrarySCT_GetSteamAvatarFromPlayerState, PlayerState) == 0x000008, "Member 'BlueprintFunctionLibrarySCT_GetSteamAvatarFromPlayerState::PlayerState' has a wrong offset!");
static_assert(offsetof(BlueprintFunctionLibrarySCT_GetSteamAvatarFromPlayerState, ReturnValue) == 0x000010, "Member 'BlueprintFunctionLibrarySCT_GetSteamAvatarFromPlayerState::ReturnValue' has a wrong offset!");

// Function SCT.BlueprintFunctionLibrarySCT.GetSteamAvatarFromSteamID
// 0x0020 (0x0020 - 0x0000)
struct BlueprintFunctionLibrarySCT_GetSteamAvatarFromSteamID final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 SteamID;                                           // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTexture2D*                             ReturnValue;                                       // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BlueprintFunctionLibrarySCT_GetSteamAvatarFromSteamID) == 0x000008, "Wrong alignment on BlueprintFunctionLibrarySCT_GetSteamAvatarFromSteamID");
static_assert(sizeof(BlueprintFunctionLibrarySCT_GetSteamAvatarFromSteamID) == 0x000020, "Wrong size on BlueprintFunctionLibrarySCT_GetSteamAvatarFromSteamID");
static_assert(offsetof(BlueprintFunctionLibrarySCT_GetSteamAvatarFromSteamID, WorldContextObject) == 0x000000, "Member 'BlueprintFunctionLibrarySCT_GetSteamAvatarFromSteamID::WorldContextObject' has a wrong offset!");
static_assert(offsetof(BlueprintFunctionLibrarySCT_GetSteamAvatarFromSteamID, SteamID) == 0x000008, "Member 'BlueprintFunctionLibrarySCT_GetSteamAvatarFromSteamID::SteamID' has a wrong offset!");
static_assert(offsetof(BlueprintFunctionLibrarySCT_GetSteamAvatarFromSteamID, ReturnValue) == 0x000018, "Member 'BlueprintFunctionLibrarySCT_GetSteamAvatarFromSteamID::ReturnValue' has a wrong offset!");

// Function SCT.BlueprintFunctionLibrarySCT.GetTimeUntilFullyDrained
// 0x0010 (0x0010 - 0x0000)
struct BlueprintFunctionLibrarySCT_GetTimeUntilFullyDrained final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BlueprintFunctionLibrarySCT_GetTimeUntilFullyDrained) == 0x000008, "Wrong alignment on BlueprintFunctionLibrarySCT_GetTimeUntilFullyDrained");
static_assert(sizeof(BlueprintFunctionLibrarySCT_GetTimeUntilFullyDrained) == 0x000010, "Wrong size on BlueprintFunctionLibrarySCT_GetTimeUntilFullyDrained");
static_assert(offsetof(BlueprintFunctionLibrarySCT_GetTimeUntilFullyDrained, WorldContextObject) == 0x000000, "Member 'BlueprintFunctionLibrarySCT_GetTimeUntilFullyDrained::WorldContextObject' has a wrong offset!");
static_assert(offsetof(BlueprintFunctionLibrarySCT_GetTimeUntilFullyDrained, ReturnValue) == 0x000008, "Member 'BlueprintFunctionLibrarySCT_GetTimeUntilFullyDrained::ReturnValue' has a wrong offset!");

// Function SCT.BlueprintFunctionLibrarySCT.GetWidgetOrganizer
// 0x0010 (0x0010 - 0x0000)
struct BlueprintFunctionLibrarySCT_GetWidgetOrganizer final
{
public:
	class AActor*                                 WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UWidgetOrganizer*                       ReturnValue;                                       // 0x0008(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BlueprintFunctionLibrarySCT_GetWidgetOrganizer) == 0x000008, "Wrong alignment on BlueprintFunctionLibrarySCT_GetWidgetOrganizer");
static_assert(sizeof(BlueprintFunctionLibrarySCT_GetWidgetOrganizer) == 0x000010, "Wrong size on BlueprintFunctionLibrarySCT_GetWidgetOrganizer");
static_assert(offsetof(BlueprintFunctionLibrarySCT_GetWidgetOrganizer, WorldContextObject) == 0x000000, "Member 'BlueprintFunctionLibrarySCT_GetWidgetOrganizer::WorldContextObject' has a wrong offset!");
static_assert(offsetof(BlueprintFunctionLibrarySCT_GetWidgetOrganizer, ReturnValue) == 0x000008, "Member 'BlueprintFunctionLibrarySCT_GetWidgetOrganizer::ReturnValue' has a wrong offset!");

// Function SCT.BlueprintFunctionLibrarySCT.GetWolrdOxygenPercent
// 0x0010 (0x0010 - 0x0000)
struct BlueprintFunctionLibrarySCT_GetWolrdOxygenPercent final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BlueprintFunctionLibrarySCT_GetWolrdOxygenPercent) == 0x000008, "Wrong alignment on BlueprintFunctionLibrarySCT_GetWolrdOxygenPercent");
static_assert(sizeof(BlueprintFunctionLibrarySCT_GetWolrdOxygenPercent) == 0x000010, "Wrong size on BlueprintFunctionLibrarySCT_GetWolrdOxygenPercent");
static_assert(offsetof(BlueprintFunctionLibrarySCT_GetWolrdOxygenPercent, WorldContextObject) == 0x000000, "Member 'BlueprintFunctionLibrarySCT_GetWolrdOxygenPercent::WorldContextObject' has a wrong offset!");
static_assert(offsetof(BlueprintFunctionLibrarySCT_GetWolrdOxygenPercent, ReturnValue) == 0x000008, "Member 'BlueprintFunctionLibrarySCT_GetWolrdOxygenPercent::ReturnValue' has a wrong offset!");

// Function SCT.BlueprintFunctionLibrarySCT.GetWorldOxygenLevel
// 0x0010 (0x0010 - 0x0000)
struct BlueprintFunctionLibrarySCT_GetWorldOxygenLevel final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BlueprintFunctionLibrarySCT_GetWorldOxygenLevel) == 0x000008, "Wrong alignment on BlueprintFunctionLibrarySCT_GetWorldOxygenLevel");
static_assert(sizeof(BlueprintFunctionLibrarySCT_GetWorldOxygenLevel) == 0x000010, "Wrong size on BlueprintFunctionLibrarySCT_GetWorldOxygenLevel");
static_assert(offsetof(BlueprintFunctionLibrarySCT_GetWorldOxygenLevel, WorldContextObject) == 0x000000, "Member 'BlueprintFunctionLibrarySCT_GetWorldOxygenLevel::WorldContextObject' has a wrong offset!");
static_assert(offsetof(BlueprintFunctionLibrarySCT_GetWorldOxygenLevel, ReturnValue) == 0x000008, "Member 'BlueprintFunctionLibrarySCT_GetWorldOxygenLevel::ReturnValue' has a wrong offset!");

// Function SCT.BlueprintFunctionLibrarySCT.GetWorldSettingsSCT
// 0x0010 (0x0010 - 0x0000)
struct BlueprintFunctionLibrarySCT_GetWorldSettingsSCT final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AWorldSettingsSCT*                      ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BlueprintFunctionLibrarySCT_GetWorldSettingsSCT) == 0x000008, "Wrong alignment on BlueprintFunctionLibrarySCT_GetWorldSettingsSCT");
static_assert(sizeof(BlueprintFunctionLibrarySCT_GetWorldSettingsSCT) == 0x000010, "Wrong size on BlueprintFunctionLibrarySCT_GetWorldSettingsSCT");
static_assert(offsetof(BlueprintFunctionLibrarySCT_GetWorldSettingsSCT, WorldContextObject) == 0x000000, "Member 'BlueprintFunctionLibrarySCT_GetWorldSettingsSCT::WorldContextObject' has a wrong offset!");
static_assert(offsetof(BlueprintFunctionLibrarySCT_GetWorldSettingsSCT, ReturnValue) == 0x000008, "Member 'BlueprintFunctionLibrarySCT_GetWorldSettingsSCT::ReturnValue' has a wrong offset!");

// Function SCT.BlueprintFunctionLibrarySCT.HasReplicatedLocalPlayerStateSCT
// 0x0010 (0x0010 - 0x0000)
struct BlueprintFunctionLibrarySCT_HasReplicatedLocalPlayerStateSCT final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BlueprintFunctionLibrarySCT_HasReplicatedLocalPlayerStateSCT) == 0x000008, "Wrong alignment on BlueprintFunctionLibrarySCT_HasReplicatedLocalPlayerStateSCT");
static_assert(sizeof(BlueprintFunctionLibrarySCT_HasReplicatedLocalPlayerStateSCT) == 0x000010, "Wrong size on BlueprintFunctionLibrarySCT_HasReplicatedLocalPlayerStateSCT");
static_assert(offsetof(BlueprintFunctionLibrarySCT_HasReplicatedLocalPlayerStateSCT, WorldContextObject) == 0x000000, "Member 'BlueprintFunctionLibrarySCT_HasReplicatedLocalPlayerStateSCT::WorldContextObject' has a wrong offset!");
static_assert(offsetof(BlueprintFunctionLibrarySCT_HasReplicatedLocalPlayerStateSCT, ReturnValue) == 0x000008, "Member 'BlueprintFunctionLibrarySCT_HasReplicatedLocalPlayerStateSCT::ReturnValue' has a wrong offset!");

// Function SCT.BlueprintFunctionLibrarySCT.HasWorldOxygen
// 0x0010 (0x0010 - 0x0000)
struct BlueprintFunctionLibrarySCT_HasWorldOxygen final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BlueprintFunctionLibrarySCT_HasWorldOxygen) == 0x000008, "Wrong alignment on BlueprintFunctionLibrarySCT_HasWorldOxygen");
static_assert(sizeof(BlueprintFunctionLibrarySCT_HasWorldOxygen) == 0x000010, "Wrong size on BlueprintFunctionLibrarySCT_HasWorldOxygen");
static_assert(offsetof(BlueprintFunctionLibrarySCT_HasWorldOxygen, WorldContextObject) == 0x000000, "Member 'BlueprintFunctionLibrarySCT_HasWorldOxygen::WorldContextObject' has a wrong offset!");
static_assert(offsetof(BlueprintFunctionLibrarySCT_HasWorldOxygen, ReturnValue) == 0x000008, "Member 'BlueprintFunctionLibrarySCT_HasWorldOxygen::ReturnValue' has a wrong offset!");

// Function SCT.BlueprintFunctionLibrarySCT.IDToPlayerState
// 0x0018 (0x0018 - 0x0000)
struct BlueprintFunctionLibrarySCT_IDToPlayerState final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PlayerId;                                          // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ASCTPlayerState*                        ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BlueprintFunctionLibrarySCT_IDToPlayerState) == 0x000008, "Wrong alignment on BlueprintFunctionLibrarySCT_IDToPlayerState");
static_assert(sizeof(BlueprintFunctionLibrarySCT_IDToPlayerState) == 0x000018, "Wrong size on BlueprintFunctionLibrarySCT_IDToPlayerState");
static_assert(offsetof(BlueprintFunctionLibrarySCT_IDToPlayerState, WorldContextObject) == 0x000000, "Member 'BlueprintFunctionLibrarySCT_IDToPlayerState::WorldContextObject' has a wrong offset!");
static_assert(offsetof(BlueprintFunctionLibrarySCT_IDToPlayerState, PlayerId) == 0x000008, "Member 'BlueprintFunctionLibrarySCT_IDToPlayerState::PlayerId' has a wrong offset!");
static_assert(offsetof(BlueprintFunctionLibrarySCT_IDToPlayerState, ReturnValue) == 0x000010, "Member 'BlueprintFunctionLibrarySCT_IDToPlayerState::ReturnValue' has a wrong offset!");

// Function SCT.BlueprintFunctionLibrarySCT.InitialLoadComplete
// 0x0018 (0x0018 - 0x0000)
struct BlueprintFunctionLibrarySCT_InitialLoadComplete final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USCTGameInstance*                       GameInstance;                                      // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BlueprintFunctionLibrarySCT_InitialLoadComplete) == 0x000008, "Wrong alignment on BlueprintFunctionLibrarySCT_InitialLoadComplete");
static_assert(sizeof(BlueprintFunctionLibrarySCT_InitialLoadComplete) == 0x000018, "Wrong size on BlueprintFunctionLibrarySCT_InitialLoadComplete");
static_assert(offsetof(BlueprintFunctionLibrarySCT_InitialLoadComplete, WorldContextObject) == 0x000000, "Member 'BlueprintFunctionLibrarySCT_InitialLoadComplete::WorldContextObject' has a wrong offset!");
static_assert(offsetof(BlueprintFunctionLibrarySCT_InitialLoadComplete, GameInstance) == 0x000008, "Member 'BlueprintFunctionLibrarySCT_InitialLoadComplete::GameInstance' has a wrong offset!");
static_assert(offsetof(BlueprintFunctionLibrarySCT_InitialLoadComplete, ReturnValue) == 0x000010, "Member 'BlueprintFunctionLibrarySCT_InitialLoadComplete::ReturnValue' has a wrong offset!");

// Function SCT.BlueprintFunctionLibrarySCT.IntegerToHex
// 0x0018 (0x0018 - 0x0000)
struct BlueprintFunctionLibrarySCT_IntegerToHex final
{
public:
	int32                                         Value;                                             // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MinDigits;                                         // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BlueprintFunctionLibrarySCT_IntegerToHex) == 0x000008, "Wrong alignment on BlueprintFunctionLibrarySCT_IntegerToHex");
static_assert(sizeof(BlueprintFunctionLibrarySCT_IntegerToHex) == 0x000018, "Wrong size on BlueprintFunctionLibrarySCT_IntegerToHex");
static_assert(offsetof(BlueprintFunctionLibrarySCT_IntegerToHex, Value) == 0x000000, "Member 'BlueprintFunctionLibrarySCT_IntegerToHex::Value' has a wrong offset!");
static_assert(offsetof(BlueprintFunctionLibrarySCT_IntegerToHex, MinDigits) == 0x000004, "Member 'BlueprintFunctionLibrarySCT_IntegerToHex::MinDigits' has a wrong offset!");
static_assert(offsetof(BlueprintFunctionLibrarySCT_IntegerToHex, ReturnValue) == 0x000008, "Member 'BlueprintFunctionLibrarySCT_IntegerToHex::ReturnValue' has a wrong offset!");

// Function SCT.BlueprintFunctionLibrarySCT.IsAlive
// 0x0002 (0x0002 - 0x0000)
struct BlueprintFunctionLibrarySCT_IsAlive final
{
public:
	EFate                                         Fate;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BlueprintFunctionLibrarySCT_IsAlive) == 0x000001, "Wrong alignment on BlueprintFunctionLibrarySCT_IsAlive");
static_assert(sizeof(BlueprintFunctionLibrarySCT_IsAlive) == 0x000002, "Wrong size on BlueprintFunctionLibrarySCT_IsAlive");
static_assert(offsetof(BlueprintFunctionLibrarySCT_IsAlive, Fate) == 0x000000, "Member 'BlueprintFunctionLibrarySCT_IsAlive::Fate' has a wrong offset!");
static_assert(offsetof(BlueprintFunctionLibrarySCT_IsAlive, ReturnValue) == 0x000001, "Member 'BlueprintFunctionLibrarySCT_IsAlive::ReturnValue' has a wrong offset!");

// Function SCT.BlueprintFunctionLibrarySCT.IsPlayerPersonoid
// 0x0010 (0x0010 - 0x0000)
struct BlueprintFunctionLibrarySCT_IsPlayerPersonoid final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PlayerId;                                          // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x000C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BlueprintFunctionLibrarySCT_IsPlayerPersonoid) == 0x000008, "Wrong alignment on BlueprintFunctionLibrarySCT_IsPlayerPersonoid");
static_assert(sizeof(BlueprintFunctionLibrarySCT_IsPlayerPersonoid) == 0x000010, "Wrong size on BlueprintFunctionLibrarySCT_IsPlayerPersonoid");
static_assert(offsetof(BlueprintFunctionLibrarySCT_IsPlayerPersonoid, WorldContextObject) == 0x000000, "Member 'BlueprintFunctionLibrarySCT_IsPlayerPersonoid::WorldContextObject' has a wrong offset!");
static_assert(offsetof(BlueprintFunctionLibrarySCT_IsPlayerPersonoid, PlayerId) == 0x000008, "Member 'BlueprintFunctionLibrarySCT_IsPlayerPersonoid::PlayerId' has a wrong offset!");
static_assert(offsetof(BlueprintFunctionLibrarySCT_IsPlayerPersonoid, ReturnValue) == 0x00000C, "Member 'BlueprintFunctionLibrarySCT_IsPlayerPersonoid::ReturnValue' has a wrong offset!");

// Function SCT.BlueprintFunctionLibrarySCT.IsPlayerResident
// 0x0010 (0x0010 - 0x0000)
struct BlueprintFunctionLibrarySCT_IsPlayerResident final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PlayerId;                                          // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x000C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BlueprintFunctionLibrarySCT_IsPlayerResident) == 0x000008, "Wrong alignment on BlueprintFunctionLibrarySCT_IsPlayerResident");
static_assert(sizeof(BlueprintFunctionLibrarySCT_IsPlayerResident) == 0x000010, "Wrong size on BlueprintFunctionLibrarySCT_IsPlayerResident");
static_assert(offsetof(BlueprintFunctionLibrarySCT_IsPlayerResident, WorldContextObject) == 0x000000, "Member 'BlueprintFunctionLibrarySCT_IsPlayerResident::WorldContextObject' has a wrong offset!");
static_assert(offsetof(BlueprintFunctionLibrarySCT_IsPlayerResident, PlayerId) == 0x000008, "Member 'BlueprintFunctionLibrarySCT_IsPlayerResident::PlayerId' has a wrong offset!");
static_assert(offsetof(BlueprintFunctionLibrarySCT_IsPlayerResident, ReturnValue) == 0x00000C, "Member 'BlueprintFunctionLibrarySCT_IsPlayerResident::ReturnValue' has a wrong offset!");

// Function SCT.BlueprintFunctionLibrarySCT.IsSelfPersonoid
// 0x0010 (0x0010 - 0x0000)
struct BlueprintFunctionLibrarySCT_IsSelfPersonoid final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BlueprintFunctionLibrarySCT_IsSelfPersonoid) == 0x000008, "Wrong alignment on BlueprintFunctionLibrarySCT_IsSelfPersonoid");
static_assert(sizeof(BlueprintFunctionLibrarySCT_IsSelfPersonoid) == 0x000010, "Wrong size on BlueprintFunctionLibrarySCT_IsSelfPersonoid");
static_assert(offsetof(BlueprintFunctionLibrarySCT_IsSelfPersonoid, WorldContextObject) == 0x000000, "Member 'BlueprintFunctionLibrarySCT_IsSelfPersonoid::WorldContextObject' has a wrong offset!");
static_assert(offsetof(BlueprintFunctionLibrarySCT_IsSelfPersonoid, ReturnValue) == 0x000008, "Member 'BlueprintFunctionLibrarySCT_IsSelfPersonoid::ReturnValue' has a wrong offset!");

// Function SCT.BlueprintFunctionLibrarySCT.IsSelfResident
// 0x0010 (0x0010 - 0x0000)
struct BlueprintFunctionLibrarySCT_IsSelfResident final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BlueprintFunctionLibrarySCT_IsSelfResident) == 0x000008, "Wrong alignment on BlueprintFunctionLibrarySCT_IsSelfResident");
static_assert(sizeof(BlueprintFunctionLibrarySCT_IsSelfResident) == 0x000010, "Wrong size on BlueprintFunctionLibrarySCT_IsSelfResident");
static_assert(offsetof(BlueprintFunctionLibrarySCT_IsSelfResident, WorldContextObject) == 0x000000, "Member 'BlueprintFunctionLibrarySCT_IsSelfResident::WorldContextObject' has a wrong offset!");
static_assert(offsetof(BlueprintFunctionLibrarySCT_IsSelfResident, ReturnValue) == 0x000008, "Member 'BlueprintFunctionLibrarySCT_IsSelfResident::ReturnValue' has a wrong offset!");

// Function SCT.BlueprintFunctionLibrarySCT.IsUsingControllerOnPC
// 0x0010 (0x0010 - 0x0000)
struct BlueprintFunctionLibrarySCT_IsUsingControllerOnPC final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BlueprintFunctionLibrarySCT_IsUsingControllerOnPC) == 0x000008, "Wrong alignment on BlueprintFunctionLibrarySCT_IsUsingControllerOnPC");
static_assert(sizeof(BlueprintFunctionLibrarySCT_IsUsingControllerOnPC) == 0x000010, "Wrong size on BlueprintFunctionLibrarySCT_IsUsingControllerOnPC");
static_assert(offsetof(BlueprintFunctionLibrarySCT_IsUsingControllerOnPC, WorldContextObject) == 0x000000, "Member 'BlueprintFunctionLibrarySCT_IsUsingControllerOnPC::WorldContextObject' has a wrong offset!");
static_assert(offsetof(BlueprintFunctionLibrarySCT_IsUsingControllerOnPC, ReturnValue) == 0x000008, "Member 'BlueprintFunctionLibrarySCT_IsUsingControllerOnPC::ReturnValue' has a wrong offset!");

// Function SCT.BlueprintFunctionLibrarySCT.IsValidPlayerID
// 0x0008 (0x0008 - 0x0000)
struct BlueprintFunctionLibrarySCT_IsValidPlayerID final
{
public:
	int32                                         PlayerId;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BlueprintFunctionLibrarySCT_IsValidPlayerID) == 0x000004, "Wrong alignment on BlueprintFunctionLibrarySCT_IsValidPlayerID");
static_assert(sizeof(BlueprintFunctionLibrarySCT_IsValidPlayerID) == 0x000008, "Wrong size on BlueprintFunctionLibrarySCT_IsValidPlayerID");
static_assert(offsetof(BlueprintFunctionLibrarySCT_IsValidPlayerID, PlayerId) == 0x000000, "Member 'BlueprintFunctionLibrarySCT_IsValidPlayerID::PlayerId' has a wrong offset!");
static_assert(offsetof(BlueprintFunctionLibrarySCT_IsValidPlayerID, ReturnValue) == 0x000004, "Member 'BlueprintFunctionLibrarySCT_IsValidPlayerID::ReturnValue' has a wrong offset!");

// Function SCT.BlueprintFunctionLibrarySCT.IsWidgetInActiveMenu
// 0x0018 (0x0018 - 0x0000)
struct BlueprintFunctionLibrarySCT_IsWidgetInActiveMenu final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UWidget*                                Widget;                                            // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BlueprintFunctionLibrarySCT_IsWidgetInActiveMenu) == 0x000008, "Wrong alignment on BlueprintFunctionLibrarySCT_IsWidgetInActiveMenu");
static_assert(sizeof(BlueprintFunctionLibrarySCT_IsWidgetInActiveMenu) == 0x000018, "Wrong size on BlueprintFunctionLibrarySCT_IsWidgetInActiveMenu");
static_assert(offsetof(BlueprintFunctionLibrarySCT_IsWidgetInActiveMenu, WorldContextObject) == 0x000000, "Member 'BlueprintFunctionLibrarySCT_IsWidgetInActiveMenu::WorldContextObject' has a wrong offset!");
static_assert(offsetof(BlueprintFunctionLibrarySCT_IsWidgetInActiveMenu, Widget) == 0x000008, "Member 'BlueprintFunctionLibrarySCT_IsWidgetInActiveMenu::Widget' has a wrong offset!");
static_assert(offsetof(BlueprintFunctionLibrarySCT_IsWidgetInActiveMenu, ReturnValue) == 0x000010, "Member 'BlueprintFunctionLibrarySCT_IsWidgetInActiveMenu::ReturnValue' has a wrong offset!");

// Function SCT.BlueprintFunctionLibrarySCT.IsWidgetInAnyMenu
// 0x0018 (0x0018 - 0x0000)
struct BlueprintFunctionLibrarySCT_IsWidgetInAnyMenu final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UWidget*                                Widget;                                            // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BlueprintFunctionLibrarySCT_IsWidgetInAnyMenu) == 0x000008, "Wrong alignment on BlueprintFunctionLibrarySCT_IsWidgetInAnyMenu");
static_assert(sizeof(BlueprintFunctionLibrarySCT_IsWidgetInAnyMenu) == 0x000018, "Wrong size on BlueprintFunctionLibrarySCT_IsWidgetInAnyMenu");
static_assert(offsetof(BlueprintFunctionLibrarySCT_IsWidgetInAnyMenu, WorldContextObject) == 0x000000, "Member 'BlueprintFunctionLibrarySCT_IsWidgetInAnyMenu::WorldContextObject' has a wrong offset!");
static_assert(offsetof(BlueprintFunctionLibrarySCT_IsWidgetInAnyMenu, Widget) == 0x000008, "Member 'BlueprintFunctionLibrarySCT_IsWidgetInAnyMenu::Widget' has a wrong offset!");
static_assert(offsetof(BlueprintFunctionLibrarySCT_IsWidgetInAnyMenu, ReturnValue) == 0x000010, "Member 'BlueprintFunctionLibrarySCT_IsWidgetInAnyMenu::ReturnValue' has a wrong offset!");

// Function SCT.BlueprintFunctionLibrarySCT.KeyToText
// 0x0030 (0x0030 - 0x0000)
struct BlueprintFunctionLibrarySCT_KeyToText final
{
public:
	struct FKey                                   Key;                                               // 0x0000(0x0018)(Parm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   ReturnValue;                                       // 0x0018(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(BlueprintFunctionLibrarySCT_KeyToText) == 0x000008, "Wrong alignment on BlueprintFunctionLibrarySCT_KeyToText");
static_assert(sizeof(BlueprintFunctionLibrarySCT_KeyToText) == 0x000030, "Wrong size on BlueprintFunctionLibrarySCT_KeyToText");
static_assert(offsetof(BlueprintFunctionLibrarySCT_KeyToText, Key) == 0x000000, "Member 'BlueprintFunctionLibrarySCT_KeyToText::Key' has a wrong offset!");
static_assert(offsetof(BlueprintFunctionLibrarySCT_KeyToText, ReturnValue) == 0x000018, "Member 'BlueprintFunctionLibrarySCT_KeyToText::ReturnValue' has a wrong offset!");

// Function SCT.BlueprintFunctionLibrarySCT.LoadGame
// 0x0028 (0x0028 - 0x0000)
struct BlueprintFunctionLibrarySCT_LoadGame final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 SlotName;                                          // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USCTGameInstance*                       GameInstance;                                      // 0x0018(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USaveGame*                              ReturnValue;                                       // 0x0020(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BlueprintFunctionLibrarySCT_LoadGame) == 0x000008, "Wrong alignment on BlueprintFunctionLibrarySCT_LoadGame");
static_assert(sizeof(BlueprintFunctionLibrarySCT_LoadGame) == 0x000028, "Wrong size on BlueprintFunctionLibrarySCT_LoadGame");
static_assert(offsetof(BlueprintFunctionLibrarySCT_LoadGame, WorldContextObject) == 0x000000, "Member 'BlueprintFunctionLibrarySCT_LoadGame::WorldContextObject' has a wrong offset!");
static_assert(offsetof(BlueprintFunctionLibrarySCT_LoadGame, SlotName) == 0x000008, "Member 'BlueprintFunctionLibrarySCT_LoadGame::SlotName' has a wrong offset!");
static_assert(offsetof(BlueprintFunctionLibrarySCT_LoadGame, GameInstance) == 0x000018, "Member 'BlueprintFunctionLibrarySCT_LoadGame::GameInstance' has a wrong offset!");
static_assert(offsetof(BlueprintFunctionLibrarySCT_LoadGame, ReturnValue) == 0x000020, "Member 'BlueprintFunctionLibrarySCT_LoadGame::ReturnValue' has a wrong offset!");

// Function SCT.BlueprintFunctionLibrarySCT.RemoveBlockedModalsDuringEmergencyMeeting
// 0x0008 (0x0008 - 0x0000)
struct BlueprintFunctionLibrarySCT_RemoveBlockedModalsDuringEmergencyMeeting final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BlueprintFunctionLibrarySCT_RemoveBlockedModalsDuringEmergencyMeeting) == 0x000008, "Wrong alignment on BlueprintFunctionLibrarySCT_RemoveBlockedModalsDuringEmergencyMeeting");
static_assert(sizeof(BlueprintFunctionLibrarySCT_RemoveBlockedModalsDuringEmergencyMeeting) == 0x000008, "Wrong size on BlueprintFunctionLibrarySCT_RemoveBlockedModalsDuringEmergencyMeeting");
static_assert(offsetof(BlueprintFunctionLibrarySCT_RemoveBlockedModalsDuringEmergencyMeeting, WorldContextObject) == 0x000000, "Member 'BlueprintFunctionLibrarySCT_RemoveBlockedModalsDuringEmergencyMeeting::WorldContextObject' has a wrong offset!");

// Function SCT.BlueprintFunctionLibrarySCT.RemoveMenuFromMenuController
// 0x0018 (0x0018 - 0x0000)
struct BlueprintFunctionLibrarySCT_RemoveMenuFromMenuController final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UUserWidget*                            Menu;                                              // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USCTGameInstance*                       GameInstance;                                      // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BlueprintFunctionLibrarySCT_RemoveMenuFromMenuController) == 0x000008, "Wrong alignment on BlueprintFunctionLibrarySCT_RemoveMenuFromMenuController");
static_assert(sizeof(BlueprintFunctionLibrarySCT_RemoveMenuFromMenuController) == 0x000018, "Wrong size on BlueprintFunctionLibrarySCT_RemoveMenuFromMenuController");
static_assert(offsetof(BlueprintFunctionLibrarySCT_RemoveMenuFromMenuController, WorldContextObject) == 0x000000, "Member 'BlueprintFunctionLibrarySCT_RemoveMenuFromMenuController::WorldContextObject' has a wrong offset!");
static_assert(offsetof(BlueprintFunctionLibrarySCT_RemoveMenuFromMenuController, Menu) == 0x000008, "Member 'BlueprintFunctionLibrarySCT_RemoveMenuFromMenuController::Menu' has a wrong offset!");
static_assert(offsetof(BlueprintFunctionLibrarySCT_RemoveMenuFromMenuController, GameInstance) == 0x000010, "Member 'BlueprintFunctionLibrarySCT_RemoveMenuFromMenuController::GameInstance' has a wrong offset!");

// Function SCT.BlueprintFunctionLibrarySCT.ResetWorldOxygenLevel
// 0x0008 (0x0008 - 0x0000)
struct BlueprintFunctionLibrarySCT_ResetWorldOxygenLevel final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BlueprintFunctionLibrarySCT_ResetWorldOxygenLevel) == 0x000008, "Wrong alignment on BlueprintFunctionLibrarySCT_ResetWorldOxygenLevel");
static_assert(sizeof(BlueprintFunctionLibrarySCT_ResetWorldOxygenLevel) == 0x000008, "Wrong size on BlueprintFunctionLibrarySCT_ResetWorldOxygenLevel");
static_assert(offsetof(BlueprintFunctionLibrarySCT_ResetWorldOxygenLevel, WorldContextObject) == 0x000000, "Member 'BlueprintFunctionLibrarySCT_ResetWorldOxygenLevel::WorldContextObject' has a wrong offset!");

// Function SCT.BlueprintFunctionLibrarySCT.SaveGame
// 0x0030 (0x0030 - 0x0000)
struct BlueprintFunctionLibrarySCT_SaveGame final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 SlotName;                                          // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USaveGame*                              SaveGame_0;                                        // 0x0018(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USCTGameInstance*                       GameInstance;                                      // 0x0020(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0028(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BlueprintFunctionLibrarySCT_SaveGame) == 0x000008, "Wrong alignment on BlueprintFunctionLibrarySCT_SaveGame");
static_assert(sizeof(BlueprintFunctionLibrarySCT_SaveGame) == 0x000030, "Wrong size on BlueprintFunctionLibrarySCT_SaveGame");
static_assert(offsetof(BlueprintFunctionLibrarySCT_SaveGame, WorldContextObject) == 0x000000, "Member 'BlueprintFunctionLibrarySCT_SaveGame::WorldContextObject' has a wrong offset!");
static_assert(offsetof(BlueprintFunctionLibrarySCT_SaveGame, SlotName) == 0x000008, "Member 'BlueprintFunctionLibrarySCT_SaveGame::SlotName' has a wrong offset!");
static_assert(offsetof(BlueprintFunctionLibrarySCT_SaveGame, SaveGame_0) == 0x000018, "Member 'BlueprintFunctionLibrarySCT_SaveGame::SaveGame_0' has a wrong offset!");
static_assert(offsetof(BlueprintFunctionLibrarySCT_SaveGame, GameInstance) == 0x000020, "Member 'BlueprintFunctionLibrarySCT_SaveGame::GameInstance' has a wrong offset!");
static_assert(offsetof(BlueprintFunctionLibrarySCT_SaveGame, ReturnValue) == 0x000028, "Member 'BlueprintFunctionLibrarySCT_SaveGame::ReturnValue' has a wrong offset!");

// Function SCT.BlueprintFunctionLibrarySCT.SaveGameWithMetaData
// 0x0090 (0x0090 - 0x0000)
struct BlueprintFunctionLibrarySCT_SaveGameWithMetaData final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 SlotName;                                          // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USaveGame*                              SaveGame;                                          // 0x0018(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   DisplayName;                                       // 0x0020(0x0018)(Parm, NativeAccessSpecifierPublic)
	class FText                                   DisplaySubtitle;                                   // 0x0038(0x0018)(Parm, NativeAccessSpecifierPublic)
	class FText                                   DisplayDescription;                                // 0x0050(0x0018)(Parm, NativeAccessSpecifierPublic)
	class FString                                 IconPath;                                          // 0x0068(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxBytes;                                          // 0x0078(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          KeepMetaData;                                      // 0x007C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_7D[0x3];                                       // 0x007D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class USCTGameInstance*                       GameInstance;                                      // 0x0080(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0088(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_89[0x7];                                       // 0x0089(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BlueprintFunctionLibrarySCT_SaveGameWithMetaData) == 0x000008, "Wrong alignment on BlueprintFunctionLibrarySCT_SaveGameWithMetaData");
static_assert(sizeof(BlueprintFunctionLibrarySCT_SaveGameWithMetaData) == 0x000090, "Wrong size on BlueprintFunctionLibrarySCT_SaveGameWithMetaData");
static_assert(offsetof(BlueprintFunctionLibrarySCT_SaveGameWithMetaData, WorldContextObject) == 0x000000, "Member 'BlueprintFunctionLibrarySCT_SaveGameWithMetaData::WorldContextObject' has a wrong offset!");
static_assert(offsetof(BlueprintFunctionLibrarySCT_SaveGameWithMetaData, SlotName) == 0x000008, "Member 'BlueprintFunctionLibrarySCT_SaveGameWithMetaData::SlotName' has a wrong offset!");
static_assert(offsetof(BlueprintFunctionLibrarySCT_SaveGameWithMetaData, SaveGame) == 0x000018, "Member 'BlueprintFunctionLibrarySCT_SaveGameWithMetaData::SaveGame' has a wrong offset!");
static_assert(offsetof(BlueprintFunctionLibrarySCT_SaveGameWithMetaData, DisplayName) == 0x000020, "Member 'BlueprintFunctionLibrarySCT_SaveGameWithMetaData::DisplayName' has a wrong offset!");
static_assert(offsetof(BlueprintFunctionLibrarySCT_SaveGameWithMetaData, DisplaySubtitle) == 0x000038, "Member 'BlueprintFunctionLibrarySCT_SaveGameWithMetaData::DisplaySubtitle' has a wrong offset!");
static_assert(offsetof(BlueprintFunctionLibrarySCT_SaveGameWithMetaData, DisplayDescription) == 0x000050, "Member 'BlueprintFunctionLibrarySCT_SaveGameWithMetaData::DisplayDescription' has a wrong offset!");
static_assert(offsetof(BlueprintFunctionLibrarySCT_SaveGameWithMetaData, IconPath) == 0x000068, "Member 'BlueprintFunctionLibrarySCT_SaveGameWithMetaData::IconPath' has a wrong offset!");
static_assert(offsetof(BlueprintFunctionLibrarySCT_SaveGameWithMetaData, MaxBytes) == 0x000078, "Member 'BlueprintFunctionLibrarySCT_SaveGameWithMetaData::MaxBytes' has a wrong offset!");
static_assert(offsetof(BlueprintFunctionLibrarySCT_SaveGameWithMetaData, KeepMetaData) == 0x00007C, "Member 'BlueprintFunctionLibrarySCT_SaveGameWithMetaData::KeepMetaData' has a wrong offset!");
static_assert(offsetof(BlueprintFunctionLibrarySCT_SaveGameWithMetaData, GameInstance) == 0x000080, "Member 'BlueprintFunctionLibrarySCT_SaveGameWithMetaData::GameInstance' has a wrong offset!");
static_assert(offsetof(BlueprintFunctionLibrarySCT_SaveGameWithMetaData, ReturnValue) == 0x000088, "Member 'BlueprintFunctionLibrarySCT_SaveGameWithMetaData::ReturnValue' has a wrong offset!");

// Function SCT.BlueprintFunctionLibrarySCT.SetDownedEffect
// 0x0010 (0x0010 - 0x0000)
struct BlueprintFunctionLibrarySCT_SetDownedEffect final
{
public:
	class UAbilitySystemComponent*                Target;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Duration;                                          // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BlueprintFunctionLibrarySCT_SetDownedEffect) == 0x000008, "Wrong alignment on BlueprintFunctionLibrarySCT_SetDownedEffect");
static_assert(sizeof(BlueprintFunctionLibrarySCT_SetDownedEffect) == 0x000010, "Wrong size on BlueprintFunctionLibrarySCT_SetDownedEffect");
static_assert(offsetof(BlueprintFunctionLibrarySCT_SetDownedEffect, Target) == 0x000000, "Member 'BlueprintFunctionLibrarySCT_SetDownedEffect::Target' has a wrong offset!");
static_assert(offsetof(BlueprintFunctionLibrarySCT_SetDownedEffect, Duration) == 0x000008, "Member 'BlueprintFunctionLibrarySCT_SetDownedEffect::Duration' has a wrong offset!");

// Function SCT.BlueprintFunctionLibrarySCT.SetOverlayDialogForMenuController
// 0x0020 (0x0020 - 0x0000)
struct BlueprintFunctionLibrarySCT_SetOverlayDialogForMenuController final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UUserWidget*                            Menu;                                              // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ZOrder;                                            // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          NonInteractable;                                   // 0x0014(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class USCTGameInstance*                       GameInstance;                                      // 0x0018(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BlueprintFunctionLibrarySCT_SetOverlayDialogForMenuController) == 0x000008, "Wrong alignment on BlueprintFunctionLibrarySCT_SetOverlayDialogForMenuController");
static_assert(sizeof(BlueprintFunctionLibrarySCT_SetOverlayDialogForMenuController) == 0x000020, "Wrong size on BlueprintFunctionLibrarySCT_SetOverlayDialogForMenuController");
static_assert(offsetof(BlueprintFunctionLibrarySCT_SetOverlayDialogForMenuController, WorldContextObject) == 0x000000, "Member 'BlueprintFunctionLibrarySCT_SetOverlayDialogForMenuController::WorldContextObject' has a wrong offset!");
static_assert(offsetof(BlueprintFunctionLibrarySCT_SetOverlayDialogForMenuController, Menu) == 0x000008, "Member 'BlueprintFunctionLibrarySCT_SetOverlayDialogForMenuController::Menu' has a wrong offset!");
static_assert(offsetof(BlueprintFunctionLibrarySCT_SetOverlayDialogForMenuController, ZOrder) == 0x000010, "Member 'BlueprintFunctionLibrarySCT_SetOverlayDialogForMenuController::ZOrder' has a wrong offset!");
static_assert(offsetof(BlueprintFunctionLibrarySCT_SetOverlayDialogForMenuController, NonInteractable) == 0x000014, "Member 'BlueprintFunctionLibrarySCT_SetOverlayDialogForMenuController::NonInteractable' has a wrong offset!");
static_assert(offsetof(BlueprintFunctionLibrarySCT_SetOverlayDialogForMenuController, GameInstance) == 0x000018, "Member 'BlueprintFunctionLibrarySCT_SetOverlayDialogForMenuController::GameInstance' has a wrong offset!");

// Function SCT.BlueprintFunctionLibrarySCT.SetSaveGameMetaData
// 0x0080 (0x0080 - 0x0000)
struct BlueprintFunctionLibrarySCT_SetSaveGameMetaData final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 SlotName;                                          // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   DisplayName;                                       // 0x0018(0x0018)(Parm, NativeAccessSpecifierPublic)
	class FText                                   DisplaySubtitle;                                   // 0x0030(0x0018)(Parm, NativeAccessSpecifierPublic)
	class FText                                   DisplayDescription;                                // 0x0048(0x0018)(Parm, NativeAccessSpecifierPublic)
	class FString                                 IconPath;                                          // 0x0060(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxBytes;                                          // 0x0070(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_74[0x4];                                       // 0x0074(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class USCTGameInstance*                       GameInstance;                                      // 0x0078(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BlueprintFunctionLibrarySCT_SetSaveGameMetaData) == 0x000008, "Wrong alignment on BlueprintFunctionLibrarySCT_SetSaveGameMetaData");
static_assert(sizeof(BlueprintFunctionLibrarySCT_SetSaveGameMetaData) == 0x000080, "Wrong size on BlueprintFunctionLibrarySCT_SetSaveGameMetaData");
static_assert(offsetof(BlueprintFunctionLibrarySCT_SetSaveGameMetaData, WorldContextObject) == 0x000000, "Member 'BlueprintFunctionLibrarySCT_SetSaveGameMetaData::WorldContextObject' has a wrong offset!");
static_assert(offsetof(BlueprintFunctionLibrarySCT_SetSaveGameMetaData, SlotName) == 0x000008, "Member 'BlueprintFunctionLibrarySCT_SetSaveGameMetaData::SlotName' has a wrong offset!");
static_assert(offsetof(BlueprintFunctionLibrarySCT_SetSaveGameMetaData, DisplayName) == 0x000018, "Member 'BlueprintFunctionLibrarySCT_SetSaveGameMetaData::DisplayName' has a wrong offset!");
static_assert(offsetof(BlueprintFunctionLibrarySCT_SetSaveGameMetaData, DisplaySubtitle) == 0x000030, "Member 'BlueprintFunctionLibrarySCT_SetSaveGameMetaData::DisplaySubtitle' has a wrong offset!");
static_assert(offsetof(BlueprintFunctionLibrarySCT_SetSaveGameMetaData, DisplayDescription) == 0x000048, "Member 'BlueprintFunctionLibrarySCT_SetSaveGameMetaData::DisplayDescription' has a wrong offset!");
static_assert(offsetof(BlueprintFunctionLibrarySCT_SetSaveGameMetaData, IconPath) == 0x000060, "Member 'BlueprintFunctionLibrarySCT_SetSaveGameMetaData::IconPath' has a wrong offset!");
static_assert(offsetof(BlueprintFunctionLibrarySCT_SetSaveGameMetaData, MaxBytes) == 0x000070, "Member 'BlueprintFunctionLibrarySCT_SetSaveGameMetaData::MaxBytes' has a wrong offset!");
static_assert(offsetof(BlueprintFunctionLibrarySCT_SetSaveGameMetaData, GameInstance) == 0x000078, "Member 'BlueprintFunctionLibrarySCT_SetSaveGameMetaData::GameInstance' has a wrong offset!");

// Function SCT.BlueprintFunctionLibrarySCT.SetWorldOxygenLevel
// 0x0010 (0x0010 - 0x0000)
struct BlueprintFunctionLibrarySCT_SetWorldOxygenLevel final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         NewValue;                                          // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BlueprintFunctionLibrarySCT_SetWorldOxygenLevel) == 0x000008, "Wrong alignment on BlueprintFunctionLibrarySCT_SetWorldOxygenLevel");
static_assert(sizeof(BlueprintFunctionLibrarySCT_SetWorldOxygenLevel) == 0x000010, "Wrong size on BlueprintFunctionLibrarySCT_SetWorldOxygenLevel");
static_assert(offsetof(BlueprintFunctionLibrarySCT_SetWorldOxygenLevel, WorldContextObject) == 0x000000, "Member 'BlueprintFunctionLibrarySCT_SetWorldOxygenLevel::WorldContextObject' has a wrong offset!");
static_assert(offsetof(BlueprintFunctionLibrarySCT_SetWorldOxygenLevel, NewValue) == 0x000008, "Member 'BlueprintFunctionLibrarySCT_SetWorldOxygenLevel::NewValue' has a wrong offset!");

// Function SCT.BlueprintFunctionLibrarySCT.ShouldDisableAirlockInEditor
// 0x0010 (0x0010 - 0x0000)
struct BlueprintFunctionLibrarySCT_ShouldDisableAirlockInEditor final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BlueprintFunctionLibrarySCT_ShouldDisableAirlockInEditor) == 0x000008, "Wrong alignment on BlueprintFunctionLibrarySCT_ShouldDisableAirlockInEditor");
static_assert(sizeof(BlueprintFunctionLibrarySCT_ShouldDisableAirlockInEditor) == 0x000010, "Wrong size on BlueprintFunctionLibrarySCT_ShouldDisableAirlockInEditor");
static_assert(offsetof(BlueprintFunctionLibrarySCT_ShouldDisableAirlockInEditor, WorldContextObject) == 0x000000, "Member 'BlueprintFunctionLibrarySCT_ShouldDisableAirlockInEditor::WorldContextObject' has a wrong offset!");
static_assert(offsetof(BlueprintFunctionLibrarySCT_ShouldDisableAirlockInEditor, ReturnValue) == 0x000008, "Member 'BlueprintFunctionLibrarySCT_ShouldDisableAirlockInEditor::ReturnValue' has a wrong offset!");

// Function SCT.BlueprintFunctionLibrarySCT.ShouldDisableIntroSequence
// 0x0010 (0x0010 - 0x0000)
struct BlueprintFunctionLibrarySCT_ShouldDisableIntroSequence final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BlueprintFunctionLibrarySCT_ShouldDisableIntroSequence) == 0x000008, "Wrong alignment on BlueprintFunctionLibrarySCT_ShouldDisableIntroSequence");
static_assert(sizeof(BlueprintFunctionLibrarySCT_ShouldDisableIntroSequence) == 0x000010, "Wrong size on BlueprintFunctionLibrarySCT_ShouldDisableIntroSequence");
static_assert(offsetof(BlueprintFunctionLibrarySCT_ShouldDisableIntroSequence, WorldContextObject) == 0x000000, "Member 'BlueprintFunctionLibrarySCT_ShouldDisableIntroSequence::WorldContextObject' has a wrong offset!");
static_assert(offsetof(BlueprintFunctionLibrarySCT_ShouldDisableIntroSequence, ReturnValue) == 0x000008, "Member 'BlueprintFunctionLibrarySCT_ShouldDisableIntroSequence::ReturnValue' has a wrong offset!");

// Function SCT.BlueprintFunctionLibrarySCT.ShowSystemInviteDialog
// 0x0008 (0x0008 - 0x0000)
struct BlueprintFunctionLibrarySCT_ShowSystemInviteDialog final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BlueprintFunctionLibrarySCT_ShowSystemInviteDialog) == 0x000008, "Wrong alignment on BlueprintFunctionLibrarySCT_ShowSystemInviteDialog");
static_assert(sizeof(BlueprintFunctionLibrarySCT_ShowSystemInviteDialog) == 0x000008, "Wrong size on BlueprintFunctionLibrarySCT_ShowSystemInviteDialog");
static_assert(offsetof(BlueprintFunctionLibrarySCT_ShowSystemInviteDialog, WorldContextObject) == 0x000000, "Member 'BlueprintFunctionLibrarySCT_ShowSystemInviteDialog::WorldContextObject' has a wrong offset!");

// Function SCT.BlueprintFunctionLibrarySCT.ShowSystemMatchReviewDialog
// 0x0008 (0x0008 - 0x0000)
struct BlueprintFunctionLibrarySCT_ShowSystemMatchReviewDialog final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BlueprintFunctionLibrarySCT_ShowSystemMatchReviewDialog) == 0x000008, "Wrong alignment on BlueprintFunctionLibrarySCT_ShowSystemMatchReviewDialog");
static_assert(sizeof(BlueprintFunctionLibrarySCT_ShowSystemMatchReviewDialog) == 0x000008, "Wrong size on BlueprintFunctionLibrarySCT_ShowSystemMatchReviewDialog");
static_assert(offsetof(BlueprintFunctionLibrarySCT_ShowSystemMatchReviewDialog, WorldContextObject) == 0x000000, "Member 'BlueprintFunctionLibrarySCT_ShowSystemMatchReviewDialog::WorldContextObject' has a wrong offset!");

// Function SCT.BlueprintFunctionLibrarySCT.ShowSystemProfileForFriend
// 0x0018 (0x0018 - 0x0000)
struct BlueprintFunctionLibrarySCT_ShowSystemProfileForFriend final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 AccelByteId;                                       // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BlueprintFunctionLibrarySCT_ShowSystemProfileForFriend) == 0x000008, "Wrong alignment on BlueprintFunctionLibrarySCT_ShowSystemProfileForFriend");
static_assert(sizeof(BlueprintFunctionLibrarySCT_ShowSystemProfileForFriend) == 0x000018, "Wrong size on BlueprintFunctionLibrarySCT_ShowSystemProfileForFriend");
static_assert(offsetof(BlueprintFunctionLibrarySCT_ShowSystemProfileForFriend, WorldContextObject) == 0x000000, "Member 'BlueprintFunctionLibrarySCT_ShowSystemProfileForFriend::WorldContextObject' has a wrong offset!");
static_assert(offsetof(BlueprintFunctionLibrarySCT_ShowSystemProfileForFriend, AccelByteId) == 0x000008, "Member 'BlueprintFunctionLibrarySCT_ShowSystemProfileForFriend::AccelByteId' has a wrong offset!");

// Function SCT.BlueprintFunctionLibrarySCT.ShowSystemProfileForPlayer
// 0x0010 (0x0010 - 0x0000)
struct BlueprintFunctionLibrarySCT_ShowSystemProfileForPlayer final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 PlayerState;                                       // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BlueprintFunctionLibrarySCT_ShowSystemProfileForPlayer) == 0x000008, "Wrong alignment on BlueprintFunctionLibrarySCT_ShowSystemProfileForPlayer");
static_assert(sizeof(BlueprintFunctionLibrarySCT_ShowSystemProfileForPlayer) == 0x000010, "Wrong size on BlueprintFunctionLibrarySCT_ShowSystemProfileForPlayer");
static_assert(offsetof(BlueprintFunctionLibrarySCT_ShowSystemProfileForPlayer, WorldContextObject) == 0x000000, "Member 'BlueprintFunctionLibrarySCT_ShowSystemProfileForPlayer::WorldContextObject' has a wrong offset!");
static_assert(offsetof(BlueprintFunctionLibrarySCT_ShowSystemProfileForPlayer, PlayerState) == 0x000008, "Member 'BlueprintFunctionLibrarySCT_ShowSystemProfileForPlayer::PlayerState' has a wrong offset!");

// Function SCT.BlueprintFunctionLibrarySCT.ShowSystemProfileWithPlatformID
// 0x0018 (0x0018 - 0x0000)
struct BlueprintFunctionLibrarySCT_ShowSystemProfileWithPlatformID final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 PlatformId;                                        // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BlueprintFunctionLibrarySCT_ShowSystemProfileWithPlatformID) == 0x000008, "Wrong alignment on BlueprintFunctionLibrarySCT_ShowSystemProfileWithPlatformID");
static_assert(sizeof(BlueprintFunctionLibrarySCT_ShowSystemProfileWithPlatformID) == 0x000018, "Wrong size on BlueprintFunctionLibrarySCT_ShowSystemProfileWithPlatformID");
static_assert(offsetof(BlueprintFunctionLibrarySCT_ShowSystemProfileWithPlatformID, WorldContextObject) == 0x000000, "Member 'BlueprintFunctionLibrarySCT_ShowSystemProfileWithPlatformID::WorldContextObject' has a wrong offset!");
static_assert(offsetof(BlueprintFunctionLibrarySCT_ShowSystemProfileWithPlatformID, PlatformId) == 0x000008, "Member 'BlueprintFunctionLibrarySCT_ShowSystemProfileWithPlatformID::PlatformId' has a wrong offset!");

// Function SCT.BlueprintFunctionLibrarySCT.SortFloatArray
// 0x0020 (0x0020 - 0x0000)
struct BlueprintFunctionLibrarySCT_SortFloatArray final
{
public:
	TArray<float>                                 ToSort;                                            // 0x0000(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<float>                                 ReturnValue;                                       // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(BlueprintFunctionLibrarySCT_SortFloatArray) == 0x000008, "Wrong alignment on BlueprintFunctionLibrarySCT_SortFloatArray");
static_assert(sizeof(BlueprintFunctionLibrarySCT_SortFloatArray) == 0x000020, "Wrong size on BlueprintFunctionLibrarySCT_SortFloatArray");
static_assert(offsetof(BlueprintFunctionLibrarySCT_SortFloatArray, ToSort) == 0x000000, "Member 'BlueprintFunctionLibrarySCT_SortFloatArray::ToSort' has a wrong offset!");
static_assert(offsetof(BlueprintFunctionLibrarySCT_SortFloatArray, ReturnValue) == 0x000010, "Member 'BlueprintFunctionLibrarySCT_SortFloatArray::ReturnValue' has a wrong offset!");

// Function SCT.BlueprintFunctionLibrarySCT.SortIntegerArray
// 0x0020 (0x0020 - 0x0000)
struct BlueprintFunctionLibrarySCT_SortIntegerArray final
{
public:
	TArray<int32>                                 ToSort;                                            // 0x0000(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<int32>                                 ReturnValue;                                       // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(BlueprintFunctionLibrarySCT_SortIntegerArray) == 0x000008, "Wrong alignment on BlueprintFunctionLibrarySCT_SortIntegerArray");
static_assert(sizeof(BlueprintFunctionLibrarySCT_SortIntegerArray) == 0x000020, "Wrong size on BlueprintFunctionLibrarySCT_SortIntegerArray");
static_assert(offsetof(BlueprintFunctionLibrarySCT_SortIntegerArray, ToSort) == 0x000000, "Member 'BlueprintFunctionLibrarySCT_SortIntegerArray::ToSort' has a wrong offset!");
static_assert(offsetof(BlueprintFunctionLibrarySCT_SortIntegerArray, ReturnValue) == 0x000010, "Member 'BlueprintFunctionLibrarySCT_SortIntegerArray::ReturnValue' has a wrong offset!");

// Function SCT.BlueprintFunctionLibrarySCT.SubtractWorldOxygenLevel
// 0x0010 (0x0010 - 0x0000)
struct BlueprintFunctionLibrarySCT_SubtractWorldOxygenLevel final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Value;                                             // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BlueprintFunctionLibrarySCT_SubtractWorldOxygenLevel) == 0x000008, "Wrong alignment on BlueprintFunctionLibrarySCT_SubtractWorldOxygenLevel");
static_assert(sizeof(BlueprintFunctionLibrarySCT_SubtractWorldOxygenLevel) == 0x000010, "Wrong size on BlueprintFunctionLibrarySCT_SubtractWorldOxygenLevel");
static_assert(offsetof(BlueprintFunctionLibrarySCT_SubtractWorldOxygenLevel, WorldContextObject) == 0x000000, "Member 'BlueprintFunctionLibrarySCT_SubtractWorldOxygenLevel::WorldContextObject' has a wrong offset!");
static_assert(offsetof(BlueprintFunctionLibrarySCT_SubtractWorldOxygenLevel, Value) == 0x000008, "Member 'BlueprintFunctionLibrarySCT_SubtractWorldOxygenLevel::Value' has a wrong offset!");

// Function SCT.BlueprintFunctionLibrarySCT.ToBitMask
// 0x0008 (0x0008 - 0x0000)
struct BlueprintFunctionLibrarySCT_ToBitMask final
{
public:
	int32                                         Value;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BlueprintFunctionLibrarySCT_ToBitMask) == 0x000004, "Wrong alignment on BlueprintFunctionLibrarySCT_ToBitMask");
static_assert(sizeof(BlueprintFunctionLibrarySCT_ToBitMask) == 0x000008, "Wrong size on BlueprintFunctionLibrarySCT_ToBitMask");
static_assert(offsetof(BlueprintFunctionLibrarySCT_ToBitMask, Value) == 0x000000, "Member 'BlueprintFunctionLibrarySCT_ToBitMask::Value' has a wrong offset!");
static_assert(offsetof(BlueprintFunctionLibrarySCT_ToBitMask, ReturnValue) == 0x000004, "Member 'BlueprintFunctionLibrarySCT_ToBitMask::ReturnValue' has a wrong offset!");

// Function SCT.BlueprintXboxUserSwitcherCallbackProxy.XboxUserSwitch
// 0x0018 (0x0018 - 0x0000)
struct BlueprintXboxUserSwitcherCallbackProxy_XboxUserSwitch final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class APlayerController*                      InPlayerController;                                // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UBlueprintXboxUserSwitcherCallbackProxy* ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BlueprintXboxUserSwitcherCallbackProxy_XboxUserSwitch) == 0x000008, "Wrong alignment on BlueprintXboxUserSwitcherCallbackProxy_XboxUserSwitch");
static_assert(sizeof(BlueprintXboxUserSwitcherCallbackProxy_XboxUserSwitch) == 0x000018, "Wrong size on BlueprintXboxUserSwitcherCallbackProxy_XboxUserSwitch");
static_assert(offsetof(BlueprintXboxUserSwitcherCallbackProxy_XboxUserSwitch, WorldContextObject) == 0x000000, "Member 'BlueprintXboxUserSwitcherCallbackProxy_XboxUserSwitch::WorldContextObject' has a wrong offset!");
static_assert(offsetof(BlueprintXboxUserSwitcherCallbackProxy_XboxUserSwitch, InPlayerController) == 0x000008, "Member 'BlueprintXboxUserSwitcherCallbackProxy_XboxUserSwitch::InPlayerController' has a wrong offset!");
static_assert(offsetof(BlueprintXboxUserSwitcherCallbackProxy_XboxUserSwitch, ReturnValue) == 0x000010, "Member 'BlueprintXboxUserSwitcherCallbackProxy_XboxUserSwitch::ReturnValue' has a wrong offset!");

// Function SCT.GlobalEvent.GetBaseDebugString
// 0x0010 (0x0010 - 0x0000)
struct GlobalEvent_GetBaseDebugString final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GlobalEvent_GetBaseDebugString) == 0x000008, "Wrong alignment on GlobalEvent_GetBaseDebugString");
static_assert(sizeof(GlobalEvent_GetBaseDebugString) == 0x000010, "Wrong size on GlobalEvent_GetBaseDebugString");
static_assert(offsetof(GlobalEvent_GetBaseDebugString, ReturnValue) == 0x000000, "Member 'GlobalEvent_GetBaseDebugString::ReturnValue' has a wrong offset!");

// Function SCT.GlobalEvent.GetDebugString
// 0x0010 (0x0010 - 0x0000)
struct GlobalEvent_GetDebugString final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GlobalEvent_GetDebugString) == 0x000008, "Wrong alignment on GlobalEvent_GetDebugString");
static_assert(sizeof(GlobalEvent_GetDebugString) == 0x000010, "Wrong size on GlobalEvent_GetDebugString");
static_assert(offsetof(GlobalEvent_GetDebugString, ReturnValue) == 0x000000, "Member 'GlobalEvent_GetDebugString::ReturnValue' has a wrong offset!");

// Function SCT.Power.ContextStaticMeshAdded
// 0x0008 (0x0008 - 0x0000)
struct Power_ContextStaticMeshAdded final
{
public:
	class UContextStaticMeshComponent*            NewContextStaticMeshComponent;                     // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Power_ContextStaticMeshAdded) == 0x000008, "Wrong alignment on Power_ContextStaticMeshAdded");
static_assert(sizeof(Power_ContextStaticMeshAdded) == 0x000008, "Wrong size on Power_ContextStaticMeshAdded");
static_assert(offsetof(Power_ContextStaticMeshAdded, NewContextStaticMeshComponent) == 0x000000, "Member 'Power_ContextStaticMeshAdded::NewContextStaticMeshComponent' has a wrong offset!");

// Function SCT.Power.ContextStaticMeshRemoved
// 0x0008 (0x0008 - 0x0000)
struct Power_ContextStaticMeshRemoved final
{
public:
	class UContextStaticMeshComponent*            RemovedContextStaticMeshComponent;                 // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Power_ContextStaticMeshRemoved) == 0x000008, "Wrong alignment on Power_ContextStaticMeshRemoved");
static_assert(sizeof(Power_ContextStaticMeshRemoved) == 0x000008, "Wrong size on Power_ContextStaticMeshRemoved");
static_assert(offsetof(Power_ContextStaticMeshRemoved, RemovedContextStaticMeshComponent) == 0x000000, "Member 'Power_ContextStaticMeshRemoved::RemovedContextStaticMeshComponent' has a wrong offset!");

// Function SCT.Power.GetActiveContextDescription
// 0x0018 (0x0018 - 0x0000)
struct Power_GetActiveContextDescription final
{
public:
	class FText                                   ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(Power_GetActiveContextDescription) == 0x000008, "Wrong alignment on Power_GetActiveContextDescription");
static_assert(sizeof(Power_GetActiveContextDescription) == 0x000018, "Wrong size on Power_GetActiveContextDescription");
static_assert(offsetof(Power_GetActiveContextDescription, ReturnValue) == 0x000000, "Member 'Power_GetActiveContextDescription::ReturnValue' has a wrong offset!");

// Function SCT.Power.GetContextDescription
// 0x0018 (0x0018 - 0x0000)
struct Power_GetContextDescription final
{
public:
	class FText                                   ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(Power_GetContextDescription) == 0x000008, "Wrong alignment on Power_GetContextDescription");
static_assert(sizeof(Power_GetContextDescription) == 0x000018, "Wrong size on Power_GetContextDescription");
static_assert(offsetof(Power_GetContextDescription, ReturnValue) == 0x000000, "Member 'Power_GetContextDescription::ReturnValue' has a wrong offset!");

// Function SCT.Power.GetCooldownContextDescription
// 0x0018 (0x0018 - 0x0000)
struct Power_GetCooldownContextDescription final
{
public:
	class FText                                   ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(Power_GetCooldownContextDescription) == 0x000008, "Wrong alignment on Power_GetCooldownContextDescription");
static_assert(sizeof(Power_GetCooldownContextDescription) == 0x000018, "Wrong size on Power_GetCooldownContextDescription");
static_assert(offsetof(Power_GetCooldownContextDescription, ReturnValue) == 0x000000, "Member 'Power_GetCooldownContextDescription::ReturnValue' has a wrong offset!");

// Function SCT.Power.GetDefaultContextDescriptionImplementation
// 0x0018 (0x0018 - 0x0000)
struct Power_GetDefaultContextDescriptionImplementation final
{
public:
	class FText                                   ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(Power_GetDefaultContextDescriptionImplementation) == 0x000008, "Wrong alignment on Power_GetDefaultContextDescriptionImplementation");
static_assert(sizeof(Power_GetDefaultContextDescriptionImplementation) == 0x000018, "Wrong size on Power_GetDefaultContextDescriptionImplementation");
static_assert(offsetof(Power_GetDefaultContextDescriptionImplementation, ReturnValue) == 0x000000, "Member 'Power_GetDefaultContextDescriptionImplementation::ReturnValue' has a wrong offset!");

// Function SCT.Power.GetInactiveContextDescription
// 0x0018 (0x0018 - 0x0000)
struct Power_GetInactiveContextDescription final
{
public:
	class FText                                   ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(Power_GetInactiveContextDescription) == 0x000008, "Wrong alignment on Power_GetInactiveContextDescription");
static_assert(sizeof(Power_GetInactiveContextDescription) == 0x000018, "Wrong size on Power_GetInactiveContextDescription");
static_assert(offsetof(Power_GetInactiveContextDescription, ReturnValue) == 0x000000, "Member 'Power_GetInactiveContextDescription::ReturnValue' has a wrong offset!");

// Function SCT.Power.OnInputReleased
// 0x0004 (0x0004 - 0x0000)
struct Power_OnInputReleased final
{
public:
	float                                         Heldtime;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Power_OnInputReleased) == 0x000004, "Wrong alignment on Power_OnInputReleased");
static_assert(sizeof(Power_OnInputReleased) == 0x000004, "Wrong size on Power_OnInputReleased");
static_assert(offsetof(Power_OnInputReleased, Heldtime) == 0x000000, "Member 'Power_OnInputReleased::Heldtime' has a wrong offset!");

// Function SCT.Power.CanActivateAbility
// 0x0001 (0x0001 - 0x0000)
struct Power_CanActivateAbility final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Power_CanActivateAbility) == 0x000001, "Wrong alignment on Power_CanActivateAbility");
static_assert(sizeof(Power_CanActivateAbility) == 0x000001, "Wrong size on Power_CanActivateAbility");
static_assert(offsetof(Power_CanActivateAbility, ReturnValue) == 0x000000, "Member 'Power_CanActivateAbility::ReturnValue' has a wrong offset!");

// Function SCT.Power.CanAddMoreStacks
// 0x0001 (0x0001 - 0x0000)
struct Power_CanAddMoreStacks final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Power_CanAddMoreStacks) == 0x000001, "Wrong alignment on Power_CanAddMoreStacks");
static_assert(sizeof(Power_CanAddMoreStacks) == 0x000001, "Wrong size on Power_CanAddMoreStacks");
static_assert(offsetof(Power_CanAddMoreStacks, ReturnValue) == 0x000000, "Member 'Power_CanAddMoreStacks::ReturnValue' has a wrong offset!");

// Function SCT.Power.CreatePayload
// 0x0030 (0x0030 - 0x0000)
struct Power_CreatePayload final
{
public:
	struct FInteractionPayload                    ReturnValue;                                       // 0x0000(0x0030)(Parm, OutParm, ReturnParm, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(Power_CreatePayload) == 0x000008, "Wrong alignment on Power_CreatePayload");
static_assert(sizeof(Power_CreatePayload) == 0x000030, "Wrong size on Power_CreatePayload");
static_assert(offsetof(Power_CreatePayload, ReturnValue) == 0x000000, "Member 'Power_CreatePayload::ReturnValue' has a wrong offset!");

// Function SCT.Power.GetCooldownTotalDuration
// 0x0004 (0x0004 - 0x0000)
struct Power_GetCooldownTotalDuration final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Power_GetCooldownTotalDuration) == 0x000004, "Wrong alignment on Power_GetCooldownTotalDuration");
static_assert(sizeof(Power_GetCooldownTotalDuration) == 0x000004, "Wrong size on Power_GetCooldownTotalDuration");
static_assert(offsetof(Power_GetCooldownTotalDuration, ReturnValue) == 0x000000, "Member 'Power_GetCooldownTotalDuration::ReturnValue' has a wrong offset!");

// Function SCT.Power.GetDetails
// 0x0048 (0x0048 - 0x0000)
struct Power_GetDetails final
{
public:
	struct FPowerDetails                          ReturnValue;                                       // 0x0000(0x0048)(ConstParm, Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(Power_GetDetails) == 0x000008, "Wrong alignment on Power_GetDetails");
static_assert(sizeof(Power_GetDetails) == 0x000048, "Wrong size on Power_GetDetails");
static_assert(offsetof(Power_GetDetails, ReturnValue) == 0x000000, "Member 'Power_GetDetails::ReturnValue' has a wrong offset!");

// Function SCT.Power.GetDropLocation
// 0x000C (0x000C - 0x0000)
struct Power_GetDropLocation final
{
public:
	struct FVector                                ReturnValue;                                       // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Power_GetDropLocation) == 0x000004, "Wrong alignment on Power_GetDropLocation");
static_assert(sizeof(Power_GetDropLocation) == 0x00000C, "Wrong size on Power_GetDropLocation");
static_assert(offsetof(Power_GetDropLocation, ReturnValue) == 0x000000, "Member 'Power_GetDropLocation::ReturnValue' has a wrong offset!");

// Function SCT.Power.GetGlobalCooldownEndTime
// 0x0004 (0x0004 - 0x0000)
struct Power_GetGlobalCooldownEndTime final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Power_GetGlobalCooldownEndTime) == 0x000004, "Wrong alignment on Power_GetGlobalCooldownEndTime");
static_assert(sizeof(Power_GetGlobalCooldownEndTime) == 0x000004, "Wrong size on Power_GetGlobalCooldownEndTime");
static_assert(offsetof(Power_GetGlobalCooldownEndTime, ReturnValue) == 0x000000, "Member 'Power_GetGlobalCooldownEndTime::ReturnValue' has a wrong offset!");

// Function SCT.Power.GetGlobalCooldownTotalDuration
// 0x0004 (0x0004 - 0x0000)
struct Power_GetGlobalCooldownTotalDuration final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Power_GetGlobalCooldownTotalDuration) == 0x000004, "Wrong alignment on Power_GetGlobalCooldownTotalDuration");
static_assert(sizeof(Power_GetGlobalCooldownTotalDuration) == 0x000004, "Wrong size on Power_GetGlobalCooldownTotalDuration");
static_assert(offsetof(Power_GetGlobalCooldownTotalDuration, ReturnValue) == 0x000000, "Member 'Power_GetGlobalCooldownTotalDuration::ReturnValue' has a wrong offset!");

// Function SCT.Power.GetKeyMapping
// 0x0028 (0x0028 - 0x0000)
struct Power_GetKeyMapping final
{
public:
	struct FInputActionKeyMapping                 ReturnValue;                                       // 0x0000(0x0028)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(Power_GetKeyMapping) == 0x000008, "Wrong alignment on Power_GetKeyMapping");
static_assert(sizeof(Power_GetKeyMapping) == 0x000028, "Wrong size on Power_GetKeyMapping");
static_assert(offsetof(Power_GetKeyMapping, ReturnValue) == 0x000000, "Member 'Power_GetKeyMapping::ReturnValue' has a wrong offset!");

// Function SCT.Power.GetLastExecutionTime
// 0x0004 (0x0004 - 0x0000)
struct Power_GetLastExecutionTime final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Power_GetLastExecutionTime) == 0x000004, "Wrong alignment on Power_GetLastExecutionTime");
static_assert(sizeof(Power_GetLastExecutionTime) == 0x000004, "Wrong size on Power_GetLastExecutionTime");
static_assert(offsetof(Power_GetLastExecutionTime, ReturnValue) == 0x000000, "Member 'Power_GetLastExecutionTime::ReturnValue' has a wrong offset!");

// Function SCT.Power.GetLocalCooldownEndTime
// 0x0004 (0x0004 - 0x0000)
struct Power_GetLocalCooldownEndTime final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Power_GetLocalCooldownEndTime) == 0x000004, "Wrong alignment on Power_GetLocalCooldownEndTime");
static_assert(sizeof(Power_GetLocalCooldownEndTime) == 0x000004, "Wrong size on Power_GetLocalCooldownEndTime");
static_assert(offsetof(Power_GetLocalCooldownEndTime, ReturnValue) == 0x000000, "Member 'Power_GetLocalCooldownEndTime::ReturnValue' has a wrong offset!");

// Function SCT.Power.GetLocalCooldownEndTimeNative
// 0x0004 (0x0004 - 0x0000)
struct Power_GetLocalCooldownEndTimeNative final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Power_GetLocalCooldownEndTimeNative) == 0x000004, "Wrong alignment on Power_GetLocalCooldownEndTimeNative");
static_assert(sizeof(Power_GetLocalCooldownEndTimeNative) == 0x000004, "Wrong size on Power_GetLocalCooldownEndTimeNative");
static_assert(offsetof(Power_GetLocalCooldownEndTimeNative, ReturnValue) == 0x000000, "Member 'Power_GetLocalCooldownEndTimeNative::ReturnValue' has a wrong offset!");

// Function SCT.Power.GetLocalCooldownTotalDuration
// 0x0004 (0x0004 - 0x0000)
struct Power_GetLocalCooldownTotalDuration final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Power_GetLocalCooldownTotalDuration) == 0x000004, "Wrong alignment on Power_GetLocalCooldownTotalDuration");
static_assert(sizeof(Power_GetLocalCooldownTotalDuration) == 0x000004, "Wrong size on Power_GetLocalCooldownTotalDuration");
static_assert(offsetof(Power_GetLocalCooldownTotalDuration, ReturnValue) == 0x000000, "Member 'Power_GetLocalCooldownTotalDuration::ReturnValue' has a wrong offset!");

// Function SCT.Power.GetLocalCooldownTotalDurationNative
// 0x0004 (0x0004 - 0x0000)
struct Power_GetLocalCooldownTotalDurationNative final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Power_GetLocalCooldownTotalDurationNative) == 0x000004, "Wrong alignment on Power_GetLocalCooldownTotalDurationNative");
static_assert(sizeof(Power_GetLocalCooldownTotalDurationNative) == 0x000004, "Wrong size on Power_GetLocalCooldownTotalDurationNative");
static_assert(offsetof(Power_GetLocalCooldownTotalDurationNative, ReturnValue) == 0x000000, "Member 'Power_GetLocalCooldownTotalDurationNative::ReturnValue' has a wrong offset!");

// Function SCT.Power.GetNetTime
// 0x0004 (0x0004 - 0x0000)
struct Power_GetNetTime final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Power_GetNetTime) == 0x000004, "Wrong alignment on Power_GetNetTime");
static_assert(sizeof(Power_GetNetTime) == 0x000004, "Wrong size on Power_GetNetTime");
static_assert(offsetof(Power_GetNetTime, ReturnValue) == 0x000000, "Member 'Power_GetNetTime::ReturnValue' has a wrong offset!");

// Function SCT.Power.GetPowerCooldownEndTime
// 0x0004 (0x0004 - 0x0000)
struct Power_GetPowerCooldownEndTime final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Power_GetPowerCooldownEndTime) == 0x000004, "Wrong alignment on Power_GetPowerCooldownEndTime");
static_assert(sizeof(Power_GetPowerCooldownEndTime) == 0x000004, "Wrong size on Power_GetPowerCooldownEndTime");
static_assert(offsetof(Power_GetPowerCooldownEndTime, ReturnValue) == 0x000000, "Member 'Power_GetPowerCooldownEndTime::ReturnValue' has a wrong offset!");

// Function SCT.Power.HasContextInteractionComponent
// 0x0001 (0x0001 - 0x0000)
struct Power_HasContextInteractionComponent final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Power_HasContextInteractionComponent) == 0x000001, "Wrong alignment on Power_HasContextInteractionComponent");
static_assert(sizeof(Power_HasContextInteractionComponent) == 0x000001, "Wrong size on Power_HasContextInteractionComponent");
static_assert(offsetof(Power_HasContextInteractionComponent, ReturnValue) == 0x000000, "Member 'Power_HasContextInteractionComponent::ReturnValue' has a wrong offset!");

// Function SCT.Power.HasContextStaticMesh
// 0x0001 (0x0001 - 0x0000)
struct Power_HasContextStaticMesh final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Power_HasContextStaticMesh) == 0x000001, "Wrong alignment on Power_HasContextStaticMesh");
static_assert(sizeof(Power_HasContextStaticMesh) == 0x000001, "Wrong size on Power_HasContextStaticMesh");
static_assert(offsetof(Power_HasContextStaticMesh, ReturnValue) == 0x000000, "Member 'Power_HasContextStaticMesh::ReturnValue' has a wrong offset!");

// Function SCT.Power.IsAnyPowerInUse
// 0x0001 (0x0001 - 0x0000)
struct Power_IsAnyPowerInUse final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Power_IsAnyPowerInUse) == 0x000001, "Wrong alignment on Power_IsAnyPowerInUse");
static_assert(sizeof(Power_IsAnyPowerInUse) == 0x000001, "Wrong size on Power_IsAnyPowerInUse");
static_assert(offsetof(Power_IsAnyPowerInUse, ReturnValue) == 0x000000, "Member 'Power_IsAnyPowerInUse::ReturnValue' has a wrong offset!");

// Function SCT.Power.IsNetAuthority
// 0x0001 (0x0001 - 0x0000)
struct Power_IsNetAuthority final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Power_IsNetAuthority) == 0x000001, "Wrong alignment on Power_IsNetAuthority");
static_assert(sizeof(Power_IsNetAuthority) == 0x000001, "Wrong size on Power_IsNetAuthority");
static_assert(offsetof(Power_IsNetAuthority, ReturnValue) == 0x000000, "Member 'Power_IsNetAuthority::ReturnValue' has a wrong offset!");

// Function SCT.Power.IsOnCooldown
// 0x0001 (0x0001 - 0x0000)
struct Power_IsOnCooldown final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Power_IsOnCooldown) == 0x000001, "Wrong alignment on Power_IsOnCooldown");
static_assert(sizeof(Power_IsOnCooldown) == 0x000001, "Wrong size on Power_IsOnCooldown");
static_assert(offsetof(Power_IsOnCooldown, ReturnValue) == 0x000000, "Member 'Power_IsOnCooldown::ReturnValue' has a wrong offset!");

// Function SCT.Power.IsOnGlobalCooldown
// 0x0001 (0x0001 - 0x0000)
struct Power_IsOnGlobalCooldown final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Power_IsOnGlobalCooldown) == 0x000001, "Wrong alignment on Power_IsOnGlobalCooldown");
static_assert(sizeof(Power_IsOnGlobalCooldown) == 0x000001, "Wrong size on Power_IsOnGlobalCooldown");
static_assert(offsetof(Power_IsOnGlobalCooldown, ReturnValue) == 0x000000, "Member 'Power_IsOnGlobalCooldown::ReturnValue' has a wrong offset!");

// Function SCT.Power.IsOnLocalCooldown
// 0x0001 (0x0001 - 0x0000)
struct Power_IsOnLocalCooldown final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Power_IsOnLocalCooldown) == 0x000001, "Wrong alignment on Power_IsOnLocalCooldown");
static_assert(sizeof(Power_IsOnLocalCooldown) == 0x000001, "Wrong size on Power_IsOnLocalCooldown");
static_assert(offsetof(Power_IsOnLocalCooldown, ReturnValue) == 0x000000, "Member 'Power_IsOnLocalCooldown::ReturnValue' has a wrong offset!");

// Function SCT.Power.IsOnLocalCooldownNative
// 0x0001 (0x0001 - 0x0000)
struct Power_IsOnLocalCooldownNative final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Power_IsOnLocalCooldownNative) == 0x000001, "Wrong alignment on Power_IsOnLocalCooldownNative");
static_assert(sizeof(Power_IsOnLocalCooldownNative) == 0x000001, "Wrong size on Power_IsOnLocalCooldownNative");
static_assert(offsetof(Power_IsOnLocalCooldownNative, ReturnValue) == 0x000000, "Member 'Power_IsOnLocalCooldownNative::ReturnValue' has a wrong offset!");

// Function SCT.Power.IsPretendAction
// 0x0001 (0x0001 - 0x0000)
struct Power_IsPretendAction final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Power_IsPretendAction) == 0x000001, "Wrong alignment on Power_IsPretendAction");
static_assert(sizeof(Power_IsPretendAction) == 0x000001, "Wrong size on Power_IsPretendAction");
static_assert(offsetof(Power_IsPretendAction, ReturnValue) == 0x000000, "Member 'Power_IsPretendAction::ReturnValue' has a wrong offset!");

// Function SCT.Power.K2_CanUseContextSpec
// 0x00C8 (0x00C8 - 0x0000)
struct Power_K2_CanUseContextSpec final
{
public:
	struct FContextSpec                           Spec;                                              // 0x0000(0x00C0)(ConstParm, Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x00C0(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C1[0x7];                                       // 0x00C1(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(Power_K2_CanUseContextSpec) == 0x000008, "Wrong alignment on Power_K2_CanUseContextSpec");
static_assert(sizeof(Power_K2_CanUseContextSpec) == 0x0000C8, "Wrong size on Power_K2_CanUseContextSpec");
static_assert(offsetof(Power_K2_CanUseContextSpec, Spec) == 0x000000, "Member 'Power_K2_CanUseContextSpec::Spec' has a wrong offset!");
static_assert(offsetof(Power_K2_CanUseContextSpec, ReturnValue) == 0x0000C0, "Member 'Power_K2_CanUseContextSpec::ReturnValue' has a wrong offset!");

// Function SCT.Power.K2_GetInteractionComponent
// 0x0008 (0x0008 - 0x0000)
struct Power_K2_GetInteractionComponent final
{
public:
	class UInteractionComponent*                  ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Power_K2_GetInteractionComponent) == 0x000008, "Wrong alignment on Power_K2_GetInteractionComponent");
static_assert(sizeof(Power_K2_GetInteractionComponent) == 0x000008, "Wrong size on Power_K2_GetInteractionComponent");
static_assert(offsetof(Power_K2_GetInteractionComponent, ReturnValue) == 0x000000, "Member 'Power_K2_GetInteractionComponent::ReturnValue' has a wrong offset!");

// Function SCT.Power.K2_IsPretendAction
// 0x0001 (0x0001 - 0x0000)
struct Power_K2_IsPretendAction final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Power_K2_IsPretendAction) == 0x000001, "Wrong alignment on Power_K2_IsPretendAction");
static_assert(sizeof(Power_K2_IsPretendAction) == 0x000001, "Wrong size on Power_K2_IsPretendAction");
static_assert(offsetof(Power_K2_IsPretendAction, ReturnValue) == 0x000000, "Member 'Power_K2_IsPretendAction::ReturnValue' has a wrong offset!");

// Function SCT.Power.ShouldShowContextUI
// 0x0001 (0x0001 - 0x0000)
struct Power_ShouldShowContextUI final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Power_ShouldShowContextUI) == 0x000001, "Wrong alignment on Power_ShouldShowContextUI");
static_assert(sizeof(Power_ShouldShowContextUI) == 0x000001, "Wrong size on Power_ShouldShowContextUI");
static_assert(offsetof(Power_ShouldShowContextUI, ReturnValue) == 0x000000, "Member 'Power_ShouldShowContextUI::ReturnValue' has a wrong offset!");

// Function SCT.Item.GetItemDetails
// 0x0050 (0x0050 - 0x0000)
struct Item_GetItemDetails final
{
public:
	struct FItemDetails                           ReturnValue;                                       // 0x0000(0x0050)(ConstParm, Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(Item_GetItemDetails) == 0x000008, "Wrong alignment on Item_GetItemDetails");
static_assert(sizeof(Item_GetItemDetails) == 0x000050, "Wrong size on Item_GetItemDetails");
static_assert(offsetof(Item_GetItemDetails, ReturnValue) == 0x000000, "Member 'Item_GetItemDetails::ReturnValue' has a wrong offset!");

// Function SCT.CharacterOxygenStateManager.OnOxygenChanged
// 0x0004 (0x0004 - 0x0000)
struct CharacterOxygenStateManager_OnOxygenChanged final
{
public:
	float                                         OxygenValue;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterOxygenStateManager_OnOxygenChanged) == 0x000004, "Wrong alignment on CharacterOxygenStateManager_OnOxygenChanged");
static_assert(sizeof(CharacterOxygenStateManager_OnOxygenChanged) == 0x000004, "Wrong size on CharacterOxygenStateManager_OnOxygenChanged");
static_assert(offsetof(CharacterOxygenStateManager_OnOxygenChanged, OxygenValue) == 0x000000, "Member 'CharacterOxygenStateManager_OnOxygenChanged::OxygenValue' has a wrong offset!");

// Function SCT.CharacterOxygenStateManager.GetHumanoidOwner
// 0x0008 (0x0008 - 0x0000)
struct CharacterOxygenStateManager_GetHumanoidOwner final
{
public:
	class AHumanoidCharacter*                     ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterOxygenStateManager_GetHumanoidOwner) == 0x000008, "Wrong alignment on CharacterOxygenStateManager_GetHumanoidOwner");
static_assert(sizeof(CharacterOxygenStateManager_GetHumanoidOwner) == 0x000008, "Wrong size on CharacterOxygenStateManager_GetHumanoidOwner");
static_assert(offsetof(CharacterOxygenStateManager_GetHumanoidOwner, ReturnValue) == 0x000000, "Member 'CharacterOxygenStateManager_GetHumanoidOwner::ReturnValue' has a wrong offset!");

// Function SCT.CharacterSCTEvent.Broadcast
// 0x0008 (0x0008 - 0x0000)
struct CharacterSCTEvent_Broadcast final
{
public:
	class ACharacterSCT*                          NewCharacter;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterSCTEvent_Broadcast) == 0x000008, "Wrong alignment on CharacterSCTEvent_Broadcast");
static_assert(sizeof(CharacterSCTEvent_Broadcast) == 0x000008, "Wrong size on CharacterSCTEvent_Broadcast");
static_assert(offsetof(CharacterSCTEvent_Broadcast, NewCharacter) == 0x000000, "Member 'CharacterSCTEvent_Broadcast::NewCharacter' has a wrong offset!");

// Function SCT.CheatComponent.OutputSpec
// 0x00E0 (0x00E0 - 0x0000)
struct CheatComponent_OutputSpec final
{
public:
	struct FGameplayAbilitySpec                   Spec;                                              // 0x0000(0x00E0)(Parm, OutParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(CheatComponent_OutputSpec) == 0x000008, "Wrong alignment on CheatComponent_OutputSpec");
static_assert(sizeof(CheatComponent_OutputSpec) == 0x0000E0, "Wrong size on CheatComponent_OutputSpec");
static_assert(offsetof(CheatComponent_OutputSpec, Spec) == 0x000000, "Member 'CheatComponent_OutputSpec::Spec' has a wrong offset!");

// Function SCT.CheatComponent.ServerAddPower
// 0x0018 (0x0018 - 0x0000)
struct CheatComponent_ServerAddPower final
{
public:
	TSubclassOf<class UPower>                     PowerType;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ACharacterSCT*                          SourceCharacter;                                   // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         StacksToAdd;                                       // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CheatComponent_ServerAddPower) == 0x000008, "Wrong alignment on CheatComponent_ServerAddPower");
static_assert(sizeof(CheatComponent_ServerAddPower) == 0x000018, "Wrong size on CheatComponent_ServerAddPower");
static_assert(offsetof(CheatComponent_ServerAddPower, PowerType) == 0x000000, "Member 'CheatComponent_ServerAddPower::PowerType' has a wrong offset!");
static_assert(offsetof(CheatComponent_ServerAddPower, SourceCharacter) == 0x000008, "Member 'CheatComponent_ServerAddPower::SourceCharacter' has a wrong offset!");
static_assert(offsetof(CheatComponent_ServerAddPower, StacksToAdd) == 0x000010, "Member 'CheatComponent_ServerAddPower::StacksToAdd' has a wrong offset!");

// Function SCT.CheatComponent.ServerAssignToSlot
// 0x0010 (0x0010 - 0x0000)
struct CheatComponent_ServerAssignToSlot final
{
public:
	class UPower*                                 Power;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EInventorySlotID                              SlotId;                                            // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CheatComponent_ServerAssignToSlot) == 0x000008, "Wrong alignment on CheatComponent_ServerAssignToSlot");
static_assert(sizeof(CheatComponent_ServerAssignToSlot) == 0x000010, "Wrong size on CheatComponent_ServerAssignToSlot");
static_assert(offsetof(CheatComponent_ServerAssignToSlot, Power) == 0x000000, "Member 'CheatComponent_ServerAssignToSlot::Power' has a wrong offset!");
static_assert(offsetof(CheatComponent_ServerAssignToSlot, SlotId) == 0x000008, "Member 'CheatComponent_ServerAssignToSlot::SlotId' has a wrong offset!");

// Function SCT.CheatComponent.ServerChangeLevel
// 0x0018 (0x0018 - 0x0000)
struct CheatComponent_ServerChangeLevel final
{
public:
	struct FSoftObjectPath                        ObjPath;                                           // 0x0000(0x0018)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CheatComponent_ServerChangeLevel) == 0x000008, "Wrong alignment on CheatComponent_ServerChangeLevel");
static_assert(sizeof(CheatComponent_ServerChangeLevel) == 0x000018, "Wrong size on CheatComponent_ServerChangeLevel");
static_assert(offsetof(CheatComponent_ServerChangeLevel, ObjPath) == 0x000000, "Member 'CheatComponent_ServerChangeLevel::ObjPath' has a wrong offset!");

// Function SCT.CheatComponent.ServerClearSlot
// 0x0001 (0x0001 - 0x0000)
struct CheatComponent_ServerClearSlot final
{
public:
	EInventorySlotID                              SlotId;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CheatComponent_ServerClearSlot) == 0x000001, "Wrong alignment on CheatComponent_ServerClearSlot");
static_assert(sizeof(CheatComponent_ServerClearSlot) == 0x000001, "Wrong size on CheatComponent_ServerClearSlot");
static_assert(offsetof(CheatComponent_ServerClearSlot, SlotId) == 0x000000, "Member 'CheatComponent_ServerClearSlot::SlotId' has a wrong offset!");

// Function SCT.CheatComponent.ServerRemoveEffectsWithTag
// 0x0028 (0x0028 - 0x0000)
struct CheatComponent_ServerRemoveEffectsWithTag final
{
public:
	class UAbilitySystemComponent*                Target;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  Container;                                         // 0x0008(0x0020)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(CheatComponent_ServerRemoveEffectsWithTag) == 0x000008, "Wrong alignment on CheatComponent_ServerRemoveEffectsWithTag");
static_assert(sizeof(CheatComponent_ServerRemoveEffectsWithTag) == 0x000028, "Wrong size on CheatComponent_ServerRemoveEffectsWithTag");
static_assert(offsetof(CheatComponent_ServerRemoveEffectsWithTag, Target) == 0x000000, "Member 'CheatComponent_ServerRemoveEffectsWithTag::Target' has a wrong offset!");
static_assert(offsetof(CheatComponent_ServerRemoveEffectsWithTag, Container) == 0x000008, "Member 'CheatComponent_ServerRemoveEffectsWithTag::Container' has a wrong offset!");

// Function SCT.CheatComponent.ServerRemovePower
// 0x0010 (0x0010 - 0x0000)
struct CheatComponent_ServerRemovePower final
{
public:
	TSubclassOf<class UPower>                     PowerType;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         StacksToRemove;                                    // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CheatComponent_ServerRemovePower) == 0x000008, "Wrong alignment on CheatComponent_ServerRemovePower");
static_assert(sizeof(CheatComponent_ServerRemovePower) == 0x000010, "Wrong size on CheatComponent_ServerRemovePower");
static_assert(offsetof(CheatComponent_ServerRemovePower, PowerType) == 0x000000, "Member 'CheatComponent_ServerRemovePower::PowerType' has a wrong offset!");
static_assert(offsetof(CheatComponent_ServerRemovePower, StacksToRemove) == 0x000008, "Member 'CheatComponent_ServerRemovePower::StacksToRemove' has a wrong offset!");

// Function SCT.CheatComponent.ServerSetOxygen
// 0x0004 (0x0004 - 0x0000)
struct CheatComponent_ServerSetOxygen final
{
public:
	float                                         Amount;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CheatComponent_ServerSetOxygen) == 0x000004, "Wrong alignment on CheatComponent_ServerSetOxygen");
static_assert(sizeof(CheatComponent_ServerSetOxygen) == 0x000004, "Wrong size on CheatComponent_ServerSetOxygen");
static_assert(offsetof(CheatComponent_ServerSetOxygen, Amount) == 0x000000, "Member 'CheatComponent_ServerSetOxygen::Amount' has a wrong offset!");

// Function SCT.CheatComponent.ServerSpawnInWorld
// 0x0018 (0x0018 - 0x0000)
struct CheatComponent_ServerSpawnInWorld final
{
public:
	TSubclassOf<class AActor>                     ActorType;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Position;                                          // 0x0008(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CheatComponent_ServerSpawnInWorld) == 0x000008, "Wrong alignment on CheatComponent_ServerSpawnInWorld");
static_assert(sizeof(CheatComponent_ServerSpawnInWorld) == 0x000018, "Wrong size on CheatComponent_ServerSpawnInWorld");
static_assert(offsetof(CheatComponent_ServerSpawnInWorld, ActorType) == 0x000000, "Member 'CheatComponent_ServerSpawnInWorld::ActorType' has a wrong offset!");
static_assert(offsetof(CheatComponent_ServerSpawnInWorld, Position) == 0x000008, "Member 'CheatComponent_ServerSpawnInWorld::Position' has a wrong offset!");

// Function SCT.CheatComponent.ServerTeleportToLocation
// 0x0030 (0x0030 - 0x0000)
struct CheatComponent_ServerTeleportToLocation final
{
public:
	struct FTransform                             Transform;                                         // 0x0000(0x0030)(ConstParm, Parm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(CheatComponent_ServerTeleportToLocation) == 0x000010, "Wrong alignment on CheatComponent_ServerTeleportToLocation");
static_assert(sizeof(CheatComponent_ServerTeleportToLocation) == 0x000030, "Wrong size on CheatComponent_ServerTeleportToLocation");
static_assert(offsetof(CheatComponent_ServerTeleportToLocation, Transform) == 0x000000, "Member 'CheatComponent_ServerTeleportToLocation::Transform' has a wrong offset!");

// Function SCT.InteractionComponent.AddSubComponent
// 0x0010 (0x0010 - 0x0000)
struct InteractionComponent_AddSubComponent final
{
public:
	TScriptInterface<class IInteractionSubComponentInterface> Component;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, NativeAccessSpecifierPublic)
};
static_assert(alignof(InteractionComponent_AddSubComponent) == 0x000008, "Wrong alignment on InteractionComponent_AddSubComponent");
static_assert(sizeof(InteractionComponent_AddSubComponent) == 0x000010, "Wrong size on InteractionComponent_AddSubComponent");
static_assert(offsetof(InteractionComponent_AddSubComponent, Component) == 0x000000, "Member 'InteractionComponent_AddSubComponent::Component' has a wrong offset!");

// Function SCT.InteractionComponent.CancelInteraction
// 0x0030 (0x0030 - 0x0000)
struct InteractionComponent_CancelInteraction final
{
public:
	struct FInteractionPayload                    Payload;                                           // 0x0000(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(InteractionComponent_CancelInteraction) == 0x000008, "Wrong alignment on InteractionComponent_CancelInteraction");
static_assert(sizeof(InteractionComponent_CancelInteraction) == 0x000030, "Wrong size on InteractionComponent_CancelInteraction");
static_assert(offsetof(InteractionComponent_CancelInteraction, Payload) == 0x000000, "Member 'InteractionComponent_CancelInteraction::Payload' has a wrong offset!");

// Function SCT.InteractionComponent.EndInteraction
// 0x0038 (0x0038 - 0x0000)
struct InteractionComponent_EndInteraction final
{
public:
	struct FInteractionPayload                    Payload;                                           // 0x0000(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	bool                                          WasCancelled;                                      // 0x0030(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(InteractionComponent_EndInteraction) == 0x000008, "Wrong alignment on InteractionComponent_EndInteraction");
static_assert(sizeof(InteractionComponent_EndInteraction) == 0x000038, "Wrong size on InteractionComponent_EndInteraction");
static_assert(offsetof(InteractionComponent_EndInteraction, Payload) == 0x000000, "Member 'InteractionComponent_EndInteraction::Payload' has a wrong offset!");
static_assert(offsetof(InteractionComponent_EndInteraction, WasCancelled) == 0x000030, "Member 'InteractionComponent_EndInteraction::WasCancelled' has a wrong offset!");

// Function SCT.InteractionComponent.InteractionCancelled
// 0x0030 (0x0030 - 0x0000)
struct InteractionComponent_InteractionCancelled final
{
public:
	struct FInteractionPayload                    Payload;                                           // 0x0000(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(InteractionComponent_InteractionCancelled) == 0x000008, "Wrong alignment on InteractionComponent_InteractionCancelled");
static_assert(sizeof(InteractionComponent_InteractionCancelled) == 0x000030, "Wrong size on InteractionComponent_InteractionCancelled");
static_assert(offsetof(InteractionComponent_InteractionCancelled, Payload) == 0x000000, "Member 'InteractionComponent_InteractionCancelled::Payload' has a wrong offset!");

// Function SCT.InteractionComponent.InteractionEnded
// 0x0038 (0x0038 - 0x0000)
struct InteractionComponent_InteractionEnded final
{
public:
	struct FInteractionPayload                    Payload;                                           // 0x0000(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	bool                                          WasCancelled;                                      // 0x0030(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(InteractionComponent_InteractionEnded) == 0x000008, "Wrong alignment on InteractionComponent_InteractionEnded");
static_assert(sizeof(InteractionComponent_InteractionEnded) == 0x000038, "Wrong size on InteractionComponent_InteractionEnded");
static_assert(offsetof(InteractionComponent_InteractionEnded, Payload) == 0x000000, "Member 'InteractionComponent_InteractionEnded::Payload' has a wrong offset!");
static_assert(offsetof(InteractionComponent_InteractionEnded, WasCancelled) == 0x000030, "Member 'InteractionComponent_InteractionEnded::WasCancelled' has a wrong offset!");

// Function SCT.InteractionComponent.InteractionStarted
// 0x0030 (0x0030 - 0x0000)
struct InteractionComponent_InteractionStarted final
{
public:
	struct FInteractionPayload                    Payload;                                           // 0x0000(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(InteractionComponent_InteractionStarted) == 0x000008, "Wrong alignment on InteractionComponent_InteractionStarted");
static_assert(sizeof(InteractionComponent_InteractionStarted) == 0x000030, "Wrong size on InteractionComponent_InteractionStarted");
static_assert(offsetof(InteractionComponent_InteractionStarted, Payload) == 0x000000, "Member 'InteractionComponent_InteractionStarted::Payload' has a wrong offset!");

// Function SCT.InteractionComponent.RemoveInteractingActor
// 0x0008 (0x0008 - 0x0000)
struct InteractionComponent_RemoveInteractingActor final
{
public:
	const class AActor*                           Actor;                                             // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InteractionComponent_RemoveInteractingActor) == 0x000008, "Wrong alignment on InteractionComponent_RemoveInteractingActor");
static_assert(sizeof(InteractionComponent_RemoveInteractingActor) == 0x000008, "Wrong size on InteractionComponent_RemoveInteractingActor");
static_assert(offsetof(InteractionComponent_RemoveInteractingActor, Actor) == 0x000000, "Member 'InteractionComponent_RemoveInteractingActor::Actor' has a wrong offset!");

// Function SCT.InteractionComponent.RemoveSubComponent
// 0x0010 (0x0010 - 0x0000)
struct InteractionComponent_RemoveSubComponent final
{
public:
	TScriptInterface<class IInteractionSubComponentInterface> Component;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, NativeAccessSpecifierPublic)
};
static_assert(alignof(InteractionComponent_RemoveSubComponent) == 0x000008, "Wrong alignment on InteractionComponent_RemoveSubComponent");
static_assert(sizeof(InteractionComponent_RemoveSubComponent) == 0x000010, "Wrong size on InteractionComponent_RemoveSubComponent");
static_assert(offsetof(InteractionComponent_RemoveSubComponent, Component) == 0x000000, "Member 'InteractionComponent_RemoveSubComponent::Component' has a wrong offset!");

// Function SCT.InteractionComponent.SetActiveContextDescription
// 0x0018 (0x0018 - 0x0000)
struct InteractionComponent_SetActiveContextDescription final
{
public:
	class FText                                   Description;                                       // 0x0000(0x0018)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(InteractionComponent_SetActiveContextDescription) == 0x000008, "Wrong alignment on InteractionComponent_SetActiveContextDescription");
static_assert(sizeof(InteractionComponent_SetActiveContextDescription) == 0x000018, "Wrong size on InteractionComponent_SetActiveContextDescription");
static_assert(offsetof(InteractionComponent_SetActiveContextDescription, Description) == 0x000000, "Member 'InteractionComponent_SetActiveContextDescription::Description' has a wrong offset!");

// Function SCT.InteractionComponent.SetAllowMultiplayerInteraction
// 0x0001 (0x0001 - 0x0000)
struct InteractionComponent_SetAllowMultiplayerInteraction final
{
public:
	bool                                          Enabled;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InteractionComponent_SetAllowMultiplayerInteraction) == 0x000001, "Wrong alignment on InteractionComponent_SetAllowMultiplayerInteraction");
static_assert(sizeof(InteractionComponent_SetAllowMultiplayerInteraction) == 0x000001, "Wrong size on InteractionComponent_SetAllowMultiplayerInteraction");
static_assert(offsetof(InteractionComponent_SetAllowMultiplayerInteraction, Enabled) == 0x000000, "Member 'InteractionComponent_SetAllowMultiplayerInteraction::Enabled' has a wrong offset!");

// Function SCT.InteractionComponent.SetCooldownContextDescription
// 0x0018 (0x0018 - 0x0000)
struct InteractionComponent_SetCooldownContextDescription final
{
public:
	class FText                                   Description;                                       // 0x0000(0x0018)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(InteractionComponent_SetCooldownContextDescription) == 0x000008, "Wrong alignment on InteractionComponent_SetCooldownContextDescription");
static_assert(sizeof(InteractionComponent_SetCooldownContextDescription) == 0x000018, "Wrong size on InteractionComponent_SetCooldownContextDescription");
static_assert(offsetof(InteractionComponent_SetCooldownContextDescription, Description) == 0x000000, "Member 'InteractionComponent_SetCooldownContextDescription::Description' has a wrong offset!");

// Function SCT.InteractionComponent.SetInactiveContextDescription
// 0x0018 (0x0018 - 0x0000)
struct InteractionComponent_SetInactiveContextDescription final
{
public:
	class FText                                   Description;                                       // 0x0000(0x0018)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(InteractionComponent_SetInactiveContextDescription) == 0x000008, "Wrong alignment on InteractionComponent_SetInactiveContextDescription");
static_assert(sizeof(InteractionComponent_SetInactiveContextDescription) == 0x000018, "Wrong size on InteractionComponent_SetInactiveContextDescription");
static_assert(offsetof(InteractionComponent_SetInactiveContextDescription, Description) == 0x000000, "Member 'InteractionComponent_SetInactiveContextDescription::Description' has a wrong offset!");

// Function SCT.InteractionComponent.SetInProgressContextDescription
// 0x0018 (0x0018 - 0x0000)
struct InteractionComponent_SetInProgressContextDescription final
{
public:
	class FText                                   Description;                                       // 0x0000(0x0018)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(InteractionComponent_SetInProgressContextDescription) == 0x000008, "Wrong alignment on InteractionComponent_SetInProgressContextDescription");
static_assert(sizeof(InteractionComponent_SetInProgressContextDescription) == 0x000018, "Wrong size on InteractionComponent_SetInProgressContextDescription");
static_assert(offsetof(InteractionComponent_SetInProgressContextDescription, Description) == 0x000000, "Member 'InteractionComponent_SetInProgressContextDescription::Description' has a wrong offset!");

// Function SCT.InteractionComponent.SetInteractionEnabled
// 0x0001 (0x0001 - 0x0000)
struct InteractionComponent_SetInteractionEnabled final
{
public:
	bool                                          Enabled;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InteractionComponent_SetInteractionEnabled) == 0x000001, "Wrong alignment on InteractionComponent_SetInteractionEnabled");
static_assert(sizeof(InteractionComponent_SetInteractionEnabled) == 0x000001, "Wrong size on InteractionComponent_SetInteractionEnabled");
static_assert(offsetof(InteractionComponent_SetInteractionEnabled, Enabled) == 0x000000, "Member 'InteractionComponent_SetInteractionEnabled::Enabled' has a wrong offset!");

// Function SCT.InteractionComponent.StartInteraction
// 0x0030 (0x0030 - 0x0000)
struct InteractionComponent_StartInteraction final
{
public:
	struct FInteractionPayload                    Payload;                                           // 0x0000(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(InteractionComponent_StartInteraction) == 0x000008, "Wrong alignment on InteractionComponent_StartInteraction");
static_assert(sizeof(InteractionComponent_StartInteraction) == 0x000030, "Wrong size on InteractionComponent_StartInteraction");
static_assert(offsetof(InteractionComponent_StartInteraction, Payload) == 0x000000, "Member 'InteractionComponent_StartInteraction::Payload' has a wrong offset!");

// Function SCT.InteractionComponent.ToggleIsVisible
// 0x0001 (0x0001 - 0x0000)
struct InteractionComponent_ToggleIsVisible final
{
public:
	bool                                          Enabled;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InteractionComponent_ToggleIsVisible) == 0x000001, "Wrong alignment on InteractionComponent_ToggleIsVisible");
static_assert(sizeof(InteractionComponent_ToggleIsVisible) == 0x000001, "Wrong size on InteractionComponent_ToggleIsVisible");
static_assert(offsetof(InteractionComponent_ToggleIsVisible, Enabled) == 0x000000, "Member 'InteractionComponent_ToggleIsVisible::Enabled' has a wrong offset!");

// Function SCT.InteractionComponent.CanActivate
// 0x0038 (0x0038 - 0x0000)
struct InteractionComponent_CanActivate final
{
public:
	struct FInteractionPayload                    Payload;                                           // 0x0000(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0030(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(InteractionComponent_CanActivate) == 0x000008, "Wrong alignment on InteractionComponent_CanActivate");
static_assert(sizeof(InteractionComponent_CanActivate) == 0x000038, "Wrong size on InteractionComponent_CanActivate");
static_assert(offsetof(InteractionComponent_CanActivate, Payload) == 0x000000, "Member 'InteractionComponent_CanActivate::Payload' has a wrong offset!");
static_assert(offsetof(InteractionComponent_CanActivate, ReturnValue) == 0x000030, "Member 'InteractionComponent_CanActivate::ReturnValue' has a wrong offset!");

// Function SCT.InteractionComponent.GetActiveContextDescription
// 0x0048 (0x0048 - 0x0000)
struct InteractionComponent_GetActiveContextDescription final
{
public:
	struct FInteractionPayload                    Payload;                                           // 0x0000(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	class FText                                   ReturnValue;                                       // 0x0030(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(InteractionComponent_GetActiveContextDescription) == 0x000008, "Wrong alignment on InteractionComponent_GetActiveContextDescription");
static_assert(sizeof(InteractionComponent_GetActiveContextDescription) == 0x000048, "Wrong size on InteractionComponent_GetActiveContextDescription");
static_assert(offsetof(InteractionComponent_GetActiveContextDescription, Payload) == 0x000000, "Member 'InteractionComponent_GetActiveContextDescription::Payload' has a wrong offset!");
static_assert(offsetof(InteractionComponent_GetActiveContextDescription, ReturnValue) == 0x000030, "Member 'InteractionComponent_GetActiveContextDescription::ReturnValue' has a wrong offset!");

// Function SCT.InteractionComponent.GetContextDescription
// 0x0048 (0x0048 - 0x0000)
struct InteractionComponent_GetContextDescription final
{
public:
	struct FInteractionPayload                    Payload;                                           // 0x0000(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	class FText                                   ReturnValue;                                       // 0x0030(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(InteractionComponent_GetContextDescription) == 0x000008, "Wrong alignment on InteractionComponent_GetContextDescription");
static_assert(sizeof(InteractionComponent_GetContextDescription) == 0x000048, "Wrong size on InteractionComponent_GetContextDescription");
static_assert(offsetof(InteractionComponent_GetContextDescription, Payload) == 0x000000, "Member 'InteractionComponent_GetContextDescription::Payload' has a wrong offset!");
static_assert(offsetof(InteractionComponent_GetContextDescription, ReturnValue) == 0x000030, "Member 'InteractionComponent_GetContextDescription::ReturnValue' has a wrong offset!");

// Function SCT.InteractionComponent.GetCooldownContextDescription
// 0x0048 (0x0048 - 0x0000)
struct InteractionComponent_GetCooldownContextDescription final
{
public:
	struct FInteractionPayload                    Payload;                                           // 0x0000(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	class FText                                   ReturnValue;                                       // 0x0030(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(InteractionComponent_GetCooldownContextDescription) == 0x000008, "Wrong alignment on InteractionComponent_GetCooldownContextDescription");
static_assert(sizeof(InteractionComponent_GetCooldownContextDescription) == 0x000048, "Wrong size on InteractionComponent_GetCooldownContextDescription");
static_assert(offsetof(InteractionComponent_GetCooldownContextDescription, Payload) == 0x000000, "Member 'InteractionComponent_GetCooldownContextDescription::Payload' has a wrong offset!");
static_assert(offsetof(InteractionComponent_GetCooldownContextDescription, ReturnValue) == 0x000030, "Member 'InteractionComponent_GetCooldownContextDescription::ReturnValue' has a wrong offset!");

// Function SCT.InteractionComponent.GetCooldownEndTime
// 0x0004 (0x0004 - 0x0000)
struct InteractionComponent_GetCooldownEndTime final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InteractionComponent_GetCooldownEndTime) == 0x000004, "Wrong alignment on InteractionComponent_GetCooldownEndTime");
static_assert(sizeof(InteractionComponent_GetCooldownEndTime) == 0x000004, "Wrong size on InteractionComponent_GetCooldownEndTime");
static_assert(offsetof(InteractionComponent_GetCooldownEndTime, ReturnValue) == 0x000000, "Member 'InteractionComponent_GetCooldownEndTime::ReturnValue' has a wrong offset!");

// Function SCT.InteractionComponent.GetCooldownTotalDuration
// 0x0004 (0x0004 - 0x0000)
struct InteractionComponent_GetCooldownTotalDuration final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InteractionComponent_GetCooldownTotalDuration) == 0x000004, "Wrong alignment on InteractionComponent_GetCooldownTotalDuration");
static_assert(sizeof(InteractionComponent_GetCooldownTotalDuration) == 0x000004, "Wrong size on InteractionComponent_GetCooldownTotalDuration");
static_assert(offsetof(InteractionComponent_GetCooldownTotalDuration, ReturnValue) == 0x000000, "Member 'InteractionComponent_GetCooldownTotalDuration::ReturnValue' has a wrong offset!");

// Function SCT.InteractionComponent.GetInactiveContextDescription
// 0x0048 (0x0048 - 0x0000)
struct InteractionComponent_GetInactiveContextDescription final
{
public:
	struct FInteractionPayload                    Payload;                                           // 0x0000(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	class FText                                   ReturnValue;                                       // 0x0030(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(InteractionComponent_GetInactiveContextDescription) == 0x000008, "Wrong alignment on InteractionComponent_GetInactiveContextDescription");
static_assert(sizeof(InteractionComponent_GetInactiveContextDescription) == 0x000048, "Wrong size on InteractionComponent_GetInactiveContextDescription");
static_assert(offsetof(InteractionComponent_GetInactiveContextDescription, Payload) == 0x000000, "Member 'InteractionComponent_GetInactiveContextDescription::Payload' has a wrong offset!");
static_assert(offsetof(InteractionComponent_GetInactiveContextDescription, ReturnValue) == 0x000030, "Member 'InteractionComponent_GetInactiveContextDescription::ReturnValue' has a wrong offset!");

// Function SCT.InteractionComponent.GetInProgressContextDescription
// 0x0048 (0x0048 - 0x0000)
struct InteractionComponent_GetInProgressContextDescription final
{
public:
	struct FInteractionPayload                    Payload;                                           // 0x0000(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	class FText                                   ReturnValue;                                       // 0x0030(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(InteractionComponent_GetInProgressContextDescription) == 0x000008, "Wrong alignment on InteractionComponent_GetInProgressContextDescription");
static_assert(sizeof(InteractionComponent_GetInProgressContextDescription) == 0x000048, "Wrong size on InteractionComponent_GetInProgressContextDescription");
static_assert(offsetof(InteractionComponent_GetInProgressContextDescription, Payload) == 0x000000, "Member 'InteractionComponent_GetInProgressContextDescription::Payload' has a wrong offset!");
static_assert(offsetof(InteractionComponent_GetInProgressContextDescription, ReturnValue) == 0x000030, "Member 'InteractionComponent_GetInProgressContextDescription::ReturnValue' has a wrong offset!");

// Function SCT.InteractionComponent.IsAnyPayloadControlled
// 0x0001 (0x0001 - 0x0000)
struct InteractionComponent_IsAnyPayloadControlled final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InteractionComponent_IsAnyPayloadControlled) == 0x000001, "Wrong alignment on InteractionComponent_IsAnyPayloadControlled");
static_assert(sizeof(InteractionComponent_IsAnyPayloadControlled) == 0x000001, "Wrong size on InteractionComponent_IsAnyPayloadControlled");
static_assert(offsetof(InteractionComponent_IsAnyPayloadControlled, ReturnValue) == 0x000000, "Member 'InteractionComponent_IsAnyPayloadControlled::ReturnValue' has a wrong offset!");

// Function SCT.InteractionComponent.IsInteractionActive
// 0x0001 (0x0001 - 0x0000)
struct InteractionComponent_IsInteractionActive final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InteractionComponent_IsInteractionActive) == 0x000001, "Wrong alignment on InteractionComponent_IsInteractionActive");
static_assert(sizeof(InteractionComponent_IsInteractionActive) == 0x000001, "Wrong size on InteractionComponent_IsInteractionActive");
static_assert(offsetof(InteractionComponent_IsInteractionActive, ReturnValue) == 0x000000, "Member 'InteractionComponent_IsInteractionActive::ReturnValue' has a wrong offset!");

// Function SCT.InteractionComponent.IsOnCooldown
// 0x0001 (0x0001 - 0x0000)
struct InteractionComponent_IsOnCooldown final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InteractionComponent_IsOnCooldown) == 0x000001, "Wrong alignment on InteractionComponent_IsOnCooldown");
static_assert(sizeof(InteractionComponent_IsOnCooldown) == 0x000001, "Wrong size on InteractionComponent_IsOnCooldown");
static_assert(offsetof(InteractionComponent_IsOnCooldown, ReturnValue) == 0x000000, "Member 'InteractionComponent_IsOnCooldown::ReturnValue' has a wrong offset!");

// Function SCT.InteractionComponent.IsVisible
// 0x0001 (0x0001 - 0x0000)
struct InteractionComponent_IsVisible final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InteractionComponent_IsVisible) == 0x000001, "Wrong alignment on InteractionComponent_IsVisible");
static_assert(sizeof(InteractionComponent_IsVisible) == 0x000001, "Wrong size on InteractionComponent_IsVisible");
static_assert(offsetof(InteractionComponent_IsVisible, ReturnValue) == 0x000000, "Member 'InteractionComponent_IsVisible::ReturnValue' has a wrong offset!");

// Function SCT.InteractionComponent.ShouldLockCharacterRotation
// 0x0001 (0x0001 - 0x0000)
struct InteractionComponent_ShouldLockCharacterRotation final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InteractionComponent_ShouldLockCharacterRotation) == 0x000001, "Wrong alignment on InteractionComponent_ShouldLockCharacterRotation");
static_assert(sizeof(InteractionComponent_ShouldLockCharacterRotation) == 0x000001, "Wrong size on InteractionComponent_ShouldLockCharacterRotation");
static_assert(offsetof(InteractionComponent_ShouldLockCharacterRotation, ReturnValue) == 0x000000, "Member 'InteractionComponent_ShouldLockCharacterRotation::ReturnValue' has a wrong offset!");

// Function SCT.ClientInfoCacheGIS.GetIdentificationColor
// 0x0014 (0x0014 - 0x0000)
struct ClientInfoCacheGIS_GetIdentificationColor final
{
public:
	int32                                         PlayerId;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           ReturnValue;                                       // 0x0004(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ClientInfoCacheGIS_GetIdentificationColor) == 0x000004, "Wrong alignment on ClientInfoCacheGIS_GetIdentificationColor");
static_assert(sizeof(ClientInfoCacheGIS_GetIdentificationColor) == 0x000014, "Wrong size on ClientInfoCacheGIS_GetIdentificationColor");
static_assert(offsetof(ClientInfoCacheGIS_GetIdentificationColor, PlayerId) == 0x000000, "Member 'ClientInfoCacheGIS_GetIdentificationColor::PlayerId' has a wrong offset!");
static_assert(offsetof(ClientInfoCacheGIS_GetIdentificationColor, ReturnValue) == 0x000004, "Member 'ClientInfoCacheGIS_GetIdentificationColor::ReturnValue' has a wrong offset!");

// Function SCT.ClientInfoCacheGIS.GetPSNID
// 0x0018 (0x0018 - 0x0000)
struct ClientInfoCacheGIS_GetPSNID final
{
public:
	int32                                         PlayerId;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ClientInfoCacheGIS_GetPSNID) == 0x000008, "Wrong alignment on ClientInfoCacheGIS_GetPSNID");
static_assert(sizeof(ClientInfoCacheGIS_GetPSNID) == 0x000018, "Wrong size on ClientInfoCacheGIS_GetPSNID");
static_assert(offsetof(ClientInfoCacheGIS_GetPSNID, PlayerId) == 0x000000, "Member 'ClientInfoCacheGIS_GetPSNID::PlayerId' has a wrong offset!");
static_assert(offsetof(ClientInfoCacheGIS_GetPSNID, ReturnValue) == 0x000008, "Member 'ClientInfoCacheGIS_GetPSNID::ReturnValue' has a wrong offset!");

// Function SCT.ClientInfoCacheGIS.GetRunningOnPS5
// 0x0008 (0x0008 - 0x0000)
struct ClientInfoCacheGIS_GetRunningOnPS5 final
{
public:
	int32                                         PlayerId;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ClientInfoCacheGIS_GetRunningOnPS5) == 0x000004, "Wrong alignment on ClientInfoCacheGIS_GetRunningOnPS5");
static_assert(sizeof(ClientInfoCacheGIS_GetRunningOnPS5) == 0x000008, "Wrong size on ClientInfoCacheGIS_GetRunningOnPS5");
static_assert(offsetof(ClientInfoCacheGIS_GetRunningOnPS5, PlayerId) == 0x000000, "Member 'ClientInfoCacheGIS_GetRunningOnPS5::PlayerId' has a wrong offset!");
static_assert(offsetof(ClientInfoCacheGIS_GetRunningOnPS5, ReturnValue) == 0x000004, "Member 'ClientInfoCacheGIS_GetRunningOnPS5::ReturnValue' has a wrong offset!");

// Function SCT.ClientInfoCacheGIS.GetSteamID
// 0x0018 (0x0018 - 0x0000)
struct ClientInfoCacheGIS_GetSteamID final
{
public:
	int32                                         PlayerId;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ClientInfoCacheGIS_GetSteamID) == 0x000008, "Wrong alignment on ClientInfoCacheGIS_GetSteamID");
static_assert(sizeof(ClientInfoCacheGIS_GetSteamID) == 0x000018, "Wrong size on ClientInfoCacheGIS_GetSteamID");
static_assert(offsetof(ClientInfoCacheGIS_GetSteamID, PlayerId) == 0x000000, "Member 'ClientInfoCacheGIS_GetSteamID::PlayerId' has a wrong offset!");
static_assert(offsetof(ClientInfoCacheGIS_GetSteamID, ReturnValue) == 0x000008, "Member 'ClientInfoCacheGIS_GetSteamID::ReturnValue' has a wrong offset!");

// Function SCT.ClientInfoCacheGIS.GetXboxLiveID
// 0x0018 (0x0018 - 0x0000)
struct ClientInfoCacheGIS_GetXboxLiveID final
{
public:
	int32                                         PlayerId;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ClientInfoCacheGIS_GetXboxLiveID) == 0x000008, "Wrong alignment on ClientInfoCacheGIS_GetXboxLiveID");
static_assert(sizeof(ClientInfoCacheGIS_GetXboxLiveID) == 0x000018, "Wrong size on ClientInfoCacheGIS_GetXboxLiveID");
static_assert(offsetof(ClientInfoCacheGIS_GetXboxLiveID, PlayerId) == 0x000000, "Member 'ClientInfoCacheGIS_GetXboxLiveID::PlayerId' has a wrong offset!");
static_assert(offsetof(ClientInfoCacheGIS_GetXboxLiveID, ReturnValue) == 0x000008, "Member 'ClientInfoCacheGIS_GetXboxLiveID::ReturnValue' has a wrong offset!");

// Function SCT.ClientInfoCacheGIS.SetHasBeenReported
// 0x0008 (0x0008 - 0x0000)
struct ClientInfoCacheGIS_SetHasBeenReported final
{
public:
	int32                                         PlayerId;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          HasBeenReported;                                   // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ClientInfoCacheGIS_SetHasBeenReported) == 0x000004, "Wrong alignment on ClientInfoCacheGIS_SetHasBeenReported");
static_assert(sizeof(ClientInfoCacheGIS_SetHasBeenReported) == 0x000008, "Wrong size on ClientInfoCacheGIS_SetHasBeenReported");
static_assert(offsetof(ClientInfoCacheGIS_SetHasBeenReported, PlayerId) == 0x000000, "Member 'ClientInfoCacheGIS_SetHasBeenReported::PlayerId' has a wrong offset!");
static_assert(offsetof(ClientInfoCacheGIS_SetHasBeenReported, HasBeenReported) == 0x000004, "Member 'ClientInfoCacheGIS_SetHasBeenReported::HasBeenReported' has a wrong offset!");

// Function SCT.ClientInfoCacheGIS.GetAllPlayerInfo
// 0x0010 (0x0010 - 0x0000)
struct ClientInfoCacheGIS_GetAllPlayerInfo final
{
public:
	TArray<struct FClientPlayerInfo>              ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(ClientInfoCacheGIS_GetAllPlayerInfo) == 0x000008, "Wrong alignment on ClientInfoCacheGIS_GetAllPlayerInfo");
static_assert(sizeof(ClientInfoCacheGIS_GetAllPlayerInfo) == 0x000010, "Wrong size on ClientInfoCacheGIS_GetAllPlayerInfo");
static_assert(offsetof(ClientInfoCacheGIS_GetAllPlayerInfo, ReturnValue) == 0x000000, "Member 'ClientInfoCacheGIS_GetAllPlayerInfo::ReturnValue' has a wrong offset!");

// Function SCT.ClientInfoCacheGIS.GetPlayerInfo
// 0x0080 (0x0080 - 0x0000)
struct ClientInfoCacheGIS_GetPlayerInfo final
{
public:
	int32                                         PlayerId;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FClientPlayerInfo                      ReturnValue;                                       // 0x0008(0x0078)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(ClientInfoCacheGIS_GetPlayerInfo) == 0x000008, "Wrong alignment on ClientInfoCacheGIS_GetPlayerInfo");
static_assert(sizeof(ClientInfoCacheGIS_GetPlayerInfo) == 0x000080, "Wrong size on ClientInfoCacheGIS_GetPlayerInfo");
static_assert(offsetof(ClientInfoCacheGIS_GetPlayerInfo, PlayerId) == 0x000000, "Member 'ClientInfoCacheGIS_GetPlayerInfo::PlayerId' has a wrong offset!");
static_assert(offsetof(ClientInfoCacheGIS_GetPlayerInfo, ReturnValue) == 0x000008, "Member 'ClientInfoCacheGIS_GetPlayerInfo::ReturnValue' has a wrong offset!");

// Function SCT.ClientInfoCacheGIS.HasIdentificationColor
// 0x0008 (0x0008 - 0x0000)
struct ClientInfoCacheGIS_HasIdentificationColor final
{
public:
	int32                                         PlayerId;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ClientInfoCacheGIS_HasIdentificationColor) == 0x000004, "Wrong alignment on ClientInfoCacheGIS_HasIdentificationColor");
static_assert(sizeof(ClientInfoCacheGIS_HasIdentificationColor) == 0x000008, "Wrong size on ClientInfoCacheGIS_HasIdentificationColor");
static_assert(offsetof(ClientInfoCacheGIS_HasIdentificationColor, PlayerId) == 0x000000, "Member 'ClientInfoCacheGIS_HasIdentificationColor::PlayerId' has a wrong offset!");
static_assert(offsetof(ClientInfoCacheGIS_HasIdentificationColor, ReturnValue) == 0x000004, "Member 'ClientInfoCacheGIS_HasIdentificationColor::ReturnValue' has a wrong offset!");

// Function SCT.ClientInfoCacheGIS.HasPlayerInfo
// 0x0008 (0x0008 - 0x0000)
struct ClientInfoCacheGIS_HasPlayerInfo final
{
public:
	int32                                         PlayerId;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ClientInfoCacheGIS_HasPlayerInfo) == 0x000004, "Wrong alignment on ClientInfoCacheGIS_HasPlayerInfo");
static_assert(sizeof(ClientInfoCacheGIS_HasPlayerInfo) == 0x000008, "Wrong size on ClientInfoCacheGIS_HasPlayerInfo");
static_assert(offsetof(ClientInfoCacheGIS_HasPlayerInfo, PlayerId) == 0x000000, "Member 'ClientInfoCacheGIS_HasPlayerInfo::PlayerId' has a wrong offset!");
static_assert(offsetof(ClientInfoCacheGIS_HasPlayerInfo, ReturnValue) == 0x000004, "Member 'ClientInfoCacheGIS_HasPlayerInfo::ReturnValue' has a wrong offset!");

// Function SCT.ClientInfoCacheGIS.HasPSNID
// 0x0008 (0x0008 - 0x0000)
struct ClientInfoCacheGIS_HasPSNID final
{
public:
	int32                                         PlayerId;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ClientInfoCacheGIS_HasPSNID) == 0x000004, "Wrong alignment on ClientInfoCacheGIS_HasPSNID");
static_assert(sizeof(ClientInfoCacheGIS_HasPSNID) == 0x000008, "Wrong size on ClientInfoCacheGIS_HasPSNID");
static_assert(offsetof(ClientInfoCacheGIS_HasPSNID, PlayerId) == 0x000000, "Member 'ClientInfoCacheGIS_HasPSNID::PlayerId' has a wrong offset!");
static_assert(offsetof(ClientInfoCacheGIS_HasPSNID, ReturnValue) == 0x000004, "Member 'ClientInfoCacheGIS_HasPSNID::ReturnValue' has a wrong offset!");

// Function SCT.ClientInfoCacheGIS.HasRunningOnPS5
// 0x0008 (0x0008 - 0x0000)
struct ClientInfoCacheGIS_HasRunningOnPS5 final
{
public:
	int32                                         PlayerId;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ClientInfoCacheGIS_HasRunningOnPS5) == 0x000004, "Wrong alignment on ClientInfoCacheGIS_HasRunningOnPS5");
static_assert(sizeof(ClientInfoCacheGIS_HasRunningOnPS5) == 0x000008, "Wrong size on ClientInfoCacheGIS_HasRunningOnPS5");
static_assert(offsetof(ClientInfoCacheGIS_HasRunningOnPS5, PlayerId) == 0x000000, "Member 'ClientInfoCacheGIS_HasRunningOnPS5::PlayerId' has a wrong offset!");
static_assert(offsetof(ClientInfoCacheGIS_HasRunningOnPS5, ReturnValue) == 0x000004, "Member 'ClientInfoCacheGIS_HasRunningOnPS5::ReturnValue' has a wrong offset!");

// Function SCT.ClientInfoCacheGIS.HasSteamID
// 0x0008 (0x0008 - 0x0000)
struct ClientInfoCacheGIS_HasSteamID final
{
public:
	int32                                         PlayerId;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ClientInfoCacheGIS_HasSteamID) == 0x000004, "Wrong alignment on ClientInfoCacheGIS_HasSteamID");
static_assert(sizeof(ClientInfoCacheGIS_HasSteamID) == 0x000008, "Wrong size on ClientInfoCacheGIS_HasSteamID");
static_assert(offsetof(ClientInfoCacheGIS_HasSteamID, PlayerId) == 0x000000, "Member 'ClientInfoCacheGIS_HasSteamID::PlayerId' has a wrong offset!");
static_assert(offsetof(ClientInfoCacheGIS_HasSteamID, ReturnValue) == 0x000004, "Member 'ClientInfoCacheGIS_HasSteamID::ReturnValue' has a wrong offset!");

// Function SCT.ClientInfoCacheGIS.HasXboxLiveID
// 0x0008 (0x0008 - 0x0000)
struct ClientInfoCacheGIS_HasXboxLiveID final
{
public:
	int32                                         PlayerId;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ClientInfoCacheGIS_HasXboxLiveID) == 0x000004, "Wrong alignment on ClientInfoCacheGIS_HasXboxLiveID");
static_assert(sizeof(ClientInfoCacheGIS_HasXboxLiveID) == 0x000008, "Wrong size on ClientInfoCacheGIS_HasXboxLiveID");
static_assert(offsetof(ClientInfoCacheGIS_HasXboxLiveID, PlayerId) == 0x000000, "Member 'ClientInfoCacheGIS_HasXboxLiveID::PlayerId' has a wrong offset!");
static_assert(offsetof(ClientInfoCacheGIS_HasXboxLiveID, ReturnValue) == 0x000004, "Member 'ClientInfoCacheGIS_HasXboxLiveID::ReturnValue' has a wrong offset!");

// Function SCT.ContextPowerManager.AbilitySpecRemoved
// 0x00E0 (0x00E0 - 0x0000)
struct ContextPowerManager_AbilitySpecRemoved final
{
public:
	struct FGameplayAbilitySpec                   Spec;                                              // 0x0000(0x00E0)(Parm, OutParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(ContextPowerManager_AbilitySpecRemoved) == 0x000008, "Wrong alignment on ContextPowerManager_AbilitySpecRemoved");
static_assert(sizeof(ContextPowerManager_AbilitySpecRemoved) == 0x0000E0, "Wrong size on ContextPowerManager_AbilitySpecRemoved");
static_assert(offsetof(ContextPowerManager_AbilitySpecRemoved, Spec) == 0x000000, "Member 'ContextPowerManager_AbilitySpecRemoved::Spec' has a wrong offset!");

// Function SCT.ContextPowerManager.HighestPriorityCleared
// 0x0010 (0x0010 - 0x0000)
struct ContextPowerManager_HighestPriorityCleared final
{
public:
	class UPowerChannel*                          Channel;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPower*                                 ClearedPower;                                      // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ContextPowerManager_HighestPriorityCleared) == 0x000008, "Wrong alignment on ContextPowerManager_HighestPriorityCleared");
static_assert(sizeof(ContextPowerManager_HighestPriorityCleared) == 0x000010, "Wrong size on ContextPowerManager_HighestPriorityCleared");
static_assert(offsetof(ContextPowerManager_HighestPriorityCleared, Channel) == 0x000000, "Member 'ContextPowerManager_HighestPriorityCleared::Channel' has a wrong offset!");
static_assert(offsetof(ContextPowerManager_HighestPriorityCleared, ClearedPower) == 0x000008, "Member 'ContextPowerManager_HighestPriorityCleared::ClearedPower' has a wrong offset!");

// Function SCT.ContextPowerManager.HighestPrioritySet
// 0x0008 (0x0008 - 0x0000)
struct ContextPowerManager_HighestPrioritySet final
{
public:
	class UPowerChannel*                          Channel;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ContextPowerManager_HighestPrioritySet) == 0x000008, "Wrong alignment on ContextPowerManager_HighestPrioritySet");
static_assert(sizeof(ContextPowerManager_HighestPrioritySet) == 0x000008, "Wrong size on ContextPowerManager_HighestPrioritySet");
static_assert(offsetof(ContextPowerManager_HighestPrioritySet, Channel) == 0x000000, "Member 'ContextPowerManager_HighestPrioritySet::Channel' has a wrong offset!");

// Function SCT.ContextPowerManager.SensorEnabledStateChanged
// 0x0001 (0x0001 - 0x0000)
struct ContextPowerManager_SensorEnabledStateChanged final
{
public:
	bool                                          SensorEnabled;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ContextPowerManager_SensorEnabledStateChanged) == 0x000001, "Wrong alignment on ContextPowerManager_SensorEnabledStateChanged");
static_assert(sizeof(ContextPowerManager_SensorEnabledStateChanged) == 0x000001, "Wrong size on ContextPowerManager_SensorEnabledStateChanged");
static_assert(offsetof(ContextPowerManager_SensorEnabledStateChanged, SensorEnabled) == 0x000000, "Member 'ContextPowerManager_SensorEnabledStateChanged::SensorEnabled' has a wrong offset!");

// Function SCT.ContextPowerManager.ServerSetPowerContextData
// 0x0010 (0x0010 - 0x0000)
struct ContextPowerManager_ServerSetPowerContextData final
{
public:
	class UPower*                                 Power;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UContextStaticMeshComponent*            ContextStaticMeshComponent;                        // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ContextPowerManager_ServerSetPowerContextData) == 0x000008, "Wrong alignment on ContextPowerManager_ServerSetPowerContextData");
static_assert(sizeof(ContextPowerManager_ServerSetPowerContextData) == 0x000010, "Wrong size on ContextPowerManager_ServerSetPowerContextData");
static_assert(offsetof(ContextPowerManager_ServerSetPowerContextData, Power) == 0x000000, "Member 'ContextPowerManager_ServerSetPowerContextData::Power' has a wrong offset!");
static_assert(offsetof(ContextPowerManager_ServerSetPowerContextData, ContextStaticMeshComponent) == 0x000008, "Member 'ContextPowerManager_ServerSetPowerContextData::ContextStaticMeshComponent' has a wrong offset!");

// Function SCT.ContextSensor.OnSenseBegin
// 0x00B0 (0x00B0 - 0x0000)
struct ContextSensor_OnSenseBegin final
{
public:
	class UPrimitiveComponent*                    OverlappedComponent;                               // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OtherBodyIndex;                                    // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFromSweep;                                        // 0x001C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             SweepResult;                                       // 0x0020(0x008C)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	uint8                                         Pad_AC[0x4];                                       // 0x00AC(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ContextSensor_OnSenseBegin) == 0x000008, "Wrong alignment on ContextSensor_OnSenseBegin");
static_assert(sizeof(ContextSensor_OnSenseBegin) == 0x0000B0, "Wrong size on ContextSensor_OnSenseBegin");
static_assert(offsetof(ContextSensor_OnSenseBegin, OverlappedComponent) == 0x000000, "Member 'ContextSensor_OnSenseBegin::OverlappedComponent' has a wrong offset!");
static_assert(offsetof(ContextSensor_OnSenseBegin, OtherActor) == 0x000008, "Member 'ContextSensor_OnSenseBegin::OtherActor' has a wrong offset!");
static_assert(offsetof(ContextSensor_OnSenseBegin, OtherComp) == 0x000010, "Member 'ContextSensor_OnSenseBegin::OtherComp' has a wrong offset!");
static_assert(offsetof(ContextSensor_OnSenseBegin, OtherBodyIndex) == 0x000018, "Member 'ContextSensor_OnSenseBegin::OtherBodyIndex' has a wrong offset!");
static_assert(offsetof(ContextSensor_OnSenseBegin, bFromSweep) == 0x00001C, "Member 'ContextSensor_OnSenseBegin::bFromSweep' has a wrong offset!");
static_assert(offsetof(ContextSensor_OnSenseBegin, SweepResult) == 0x000020, "Member 'ContextSensor_OnSenseBegin::SweepResult' has a wrong offset!");

// Function SCT.ContextSensor.OnSenseEnd
// 0x0020 (0x0020 - 0x0000)
struct ContextSensor_OnSenseEnd final
{
public:
	class UPrimitiveComponent*                    OverlappedComponent;                               // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OtherBodyIndex;                                    // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ContextSensor_OnSenseEnd) == 0x000008, "Wrong alignment on ContextSensor_OnSenseEnd");
static_assert(sizeof(ContextSensor_OnSenseEnd) == 0x000020, "Wrong size on ContextSensor_OnSenseEnd");
static_assert(offsetof(ContextSensor_OnSenseEnd, OverlappedComponent) == 0x000000, "Member 'ContextSensor_OnSenseEnd::OverlappedComponent' has a wrong offset!");
static_assert(offsetof(ContextSensor_OnSenseEnd, OtherActor) == 0x000008, "Member 'ContextSensor_OnSenseEnd::OtherActor' has a wrong offset!");
static_assert(offsetof(ContextSensor_OnSenseEnd, OtherComp) == 0x000010, "Member 'ContextSensor_OnSenseEnd::OtherComp' has a wrong offset!");
static_assert(offsetof(ContextSensor_OnSenseEnd, OtherBodyIndex) == 0x000018, "Member 'ContextSensor_OnSenseEnd::OtherBodyIndex' has a wrong offset!");

// Function SCT.ContextSensor.AnyHaveTag
// 0x0028 (0x0028 - 0x0000)
struct ContextSensor_AnyHaveTag final
{
public:
	struct FGameplayTagContainer                  Container;                                         // 0x0000(0x0020)(Parm, OutParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ContextSensor_AnyHaveTag) == 0x000008, "Wrong alignment on ContextSensor_AnyHaveTag");
static_assert(sizeof(ContextSensor_AnyHaveTag) == 0x000028, "Wrong size on ContextSensor_AnyHaveTag");
static_assert(offsetof(ContextSensor_AnyHaveTag, Container) == 0x000000, "Member 'ContextSensor_AnyHaveTag::Container' has a wrong offset!");
static_assert(offsetof(ContextSensor_AnyHaveTag, ReturnValue) == 0x000020, "Member 'ContextSensor_AnyHaveTag::ReturnValue' has a wrong offset!");

// Function SCT.ContextSensor.GetAllSpecs
// 0x0010 (0x0010 - 0x0000)
struct ContextSensor_GetAllSpecs final
{
public:
	TArray<struct FContextSpec>                   ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(ContextSensor_GetAllSpecs) == 0x000008, "Wrong alignment on ContextSensor_GetAllSpecs");
static_assert(sizeof(ContextSensor_GetAllSpecs) == 0x000010, "Wrong size on ContextSensor_GetAllSpecs");
static_assert(offsetof(ContextSensor_GetAllSpecs, ReturnValue) == 0x000000, "Member 'ContextSensor_GetAllSpecs::ReturnValue' has a wrong offset!");

// Function SCT.ContextSensor.GetAllSpecsFromTag
// 0x0030 (0x0030 - 0x0000)
struct ContextSensor_GetAllSpecsFromTag final
{
public:
	struct FGameplayTagContainer                  Container;                                         // 0x0000(0x0020)(Parm, OutParm, NativeAccessSpecifierPublic)
	TArray<struct FContextSpec>                   ReturnValue;                                       // 0x0020(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(ContextSensor_GetAllSpecsFromTag) == 0x000008, "Wrong alignment on ContextSensor_GetAllSpecsFromTag");
static_assert(sizeof(ContextSensor_GetAllSpecsFromTag) == 0x000030, "Wrong size on ContextSensor_GetAllSpecsFromTag");
static_assert(offsetof(ContextSensor_GetAllSpecsFromTag, Container) == 0x000000, "Member 'ContextSensor_GetAllSpecsFromTag::Container' has a wrong offset!");
static_assert(offsetof(ContextSensor_GetAllSpecsFromTag, ReturnValue) == 0x000020, "Member 'ContextSensor_GetAllSpecsFromTag::ReturnValue' has a wrong offset!");

// Function SCT.ContextSensor.GetLineOfSightWorldPosition
// 0x000C (0x000C - 0x0000)
struct ContextSensor_GetLineOfSightWorldPosition final
{
public:
	struct FVector                                ReturnValue;                                       // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ContextSensor_GetLineOfSightWorldPosition) == 0x000004, "Wrong alignment on ContextSensor_GetLineOfSightWorldPosition");
static_assert(sizeof(ContextSensor_GetLineOfSightWorldPosition) == 0x00000C, "Wrong size on ContextSensor_GetLineOfSightWorldPosition");
static_assert(offsetof(ContextSensor_GetLineOfSightWorldPosition, ReturnValue) == 0x000000, "Member 'ContextSensor_GetLineOfSightWorldPosition::ReturnValue' has a wrong offset!");

// Function SCT.ContextSensor.GetSpecFromTag
// 0x00E0 (0x00E0 - 0x0000)
struct ContextSensor_GetSpecFromTag final
{
public:
	struct FGameplayTagContainer                  Container;                                         // 0x0000(0x0020)(Parm, OutParm, NativeAccessSpecifierPublic)
	struct FContextSpec                           ReturnValue;                                       // 0x0020(0x00C0)(Parm, OutParm, ReturnParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(ContextSensor_GetSpecFromTag) == 0x000008, "Wrong alignment on ContextSensor_GetSpecFromTag");
static_assert(sizeof(ContextSensor_GetSpecFromTag) == 0x0000E0, "Wrong size on ContextSensor_GetSpecFromTag");
static_assert(offsetof(ContextSensor_GetSpecFromTag, Container) == 0x000000, "Member 'ContextSensor_GetSpecFromTag::Container' has a wrong offset!");
static_assert(offsetof(ContextSensor_GetSpecFromTag, ReturnValue) == 0x000020, "Member 'ContextSensor_GetSpecFromTag::ReturnValue' has a wrong offset!");

// Function SCT.Skill.GetSkillDetails
// 0x0050 (0x0050 - 0x0000)
struct Skill_GetSkillDetails final
{
public:
	struct FSkillDetails                          ReturnValue;                                       // 0x0000(0x0050)(ConstParm, Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(Skill_GetSkillDetails) == 0x000008, "Wrong alignment on Skill_GetSkillDetails");
static_assert(sizeof(Skill_GetSkillDetails) == 0x000050, "Wrong size on Skill_GetSkillDetails");
static_assert(offsetof(Skill_GetSkillDetails, ReturnValue) == 0x000000, "Member 'Skill_GetSkillDetails::ReturnValue' has a wrong offset!");

// Function SCT.ContextStaticMeshComponent.GetAbilitySystemComponentFromOwner
// 0x0008 (0x0008 - 0x0000)
struct ContextStaticMeshComponent_GetAbilitySystemComponentFromOwner final
{
public:
	class UAbilitySystemComponentSCT*             ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ContextStaticMeshComponent_GetAbilitySystemComponentFromOwner) == 0x000008, "Wrong alignment on ContextStaticMeshComponent_GetAbilitySystemComponentFromOwner");
static_assert(sizeof(ContextStaticMeshComponent_GetAbilitySystemComponentFromOwner) == 0x000008, "Wrong size on ContextStaticMeshComponent_GetAbilitySystemComponentFromOwner");
static_assert(offsetof(ContextStaticMeshComponent_GetAbilitySystemComponentFromOwner, ReturnValue) == 0x000000, "Member 'ContextStaticMeshComponent_GetAbilitySystemComponentFromOwner::ReturnValue' has a wrong offset!");

// Function SCT.ContextStaticMeshComponent.GetAbilitySystemComponentTagsFromOwner
// 0x0020 (0x0020 - 0x0000)
struct ContextStaticMeshComponent_GetAbilitySystemComponentTagsFromOwner final
{
public:
	struct FGameplayTagContainer                  ReturnValue;                                       // 0x0000(0x0020)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(ContextStaticMeshComponent_GetAbilitySystemComponentTagsFromOwner) == 0x000008, "Wrong alignment on ContextStaticMeshComponent_GetAbilitySystemComponentTagsFromOwner");
static_assert(sizeof(ContextStaticMeshComponent_GetAbilitySystemComponentTagsFromOwner) == 0x000020, "Wrong size on ContextStaticMeshComponent_GetAbilitySystemComponentTagsFromOwner");
static_assert(offsetof(ContextStaticMeshComponent_GetAbilitySystemComponentTagsFromOwner, ReturnValue) == 0x000000, "Member 'ContextStaticMeshComponent_GetAbilitySystemComponentTagsFromOwner::ReturnValue' has a wrong offset!");

// Function SCT.ContextStaticMeshComponent.GetContextWidgetWorldPosition
// 0x000C (0x000C - 0x0000)
struct ContextStaticMeshComponent_GetContextWidgetWorldPosition final
{
public:
	struct FVector                                ReturnValue;                                       // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ContextStaticMeshComponent_GetContextWidgetWorldPosition) == 0x000004, "Wrong alignment on ContextStaticMeshComponent_GetContextWidgetWorldPosition");
static_assert(sizeof(ContextStaticMeshComponent_GetContextWidgetWorldPosition) == 0x00000C, "Wrong size on ContextStaticMeshComponent_GetContextWidgetWorldPosition");
static_assert(offsetof(ContextStaticMeshComponent_GetContextWidgetWorldPosition, ReturnValue) == 0x000000, "Member 'ContextStaticMeshComponent_GetContextWidgetWorldPosition::ReturnValue' has a wrong offset!");

// Function SCT.ContextStaticMeshComponent.HasValidInteractionComponent
// 0x0001 (0x0001 - 0x0000)
struct ContextStaticMeshComponent_HasValidInteractionComponent final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ContextStaticMeshComponent_HasValidInteractionComponent) == 0x000001, "Wrong alignment on ContextStaticMeshComponent_HasValidInteractionComponent");
static_assert(sizeof(ContextStaticMeshComponent_HasValidInteractionComponent) == 0x000001, "Wrong size on ContextStaticMeshComponent_HasValidInteractionComponent");
static_assert(offsetof(ContextStaticMeshComponent_HasValidInteractionComponent, ReturnValue) == 0x000000, "Member 'ContextStaticMeshComponent_HasValidInteractionComponent::ReturnValue' has a wrong offset!");

// Function SCT.ContextStaticMeshComponent.IsHighestPriority
// 0x0001 (0x0001 - 0x0000)
struct ContextStaticMeshComponent_IsHighestPriority final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ContextStaticMeshComponent_IsHighestPriority) == 0x000001, "Wrong alignment on ContextStaticMeshComponent_IsHighestPriority");
static_assert(sizeof(ContextStaticMeshComponent_IsHighestPriority) == 0x000001, "Wrong size on ContextStaticMeshComponent_IsHighestPriority");
static_assert(offsetof(ContextStaticMeshComponent_IsHighestPriority, ReturnValue) == 0x000000, "Member 'ContextStaticMeshComponent_IsHighestPriority::ReturnValue' has a wrong offset!");

// Function SCT.ContextStaticMeshComponent.K2_GetInteractionComponent
// 0x0008 (0x0008 - 0x0000)
struct ContextStaticMeshComponent_K2_GetInteractionComponent final
{
public:
	class UInteractionComponent*                  ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ContextStaticMeshComponent_K2_GetInteractionComponent) == 0x000008, "Wrong alignment on ContextStaticMeshComponent_K2_GetInteractionComponent");
static_assert(sizeof(ContextStaticMeshComponent_K2_GetInteractionComponent) == 0x000008, "Wrong size on ContextStaticMeshComponent_K2_GetInteractionComponent");
static_assert(offsetof(ContextStaticMeshComponent_K2_GetInteractionComponent, ReturnValue) == 0x000000, "Member 'ContextStaticMeshComponent_K2_GetInteractionComponent::ReturnValue' has a wrong offset!");

// Function SCT.ControllerHapticsComponent.Play
// 0x0010 (0x0010 - 0x0000)
struct ControllerHapticsComponent_Play final
{
public:
	const class UControllerHapticsData*           HapticsData;                                       // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USoundAttenuation*                      SpatialAttenuation;                                // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ControllerHapticsComponent_Play) == 0x000008, "Wrong alignment on ControllerHapticsComponent_Play");
static_assert(sizeof(ControllerHapticsComponent_Play) == 0x000010, "Wrong size on ControllerHapticsComponent_Play");
static_assert(offsetof(ControllerHapticsComponent_Play, HapticsData) == 0x000000, "Member 'ControllerHapticsComponent_Play::HapticsData' has a wrong offset!");
static_assert(offsetof(ControllerHapticsComponent_Play, SpatialAttenuation) == 0x000008, "Member 'ControllerHapticsComponent_Play::SpatialAttenuation' has a wrong offset!");

// Function SCT.ControllerHapticsComponent.ResistUseKeyPress
// 0x000C (0x000C - 0x0000)
struct ControllerHapticsComponent_ResistUseKeyPress final
{
public:
	float                                         PressRangeStart;                                   // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PressRangeEnd;                                     // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Strength;                                          // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ControllerHapticsComponent_ResistUseKeyPress) == 0x000004, "Wrong alignment on ControllerHapticsComponent_ResistUseKeyPress");
static_assert(sizeof(ControllerHapticsComponent_ResistUseKeyPress) == 0x00000C, "Wrong size on ControllerHapticsComponent_ResistUseKeyPress");
static_assert(offsetof(ControllerHapticsComponent_ResistUseKeyPress, PressRangeStart) == 0x000000, "Member 'ControllerHapticsComponent_ResistUseKeyPress::PressRangeStart' has a wrong offset!");
static_assert(offsetof(ControllerHapticsComponent_ResistUseKeyPress, PressRangeEnd) == 0x000004, "Member 'ControllerHapticsComponent_ResistUseKeyPress::PressRangeEnd' has a wrong offset!");
static_assert(offsetof(ControllerHapticsComponent_ResistUseKeyPress, Strength) == 0x000008, "Member 'ControllerHapticsComponent_ResistUseKeyPress::Strength' has a wrong offset!");

// Function SCT.ControllerIconData.GetControllerIconForKey
// 0x0028 (0x0028 - 0x0000)
struct ControllerIconData_GetControllerIconForKey final
{
public:
	struct FKey                                   Key;                                               // 0x0000(0x0018)(Parm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESCTControllerType                            ControllerType;                                    // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          OverridePlatformSetting;                           // 0x0019(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1A[0x6];                                       // 0x001A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UTexture2D*                             ReturnValue;                                       // 0x0020(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ControllerIconData_GetControllerIconForKey) == 0x000008, "Wrong alignment on ControllerIconData_GetControllerIconForKey");
static_assert(sizeof(ControllerIconData_GetControllerIconForKey) == 0x000028, "Wrong size on ControllerIconData_GetControllerIconForKey");
static_assert(offsetof(ControllerIconData_GetControllerIconForKey, Key) == 0x000000, "Member 'ControllerIconData_GetControllerIconForKey::Key' has a wrong offset!");
static_assert(offsetof(ControllerIconData_GetControllerIconForKey, ControllerType) == 0x000018, "Member 'ControllerIconData_GetControllerIconForKey::ControllerType' has a wrong offset!");
static_assert(offsetof(ControllerIconData_GetControllerIconForKey, OverridePlatformSetting) == 0x000019, "Member 'ControllerIconData_GetControllerIconForKey::OverridePlatformSetting' has a wrong offset!");
static_assert(offsetof(ControllerIconData_GetControllerIconForKey, ReturnValue) == 0x000020, "Member 'ControllerIconData_GetControllerIconForKey::ReturnValue' has a wrong offset!");

// Function SCT.ControllerIconWidget.ShowGamepadDisplay
// 0x0008 (0x0008 - 0x0000)
struct ControllerIconWidget_ShowGamepadDisplay final
{
public:
	class UTexture2D*                             ButtonIcon;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ControllerIconWidget_ShowGamepadDisplay) == 0x000008, "Wrong alignment on ControllerIconWidget_ShowGamepadDisplay");
static_assert(sizeof(ControllerIconWidget_ShowGamepadDisplay) == 0x000008, "Wrong size on ControllerIconWidget_ShowGamepadDisplay");
static_assert(offsetof(ControllerIconWidget_ShowGamepadDisplay, ButtonIcon) == 0x000000, "Member 'ControllerIconWidget_ShowGamepadDisplay::ButtonIcon' has a wrong offset!");

// Function SCT.ControllerIconWidget.ShowKeyboardDisplay
// 0x0018 (0x0018 - 0x0000)
struct ControllerIconWidget_ShowKeyboardDisplay final
{
public:
	class FText                                   KeyDisplayText;                                    // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(ControllerIconWidget_ShowKeyboardDisplay) == 0x000008, "Wrong alignment on ControllerIconWidget_ShowKeyboardDisplay");
static_assert(sizeof(ControllerIconWidget_ShowKeyboardDisplay) == 0x000018, "Wrong size on ControllerIconWidget_ShowKeyboardDisplay");
static_assert(offsetof(ControllerIconWidget_ShowKeyboardDisplay, KeyDisplayText) == 0x000000, "Member 'ControllerIconWidget_ShowKeyboardDisplay::KeyDisplayText' has a wrong offset!");

// Function SCT.ControllerIconWidget.ShowMouseDisplay
// 0x0008 (0x0008 - 0x0000)
struct ControllerIconWidget_ShowMouseDisplay final
{
public:
	class UTexture2D*                             MouseIcon;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ControllerIconWidget_ShowMouseDisplay) == 0x000008, "Wrong alignment on ControllerIconWidget_ShowMouseDisplay");
static_assert(sizeof(ControllerIconWidget_ShowMouseDisplay) == 0x000008, "Wrong size on ControllerIconWidget_ShowMouseDisplay");
static_assert(offsetof(ControllerIconWidget_ShowMouseDisplay, MouseIcon) == 0x000000, "Member 'ControllerIconWidget_ShowMouseDisplay::MouseIcon' has a wrong offset!");

// Function SCT.ControllerIconWidget.GetCurrentKeyText
// 0x0018 (0x0018 - 0x0000)
struct ControllerIconWidget_GetCurrentKeyText final
{
public:
	class FText                                   ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(ControllerIconWidget_GetCurrentKeyText) == 0x000008, "Wrong alignment on ControllerIconWidget_GetCurrentKeyText");
static_assert(sizeof(ControllerIconWidget_GetCurrentKeyText) == 0x000018, "Wrong size on ControllerIconWidget_GetCurrentKeyText");
static_assert(offsetof(ControllerIconWidget_GetCurrentKeyText, ReturnValue) == 0x000000, "Member 'ControllerIconWidget_GetCurrentKeyText::ReturnValue' has a wrong offset!");

// Function SCT.ControllerInputWidget.ListenForInputActionByPSNRegion
// 0x001C (0x001C - 0x0000)
struct ControllerInputWidget_ListenForInputActionByPSNRegion final
{
public:
	class FName                                   ActionName;                                        // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EInputEvent                                   EventType;                                         // 0x0008(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bConsume;                                          // 0x0009(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x2];                                        // 0x000A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void()>                             Callback;                                          // 0x000C(0x0010)(ConstParm, Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(ControllerInputWidget_ListenForInputActionByPSNRegion) == 0x000004, "Wrong alignment on ControllerInputWidget_ListenForInputActionByPSNRegion");
static_assert(sizeof(ControllerInputWidget_ListenForInputActionByPSNRegion) == 0x00001C, "Wrong size on ControllerInputWidget_ListenForInputActionByPSNRegion");
static_assert(offsetof(ControllerInputWidget_ListenForInputActionByPSNRegion, ActionName) == 0x000000, "Member 'ControllerInputWidget_ListenForInputActionByPSNRegion::ActionName' has a wrong offset!");
static_assert(offsetof(ControllerInputWidget_ListenForInputActionByPSNRegion, EventType) == 0x000008, "Member 'ControllerInputWidget_ListenForInputActionByPSNRegion::EventType' has a wrong offset!");
static_assert(offsetof(ControllerInputWidget_ListenForInputActionByPSNRegion, bConsume) == 0x000009, "Member 'ControllerInputWidget_ListenForInputActionByPSNRegion::bConsume' has a wrong offset!");
static_assert(offsetof(ControllerInputWidget_ListenForInputActionByPSNRegion, Callback) == 0x00000C, "Member 'ControllerInputWidget_ListenForInputActionByPSNRegion::Callback' has a wrong offset!");

// Function SCT.ControllerInputWidget.GetPressedInputActionName
// 0x0008 (0x0008 - 0x0000)
struct ControllerInputWidget_GetPressedInputActionName final
{
public:
	class FName                                   ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ControllerInputWidget_GetPressedInputActionName) == 0x000004, "Wrong alignment on ControllerInputWidget_GetPressedInputActionName");
static_assert(sizeof(ControllerInputWidget_GetPressedInputActionName) == 0x000008, "Wrong size on ControllerInputWidget_GetPressedInputActionName");
static_assert(offsetof(ControllerInputWidget_GetPressedInputActionName, ReturnValue) == 0x000000, "Member 'ControllerInputWidget_GetPressedInputActionName::ReturnValue' has a wrong offset!");

// Function SCT.CustomGameSettingsGIS.ArePersonoidsHidden
// 0x0001 (0x0001 - 0x0000)
struct CustomGameSettingsGIS_ArePersonoidsHidden final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CustomGameSettingsGIS_ArePersonoidsHidden) == 0x000001, "Wrong alignment on CustomGameSettingsGIS_ArePersonoidsHidden");
static_assert(sizeof(CustomGameSettingsGIS_ArePersonoidsHidden) == 0x000001, "Wrong size on CustomGameSettingsGIS_ArePersonoidsHidden");
static_assert(offsetof(CustomGameSettingsGIS_ArePersonoidsHidden, ReturnValue) == 0x000000, "Member 'CustomGameSettingsGIS_ArePersonoidsHidden::ReturnValue' has a wrong offset!");

// Function SCT.CustomGameSettingsGIS.CacheHostSettings
// 0x0034 (0x0034 - 0x0000)
struct CustomGameSettingsGIS_CacheHostSettings final
{
public:
	struct FCustomGameSettings                    Settings;                                          // 0x0000(0x0034)(Parm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(CustomGameSettingsGIS_CacheHostSettings) == 0x000004, "Wrong alignment on CustomGameSettingsGIS_CacheHostSettings");
static_assert(sizeof(CustomGameSettingsGIS_CacheHostSettings) == 0x000034, "Wrong size on CustomGameSettingsGIS_CacheHostSettings");
static_assert(offsetof(CustomGameSettingsGIS_CacheHostSettings, Settings) == 0x000000, "Member 'CustomGameSettingsGIS_CacheHostSettings::Settings' has a wrong offset!");

// Function SCT.CustomGameSettingsGIS.GetAmountOfSyringes
// 0x0004 (0x0004 - 0x0000)
struct CustomGameSettingsGIS_GetAmountOfSyringes final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CustomGameSettingsGIS_GetAmountOfSyringes) == 0x000004, "Wrong alignment on CustomGameSettingsGIS_GetAmountOfSyringes");
static_assert(sizeof(CustomGameSettingsGIS_GetAmountOfSyringes) == 0x000004, "Wrong size on CustomGameSettingsGIS_GetAmountOfSyringes");
static_assert(offsetof(CustomGameSettingsGIS_GetAmountOfSyringes, ReturnValue) == 0x000000, "Member 'CustomGameSettingsGIS_GetAmountOfSyringes::ReturnValue' has a wrong offset!");

// Function SCT.CustomGameSettingsGIS.GetCustomGameSettings
// 0x0034 (0x0034 - 0x0000)
struct CustomGameSettingsGIS_GetCustomGameSettings final
{
public:
	struct FCustomGameSettings                    ReturnValue;                                       // 0x0000(0x0034)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(CustomGameSettingsGIS_GetCustomGameSettings) == 0x000004, "Wrong alignment on CustomGameSettingsGIS_GetCustomGameSettings");
static_assert(sizeof(CustomGameSettingsGIS_GetCustomGameSettings) == 0x000034, "Wrong size on CustomGameSettingsGIS_GetCustomGameSettings");
static_assert(offsetof(CustomGameSettingsGIS_GetCustomGameSettings, ReturnValue) == 0x000000, "Member 'CustomGameSettingsGIS_GetCustomGameSettings::ReturnValue' has a wrong offset!");

// Function SCT.CustomGameSettingsGIS.GetIntermediateLevels
// 0x0004 (0x0004 - 0x0000)
struct CustomGameSettingsGIS_GetIntermediateLevels final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CustomGameSettingsGIS_GetIntermediateLevels) == 0x000004, "Wrong alignment on CustomGameSettingsGIS_GetIntermediateLevels");
static_assert(sizeof(CustomGameSettingsGIS_GetIntermediateLevels) == 0x000004, "Wrong size on CustomGameSettingsGIS_GetIntermediateLevels");
static_assert(offsetof(CustomGameSettingsGIS_GetIntermediateLevels, ReturnValue) == 0x000000, "Member 'CustomGameSettingsGIS_GetIntermediateLevels::ReturnValue' has a wrong offset!");

// Function SCT.CustomGameSettingsGIS.GetMaxPersonoids
// 0x0004 (0x0004 - 0x0000)
struct CustomGameSettingsGIS_GetMaxPersonoids final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CustomGameSettingsGIS_GetMaxPersonoids) == 0x000004, "Wrong alignment on CustomGameSettingsGIS_GetMaxPersonoids");
static_assert(sizeof(CustomGameSettingsGIS_GetMaxPersonoids) == 0x000004, "Wrong size on CustomGameSettingsGIS_GetMaxPersonoids");
static_assert(offsetof(CustomGameSettingsGIS_GetMaxPersonoids, ReturnValue) == 0x000000, "Member 'CustomGameSettingsGIS_GetMaxPersonoids::ReturnValue' has a wrong offset!");

// Function SCT.CustomGameSettingsGIS.GetMinPersonoids
// 0x0004 (0x0004 - 0x0000)
struct CustomGameSettingsGIS_GetMinPersonoids final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CustomGameSettingsGIS_GetMinPersonoids) == 0x000004, "Wrong alignment on CustomGameSettingsGIS_GetMinPersonoids");
static_assert(sizeof(CustomGameSettingsGIS_GetMinPersonoids) == 0x000004, "Wrong size on CustomGameSettingsGIS_GetMinPersonoids");
static_assert(offsetof(CustomGameSettingsGIS_GetMinPersonoids, ReturnValue) == 0x000000, "Member 'CustomGameSettingsGIS_GetMinPersonoids::ReturnValue' has a wrong offset!");

// Function SCT.CustomGameSettingsGIS.GetOxygenCanisterMultiplier
// 0x0004 (0x0004 - 0x0000)
struct CustomGameSettingsGIS_GetOxygenCanisterMultiplier final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CustomGameSettingsGIS_GetOxygenCanisterMultiplier) == 0x000004, "Wrong alignment on CustomGameSettingsGIS_GetOxygenCanisterMultiplier");
static_assert(sizeof(CustomGameSettingsGIS_GetOxygenCanisterMultiplier) == 0x000004, "Wrong size on CustomGameSettingsGIS_GetOxygenCanisterMultiplier");
static_assert(offsetof(CustomGameSettingsGIS_GetOxygenCanisterMultiplier, ReturnValue) == 0x000000, "Member 'CustomGameSettingsGIS_GetOxygenCanisterMultiplier::ReturnValue' has a wrong offset!");

// Function SCT.CustomGameSettingsGIS.GetOxygenGeneratorFailedMultiplier
// 0x0004 (0x0004 - 0x0000)
struct CustomGameSettingsGIS_GetOxygenGeneratorFailedMultiplier final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CustomGameSettingsGIS_GetOxygenGeneratorFailedMultiplier) == 0x000004, "Wrong alignment on CustomGameSettingsGIS_GetOxygenGeneratorFailedMultiplier");
static_assert(sizeof(CustomGameSettingsGIS_GetOxygenGeneratorFailedMultiplier) == 0x000004, "Wrong size on CustomGameSettingsGIS_GetOxygenGeneratorFailedMultiplier");
static_assert(offsetof(CustomGameSettingsGIS_GetOxygenGeneratorFailedMultiplier, ReturnValue) == 0x000000, "Member 'CustomGameSettingsGIS_GetOxygenGeneratorFailedMultiplier::ReturnValue' has a wrong offset!");

// Function SCT.CustomGameSettingsGIS.GetOxygenGeneratorRepairMultiplier
// 0x0004 (0x0004 - 0x0000)
struct CustomGameSettingsGIS_GetOxygenGeneratorRepairMultiplier final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CustomGameSettingsGIS_GetOxygenGeneratorRepairMultiplier) == 0x000004, "Wrong alignment on CustomGameSettingsGIS_GetOxygenGeneratorRepairMultiplier");
static_assert(sizeof(CustomGameSettingsGIS_GetOxygenGeneratorRepairMultiplier) == 0x000004, "Wrong size on CustomGameSettingsGIS_GetOxygenGeneratorRepairMultiplier");
static_assert(offsetof(CustomGameSettingsGIS_GetOxygenGeneratorRepairMultiplier, ReturnValue) == 0x000000, "Member 'CustomGameSettingsGIS_GetOxygenGeneratorRepairMultiplier::ReturnValue' has a wrong offset!");

// Function SCT.CustomGameSettingsGIS.GetOxygenGeneratorSabotageMultiplier
// 0x0004 (0x0004 - 0x0000)
struct CustomGameSettingsGIS_GetOxygenGeneratorSabotageMultiplier final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CustomGameSettingsGIS_GetOxygenGeneratorSabotageMultiplier) == 0x000004, "Wrong alignment on CustomGameSettingsGIS_GetOxygenGeneratorSabotageMultiplier");
static_assert(sizeof(CustomGameSettingsGIS_GetOxygenGeneratorSabotageMultiplier) == 0x000004, "Wrong size on CustomGameSettingsGIS_GetOxygenGeneratorSabotageMultiplier");
static_assert(offsetof(CustomGameSettingsGIS_GetOxygenGeneratorSabotageMultiplier, ReturnValue) == 0x000000, "Member 'CustomGameSettingsGIS_GetOxygenGeneratorSabotageMultiplier::ReturnValue' has a wrong offset!");

// Function SCT.CustomGameSettingsGIS.GetOxygenMultiplier
// 0x0004 (0x0004 - 0x0000)
struct CustomGameSettingsGIS_GetOxygenMultiplier final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CustomGameSettingsGIS_GetOxygenMultiplier) == 0x000004, "Wrong alignment on CustomGameSettingsGIS_GetOxygenMultiplier");
static_assert(sizeof(CustomGameSettingsGIS_GetOxygenMultiplier) == 0x000004, "Wrong size on CustomGameSettingsGIS_GetOxygenMultiplier");
static_assert(offsetof(CustomGameSettingsGIS_GetOxygenMultiplier, ReturnValue) == 0x000000, "Member 'CustomGameSettingsGIS_GetOxygenMultiplier::ReturnValue' has a wrong offset!");

// Function SCT.CustomGameSettingsGIS.GetOxygenOutletSabotageMultiplier
// 0x0004 (0x0004 - 0x0000)
struct CustomGameSettingsGIS_GetOxygenOutletSabotageMultiplier final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CustomGameSettingsGIS_GetOxygenOutletSabotageMultiplier) == 0x000004, "Wrong alignment on CustomGameSettingsGIS_GetOxygenOutletSabotageMultiplier");
static_assert(sizeof(CustomGameSettingsGIS_GetOxygenOutletSabotageMultiplier) == 0x000004, "Wrong size on CustomGameSettingsGIS_GetOxygenOutletSabotageMultiplier");
static_assert(offsetof(CustomGameSettingsGIS_GetOxygenOutletSabotageMultiplier, ReturnValue) == 0x000000, "Member 'CustomGameSettingsGIS_GetOxygenOutletSabotageMultiplier::ReturnValue' has a wrong offset!");

// Function SCT.CustomGameSettingsGIS.GetPassengerLogSpawnMultiplier
// 0x0004 (0x0004 - 0x0000)
struct CustomGameSettingsGIS_GetPassengerLogSpawnMultiplier final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CustomGameSettingsGIS_GetPassengerLogSpawnMultiplier) == 0x000004, "Wrong alignment on CustomGameSettingsGIS_GetPassengerLogSpawnMultiplier");
static_assert(sizeof(CustomGameSettingsGIS_GetPassengerLogSpawnMultiplier) == 0x000004, "Wrong size on CustomGameSettingsGIS_GetPassengerLogSpawnMultiplier");
static_assert(offsetof(CustomGameSettingsGIS_GetPassengerLogSpawnMultiplier, ReturnValue) == 0x000000, "Member 'CustomGameSettingsGIS_GetPassengerLogSpawnMultiplier::ReturnValue' has a wrong offset!");

// Function SCT.CustomGameSettingsGIS.HasGameSettings
// 0x0001 (0x0001 - 0x0000)
struct CustomGameSettingsGIS_HasGameSettings final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CustomGameSettingsGIS_HasGameSettings) == 0x000001, "Wrong alignment on CustomGameSettingsGIS_HasGameSettings");
static_assert(sizeof(CustomGameSettingsGIS_HasGameSettings) == 0x000001, "Wrong size on CustomGameSettingsGIS_HasGameSettings");
static_assert(offsetof(CustomGameSettingsGIS_HasGameSettings, ReturnValue) == 0x000000, "Member 'CustomGameSettingsGIS_HasGameSettings::ReturnValue' has a wrong offset!");

// Function SCT.CustomGameSettingsGIS.IsCatastropheEventEnabled
// 0x0001 (0x0001 - 0x0000)
struct CustomGameSettingsGIS_IsCatastropheEventEnabled final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CustomGameSettingsGIS_IsCatastropheEventEnabled) == 0x000001, "Wrong alignment on CustomGameSettingsGIS_IsCatastropheEventEnabled");
static_assert(sizeof(CustomGameSettingsGIS_IsCatastropheEventEnabled) == 0x000001, "Wrong size on CustomGameSettingsGIS_IsCatastropheEventEnabled");
static_assert(offsetof(CustomGameSettingsGIS_IsCatastropheEventEnabled, ReturnValue) == 0x000000, "Member 'CustomGameSettingsGIS_IsCatastropheEventEnabled::ReturnValue' has a wrong offset!");

// Function SCT.CustomGameSettingsGIS.HasHostSettings
// 0x0001 (0x0001 - 0x0000)
struct CustomGameSettingsGIS_HasHostSettings final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CustomGameSettingsGIS_HasHostSettings) == 0x000001, "Wrong alignment on CustomGameSettingsGIS_HasHostSettings");
static_assert(sizeof(CustomGameSettingsGIS_HasHostSettings) == 0x000001, "Wrong size on CustomGameSettingsGIS_HasHostSettings");
static_assert(offsetof(CustomGameSettingsGIS_HasHostSettings, ReturnValue) == 0x000000, "Member 'CustomGameSettingsGIS_HasHostSettings::ReturnValue' has a wrong offset!");

// Function SCT.CustomizationGenderUserWidget.Init
// 0x0050 (0x0050 - 0x0000)
struct CustomizationGenderUserWidget_Init final
{
public:
	TSubclassOf<class ACustomizationOptions>      OptionsClass;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FCloudCustomizationPayload             RecordPayload;                                     // 0x0008(0x0044)(Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_4C[0x4];                                       // 0x004C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CustomizationGenderUserWidget_Init) == 0x000008, "Wrong alignment on CustomizationGenderUserWidget_Init");
static_assert(sizeof(CustomizationGenderUserWidget_Init) == 0x000050, "Wrong size on CustomizationGenderUserWidget_Init");
static_assert(offsetof(CustomizationGenderUserWidget_Init, OptionsClass) == 0x000000, "Member 'CustomizationGenderUserWidget_Init::OptionsClass' has a wrong offset!");
static_assert(offsetof(CustomizationGenderUserWidget_Init, RecordPayload) == 0x000008, "Member 'CustomizationGenderUserWidget_Init::RecordPayload' has a wrong offset!");

// Function SCT.CustomizationGenderUserWidget.K2_UpdateEyeMaterial
// 0x0010 (0x0010 - 0x0000)
struct CustomizationGenderUserWidget_K2_UpdateEyeMaterial final
{
public:
	class FString                                 Selected;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CustomizationGenderUserWidget_K2_UpdateEyeMaterial) == 0x000008, "Wrong alignment on CustomizationGenderUserWidget_K2_UpdateEyeMaterial");
static_assert(sizeof(CustomizationGenderUserWidget_K2_UpdateEyeMaterial) == 0x000010, "Wrong size on CustomizationGenderUserWidget_K2_UpdateEyeMaterial");
static_assert(offsetof(CustomizationGenderUserWidget_K2_UpdateEyeMaterial, Selected) == 0x000000, "Member 'CustomizationGenderUserWidget_K2_UpdateEyeMaterial::Selected' has a wrong offset!");

// Function SCT.CustomizationGenderUserWidget.K2_UpdateHairColor
// 0x0010 (0x0010 - 0x0000)
struct CustomizationGenderUserWidget_K2_UpdateHairColor final
{
public:
	class FString                                 Selected;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CustomizationGenderUserWidget_K2_UpdateHairColor) == 0x000008, "Wrong alignment on CustomizationGenderUserWidget_K2_UpdateHairColor");
static_assert(sizeof(CustomizationGenderUserWidget_K2_UpdateHairColor) == 0x000010, "Wrong size on CustomizationGenderUserWidget_K2_UpdateHairColor");
static_assert(offsetof(CustomizationGenderUserWidget_K2_UpdateHairColor, Selected) == 0x000000, "Member 'CustomizationGenderUserWidget_K2_UpdateHairColor::Selected' has a wrong offset!");

// Function SCT.CustomizationGenderUserWidget.K2_UpdatePreset
// 0x0010 (0x0010 - 0x0000)
struct CustomizationGenderUserWidget_K2_UpdatePreset final
{
public:
	class FString                                 Selected;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CustomizationGenderUserWidget_K2_UpdatePreset) == 0x000008, "Wrong alignment on CustomizationGenderUserWidget_K2_UpdatePreset");
static_assert(sizeof(CustomizationGenderUserWidget_K2_UpdatePreset) == 0x000010, "Wrong size on CustomizationGenderUserWidget_K2_UpdatePreset");
static_assert(offsetof(CustomizationGenderUserWidget_K2_UpdatePreset, Selected) == 0x000000, "Member 'CustomizationGenderUserWidget_K2_UpdatePreset::Selected' has a wrong offset!");

// Function SCT.CustomizationGenderUserWidget.K2_UpdatePrimaryPatternMaterial
// 0x0010 (0x0010 - 0x0000)
struct CustomizationGenderUserWidget_K2_UpdatePrimaryPatternMaterial final
{
public:
	class FString                                 Selected;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CustomizationGenderUserWidget_K2_UpdatePrimaryPatternMaterial) == 0x000008, "Wrong alignment on CustomizationGenderUserWidget_K2_UpdatePrimaryPatternMaterial");
static_assert(sizeof(CustomizationGenderUserWidget_K2_UpdatePrimaryPatternMaterial) == 0x000010, "Wrong size on CustomizationGenderUserWidget_K2_UpdatePrimaryPatternMaterial");
static_assert(offsetof(CustomizationGenderUserWidget_K2_UpdatePrimaryPatternMaterial, Selected) == 0x000000, "Member 'CustomizationGenderUserWidget_K2_UpdatePrimaryPatternMaterial::Selected' has a wrong offset!");

// Function SCT.CustomizationGenderUserWidget.K2_UpdateSecondaryPatternMaterial
// 0x0010 (0x0010 - 0x0000)
struct CustomizationGenderUserWidget_K2_UpdateSecondaryPatternMaterial final
{
public:
	class FString                                 Selected;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CustomizationGenderUserWidget_K2_UpdateSecondaryPatternMaterial) == 0x000008, "Wrong alignment on CustomizationGenderUserWidget_K2_UpdateSecondaryPatternMaterial");
static_assert(sizeof(CustomizationGenderUserWidget_K2_UpdateSecondaryPatternMaterial) == 0x000010, "Wrong size on CustomizationGenderUserWidget_K2_UpdateSecondaryPatternMaterial");
static_assert(offsetof(CustomizationGenderUserWidget_K2_UpdateSecondaryPatternMaterial, Selected) == 0x000000, "Member 'CustomizationGenderUserWidget_K2_UpdateSecondaryPatternMaterial::Selected' has a wrong offset!");

// Function SCT.CustomizationGenderUserWidget.K2_UpdateSkinMaterial
// 0x0010 (0x0010 - 0x0000)
struct CustomizationGenderUserWidget_K2_UpdateSkinMaterial final
{
public:
	class FString                                 Selected;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CustomizationGenderUserWidget_K2_UpdateSkinMaterial) == 0x000008, "Wrong alignment on CustomizationGenderUserWidget_K2_UpdateSkinMaterial");
static_assert(sizeof(CustomizationGenderUserWidget_K2_UpdateSkinMaterial) == 0x000010, "Wrong size on CustomizationGenderUserWidget_K2_UpdateSkinMaterial");
static_assert(offsetof(CustomizationGenderUserWidget_K2_UpdateSkinMaterial, Selected) == 0x000000, "Member 'CustomizationGenderUserWidget_K2_UpdateSkinMaterial::Selected' has a wrong offset!");

// Function SCT.CustomizationGenderUserWidget.ValidateCustomizationRecord
// 0x0044 (0x0044 - 0x0000)
struct CustomizationGenderUserWidget_ValidateCustomizationRecord final
{
public:
	struct FCloudCustomizationPayload             UnverifiedRecord;                                  // 0x0000(0x0044)(Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(CustomizationGenderUserWidget_ValidateCustomizationRecord) == 0x000004, "Wrong alignment on CustomizationGenderUserWidget_ValidateCustomizationRecord");
static_assert(sizeof(CustomizationGenderUserWidget_ValidateCustomizationRecord) == 0x000044, "Wrong size on CustomizationGenderUserWidget_ValidateCustomizationRecord");
static_assert(offsetof(CustomizationGenderUserWidget_ValidateCustomizationRecord, UnverifiedRecord) == 0x000000, "Member 'CustomizationGenderUserWidget_ValidateCustomizationRecord::UnverifiedRecord' has a wrong offset!");

// Function SCT.VruumbaCustomizationScrollBoxUserWidget.HorizontalBoundaryHit
// 0x0010 (0x0010 - 0x0000)
struct VruumbaCustomizationScrollBoxUserWidget_HorizontalBoundaryHit final
{
public:
	EUINavigation                                 InNavigation;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UWidget*                                ReturnValue;                                       // 0x0008(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VruumbaCustomizationScrollBoxUserWidget_HorizontalBoundaryHit) == 0x000008, "Wrong alignment on VruumbaCustomizationScrollBoxUserWidget_HorizontalBoundaryHit");
static_assert(sizeof(VruumbaCustomizationScrollBoxUserWidget_HorizontalBoundaryHit) == 0x000010, "Wrong size on VruumbaCustomizationScrollBoxUserWidget_HorizontalBoundaryHit");
static_assert(offsetof(VruumbaCustomizationScrollBoxUserWidget_HorizontalBoundaryHit, InNavigation) == 0x000000, "Member 'VruumbaCustomizationScrollBoxUserWidget_HorizontalBoundaryHit::InNavigation' has a wrong offset!");
static_assert(offsetof(VruumbaCustomizationScrollBoxUserWidget_HorizontalBoundaryHit, ReturnValue) == 0x000008, "Member 'VruumbaCustomizationScrollBoxUserWidget_HorizontalBoundaryHit::ReturnValue' has a wrong offset!");

// Function SCT.VruumbaCustomizationScrollBoxUserWidget.K2_UpdateAntenna
// 0x0010 (0x0010 - 0x0000)
struct VruumbaCustomizationScrollBoxUserWidget_K2_UpdateAntenna final
{
public:
	class FString                                 Selected;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VruumbaCustomizationScrollBoxUserWidget_K2_UpdateAntenna) == 0x000008, "Wrong alignment on VruumbaCustomizationScrollBoxUserWidget_K2_UpdateAntenna");
static_assert(sizeof(VruumbaCustomizationScrollBoxUserWidget_K2_UpdateAntenna) == 0x000010, "Wrong size on VruumbaCustomizationScrollBoxUserWidget_K2_UpdateAntenna");
static_assert(offsetof(VruumbaCustomizationScrollBoxUserWidget_K2_UpdateAntenna, Selected) == 0x000000, "Member 'VruumbaCustomizationScrollBoxUserWidget_K2_UpdateAntenna::Selected' has a wrong offset!");

// Function SCT.VruumbaCustomizationScrollBoxUserWidget.K2_UpdateBody
// 0x0010 (0x0010 - 0x0000)
struct VruumbaCustomizationScrollBoxUserWidget_K2_UpdateBody final
{
public:
	class FString                                 Selected;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VruumbaCustomizationScrollBoxUserWidget_K2_UpdateBody) == 0x000008, "Wrong alignment on VruumbaCustomizationScrollBoxUserWidget_K2_UpdateBody");
static_assert(sizeof(VruumbaCustomizationScrollBoxUserWidget_K2_UpdateBody) == 0x000010, "Wrong size on VruumbaCustomizationScrollBoxUserWidget_K2_UpdateBody");
static_assert(offsetof(VruumbaCustomizationScrollBoxUserWidget_K2_UpdateBody, Selected) == 0x000000, "Member 'VruumbaCustomizationScrollBoxUserWidget_K2_UpdateBody::Selected' has a wrong offset!");

// Function SCT.VruumbaCustomizationScrollBoxUserWidget.K2_UpdateExhaust
// 0x0010 (0x0010 - 0x0000)
struct VruumbaCustomizationScrollBoxUserWidget_K2_UpdateExhaust final
{
public:
	class FString                                 Selected;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VruumbaCustomizationScrollBoxUserWidget_K2_UpdateExhaust) == 0x000008, "Wrong alignment on VruumbaCustomizationScrollBoxUserWidget_K2_UpdateExhaust");
static_assert(sizeof(VruumbaCustomizationScrollBoxUserWidget_K2_UpdateExhaust) == 0x000010, "Wrong size on VruumbaCustomizationScrollBoxUserWidget_K2_UpdateExhaust");
static_assert(offsetof(VruumbaCustomizationScrollBoxUserWidget_K2_UpdateExhaust, Selected) == 0x000000, "Member 'VruumbaCustomizationScrollBoxUserWidget_K2_UpdateExhaust::Selected' has a wrong offset!");

// Function SCT.VruumbaCustomizationScrollBoxUserWidget.K2_UpdateFan
// 0x0010 (0x0010 - 0x0000)
struct VruumbaCustomizationScrollBoxUserWidget_K2_UpdateFan final
{
public:
	class FString                                 Selected;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VruumbaCustomizationScrollBoxUserWidget_K2_UpdateFan) == 0x000008, "Wrong alignment on VruumbaCustomizationScrollBoxUserWidget_K2_UpdateFan");
static_assert(sizeof(VruumbaCustomizationScrollBoxUserWidget_K2_UpdateFan) == 0x000010, "Wrong size on VruumbaCustomizationScrollBoxUserWidget_K2_UpdateFan");
static_assert(offsetof(VruumbaCustomizationScrollBoxUserWidget_K2_UpdateFan, Selected) == 0x000000, "Member 'VruumbaCustomizationScrollBoxUserWidget_K2_UpdateFan::Selected' has a wrong offset!");

// Function SCT.VruumbaCustomizationScrollBoxUserWidget.K2_UpdateFlag
// 0x0010 (0x0010 - 0x0000)
struct VruumbaCustomizationScrollBoxUserWidget_K2_UpdateFlag final
{
public:
	class FString                                 Selected;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VruumbaCustomizationScrollBoxUserWidget_K2_UpdateFlag) == 0x000008, "Wrong alignment on VruumbaCustomizationScrollBoxUserWidget_K2_UpdateFlag");
static_assert(sizeof(VruumbaCustomizationScrollBoxUserWidget_K2_UpdateFlag) == 0x000010, "Wrong size on VruumbaCustomizationScrollBoxUserWidget_K2_UpdateFlag");
static_assert(offsetof(VruumbaCustomizationScrollBoxUserWidget_K2_UpdateFlag, Selected) == 0x000000, "Member 'VruumbaCustomizationScrollBoxUserWidget_K2_UpdateFlag::Selected' has a wrong offset!");

// Function SCT.VruumbaCustomizationScrollBoxUserWidget.K2_UpdateParticleEffect
// 0x0010 (0x0010 - 0x0000)
struct VruumbaCustomizationScrollBoxUserWidget_K2_UpdateParticleEffect final
{
public:
	class FString                                 Selected;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VruumbaCustomizationScrollBoxUserWidget_K2_UpdateParticleEffect) == 0x000008, "Wrong alignment on VruumbaCustomizationScrollBoxUserWidget_K2_UpdateParticleEffect");
static_assert(sizeof(VruumbaCustomizationScrollBoxUserWidget_K2_UpdateParticleEffect) == 0x000010, "Wrong size on VruumbaCustomizationScrollBoxUserWidget_K2_UpdateParticleEffect");
static_assert(offsetof(VruumbaCustomizationScrollBoxUserWidget_K2_UpdateParticleEffect, Selected) == 0x000000, "Member 'VruumbaCustomizationScrollBoxUserWidget_K2_UpdateParticleEffect::Selected' has a wrong offset!");

// Function SCT.CustomizationOptions.AddEyeColor
// 0x0018 (0x0018 - 0x0000)
struct CustomizationOptions_AddEyeColor final
{
public:
	struct FLinearColor                           ThumbnailColor;                                    // 0x0000(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialInstance*                      SkinMaterial;                                      // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CustomizationOptions_AddEyeColor) == 0x000008, "Wrong alignment on CustomizationOptions_AddEyeColor");
static_assert(sizeof(CustomizationOptions_AddEyeColor) == 0x000018, "Wrong size on CustomizationOptions_AddEyeColor");
static_assert(offsetof(CustomizationOptions_AddEyeColor, ThumbnailColor) == 0x000000, "Member 'CustomizationOptions_AddEyeColor::ThumbnailColor' has a wrong offset!");
static_assert(offsetof(CustomizationOptions_AddEyeColor, SkinMaterial) == 0x000010, "Member 'CustomizationOptions_AddEyeColor::SkinMaterial' has a wrong offset!");

// Function SCT.CustomizationOptions.AddPreset
// 0x0058 (0x0058 - 0x0000)
struct CustomizationOptions_AddPreset final
{
public:
	class UTexture2D*                             IconThumbnail;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<class FString, float>                    MorphTargets;                                      // 0x0008(0x0050)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(CustomizationOptions_AddPreset) == 0x000008, "Wrong alignment on CustomizationOptions_AddPreset");
static_assert(sizeof(CustomizationOptions_AddPreset) == 0x000058, "Wrong size on CustomizationOptions_AddPreset");
static_assert(offsetof(CustomizationOptions_AddPreset, IconThumbnail) == 0x000000, "Member 'CustomizationOptions_AddPreset::IconThumbnail' has a wrong offset!");
static_assert(offsetof(CustomizationOptions_AddPreset, MorphTargets) == 0x000008, "Member 'CustomizationOptions_AddPreset::MorphTargets' has a wrong offset!");

// Function SCT.CustomizationOptions.AddSkinTone
// 0x0018 (0x0018 - 0x0000)
struct CustomizationOptions_AddSkinTone final
{
public:
	struct FLinearColor                           ThumbnailColor;                                    // 0x0000(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialInstance*                      SkinMaterial;                                      // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CustomizationOptions_AddSkinTone) == 0x000008, "Wrong alignment on CustomizationOptions_AddSkinTone");
static_assert(sizeof(CustomizationOptions_AddSkinTone) == 0x000018, "Wrong size on CustomizationOptions_AddSkinTone");
static_assert(offsetof(CustomizationOptions_AddSkinTone, ThumbnailColor) == 0x000000, "Member 'CustomizationOptions_AddSkinTone::ThumbnailColor' has a wrong offset!");
static_assert(offsetof(CustomizationOptions_AddSkinTone, SkinMaterial) == 0x000010, "Member 'CustomizationOptions_AddSkinTone::SkinMaterial' has a wrong offset!");

// Function SCT.CustomizationOptions.AddWardrobeOption
// 0x0060 (0x0060 - 0x0000)
struct CustomizationOptions_AddWardrobeOption final
{
public:
	ECustomizationOption                          Type;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UTexture2D*                             IconThumbnail;                                     // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UStreamableRenderAsset*                 Mesh;                                              // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UMaterialInstance*>              PrimaryPatterns;                                   // 0x0018(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class UMaterialInstance*>              SecondaryPatterns;                                 // 0x0028(0x0010)(Parm, ZeroConstructor, AdvancedDisplay, NativeAccessSpecifierPublic)
	TArray<int32>                                 PatternCost;                                       // 0x0038(0x0010)(Parm, ZeroConstructor, AdvancedDisplay, NativeAccessSpecifierPublic)
	int32                                         UnlockLevel;                                       // 0x0048(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4C[0x4];                                       // 0x004C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UTexture2D*                             CharacterMask;                                     // 0x0050(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          DoMaskLegs;                                        // 0x0058(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_59[0x7];                                       // 0x0059(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CustomizationOptions_AddWardrobeOption) == 0x000008, "Wrong alignment on CustomizationOptions_AddWardrobeOption");
static_assert(sizeof(CustomizationOptions_AddWardrobeOption) == 0x000060, "Wrong size on CustomizationOptions_AddWardrobeOption");
static_assert(offsetof(CustomizationOptions_AddWardrobeOption, Type) == 0x000000, "Member 'CustomizationOptions_AddWardrobeOption::Type' has a wrong offset!");
static_assert(offsetof(CustomizationOptions_AddWardrobeOption, IconThumbnail) == 0x000008, "Member 'CustomizationOptions_AddWardrobeOption::IconThumbnail' has a wrong offset!");
static_assert(offsetof(CustomizationOptions_AddWardrobeOption, Mesh) == 0x000010, "Member 'CustomizationOptions_AddWardrobeOption::Mesh' has a wrong offset!");
static_assert(offsetof(CustomizationOptions_AddWardrobeOption, PrimaryPatterns) == 0x000018, "Member 'CustomizationOptions_AddWardrobeOption::PrimaryPatterns' has a wrong offset!");
static_assert(offsetof(CustomizationOptions_AddWardrobeOption, SecondaryPatterns) == 0x000028, "Member 'CustomizationOptions_AddWardrobeOption::SecondaryPatterns' has a wrong offset!");
static_assert(offsetof(CustomizationOptions_AddWardrobeOption, PatternCost) == 0x000038, "Member 'CustomizationOptions_AddWardrobeOption::PatternCost' has a wrong offset!");
static_assert(offsetof(CustomizationOptions_AddWardrobeOption, UnlockLevel) == 0x000048, "Member 'CustomizationOptions_AddWardrobeOption::UnlockLevel' has a wrong offset!");
static_assert(offsetof(CustomizationOptions_AddWardrobeOption, CharacterMask) == 0x000050, "Member 'CustomizationOptions_AddWardrobeOption::CharacterMask' has a wrong offset!");
static_assert(offsetof(CustomizationOptions_AddWardrobeOption, DoMaskLegs) == 0x000058, "Member 'CustomizationOptions_AddWardrobeOption::DoMaskLegs' has a wrong offset!");

// Function SCT.CustomizationMenuUserWidget.InitializeMenuTabs
// 0x0001 (0x0001 - 0x0000)
struct CustomizationMenuUserWidget_InitializeMenuTabs final
{
public:
	bool                                          IsMale;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CustomizationMenuUserWidget_InitializeMenuTabs) == 0x000001, "Wrong alignment on CustomizationMenuUserWidget_InitializeMenuTabs");
static_assert(sizeof(CustomizationMenuUserWidget_InitializeMenuTabs) == 0x000001, "Wrong size on CustomizationMenuUserWidget_InitializeMenuTabs");
static_assert(offsetof(CustomizationMenuUserWidget_InitializeMenuTabs, IsMale) == 0x000000, "Member 'CustomizationMenuUserWidget_InitializeMenuTabs::IsMale' has a wrong offset!");

// Function SCT.CustomizationMenuUserWidget.UpdateGenderTabStates
// 0x0010 (0x0010 - 0x0000)
struct CustomizationMenuUserWidget_UpdateGenderTabStates final
{
public:
	class UButton*                                FocusedGenderButton;                               // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UButton*                                UnfocusedGenderButton;                             // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CustomizationMenuUserWidget_UpdateGenderTabStates) == 0x000008, "Wrong alignment on CustomizationMenuUserWidget_UpdateGenderTabStates");
static_assert(sizeof(CustomizationMenuUserWidget_UpdateGenderTabStates) == 0x000010, "Wrong size on CustomizationMenuUserWidget_UpdateGenderTabStates");
static_assert(offsetof(CustomizationMenuUserWidget_UpdateGenderTabStates, FocusedGenderButton) == 0x000000, "Member 'CustomizationMenuUserWidget_UpdateGenderTabStates::FocusedGenderButton' has a wrong offset!");
static_assert(offsetof(CustomizationMenuUserWidget_UpdateGenderTabStates, UnfocusedGenderButton) == 0x000008, "Member 'CustomizationMenuUserWidget_UpdateGenderTabStates::UnfocusedGenderButton' has a wrong offset!");

// Function SCT.CustomizationMenuUserWidget.ZoomInOnCharacter
// 0x0001 (0x0001 - 0x0000)
struct CustomizationMenuUserWidget_ZoomInOnCharacter final
{
public:
	EPlayerCustomizationType                      Category;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CustomizationMenuUserWidget_ZoomInOnCharacter) == 0x000001, "Wrong alignment on CustomizationMenuUserWidget_ZoomInOnCharacter");
static_assert(sizeof(CustomizationMenuUserWidget_ZoomInOnCharacter) == 0x000001, "Wrong size on CustomizationMenuUserWidget_ZoomInOnCharacter");
static_assert(offsetof(CustomizationMenuUserWidget_ZoomInOnCharacter, Category) == 0x000000, "Member 'CustomizationMenuUserWidget_ZoomInOnCharacter::Category' has a wrong offset!");

// Function SCT.CustomizationRowUserWidget.AddCustomizationItem
// 0x00B8 (0x00B8 - 0x0000)
struct CustomizationRowUserWidget_AddCustomizationItem final
{
public:
	struct FPlayerCustomizationItem               Item;                                              // 0x0000(0x00A8)(Parm, NativeAccessSpecifierPublic)
	TSubclassOf<class UCustomizationSlotUserWidget> SlotClass;                                         // 0x00A8(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCustomizationSlotUserWidget*           ReturnValue;                                       // 0x00B0(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CustomizationRowUserWidget_AddCustomizationItem) == 0x000008, "Wrong alignment on CustomizationRowUserWidget_AddCustomizationItem");
static_assert(sizeof(CustomizationRowUserWidget_AddCustomizationItem) == 0x0000B8, "Wrong size on CustomizationRowUserWidget_AddCustomizationItem");
static_assert(offsetof(CustomizationRowUserWidget_AddCustomizationItem, Item) == 0x000000, "Member 'CustomizationRowUserWidget_AddCustomizationItem::Item' has a wrong offset!");
static_assert(offsetof(CustomizationRowUserWidget_AddCustomizationItem, SlotClass) == 0x0000A8, "Member 'CustomizationRowUserWidget_AddCustomizationItem::SlotClass' has a wrong offset!");
static_assert(offsetof(CustomizationRowUserWidget_AddCustomizationItem, ReturnValue) == 0x0000B0, "Member 'CustomizationRowUserWidget_AddCustomizationItem::ReturnValue' has a wrong offset!");

// Function SCT.ItemCardUserWidget.BindToNewItemSelected
// 0x0008 (0x0008 - 0x0000)
struct ItemCardUserWidget_BindToNewItemSelected final
{
public:
	class UCustomizationScrollBoxUserWidgetBase*  CustomizationScrollBoxBase;                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ItemCardUserWidget_BindToNewItemSelected) == 0x000008, "Wrong alignment on ItemCardUserWidget_BindToNewItemSelected");
static_assert(sizeof(ItemCardUserWidget_BindToNewItemSelected) == 0x000008, "Wrong size on ItemCardUserWidget_BindToNewItemSelected");
static_assert(offsetof(ItemCardUserWidget_BindToNewItemSelected, CustomizationScrollBoxBase) == 0x000000, "Member 'ItemCardUserWidget_BindToNewItemSelected::CustomizationScrollBoxBase' has a wrong offset!");

// Function SCT.ItemCardUserWidget.SetCheckboxVisibility
// 0x0001 (0x0001 - 0x0000)
struct ItemCardUserWidget_SetCheckboxVisibility final
{
public:
	ESlateVisibility                              NewVisibility;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ItemCardUserWidget_SetCheckboxVisibility) == 0x000001, "Wrong alignment on ItemCardUserWidget_SetCheckboxVisibility");
static_assert(sizeof(ItemCardUserWidget_SetCheckboxVisibility) == 0x000001, "Wrong size on ItemCardUserWidget_SetCheckboxVisibility");
static_assert(offsetof(ItemCardUserWidget_SetCheckboxVisibility, NewVisibility) == 0x000000, "Member 'ItemCardUserWidget_SetCheckboxVisibility::NewVisibility' has a wrong offset!");

// Function SCT.CustomizationMaterialButtonUserWidget.BindToUpdateEyeMaterial
// 0x0008 (0x0008 - 0x0000)
struct CustomizationMaterialButtonUserWidget_BindToUpdateEyeMaterial final
{
public:
	class UCustomizationScrollBoxUserWidget*      CustomizationScrollBox;                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CustomizationMaterialButtonUserWidget_BindToUpdateEyeMaterial) == 0x000008, "Wrong alignment on CustomizationMaterialButtonUserWidget_BindToUpdateEyeMaterial");
static_assert(sizeof(CustomizationMaterialButtonUserWidget_BindToUpdateEyeMaterial) == 0x000008, "Wrong size on CustomizationMaterialButtonUserWidget_BindToUpdateEyeMaterial");
static_assert(offsetof(CustomizationMaterialButtonUserWidget_BindToUpdateEyeMaterial, CustomizationScrollBox) == 0x000000, "Member 'CustomizationMaterialButtonUserWidget_BindToUpdateEyeMaterial::CustomizationScrollBox' has a wrong offset!");

// Function SCT.CustomizationMaterialButtonUserWidget.BindToUpdateHairColor
// 0x0008 (0x0008 - 0x0000)
struct CustomizationMaterialButtonUserWidget_BindToUpdateHairColor final
{
public:
	class UCustomizationScrollBoxUserWidget*      CustomizationScrollBox;                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CustomizationMaterialButtonUserWidget_BindToUpdateHairColor) == 0x000008, "Wrong alignment on CustomizationMaterialButtonUserWidget_BindToUpdateHairColor");
static_assert(sizeof(CustomizationMaterialButtonUserWidget_BindToUpdateHairColor) == 0x000008, "Wrong size on CustomizationMaterialButtonUserWidget_BindToUpdateHairColor");
static_assert(offsetof(CustomizationMaterialButtonUserWidget_BindToUpdateHairColor, CustomizationScrollBox) == 0x000000, "Member 'CustomizationMaterialButtonUserWidget_BindToUpdateHairColor::CustomizationScrollBox' has a wrong offset!");

// Function SCT.CustomizationMaterialButtonUserWidget.BindToUpdateSkinMaterial
// 0x0008 (0x0008 - 0x0000)
struct CustomizationMaterialButtonUserWidget_BindToUpdateSkinMaterial final
{
public:
	class UCustomizationScrollBoxUserWidget*      CustomizationScrollBox;                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CustomizationMaterialButtonUserWidget_BindToUpdateSkinMaterial) == 0x000008, "Wrong alignment on CustomizationMaterialButtonUserWidget_BindToUpdateSkinMaterial");
static_assert(sizeof(CustomizationMaterialButtonUserWidget_BindToUpdateSkinMaterial) == 0x000008, "Wrong size on CustomizationMaterialButtonUserWidget_BindToUpdateSkinMaterial");
static_assert(offsetof(CustomizationMaterialButtonUserWidget_BindToUpdateSkinMaterial, CustomizationScrollBox) == 0x000000, "Member 'CustomizationMaterialButtonUserWidget_BindToUpdateSkinMaterial::CustomizationScrollBox' has a wrong offset!");

// Function SCT.BlueprintXboxUserPrivilegeCheckerCallbackProxy.CheckCommunicationPrivilege
// 0x0030 (0x0030 - 0x0000)
struct BlueprintXboxUserPrivilegeCheckerCallbackProxy_CheckCommunicationPrivilege final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class APlayerController*                      InPlayerController;                                // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 InXboxLiveUserID;                                  // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInForceUpdate;                                    // 0x0020(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UBlueprintXboxUserPrivilegeCheckerCallbackProxy* ReturnValue;                                       // 0x0028(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BlueprintXboxUserPrivilegeCheckerCallbackProxy_CheckCommunicationPrivilege) == 0x000008, "Wrong alignment on BlueprintXboxUserPrivilegeCheckerCallbackProxy_CheckCommunicationPrivilege");
static_assert(sizeof(BlueprintXboxUserPrivilegeCheckerCallbackProxy_CheckCommunicationPrivilege) == 0x000030, "Wrong size on BlueprintXboxUserPrivilegeCheckerCallbackProxy_CheckCommunicationPrivilege");
static_assert(offsetof(BlueprintXboxUserPrivilegeCheckerCallbackProxy_CheckCommunicationPrivilege, WorldContextObject) == 0x000000, "Member 'BlueprintXboxUserPrivilegeCheckerCallbackProxy_CheckCommunicationPrivilege::WorldContextObject' has a wrong offset!");
static_assert(offsetof(BlueprintXboxUserPrivilegeCheckerCallbackProxy_CheckCommunicationPrivilege, InPlayerController) == 0x000008, "Member 'BlueprintXboxUserPrivilegeCheckerCallbackProxy_CheckCommunicationPrivilege::InPlayerController' has a wrong offset!");
static_assert(offsetof(BlueprintXboxUserPrivilegeCheckerCallbackProxy_CheckCommunicationPrivilege, InXboxLiveUserID) == 0x000010, "Member 'BlueprintXboxUserPrivilegeCheckerCallbackProxy_CheckCommunicationPrivilege::InXboxLiveUserID' has a wrong offset!");
static_assert(offsetof(BlueprintXboxUserPrivilegeCheckerCallbackProxy_CheckCommunicationPrivilege, bInForceUpdate) == 0x000020, "Member 'BlueprintXboxUserPrivilegeCheckerCallbackProxy_CheckCommunicationPrivilege::bInForceUpdate' has a wrong offset!");
static_assert(offsetof(BlueprintXboxUserPrivilegeCheckerCallbackProxy_CheckCommunicationPrivilege, ReturnValue) == 0x000028, "Member 'BlueprintXboxUserPrivilegeCheckerCallbackProxy_CheckCommunicationPrivilege::ReturnValue' has a wrong offset!");

// Function SCT.CustomizationPresetSlotUserWidget.BindToUpdatePreset
// 0x0008 (0x0008 - 0x0000)
struct CustomizationPresetSlotUserWidget_BindToUpdatePreset final
{
public:
	class UCustomizationScrollBoxUserWidget*      CustomizationScrollBox;                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CustomizationPresetSlotUserWidget_BindToUpdatePreset) == 0x000008, "Wrong alignment on CustomizationPresetSlotUserWidget_BindToUpdatePreset");
static_assert(sizeof(CustomizationPresetSlotUserWidget_BindToUpdatePreset) == 0x000008, "Wrong size on CustomizationPresetSlotUserWidget_BindToUpdatePreset");
static_assert(offsetof(CustomizationPresetSlotUserWidget_BindToUpdatePreset, CustomizationScrollBox) == 0x000000, "Member 'CustomizationPresetSlotUserWidget_BindToUpdatePreset::CustomizationScrollBox' has a wrong offset!");

// Function SCT.CustomizationSlotUserWidget.ChangePlayerClothing_Skeletal
// 0x0010 (0x0010 - 0x0000)
struct CustomizationSlotUserWidget_ChangePlayerClothing_Skeletal final
{
public:
	class UMeshComponent*                         MeshComponent;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PrimaryMaterialIndex;                              // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SecondaryMaterialIndex;                            // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CustomizationSlotUserWidget_ChangePlayerClothing_Skeletal) == 0x000008, "Wrong alignment on CustomizationSlotUserWidget_ChangePlayerClothing_Skeletal");
static_assert(sizeof(CustomizationSlotUserWidget_ChangePlayerClothing_Skeletal) == 0x000010, "Wrong size on CustomizationSlotUserWidget_ChangePlayerClothing_Skeletal");
static_assert(offsetof(CustomizationSlotUserWidget_ChangePlayerClothing_Skeletal, MeshComponent) == 0x000000, "Member 'CustomizationSlotUserWidget_ChangePlayerClothing_Skeletal::MeshComponent' has a wrong offset!");
static_assert(offsetof(CustomizationSlotUserWidget_ChangePlayerClothing_Skeletal, PrimaryMaterialIndex) == 0x000008, "Member 'CustomizationSlotUserWidget_ChangePlayerClothing_Skeletal::PrimaryMaterialIndex' has a wrong offset!");
static_assert(offsetof(CustomizationSlotUserWidget_ChangePlayerClothing_Skeletal, SecondaryMaterialIndex) == 0x00000C, "Member 'CustomizationSlotUserWidget_ChangePlayerClothing_Skeletal::SecondaryMaterialIndex' has a wrong offset!");

// Function SCT.CustomizationSlotUserWidget.ChangePlayerClothing_Static
// 0x0010 (0x0010 - 0x0000)
struct CustomizationSlotUserWidget_ChangePlayerClothing_Static final
{
public:
	class UMeshComponent*                         MeshComponent;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PrimaryMaterialIndex;                              // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SecondaryMaterialIndex;                            // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CustomizationSlotUserWidget_ChangePlayerClothing_Static) == 0x000008, "Wrong alignment on CustomizationSlotUserWidget_ChangePlayerClothing_Static");
static_assert(sizeof(CustomizationSlotUserWidget_ChangePlayerClothing_Static) == 0x000010, "Wrong size on CustomizationSlotUserWidget_ChangePlayerClothing_Static");
static_assert(offsetof(CustomizationSlotUserWidget_ChangePlayerClothing_Static, MeshComponent) == 0x000000, "Member 'CustomizationSlotUserWidget_ChangePlayerClothing_Static::MeshComponent' has a wrong offset!");
static_assert(offsetof(CustomizationSlotUserWidget_ChangePlayerClothing_Static, PrimaryMaterialIndex) == 0x000008, "Member 'CustomizationSlotUserWidget_ChangePlayerClothing_Static::PrimaryMaterialIndex' has a wrong offset!");
static_assert(offsetof(CustomizationSlotUserWidget_ChangePlayerClothing_Static, SecondaryMaterialIndex) == 0x00000C, "Member 'CustomizationSlotUserWidget_ChangePlayerClothing_Static::SecondaryMaterialIndex' has a wrong offset!");

// Function SCT.CustomizationSlotUserWidget.OnUpdateHorizontalPaddingOverTime
// 0x0008 (0x0008 - 0x0000)
struct CustomizationSlotUserWidget_OnUpdateHorizontalPaddingOverTime final
{
public:
	float                                         TargetValue;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InterpSpeed;                                       // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CustomizationSlotUserWidget_OnUpdateHorizontalPaddingOverTime) == 0x000004, "Wrong alignment on CustomizationSlotUserWidget_OnUpdateHorizontalPaddingOverTime");
static_assert(sizeof(CustomizationSlotUserWidget_OnUpdateHorizontalPaddingOverTime) == 0x000008, "Wrong size on CustomizationSlotUserWidget_OnUpdateHorizontalPaddingOverTime");
static_assert(offsetof(CustomizationSlotUserWidget_OnUpdateHorizontalPaddingOverTime, TargetValue) == 0x000000, "Member 'CustomizationSlotUserWidget_OnUpdateHorizontalPaddingOverTime::TargetValue' has a wrong offset!");
static_assert(offsetof(CustomizationSlotUserWidget_OnUpdateHorizontalPaddingOverTime, InterpSpeed) == 0x000004, "Member 'CustomizationSlotUserWidget_OnUpdateHorizontalPaddingOverTime::InterpSpeed' has a wrong offset!");

// Function SCT.CustomizationSlotUserWidget.OnUpdateOpacityOverTime
// 0x0008 (0x0008 - 0x0000)
struct CustomizationSlotUserWidget_OnUpdateOpacityOverTime final
{
public:
	float                                         TargetValue;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InterpSpeed;                                       // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CustomizationSlotUserWidget_OnUpdateOpacityOverTime) == 0x000004, "Wrong alignment on CustomizationSlotUserWidget_OnUpdateOpacityOverTime");
static_assert(sizeof(CustomizationSlotUserWidget_OnUpdateOpacityOverTime) == 0x000008, "Wrong size on CustomizationSlotUserWidget_OnUpdateOpacityOverTime");
static_assert(offsetof(CustomizationSlotUserWidget_OnUpdateOpacityOverTime, TargetValue) == 0x000000, "Member 'CustomizationSlotUserWidget_OnUpdateOpacityOverTime::TargetValue' has a wrong offset!");
static_assert(offsetof(CustomizationSlotUserWidget_OnUpdateOpacityOverTime, InterpSpeed) == 0x000004, "Member 'CustomizationSlotUserWidget_OnUpdateOpacityOverTime::InterpSpeed' has a wrong offset!");

// Function SCT.CustomizationSlotUserWidget.OnUpdateSizeOverTime
// 0x0008 (0x0008 - 0x0000)
struct CustomizationSlotUserWidget_OnUpdateSizeOverTime final
{
public:
	float                                         TargetValue;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InterpSpeed;                                       // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CustomizationSlotUserWidget_OnUpdateSizeOverTime) == 0x000004, "Wrong alignment on CustomizationSlotUserWidget_OnUpdateSizeOverTime");
static_assert(sizeof(CustomizationSlotUserWidget_OnUpdateSizeOverTime) == 0x000008, "Wrong size on CustomizationSlotUserWidget_OnUpdateSizeOverTime");
static_assert(offsetof(CustomizationSlotUserWidget_OnUpdateSizeOverTime, TargetValue) == 0x000000, "Member 'CustomizationSlotUserWidget_OnUpdateSizeOverTime::TargetValue' has a wrong offset!");
static_assert(offsetof(CustomizationSlotUserWidget_OnUpdateSizeOverTime, InterpSpeed) == 0x000004, "Member 'CustomizationSlotUserWidget_OnUpdateSizeOverTime::InterpSpeed' has a wrong offset!");

// Function SCT.CustomizationSlotUserWidget.OnUpdateUIImmediately
// 0x000C (0x000C - 0x0000)
struct CustomizationSlotUserWidget_OnUpdateUIImmediately final
{
public:
	float                                         TargetSize;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TargetOpacity;                                     // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TargetHorizontalPadding;                           // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CustomizationSlotUserWidget_OnUpdateUIImmediately) == 0x000004, "Wrong alignment on CustomizationSlotUserWidget_OnUpdateUIImmediately");
static_assert(sizeof(CustomizationSlotUserWidget_OnUpdateUIImmediately) == 0x00000C, "Wrong size on CustomizationSlotUserWidget_OnUpdateUIImmediately");
static_assert(offsetof(CustomizationSlotUserWidget_OnUpdateUIImmediately, TargetSize) == 0x000000, "Member 'CustomizationSlotUserWidget_OnUpdateUIImmediately::TargetSize' has a wrong offset!");
static_assert(offsetof(CustomizationSlotUserWidget_OnUpdateUIImmediately, TargetOpacity) == 0x000004, "Member 'CustomizationSlotUserWidget_OnUpdateUIImmediately::TargetOpacity' has a wrong offset!");
static_assert(offsetof(CustomizationSlotUserWidget_OnUpdateUIImmediately, TargetHorizontalPadding) == 0x000008, "Member 'CustomizationSlotUserWidget_OnUpdateUIImmediately::TargetHorizontalPadding' has a wrong offset!");

// Function SCT.EquipablePower.OnInventorySlotAssigned
// 0x0010 (0x0010 - 0x0000)
struct EquipablePower_OnInventorySlotAssigned final
{
public:
	class UPower*                                 PowerChanged;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EInventorySlotID                              SlotId;                                            // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EquipablePower_OnInventorySlotAssigned) == 0x000008, "Wrong alignment on EquipablePower_OnInventorySlotAssigned");
static_assert(sizeof(EquipablePower_OnInventorySlotAssigned) == 0x000010, "Wrong size on EquipablePower_OnInventorySlotAssigned");
static_assert(offsetof(EquipablePower_OnInventorySlotAssigned, PowerChanged) == 0x000000, "Member 'EquipablePower_OnInventorySlotAssigned::PowerChanged' has a wrong offset!");
static_assert(offsetof(EquipablePower_OnInventorySlotAssigned, SlotId) == 0x000008, "Member 'EquipablePower_OnInventorySlotAssigned::SlotId' has a wrong offset!");

// Function SCT.EquipablePower.OnInventorySlotCleared
// 0x0010 (0x0010 - 0x0000)
struct EquipablePower_OnInventorySlotCleared final
{
public:
	class UPower*                                 PowerChanged;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EInventorySlotID                              SlotId;                                            // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EquipablePower_OnInventorySlotCleared) == 0x000008, "Wrong alignment on EquipablePower_OnInventorySlotCleared");
static_assert(sizeof(EquipablePower_OnInventorySlotCleared) == 0x000010, "Wrong size on EquipablePower_OnInventorySlotCleared");
static_assert(offsetof(EquipablePower_OnInventorySlotCleared, PowerChanged) == 0x000000, "Member 'EquipablePower_OnInventorySlotCleared::PowerChanged' has a wrong offset!");
static_assert(offsetof(EquipablePower_OnInventorySlotCleared, SlotId) == 0x000008, "Member 'EquipablePower_OnInventorySlotCleared::SlotId' has a wrong offset!");

// Function SCT.EquipablePower.IsLocallyControlled
// 0x0001 (0x0001 - 0x0000)
struct EquipablePower_IsLocallyControlled final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EquipablePower_IsLocallyControlled) == 0x000001, "Wrong alignment on EquipablePower_IsLocallyControlled");
static_assert(sizeof(EquipablePower_IsLocallyControlled) == 0x000001, "Wrong size on EquipablePower_IsLocallyControlled");
static_assert(offsetof(EquipablePower_IsLocallyControlled, ReturnValue) == 0x000000, "Member 'EquipablePower_IsLocallyControlled::ReturnValue' has a wrong offset!");

// Function SCT.FactionInfoInterface.GetFaction
// 0x0001 (0x0001 - 0x0000)
struct FactionInfoInterface_GetFaction final
{
public:
	EPlayerFaction                                ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FactionInfoInterface_GetFaction) == 0x000001, "Wrong alignment on FactionInfoInterface_GetFaction");
static_assert(sizeof(FactionInfoInterface_GetFaction) == 0x000001, "Wrong size on FactionInfoInterface_GetFaction");
static_assert(offsetof(FactionInfoInterface_GetFaction, ReturnValue) == 0x000000, "Member 'FactionInfoInterface_GetFaction::ReturnValue' has a wrong offset!");

// Function SCT.FactionInfoInterface.IsPersonoid
// 0x0001 (0x0001 - 0x0000)
struct FactionInfoInterface_IsPersonoid final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FactionInfoInterface_IsPersonoid) == 0x000001, "Wrong alignment on FactionInfoInterface_IsPersonoid");
static_assert(sizeof(FactionInfoInterface_IsPersonoid) == 0x000001, "Wrong size on FactionInfoInterface_IsPersonoid");
static_assert(offsetof(FactionInfoInterface_IsPersonoid, ReturnValue) == 0x000000, "Member 'FactionInfoInterface_IsPersonoid::ReturnValue' has a wrong offset!");

// Function SCT.FactionInfoInterface.IsResident
// 0x0001 (0x0001 - 0x0000)
struct FactionInfoInterface_IsResident final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FactionInfoInterface_IsResident) == 0x000001, "Wrong alignment on FactionInfoInterface_IsResident");
static_assert(sizeof(FactionInfoInterface_IsResident) == 0x000001, "Wrong size on FactionInfoInterface_IsResident");
static_assert(offsetof(FactionInfoInterface_IsResident, ReturnValue) == 0x000000, "Member 'FactionInfoInterface_IsResident::ReturnValue' has a wrong offset!");

// Function SCT.FCTAccelByteAnalytics.CaptureEndOfLevelTelemetry
// 0x000C (0x000C - 0x0000)
struct FCTAccelByteAnalytics_CaptureEndOfLevelTelemetry final
{
public:
	EMapName                                      Map;                                               // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         PlayersKilledInLevel;                              // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          MatchEnded;                                        // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FCTAccelByteAnalytics_CaptureEndOfLevelTelemetry) == 0x000004, "Wrong alignment on FCTAccelByteAnalytics_CaptureEndOfLevelTelemetry");
static_assert(sizeof(FCTAccelByteAnalytics_CaptureEndOfLevelTelemetry) == 0x00000C, "Wrong size on FCTAccelByteAnalytics_CaptureEndOfLevelTelemetry");
static_assert(offsetof(FCTAccelByteAnalytics_CaptureEndOfLevelTelemetry, Map) == 0x000000, "Member 'FCTAccelByteAnalytics_CaptureEndOfLevelTelemetry::Map' has a wrong offset!");
static_assert(offsetof(FCTAccelByteAnalytics_CaptureEndOfLevelTelemetry, PlayersKilledInLevel) == 0x000004, "Member 'FCTAccelByteAnalytics_CaptureEndOfLevelTelemetry::PlayersKilledInLevel' has a wrong offset!");
static_assert(offsetof(FCTAccelByteAnalytics_CaptureEndOfLevelTelemetry, MatchEnded) == 0x000008, "Member 'FCTAccelByteAnalytics_CaptureEndOfLevelTelemetry::MatchEnded' has a wrong offset!");

// Function SCT.FCTAccelByteAnalytics.CaptureEndOfMatchTelemetry
// 0x0018 (0x0018 - 0x0000)
struct FCTAccelByteAnalytics_CaptureEndOfMatchTelemetry final
{
public:
	EEndConditions                                EndCondition;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FDateTime                              StartTime;                                         // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EWinningFaction                               WinningFaction;                                    // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FCTAccelByteAnalytics_CaptureEndOfMatchTelemetry) == 0x000008, "Wrong alignment on FCTAccelByteAnalytics_CaptureEndOfMatchTelemetry");
static_assert(sizeof(FCTAccelByteAnalytics_CaptureEndOfMatchTelemetry) == 0x000018, "Wrong size on FCTAccelByteAnalytics_CaptureEndOfMatchTelemetry");
static_assert(offsetof(FCTAccelByteAnalytics_CaptureEndOfMatchTelemetry, EndCondition) == 0x000000, "Member 'FCTAccelByteAnalytics_CaptureEndOfMatchTelemetry::EndCondition' has a wrong offset!");
static_assert(offsetof(FCTAccelByteAnalytics_CaptureEndOfMatchTelemetry, StartTime) == 0x000008, "Member 'FCTAccelByteAnalytics_CaptureEndOfMatchTelemetry::StartTime' has a wrong offset!");
static_assert(offsetof(FCTAccelByteAnalytics_CaptureEndOfMatchTelemetry, WinningFaction) == 0x000010, "Member 'FCTAccelByteAnalytics_CaptureEndOfMatchTelemetry::WinningFaction' has a wrong offset!");

// Function SCT.FCTAccelByteAnalytics.CaptureFriendlyKillTelemetry
// 0x0003 (0x0003 - 0x0000)
struct FCTAccelByteAnalytics_CaptureFriendlyKillTelemetry final
{
public:
	EMapName                                      Map;                                               // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsResident;                                        // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsServer;                                          // 0x0002(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCTAccelByteAnalytics_CaptureFriendlyKillTelemetry) == 0x000001, "Wrong alignment on FCTAccelByteAnalytics_CaptureFriendlyKillTelemetry");
static_assert(sizeof(FCTAccelByteAnalytics_CaptureFriendlyKillTelemetry) == 0x000003, "Wrong size on FCTAccelByteAnalytics_CaptureFriendlyKillTelemetry");
static_assert(offsetof(FCTAccelByteAnalytics_CaptureFriendlyKillTelemetry, Map) == 0x000000, "Member 'FCTAccelByteAnalytics_CaptureFriendlyKillTelemetry::Map' has a wrong offset!");
static_assert(offsetof(FCTAccelByteAnalytics_CaptureFriendlyKillTelemetry, IsResident) == 0x000001, "Member 'FCTAccelByteAnalytics_CaptureFriendlyKillTelemetry::IsResident' has a wrong offset!");
static_assert(offsetof(FCTAccelByteAnalytics_CaptureFriendlyKillTelemetry, IsServer) == 0x000002, "Member 'FCTAccelByteAnalytics_CaptureFriendlyKillTelemetry::IsServer' has a wrong offset!");

// Function SCT.FCTAccelByteAnalytics.CaptureItemInteractionTelemetry
// 0x0028 (0x0028 - 0x0000)
struct FCTAccelByteAnalytics_CaptureItemInteractionTelemetry final
{
public:
	class FString                                 UserId;                                            // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ItemName;                                          // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EItemAction                                   ItemAction;                                        // 0x0020(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMapName                                      Map;                                               // 0x0021(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsResident;                                        // 0x0022(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsServer;                                          // 0x0023(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FCTAccelByteAnalytics_CaptureItemInteractionTelemetry) == 0x000008, "Wrong alignment on FCTAccelByteAnalytics_CaptureItemInteractionTelemetry");
static_assert(sizeof(FCTAccelByteAnalytics_CaptureItemInteractionTelemetry) == 0x000028, "Wrong size on FCTAccelByteAnalytics_CaptureItemInteractionTelemetry");
static_assert(offsetof(FCTAccelByteAnalytics_CaptureItemInteractionTelemetry, UserId) == 0x000000, "Member 'FCTAccelByteAnalytics_CaptureItemInteractionTelemetry::UserId' has a wrong offset!");
static_assert(offsetof(FCTAccelByteAnalytics_CaptureItemInteractionTelemetry, ItemName) == 0x000010, "Member 'FCTAccelByteAnalytics_CaptureItemInteractionTelemetry::ItemName' has a wrong offset!");
static_assert(offsetof(FCTAccelByteAnalytics_CaptureItemInteractionTelemetry, ItemAction) == 0x000020, "Member 'FCTAccelByteAnalytics_CaptureItemInteractionTelemetry::ItemAction' has a wrong offset!");
static_assert(offsetof(FCTAccelByteAnalytics_CaptureItemInteractionTelemetry, Map) == 0x000021, "Member 'FCTAccelByteAnalytics_CaptureItemInteractionTelemetry::Map' has a wrong offset!");
static_assert(offsetof(FCTAccelByteAnalytics_CaptureItemInteractionTelemetry, IsResident) == 0x000022, "Member 'FCTAccelByteAnalytics_CaptureItemInteractionTelemetry::IsResident' has a wrong offset!");
static_assert(offsetof(FCTAccelByteAnalytics_CaptureItemInteractionTelemetry, IsServer) == 0x000023, "Member 'FCTAccelByteAnalytics_CaptureItemInteractionTelemetry::IsServer' has a wrong offset!");

// Function SCT.FCTAccelByteAnalytics.CapturePassengerLogTelemetry
// 0x0020 (0x0020 - 0x0000)
struct FCTAccelByteAnalytics_CapturePassengerLogTelemetry final
{
public:
	EMapName                                      Map;                                               // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 PassengerLogType;                                  // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsResident;                                        // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsServer;                                          // 0x0019(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1A[0x6];                                       // 0x001A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FCTAccelByteAnalytics_CapturePassengerLogTelemetry) == 0x000008, "Wrong alignment on FCTAccelByteAnalytics_CapturePassengerLogTelemetry");
static_assert(sizeof(FCTAccelByteAnalytics_CapturePassengerLogTelemetry) == 0x000020, "Wrong size on FCTAccelByteAnalytics_CapturePassengerLogTelemetry");
static_assert(offsetof(FCTAccelByteAnalytics_CapturePassengerLogTelemetry, Map) == 0x000000, "Member 'FCTAccelByteAnalytics_CapturePassengerLogTelemetry::Map' has a wrong offset!");
static_assert(offsetof(FCTAccelByteAnalytics_CapturePassengerLogTelemetry, PassengerLogType) == 0x000008, "Member 'FCTAccelByteAnalytics_CapturePassengerLogTelemetry::PassengerLogType' has a wrong offset!");
static_assert(offsetof(FCTAccelByteAnalytics_CapturePassengerLogTelemetry, IsResident) == 0x000018, "Member 'FCTAccelByteAnalytics_CapturePassengerLogTelemetry::IsResident' has a wrong offset!");
static_assert(offsetof(FCTAccelByteAnalytics_CapturePassengerLogTelemetry, IsServer) == 0x000019, "Member 'FCTAccelByteAnalytics_CapturePassengerLogTelemetry::IsServer' has a wrong offset!");

// Function SCT.FCTAccelByteAnalytics.CapturePlayerDeathTelemetry
// 0x0014 (0x0014 - 0x0000)
struct FCTAccelByteAnalytics_CapturePlayerDeathTelemetry final
{
public:
	EMapName                                      Map;                                               // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFate                                         Fate;                                              // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x2];                                        // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                Location;                                          // 0x0004(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsResident;                                        // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsServer;                                          // 0x0011(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12[0x2];                                       // 0x0012(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FCTAccelByteAnalytics_CapturePlayerDeathTelemetry) == 0x000004, "Wrong alignment on FCTAccelByteAnalytics_CapturePlayerDeathTelemetry");
static_assert(sizeof(FCTAccelByteAnalytics_CapturePlayerDeathTelemetry) == 0x000014, "Wrong size on FCTAccelByteAnalytics_CapturePlayerDeathTelemetry");
static_assert(offsetof(FCTAccelByteAnalytics_CapturePlayerDeathTelemetry, Map) == 0x000000, "Member 'FCTAccelByteAnalytics_CapturePlayerDeathTelemetry::Map' has a wrong offset!");
static_assert(offsetof(FCTAccelByteAnalytics_CapturePlayerDeathTelemetry, Fate) == 0x000001, "Member 'FCTAccelByteAnalytics_CapturePlayerDeathTelemetry::Fate' has a wrong offset!");
static_assert(offsetof(FCTAccelByteAnalytics_CapturePlayerDeathTelemetry, Location) == 0x000004, "Member 'FCTAccelByteAnalytics_CapturePlayerDeathTelemetry::Location' has a wrong offset!");
static_assert(offsetof(FCTAccelByteAnalytics_CapturePlayerDeathTelemetry, IsResident) == 0x000010, "Member 'FCTAccelByteAnalytics_CapturePlayerDeathTelemetry::IsResident' has a wrong offset!");
static_assert(offsetof(FCTAccelByteAnalytics_CapturePlayerDeathTelemetry, IsServer) == 0x000011, "Member 'FCTAccelByteAnalytics_CapturePlayerDeathTelemetry::IsServer' has a wrong offset!");

// Function SCT.FCTAccelByteAnalytics.CapturePlayerEndOfMatchTelemetry
// 0x0020 (0x0020 - 0x0000)
struct FCTAccelByteAnalytics_CapturePlayerEndOfMatchTelemetry final
{
public:
	class FString                                 UserId;                                            // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFate                                         Fate;                                              // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ExperienceEarned;                                  // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsResident;                                        // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsServer;                                          // 0x0019(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1A[0x6];                                       // 0x001A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FCTAccelByteAnalytics_CapturePlayerEndOfMatchTelemetry) == 0x000008, "Wrong alignment on FCTAccelByteAnalytics_CapturePlayerEndOfMatchTelemetry");
static_assert(sizeof(FCTAccelByteAnalytics_CapturePlayerEndOfMatchTelemetry) == 0x000020, "Wrong size on FCTAccelByteAnalytics_CapturePlayerEndOfMatchTelemetry");
static_assert(offsetof(FCTAccelByteAnalytics_CapturePlayerEndOfMatchTelemetry, UserId) == 0x000000, "Member 'FCTAccelByteAnalytics_CapturePlayerEndOfMatchTelemetry::UserId' has a wrong offset!");
static_assert(offsetof(FCTAccelByteAnalytics_CapturePlayerEndOfMatchTelemetry, Fate) == 0x000010, "Member 'FCTAccelByteAnalytics_CapturePlayerEndOfMatchTelemetry::Fate' has a wrong offset!");
static_assert(offsetof(FCTAccelByteAnalytics_CapturePlayerEndOfMatchTelemetry, ExperienceEarned) == 0x000014, "Member 'FCTAccelByteAnalytics_CapturePlayerEndOfMatchTelemetry::ExperienceEarned' has a wrong offset!");
static_assert(offsetof(FCTAccelByteAnalytics_CapturePlayerEndOfMatchTelemetry, IsResident) == 0x000018, "Member 'FCTAccelByteAnalytics_CapturePlayerEndOfMatchTelemetry::IsResident' has a wrong offset!");
static_assert(offsetof(FCTAccelByteAnalytics_CapturePlayerEndOfMatchTelemetry, IsServer) == 0x000019, "Member 'FCTAccelByteAnalytics_CapturePlayerEndOfMatchTelemetry::IsServer' has a wrong offset!");

// Function SCT.FCTAccelByteAnalytics.CaptureSkillCheckTelemetry
// 0x0004 (0x0004 - 0x0000)
struct FCTAccelByteAnalytics_CaptureSkillCheckTelemetry final
{
public:
	bool                                          SkillcheckSuccessful;                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          PlayerAIsResident;                                 // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          PlayerBIsResident;                                 // 0x0002(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsServer;                                          // 0x0003(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCTAccelByteAnalytics_CaptureSkillCheckTelemetry) == 0x000001, "Wrong alignment on FCTAccelByteAnalytics_CaptureSkillCheckTelemetry");
static_assert(sizeof(FCTAccelByteAnalytics_CaptureSkillCheckTelemetry) == 0x000004, "Wrong size on FCTAccelByteAnalytics_CaptureSkillCheckTelemetry");
static_assert(offsetof(FCTAccelByteAnalytics_CaptureSkillCheckTelemetry, SkillcheckSuccessful) == 0x000000, "Member 'FCTAccelByteAnalytics_CaptureSkillCheckTelemetry::SkillcheckSuccessful' has a wrong offset!");
static_assert(offsetof(FCTAccelByteAnalytics_CaptureSkillCheckTelemetry, PlayerAIsResident) == 0x000001, "Member 'FCTAccelByteAnalytics_CaptureSkillCheckTelemetry::PlayerAIsResident' has a wrong offset!");
static_assert(offsetof(FCTAccelByteAnalytics_CaptureSkillCheckTelemetry, PlayerBIsResident) == 0x000002, "Member 'FCTAccelByteAnalytics_CaptureSkillCheckTelemetry::PlayerBIsResident' has a wrong offset!");
static_assert(offsetof(FCTAccelByteAnalytics_CaptureSkillCheckTelemetry, IsServer) == 0x000003, "Member 'FCTAccelByteAnalytics_CaptureSkillCheckTelemetry::IsServer' has a wrong offset!");

// Function SCT.FCTAccelByteLinkAccountsCallbackProxy.ForceLinkHeadlessWithVersusEvilAccount
// 0x0008 (0x0008 - 0x0000)
struct FCTAccelByteLinkAccountsCallbackProxy_ForceLinkHeadlessWithVersusEvilAccount final
{
public:
	class UFCTAccelByteLinkAccountsCallbackProxy* ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCTAccelByteLinkAccountsCallbackProxy_ForceLinkHeadlessWithVersusEvilAccount) == 0x000008, "Wrong alignment on FCTAccelByteLinkAccountsCallbackProxy_ForceLinkHeadlessWithVersusEvilAccount");
static_assert(sizeof(FCTAccelByteLinkAccountsCallbackProxy_ForceLinkHeadlessWithVersusEvilAccount) == 0x000008, "Wrong size on FCTAccelByteLinkAccountsCallbackProxy_ForceLinkHeadlessWithVersusEvilAccount");
static_assert(offsetof(FCTAccelByteLinkAccountsCallbackProxy_ForceLinkHeadlessWithVersusEvilAccount, ReturnValue) == 0x000000, "Member 'FCTAccelByteLinkAccountsCallbackProxy_ForceLinkHeadlessWithVersusEvilAccount::ReturnValue' has a wrong offset!");

// Function SCT.FCTAccelByteLinkAccountsCallbackProxy.LoginAndLinkPlatformAccount
// 0x0028 (0x0028 - 0x0000)
struct FCTAccelByteLinkAccountsCallbackProxy_LoginAndLinkPlatformAccount final
{
public:
	class FString                                 Email;                                             // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Password;                                          // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFCTAccelByteLinkAccountsCallbackProxy* ReturnValue;                                       // 0x0020(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCTAccelByteLinkAccountsCallbackProxy_LoginAndLinkPlatformAccount) == 0x000008, "Wrong alignment on FCTAccelByteLinkAccountsCallbackProxy_LoginAndLinkPlatformAccount");
static_assert(sizeof(FCTAccelByteLinkAccountsCallbackProxy_LoginAndLinkPlatformAccount) == 0x000028, "Wrong size on FCTAccelByteLinkAccountsCallbackProxy_LoginAndLinkPlatformAccount");
static_assert(offsetof(FCTAccelByteLinkAccountsCallbackProxy_LoginAndLinkPlatformAccount, Email) == 0x000000, "Member 'FCTAccelByteLinkAccountsCallbackProxy_LoginAndLinkPlatformAccount::Email' has a wrong offset!");
static_assert(offsetof(FCTAccelByteLinkAccountsCallbackProxy_LoginAndLinkPlatformAccount, Password) == 0x000010, "Member 'FCTAccelByteLinkAccountsCallbackProxy_LoginAndLinkPlatformAccount::Password' has a wrong offset!");
static_assert(offsetof(FCTAccelByteLinkAccountsCallbackProxy_LoginAndLinkPlatformAccount, ReturnValue) == 0x000020, "Member 'FCTAccelByteLinkAccountsCallbackProxy_LoginAndLinkPlatformAccount::ReturnValue' has a wrong offset!");

// Function SCT.FCTAccelByteLinkAccountsCallbackProxy.LogIntoVersusEvilAccount
// 0x0028 (0x0028 - 0x0000)
struct FCTAccelByteLinkAccountsCallbackProxy_LogIntoVersusEvilAccount final
{
public:
	class FString                                 Email;                                             // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Password;                                          // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFCTAccelByteLinkAccountsCallbackProxy* ReturnValue;                                       // 0x0020(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCTAccelByteLinkAccountsCallbackProxy_LogIntoVersusEvilAccount) == 0x000008, "Wrong alignment on FCTAccelByteLinkAccountsCallbackProxy_LogIntoVersusEvilAccount");
static_assert(sizeof(FCTAccelByteLinkAccountsCallbackProxy_LogIntoVersusEvilAccount) == 0x000028, "Wrong size on FCTAccelByteLinkAccountsCallbackProxy_LogIntoVersusEvilAccount");
static_assert(offsetof(FCTAccelByteLinkAccountsCallbackProxy_LogIntoVersusEvilAccount, Email) == 0x000000, "Member 'FCTAccelByteLinkAccountsCallbackProxy_LogIntoVersusEvilAccount::Email' has a wrong offset!");
static_assert(offsetof(FCTAccelByteLinkAccountsCallbackProxy_LogIntoVersusEvilAccount, Password) == 0x000010, "Member 'FCTAccelByteLinkAccountsCallbackProxy_LogIntoVersusEvilAccount::Password' has a wrong offset!");
static_assert(offsetof(FCTAccelByteLinkAccountsCallbackProxy_LogIntoVersusEvilAccount, ReturnValue) == 0x000020, "Member 'FCTAccelByteLinkAccountsCallbackProxy_LogIntoVersusEvilAccount::ReturnValue' has a wrong offset!");

// Function SCT.FCTAccelByteLinkAccountsCallbackProxy.RegisterAndLinkPlatformAccount
// 0x0058 (0x0058 - 0x0000)
struct FCTAccelByteLinkAccountsCallbackProxy_RegisterAndLinkPlatformAccount final
{
public:
	class FString                                 Email;                                             // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Password;                                          // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 DisplayName;                                       // 0x0020(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Country;                                           // 0x0030(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 DateOfBirth;                                       // 0x0040(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFCTAccelByteLinkAccountsCallbackProxy* ReturnValue;                                       // 0x0050(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCTAccelByteLinkAccountsCallbackProxy_RegisterAndLinkPlatformAccount) == 0x000008, "Wrong alignment on FCTAccelByteLinkAccountsCallbackProxy_RegisterAndLinkPlatformAccount");
static_assert(sizeof(FCTAccelByteLinkAccountsCallbackProxy_RegisterAndLinkPlatformAccount) == 0x000058, "Wrong size on FCTAccelByteLinkAccountsCallbackProxy_RegisterAndLinkPlatformAccount");
static_assert(offsetof(FCTAccelByteLinkAccountsCallbackProxy_RegisterAndLinkPlatformAccount, Email) == 0x000000, "Member 'FCTAccelByteLinkAccountsCallbackProxy_RegisterAndLinkPlatformAccount::Email' has a wrong offset!");
static_assert(offsetof(FCTAccelByteLinkAccountsCallbackProxy_RegisterAndLinkPlatformAccount, Password) == 0x000010, "Member 'FCTAccelByteLinkAccountsCallbackProxy_RegisterAndLinkPlatformAccount::Password' has a wrong offset!");
static_assert(offsetof(FCTAccelByteLinkAccountsCallbackProxy_RegisterAndLinkPlatformAccount, DisplayName) == 0x000020, "Member 'FCTAccelByteLinkAccountsCallbackProxy_RegisterAndLinkPlatformAccount::DisplayName' has a wrong offset!");
static_assert(offsetof(FCTAccelByteLinkAccountsCallbackProxy_RegisterAndLinkPlatformAccount, Country) == 0x000030, "Member 'FCTAccelByteLinkAccountsCallbackProxy_RegisterAndLinkPlatformAccount::Country' has a wrong offset!");
static_assert(offsetof(FCTAccelByteLinkAccountsCallbackProxy_RegisterAndLinkPlatformAccount, DateOfBirth) == 0x000040, "Member 'FCTAccelByteLinkAccountsCallbackProxy_RegisterAndLinkPlatformAccount::DateOfBirth' has a wrong offset!");
static_assert(offsetof(FCTAccelByteLinkAccountsCallbackProxy_RegisterAndLinkPlatformAccount, ReturnValue) == 0x000050, "Member 'FCTAccelByteLinkAccountsCallbackProxy_RegisterAndLinkPlatformAccount::ReturnValue' has a wrong offset!");

// Function SCT.FCTAccelByteLinkAccountsCallbackProxy.UnlinkCurrentPlatformFromVersusEvilAccount
// 0x0008 (0x0008 - 0x0000)
struct FCTAccelByteLinkAccountsCallbackProxy_UnlinkCurrentPlatformFromVersusEvilAccount final
{
public:
	class UFCTAccelByteLinkAccountsCallbackProxy* ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCTAccelByteLinkAccountsCallbackProxy_UnlinkCurrentPlatformFromVersusEvilAccount) == 0x000008, "Wrong alignment on FCTAccelByteLinkAccountsCallbackProxy_UnlinkCurrentPlatformFromVersusEvilAccount");
static_assert(sizeof(FCTAccelByteLinkAccountsCallbackProxy_UnlinkCurrentPlatformFromVersusEvilAccount) == 0x000008, "Wrong size on FCTAccelByteLinkAccountsCallbackProxy_UnlinkCurrentPlatformFromVersusEvilAccount");
static_assert(offsetof(FCTAccelByteLinkAccountsCallbackProxy_UnlinkCurrentPlatformFromVersusEvilAccount, ReturnValue) == 0x000000, "Member 'FCTAccelByteLinkAccountsCallbackProxy_UnlinkCurrentPlatformFromVersusEvilAccount::ReturnValue' has a wrong offset!");

// Function SCT.FCTAccelByteLinkPlatformCallbackProxy.LinkCurrentPlatform
// 0x0028 (0x0028 - 0x0000)
struct FCTAccelByteLinkPlatformCallbackProxy_LinkCurrentPlatform final
{
public:
	class FString                                 Email;                                             // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Password;                                          // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFCTAccelByteLinkPlatformCallbackProxy* ReturnValue;                                       // 0x0020(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCTAccelByteLinkPlatformCallbackProxy_LinkCurrentPlatform) == 0x000008, "Wrong alignment on FCTAccelByteLinkPlatformCallbackProxy_LinkCurrentPlatform");
static_assert(sizeof(FCTAccelByteLinkPlatformCallbackProxy_LinkCurrentPlatform) == 0x000028, "Wrong size on FCTAccelByteLinkPlatformCallbackProxy_LinkCurrentPlatform");
static_assert(offsetof(FCTAccelByteLinkPlatformCallbackProxy_LinkCurrentPlatform, Email) == 0x000000, "Member 'FCTAccelByteLinkPlatformCallbackProxy_LinkCurrentPlatform::Email' has a wrong offset!");
static_assert(offsetof(FCTAccelByteLinkPlatformCallbackProxy_LinkCurrentPlatform, Password) == 0x000010, "Member 'FCTAccelByteLinkPlatformCallbackProxy_LinkCurrentPlatform::Password' has a wrong offset!");
static_assert(offsetof(FCTAccelByteLinkPlatformCallbackProxy_LinkCurrentPlatform, ReturnValue) == 0x000020, "Member 'FCTAccelByteLinkPlatformCallbackProxy_LinkCurrentPlatform::ReturnValue' has a wrong offset!");

// Function SCT.FCTAuthLogoutCallbackProxy.Logout
// 0x0008 (0x0008 - 0x0000)
struct FCTAuthLogoutCallbackProxy_Logout final
{
public:
	class UFCTAuthLogoutCallbackProxy*            ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCTAuthLogoutCallbackProxy_Logout) == 0x000008, "Wrong alignment on FCTAuthLogoutCallbackProxy_Logout");
static_assert(sizeof(FCTAuthLogoutCallbackProxy_Logout) == 0x000008, "Wrong size on FCTAuthLogoutCallbackProxy_Logout");
static_assert(offsetof(FCTAuthLogoutCallbackProxy_Logout, ReturnValue) == 0x000000, "Member 'FCTAuthLogoutCallbackProxy_Logout::ReturnValue' has a wrong offset!");

// Function SCT.FCTAuthUpgradeAccountCallbackProxy.UpgradeHeadlessAccount
// 0x0028 (0x0028 - 0x0000)
struct FCTAuthUpgradeAccountCallbackProxy_UpgradeHeadlessAccount final
{
public:
	class FString                                 Email;                                             // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Password;                                          // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFCTAuthUpgradeAccountCallbackProxy*    ReturnValue;                                       // 0x0020(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCTAuthUpgradeAccountCallbackProxy_UpgradeHeadlessAccount) == 0x000008, "Wrong alignment on FCTAuthUpgradeAccountCallbackProxy_UpgradeHeadlessAccount");
static_assert(sizeof(FCTAuthUpgradeAccountCallbackProxy_UpgradeHeadlessAccount) == 0x000028, "Wrong size on FCTAuthUpgradeAccountCallbackProxy_UpgradeHeadlessAccount");
static_assert(offsetof(FCTAuthUpgradeAccountCallbackProxy_UpgradeHeadlessAccount, Email) == 0x000000, "Member 'FCTAuthUpgradeAccountCallbackProxy_UpgradeHeadlessAccount::Email' has a wrong offset!");
static_assert(offsetof(FCTAuthUpgradeAccountCallbackProxy_UpgradeHeadlessAccount, Password) == 0x000010, "Member 'FCTAuthUpgradeAccountCallbackProxy_UpgradeHeadlessAccount::Password' has a wrong offset!");
static_assert(offsetof(FCTAuthUpgradeAccountCallbackProxy_UpgradeHeadlessAccount, ReturnValue) == 0x000020, "Member 'FCTAuthUpgradeAccountCallbackProxy_UpgradeHeadlessAccount::ReturnValue' has a wrong offset!");

// Function SCT.FCTAuthUpgradeAccountCallbackProxy.UpgradeHeadlessAccountAndVerify
// 0x0038 (0x0038 - 0x0000)
struct FCTAuthUpgradeAccountCallbackProxy_UpgradeHeadlessAccountAndVerify final
{
public:
	class FString                                 Email;                                             // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Password;                                          // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 VerificationCode;                                  // 0x0020(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFCTAuthUpgradeAccountCallbackProxy*    ReturnValue;                                       // 0x0030(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCTAuthUpgradeAccountCallbackProxy_UpgradeHeadlessAccountAndVerify) == 0x000008, "Wrong alignment on FCTAuthUpgradeAccountCallbackProxy_UpgradeHeadlessAccountAndVerify");
static_assert(sizeof(FCTAuthUpgradeAccountCallbackProxy_UpgradeHeadlessAccountAndVerify) == 0x000038, "Wrong size on FCTAuthUpgradeAccountCallbackProxy_UpgradeHeadlessAccountAndVerify");
static_assert(offsetof(FCTAuthUpgradeAccountCallbackProxy_UpgradeHeadlessAccountAndVerify, Email) == 0x000000, "Member 'FCTAuthUpgradeAccountCallbackProxy_UpgradeHeadlessAccountAndVerify::Email' has a wrong offset!");
static_assert(offsetof(FCTAuthUpgradeAccountCallbackProxy_UpgradeHeadlessAccountAndVerify, Password) == 0x000010, "Member 'FCTAuthUpgradeAccountCallbackProxy_UpgradeHeadlessAccountAndVerify::Password' has a wrong offset!");
static_assert(offsetof(FCTAuthUpgradeAccountCallbackProxy_UpgradeHeadlessAccountAndVerify, VerificationCode) == 0x000020, "Member 'FCTAuthUpgradeAccountCallbackProxy_UpgradeHeadlessAccountAndVerify::VerificationCode' has a wrong offset!");
static_assert(offsetof(FCTAuthUpgradeAccountCallbackProxy_UpgradeHeadlessAccountAndVerify, ReturnValue) == 0x000030, "Member 'FCTAuthUpgradeAccountCallbackProxy_UpgradeHeadlessAccountAndVerify::ReturnValue' has a wrong offset!");

// Function SCT.FCTAuthSendVerificationCodeCallbackProxy.SendVerificationCodeForAccount
// 0x0008 (0x0008 - 0x0000)
struct FCTAuthSendVerificationCodeCallbackProxy_SendVerificationCodeForAccount final
{
public:
	class UFCTAuthSendVerificationCodeCallbackProxy* ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCTAuthSendVerificationCodeCallbackProxy_SendVerificationCodeForAccount) == 0x000008, "Wrong alignment on FCTAuthSendVerificationCodeCallbackProxy_SendVerificationCodeForAccount");
static_assert(sizeof(FCTAuthSendVerificationCodeCallbackProxy_SendVerificationCodeForAccount) == 0x000008, "Wrong size on FCTAuthSendVerificationCodeCallbackProxy_SendVerificationCodeForAccount");
static_assert(offsetof(FCTAuthSendVerificationCodeCallbackProxy_SendVerificationCodeForAccount, ReturnValue) == 0x000000, "Member 'FCTAuthSendVerificationCodeCallbackProxy_SendVerificationCodeForAccount::ReturnValue' has a wrong offset!");

// Function SCT.FCTAuthSendVerificationCodeCallbackProxy.SendVerificationCodeForUpgrade
// 0x0018 (0x0018 - 0x0000)
struct FCTAuthSendVerificationCodeCallbackProxy_SendVerificationCodeForUpgrade final
{
public:
	class FString                                 Email;                                             // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFCTAuthSendVerificationCodeCallbackProxy* ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCTAuthSendVerificationCodeCallbackProxy_SendVerificationCodeForUpgrade) == 0x000008, "Wrong alignment on FCTAuthSendVerificationCodeCallbackProxy_SendVerificationCodeForUpgrade");
static_assert(sizeof(FCTAuthSendVerificationCodeCallbackProxy_SendVerificationCodeForUpgrade) == 0x000018, "Wrong size on FCTAuthSendVerificationCodeCallbackProxy_SendVerificationCodeForUpgrade");
static_assert(offsetof(FCTAuthSendVerificationCodeCallbackProxy_SendVerificationCodeForUpgrade, Email) == 0x000000, "Member 'FCTAuthSendVerificationCodeCallbackProxy_SendVerificationCodeForUpgrade::Email' has a wrong offset!");
static_assert(offsetof(FCTAuthSendVerificationCodeCallbackProxy_SendVerificationCodeForUpgrade, ReturnValue) == 0x000010, "Member 'FCTAuthSendVerificationCodeCallbackProxy_SendVerificationCodeForUpgrade::ReturnValue' has a wrong offset!");

// Function SCT.FCTForgotPasswordCallbackProxy.ResetPassword
// 0x0048 (0x0048 - 0x0000)
struct FCTForgotPasswordCallbackProxy_ResetPassword final
{
public:
	class FString                                 VerificationCode;                                  // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Email;                                             // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 NewPassword;                                       // 0x0020(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ReEnteredPassword;                                 // 0x0030(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFCTForgotPasswordCallbackProxy*        ReturnValue;                                       // 0x0040(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCTForgotPasswordCallbackProxy_ResetPassword) == 0x000008, "Wrong alignment on FCTForgotPasswordCallbackProxy_ResetPassword");
static_assert(sizeof(FCTForgotPasswordCallbackProxy_ResetPassword) == 0x000048, "Wrong size on FCTForgotPasswordCallbackProxy_ResetPassword");
static_assert(offsetof(FCTForgotPasswordCallbackProxy_ResetPassword, VerificationCode) == 0x000000, "Member 'FCTForgotPasswordCallbackProxy_ResetPassword::VerificationCode' has a wrong offset!");
static_assert(offsetof(FCTForgotPasswordCallbackProxy_ResetPassword, Email) == 0x000010, "Member 'FCTForgotPasswordCallbackProxy_ResetPassword::Email' has a wrong offset!");
static_assert(offsetof(FCTForgotPasswordCallbackProxy_ResetPassword, NewPassword) == 0x000020, "Member 'FCTForgotPasswordCallbackProxy_ResetPassword::NewPassword' has a wrong offset!");
static_assert(offsetof(FCTForgotPasswordCallbackProxy_ResetPassword, ReEnteredPassword) == 0x000030, "Member 'FCTForgotPasswordCallbackProxy_ResetPassword::ReEnteredPassword' has a wrong offset!");
static_assert(offsetof(FCTForgotPasswordCallbackProxy_ResetPassword, ReturnValue) == 0x000040, "Member 'FCTForgotPasswordCallbackProxy_ResetPassword::ReturnValue' has a wrong offset!");

// Function SCT.FCTForgotPasswordCallbackProxy.SendResetPasswordRequest
// 0x0018 (0x0018 - 0x0000)
struct FCTForgotPasswordCallbackProxy_SendResetPasswordRequest final
{
public:
	class FString                                 Email;                                             // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFCTForgotPasswordCallbackProxy*        ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCTForgotPasswordCallbackProxy_SendResetPasswordRequest) == 0x000008, "Wrong alignment on FCTForgotPasswordCallbackProxy_SendResetPasswordRequest");
static_assert(sizeof(FCTForgotPasswordCallbackProxy_SendResetPasswordRequest) == 0x000018, "Wrong size on FCTForgotPasswordCallbackProxy_SendResetPasswordRequest");
static_assert(offsetof(FCTForgotPasswordCallbackProxy_SendResetPasswordRequest, Email) == 0x000000, "Member 'FCTForgotPasswordCallbackProxy_SendResetPasswordRequest::Email' has a wrong offset!");
static_assert(offsetof(FCTForgotPasswordCallbackProxy_SendResetPasswordRequest, ReturnValue) == 0x000010, "Member 'FCTForgotPasswordCallbackProxy_SendResetPasswordRequest::ReturnValue' has a wrong offset!");

// Function SCT.FCTAuthVerifyAccountCallbackProxy.VerifyExistingAccount
// 0x0018 (0x0018 - 0x0000)
struct FCTAuthVerifyAccountCallbackProxy_VerifyExistingAccount final
{
public:
	class FString                                 VerificationCode;                                  // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFCTAuthVerifyAccountCallbackProxy*     ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCTAuthVerifyAccountCallbackProxy_VerifyExistingAccount) == 0x000008, "Wrong alignment on FCTAuthVerifyAccountCallbackProxy_VerifyExistingAccount");
static_assert(sizeof(FCTAuthVerifyAccountCallbackProxy_VerifyExistingAccount) == 0x000018, "Wrong size on FCTAuthVerifyAccountCallbackProxy_VerifyExistingAccount");
static_assert(offsetof(FCTAuthVerifyAccountCallbackProxy_VerifyExistingAccount, VerificationCode) == 0x000000, "Member 'FCTAuthVerifyAccountCallbackProxy_VerifyExistingAccount::VerificationCode' has a wrong offset!");
static_assert(offsetof(FCTAuthVerifyAccountCallbackProxy_VerifyExistingAccount, ReturnValue) == 0x000010, "Member 'FCTAuthVerifyAccountCallbackProxy_VerifyExistingAccount::ReturnValue' has a wrong offset!");

// Function SCT.FCTAuthVerifyAccountCallbackProxy.VerifyUpgradedAccount
// 0x0038 (0x0038 - 0x0000)
struct FCTAuthVerifyAccountCallbackProxy_VerifyUpgradedAccount final
{
public:
	class FString                                 Email;                                             // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Password;                                          // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 VerificationCode;                                  // 0x0020(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFCTAuthVerifyAccountCallbackProxy*     ReturnValue;                                       // 0x0030(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCTAuthVerifyAccountCallbackProxy_VerifyUpgradedAccount) == 0x000008, "Wrong alignment on FCTAuthVerifyAccountCallbackProxy_VerifyUpgradedAccount");
static_assert(sizeof(FCTAuthVerifyAccountCallbackProxy_VerifyUpgradedAccount) == 0x000038, "Wrong size on FCTAuthVerifyAccountCallbackProxy_VerifyUpgradedAccount");
static_assert(offsetof(FCTAuthVerifyAccountCallbackProxy_VerifyUpgradedAccount, Email) == 0x000000, "Member 'FCTAuthVerifyAccountCallbackProxy_VerifyUpgradedAccount::Email' has a wrong offset!");
static_assert(offsetof(FCTAuthVerifyAccountCallbackProxy_VerifyUpgradedAccount, Password) == 0x000010, "Member 'FCTAuthVerifyAccountCallbackProxy_VerifyUpgradedAccount::Password' has a wrong offset!");
static_assert(offsetof(FCTAuthVerifyAccountCallbackProxy_VerifyUpgradedAccount, VerificationCode) == 0x000020, "Member 'FCTAuthVerifyAccountCallbackProxy_VerifyUpgradedAccount::VerificationCode' has a wrong offset!");
static_assert(offsetof(FCTAuthVerifyAccountCallbackProxy_VerifyUpgradedAccount, ReturnValue) == 0x000030, "Member 'FCTAuthVerifyAccountCallbackProxy_VerifyUpgradedAccount::ReturnValue' has a wrong offset!");

// Function SCT.FCTQueryLegalEligibilitiesCallbackProxy.QueryVersusEvilLegalEligibilities
// 0x0008 (0x0008 - 0x0000)
struct FCTQueryLegalEligibilitiesCallbackProxy_QueryVersusEvilLegalEligibilities final
{
public:
	class UFCTQueryLegalEligibilitiesCallbackProxy* ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCTQueryLegalEligibilitiesCallbackProxy_QueryVersusEvilLegalEligibilities) == 0x000008, "Wrong alignment on FCTQueryLegalEligibilitiesCallbackProxy_QueryVersusEvilLegalEligibilities");
static_assert(sizeof(FCTQueryLegalEligibilitiesCallbackProxy_QueryVersusEvilLegalEligibilities) == 0x000008, "Wrong size on FCTQueryLegalEligibilitiesCallbackProxy_QueryVersusEvilLegalEligibilities");
static_assert(offsetof(FCTQueryLegalEligibilitiesCallbackProxy_QueryVersusEvilLegalEligibilities, ReturnValue) == 0x000000, "Member 'FCTQueryLegalEligibilitiesCallbackProxy_QueryVersusEvilLegalEligibilities::ReturnValue' has a wrong offset!");

// Function SCT.FCTQueryLegalEligibilitiesCallbackProxy.QueryVersusEvilLegalEligibilitiesByCountry
// 0x0018 (0x0018 - 0x0000)
struct FCTQueryLegalEligibilitiesCallbackProxy_QueryVersusEvilLegalEligibilitiesByCountry final
{
public:
	class FString                                 CultureCode;                                       // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFCTQueryLegalEligibilitiesCallbackProxy* ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCTQueryLegalEligibilitiesCallbackProxy_QueryVersusEvilLegalEligibilitiesByCountry) == 0x000008, "Wrong alignment on FCTQueryLegalEligibilitiesCallbackProxy_QueryVersusEvilLegalEligibilitiesByCountry");
static_assert(sizeof(FCTQueryLegalEligibilitiesCallbackProxy_QueryVersusEvilLegalEligibilitiesByCountry) == 0x000018, "Wrong size on FCTQueryLegalEligibilitiesCallbackProxy_QueryVersusEvilLegalEligibilitiesByCountry");
static_assert(offsetof(FCTQueryLegalEligibilitiesCallbackProxy_QueryVersusEvilLegalEligibilitiesByCountry, CultureCode) == 0x000000, "Member 'FCTQueryLegalEligibilitiesCallbackProxy_QueryVersusEvilLegalEligibilitiesByCountry::CultureCode' has a wrong offset!");
static_assert(offsetof(FCTQueryLegalEligibilitiesCallbackProxy_QueryVersusEvilLegalEligibilitiesByCountry, ReturnValue) == 0x000010, "Member 'FCTQueryLegalEligibilitiesCallbackProxy_QueryVersusEvilLegalEligibilitiesByCountry::ReturnValue' has a wrong offset!");

// Function SCT.UserSettingsGIS.GetSetting
// 0x0010 (0x0010 - 0x0000)
struct UserSettingsGIS_GetSetting final
{
public:
	TSubclassOf<class USettingsObject>            ClassType;                                         // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USettingsObject*                        ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UserSettingsGIS_GetSetting) == 0x000008, "Wrong alignment on UserSettingsGIS_GetSetting");
static_assert(sizeof(UserSettingsGIS_GetSetting) == 0x000010, "Wrong size on UserSettingsGIS_GetSetting");
static_assert(offsetof(UserSettingsGIS_GetSetting, ClassType) == 0x000000, "Member 'UserSettingsGIS_GetSetting::ClassType' has a wrong offset!");
static_assert(offsetof(UserSettingsGIS_GetSetting, ReturnValue) == 0x000008, "Member 'UserSettingsGIS_GetSetting::ReturnValue' has a wrong offset!");

// Function SCT.FCTAcceptLegalPolicyCallbackProxy.AcceptVersusEvilPolict
// 0x0018 (0x0018 - 0x0000)
struct FCTAcceptLegalPolicyCallbackProxy_AcceptVersusEvilPolict final
{
public:
	class FString                                 LocalizedVersionId;                                // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFCTAcceptLegalPolicyCallbackProxy*     ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCTAcceptLegalPolicyCallbackProxy_AcceptVersusEvilPolict) == 0x000008, "Wrong alignment on FCTAcceptLegalPolicyCallbackProxy_AcceptVersusEvilPolict");
static_assert(sizeof(FCTAcceptLegalPolicyCallbackProxy_AcceptVersusEvilPolict) == 0x000018, "Wrong size on FCTAcceptLegalPolicyCallbackProxy_AcceptVersusEvilPolict");
static_assert(offsetof(FCTAcceptLegalPolicyCallbackProxy_AcceptVersusEvilPolict, LocalizedVersionId) == 0x000000, "Member 'FCTAcceptLegalPolicyCallbackProxy_AcceptVersusEvilPolict::LocalizedVersionId' has a wrong offset!");
static_assert(offsetof(FCTAcceptLegalPolicyCallbackProxy_AcceptVersusEvilPolict, ReturnValue) == 0x000010, "Member 'FCTAcceptLegalPolicyCallbackProxy_AcceptVersusEvilPolict::ReturnValue' has a wrong offset!");

// Function SCT.FCTAccelByteAuthenticationWidget.PasswordIsValid
// 0x0028 (0x0028 - 0x0000)
struct FCTAccelByteAuthenticationWidget_PasswordIsValid final
{
public:
	class FString                                 Password;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ConfirmedPassword;                                 // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Code;                                              // 0x0020(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0024(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_25[0x3];                                       // 0x0025(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FCTAccelByteAuthenticationWidget_PasswordIsValid) == 0x000008, "Wrong alignment on FCTAccelByteAuthenticationWidget_PasswordIsValid");
static_assert(sizeof(FCTAccelByteAuthenticationWidget_PasswordIsValid) == 0x000028, "Wrong size on FCTAccelByteAuthenticationWidget_PasswordIsValid");
static_assert(offsetof(FCTAccelByteAuthenticationWidget_PasswordIsValid, Password) == 0x000000, "Member 'FCTAccelByteAuthenticationWidget_PasswordIsValid::Password' has a wrong offset!");
static_assert(offsetof(FCTAccelByteAuthenticationWidget_PasswordIsValid, ConfirmedPassword) == 0x000010, "Member 'FCTAccelByteAuthenticationWidget_PasswordIsValid::ConfirmedPassword' has a wrong offset!");
static_assert(offsetof(FCTAccelByteAuthenticationWidget_PasswordIsValid, Code) == 0x000020, "Member 'FCTAccelByteAuthenticationWidget_PasswordIsValid::Code' has a wrong offset!");
static_assert(offsetof(FCTAccelByteAuthenticationWidget_PasswordIsValid, ReturnValue) == 0x000024, "Member 'FCTAccelByteAuthenticationWidget_PasswordIsValid::ReturnValue' has a wrong offset!");

// Function SCT.FCTAccelByteAvatarCacheGIS.GetCachedAvatar
// 0x0018 (0x0018 - 0x0000)
struct FCTAccelByteAvatarCacheGIS_GetCachedAvatar final
{
public:
	class FString                                 InAccelByteID;                                     // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTexture2DDynamic*                      ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCTAccelByteAvatarCacheGIS_GetCachedAvatar) == 0x000008, "Wrong alignment on FCTAccelByteAvatarCacheGIS_GetCachedAvatar");
static_assert(sizeof(FCTAccelByteAvatarCacheGIS_GetCachedAvatar) == 0x000018, "Wrong size on FCTAccelByteAvatarCacheGIS_GetCachedAvatar");
static_assert(offsetof(FCTAccelByteAvatarCacheGIS_GetCachedAvatar, InAccelByteID) == 0x000000, "Member 'FCTAccelByteAvatarCacheGIS_GetCachedAvatar::InAccelByteID' has a wrong offset!");
static_assert(offsetof(FCTAccelByteAvatarCacheGIS_GetCachedAvatar, ReturnValue) == 0x000010, "Member 'FCTAccelByteAvatarCacheGIS_GetCachedAvatar::ReturnValue' has a wrong offset!");

// Function SCT.AccelByteAvatarCacheCallbackProxy.GetCachedAvatarAsync
// 0x0020 (0x0020 - 0x0000)
struct AccelByteAvatarCacheCallbackProxy_GetCachedAvatarAsync final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 InAccelByteID;                                     // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAccelByteAvatarCacheCallbackProxy*     ReturnValue;                                       // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AccelByteAvatarCacheCallbackProxy_GetCachedAvatarAsync) == 0x000008, "Wrong alignment on AccelByteAvatarCacheCallbackProxy_GetCachedAvatarAsync");
static_assert(sizeof(AccelByteAvatarCacheCallbackProxy_GetCachedAvatarAsync) == 0x000020, "Wrong size on AccelByteAvatarCacheCallbackProxy_GetCachedAvatarAsync");
static_assert(offsetof(AccelByteAvatarCacheCallbackProxy_GetCachedAvatarAsync, WorldContextObject) == 0x000000, "Member 'AccelByteAvatarCacheCallbackProxy_GetCachedAvatarAsync::WorldContextObject' has a wrong offset!");
static_assert(offsetof(AccelByteAvatarCacheCallbackProxy_GetCachedAvatarAsync, InAccelByteID) == 0x000008, "Member 'AccelByteAvatarCacheCallbackProxy_GetCachedAvatarAsync::InAccelByteID' has a wrong offset!");
static_assert(offsetof(AccelByteAvatarCacheCallbackProxy_GetCachedAvatarAsync, ReturnValue) == 0x000018, "Member 'AccelByteAvatarCacheCallbackProxy_GetCachedAvatarAsync::ReturnValue' has a wrong offset!");

// Function SCT.AccelByteAvatarCacheCallbackProxy.GetCachedAvatarForPrimaryUserAsync
// 0x0010 (0x0010 - 0x0000)
struct AccelByteAvatarCacheCallbackProxy_GetCachedAvatarForPrimaryUserAsync final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAccelByteAvatarCacheCallbackProxy*     ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AccelByteAvatarCacheCallbackProxy_GetCachedAvatarForPrimaryUserAsync) == 0x000008, "Wrong alignment on AccelByteAvatarCacheCallbackProxy_GetCachedAvatarForPrimaryUserAsync");
static_assert(sizeof(AccelByteAvatarCacheCallbackProxy_GetCachedAvatarForPrimaryUserAsync) == 0x000010, "Wrong size on AccelByteAvatarCacheCallbackProxy_GetCachedAvatarForPrimaryUserAsync");
static_assert(offsetof(AccelByteAvatarCacheCallbackProxy_GetCachedAvatarForPrimaryUserAsync, WorldContextObject) == 0x000000, "Member 'AccelByteAvatarCacheCallbackProxy_GetCachedAvatarForPrimaryUserAsync::WorldContextObject' has a wrong offset!");
static_assert(offsetof(AccelByteAvatarCacheCallbackProxy_GetCachedAvatarForPrimaryUserAsync, ReturnValue) == 0x000008, "Member 'AccelByteAvatarCacheCallbackProxy_GetCachedAvatarForPrimaryUserAsync::ReturnValue' has a wrong offset!");

// Function SCT.FCTClaimCampaignEntitlementCallbackProxy.RedeemCode
// 0x0018 (0x0018 - 0x0000)
struct FCTClaimCampaignEntitlementCallbackProxy_RedeemCode final
{
public:
	class FString                                 Code;                                              // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFCTClaimCampaignEntitlementCallbackProxy* ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCTClaimCampaignEntitlementCallbackProxy_RedeemCode) == 0x000008, "Wrong alignment on FCTClaimCampaignEntitlementCallbackProxy_RedeemCode");
static_assert(sizeof(FCTClaimCampaignEntitlementCallbackProxy_RedeemCode) == 0x000018, "Wrong size on FCTClaimCampaignEntitlementCallbackProxy_RedeemCode");
static_assert(offsetof(FCTClaimCampaignEntitlementCallbackProxy_RedeemCode, Code) == 0x000000, "Member 'FCTClaimCampaignEntitlementCallbackProxy_RedeemCode::Code' has a wrong offset!");
static_assert(offsetof(FCTClaimCampaignEntitlementCallbackProxy_RedeemCode, ReturnValue) == 0x000010, "Member 'FCTClaimCampaignEntitlementCallbackProxy_RedeemCode::ReturnValue' has a wrong offset!");

// Function SCT.FCTRedeemCodeCallbackProxy.RedeemCode
// 0x0018 (0x0018 - 0x0000)
struct FCTRedeemCodeCallbackProxy_RedeemCode final
{
public:
	class FString                                 Code;                                              // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFCTRedeemCodeCallbackProxy*            ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCTRedeemCodeCallbackProxy_RedeemCode) == 0x000008, "Wrong alignment on FCTRedeemCodeCallbackProxy_RedeemCode");
static_assert(sizeof(FCTRedeemCodeCallbackProxy_RedeemCode) == 0x000018, "Wrong size on FCTRedeemCodeCallbackProxy_RedeemCode");
static_assert(offsetof(FCTRedeemCodeCallbackProxy_RedeemCode, Code) == 0x000000, "Member 'FCTRedeemCodeCallbackProxy_RedeemCode::Code' has a wrong offset!");
static_assert(offsetof(FCTRedeemCodeCallbackProxy_RedeemCode, ReturnValue) == 0x000010, "Member 'FCTRedeemCodeCallbackProxy_RedeemCode::ReturnValue' has a wrong offset!");

// Function SCT.FCTGetWalletCallbackProxy.GetWallet
// 0x0010 (0x0010 - 0x0000)
struct FCTGetWalletCallbackProxy_GetWallet final
{
public:
	EPremiumCurrency                              Currency;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UFCTGetWalletCallbackProxy*             ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCTGetWalletCallbackProxy_GetWallet) == 0x000008, "Wrong alignment on FCTGetWalletCallbackProxy_GetWallet");
static_assert(sizeof(FCTGetWalletCallbackProxy_GetWallet) == 0x000010, "Wrong size on FCTGetWalletCallbackProxy_GetWallet");
static_assert(offsetof(FCTGetWalletCallbackProxy_GetWallet, Currency) == 0x000000, "Member 'FCTGetWalletCallbackProxy_GetWallet::Currency' has a wrong offset!");
static_assert(offsetof(FCTGetWalletCallbackProxy_GetWallet, ReturnValue) == 0x000008, "Member 'FCTGetWalletCallbackProxy_GetWallet::ReturnValue' has a wrong offset!");

// Function SCT.FCTQueryEntitlementsCallbackProxy.QueryUserEntitlementByItemID
// 0x0018 (0x0018 - 0x0000)
struct FCTQueryEntitlementsCallbackProxy_QueryUserEntitlementByItemID final
{
public:
	class FString                                 ItemId;                                            // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFCTQueryEntitlementsCallbackProxy*     ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCTQueryEntitlementsCallbackProxy_QueryUserEntitlementByItemID) == 0x000008, "Wrong alignment on FCTQueryEntitlementsCallbackProxy_QueryUserEntitlementByItemID");
static_assert(sizeof(FCTQueryEntitlementsCallbackProxy_QueryUserEntitlementByItemID) == 0x000018, "Wrong size on FCTQueryEntitlementsCallbackProxy_QueryUserEntitlementByItemID");
static_assert(offsetof(FCTQueryEntitlementsCallbackProxy_QueryUserEntitlementByItemID, ItemId) == 0x000000, "Member 'FCTQueryEntitlementsCallbackProxy_QueryUserEntitlementByItemID::ItemId' has a wrong offset!");
static_assert(offsetof(FCTQueryEntitlementsCallbackProxy_QueryUserEntitlementByItemID, ReturnValue) == 0x000010, "Member 'FCTQueryEntitlementsCallbackProxy_QueryUserEntitlementByItemID::ReturnValue' has a wrong offset!");

// Function SCT.FCTQueryEntitlementsCallbackProxy.QueryUserEntitlements
// 0x0008 (0x0008 - 0x0000)
struct FCTQueryEntitlementsCallbackProxy_QueryUserEntitlements final
{
public:
	class UFCTQueryEntitlementsCallbackProxy*     ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCTQueryEntitlementsCallbackProxy_QueryUserEntitlements) == 0x000008, "Wrong alignment on FCTQueryEntitlementsCallbackProxy_QueryUserEntitlements");
static_assert(sizeof(FCTQueryEntitlementsCallbackProxy_QueryUserEntitlements) == 0x000008, "Wrong size on FCTQueryEntitlementsCallbackProxy_QueryUserEntitlements");
static_assert(offsetof(FCTQueryEntitlementsCallbackProxy_QueryUserEntitlements, ReturnValue) == 0x000000, "Member 'FCTQueryEntitlementsCallbackProxy_QueryUserEntitlements::ReturnValue' has a wrong offset!");

// Function SCT.FCTGetBulkDLCPacksCallbackProxy.GetBulkDLCPacks
// 0x0018 (0x0018 - 0x0000)
struct FCTGetBulkDLCPacksCallbackProxy_GetBulkDLCPacks final
{
public:
	class FString                                 CultureCode;                                       // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFCTGetBulkDLCPacksCallbackProxy*       ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCTGetBulkDLCPacksCallbackProxy_GetBulkDLCPacks) == 0x000008, "Wrong alignment on FCTGetBulkDLCPacksCallbackProxy_GetBulkDLCPacks");
static_assert(sizeof(FCTGetBulkDLCPacksCallbackProxy_GetBulkDLCPacks) == 0x000018, "Wrong size on FCTGetBulkDLCPacksCallbackProxy_GetBulkDLCPacks");
static_assert(offsetof(FCTGetBulkDLCPacksCallbackProxy_GetBulkDLCPacks, CultureCode) == 0x000000, "Member 'FCTGetBulkDLCPacksCallbackProxy_GetBulkDLCPacks::CultureCode' has a wrong offset!");
static_assert(offsetof(FCTGetBulkDLCPacksCallbackProxy_GetBulkDLCPacks, ReturnValue) == 0x000010, "Member 'FCTGetBulkDLCPacksCallbackProxy_GetBulkDLCPacks::ReturnValue' has a wrong offset!");

// Function SCT.FCTSyncPlatformPurchases.SyncPlatformPurchases
// 0x0010 (0x0010 - 0x0000)
struct FCTSyncPlatformPurchases_SyncPlatformPurchases final
{
public:
	bool                                          bInForceSync;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UFCTSyncPlatformPurchases*              ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCTSyncPlatformPurchases_SyncPlatformPurchases) == 0x000008, "Wrong alignment on FCTSyncPlatformPurchases_SyncPlatformPurchases");
static_assert(sizeof(FCTSyncPlatformPurchases_SyncPlatformPurchases) == 0x000010, "Wrong size on FCTSyncPlatformPurchases_SyncPlatformPurchases");
static_assert(offsetof(FCTSyncPlatformPurchases_SyncPlatformPurchases, bInForceSync) == 0x000000, "Member 'FCTSyncPlatformPurchases_SyncPlatformPurchases::bInForceSync' has a wrong offset!");
static_assert(offsetof(FCTSyncPlatformPurchases_SyncPlatformPurchases, ReturnValue) == 0x000008, "Member 'FCTSyncPlatformPurchases_SyncPlatformPurchases::ReturnValue' has a wrong offset!");

// Function SCT.FCTGetTexturesFromUrlCallbackProxy.GetDLCTextures
// 0x0018 (0x0018 - 0x0000)
struct FCTGetTexturesFromUrlCallbackProxy_GetDLCTextures final
{
public:
	struct FBulkDLCPacksData                      BulkDLCData;                                       // 0x0000(0x0010)(Parm, NativeAccessSpecifierPublic)
	class UFCTGetTexturesFromUrlCallbackProxy*    ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCTGetTexturesFromUrlCallbackProxy_GetDLCTextures) == 0x000008, "Wrong alignment on FCTGetTexturesFromUrlCallbackProxy_GetDLCTextures");
static_assert(sizeof(FCTGetTexturesFromUrlCallbackProxy_GetDLCTextures) == 0x000018, "Wrong size on FCTGetTexturesFromUrlCallbackProxy_GetDLCTextures");
static_assert(offsetof(FCTGetTexturesFromUrlCallbackProxy_GetDLCTextures, BulkDLCData) == 0x000000, "Member 'FCTGetTexturesFromUrlCallbackProxy_GetDLCTextures::BulkDLCData' has a wrong offset!");
static_assert(offsetof(FCTGetTexturesFromUrlCallbackProxy_GetDLCTextures, ReturnValue) == 0x000010, "Member 'FCTGetTexturesFromUrlCallbackProxy_GetDLCTextures::ReturnValue' has a wrong offset!");

// Function SCT.FCTGetFriendsListAsyncProxy.GetFriendsList
// 0x0008 (0x0008 - 0x0000)
struct FCTGetFriendsListAsyncProxy_GetFriendsList final
{
public:
	class UFCTGetFriendsListAsyncProxy*           ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCTGetFriendsListAsyncProxy_GetFriendsList) == 0x000008, "Wrong alignment on FCTGetFriendsListAsyncProxy_GetFriendsList");
static_assert(sizeof(FCTGetFriendsListAsyncProxy_GetFriendsList) == 0x000008, "Wrong size on FCTGetFriendsListAsyncProxy_GetFriendsList");
static_assert(offsetof(FCTGetFriendsListAsyncProxy_GetFriendsList, ReturnValue) == 0x000000, "Member 'FCTGetFriendsListAsyncProxy_GetFriendsList::ReturnValue' has a wrong offset!");

// Function SCT.FCTGetFriendsListAsyncProxy.GetIncomingList
// 0x0008 (0x0008 - 0x0000)
struct FCTGetFriendsListAsyncProxy_GetIncomingList final
{
public:
	class UFCTGetFriendsListAsyncProxy*           ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCTGetFriendsListAsyncProxy_GetIncomingList) == 0x000008, "Wrong alignment on FCTGetFriendsListAsyncProxy_GetIncomingList");
static_assert(sizeof(FCTGetFriendsListAsyncProxy_GetIncomingList) == 0x000008, "Wrong size on FCTGetFriendsListAsyncProxy_GetIncomingList");
static_assert(offsetof(FCTGetFriendsListAsyncProxy_GetIncomingList, ReturnValue) == 0x000000, "Member 'FCTGetFriendsListAsyncProxy_GetIncomingList::ReturnValue' has a wrong offset!");

// Function SCT.FCTGetFriendsListAsyncProxy.GetOnlineUsersRequest
// 0x0008 (0x0008 - 0x0000)
struct FCTGetFriendsListAsyncProxy_GetOnlineUsersRequest final
{
public:
	class UFCTGetFriendsListAsyncProxy*           ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCTGetFriendsListAsyncProxy_GetOnlineUsersRequest) == 0x000008, "Wrong alignment on FCTGetFriendsListAsyncProxy_GetOnlineUsersRequest");
static_assert(sizeof(FCTGetFriendsListAsyncProxy_GetOnlineUsersRequest) == 0x000008, "Wrong size on FCTGetFriendsListAsyncProxy_GetOnlineUsersRequest");
static_assert(offsetof(FCTGetFriendsListAsyncProxy_GetOnlineUsersRequest, ReturnValue) == 0x000000, "Member 'FCTGetFriendsListAsyncProxy_GetOnlineUsersRequest::ReturnValue' has a wrong offset!");

// Function SCT.FCTGetFriendsListAsyncProxy.GetOutgoingList
// 0x0008 (0x0008 - 0x0000)
struct FCTGetFriendsListAsyncProxy_GetOutgoingList final
{
public:
	class UFCTGetFriendsListAsyncProxy*           ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCTGetFriendsListAsyncProxy_GetOutgoingList) == 0x000008, "Wrong alignment on FCTGetFriendsListAsyncProxy_GetOutgoingList");
static_assert(sizeof(FCTGetFriendsListAsyncProxy_GetOutgoingList) == 0x000008, "Wrong size on FCTGetFriendsListAsyncProxy_GetOutgoingList");
static_assert(offsetof(FCTGetFriendsListAsyncProxy_GetOutgoingList, ReturnValue) == 0x000000, "Member 'FCTGetFriendsListAsyncProxy_GetOutgoingList::ReturnValue' has a wrong offset!");

// Function SCT.FCTGetFriendsListAsyncProxy.GetRecentList
// 0x0008 (0x0008 - 0x0000)
struct FCTGetFriendsListAsyncProxy_GetRecentList final
{
public:
	class UFCTGetFriendsListAsyncProxy*           ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCTGetFriendsListAsyncProxy_GetRecentList) == 0x000008, "Wrong alignment on FCTGetFriendsListAsyncProxy_GetRecentList");
static_assert(sizeof(FCTGetFriendsListAsyncProxy_GetRecentList) == 0x000008, "Wrong size on FCTGetFriendsListAsyncProxy_GetRecentList");
static_assert(offsetof(FCTGetFriendsListAsyncProxy_GetRecentList, ReturnValue) == 0x000000, "Member 'FCTGetFriendsListAsyncProxy_GetRecentList::ReturnValue' has a wrong offset!");

// Function SCT.FCTGetFriendsListAsyncProxy.SearchForUser
// 0x0018 (0x0018 - 0x0000)
struct FCTGetFriendsListAsyncProxy_SearchForUser final
{
public:
	class FString                                 Username;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFCTGetFriendsListAsyncProxy*           ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCTGetFriendsListAsyncProxy_SearchForUser) == 0x000008, "Wrong alignment on FCTGetFriendsListAsyncProxy_SearchForUser");
static_assert(sizeof(FCTGetFriendsListAsyncProxy_SearchForUser) == 0x000018, "Wrong size on FCTGetFriendsListAsyncProxy_SearchForUser");
static_assert(offsetof(FCTGetFriendsListAsyncProxy_SearchForUser, Username) == 0x000000, "Member 'FCTGetFriendsListAsyncProxy_SearchForUser::Username' has a wrong offset!");
static_assert(offsetof(FCTGetFriendsListAsyncProxy_SearchForUser, ReturnValue) == 0x000010, "Member 'FCTGetFriendsListAsyncProxy_SearchForUser::ReturnValue' has a wrong offset!");

// Function SCT.FCTGetFriendProfileAsyncProxy.GetFriendProfileById
// 0x0018 (0x0018 - 0x0000)
struct FCTGetFriendProfileAsyncProxy_GetFriendProfileById final
{
public:
	class FString                                 FriendId;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFCTGetFriendProfileAsyncProxy*         ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCTGetFriendProfileAsyncProxy_GetFriendProfileById) == 0x000008, "Wrong alignment on FCTGetFriendProfileAsyncProxy_GetFriendProfileById");
static_assert(sizeof(FCTGetFriendProfileAsyncProxy_GetFriendProfileById) == 0x000018, "Wrong size on FCTGetFriendProfileAsyncProxy_GetFriendProfileById");
static_assert(offsetof(FCTGetFriendProfileAsyncProxy_GetFriendProfileById, FriendId) == 0x000000, "Member 'FCTGetFriendProfileAsyncProxy_GetFriendProfileById::FriendId' has a wrong offset!");
static_assert(offsetof(FCTGetFriendProfileAsyncProxy_GetFriendProfileById, ReturnValue) == 0x000010, "Member 'FCTGetFriendProfileAsyncProxy_GetFriendProfileById::ReturnValue' has a wrong offset!");

// Function SCT.FCTGetRecentlyPlayedWithListAsyncProxy.AddPlayerToRecentlyPlayedWithList
// 0x0018 (0x0018 - 0x0000)
struct FCTGetRecentlyPlayedWithListAsyncProxy_AddPlayerToRecentlyPlayedWithList final
{
public:
	class FString                                 UserId;                                            // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFCTGetRecentlyPlayedWithListAsyncProxy* ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCTGetRecentlyPlayedWithListAsyncProxy_AddPlayerToRecentlyPlayedWithList) == 0x000008, "Wrong alignment on FCTGetRecentlyPlayedWithListAsyncProxy_AddPlayerToRecentlyPlayedWithList");
static_assert(sizeof(FCTGetRecentlyPlayedWithListAsyncProxy_AddPlayerToRecentlyPlayedWithList) == 0x000018, "Wrong size on FCTGetRecentlyPlayedWithListAsyncProxy_AddPlayerToRecentlyPlayedWithList");
static_assert(offsetof(FCTGetRecentlyPlayedWithListAsyncProxy_AddPlayerToRecentlyPlayedWithList, UserId) == 0x000000, "Member 'FCTGetRecentlyPlayedWithListAsyncProxy_AddPlayerToRecentlyPlayedWithList::UserId' has a wrong offset!");
static_assert(offsetof(FCTGetRecentlyPlayedWithListAsyncProxy_AddPlayerToRecentlyPlayedWithList, ReturnValue) == 0x000010, "Member 'FCTGetRecentlyPlayedWithListAsyncProxy_AddPlayerToRecentlyPlayedWithList::ReturnValue' has a wrong offset!");

// Function SCT.FCTGetRecentlyPlayedWithListAsyncProxy.CacheMostRecentlyPlayedWith
// 0x0010 (0x0010 - 0x0000)
struct FCTGetRecentlyPlayedWithListAsyncProxy_CacheMostRecentlyPlayedWith final
{
public:
	class UAccelByteGIS*                          AccelByteGIS;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFCTGetRecentlyPlayedWithListAsyncProxy* ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCTGetRecentlyPlayedWithListAsyncProxy_CacheMostRecentlyPlayedWith) == 0x000008, "Wrong alignment on FCTGetRecentlyPlayedWithListAsyncProxy_CacheMostRecentlyPlayedWith");
static_assert(sizeof(FCTGetRecentlyPlayedWithListAsyncProxy_CacheMostRecentlyPlayedWith) == 0x000010, "Wrong size on FCTGetRecentlyPlayedWithListAsyncProxy_CacheMostRecentlyPlayedWith");
static_assert(offsetof(FCTGetRecentlyPlayedWithListAsyncProxy_CacheMostRecentlyPlayedWith, AccelByteGIS) == 0x000000, "Member 'FCTGetRecentlyPlayedWithListAsyncProxy_CacheMostRecentlyPlayedWith::AccelByteGIS' has a wrong offset!");
static_assert(offsetof(FCTGetRecentlyPlayedWithListAsyncProxy_CacheMostRecentlyPlayedWith, ReturnValue) == 0x000008, "Member 'FCTGetRecentlyPlayedWithListAsyncProxy_CacheMostRecentlyPlayedWith::ReturnValue' has a wrong offset!");

// Function SCT.FCTGetRecentlyPlayedWithListAsyncProxy.GetRecentlyPlayedWithList
// 0x0008 (0x0008 - 0x0000)
struct FCTGetRecentlyPlayedWithListAsyncProxy_GetRecentlyPlayedWithList final
{
public:
	class UFCTGetRecentlyPlayedWithListAsyncProxy* ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCTGetRecentlyPlayedWithListAsyncProxy_GetRecentlyPlayedWithList) == 0x000008, "Wrong alignment on FCTGetRecentlyPlayedWithListAsyncProxy_GetRecentlyPlayedWithList");
static_assert(sizeof(FCTGetRecentlyPlayedWithListAsyncProxy_GetRecentlyPlayedWithList) == 0x000008, "Wrong size on FCTGetRecentlyPlayedWithListAsyncProxy_GetRecentlyPlayedWithList");
static_assert(offsetof(FCTGetRecentlyPlayedWithListAsyncProxy_GetRecentlyPlayedWithList, ReturnValue) == 0x000000, "Member 'FCTGetRecentlyPlayedWithListAsyncProxy_GetRecentlyPlayedWithList::ReturnValue' has a wrong offset!");

// Function SCT.FCTFriendRelationshipAsyncProxy.GetFriendRelationshipStatus
// 0x0018 (0x0018 - 0x0000)
struct FCTFriendRelationshipAsyncProxy_GetFriendRelationshipStatus final
{
public:
	class FString                                 UserId;                                            // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFCTFriendRelationshipAsyncProxy*       ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCTFriendRelationshipAsyncProxy_GetFriendRelationshipStatus) == 0x000008, "Wrong alignment on FCTFriendRelationshipAsyncProxy_GetFriendRelationshipStatus");
static_assert(sizeof(FCTFriendRelationshipAsyncProxy_GetFriendRelationshipStatus) == 0x000018, "Wrong size on FCTFriendRelationshipAsyncProxy_GetFriendRelationshipStatus");
static_assert(offsetof(FCTFriendRelationshipAsyncProxy_GetFriendRelationshipStatus, UserId) == 0x000000, "Member 'FCTFriendRelationshipAsyncProxy_GetFriendRelationshipStatus::UserId' has a wrong offset!");
static_assert(offsetof(FCTFriendRelationshipAsyncProxy_GetFriendRelationshipStatus, ReturnValue) == 0x000010, "Member 'FCTFriendRelationshipAsyncProxy_GetFriendRelationshipStatus::ReturnValue' has a wrong offset!");

// Function SCT.FCTFriendManagementAsyncProxy.AcceptInviteFriend
// 0x0018 (0x0018 - 0x0000)
struct FCTFriendManagementAsyncProxy_AcceptInviteFriend final
{
public:
	class FString                                 FriendId;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFCTFriendManagementAsyncProxy*         ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCTFriendManagementAsyncProxy_AcceptInviteFriend) == 0x000008, "Wrong alignment on FCTFriendManagementAsyncProxy_AcceptInviteFriend");
static_assert(sizeof(FCTFriendManagementAsyncProxy_AcceptInviteFriend) == 0x000018, "Wrong size on FCTFriendManagementAsyncProxy_AcceptInviteFriend");
static_assert(offsetof(FCTFriendManagementAsyncProxy_AcceptInviteFriend, FriendId) == 0x000000, "Member 'FCTFriendManagementAsyncProxy_AcceptInviteFriend::FriendId' has a wrong offset!");
static_assert(offsetof(FCTFriendManagementAsyncProxy_AcceptInviteFriend, ReturnValue) == 0x000010, "Member 'FCTFriendManagementAsyncProxy_AcceptInviteFriend::ReturnValue' has a wrong offset!");

// Function SCT.FCTFriendManagementAsyncProxy.CancelInviteFriend
// 0x0018 (0x0018 - 0x0000)
struct FCTFriendManagementAsyncProxy_CancelInviteFriend final
{
public:
	class FString                                 FriendId;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFCTFriendManagementAsyncProxy*         ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCTFriendManagementAsyncProxy_CancelInviteFriend) == 0x000008, "Wrong alignment on FCTFriendManagementAsyncProxy_CancelInviteFriend");
static_assert(sizeof(FCTFriendManagementAsyncProxy_CancelInviteFriend) == 0x000018, "Wrong size on FCTFriendManagementAsyncProxy_CancelInviteFriend");
static_assert(offsetof(FCTFriendManagementAsyncProxy_CancelInviteFriend, FriendId) == 0x000000, "Member 'FCTFriendManagementAsyncProxy_CancelInviteFriend::FriendId' has a wrong offset!");
static_assert(offsetof(FCTFriendManagementAsyncProxy_CancelInviteFriend, ReturnValue) == 0x000010, "Member 'FCTFriendManagementAsyncProxy_CancelInviteFriend::ReturnValue' has a wrong offset!");

// Function SCT.FCTFriendManagementAsyncProxy.InviteFriend
// 0x0018 (0x0018 - 0x0000)
struct FCTFriendManagementAsyncProxy_InviteFriend final
{
public:
	class FString                                 FriendId;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFCTFriendManagementAsyncProxy*         ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCTFriendManagementAsyncProxy_InviteFriend) == 0x000008, "Wrong alignment on FCTFriendManagementAsyncProxy_InviteFriend");
static_assert(sizeof(FCTFriendManagementAsyncProxy_InviteFriend) == 0x000018, "Wrong size on FCTFriendManagementAsyncProxy_InviteFriend");
static_assert(offsetof(FCTFriendManagementAsyncProxy_InviteFriend, FriendId) == 0x000000, "Member 'FCTFriendManagementAsyncProxy_InviteFriend::FriendId' has a wrong offset!");
static_assert(offsetof(FCTFriendManagementAsyncProxy_InviteFriend, ReturnValue) == 0x000010, "Member 'FCTFriendManagementAsyncProxy_InviteFriend::ReturnValue' has a wrong offset!");

// Function SCT.FCTFriendManagementAsyncProxy.RejectInviteFriend
// 0x0018 (0x0018 - 0x0000)
struct FCTFriendManagementAsyncProxy_RejectInviteFriend final
{
public:
	class FString                                 FriendId;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFCTFriendManagementAsyncProxy*         ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCTFriendManagementAsyncProxy_RejectInviteFriend) == 0x000008, "Wrong alignment on FCTFriendManagementAsyncProxy_RejectInviteFriend");
static_assert(sizeof(FCTFriendManagementAsyncProxy_RejectInviteFriend) == 0x000018, "Wrong size on FCTFriendManagementAsyncProxy_RejectInviteFriend");
static_assert(offsetof(FCTFriendManagementAsyncProxy_RejectInviteFriend, FriendId) == 0x000000, "Member 'FCTFriendManagementAsyncProxy_RejectInviteFriend::FriendId' has a wrong offset!");
static_assert(offsetof(FCTFriendManagementAsyncProxy_RejectInviteFriend, ReturnValue) == 0x000010, "Member 'FCTFriendManagementAsyncProxy_RejectInviteFriend::ReturnValue' has a wrong offset!");

// Function SCT.FCTFriendManagementAsyncProxy.RemoveFriend
// 0x0018 (0x0018 - 0x0000)
struct FCTFriendManagementAsyncProxy_RemoveFriend final
{
public:
	class FString                                 FriendId;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFCTFriendManagementAsyncProxy*         ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCTFriendManagementAsyncProxy_RemoveFriend) == 0x000008, "Wrong alignment on FCTFriendManagementAsyncProxy_RemoveFriend");
static_assert(sizeof(FCTFriendManagementAsyncProxy_RemoveFriend) == 0x000018, "Wrong size on FCTFriendManagementAsyncProxy_RemoveFriend");
static_assert(offsetof(FCTFriendManagementAsyncProxy_RemoveFriend, FriendId) == 0x000000, "Member 'FCTFriendManagementAsyncProxy_RemoveFriend::FriendId' has a wrong offset!");
static_assert(offsetof(FCTFriendManagementAsyncProxy_RemoveFriend, ReturnValue) == 0x000010, "Member 'FCTFriendManagementAsyncProxy_RemoveFriend::ReturnValue' has a wrong offset!");

// Function SCT.FCTFriendImportByPlatformCallbackProxy.ImportFriendsByPlatform
// 0x0008 (0x0008 - 0x0000)
struct FCTFriendImportByPlatformCallbackProxy_ImportFriendsByPlatform final
{
public:
	class UFCTFriendImportByPlatformCallbackProxy* ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCTFriendImportByPlatformCallbackProxy_ImportFriendsByPlatform) == 0x000008, "Wrong alignment on FCTFriendImportByPlatformCallbackProxy_ImportFriendsByPlatform");
static_assert(sizeof(FCTFriendImportByPlatformCallbackProxy_ImportFriendsByPlatform) == 0x000008, "Wrong size on FCTFriendImportByPlatformCallbackProxy_ImportFriendsByPlatform");
static_assert(offsetof(FCTFriendImportByPlatformCallbackProxy_ImportFriendsByPlatform, ReturnValue) == 0x000000, "Member 'FCTFriendImportByPlatformCallbackProxy_ImportFriendsByPlatform::ReturnValue' has a wrong offset!");

// Function SCT.UserCardBaseWidget.SetupAvatarImage
// 0x0020 (0x0020 - 0x0000)
struct UserCardBaseWidget_SetupAvatarImage final
{
public:
	class FString                                 UserId;                                            // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTextBlock*                             InitialsTextBlock;                                 // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UWidgetSwitcher*                        Switcher;                                          // 0x0018(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UserCardBaseWidget_SetupAvatarImage) == 0x000008, "Wrong alignment on UserCardBaseWidget_SetupAvatarImage");
static_assert(sizeof(UserCardBaseWidget_SetupAvatarImage) == 0x000020, "Wrong size on UserCardBaseWidget_SetupAvatarImage");
static_assert(offsetof(UserCardBaseWidget_SetupAvatarImage, UserId) == 0x000000, "Member 'UserCardBaseWidget_SetupAvatarImage::UserId' has a wrong offset!");
static_assert(offsetof(UserCardBaseWidget_SetupAvatarImage, InitialsTextBlock) == 0x000010, "Member 'UserCardBaseWidget_SetupAvatarImage::InitialsTextBlock' has a wrong offset!");
static_assert(offsetof(UserCardBaseWidget_SetupAvatarImage, Switcher) == 0x000018, "Member 'UserCardBaseWidget_SetupAvatarImage::Switcher' has a wrong offset!");

// Function SCT.FCTSessionIDAsyncProxy.GetServerSessionID
// 0x0008 (0x0008 - 0x0000)
struct FCTSessionIDAsyncProxy_GetServerSessionID final
{
public:
	class UFCTSessionIDAsyncProxy*                ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCTSessionIDAsyncProxy_GetServerSessionID) == 0x000008, "Wrong alignment on FCTSessionIDAsyncProxy_GetServerSessionID");
static_assert(sizeof(FCTSessionIDAsyncProxy_GetServerSessionID) == 0x000008, "Wrong size on FCTSessionIDAsyncProxy_GetServerSessionID");
static_assert(offsetof(FCTSessionIDAsyncProxy_GetServerSessionID, ReturnValue) == 0x000000, "Member 'FCTSessionIDAsyncProxy_GetServerSessionID::ReturnValue' has a wrong offset!");

// Function SCT.FCTGetLiveMessageCallbackProxy.GetLiveMessageFromCloudGameRecord
// 0x0008 (0x0008 - 0x0000)
struct FCTGetLiveMessageCallbackProxy_GetLiveMessageFromCloudGameRecord final
{
public:
	class UFCTGetLiveMessageCallbackProxy*        ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCTGetLiveMessageCallbackProxy_GetLiveMessageFromCloudGameRecord) == 0x000008, "Wrong alignment on FCTGetLiveMessageCallbackProxy_GetLiveMessageFromCloudGameRecord");
static_assert(sizeof(FCTGetLiveMessageCallbackProxy_GetLiveMessageFromCloudGameRecord) == 0x000008, "Wrong size on FCTGetLiveMessageCallbackProxy_GetLiveMessageFromCloudGameRecord");
static_assert(offsetof(FCTGetLiveMessageCallbackProxy_GetLiveMessageFromCloudGameRecord, ReturnValue) == 0x000000, "Member 'FCTGetLiveMessageCallbackProxy_GetLiveMessageFromCloudGameRecord::ReturnValue' has a wrong offset!");

// Function SCT.FCTGetAllLeaderboardRankings.GetAllLeaderboardRankings
// 0x0008 (0x0008 - 0x0000)
struct FCTGetAllLeaderboardRankings_GetAllLeaderboardRankings final
{
public:
	class UFCTGetAllLeaderboardRankings*          ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCTGetAllLeaderboardRankings_GetAllLeaderboardRankings) == 0x000008, "Wrong alignment on FCTGetAllLeaderboardRankings_GetAllLeaderboardRankings");
static_assert(sizeof(FCTGetAllLeaderboardRankings_GetAllLeaderboardRankings) == 0x000008, "Wrong size on FCTGetAllLeaderboardRankings_GetAllLeaderboardRankings");
static_assert(offsetof(FCTGetAllLeaderboardRankings_GetAllLeaderboardRankings, ReturnValue) == 0x000000, "Member 'FCTGetAllLeaderboardRankings_GetAllLeaderboardRankings::ReturnValue' has a wrong offset!");

// Function SCT.FCTGetUserLeaderboardRanking.GetPublicUserLeaderboardRanking
// 0x0030 (0x0030 - 0x0000)
struct FCTGetUserLeaderboardRanking_GetPublicUserLeaderboardRanking final
{
public:
	class FString                                 UserId;                                            // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Code;                                              // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAccelByteLeaderboardTimeFrame                TimeFrame;                                         // 0x0020(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UFCTGetUserLeaderboardRanking*          ReturnValue;                                       // 0x0028(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCTGetUserLeaderboardRanking_GetPublicUserLeaderboardRanking) == 0x000008, "Wrong alignment on FCTGetUserLeaderboardRanking_GetPublicUserLeaderboardRanking");
static_assert(sizeof(FCTGetUserLeaderboardRanking_GetPublicUserLeaderboardRanking) == 0x000030, "Wrong size on FCTGetUserLeaderboardRanking_GetPublicUserLeaderboardRanking");
static_assert(offsetof(FCTGetUserLeaderboardRanking_GetPublicUserLeaderboardRanking, UserId) == 0x000000, "Member 'FCTGetUserLeaderboardRanking_GetPublicUserLeaderboardRanking::UserId' has a wrong offset!");
static_assert(offsetof(FCTGetUserLeaderboardRanking_GetPublicUserLeaderboardRanking, Code) == 0x000010, "Member 'FCTGetUserLeaderboardRanking_GetPublicUserLeaderboardRanking::Code' has a wrong offset!");
static_assert(offsetof(FCTGetUserLeaderboardRanking_GetPublicUserLeaderboardRanking, TimeFrame) == 0x000020, "Member 'FCTGetUserLeaderboardRanking_GetPublicUserLeaderboardRanking::TimeFrame' has a wrong offset!");
static_assert(offsetof(FCTGetUserLeaderboardRanking_GetPublicUserLeaderboardRanking, ReturnValue) == 0x000028, "Member 'FCTGetUserLeaderboardRanking_GetPublicUserLeaderboardRanking::ReturnValue' has a wrong offset!");

// Function SCT.FCTGetUserLeaderboardRanking.GetUserLeaderboardRanking
// 0x0020 (0x0020 - 0x0000)
struct FCTGetUserLeaderboardRanking_GetUserLeaderboardRanking final
{
public:
	class FString                                 Code;                                              // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAccelByteLeaderboardTimeFrame                TimeFrame;                                         // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UFCTGetUserLeaderboardRanking*          ReturnValue;                                       // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCTGetUserLeaderboardRanking_GetUserLeaderboardRanking) == 0x000008, "Wrong alignment on FCTGetUserLeaderboardRanking_GetUserLeaderboardRanking");
static_assert(sizeof(FCTGetUserLeaderboardRanking_GetUserLeaderboardRanking) == 0x000020, "Wrong size on FCTGetUserLeaderboardRanking_GetUserLeaderboardRanking");
static_assert(offsetof(FCTGetUserLeaderboardRanking_GetUserLeaderboardRanking, Code) == 0x000000, "Member 'FCTGetUserLeaderboardRanking_GetUserLeaderboardRanking::Code' has a wrong offset!");
static_assert(offsetof(FCTGetUserLeaderboardRanking_GetUserLeaderboardRanking, TimeFrame) == 0x000010, "Member 'FCTGetUserLeaderboardRanking_GetUserLeaderboardRanking::TimeFrame' has a wrong offset!");
static_assert(offsetof(FCTGetUserLeaderboardRanking_GetUserLeaderboardRanking, ReturnValue) == 0x000018, "Member 'FCTGetUserLeaderboardRanking_GetUserLeaderboardRanking::ReturnValue' has a wrong offset!");

// Function SCT.FCTPartyConnectionCallbackProxy.AcceptPartyInvitation
// 0x0028 (0x0028 - 0x0000)
struct FCTPartyConnectionCallbackProxy_AcceptPartyInvitation final
{
public:
	class FString                                 PartyId;                                           // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 InvitationToken;                                   // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFCTPartyConnectionCallbackProxy*       ReturnValue;                                       // 0x0020(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCTPartyConnectionCallbackProxy_AcceptPartyInvitation) == 0x000008, "Wrong alignment on FCTPartyConnectionCallbackProxy_AcceptPartyInvitation");
static_assert(sizeof(FCTPartyConnectionCallbackProxy_AcceptPartyInvitation) == 0x000028, "Wrong size on FCTPartyConnectionCallbackProxy_AcceptPartyInvitation");
static_assert(offsetof(FCTPartyConnectionCallbackProxy_AcceptPartyInvitation, PartyId) == 0x000000, "Member 'FCTPartyConnectionCallbackProxy_AcceptPartyInvitation::PartyId' has a wrong offset!");
static_assert(offsetof(FCTPartyConnectionCallbackProxy_AcceptPartyInvitation, InvitationToken) == 0x000010, "Member 'FCTPartyConnectionCallbackProxy_AcceptPartyInvitation::InvitationToken' has a wrong offset!");
static_assert(offsetof(FCTPartyConnectionCallbackProxy_AcceptPartyInvitation, ReturnValue) == 0x000020, "Member 'FCTPartyConnectionCallbackProxy_AcceptPartyInvitation::ReturnValue' has a wrong offset!");

// Function SCT.FCTPartyConnectionCallbackProxy.CreateParty
// 0x0008 (0x0008 - 0x0000)
struct FCTPartyConnectionCallbackProxy_CreateParty final
{
public:
	class UFCTPartyConnectionCallbackProxy*       ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCTPartyConnectionCallbackProxy_CreateParty) == 0x000008, "Wrong alignment on FCTPartyConnectionCallbackProxy_CreateParty");
static_assert(sizeof(FCTPartyConnectionCallbackProxy_CreateParty) == 0x000008, "Wrong size on FCTPartyConnectionCallbackProxy_CreateParty");
static_assert(offsetof(FCTPartyConnectionCallbackProxy_CreateParty, ReturnValue) == 0x000000, "Member 'FCTPartyConnectionCallbackProxy_CreateParty::ReturnValue' has a wrong offset!");

// Function SCT.FCTPartyConnectionCallbackProxy.LeaveParty
// 0x0008 (0x0008 - 0x0000)
struct FCTPartyConnectionCallbackProxy_LeaveParty final
{
public:
	class UFCTPartyConnectionCallbackProxy*       ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCTPartyConnectionCallbackProxy_LeaveParty) == 0x000008, "Wrong alignment on FCTPartyConnectionCallbackProxy_LeaveParty");
static_assert(sizeof(FCTPartyConnectionCallbackProxy_LeaveParty) == 0x000008, "Wrong size on FCTPartyConnectionCallbackProxy_LeaveParty");
static_assert(offsetof(FCTPartyConnectionCallbackProxy_LeaveParty, ReturnValue) == 0x000000, "Member 'FCTPartyConnectionCallbackProxy_LeaveParty::ReturnValue' has a wrong offset!");

// Function SCT.FCTPartyManagementCallbackProxy.InviteUserToParty
// 0x0018 (0x0018 - 0x0000)
struct FCTPartyManagementCallbackProxy_InviteUserToParty final
{
public:
	class FString                                 PlayerId;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFCTPartyManagementCallbackProxy*       ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCTPartyManagementCallbackProxy_InviteUserToParty) == 0x000008, "Wrong alignment on FCTPartyManagementCallbackProxy_InviteUserToParty");
static_assert(sizeof(FCTPartyManagementCallbackProxy_InviteUserToParty) == 0x000018, "Wrong size on FCTPartyManagementCallbackProxy_InviteUserToParty");
static_assert(offsetof(FCTPartyManagementCallbackProxy_InviteUserToParty, PlayerId) == 0x000000, "Member 'FCTPartyManagementCallbackProxy_InviteUserToParty::PlayerId' has a wrong offset!");
static_assert(offsetof(FCTPartyManagementCallbackProxy_InviteUserToParty, ReturnValue) == 0x000010, "Member 'FCTPartyManagementCallbackProxy_InviteUserToParty::ReturnValue' has a wrong offset!");

// Function SCT.FCTPartyManagementCallbackProxy.KickUserFromParty
// 0x0018 (0x0018 - 0x0000)
struct FCTPartyManagementCallbackProxy_KickUserFromParty final
{
public:
	class FString                                 PlayerId;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFCTPartyManagementCallbackProxy*       ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCTPartyManagementCallbackProxy_KickUserFromParty) == 0x000008, "Wrong alignment on FCTPartyManagementCallbackProxy_KickUserFromParty");
static_assert(sizeof(FCTPartyManagementCallbackProxy_KickUserFromParty) == 0x000018, "Wrong size on FCTPartyManagementCallbackProxy_KickUserFromParty");
static_assert(offsetof(FCTPartyManagementCallbackProxy_KickUserFromParty, PlayerId) == 0x000000, "Member 'FCTPartyManagementCallbackProxy_KickUserFromParty::PlayerId' has a wrong offset!");
static_assert(offsetof(FCTPartyManagementCallbackProxy_KickUserFromParty, ReturnValue) == 0x000010, "Member 'FCTPartyManagementCallbackProxy_KickUserFromParty::ReturnValue' has a wrong offset!");

// Function SCT.FCTPartyInfoCallbackProxy.GetPartyInfo
// 0x0008 (0x0008 - 0x0000)
struct FCTPartyInfoCallbackProxy_GetPartyInfo final
{
public:
	class UFCTPartyInfoCallbackProxy*             ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCTPartyInfoCallbackProxy_GetPartyInfo) == 0x000008, "Wrong alignment on FCTPartyInfoCallbackProxy_GetPartyInfo");
static_assert(sizeof(FCTPartyInfoCallbackProxy_GetPartyInfo) == 0x000008, "Wrong size on FCTPartyInfoCallbackProxy_GetPartyInfo");
static_assert(offsetof(FCTPartyInfoCallbackProxy_GetPartyInfo, ReturnValue) == 0x000000, "Member 'FCTPartyInfoCallbackProxy_GetPartyInfo::ReturnValue' has a wrong offset!");

// Function SCT.FCTJoinPartyCallbackProxy.JoinPendingConsoleLaunchMultiplayerSession
// 0x0010 (0x0010 - 0x0000)
struct FCTJoinPartyCallbackProxy_JoinPendingConsoleLaunchMultiplayerSession final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFCTJoinPartyCallbackProxy*             ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCTJoinPartyCallbackProxy_JoinPendingConsoleLaunchMultiplayerSession) == 0x000008, "Wrong alignment on FCTJoinPartyCallbackProxy_JoinPendingConsoleLaunchMultiplayerSession");
static_assert(sizeof(FCTJoinPartyCallbackProxy_JoinPendingConsoleLaunchMultiplayerSession) == 0x000010, "Wrong size on FCTJoinPartyCallbackProxy_JoinPendingConsoleLaunchMultiplayerSession");
static_assert(offsetof(FCTJoinPartyCallbackProxy_JoinPendingConsoleLaunchMultiplayerSession, WorldContextObject) == 0x000000, "Member 'FCTJoinPartyCallbackProxy_JoinPendingConsoleLaunchMultiplayerSession::WorldContextObject' has a wrong offset!");
static_assert(offsetof(FCTJoinPartyCallbackProxy_JoinPendingConsoleLaunchMultiplayerSession, ReturnValue) == 0x000008, "Member 'FCTJoinPartyCallbackProxy_JoinPendingConsoleLaunchMultiplayerSession::ReturnValue' has a wrong offset!");

// Function SCT.FCTJoinPartyCallbackProxy.JoinPendingConsoleSession
// 0x0010 (0x0010 - 0x0000)
struct FCTJoinPartyCallbackProxy_JoinPendingConsoleSession final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFCTJoinPartyCallbackProxy*             ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCTJoinPartyCallbackProxy_JoinPendingConsoleSession) == 0x000008, "Wrong alignment on FCTJoinPartyCallbackProxy_JoinPendingConsoleSession");
static_assert(sizeof(FCTJoinPartyCallbackProxy_JoinPendingConsoleSession) == 0x000010, "Wrong size on FCTJoinPartyCallbackProxy_JoinPendingConsoleSession");
static_assert(offsetof(FCTJoinPartyCallbackProxy_JoinPendingConsoleSession, WorldContextObject) == 0x000000, "Member 'FCTJoinPartyCallbackProxy_JoinPendingConsoleSession::WorldContextObject' has a wrong offset!");
static_assert(offsetof(FCTJoinPartyCallbackProxy_JoinPendingConsoleSession, ReturnValue) == 0x000008, "Member 'FCTJoinPartyCallbackProxy_JoinPendingConsoleSession::ReturnValue' has a wrong offset!");

// Function SCT.FCTAccelByteBlockPlayerCallbackProxy.BlockPlayer
// 0x0028 (0x0028 - 0x0000)
struct FCTAccelByteBlockPlayerCallbackProxy_BlockPlayer final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class APlayerController*                      PlayerController;                                  // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 UserId;                                            // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFCTAccelByteBlockPlayerCallbackProxy*  ReturnValue;                                       // 0x0020(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCTAccelByteBlockPlayerCallbackProxy_BlockPlayer) == 0x000008, "Wrong alignment on FCTAccelByteBlockPlayerCallbackProxy_BlockPlayer");
static_assert(sizeof(FCTAccelByteBlockPlayerCallbackProxy_BlockPlayer) == 0x000028, "Wrong size on FCTAccelByteBlockPlayerCallbackProxy_BlockPlayer");
static_assert(offsetof(FCTAccelByteBlockPlayerCallbackProxy_BlockPlayer, WorldContextObject) == 0x000000, "Member 'FCTAccelByteBlockPlayerCallbackProxy_BlockPlayer::WorldContextObject' has a wrong offset!");
static_assert(offsetof(FCTAccelByteBlockPlayerCallbackProxy_BlockPlayer, PlayerController) == 0x000008, "Member 'FCTAccelByteBlockPlayerCallbackProxy_BlockPlayer::PlayerController' has a wrong offset!");
static_assert(offsetof(FCTAccelByteBlockPlayerCallbackProxy_BlockPlayer, UserId) == 0x000010, "Member 'FCTAccelByteBlockPlayerCallbackProxy_BlockPlayer::UserId' has a wrong offset!");
static_assert(offsetof(FCTAccelByteBlockPlayerCallbackProxy_BlockPlayer, ReturnValue) == 0x000020, "Member 'FCTAccelByteBlockPlayerCallbackProxy_BlockPlayer::ReturnValue' has a wrong offset!");

// Function SCT.FCTAccelByteUnblockPlayerCallbackProxy.UnblockPlayer
// 0x0028 (0x0028 - 0x0000)
struct FCTAccelByteUnblockPlayerCallbackProxy_UnblockPlayer final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class APlayerController*                      PlayerController;                                  // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 UserId;                                            // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFCTAccelByteUnblockPlayerCallbackProxy* ReturnValue;                                       // 0x0020(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCTAccelByteUnblockPlayerCallbackProxy_UnblockPlayer) == 0x000008, "Wrong alignment on FCTAccelByteUnblockPlayerCallbackProxy_UnblockPlayer");
static_assert(sizeof(FCTAccelByteUnblockPlayerCallbackProxy_UnblockPlayer) == 0x000028, "Wrong size on FCTAccelByteUnblockPlayerCallbackProxy_UnblockPlayer");
static_assert(offsetof(FCTAccelByteUnblockPlayerCallbackProxy_UnblockPlayer, WorldContextObject) == 0x000000, "Member 'FCTAccelByteUnblockPlayerCallbackProxy_UnblockPlayer::WorldContextObject' has a wrong offset!");
static_assert(offsetof(FCTAccelByteUnblockPlayerCallbackProxy_UnblockPlayer, PlayerController) == 0x000008, "Member 'FCTAccelByteUnblockPlayerCallbackProxy_UnblockPlayer::PlayerController' has a wrong offset!");
static_assert(offsetof(FCTAccelByteUnblockPlayerCallbackProxy_UnblockPlayer, UserId) == 0x000010, "Member 'FCTAccelByteUnblockPlayerCallbackProxy_UnblockPlayer::UserId' has a wrong offset!");
static_assert(offsetof(FCTAccelByteUnblockPlayerCallbackProxy_UnblockPlayer, ReturnValue) == 0x000020, "Member 'FCTAccelByteUnblockPlayerCallbackProxy_UnblockPlayer::ReturnValue' has a wrong offset!");

// Function SCT.FCTMatchmakingManagementCallbackProxy.CancelMatchmaking
// 0x0008 (0x0008 - 0x0000)
struct FCTMatchmakingManagementCallbackProxy_CancelMatchmaking final
{
public:
	class UFCTMatchmakingManagementCallbackProxy* ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCTMatchmakingManagementCallbackProxy_CancelMatchmaking) == 0x000008, "Wrong alignment on FCTMatchmakingManagementCallbackProxy_CancelMatchmaking");
static_assert(sizeof(FCTMatchmakingManagementCallbackProxy_CancelMatchmaking) == 0x000008, "Wrong size on FCTMatchmakingManagementCallbackProxy_CancelMatchmaking");
static_assert(offsetof(FCTMatchmakingManagementCallbackProxy_CancelMatchmaking, ReturnValue) == 0x000000, "Member 'FCTMatchmakingManagementCallbackProxy_CancelMatchmaking::ReturnValue' has a wrong offset!");

// Function SCT.FCTMatchmakingManagementCallbackProxy.SendReadyConsent
// 0x0008 (0x0008 - 0x0000)
struct FCTMatchmakingManagementCallbackProxy_SendReadyConsent final
{
public:
	class UFCTMatchmakingManagementCallbackProxy* ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCTMatchmakingManagementCallbackProxy_SendReadyConsent) == 0x000008, "Wrong alignment on FCTMatchmakingManagementCallbackProxy_SendReadyConsent");
static_assert(sizeof(FCTMatchmakingManagementCallbackProxy_SendReadyConsent) == 0x000008, "Wrong size on FCTMatchmakingManagementCallbackProxy_SendReadyConsent");
static_assert(offsetof(FCTMatchmakingManagementCallbackProxy_SendReadyConsent, ReturnValue) == 0x000000, "Member 'FCTMatchmakingManagementCallbackProxy_SendReadyConsent::ReturnValue' has a wrong offset!");

// Function SCT.FCTMatchmakingManagementCallbackProxy.StartMatchmaking
// 0x0030 (0x0030 - 0x0000)
struct FCTMatchmakingManagementCallbackProxy_StartMatchmaking final
{
public:
	class FString                                 InGameMode;                                        // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          AllowCrossPlatformPlay;                            // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 MatchLanguage;                                     // 0x0018(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFCTMatchmakingManagementCallbackProxy* ReturnValue;                                       // 0x0028(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCTMatchmakingManagementCallbackProxy_StartMatchmaking) == 0x000008, "Wrong alignment on FCTMatchmakingManagementCallbackProxy_StartMatchmaking");
static_assert(sizeof(FCTMatchmakingManagementCallbackProxy_StartMatchmaking) == 0x000030, "Wrong size on FCTMatchmakingManagementCallbackProxy_StartMatchmaking");
static_assert(offsetof(FCTMatchmakingManagementCallbackProxy_StartMatchmaking, InGameMode) == 0x000000, "Member 'FCTMatchmakingManagementCallbackProxy_StartMatchmaking::InGameMode' has a wrong offset!");
static_assert(offsetof(FCTMatchmakingManagementCallbackProxy_StartMatchmaking, AllowCrossPlatformPlay) == 0x000010, "Member 'FCTMatchmakingManagementCallbackProxy_StartMatchmaking::AllowCrossPlatformPlay' has a wrong offset!");
static_assert(offsetof(FCTMatchmakingManagementCallbackProxy_StartMatchmaking, MatchLanguage) == 0x000018, "Member 'FCTMatchmakingManagementCallbackProxy_StartMatchmaking::MatchLanguage' has a wrong offset!");
static_assert(offsetof(FCTMatchmakingManagementCallbackProxy_StartMatchmaking, ReturnValue) == 0x000028, "Member 'FCTMatchmakingManagementCallbackProxy_StartMatchmaking::ReturnValue' has a wrong offset!");

// Function SCT.MatchmakingLobbyWidget.OnDSNotif
// 0x00F8 (0x00F8 - 0x0000)
struct MatchmakingLobbyWidget_OnDSNotif final
{
public:
	struct FAccelByteModelsDsNotice               Notification;                                      // 0x0000(0x00F8)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(MatchmakingLobbyWidget_OnDSNotif) == 0x000008, "Wrong alignment on MatchmakingLobbyWidget_OnDSNotif");
static_assert(sizeof(MatchmakingLobbyWidget_OnDSNotif) == 0x0000F8, "Wrong size on MatchmakingLobbyWidget_OnDSNotif");
static_assert(offsetof(MatchmakingLobbyWidget_OnDSNotif, Notification) == 0x000000, "Member 'MatchmakingLobbyWidget_OnDSNotif::Notification' has a wrong offset!");

// Function SCT.MatchmakingLobbyWidget.OnMatchmakingNotif
// 0x0060 (0x0060 - 0x0000)
struct MatchmakingLobbyWidget_OnMatchmakingNotif final
{
public:
	struct FAccelByteModelsMatchmakingNotice      Notification;                                      // 0x0000(0x0060)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(MatchmakingLobbyWidget_OnMatchmakingNotif) == 0x000008, "Wrong alignment on MatchmakingLobbyWidget_OnMatchmakingNotif");
static_assert(sizeof(MatchmakingLobbyWidget_OnMatchmakingNotif) == 0x000060, "Wrong size on MatchmakingLobbyWidget_OnMatchmakingNotif");
static_assert(offsetof(MatchmakingLobbyWidget_OnMatchmakingNotif, Notification) == 0x000000, "Member 'MatchmakingLobbyWidget_OnMatchmakingNotif::Notification' has a wrong offset!");

// Function SCT.MatchmakingLobbyWidget.OnReadyConsentNotif
// 0x0020 (0x0020 - 0x0000)
struct MatchmakingLobbyWidget_OnReadyConsentNotif final
{
public:
	struct FAccelByteModelsReadyConsentNotice     Notification;                                      // 0x0000(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(MatchmakingLobbyWidget_OnReadyConsentNotif) == 0x000008, "Wrong alignment on MatchmakingLobbyWidget_OnReadyConsentNotif");
static_assert(sizeof(MatchmakingLobbyWidget_OnReadyConsentNotif) == 0x000020, "Wrong size on MatchmakingLobbyWidget_OnReadyConsentNotif");
static_assert(offsetof(MatchmakingLobbyWidget_OnReadyConsentNotif, Notification) == 0x000000, "Member 'MatchmakingLobbyWidget_OnReadyConsentNotif::Notification' has a wrong offset!");

// Function SCT.MatchmakingLobbyWidget.OnRematchmakingNotif
// 0x0004 (0x0004 - 0x0000)
struct MatchmakingLobbyWidget_OnRematchmakingNotif final
{
public:
	struct FAccelByteModelsRematchmakingNotice    Notification;                                      // 0x0000(0x0004)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(MatchmakingLobbyWidget_OnRematchmakingNotif) == 0x000004, "Wrong alignment on MatchmakingLobbyWidget_OnRematchmakingNotif");
static_assert(sizeof(MatchmakingLobbyWidget_OnRematchmakingNotif) == 0x000004, "Wrong size on MatchmakingLobbyWidget_OnRematchmakingNotif");
static_assert(offsetof(MatchmakingLobbyWidget_OnRematchmakingNotif, Notification) == 0x000000, "Member 'MatchmakingLobbyWidget_OnRematchmakingNotif::Notification' has a wrong offset!");

// Function SCT.FriendLobbyWidget.AddToPendingPlatformInfoStack
// 0x0010 (0x0010 - 0x0000)
struct FriendLobbyWidget_AddToPendingPlatformInfoStack final
{
public:
	class FString                                 UserId;                                            // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FriendLobbyWidget_AddToPendingPlatformInfoStack) == 0x000008, "Wrong alignment on FriendLobbyWidget_AddToPendingPlatformInfoStack");
static_assert(sizeof(FriendLobbyWidget_AddToPendingPlatformInfoStack) == 0x000010, "Wrong size on FriendLobbyWidget_AddToPendingPlatformInfoStack");
static_assert(offsetof(FriendLobbyWidget_AddToPendingPlatformInfoStack, UserId) == 0x000000, "Member 'FriendLobbyWidget_AddToPendingPlatformInfoStack::UserId' has a wrong offset!");

// Function SCT.FriendLobbyWidget.OnGetUserPlatformInfoResponseComplete
// 0x0030 (0x0030 - 0x0000)
struct FriendLobbyWidget_OnGetUserPlatformInfoResponseComplete final
{
public:
	class FString                                 UserId;                                            // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 PlatformName;                                      // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 PlatformId;                                        // 0x0020(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FriendLobbyWidget_OnGetUserPlatformInfoResponseComplete) == 0x000008, "Wrong alignment on FriendLobbyWidget_OnGetUserPlatformInfoResponseComplete");
static_assert(sizeof(FriendLobbyWidget_OnGetUserPlatformInfoResponseComplete) == 0x000030, "Wrong size on FriendLobbyWidget_OnGetUserPlatformInfoResponseComplete");
static_assert(offsetof(FriendLobbyWidget_OnGetUserPlatformInfoResponseComplete, UserId) == 0x000000, "Member 'FriendLobbyWidget_OnGetUserPlatformInfoResponseComplete::UserId' has a wrong offset!");
static_assert(offsetof(FriendLobbyWidget_OnGetUserPlatformInfoResponseComplete, PlatformName) == 0x000010, "Member 'FriendLobbyWidget_OnGetUserPlatformInfoResponseComplete::PlatformName' has a wrong offset!");
static_assert(offsetof(FriendLobbyWidget_OnGetUserPlatformInfoResponseComplete, PlatformId) == 0x000020, "Member 'FriendLobbyWidget_OnGetUserPlatformInfoResponseComplete::PlatformId' has a wrong offset!");

// Function SCT.FriendLobbyWidget.OnNotifyFriendRemoved
// 0x0010 (0x0010 - 0x0000)
struct FriendLobbyWidget_OnNotifyFriendRemoved final
{
public:
	struct FAccelByteModelsUnfriendNotif          Notification;                                      // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FriendLobbyWidget_OnNotifyFriendRemoved) == 0x000008, "Wrong alignment on FriendLobbyWidget_OnNotifyFriendRemoved");
static_assert(sizeof(FriendLobbyWidget_OnNotifyFriendRemoved) == 0x000010, "Wrong size on FriendLobbyWidget_OnNotifyFriendRemoved");
static_assert(offsetof(FriendLobbyWidget_OnNotifyFriendRemoved, Notification) == 0x000000, "Member 'FriendLobbyWidget_OnNotifyFriendRemoved::Notification' has a wrong offset!");

// Function SCT.FriendLobbyWidget.OnNotifyFriendRequestAccepted
// 0x0010 (0x0010 - 0x0000)
struct FriendLobbyWidget_OnNotifyFriendRequestAccepted final
{
public:
	struct FAccelByteModelsAcceptFriendsNotif     Notification;                                      // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FriendLobbyWidget_OnNotifyFriendRequestAccepted) == 0x000008, "Wrong alignment on FriendLobbyWidget_OnNotifyFriendRequestAccepted");
static_assert(sizeof(FriendLobbyWidget_OnNotifyFriendRequestAccepted) == 0x000010, "Wrong size on FriendLobbyWidget_OnNotifyFriendRequestAccepted");
static_assert(offsetof(FriendLobbyWidget_OnNotifyFriendRequestAccepted, Notification) == 0x000000, "Member 'FriendLobbyWidget_OnNotifyFriendRequestAccepted::Notification' has a wrong offset!");

// Function SCT.FriendLobbyWidget.OnNotifyFriendRequestCancelled
// 0x0010 (0x0010 - 0x0000)
struct FriendLobbyWidget_OnNotifyFriendRequestCancelled final
{
public:
	struct FAccelByteModelsCancelFriendsNotif     Notification;                                      // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FriendLobbyWidget_OnNotifyFriendRequestCancelled) == 0x000008, "Wrong alignment on FriendLobbyWidget_OnNotifyFriendRequestCancelled");
static_assert(sizeof(FriendLobbyWidget_OnNotifyFriendRequestCancelled) == 0x000010, "Wrong size on FriendLobbyWidget_OnNotifyFriendRequestCancelled");
static_assert(offsetof(FriendLobbyWidget_OnNotifyFriendRequestCancelled, Notification) == 0x000000, "Member 'FriendLobbyWidget_OnNotifyFriendRequestCancelled::Notification' has a wrong offset!");

// Function SCT.FriendLobbyWidget.OnNotifyFriendRequestRejected
// 0x0010 (0x0010 - 0x0000)
struct FriendLobbyWidget_OnNotifyFriendRequestRejected final
{
public:
	struct FAccelByteModelsRejectFriendsNotif     Notification;                                      // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FriendLobbyWidget_OnNotifyFriendRequestRejected) == 0x000008, "Wrong alignment on FriendLobbyWidget_OnNotifyFriendRequestRejected");
static_assert(sizeof(FriendLobbyWidget_OnNotifyFriendRequestRejected) == 0x000010, "Wrong size on FriendLobbyWidget_OnNotifyFriendRequestRejected");
static_assert(offsetof(FriendLobbyWidget_OnNotifyFriendRequestRejected, Notification) == 0x000000, "Member 'FriendLobbyWidget_OnNotifyFriendRequestRejected::Notification' has a wrong offset!");

// Function SCT.FriendLobbyWidget.OnNotifyFriendRequestSent
// 0x0010 (0x0010 - 0x0000)
struct FriendLobbyWidget_OnNotifyFriendRequestSent final
{
public:
	struct FAccelByteModelsRequestFriendsNotif    Notification;                                      // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FriendLobbyWidget_OnNotifyFriendRequestSent) == 0x000008, "Wrong alignment on FriendLobbyWidget_OnNotifyFriendRequestSent");
static_assert(sizeof(FriendLobbyWidget_OnNotifyFriendRequestSent) == 0x000010, "Wrong size on FriendLobbyWidget_OnNotifyFriendRequestSent");
static_assert(offsetof(FriendLobbyWidget_OnNotifyFriendRequestSent, Notification) == 0x000000, "Member 'FriendLobbyWidget_OnNotifyFriendRequestSent::Notification' has a wrong offset!");

// Function SCT.FriendLobbyWidget.OnPrivateMessageRecieved
// 0x0050 (0x0050 - 0x0000)
struct FriendLobbyWidget_OnPrivateMessageRecieved final
{
public:
	struct FAccelByteModelsPersonalMessageNotice  Notification;                                      // 0x0000(0x0050)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FriendLobbyWidget_OnPrivateMessageRecieved) == 0x000008, "Wrong alignment on FriendLobbyWidget_OnPrivateMessageRecieved");
static_assert(sizeof(FriendLobbyWidget_OnPrivateMessageRecieved) == 0x000050, "Wrong size on FriendLobbyWidget_OnPrivateMessageRecieved");
static_assert(offsetof(FriendLobbyWidget_OnPrivateMessageRecieved, Notification) == 0x000000, "Member 'FriendLobbyWidget_OnPrivateMessageRecieved::Notification' has a wrong offset!");

// Function SCT.FriendLobbyWidget.OnUserPresenceUpdated
// 0x0028 (0x0028 - 0x0000)
struct FriendLobbyWidget_OnUserPresenceUpdated final
{
public:
	struct FAccelByteModelsUsersPresenceNotice    Notification;                                      // 0x0000(0x0028)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FriendLobbyWidget_OnUserPresenceUpdated) == 0x000008, "Wrong alignment on FriendLobbyWidget_OnUserPresenceUpdated");
static_assert(sizeof(FriendLobbyWidget_OnUserPresenceUpdated) == 0x000028, "Wrong size on FriendLobbyWidget_OnUserPresenceUpdated");
static_assert(offsetof(FriendLobbyWidget_OnUserPresenceUpdated, Notification) == 0x000000, "Member 'FriendLobbyWidget_OnUserPresenceUpdated::Notification' has a wrong offset!");

// Function SCT.FriendLobbyWidget.RefreshFriendList
// 0x0001 (0x0001 - 0x0000)
struct FriendLobbyWidget_RefreshFriendList final
{
public:
	EFFCTFriendListType                           FriendListType;                                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FriendLobbyWidget_RefreshFriendList) == 0x000001, "Wrong alignment on FriendLobbyWidget_RefreshFriendList");
static_assert(sizeof(FriendLobbyWidget_RefreshFriendList) == 0x000001, "Wrong size on FriendLobbyWidget_RefreshFriendList");
static_assert(offsetof(FriendLobbyWidget_RefreshFriendList, FriendListType) == 0x000000, "Member 'FriendLobbyWidget_RefreshFriendList::FriendListType' has a wrong offset!");

// Function SCT.FriendLobbyWidget.SortByAvailability
// 0x0050 (0x0050 - 0x0000)
struct FriendLobbyWidget_SortByAvailability final
{
public:
	struct FFCTFriendsList                        Online;                                            // 0x0000(0x0028)(Parm, OutParm, NativeAccessSpecifierPublic)
	struct FFCTFriendsList                        Offline;                                           // 0x0028(0x0028)(Parm, OutParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FriendLobbyWidget_SortByAvailability) == 0x000008, "Wrong alignment on FriendLobbyWidget_SortByAvailability");
static_assert(sizeof(FriendLobbyWidget_SortByAvailability) == 0x000050, "Wrong size on FriendLobbyWidget_SortByAvailability");
static_assert(offsetof(FriendLobbyWidget_SortByAvailability, Online) == 0x000000, "Member 'FriendLobbyWidget_SortByAvailability::Online' has a wrong offset!");
static_assert(offsetof(FriendLobbyWidget_SortByAvailability, Offline) == 0x000028, "Member 'FriendLobbyWidget_SortByAvailability::Offline' has a wrong offset!");

// Function SCT.FriendLobbyWidget.SortByAvailabilityAscendingOrder
// 0x0050 (0x0050 - 0x0000)
struct FriendLobbyWidget_SortByAvailabilityAscendingOrder final
{
public:
	struct FFCTFriendsList                        Online;                                            // 0x0000(0x0028)(Parm, OutParm, NativeAccessSpecifierPublic)
	struct FFCTFriendsList                        Offline;                                           // 0x0028(0x0028)(Parm, OutParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FriendLobbyWidget_SortByAvailabilityAscendingOrder) == 0x000008, "Wrong alignment on FriendLobbyWidget_SortByAvailabilityAscendingOrder");
static_assert(sizeof(FriendLobbyWidget_SortByAvailabilityAscendingOrder) == 0x000050, "Wrong size on FriendLobbyWidget_SortByAvailabilityAscendingOrder");
static_assert(offsetof(FriendLobbyWidget_SortByAvailabilityAscendingOrder, Online) == 0x000000, "Member 'FriendLobbyWidget_SortByAvailabilityAscendingOrder::Online' has a wrong offset!");
static_assert(offsetof(FriendLobbyWidget_SortByAvailabilityAscendingOrder, Offline) == 0x000028, "Member 'FriendLobbyWidget_SortByAvailabilityAscendingOrder::Offline' has a wrong offset!");

// Function SCT.FriendLobbyWidget.SortByAvailabilityDescendingOrder
// 0x0050 (0x0050 - 0x0000)
struct FriendLobbyWidget_SortByAvailabilityDescendingOrder final
{
public:
	struct FFCTFriendsList                        Online;                                            // 0x0000(0x0028)(Parm, OutParm, NativeAccessSpecifierPublic)
	struct FFCTFriendsList                        Offline;                                           // 0x0028(0x0028)(Parm, OutParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FriendLobbyWidget_SortByAvailabilityDescendingOrder) == 0x000008, "Wrong alignment on FriendLobbyWidget_SortByAvailabilityDescendingOrder");
static_assert(sizeof(FriendLobbyWidget_SortByAvailabilityDescendingOrder) == 0x000050, "Wrong size on FriendLobbyWidget_SortByAvailabilityDescendingOrder");
static_assert(offsetof(FriendLobbyWidget_SortByAvailabilityDescendingOrder, Online) == 0x000000, "Member 'FriendLobbyWidget_SortByAvailabilityDescendingOrder::Online' has a wrong offset!");
static_assert(offsetof(FriendLobbyWidget_SortByAvailabilityDescendingOrder, Offline) == 0x000028, "Member 'FriendLobbyWidget_SortByAvailabilityDescendingOrder::Offline' has a wrong offset!");

// Function SCT.FriendLobbyWidget.SortByOnlineOnly
// 0x0028 (0x0028 - 0x0000)
struct FriendLobbyWidget_SortByOnlineOnly final
{
public:
	struct FFCTFriendsList                        Online;                                            // 0x0000(0x0028)(Parm, OutParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FriendLobbyWidget_SortByOnlineOnly) == 0x000008, "Wrong alignment on FriendLobbyWidget_SortByOnlineOnly");
static_assert(sizeof(FriendLobbyWidget_SortByOnlineOnly) == 0x000028, "Wrong size on FriendLobbyWidget_SortByOnlineOnly");
static_assert(offsetof(FriendLobbyWidget_SortByOnlineOnly, Online) == 0x000000, "Member 'FriendLobbyWidget_SortByOnlineOnly::Online' has a wrong offset!");

// Function SCT.FriendLobbyWidget.SortByPlatform
// 0x0050 (0x0050 - 0x0000)
struct FriendLobbyWidget_SortByPlatform final
{
public:
	struct FFCTFriendsList                        Online;                                            // 0x0000(0x0028)(Parm, OutParm, NativeAccessSpecifierPublic)
	struct FFCTFriendsList                        Offline;                                           // 0x0028(0x0028)(Parm, OutParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FriendLobbyWidget_SortByPlatform) == 0x000008, "Wrong alignment on FriendLobbyWidget_SortByPlatform");
static_assert(sizeof(FriendLobbyWidget_SortByPlatform) == 0x000050, "Wrong size on FriendLobbyWidget_SortByPlatform");
static_assert(offsetof(FriendLobbyWidget_SortByPlatform, Online) == 0x000000, "Member 'FriendLobbyWidget_SortByPlatform::Online' has a wrong offset!");
static_assert(offsetof(FriendLobbyWidget_SortByPlatform, Offline) == 0x000028, "Member 'FriendLobbyWidget_SortByPlatform::Offline' has a wrong offset!");

// Function SCT.FriendLobbyWidget.SortCachedByAvailability
// 0x0020 (0x0020 - 0x0000)
struct FriendLobbyWidget_SortCachedByAvailability final
{
public:
	TArray<class UFriendCardWidget*>              Online;                                            // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	TArray<class UFriendCardWidget*>              Offline;                                           // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(FriendLobbyWidget_SortCachedByAvailability) == 0x000008, "Wrong alignment on FriendLobbyWidget_SortCachedByAvailability");
static_assert(sizeof(FriendLobbyWidget_SortCachedByAvailability) == 0x000020, "Wrong size on FriendLobbyWidget_SortCachedByAvailability");
static_assert(offsetof(FriendLobbyWidget_SortCachedByAvailability, Online) == 0x000000, "Member 'FriendLobbyWidget_SortCachedByAvailability::Online' has a wrong offset!");
static_assert(offsetof(FriendLobbyWidget_SortCachedByAvailability, Offline) == 0x000010, "Member 'FriendLobbyWidget_SortCachedByAvailability::Offline' has a wrong offset!");

// Function SCT.FriendLobbyWidget.SortCachedByAvailabilityAscendingOrder
// 0x0020 (0x0020 - 0x0000)
struct FriendLobbyWidget_SortCachedByAvailabilityAscendingOrder final
{
public:
	TArray<class UFriendCardWidget*>              Online;                                            // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	TArray<class UFriendCardWidget*>              Offline;                                           // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(FriendLobbyWidget_SortCachedByAvailabilityAscendingOrder) == 0x000008, "Wrong alignment on FriendLobbyWidget_SortCachedByAvailabilityAscendingOrder");
static_assert(sizeof(FriendLobbyWidget_SortCachedByAvailabilityAscendingOrder) == 0x000020, "Wrong size on FriendLobbyWidget_SortCachedByAvailabilityAscendingOrder");
static_assert(offsetof(FriendLobbyWidget_SortCachedByAvailabilityAscendingOrder, Online) == 0x000000, "Member 'FriendLobbyWidget_SortCachedByAvailabilityAscendingOrder::Online' has a wrong offset!");
static_assert(offsetof(FriendLobbyWidget_SortCachedByAvailabilityAscendingOrder, Offline) == 0x000010, "Member 'FriendLobbyWidget_SortCachedByAvailabilityAscendingOrder::Offline' has a wrong offset!");

// Function SCT.FriendLobbyWidget.SortCachedByAvailabilityDescendingOrder
// 0x0020 (0x0020 - 0x0000)
struct FriendLobbyWidget_SortCachedByAvailabilityDescendingOrder final
{
public:
	TArray<class UFriendCardWidget*>              Online;                                            // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	TArray<class UFriendCardWidget*>              Offline;                                           // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(FriendLobbyWidget_SortCachedByAvailabilityDescendingOrder) == 0x000008, "Wrong alignment on FriendLobbyWidget_SortCachedByAvailabilityDescendingOrder");
static_assert(sizeof(FriendLobbyWidget_SortCachedByAvailabilityDescendingOrder) == 0x000020, "Wrong size on FriendLobbyWidget_SortCachedByAvailabilityDescendingOrder");
static_assert(offsetof(FriendLobbyWidget_SortCachedByAvailabilityDescendingOrder, Online) == 0x000000, "Member 'FriendLobbyWidget_SortCachedByAvailabilityDescendingOrder::Online' has a wrong offset!");
static_assert(offsetof(FriendLobbyWidget_SortCachedByAvailabilityDescendingOrder, Offline) == 0x000010, "Member 'FriendLobbyWidget_SortCachedByAvailabilityDescendingOrder::Offline' has a wrong offset!");

// Function SCT.FriendLobbyWidget.SortCachedByOnlineOnly
// 0x0010 (0x0010 - 0x0000)
struct FriendLobbyWidget_SortCachedByOnlineOnly final
{
public:
	TArray<class UFriendCardWidget*>              Online;                                            // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(FriendLobbyWidget_SortCachedByOnlineOnly) == 0x000008, "Wrong alignment on FriendLobbyWidget_SortCachedByOnlineOnly");
static_assert(sizeof(FriendLobbyWidget_SortCachedByOnlineOnly) == 0x000010, "Wrong size on FriendLobbyWidget_SortCachedByOnlineOnly");
static_assert(offsetof(FriendLobbyWidget_SortCachedByOnlineOnly, Online) == 0x000000, "Member 'FriendLobbyWidget_SortCachedByOnlineOnly::Online' has a wrong offset!");

// Function SCT.FriendLobbyWidget.SortCachedByPlatform
// 0x0020 (0x0020 - 0x0000)
struct FriendLobbyWidget_SortCachedByPlatform final
{
public:
	TArray<class UFriendCardWidget*>              Online;                                            // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	TArray<class UFriendCardWidget*>              Offline;                                           // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(FriendLobbyWidget_SortCachedByPlatform) == 0x000008, "Wrong alignment on FriendLobbyWidget_SortCachedByPlatform");
static_assert(sizeof(FriendLobbyWidget_SortCachedByPlatform) == 0x000020, "Wrong size on FriendLobbyWidget_SortCachedByPlatform");
static_assert(offsetof(FriendLobbyWidget_SortCachedByPlatform, Online) == 0x000000, "Member 'FriendLobbyWidget_SortCachedByPlatform::Online' has a wrong offset!");
static_assert(offsetof(FriendLobbyWidget_SortCachedByPlatform, Offline) == 0x000010, "Member 'FriendLobbyWidget_SortCachedByPlatform::Offline' has a wrong offset!");

// Function SCT.WidgetOrganizer.Add
// 0x0010 (0x0010 - 0x0000)
struct WidgetOrganizer_Add final
{
public:
	class UWidgetSCT*                             WidgetInstance;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         behaviourOverride;                                 // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(WidgetOrganizer_Add) == 0x000008, "Wrong alignment on WidgetOrganizer_Add");
static_assert(sizeof(WidgetOrganizer_Add) == 0x000010, "Wrong size on WidgetOrganizer_Add");
static_assert(offsetof(WidgetOrganizer_Add, WidgetInstance) == 0x000000, "Member 'WidgetOrganizer_Add::WidgetInstance' has a wrong offset!");
static_assert(offsetof(WidgetOrganizer_Add, behaviourOverride) == 0x000008, "Member 'WidgetOrganizer_Add::behaviourOverride' has a wrong offset!");

// Function SCT.WidgetOrganizer.CreateWidget
// 0x0018 (0x0018 - 0x0000)
struct WidgetOrganizer_CreateWidget final
{
public:
	TSubclassOf<class UWidgetSCT>                 WidgetType;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         behaviourOverride;                                 // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UWidgetSCT*                             ReturnValue;                                       // 0x0010(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WidgetOrganizer_CreateWidget) == 0x000008, "Wrong alignment on WidgetOrganizer_CreateWidget");
static_assert(sizeof(WidgetOrganizer_CreateWidget) == 0x000018, "Wrong size on WidgetOrganizer_CreateWidget");
static_assert(offsetof(WidgetOrganizer_CreateWidget, WidgetType) == 0x000000, "Member 'WidgetOrganizer_CreateWidget::WidgetType' has a wrong offset!");
static_assert(offsetof(WidgetOrganizer_CreateWidget, behaviourOverride) == 0x000008, "Member 'WidgetOrganizer_CreateWidget::behaviourOverride' has a wrong offset!");
static_assert(offsetof(WidgetOrganizer_CreateWidget, ReturnValue) == 0x000010, "Member 'WidgetOrganizer_CreateWidget::ReturnValue' has a wrong offset!");

// Function SCT.WidgetOrganizer.OnWidgetRemovedExternally
// 0x0008 (0x0008 - 0x0000)
struct WidgetOrganizer_OnWidgetRemovedExternally final
{
public:
	class UWidgetSCT*                             Widget;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WidgetOrganizer_OnWidgetRemovedExternally) == 0x000008, "Wrong alignment on WidgetOrganizer_OnWidgetRemovedExternally");
static_assert(sizeof(WidgetOrganizer_OnWidgetRemovedExternally) == 0x000008, "Wrong size on WidgetOrganizer_OnWidgetRemovedExternally");
static_assert(offsetof(WidgetOrganizer_OnWidgetRemovedExternally, Widget) == 0x000000, "Member 'WidgetOrganizer_OnWidgetRemovedExternally::Widget' has a wrong offset!");

// Function SCT.WidgetOrganizer.Remove
// 0x0010 (0x0010 - 0x0000)
struct WidgetOrganizer_Remove final
{
public:
	class UWidgetSCT*                             Widget;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          RemoveFromParent;                                  // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(WidgetOrganizer_Remove) == 0x000008, "Wrong alignment on WidgetOrganizer_Remove");
static_assert(sizeof(WidgetOrganizer_Remove) == 0x000010, "Wrong size on WidgetOrganizer_Remove");
static_assert(offsetof(WidgetOrganizer_Remove, Widget) == 0x000000, "Member 'WidgetOrganizer_Remove::Widget' has a wrong offset!");
static_assert(offsetof(WidgetOrganizer_Remove, RemoveFromParent) == 0x000008, "Member 'WidgetOrganizer_Remove::RemoveFromParent' has a wrong offset!");

// Function SCT.WidgetOrganizer.Contains
// 0x0010 (0x0010 - 0x0000)
struct WidgetOrganizer_Contains final
{
public:
	class UWidgetSCT*                             Widget;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(WidgetOrganizer_Contains) == 0x000008, "Wrong alignment on WidgetOrganizer_Contains");
static_assert(sizeof(WidgetOrganizer_Contains) == 0x000010, "Wrong size on WidgetOrganizer_Contains");
static_assert(offsetof(WidgetOrganizer_Contains, Widget) == 0x000000, "Member 'WidgetOrganizer_Contains::Widget' has a wrong offset!");
static_assert(offsetof(WidgetOrganizer_Contains, ReturnValue) == 0x000008, "Member 'WidgetOrganizer_Contains::ReturnValue' has a wrong offset!");

// Function SCT.ConsoleSessionManagement.OnCreateSessionComplete
// 0x000C (0x000C - 0x0000)
struct ConsoleSessionManagement_OnCreateSessionComplete final
{
public:
	class FName                                   SessionName;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bWasSuccessful;                                    // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ConsoleSessionManagement_OnCreateSessionComplete) == 0x000004, "Wrong alignment on ConsoleSessionManagement_OnCreateSessionComplete");
static_assert(sizeof(ConsoleSessionManagement_OnCreateSessionComplete) == 0x00000C, "Wrong size on ConsoleSessionManagement_OnCreateSessionComplete");
static_assert(offsetof(ConsoleSessionManagement_OnCreateSessionComplete, SessionName) == 0x000000, "Member 'ConsoleSessionManagement_OnCreateSessionComplete::SessionName' has a wrong offset!");
static_assert(offsetof(ConsoleSessionManagement_OnCreateSessionComplete, bWasSuccessful) == 0x000008, "Member 'ConsoleSessionManagement_OnCreateSessionComplete::bWasSuccessful' has a wrong offset!");

// Function SCT.FCTGetUserPlatformInfoCallbackProxy.GetUserPlatformInfo
// 0x0018 (0x0018 - 0x0000)
struct FCTGetUserPlatformInfoCallbackProxy_GetUserPlatformInfo final
{
public:
	class FString                                 UserId;                                            // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFCTGetUserPlatformInfoCallbackProxy*   ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCTGetUserPlatformInfoCallbackProxy_GetUserPlatformInfo) == 0x000008, "Wrong alignment on FCTGetUserPlatformInfoCallbackProxy_GetUserPlatformInfo");
static_assert(sizeof(FCTGetUserPlatformInfoCallbackProxy_GetUserPlatformInfo) == 0x000018, "Wrong size on FCTGetUserPlatformInfoCallbackProxy_GetUserPlatformInfo");
static_assert(offsetof(FCTGetUserPlatformInfoCallbackProxy_GetUserPlatformInfo, UserId) == 0x000000, "Member 'FCTGetUserPlatformInfoCallbackProxy_GetUserPlatformInfo::UserId' has a wrong offset!");
static_assert(offsetof(FCTGetUserPlatformInfoCallbackProxy_GetUserPlatformInfo, ReturnValue) == 0x000010, "Member 'FCTGetUserPlatformInfoCallbackProxy_GetUserPlatformInfo::ReturnValue' has a wrong offset!");

// Function SCT.FCTPlatformBlueprintFunctionLibrary.GenerateRandomAccelByteProfileCode
// 0x0010 (0x0010 - 0x0000)
struct FCTPlatformBlueprintFunctionLibrary_GenerateRandomAccelByteProfileCode final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCTPlatformBlueprintFunctionLibrary_GenerateRandomAccelByteProfileCode) == 0x000008, "Wrong alignment on FCTPlatformBlueprintFunctionLibrary_GenerateRandomAccelByteProfileCode");
static_assert(sizeof(FCTPlatformBlueprintFunctionLibrary_GenerateRandomAccelByteProfileCode) == 0x000010, "Wrong size on FCTPlatformBlueprintFunctionLibrary_GenerateRandomAccelByteProfileCode");
static_assert(offsetof(FCTPlatformBlueprintFunctionLibrary_GenerateRandomAccelByteProfileCode, ReturnValue) == 0x000000, "Member 'FCTPlatformBlueprintFunctionLibrary_GenerateRandomAccelByteProfileCode::ReturnValue' has a wrong offset!");

// Function SCT.FCTPlatformBlueprintFunctionLibrary.GetAccelBytePlatformSync
// 0x0001 (0x0001 - 0x0000)
struct FCTPlatformBlueprintFunctionLibrary_GetAccelBytePlatformSync final
{
public:
	EAccelBytePlatformSync                        ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCTPlatformBlueprintFunctionLibrary_GetAccelBytePlatformSync) == 0x000001, "Wrong alignment on FCTPlatformBlueprintFunctionLibrary_GetAccelBytePlatformSync");
static_assert(sizeof(FCTPlatformBlueprintFunctionLibrary_GetAccelBytePlatformSync) == 0x000001, "Wrong size on FCTPlatformBlueprintFunctionLibrary_GetAccelBytePlatformSync");
static_assert(offsetof(FCTPlatformBlueprintFunctionLibrary_GetAccelBytePlatformSync, ReturnValue) == 0x000000, "Member 'FCTPlatformBlueprintFunctionLibrary_GetAccelBytePlatformSync::ReturnValue' has a wrong offset!");

// Function SCT.FCTPlatformBlueprintFunctionLibrary.GetPlatformType
// 0x0001 (0x0001 - 0x0000)
struct FCTPlatformBlueprintFunctionLibrary_GetPlatformType final
{
public:
	EAccelBytePlatformType                        OutputExec;                                        // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCTPlatformBlueprintFunctionLibrary_GetPlatformType) == 0x000001, "Wrong alignment on FCTPlatformBlueprintFunctionLibrary_GetPlatformType");
static_assert(sizeof(FCTPlatformBlueprintFunctionLibrary_GetPlatformType) == 0x000001, "Wrong size on FCTPlatformBlueprintFunctionLibrary_GetPlatformType");
static_assert(offsetof(FCTPlatformBlueprintFunctionLibrary_GetPlatformType, OutputExec) == 0x000000, "Member 'FCTPlatformBlueprintFunctionLibrary_GetPlatformType::OutputExec' has a wrong offset!");

// Function SCT.FCTPlatformBlueprintFunctionLibrary.GetPlatformUserDisplayName
// 0x0010 (0x0010 - 0x0000)
struct FCTPlatformBlueprintFunctionLibrary_GetPlatformUserDisplayName final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCTPlatformBlueprintFunctionLibrary_GetPlatformUserDisplayName) == 0x000008, "Wrong alignment on FCTPlatformBlueprintFunctionLibrary_GetPlatformUserDisplayName");
static_assert(sizeof(FCTPlatformBlueprintFunctionLibrary_GetPlatformUserDisplayName) == 0x000010, "Wrong size on FCTPlatformBlueprintFunctionLibrary_GetPlatformUserDisplayName");
static_assert(offsetof(FCTPlatformBlueprintFunctionLibrary_GetPlatformUserDisplayName, ReturnValue) == 0x000000, "Member 'FCTPlatformBlueprintFunctionLibrary_GetPlatformUserDisplayName::ReturnValue' has a wrong offset!");

// Function SCT.FCTPlatformBlueprintFunctionLibrary.GetPlatformUserID
// 0x0010 (0x0010 - 0x0000)
struct FCTPlatformBlueprintFunctionLibrary_GetPlatformUserID final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCTPlatformBlueprintFunctionLibrary_GetPlatformUserID) == 0x000008, "Wrong alignment on FCTPlatformBlueprintFunctionLibrary_GetPlatformUserID");
static_assert(sizeof(FCTPlatformBlueprintFunctionLibrary_GetPlatformUserID) == 0x000010, "Wrong size on FCTPlatformBlueprintFunctionLibrary_GetPlatformUserID");
static_assert(offsetof(FCTPlatformBlueprintFunctionLibrary_GetPlatformUserID, ReturnValue) == 0x000000, "Member 'FCTPlatformBlueprintFunctionLibrary_GetPlatformUserID::ReturnValue' has a wrong offset!");

// Function SCT.FCTPlatformBlueprintFunctionLibrary.GetProfileAvatar
// 0x0008 (0x0008 - 0x0000)
struct FCTPlatformBlueprintFunctionLibrary_GetProfileAvatar final
{
public:
	class UTexture2D*                             ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCTPlatformBlueprintFunctionLibrary_GetProfileAvatar) == 0x000008, "Wrong alignment on FCTPlatformBlueprintFunctionLibrary_GetProfileAvatar");
static_assert(sizeof(FCTPlatformBlueprintFunctionLibrary_GetProfileAvatar) == 0x000008, "Wrong size on FCTPlatformBlueprintFunctionLibrary_GetProfileAvatar");
static_assert(offsetof(FCTPlatformBlueprintFunctionLibrary_GetProfileAvatar, ReturnValue) == 0x000000, "Member 'FCTPlatformBlueprintFunctionLibrary_GetProfileAvatar::ReturnValue' has a wrong offset!");

// Function SCT.FCTPlatformBlueprintFunctionLibrary.GetSplitDisplayNameAndFriendCode
// 0x0030 (0x0030 - 0x0000)
struct FCTPlatformBlueprintFunctionLibrary_GetSplitDisplayNameAndFriendCode final
{
public:
	class FString                                 InFullDisplayName;                                 // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 OutDisplayName;                                    // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 OutFriendCode;                                     // 0x0020(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCTPlatformBlueprintFunctionLibrary_GetSplitDisplayNameAndFriendCode) == 0x000008, "Wrong alignment on FCTPlatformBlueprintFunctionLibrary_GetSplitDisplayNameAndFriendCode");
static_assert(sizeof(FCTPlatformBlueprintFunctionLibrary_GetSplitDisplayNameAndFriendCode) == 0x000030, "Wrong size on FCTPlatformBlueprintFunctionLibrary_GetSplitDisplayNameAndFriendCode");
static_assert(offsetof(FCTPlatformBlueprintFunctionLibrary_GetSplitDisplayNameAndFriendCode, InFullDisplayName) == 0x000000, "Member 'FCTPlatformBlueprintFunctionLibrary_GetSplitDisplayNameAndFriendCode::InFullDisplayName' has a wrong offset!");
static_assert(offsetof(FCTPlatformBlueprintFunctionLibrary_GetSplitDisplayNameAndFriendCode, OutDisplayName) == 0x000010, "Member 'FCTPlatformBlueprintFunctionLibrary_GetSplitDisplayNameAndFriendCode::OutDisplayName' has a wrong offset!");
static_assert(offsetof(FCTPlatformBlueprintFunctionLibrary_GetSplitDisplayNameAndFriendCode, OutFriendCode) == 0x000020, "Member 'FCTPlatformBlueprintFunctionLibrary_GetSplitDisplayNameAndFriendCode::OutFriendCode' has a wrong offset!");

// Function SCT.FCTPlatformBlueprintFunctionLibrary.IsPlatformDLCInstalled
// 0x0008 (0x0008 - 0x0000)
struct FCTPlatformBlueprintFunctionLibrary_IsPlatformDLCInstalled final
{
public:
	int32                                         ID;                                                // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FCTPlatformBlueprintFunctionLibrary_IsPlatformDLCInstalled) == 0x000004, "Wrong alignment on FCTPlatformBlueprintFunctionLibrary_IsPlatformDLCInstalled");
static_assert(sizeof(FCTPlatformBlueprintFunctionLibrary_IsPlatformDLCInstalled) == 0x000008, "Wrong size on FCTPlatformBlueprintFunctionLibrary_IsPlatformDLCInstalled");
static_assert(offsetof(FCTPlatformBlueprintFunctionLibrary_IsPlatformDLCInstalled, ID) == 0x000000, "Member 'FCTPlatformBlueprintFunctionLibrary_IsPlatformDLCInstalled::ID' has a wrong offset!");
static_assert(offsetof(FCTPlatformBlueprintFunctionLibrary_IsPlatformDLCInstalled, ReturnValue) == 0x000004, "Member 'FCTPlatformBlueprintFunctionLibrary_IsPlatformDLCInstalled::ReturnValue' has a wrong offset!");

// Function SCT.FCTPlatformBlueprintFunctionLibrary.OpenStorePage
// 0x0030 (0x0030 - 0x0000)
struct FCTPlatformBlueprintFunctionLibrary_OpenStorePage final
{
public:
	class UAccelByteGIS*                          AccelByteGIS;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Category;                                          // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ProductId;                                         // 0x0018(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          AddToCart;                                         // 0x0028(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FCTPlatformBlueprintFunctionLibrary_OpenStorePage) == 0x000008, "Wrong alignment on FCTPlatformBlueprintFunctionLibrary_OpenStorePage");
static_assert(sizeof(FCTPlatformBlueprintFunctionLibrary_OpenStorePage) == 0x000030, "Wrong size on FCTPlatformBlueprintFunctionLibrary_OpenStorePage");
static_assert(offsetof(FCTPlatformBlueprintFunctionLibrary_OpenStorePage, AccelByteGIS) == 0x000000, "Member 'FCTPlatformBlueprintFunctionLibrary_OpenStorePage::AccelByteGIS' has a wrong offset!");
static_assert(offsetof(FCTPlatformBlueprintFunctionLibrary_OpenStorePage, Category) == 0x000008, "Member 'FCTPlatformBlueprintFunctionLibrary_OpenStorePage::Category' has a wrong offset!");
static_assert(offsetof(FCTPlatformBlueprintFunctionLibrary_OpenStorePage, ProductId) == 0x000018, "Member 'FCTPlatformBlueprintFunctionLibrary_OpenStorePage::ProductId' has a wrong offset!");
static_assert(offsetof(FCTPlatformBlueprintFunctionLibrary_OpenStorePage, AddToCart) == 0x000028, "Member 'FCTPlatformBlueprintFunctionLibrary_OpenStorePage::AddToCart' has a wrong offset!");

// Function SCT.FCTPlatformBlueprintFunctionLibrary.RegistrationPasswordIsValid
// 0x0018 (0x0018 - 0x0000)
struct FCTPlatformBlueprintFunctionLibrary_RegistrationPasswordIsValid final
{
public:
	class FString                                 Password;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ErrorCode;                                         // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0014(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FCTPlatformBlueprintFunctionLibrary_RegistrationPasswordIsValid) == 0x000008, "Wrong alignment on FCTPlatformBlueprintFunctionLibrary_RegistrationPasswordIsValid");
static_assert(sizeof(FCTPlatformBlueprintFunctionLibrary_RegistrationPasswordIsValid) == 0x000018, "Wrong size on FCTPlatformBlueprintFunctionLibrary_RegistrationPasswordIsValid");
static_assert(offsetof(FCTPlatformBlueprintFunctionLibrary_RegistrationPasswordIsValid, Password) == 0x000000, "Member 'FCTPlatformBlueprintFunctionLibrary_RegistrationPasswordIsValid::Password' has a wrong offset!");
static_assert(offsetof(FCTPlatformBlueprintFunctionLibrary_RegistrationPasswordIsValid, ErrorCode) == 0x000010, "Member 'FCTPlatformBlueprintFunctionLibrary_RegistrationPasswordIsValid::ErrorCode' has a wrong offset!");
static_assert(offsetof(FCTPlatformBlueprintFunctionLibrary_RegistrationPasswordIsValid, ReturnValue) == 0x000014, "Member 'FCTPlatformBlueprintFunctionLibrary_RegistrationPasswordIsValid::ReturnValue' has a wrong offset!");

// Function SCT.FCTPlatformBlueprintFunctionLibrary.RegistrationWasViewed
// 0x0001 (0x0001 - 0x0000)
struct FCTPlatformBlueprintFunctionLibrary_RegistrationWasViewed final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCTPlatformBlueprintFunctionLibrary_RegistrationWasViewed) == 0x000001, "Wrong alignment on FCTPlatformBlueprintFunctionLibrary_RegistrationWasViewed");
static_assert(sizeof(FCTPlatformBlueprintFunctionLibrary_RegistrationWasViewed) == 0x000001, "Wrong size on FCTPlatformBlueprintFunctionLibrary_RegistrationWasViewed");
static_assert(offsetof(FCTPlatformBlueprintFunctionLibrary_RegistrationWasViewed, ReturnValue) == 0x000000, "Member 'FCTPlatformBlueprintFunctionLibrary_RegistrationWasViewed::ReturnValue' has a wrong offset!");

// Function SCT.FCTPlatformBlueprintFunctionLibrary.SetDisplayNameWithoutFriendCodeToTextBlock
// 0x0018 (0x0018 - 0x0000)
struct FCTPlatformBlueprintFunctionLibrary_SetDisplayNameWithoutFriendCodeToTextBlock final
{
public:
	class UTextBlock*                             InText;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 OutDisplayName;                                    // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCTPlatformBlueprintFunctionLibrary_SetDisplayNameWithoutFriendCodeToTextBlock) == 0x000008, "Wrong alignment on FCTPlatformBlueprintFunctionLibrary_SetDisplayNameWithoutFriendCodeToTextBlock");
static_assert(sizeof(FCTPlatformBlueprintFunctionLibrary_SetDisplayNameWithoutFriendCodeToTextBlock) == 0x000018, "Wrong size on FCTPlatformBlueprintFunctionLibrary_SetDisplayNameWithoutFriendCodeToTextBlock");
static_assert(offsetof(FCTPlatformBlueprintFunctionLibrary_SetDisplayNameWithoutFriendCodeToTextBlock, InText) == 0x000000, "Member 'FCTPlatformBlueprintFunctionLibrary_SetDisplayNameWithoutFriendCodeToTextBlock::InText' has a wrong offset!");
static_assert(offsetof(FCTPlatformBlueprintFunctionLibrary_SetDisplayNameWithoutFriendCodeToTextBlock, OutDisplayName) == 0x000008, "Member 'FCTPlatformBlueprintFunctionLibrary_SetDisplayNameWithoutFriendCodeToTextBlock::OutDisplayName' has a wrong offset!");

// Function SCT.FCTPlatformBlueprintFunctionLibrary.SetUserDisplayNameWithFalloffToTextBlock
// 0x0020 (0x0020 - 0x0000)
struct FCTPlatformBlueprintFunctionLibrary_SetUserDisplayNameWithFalloffToTextBlock final
{
public:
	class UTextBlock*                             InText;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 OutDisplayName;                                    // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TotalWidth;                                        // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FCTPlatformBlueprintFunctionLibrary_SetUserDisplayNameWithFalloffToTextBlock) == 0x000008, "Wrong alignment on FCTPlatformBlueprintFunctionLibrary_SetUserDisplayNameWithFalloffToTextBlock");
static_assert(sizeof(FCTPlatformBlueprintFunctionLibrary_SetUserDisplayNameWithFalloffToTextBlock) == 0x000020, "Wrong size on FCTPlatformBlueprintFunctionLibrary_SetUserDisplayNameWithFalloffToTextBlock");
static_assert(offsetof(FCTPlatformBlueprintFunctionLibrary_SetUserDisplayNameWithFalloffToTextBlock, InText) == 0x000000, "Member 'FCTPlatformBlueprintFunctionLibrary_SetUserDisplayNameWithFalloffToTextBlock::InText' has a wrong offset!");
static_assert(offsetof(FCTPlatformBlueprintFunctionLibrary_SetUserDisplayNameWithFalloffToTextBlock, OutDisplayName) == 0x000008, "Member 'FCTPlatformBlueprintFunctionLibrary_SetUserDisplayNameWithFalloffToTextBlock::OutDisplayName' has a wrong offset!");
static_assert(offsetof(FCTPlatformBlueprintFunctionLibrary_SetUserDisplayNameWithFalloffToTextBlock, TotalWidth) == 0x000018, "Member 'FCTPlatformBlueprintFunctionLibrary_SetUserDisplayNameWithFalloffToTextBlock::TotalWidth' has a wrong offset!");

// Function SCT.FCTAchievementPopUp.Init
// 0x0008 (0x0008 - 0x0000)
struct FCTAchievementPopUp_Init final
{
public:
	class UFCTAchievement*                        Achievement;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCTAchievementPopUp_Init) == 0x000008, "Wrong alignment on FCTAchievementPopUp_Init");
static_assert(sizeof(FCTAchievementPopUp_Init) == 0x000008, "Wrong size on FCTAchievementPopUp_Init");
static_assert(offsetof(FCTAchievementPopUp_Init, Achievement) == 0x000000, "Member 'FCTAchievementPopUp_Init::Achievement' has a wrong offset!");

// Function SCT.FCTStatIncrementCallbackProxy.UpdateStatistic
// 0x0020 (0x0020 - 0x0000)
struct FCTStatIncrementCallbackProxy_UpdateStatistic final
{
public:
	class FString                                 StatCode;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         IncrementalValue;                                  // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UFCTStatIncrementCallbackProxy*         ReturnValue;                                       // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCTStatIncrementCallbackProxy_UpdateStatistic) == 0x000008, "Wrong alignment on FCTStatIncrementCallbackProxy_UpdateStatistic");
static_assert(sizeof(FCTStatIncrementCallbackProxy_UpdateStatistic) == 0x000020, "Wrong size on FCTStatIncrementCallbackProxy_UpdateStatistic");
static_assert(offsetof(FCTStatIncrementCallbackProxy_UpdateStatistic, StatCode) == 0x000000, "Member 'FCTStatIncrementCallbackProxy_UpdateStatistic::StatCode' has a wrong offset!");
static_assert(offsetof(FCTStatIncrementCallbackProxy_UpdateStatistic, IncrementalValue) == 0x000010, "Member 'FCTStatIncrementCallbackProxy_UpdateStatistic::IncrementalValue' has a wrong offset!");
static_assert(offsetof(FCTStatIncrementCallbackProxy_UpdateStatistic, ReturnValue) == 0x000018, "Member 'FCTStatIncrementCallbackProxy_UpdateStatistic::ReturnValue' has a wrong offset!");

// Function SCT.FCTGetStatsCallbackProxy.GetStatistic
// 0x0018 (0x0018 - 0x0000)
struct FCTGetStatsCallbackProxy_GetStatistic final
{
public:
	class FString                                 StatCode;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFCTGetStatsCallbackProxy*              ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCTGetStatsCallbackProxy_GetStatistic) == 0x000008, "Wrong alignment on FCTGetStatsCallbackProxy_GetStatistic");
static_assert(sizeof(FCTGetStatsCallbackProxy_GetStatistic) == 0x000018, "Wrong size on FCTGetStatsCallbackProxy_GetStatistic");
static_assert(offsetof(FCTGetStatsCallbackProxy_GetStatistic, StatCode) == 0x000000, "Member 'FCTGetStatsCallbackProxy_GetStatistic::StatCode' has a wrong offset!");
static_assert(offsetof(FCTGetStatsCallbackProxy_GetStatistic, ReturnValue) == 0x000010, "Member 'FCTGetStatsCallbackProxy_GetStatistic::ReturnValue' has a wrong offset!");

// Function SCT.FCTIncrementUnlinkedStatsCallbackProxy.IncrementUnlinkedStatistic
// 0x0020 (0x0020 - 0x0000)
struct FCTIncrementUnlinkedStatsCallbackProxy_IncrementUnlinkedStatistic final
{
public:
	class FString                                 StatCode;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Value;                                             // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UFCTIncrementUnlinkedStatsCallbackProxy* ReturnValue;                                       // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCTIncrementUnlinkedStatsCallbackProxy_IncrementUnlinkedStatistic) == 0x000008, "Wrong alignment on FCTIncrementUnlinkedStatsCallbackProxy_IncrementUnlinkedStatistic");
static_assert(sizeof(FCTIncrementUnlinkedStatsCallbackProxy_IncrementUnlinkedStatistic) == 0x000020, "Wrong size on FCTIncrementUnlinkedStatsCallbackProxy_IncrementUnlinkedStatistic");
static_assert(offsetof(FCTIncrementUnlinkedStatsCallbackProxy_IncrementUnlinkedStatistic, StatCode) == 0x000000, "Member 'FCTIncrementUnlinkedStatsCallbackProxy_IncrementUnlinkedStatistic::StatCode' has a wrong offset!");
static_assert(offsetof(FCTIncrementUnlinkedStatsCallbackProxy_IncrementUnlinkedStatistic, Value) == 0x000010, "Member 'FCTIncrementUnlinkedStatsCallbackProxy_IncrementUnlinkedStatistic::Value' has a wrong offset!");
static_assert(offsetof(FCTIncrementUnlinkedStatsCallbackProxy_IncrementUnlinkedStatistic, ReturnValue) == 0x000018, "Member 'FCTIncrementUnlinkedStatsCallbackProxy_IncrementUnlinkedStatistic::ReturnValue' has a wrong offset!");

// Function SCT.FCTAchievementListCallbackProxy.GetRecentlyUnlockedUserAchievements
// 0x0010 (0x0010 - 0x0000)
struct FCTAchievementListCallbackProxy_GetRecentlyUnlockedUserAchievements final
{
public:
	int32                                         Count;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UFCTAchievementListCallbackProxy*       ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCTAchievementListCallbackProxy_GetRecentlyUnlockedUserAchievements) == 0x000008, "Wrong alignment on FCTAchievementListCallbackProxy_GetRecentlyUnlockedUserAchievements");
static_assert(sizeof(FCTAchievementListCallbackProxy_GetRecentlyUnlockedUserAchievements) == 0x000010, "Wrong size on FCTAchievementListCallbackProxy_GetRecentlyUnlockedUserAchievements");
static_assert(offsetof(FCTAchievementListCallbackProxy_GetRecentlyUnlockedUserAchievements, Count) == 0x000000, "Member 'FCTAchievementListCallbackProxy_GetRecentlyUnlockedUserAchievements::Count' has a wrong offset!");
static_assert(offsetof(FCTAchievementListCallbackProxy_GetRecentlyUnlockedUserAchievements, ReturnValue) == 0x000008, "Member 'FCTAchievementListCallbackProxy_GetRecentlyUnlockedUserAchievements::ReturnValue' has a wrong offset!");

// Function SCT.FCTAchievementListCallbackProxy.GetUserAchievements
// 0x0010 (0x0010 - 0x0000)
struct FCTAchievementListCallbackProxy_GetUserAchievements final
{
public:
	class UAccelByteGIS*                          AccelByteGIS;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFCTAchievementListCallbackProxy*       ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCTAchievementListCallbackProxy_GetUserAchievements) == 0x000008, "Wrong alignment on FCTAchievementListCallbackProxy_GetUserAchievements");
static_assert(sizeof(FCTAchievementListCallbackProxy_GetUserAchievements) == 0x000010, "Wrong size on FCTAchievementListCallbackProxy_GetUserAchievements");
static_assert(offsetof(FCTAchievementListCallbackProxy_GetUserAchievements, AccelByteGIS) == 0x000000, "Member 'FCTAchievementListCallbackProxy_GetUserAchievements::AccelByteGIS' has a wrong offset!");
static_assert(offsetof(FCTAchievementListCallbackProxy_GetUserAchievements, ReturnValue) == 0x000008, "Member 'FCTAchievementListCallbackProxy_GetUserAchievements::ReturnValue' has a wrong offset!");

// Function SCT.BulkUserDataCallbackProxy.GetBulkUsersData
// 0x0018 (0x0018 - 0x0000)
struct BulkUserDataCallbackProxy_GetBulkUsersData final
{
public:
	TArray<class FString>                         UserIds;                                           // 0x0000(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	class UBulkUserDataCallbackProxy*             ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BulkUserDataCallbackProxy_GetBulkUsersData) == 0x000008, "Wrong alignment on BulkUserDataCallbackProxy_GetBulkUsersData");
static_assert(sizeof(BulkUserDataCallbackProxy_GetBulkUsersData) == 0x000018, "Wrong size on BulkUserDataCallbackProxy_GetBulkUsersData");
static_assert(offsetof(BulkUserDataCallbackProxy_GetBulkUsersData, UserIds) == 0x000000, "Member 'BulkUserDataCallbackProxy_GetBulkUsersData::UserIds' has a wrong offset!");
static_assert(offsetof(BulkUserDataCallbackProxy_GetBulkUsersData, ReturnValue) == 0x000010, "Member 'BulkUserDataCallbackProxy_GetBulkUsersData::ReturnValue' has a wrong offset!");

// Function SCT.FCTAchievementUnlockCallbackProxy.UnlockAchievement
// 0x0018 (0x0018 - 0x0000)
struct FCTAchievementUnlockCallbackProxy_UnlockAchievement final
{
public:
	class FString                                 Code;                                              // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFCTAchievementUnlockCallbackProxy*     ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCTAchievementUnlockCallbackProxy_UnlockAchievement) == 0x000008, "Wrong alignment on FCTAchievementUnlockCallbackProxy_UnlockAchievement");
static_assert(sizeof(FCTAchievementUnlockCallbackProxy_UnlockAchievement) == 0x000018, "Wrong size on FCTAchievementUnlockCallbackProxy_UnlockAchievement");
static_assert(offsetof(FCTAchievementUnlockCallbackProxy_UnlockAchievement, Code) == 0x000000, "Member 'FCTAchievementUnlockCallbackProxy_UnlockAchievement::Code' has a wrong offset!");
static_assert(offsetof(FCTAchievementUnlockCallbackProxy_UnlockAchievement, ReturnValue) == 0x000010, "Member 'FCTAchievementUnlockCallbackProxy_UnlockAchievement::ReturnValue' has a wrong offset!");

// Function SCT.FCTGetTrophyRecordCallbackProxy.GetTrophyCustomizationRecord
// 0x0008 (0x0008 - 0x0000)
struct FCTGetTrophyRecordCallbackProxy_GetTrophyCustomizationRecord final
{
public:
	class UFCTGetTrophyRecordCallbackProxy*       ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCTGetTrophyRecordCallbackProxy_GetTrophyCustomizationRecord) == 0x000008, "Wrong alignment on FCTGetTrophyRecordCallbackProxy_GetTrophyCustomizationRecord");
static_assert(sizeof(FCTGetTrophyRecordCallbackProxy_GetTrophyCustomizationRecord) == 0x000008, "Wrong size on FCTGetTrophyRecordCallbackProxy_GetTrophyCustomizationRecord");
static_assert(offsetof(FCTGetTrophyRecordCallbackProxy_GetTrophyCustomizationRecord, ReturnValue) == 0x000000, "Member 'FCTGetTrophyRecordCallbackProxy_GetTrophyCustomizationRecord::ReturnValue' has a wrong offset!");

// Function SCT.FCTGetTrophyRecordCallbackProxy.GetUserSelectedTrophies
// 0x0020 (0x0020 - 0x0000)
struct FCTGetTrophyRecordCallbackProxy_GetUserSelectedTrophies final
{
public:
	struct FCloudTrophyInfo                       TrophyRecord;                                      // 0x0000(0x0020)(Parm, OutParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCTGetTrophyRecordCallbackProxy_GetUserSelectedTrophies) == 0x000008, "Wrong alignment on FCTGetTrophyRecordCallbackProxy_GetUserSelectedTrophies");
static_assert(sizeof(FCTGetTrophyRecordCallbackProxy_GetUserSelectedTrophies) == 0x000020, "Wrong size on FCTGetTrophyRecordCallbackProxy_GetUserSelectedTrophies");
static_assert(offsetof(FCTGetTrophyRecordCallbackProxy_GetUserSelectedTrophies, TrophyRecord) == 0x000000, "Member 'FCTGetTrophyRecordCallbackProxy_GetUserSelectedTrophies::TrophyRecord' has a wrong offset!");

// Function SCT.FCTSetTrophyRecordCallbackProxy.SetTrophyCustomizationRecord
// 0x0018 (0x0018 - 0x0000)
struct FCTSetTrophyRecordCallbackProxy_SetTrophyCustomizationRecord final
{
public:
	TArray<struct FCloudTrophy>                   SelectedTrophies;                                  // 0x0000(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	class UFCTSetTrophyRecordCallbackProxy*       ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCTSetTrophyRecordCallbackProxy_SetTrophyCustomizationRecord) == 0x000008, "Wrong alignment on FCTSetTrophyRecordCallbackProxy_SetTrophyCustomizationRecord");
static_assert(sizeof(FCTSetTrophyRecordCallbackProxy_SetTrophyCustomizationRecord) == 0x000018, "Wrong size on FCTSetTrophyRecordCallbackProxy_SetTrophyCustomizationRecord");
static_assert(offsetof(FCTSetTrophyRecordCallbackProxy_SetTrophyCustomizationRecord, SelectedTrophies) == 0x000000, "Member 'FCTSetTrophyRecordCallbackProxy_SetTrophyCustomizationRecord::SelectedTrophies' has a wrong offset!");
static_assert(offsetof(FCTSetTrophyRecordCallbackProxy_SetTrophyCustomizationRecord, ReturnValue) == 0x000010, "Member 'FCTSetTrophyRecordCallbackProxy_SetTrophyCustomizationRecord::ReturnValue' has a wrong offset!");

// Function SCT.FCTGameRecordStatisticsBlueprintLibrary.ClientIncrementGlobalStatistic
// 0x0001 (0x0001 - 0x0000)
struct FCTGameRecordStatisticsBlueprintLibrary_ClientIncrementGlobalStatistic final
{
public:
	EGlobalClientStatistics                       Statistic;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCTGameRecordStatisticsBlueprintLibrary_ClientIncrementGlobalStatistic) == 0x000001, "Wrong alignment on FCTGameRecordStatisticsBlueprintLibrary_ClientIncrementGlobalStatistic");
static_assert(sizeof(FCTGameRecordStatisticsBlueprintLibrary_ClientIncrementGlobalStatistic) == 0x000001, "Wrong size on FCTGameRecordStatisticsBlueprintLibrary_ClientIncrementGlobalStatistic");
static_assert(offsetof(FCTGameRecordStatisticsBlueprintLibrary_ClientIncrementGlobalStatistic, Statistic) == 0x000000, "Member 'FCTGameRecordStatisticsBlueprintLibrary_ClientIncrementGlobalStatistic::Statistic' has a wrong offset!");

// Function SCT.FCTGameRecordStatisticsBlueprintLibrary.ServerIncrementGlobalStatistic
// 0x0001 (0x0001 - 0x0000)
struct FCTGameRecordStatisticsBlueprintLibrary_ServerIncrementGlobalStatistic final
{
public:
	EGlobalServerStatistics                       Statistic;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCTGameRecordStatisticsBlueprintLibrary_ServerIncrementGlobalStatistic) == 0x000001, "Wrong alignment on FCTGameRecordStatisticsBlueprintLibrary_ServerIncrementGlobalStatistic");
static_assert(sizeof(FCTGameRecordStatisticsBlueprintLibrary_ServerIncrementGlobalStatistic) == 0x000001, "Wrong size on FCTGameRecordStatisticsBlueprintLibrary_ServerIncrementGlobalStatistic");
static_assert(offsetof(FCTGameRecordStatisticsBlueprintLibrary_ServerIncrementGlobalStatistic, Statistic) == 0x000000, "Member 'FCTGameRecordStatisticsBlueprintLibrary_ServerIncrementGlobalStatistic::Statistic' has a wrong offset!");

// Function SCT.BlueprintXboxAnonymousUserPrivilegeCheckerCallbackProxy.CheckAnonymousCommunicationPrivilege
// 0x0020 (0x0020 - 0x0000)
struct BlueprintXboxAnonymousUserPrivilegeCheckerCallbackProxy_CheckAnonymousCommunicationPrivilege final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class APlayerController*                      InPlayerController;                                // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInIsFriend;                                       // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInForceUpdate;                                    // 0x0011(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12[0x6];                                       // 0x0012(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UBlueprintXboxAnonymousUserPrivilegeCheckerCallbackProxy* ReturnValue;                                       // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BlueprintXboxAnonymousUserPrivilegeCheckerCallbackProxy_CheckAnonymousCommunicationPrivilege) == 0x000008, "Wrong alignment on BlueprintXboxAnonymousUserPrivilegeCheckerCallbackProxy_CheckAnonymousCommunicationPrivilege");
static_assert(sizeof(BlueprintXboxAnonymousUserPrivilegeCheckerCallbackProxy_CheckAnonymousCommunicationPrivilege) == 0x000020, "Wrong size on BlueprintXboxAnonymousUserPrivilegeCheckerCallbackProxy_CheckAnonymousCommunicationPrivilege");
static_assert(offsetof(BlueprintXboxAnonymousUserPrivilegeCheckerCallbackProxy_CheckAnonymousCommunicationPrivilege, WorldContextObject) == 0x000000, "Member 'BlueprintXboxAnonymousUserPrivilegeCheckerCallbackProxy_CheckAnonymousCommunicationPrivilege::WorldContextObject' has a wrong offset!");
static_assert(offsetof(BlueprintXboxAnonymousUserPrivilegeCheckerCallbackProxy_CheckAnonymousCommunicationPrivilege, InPlayerController) == 0x000008, "Member 'BlueprintXboxAnonymousUserPrivilegeCheckerCallbackProxy_CheckAnonymousCommunicationPrivilege::InPlayerController' has a wrong offset!");
static_assert(offsetof(BlueprintXboxAnonymousUserPrivilegeCheckerCallbackProxy_CheckAnonymousCommunicationPrivilege, bInIsFriend) == 0x000010, "Member 'BlueprintXboxAnonymousUserPrivilegeCheckerCallbackProxy_CheckAnonymousCommunicationPrivilege::bInIsFriend' has a wrong offset!");
static_assert(offsetof(BlueprintXboxAnonymousUserPrivilegeCheckerCallbackProxy_CheckAnonymousCommunicationPrivilege, bInForceUpdate) == 0x000011, "Member 'BlueprintXboxAnonymousUserPrivilegeCheckerCallbackProxy_CheckAnonymousCommunicationPrivilege::bInForceUpdate' has a wrong offset!");
static_assert(offsetof(BlueprintXboxAnonymousUserPrivilegeCheckerCallbackProxy_CheckAnonymousCommunicationPrivilege, ReturnValue) == 0x000018, "Member 'BlueprintXboxAnonymousUserPrivilegeCheckerCallbackProxy_CheckAnonymousCommunicationPrivilege::ReturnValue' has a wrong offset!");

// Function SCT.FCTAccelByteGetUserUtils.GetUserInfo
// 0x0018 (0x0018 - 0x0000)
struct FCTAccelByteGetUserUtils_GetUserInfo final
{
public:
	class FString                                 UserId;                                            // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFCTAccelByteGetUserUtils*              ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCTAccelByteGetUserUtils_GetUserInfo) == 0x000008, "Wrong alignment on FCTAccelByteGetUserUtils_GetUserInfo");
static_assert(sizeof(FCTAccelByteGetUserUtils_GetUserInfo) == 0x000018, "Wrong size on FCTAccelByteGetUserUtils_GetUserInfo");
static_assert(offsetof(FCTAccelByteGetUserUtils_GetUserInfo, UserId) == 0x000000, "Member 'FCTAccelByteGetUserUtils_GetUserInfo::UserId' has a wrong offset!");
static_assert(offsetof(FCTAccelByteGetUserUtils_GetUserInfo, ReturnValue) == 0x000010, "Member 'FCTAccelByteGetUserUtils_GetUserInfo::ReturnValue' has a wrong offset!");

// Function SCT.FCTAccelByteKarmaStat.AddToCurrentKarma
// 0x0010 (0x0010 - 0x0000)
struct FCTAccelByteKarmaStat_AddToCurrentKarma final
{
public:
	int32                                         Amount;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UFCTAccelByteKarmaStat*                 ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCTAccelByteKarmaStat_AddToCurrentKarma) == 0x000008, "Wrong alignment on FCTAccelByteKarmaStat_AddToCurrentKarma");
static_assert(sizeof(FCTAccelByteKarmaStat_AddToCurrentKarma) == 0x000010, "Wrong size on FCTAccelByteKarmaStat_AddToCurrentKarma");
static_assert(offsetof(FCTAccelByteKarmaStat_AddToCurrentKarma, Amount) == 0x000000, "Member 'FCTAccelByteKarmaStat_AddToCurrentKarma::Amount' has a wrong offset!");
static_assert(offsetof(FCTAccelByteKarmaStat_AddToCurrentKarma, ReturnValue) == 0x000008, "Member 'FCTAccelByteKarmaStat_AddToCurrentKarma::ReturnValue' has a wrong offset!");

// Function SCT.FCTAccelByteKarmaStat.GetCurrentKarma
// 0x0008 (0x0008 - 0x0000)
struct FCTAccelByteKarmaStat_GetCurrentKarma final
{
public:
	class UFCTAccelByteKarmaStat*                 ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCTAccelByteKarmaStat_GetCurrentKarma) == 0x000008, "Wrong alignment on FCTAccelByteKarmaStat_GetCurrentKarma");
static_assert(sizeof(FCTAccelByteKarmaStat_GetCurrentKarma) == 0x000008, "Wrong size on FCTAccelByteKarmaStat_GetCurrentKarma");
static_assert(offsetof(FCTAccelByteKarmaStat_GetCurrentKarma, ReturnValue) == 0x000000, "Member 'FCTAccelByteKarmaStat_GetCurrentKarma::ReturnValue' has a wrong offset!");

// Function SCT.FCTAccountMigrationCallbackProxy.GetCurrentAccountInformation
// 0x0008 (0x0008 - 0x0000)
struct FCTAccountMigrationCallbackProxy_GetCurrentAccountInformation final
{
public:
	class UFCTAccountMigrationCallbackProxy*      ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCTAccountMigrationCallbackProxy_GetCurrentAccountInformation) == 0x000008, "Wrong alignment on FCTAccountMigrationCallbackProxy_GetCurrentAccountInformation");
static_assert(sizeof(FCTAccountMigrationCallbackProxy_GetCurrentAccountInformation) == 0x000008, "Wrong size on FCTAccountMigrationCallbackProxy_GetCurrentAccountInformation");
static_assert(offsetof(FCTAccountMigrationCallbackProxy_GetCurrentAccountInformation, ReturnValue) == 0x000000, "Member 'FCTAccountMigrationCallbackProxy_GetCurrentAccountInformation::ReturnValue' has a wrong offset!");

// Function SCT.FCTAccountMigrationCallbackProxy.MigrateToNewAccount
// 0x02A8 (0x02A8 - 0x0000)
struct FCTAccountMigrationCallbackProxy_MigrateToNewAccount final
{
public:
	struct FFCTUserAccountMergerPayload           MergePayload_0;                                    // 0x0000(0x02A0)(Parm, NativeAccessSpecifierPublic)
	class UFCTAccountMigrationCallbackProxy*      ReturnValue;                                       // 0x02A0(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCTAccountMigrationCallbackProxy_MigrateToNewAccount) == 0x000008, "Wrong alignment on FCTAccountMigrationCallbackProxy_MigrateToNewAccount");
static_assert(sizeof(FCTAccountMigrationCallbackProxy_MigrateToNewAccount) == 0x0002A8, "Wrong size on FCTAccountMigrationCallbackProxy_MigrateToNewAccount");
static_assert(offsetof(FCTAccountMigrationCallbackProxy_MigrateToNewAccount, MergePayload_0) == 0x000000, "Member 'FCTAccountMigrationCallbackProxy_MigrateToNewAccount::MergePayload_0' has a wrong offset!");
static_assert(offsetof(FCTAccountMigrationCallbackProxy_MigrateToNewAccount, ReturnValue) == 0x0002A0, "Member 'FCTAccountMigrationCallbackProxy_MigrateToNewAccount::ReturnValue' has a wrong offset!");

// Function SCT.SetCloudIntDataCallbackProxy.SetCloudRecordValue
// 0x0028 (0x0028 - 0x0000)
struct SetCloudIntDataCallbackProxy_SetCloudRecordValue final
{
public:
	EUserRecordType                               UserRecord;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 FieldName;                                         // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AddValue;                                          // 0x0018(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class USetCloudIntDataCallbackProxy*          ReturnValue;                                       // 0x0020(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SetCloudIntDataCallbackProxy_SetCloudRecordValue) == 0x000008, "Wrong alignment on SetCloudIntDataCallbackProxy_SetCloudRecordValue");
static_assert(sizeof(SetCloudIntDataCallbackProxy_SetCloudRecordValue) == 0x000028, "Wrong size on SetCloudIntDataCallbackProxy_SetCloudRecordValue");
static_assert(offsetof(SetCloudIntDataCallbackProxy_SetCloudRecordValue, UserRecord) == 0x000000, "Member 'SetCloudIntDataCallbackProxy_SetCloudRecordValue::UserRecord' has a wrong offset!");
static_assert(offsetof(SetCloudIntDataCallbackProxy_SetCloudRecordValue, FieldName) == 0x000008, "Member 'SetCloudIntDataCallbackProxy_SetCloudRecordValue::FieldName' has a wrong offset!");
static_assert(offsetof(SetCloudIntDataCallbackProxy_SetCloudRecordValue, AddValue) == 0x000018, "Member 'SetCloudIntDataCallbackProxy_SetCloudRecordValue::AddValue' has a wrong offset!");
static_assert(offsetof(SetCloudIntDataCallbackProxy_SetCloudRecordValue, ReturnValue) == 0x000020, "Member 'SetCloudIntDataCallbackProxy_SetCloudRecordValue::ReturnValue' has a wrong offset!");

// Function SCT.FCTAccelByteSearchUserUtils.SearchUsers
// 0x0018 (0x0018 - 0x0000)
struct FCTAccelByteSearchUserUtils_SearchUsers final
{
public:
	class FString                                 Query;                                             // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFCTAccelByteSearchUserUtils*           ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCTAccelByteSearchUserUtils_SearchUsers) == 0x000008, "Wrong alignment on FCTAccelByteSearchUserUtils_SearchUsers");
static_assert(sizeof(FCTAccelByteSearchUserUtils_SearchUsers) == 0x000018, "Wrong size on FCTAccelByteSearchUserUtils_SearchUsers");
static_assert(offsetof(FCTAccelByteSearchUserUtils_SearchUsers, Query) == 0x000000, "Member 'FCTAccelByteSearchUserUtils_SearchUsers::Query' has a wrong offset!");
static_assert(offsetof(FCTAccelByteSearchUserUtils_SearchUsers, ReturnValue) == 0x000010, "Member 'FCTAccelByteSearchUserUtils_SearchUsers::ReturnValue' has a wrong offset!");

// Function SCT.FCTAccelByteCloudPublicProfileCallbackProxy.GetCloudPublicProfile
// 0x0008 (0x0008 - 0x0000)
struct FCTAccelByteCloudPublicProfileCallbackProxy_GetCloudPublicProfile final
{
public:
	class UFCTAccelByteCloudPublicProfileCallbackProxy* ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCTAccelByteCloudPublicProfileCallbackProxy_GetCloudPublicProfile) == 0x000008, "Wrong alignment on FCTAccelByteCloudPublicProfileCallbackProxy_GetCloudPublicProfile");
static_assert(sizeof(FCTAccelByteCloudPublicProfileCallbackProxy_GetCloudPublicProfile) == 0x000008, "Wrong size on FCTAccelByteCloudPublicProfileCallbackProxy_GetCloudPublicProfile");
static_assert(offsetof(FCTAccelByteCloudPublicProfileCallbackProxy_GetCloudPublicProfile, ReturnValue) == 0x000000, "Member 'FCTAccelByteCloudPublicProfileCallbackProxy_GetCloudPublicProfile::ReturnValue' has a wrong offset!");

// Function SCT.FCTAccelByteCloudPublicProfileCallbackProxy.GetUserCloudPublicProfile
// 0x0018 (0x0018 - 0x0000)
struct FCTAccelByteCloudPublicProfileCallbackProxy_GetUserCloudPublicProfile final
{
public:
	class FString                                 UserId;                                            // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFCTAccelByteCloudPublicProfileCallbackProxy* ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCTAccelByteCloudPublicProfileCallbackProxy_GetUserCloudPublicProfile) == 0x000008, "Wrong alignment on FCTAccelByteCloudPublicProfileCallbackProxy_GetUserCloudPublicProfile");
static_assert(sizeof(FCTAccelByteCloudPublicProfileCallbackProxy_GetUserCloudPublicProfile) == 0x000018, "Wrong size on FCTAccelByteCloudPublicProfileCallbackProxy_GetUserCloudPublicProfile");
static_assert(offsetof(FCTAccelByteCloudPublicProfileCallbackProxy_GetUserCloudPublicProfile, UserId) == 0x000000, "Member 'FCTAccelByteCloudPublicProfileCallbackProxy_GetUserCloudPublicProfile::UserId' has a wrong offset!");
static_assert(offsetof(FCTAccelByteCloudPublicProfileCallbackProxy_GetUserCloudPublicProfile, ReturnValue) == 0x000010, "Member 'FCTAccelByteCloudPublicProfileCallbackProxy_GetUserCloudPublicProfile::ReturnValue' has a wrong offset!");

// Function SCT.FCTAccelByteCloudPublicProfileCallbackProxy.SetCloudPublicProfile
// 0x0010 (0x0010 - 0x0000)
struct FCTAccelByteCloudPublicProfileCallbackProxy_SetCloudPublicProfile final
{
public:
	int32                                         AddedExperience;                                   // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UFCTAccelByteCloudPublicProfileCallbackProxy* ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCTAccelByteCloudPublicProfileCallbackProxy_SetCloudPublicProfile) == 0x000008, "Wrong alignment on FCTAccelByteCloudPublicProfileCallbackProxy_SetCloudPublicProfile");
static_assert(sizeof(FCTAccelByteCloudPublicProfileCallbackProxy_SetCloudPublicProfile) == 0x000010, "Wrong size on FCTAccelByteCloudPublicProfileCallbackProxy_SetCloudPublicProfile");
static_assert(offsetof(FCTAccelByteCloudPublicProfileCallbackProxy_SetCloudPublicProfile, AddedExperience) == 0x000000, "Member 'FCTAccelByteCloudPublicProfileCallbackProxy_SetCloudPublicProfile::AddedExperience' has a wrong offset!");
static_assert(offsetof(FCTAccelByteCloudPublicProfileCallbackProxy_SetCloudPublicProfile, ReturnValue) == 0x000008, "Member 'FCTAccelByteCloudPublicProfileCallbackProxy_SetCloudPublicProfile::ReturnValue' has a wrong offset!");

// Function SCT.ServiceMessageHandler.GetServiceMessagesFromGameRecord
// 0x0008 (0x0008 - 0x0000)
struct ServiceMessageHandler_GetServiceMessagesFromGameRecord final
{
public:
	class UServiceMessageHandler*                 ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ServiceMessageHandler_GetServiceMessagesFromGameRecord) == 0x000008, "Wrong alignment on ServiceMessageHandler_GetServiceMessagesFromGameRecord");
static_assert(sizeof(ServiceMessageHandler_GetServiceMessagesFromGameRecord) == 0x000008, "Wrong size on ServiceMessageHandler_GetServiceMessagesFromGameRecord");
static_assert(offsetof(ServiceMessageHandler_GetServiceMessagesFromGameRecord, ReturnValue) == 0x000000, "Member 'ServiceMessageHandler_GetServiceMessagesFromGameRecord::ReturnValue' has a wrong offset!");

// Function SCT.FCTAccelByteCustomizationPayloadCallbackProxy.GetUserCustomizationPayload
// 0x0008 (0x0008 - 0x0000)
struct FCTAccelByteCustomizationPayloadCallbackProxy_GetUserCustomizationPayload final
{
public:
	class UFCTAccelByteCustomizationPayloadCallbackProxy* ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCTAccelByteCustomizationPayloadCallbackProxy_GetUserCustomizationPayload) == 0x000008, "Wrong alignment on FCTAccelByteCustomizationPayloadCallbackProxy_GetUserCustomizationPayload");
static_assert(sizeof(FCTAccelByteCustomizationPayloadCallbackProxy_GetUserCustomizationPayload) == 0x000008, "Wrong size on FCTAccelByteCustomizationPayloadCallbackProxy_GetUserCustomizationPayload");
static_assert(offsetof(FCTAccelByteCustomizationPayloadCallbackProxy_GetUserCustomizationPayload, ReturnValue) == 0x000000, "Member 'FCTAccelByteCustomizationPayloadCallbackProxy_GetUserCustomizationPayload::ReturnValue' has a wrong offset!");

// Function SCT.FCTAccelByteCustomizationPayloadCallbackProxy.SetUserCustomizationPayload
// 0x01A0 (0x01A0 - 0x0000)
struct FCTAccelByteCustomizationPayloadCallbackProxy_SetUserCustomizationPayload final
{
public:
	struct FFCTCloudCustomizationGender           Male;                                              // 0x0000(0x00B0)(Parm, NativeAccessSpecifierPublic)
	struct FFCTCloudCustomizationGender           Female;                                            // 0x00B0(0x00B0)(Parm, NativeAccessSpecifierPublic)
	struct FFCTCloudCustomizationVruumba          Vruumba;                                           // 0x0160(0x0030)(Parm, NativeAccessSpecifierPublic)
	bool                                          MaleSelected;                                      // 0x0190(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_191[0x7];                                      // 0x0191(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UFCTAccelByteCustomizationPayloadCallbackProxy* ReturnValue;                                       // 0x0198(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCTAccelByteCustomizationPayloadCallbackProxy_SetUserCustomizationPayload) == 0x000008, "Wrong alignment on FCTAccelByteCustomizationPayloadCallbackProxy_SetUserCustomizationPayload");
static_assert(sizeof(FCTAccelByteCustomizationPayloadCallbackProxy_SetUserCustomizationPayload) == 0x0001A0, "Wrong size on FCTAccelByteCustomizationPayloadCallbackProxy_SetUserCustomizationPayload");
static_assert(offsetof(FCTAccelByteCustomizationPayloadCallbackProxy_SetUserCustomizationPayload, Male) == 0x000000, "Member 'FCTAccelByteCustomizationPayloadCallbackProxy_SetUserCustomizationPayload::Male' has a wrong offset!");
static_assert(offsetof(FCTAccelByteCustomizationPayloadCallbackProxy_SetUserCustomizationPayload, Female) == 0x0000B0, "Member 'FCTAccelByteCustomizationPayloadCallbackProxy_SetUserCustomizationPayload::Female' has a wrong offset!");
static_assert(offsetof(FCTAccelByteCustomizationPayloadCallbackProxy_SetUserCustomizationPayload, Vruumba) == 0x000160, "Member 'FCTAccelByteCustomizationPayloadCallbackProxy_SetUserCustomizationPayload::Vruumba' has a wrong offset!");
static_assert(offsetof(FCTAccelByteCustomizationPayloadCallbackProxy_SetUserCustomizationPayload, MaleSelected) == 0x000190, "Member 'FCTAccelByteCustomizationPayloadCallbackProxy_SetUserCustomizationPayload::MaleSelected' has a wrong offset!");
static_assert(offsetof(FCTAccelByteCustomizationPayloadCallbackProxy_SetUserCustomizationPayload, ReturnValue) == 0x000198, "Member 'FCTAccelByteCustomizationPayloadCallbackProxy_SetUserCustomizationPayload::ReturnValue' has a wrong offset!");

// Function SCT.FCTAccelByteCustomizationSettingsCallbackProxy.GetCustomizationSettingsByUserId
// 0x0018 (0x0018 - 0x0000)
struct FCTAccelByteCustomizationSettingsCallbackProxy_GetCustomizationSettingsByUserId final
{
public:
	class FString                                 UserId;                                            // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFCTAccelByteCustomizationSettingsCallbackProxy* ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCTAccelByteCustomizationSettingsCallbackProxy_GetCustomizationSettingsByUserId) == 0x000008, "Wrong alignment on FCTAccelByteCustomizationSettingsCallbackProxy_GetCustomizationSettingsByUserId");
static_assert(sizeof(FCTAccelByteCustomizationSettingsCallbackProxy_GetCustomizationSettingsByUserId) == 0x000018, "Wrong size on FCTAccelByteCustomizationSettingsCallbackProxy_GetCustomizationSettingsByUserId");
static_assert(offsetof(FCTAccelByteCustomizationSettingsCallbackProxy_GetCustomizationSettingsByUserId, UserId) == 0x000000, "Member 'FCTAccelByteCustomizationSettingsCallbackProxy_GetCustomizationSettingsByUserId::UserId' has a wrong offset!");
static_assert(offsetof(FCTAccelByteCustomizationSettingsCallbackProxy_GetCustomizationSettingsByUserId, ReturnValue) == 0x000010, "Member 'FCTAccelByteCustomizationSettingsCallbackProxy_GetCustomizationSettingsByUserId::ReturnValue' has a wrong offset!");

// Function SCT.FCTAccelByteVruumbaCustomizationSettingsCallbackProxy.GetVruumbaCustomizationSettingsByUserId
// 0x0018 (0x0018 - 0x0000)
struct FCTAccelByteVruumbaCustomizationSettingsCallbackProxy_GetVruumbaCustomizationSettingsByUserId final
{
public:
	class FString                                 UserId;                                            // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFCTAccelByteVruumbaCustomizationSettingsCallbackProxy* ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCTAccelByteVruumbaCustomizationSettingsCallbackProxy_GetVruumbaCustomizationSettingsByUserId) == 0x000008, "Wrong alignment on FCTAccelByteVruumbaCustomizationSettingsCallbackProxy_GetVruumbaCustomizationSettingsByUserId");
static_assert(sizeof(FCTAccelByteVruumbaCustomizationSettingsCallbackProxy_GetVruumbaCustomizationSettingsByUserId) == 0x000018, "Wrong size on FCTAccelByteVruumbaCustomizationSettingsCallbackProxy_GetVruumbaCustomizationSettingsByUserId");
static_assert(offsetof(FCTAccelByteVruumbaCustomizationSettingsCallbackProxy_GetVruumbaCustomizationSettingsByUserId, UserId) == 0x000000, "Member 'FCTAccelByteVruumbaCustomizationSettingsCallbackProxy_GetVruumbaCustomizationSettingsByUserId::UserId' has a wrong offset!");
static_assert(offsetof(FCTAccelByteVruumbaCustomizationSettingsCallbackProxy_GetVruumbaCustomizationSettingsByUserId, ReturnValue) == 0x000010, "Member 'FCTAccelByteVruumbaCustomizationSettingsCallbackProxy_GetVruumbaCustomizationSettingsByUserId::ReturnValue' has a wrong offset!");

// Function SCT.FCTAccelByteVirtualPurchasesCallbackProxy.GetInGamePurchasingPayload
// 0x0008 (0x0008 - 0x0000)
struct FCTAccelByteVirtualPurchasesCallbackProxy_GetInGamePurchasingPayload final
{
public:
	class UFCTAccelByteVirtualPurchasesCallbackProxy* ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCTAccelByteVirtualPurchasesCallbackProxy_GetInGamePurchasingPayload) == 0x000008, "Wrong alignment on FCTAccelByteVirtualPurchasesCallbackProxy_GetInGamePurchasingPayload");
static_assert(sizeof(FCTAccelByteVirtualPurchasesCallbackProxy_GetInGamePurchasingPayload) == 0x000008, "Wrong size on FCTAccelByteVirtualPurchasesCallbackProxy_GetInGamePurchasingPayload");
static_assert(offsetof(FCTAccelByteVirtualPurchasesCallbackProxy_GetInGamePurchasingPayload, ReturnValue) == 0x000000, "Member 'FCTAccelByteVirtualPurchasesCallbackProxy_GetInGamePurchasingPayload::ReturnValue' has a wrong offset!");

// Function SCT.FCTAccelByteVirtualPurchasesCallbackProxy.PurchaseItemWithFirstClassTokens
// 0x0020 (0x0020 - 0x0000)
struct FCTAccelByteVirtualPurchasesCallbackProxy_PurchaseItemWithFirstClassTokens final
{
public:
	class FString                                 Name_0;                                            // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Cost;                                              // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UFCTAccelByteVirtualPurchasesCallbackProxy* ReturnValue;                                       // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCTAccelByteVirtualPurchasesCallbackProxy_PurchaseItemWithFirstClassTokens) == 0x000008, "Wrong alignment on FCTAccelByteVirtualPurchasesCallbackProxy_PurchaseItemWithFirstClassTokens");
static_assert(sizeof(FCTAccelByteVirtualPurchasesCallbackProxy_PurchaseItemWithFirstClassTokens) == 0x000020, "Wrong size on FCTAccelByteVirtualPurchasesCallbackProxy_PurchaseItemWithFirstClassTokens");
static_assert(offsetof(FCTAccelByteVirtualPurchasesCallbackProxy_PurchaseItemWithFirstClassTokens, Name_0) == 0x000000, "Member 'FCTAccelByteVirtualPurchasesCallbackProxy_PurchaseItemWithFirstClassTokens::Name_0' has a wrong offset!");
static_assert(offsetof(FCTAccelByteVirtualPurchasesCallbackProxy_PurchaseItemWithFirstClassTokens, Cost) == 0x000010, "Member 'FCTAccelByteVirtualPurchasesCallbackProxy_PurchaseItemWithFirstClassTokens::Cost' has a wrong offset!");
static_assert(offsetof(FCTAccelByteVirtualPurchasesCallbackProxy_PurchaseItemWithFirstClassTokens, ReturnValue) == 0x000018, "Member 'FCTAccelByteVirtualPurchasesCallbackProxy_PurchaseItemWithFirstClassTokens::ReturnValue' has a wrong offset!");

// Function SCT.FCTAccelByteVirtualPurchasesCallbackProxy.UpdateFirstClassTokenWallet
// 0x0010 (0x0010 - 0x0000)
struct FCTAccelByteVirtualPurchasesCallbackProxy_UpdateFirstClassTokenWallet final
{
public:
	int32                                         AddedCurrency;                                     // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UFCTAccelByteVirtualPurchasesCallbackProxy* ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCTAccelByteVirtualPurchasesCallbackProxy_UpdateFirstClassTokenWallet) == 0x000008, "Wrong alignment on FCTAccelByteVirtualPurchasesCallbackProxy_UpdateFirstClassTokenWallet");
static_assert(sizeof(FCTAccelByteVirtualPurchasesCallbackProxy_UpdateFirstClassTokenWallet) == 0x000010, "Wrong size on FCTAccelByteVirtualPurchasesCallbackProxy_UpdateFirstClassTokenWallet");
static_assert(offsetof(FCTAccelByteVirtualPurchasesCallbackProxy_UpdateFirstClassTokenWallet, AddedCurrency) == 0x000000, "Member 'FCTAccelByteVirtualPurchasesCallbackProxy_UpdateFirstClassTokenWallet::AddedCurrency' has a wrong offset!");
static_assert(offsetof(FCTAccelByteVirtualPurchasesCallbackProxy_UpdateFirstClassTokenWallet, ReturnValue) == 0x000008, "Member 'FCTAccelByteVirtualPurchasesCallbackProxy_UpdateFirstClassTokenWallet::ReturnValue' has a wrong offset!");

// Function SCT.FCTCloudEmotesCallbackProxy.GetEmotesFromCloud
// 0x0008 (0x0008 - 0x0000)
struct FCTCloudEmotesCallbackProxy_GetEmotesFromCloud final
{
public:
	class UFCTCloudEmotesCallbackProxy*           ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCTCloudEmotesCallbackProxy_GetEmotesFromCloud) == 0x000008, "Wrong alignment on FCTCloudEmotesCallbackProxy_GetEmotesFromCloud");
static_assert(sizeof(FCTCloudEmotesCallbackProxy_GetEmotesFromCloud) == 0x000008, "Wrong size on FCTCloudEmotesCallbackProxy_GetEmotesFromCloud");
static_assert(offsetof(FCTCloudEmotesCallbackProxy_GetEmotesFromCloud, ReturnValue) == 0x000000, "Member 'FCTCloudEmotesCallbackProxy_GetEmotesFromCloud::ReturnValue' has a wrong offset!");

// Function SCT.FCTCloudEmotesCallbackProxy.SetEmotesToCloud
// 0x0018 (0x0018 - 0x0000)
struct FCTCloudEmotesCallbackProxy_SetEmotesToCloud final
{
public:
	TArray<class FString>                         Names;                                             // 0x0000(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	class UFCTCloudEmotesCallbackProxy*           ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCTCloudEmotesCallbackProxy_SetEmotesToCloud) == 0x000008, "Wrong alignment on FCTCloudEmotesCallbackProxy_SetEmotesToCloud");
static_assert(sizeof(FCTCloudEmotesCallbackProxy_SetEmotesToCloud) == 0x000018, "Wrong size on FCTCloudEmotesCallbackProxy_SetEmotesToCloud");
static_assert(offsetof(FCTCloudEmotesCallbackProxy_SetEmotesToCloud, Names) == 0x000000, "Member 'FCTCloudEmotesCallbackProxy_SetEmotesToCloud::Names' has a wrong offset!");
static_assert(offsetof(FCTCloudEmotesCallbackProxy_SetEmotesToCloud, ReturnValue) == 0x000010, "Member 'FCTCloudEmotesCallbackProxy_SetEmotesToCloud::ReturnValue' has a wrong offset!");

// Function SCT.FCTAccelByteUtilities.ConvertToAlphaNumeric
// 0x0020 (0x0020 - 0x0000)
struct FCTAccelByteUtilities_ConvertToAlphaNumeric final
{
public:
	class FString                                 Input;                                             // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ReturnValue;                                       // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCTAccelByteUtilities_ConvertToAlphaNumeric) == 0x000008, "Wrong alignment on FCTAccelByteUtilities_ConvertToAlphaNumeric");
static_assert(sizeof(FCTAccelByteUtilities_ConvertToAlphaNumeric) == 0x000020, "Wrong size on FCTAccelByteUtilities_ConvertToAlphaNumeric");
static_assert(offsetof(FCTAccelByteUtilities_ConvertToAlphaNumeric, Input) == 0x000000, "Member 'FCTAccelByteUtilities_ConvertToAlphaNumeric::Input' has a wrong offset!");
static_assert(offsetof(FCTAccelByteUtilities_ConvertToAlphaNumeric, ReturnValue) == 0x000010, "Member 'FCTAccelByteUtilities_ConvertToAlphaNumeric::ReturnValue' has a wrong offset!");

// Function SCT.FCTAccelByteUtilities.DoesItemHaveUniqueSku
// 0x0260 (0x0260 - 0x0000)
struct FCTAccelByteUtilities_DoesItemHaveUniqueSku final
{
public:
	struct FAccelByteModelsEntitlementInfo        ABEntitlementInfo;                                 // 0x0000(0x0248)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class FString                                 FCTSku;                                            // 0x0248(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0258(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_259[0x7];                                      // 0x0259(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FCTAccelByteUtilities_DoesItemHaveUniqueSku) == 0x000008, "Wrong alignment on FCTAccelByteUtilities_DoesItemHaveUniqueSku");
static_assert(sizeof(FCTAccelByteUtilities_DoesItemHaveUniqueSku) == 0x000260, "Wrong size on FCTAccelByteUtilities_DoesItemHaveUniqueSku");
static_assert(offsetof(FCTAccelByteUtilities_DoesItemHaveUniqueSku, ABEntitlementInfo) == 0x000000, "Member 'FCTAccelByteUtilities_DoesItemHaveUniqueSku::ABEntitlementInfo' has a wrong offset!");
static_assert(offsetof(FCTAccelByteUtilities_DoesItemHaveUniqueSku, FCTSku) == 0x000248, "Member 'FCTAccelByteUtilities_DoesItemHaveUniqueSku::FCTSku' has a wrong offset!");
static_assert(offsetof(FCTAccelByteUtilities_DoesItemHaveUniqueSku, ReturnValue) == 0x000258, "Member 'FCTAccelByteUtilities_DoesItemHaveUniqueSku::ReturnValue' has a wrong offset!");

// Function SCT.FCTAccelByteUtilities.IsEntitlementFoundInLocalData
// 0x0260 (0x0260 - 0x0000)
struct FCTAccelByteUtilities_IsEntitlementFoundInLocalData final
{
public:
	struct FAccelByteModelsEntitlementInfo        ABEntitlementInfo;                                 // 0x0000(0x0248)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class FString                                 FCTSku;                                            // 0x0248(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0258(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_259[0x7];                                      // 0x0259(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FCTAccelByteUtilities_IsEntitlementFoundInLocalData) == 0x000008, "Wrong alignment on FCTAccelByteUtilities_IsEntitlementFoundInLocalData");
static_assert(sizeof(FCTAccelByteUtilities_IsEntitlementFoundInLocalData) == 0x000260, "Wrong size on FCTAccelByteUtilities_IsEntitlementFoundInLocalData");
static_assert(offsetof(FCTAccelByteUtilities_IsEntitlementFoundInLocalData, ABEntitlementInfo) == 0x000000, "Member 'FCTAccelByteUtilities_IsEntitlementFoundInLocalData::ABEntitlementInfo' has a wrong offset!");
static_assert(offsetof(FCTAccelByteUtilities_IsEntitlementFoundInLocalData, FCTSku) == 0x000248, "Member 'FCTAccelByteUtilities_IsEntitlementFoundInLocalData::FCTSku' has a wrong offset!");
static_assert(offsetof(FCTAccelByteUtilities_IsEntitlementFoundInLocalData, ReturnValue) == 0x000258, "Member 'FCTAccelByteUtilities_IsEntitlementFoundInLocalData::ReturnValue' has a wrong offset!");

// Function SCT.FCTAccelByteUtilities.IsItemEqual
// 0x0260 (0x0260 - 0x0000)
struct FCTAccelByteUtilities_IsItemEqual final
{
public:
	struct FAccelByteModelsEntitlementInfo        ABEntitlementInfo;                                 // 0x0000(0x0248)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class FString                                 FCTSku;                                            // 0x0248(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0258(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_259[0x7];                                      // 0x0259(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FCTAccelByteUtilities_IsItemEqual) == 0x000008, "Wrong alignment on FCTAccelByteUtilities_IsItemEqual");
static_assert(sizeof(FCTAccelByteUtilities_IsItemEqual) == 0x000260, "Wrong size on FCTAccelByteUtilities_IsItemEqual");
static_assert(offsetof(FCTAccelByteUtilities_IsItemEqual, ABEntitlementInfo) == 0x000000, "Member 'FCTAccelByteUtilities_IsItemEqual::ABEntitlementInfo' has a wrong offset!");
static_assert(offsetof(FCTAccelByteUtilities_IsItemEqual, FCTSku) == 0x000248, "Member 'FCTAccelByteUtilities_IsItemEqual::FCTSku' has a wrong offset!");
static_assert(offsetof(FCTAccelByteUtilities_IsItemEqual, ReturnValue) == 0x000258, "Member 'FCTAccelByteUtilities_IsItemEqual::ReturnValue' has a wrong offset!");

// Function SCT.FCTSettings.GetCustomGameMinimumPlayerCount
// 0x0004 (0x0004 - 0x0000)
struct FCTSettings_GetCustomGameMinimumPlayerCount final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCTSettings_GetCustomGameMinimumPlayerCount) == 0x000004, "Wrong alignment on FCTSettings_GetCustomGameMinimumPlayerCount");
static_assert(sizeof(FCTSettings_GetCustomGameMinimumPlayerCount) == 0x000004, "Wrong size on FCTSettings_GetCustomGameMinimumPlayerCount");
static_assert(offsetof(FCTSettings_GetCustomGameMinimumPlayerCount, ReturnValue) == 0x000000, "Member 'FCTSettings_GetCustomGameMinimumPlayerCount::ReturnValue' has a wrong offset!");

// Function SCT.FCTSettings.GetDefaultCustomGameSettings
// 0x0034 (0x0034 - 0x0000)
struct FCTSettings_GetDefaultCustomGameSettings final
{
public:
	struct FCustomGameSettings                    ReturnValue;                                       // 0x0000(0x0034)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCTSettings_GetDefaultCustomGameSettings) == 0x000004, "Wrong alignment on FCTSettings_GetDefaultCustomGameSettings");
static_assert(sizeof(FCTSettings_GetDefaultCustomGameSettings) == 0x000034, "Wrong size on FCTSettings_GetDefaultCustomGameSettings");
static_assert(offsetof(FCTSettings_GetDefaultCustomGameSettings, ReturnValue) == 0x000000, "Member 'FCTSettings_GetDefaultCustomGameSettings::ReturnValue' has a wrong offset!");

// Function SCT.FCTSettings.GetIsGamepadRebindingEnabled
// 0x0001 (0x0001 - 0x0000)
struct FCTSettings_GetIsGamepadRebindingEnabled final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCTSettings_GetIsGamepadRebindingEnabled) == 0x000001, "Wrong alignment on FCTSettings_GetIsGamepadRebindingEnabled");
static_assert(sizeof(FCTSettings_GetIsGamepadRebindingEnabled) == 0x000001, "Wrong size on FCTSettings_GetIsGamepadRebindingEnabled");
static_assert(offsetof(FCTSettings_GetIsGamepadRebindingEnabled, ReturnValue) == 0x000000, "Member 'FCTSettings_GetIsGamepadRebindingEnabled::ReturnValue' has a wrong offset!");

// Function SCT.FCTSettings.GetUserSettingsObjects
// 0x0010 (0x0010 - 0x0000)
struct FCTSettings_GetUserSettingsObjects final
{
public:
	TArray<TSubclassOf<class USettingsObject>>    ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, UObjectWrapper, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCTSettings_GetUserSettingsObjects) == 0x000008, "Wrong alignment on FCTSettings_GetUserSettingsObjects");
static_assert(sizeof(FCTSettings_GetUserSettingsObjects) == 0x000010, "Wrong size on FCTSettings_GetUserSettingsObjects");
static_assert(offsetof(FCTSettings_GetUserSettingsObjects, ReturnValue) == 0x000000, "Member 'FCTSettings_GetUserSettingsObjects::ReturnValue' has a wrong offset!");

// Function SCT.FCTUserReportUtilitiesLibrary.GetMostRelevantUserBanData
// 0x0068 (0x0068 - 0x0000)
struct FCTUserReportUtilitiesLibrary_GetMostRelevantUserBanData final
{
public:
	bool                                          OutHasActiveBan;                                   // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FFCTUserBan>                    Bans;                                              // 0x0008(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	TMap<class FString, class FString>            ReturnValue;                                       // 0x0018(0x0050)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCTUserReportUtilitiesLibrary_GetMostRelevantUserBanData) == 0x000008, "Wrong alignment on FCTUserReportUtilitiesLibrary_GetMostRelevantUserBanData");
static_assert(sizeof(FCTUserReportUtilitiesLibrary_GetMostRelevantUserBanData) == 0x000068, "Wrong size on FCTUserReportUtilitiesLibrary_GetMostRelevantUserBanData");
static_assert(offsetof(FCTUserReportUtilitiesLibrary_GetMostRelevantUserBanData, OutHasActiveBan) == 0x000000, "Member 'FCTUserReportUtilitiesLibrary_GetMostRelevantUserBanData::OutHasActiveBan' has a wrong offset!");
static_assert(offsetof(FCTUserReportUtilitiesLibrary_GetMostRelevantUserBanData, Bans) == 0x000008, "Member 'FCTUserReportUtilitiesLibrary_GetMostRelevantUserBanData::Bans' has a wrong offset!");
static_assert(offsetof(FCTUserReportUtilitiesLibrary_GetMostRelevantUserBanData, ReturnValue) == 0x000018, "Member 'FCTUserReportUtilitiesLibrary_GetMostRelevantUserBanData::ReturnValue' has a wrong offset!");

// Function SCT.SendUserReportCallbackProxy.ReportUser
// 0x0068 (0x0068 - 0x0000)
struct SendUserReportCallbackProxy_ReportUser final
{
public:
	class FString                                 UserId;                                            // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 DisplayName;                                       // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Reportedby_userid;                                 // 0x0020(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Reason;                                            // 0x0030(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Description;                                       // 0x0040(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 SessionID;                                         // 0x0050(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USendUserReportCallbackProxy*           ReturnValue;                                       // 0x0060(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SendUserReportCallbackProxy_ReportUser) == 0x000008, "Wrong alignment on SendUserReportCallbackProxy_ReportUser");
static_assert(sizeof(SendUserReportCallbackProxy_ReportUser) == 0x000068, "Wrong size on SendUserReportCallbackProxy_ReportUser");
static_assert(offsetof(SendUserReportCallbackProxy_ReportUser, UserId) == 0x000000, "Member 'SendUserReportCallbackProxy_ReportUser::UserId' has a wrong offset!");
static_assert(offsetof(SendUserReportCallbackProxy_ReportUser, DisplayName) == 0x000010, "Member 'SendUserReportCallbackProxy_ReportUser::DisplayName' has a wrong offset!");
static_assert(offsetof(SendUserReportCallbackProxy_ReportUser, Reportedby_userid) == 0x000020, "Member 'SendUserReportCallbackProxy_ReportUser::Reportedby_userid' has a wrong offset!");
static_assert(offsetof(SendUserReportCallbackProxy_ReportUser, Reason) == 0x000030, "Member 'SendUserReportCallbackProxy_ReportUser::Reason' has a wrong offset!");
static_assert(offsetof(SendUserReportCallbackProxy_ReportUser, Description) == 0x000040, "Member 'SendUserReportCallbackProxy_ReportUser::Description' has a wrong offset!");
static_assert(offsetof(SendUserReportCallbackProxy_ReportUser, SessionID) == 0x000050, "Member 'SendUserReportCallbackProxy_ReportUser::SessionID' has a wrong offset!");
static_assert(offsetof(SendUserReportCallbackProxy_ReportUser, ReturnValue) == 0x000060, "Member 'SendUserReportCallbackProxy_ReportUser::ReturnValue' has a wrong offset!");

// Function SCT.GetUserBansCallbackProxy.GetUserBans
// 0x0008 (0x0008 - 0x0000)
struct GetUserBansCallbackProxy_GetUserBans final
{
public:
	class UGetUserBansCallbackProxy*              ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GetUserBansCallbackProxy_GetUserBans) == 0x000008, "Wrong alignment on GetUserBansCallbackProxy_GetUserBans");
static_assert(sizeof(GetUserBansCallbackProxy_GetUserBans) == 0x000008, "Wrong size on GetUserBansCallbackProxy_GetUserBans");
static_assert(offsetof(GetUserBansCallbackProxy_GetUserBans, ReturnValue) == 0x000000, "Member 'GetUserBansCallbackProxy_GetUserBans::ReturnValue' has a wrong offset!");

// Function SCT.GetUserBanByIdCallbackProxy.GetUserBanByBanId
// 0x0018 (0x0018 - 0x0000)
struct GetUserBanByIdCallbackProxy_GetUserBanByBanId final
{
public:
	class FString                                 BanId;                                             // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UGetUserBanByIdCallbackProxy*           ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GetUserBanByIdCallbackProxy_GetUserBanByBanId) == 0x000008, "Wrong alignment on GetUserBanByIdCallbackProxy_GetUserBanByBanId");
static_assert(sizeof(GetUserBanByIdCallbackProxy_GetUserBanByBanId) == 0x000018, "Wrong size on GetUserBanByIdCallbackProxy_GetUserBanByBanId");
static_assert(offsetof(GetUserBanByIdCallbackProxy_GetUserBanByBanId, BanId) == 0x000000, "Member 'GetUserBanByIdCallbackProxy_GetUserBanByBanId::BanId' has a wrong offset!");
static_assert(offsetof(GetUserBanByIdCallbackProxy_GetUserBanByBanId, ReturnValue) == 0x000010, "Member 'GetUserBanByIdCallbackProxy_GetUserBanByBanId::ReturnValue' has a wrong offset!");

// Function SCT.FireExtinguisher.SetCurrentAmmo
// 0x0004 (0x0004 - 0x0000)
struct FireExtinguisher_SetCurrentAmmo final
{
public:
	float                                         NewAmmo;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FireExtinguisher_SetCurrentAmmo) == 0x000004, "Wrong alignment on FireExtinguisher_SetCurrentAmmo");
static_assert(sizeof(FireExtinguisher_SetCurrentAmmo) == 0x000004, "Wrong size on FireExtinguisher_SetCurrentAmmo");
static_assert(offsetof(FireExtinguisher_SetCurrentAmmo, NewAmmo) == 0x000000, "Member 'FireExtinguisher_SetCurrentAmmo::NewAmmo' has a wrong offset!");

// Function SCT.FireExtinguisher.GetCurrentAmmo
// 0x0004 (0x0004 - 0x0000)
struct FireExtinguisher_GetCurrentAmmo final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FireExtinguisher_GetCurrentAmmo) == 0x000004, "Wrong alignment on FireExtinguisher_GetCurrentAmmo");
static_assert(sizeof(FireExtinguisher_GetCurrentAmmo) == 0x000004, "Wrong size on FireExtinguisher_GetCurrentAmmo");
static_assert(offsetof(FireExtinguisher_GetCurrentAmmo, ReturnValue) == 0x000000, "Member 'FireExtinguisher_GetCurrentAmmo::ReturnValue' has a wrong offset!");

// Function SCT.FireExtinguisher.GetMaximumAmmo
// 0x0004 (0x0004 - 0x0000)
struct FireExtinguisher_GetMaximumAmmo final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FireExtinguisher_GetMaximumAmmo) == 0x000004, "Wrong alignment on FireExtinguisher_GetMaximumAmmo");
static_assert(sizeof(FireExtinguisher_GetMaximumAmmo) == 0x000004, "Wrong size on FireExtinguisher_GetMaximumAmmo");
static_assert(offsetof(FireExtinguisher_GetMaximumAmmo, ReturnValue) == 0x000000, "Member 'FireExtinguisher_GetMaximumAmmo::ReturnValue' has a wrong offset!");

// Function SCT.NextLevelExpCallbackProxy.RequestNextLevelExpRequired
// 0x0008 (0x0008 - 0x0000)
struct NextLevelExpCallbackProxy_RequestNextLevelExpRequired final
{
public:
	class UNextLevelExpCallbackProxy*             ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NextLevelExpCallbackProxy_RequestNextLevelExpRequired) == 0x000008, "Wrong alignment on NextLevelExpCallbackProxy_RequestNextLevelExpRequired");
static_assert(sizeof(NextLevelExpCallbackProxy_RequestNextLevelExpRequired) == 0x000008, "Wrong size on NextLevelExpCallbackProxy_RequestNextLevelExpRequired");
static_assert(offsetof(NextLevelExpCallbackProxy_RequestNextLevelExpRequired, ReturnValue) == 0x000000, "Member 'NextLevelExpCallbackProxy_RequestNextLevelExpRequired::ReturnValue' has a wrong offset!");

// Function SCT.GlobalEventBool.Broadcast
// 0x0001 (0x0001 - 0x0000)
struct GlobalEventBool_Broadcast final
{
public:
	bool                                          Value;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GlobalEventBool_Broadcast) == 0x000001, "Wrong alignment on GlobalEventBool_Broadcast");
static_assert(sizeof(GlobalEventBool_Broadcast) == 0x000001, "Wrong size on GlobalEventBool_Broadcast");
static_assert(offsetof(GlobalEventBool_Broadcast, Value) == 0x000000, "Member 'GlobalEventBool_Broadcast::Value' has a wrong offset!");

// Function SCT.GlobalEventFloat.Broadcast
// 0x0004 (0x0004 - 0x0000)
struct GlobalEventFloat_Broadcast final
{
public:
	float                                         Value;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GlobalEventFloat_Broadcast) == 0x000004, "Wrong alignment on GlobalEventFloat_Broadcast");
static_assert(sizeof(GlobalEventFloat_Broadcast) == 0x000004, "Wrong size on GlobalEventFloat_Broadcast");
static_assert(offsetof(GlobalEventFloat_Broadcast, Value) == 0x000000, "Member 'GlobalEventFloat_Broadcast::Value' has a wrong offset!");

// Function SCT.GlobalEventLinearColor.Broadcast
// 0x0010 (0x0010 - 0x0000)
struct GlobalEventLinearColor_Broadcast final
{
public:
	struct FLinearColor                           Value;                                             // 0x0000(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GlobalEventLinearColor_Broadcast) == 0x000004, "Wrong alignment on GlobalEventLinearColor_Broadcast");
static_assert(sizeof(GlobalEventLinearColor_Broadcast) == 0x000010, "Wrong size on GlobalEventLinearColor_Broadcast");
static_assert(offsetof(GlobalEventLinearColor_Broadcast, Value) == 0x000000, "Member 'GlobalEventLinearColor_Broadcast::Value' has a wrong offset!");

// Function SCT.HumanoidCharacter.K2_OnDestiny
// 0x0010 (0x0010 - 0x0000)
struct HumanoidCharacter_K2_OnDestiny final
{
public:
	struct FDestiny                               Destiny;                                           // 0x0000(0x0010)(Parm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(HumanoidCharacter_K2_OnDestiny) == 0x000004, "Wrong alignment on HumanoidCharacter_K2_OnDestiny");
static_assert(sizeof(HumanoidCharacter_K2_OnDestiny) == 0x000010, "Wrong size on HumanoidCharacter_K2_OnDestiny");
static_assert(offsetof(HumanoidCharacter_K2_OnDestiny, Destiny) == 0x000000, "Member 'HumanoidCharacter_K2_OnDestiny::Destiny' has a wrong offset!");

// Function SCT.HumanoidCharacter.K2_OnWetnessChanged
// 0x0004 (0x0004 - 0x0000)
struct HumanoidCharacter_K2_OnWetnessChanged final
{
public:
	float                                         Wetness;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HumanoidCharacter_K2_OnWetnessChanged) == 0x000004, "Wrong alignment on HumanoidCharacter_K2_OnWetnessChanged");
static_assert(sizeof(HumanoidCharacter_K2_OnWetnessChanged) == 0x000004, "Wrong size on HumanoidCharacter_K2_OnWetnessChanged");
static_assert(offsetof(HumanoidCharacter_K2_OnWetnessChanged, Wetness) == 0x000000, "Member 'HumanoidCharacter_K2_OnWetnessChanged::Wetness' has a wrong offset!");

// Function SCT.HumanoidCharacter.Kill
// 0x0010 (0x0010 - 0x0000)
struct HumanoidCharacter_Kill final
{
public:
	struct FDestiny                               Destiny;                                           // 0x0000(0x0010)(Parm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(HumanoidCharacter_Kill) == 0x000004, "Wrong alignment on HumanoidCharacter_Kill");
static_assert(sizeof(HumanoidCharacter_Kill) == 0x000010, "Wrong size on HumanoidCharacter_Kill");
static_assert(offsetof(HumanoidCharacter_Kill, Destiny) == 0x000000, "Member 'HumanoidCharacter_Kill::Destiny' has a wrong offset!");

// Function SCT.HumanoidCharacter.OnWetnessChanged
// 0x0004 (0x0004 - 0x0000)
struct HumanoidCharacter_OnWetnessChanged final
{
public:
	float                                         Wetness;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HumanoidCharacter_OnWetnessChanged) == 0x000004, "Wrong alignment on HumanoidCharacter_OnWetnessChanged");
static_assert(sizeof(HumanoidCharacter_OnWetnessChanged) == 0x000004, "Wrong size on HumanoidCharacter_OnWetnessChanged");
static_assert(offsetof(HumanoidCharacter_OnWetnessChanged, Wetness) == 0x000000, "Member 'HumanoidCharacter_OnWetnessChanged::Wetness' has a wrong offset!");

// Function SCT.IdentificationColorGlobalEvent.Broadcast
// 0x0018 (0x0018 - 0x0000)
struct IdentificationColorGlobalEvent_Broadcast final
{
public:
	class APlayerState*                           PlayerState;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           Value;                                             // 0x0008(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(IdentificationColorGlobalEvent_Broadcast) == 0x000008, "Wrong alignment on IdentificationColorGlobalEvent_Broadcast");
static_assert(sizeof(IdentificationColorGlobalEvent_Broadcast) == 0x000018, "Wrong size on IdentificationColorGlobalEvent_Broadcast");
static_assert(offsetof(IdentificationColorGlobalEvent_Broadcast, PlayerState) == 0x000000, "Member 'IdentificationColorGlobalEvent_Broadcast::PlayerState' has a wrong offset!");
static_assert(offsetof(IdentificationColorGlobalEvent_Broadcast, Value) == 0x000008, "Member 'IdentificationColorGlobalEvent_Broadcast::Value' has a wrong offset!");

// Function SCT.IdentificationColorGlobalVariable.SetColor
// 0x0018 (0x0018 - 0x0000)
struct IdentificationColorGlobalVariable_SetColor final
{
public:
	class APlayerState*                           PlayerState;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           Color;                                             // 0x0008(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(IdentificationColorGlobalVariable_SetColor) == 0x000008, "Wrong alignment on IdentificationColorGlobalVariable_SetColor");
static_assert(sizeof(IdentificationColorGlobalVariable_SetColor) == 0x000018, "Wrong size on IdentificationColorGlobalVariable_SetColor");
static_assert(offsetof(IdentificationColorGlobalVariable_SetColor, PlayerState) == 0x000000, "Member 'IdentificationColorGlobalVariable_SetColor::PlayerState' has a wrong offset!");
static_assert(offsetof(IdentificationColorGlobalVariable_SetColor, Color) == 0x000008, "Member 'IdentificationColorGlobalVariable_SetColor::Color' has a wrong offset!");

// Function SCT.IdentificationColorGlobalVariable.GetColor
// 0x0018 (0x0018 - 0x0000)
struct IdentificationColorGlobalVariable_GetColor final
{
public:
	class APlayerState*                           PlayerState;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(IdentificationColorGlobalVariable_GetColor) == 0x000008, "Wrong alignment on IdentificationColorGlobalVariable_GetColor");
static_assert(sizeof(IdentificationColorGlobalVariable_GetColor) == 0x000018, "Wrong size on IdentificationColorGlobalVariable_GetColor");
static_assert(offsetof(IdentificationColorGlobalVariable_GetColor, PlayerState) == 0x000000, "Member 'IdentificationColorGlobalVariable_GetColor::PlayerState' has a wrong offset!");
static_assert(offsetof(IdentificationColorGlobalVariable_GetColor, ReturnValue) == 0x000008, "Member 'IdentificationColorGlobalVariable_GetColor::ReturnValue' has a wrong offset!");

// Function SCT.IdentificationColorGlobalVariable.GetColorFromID
// 0x0014 (0x0014 - 0x0000)
struct IdentificationColorGlobalVariable_GetColorFromID final
{
public:
	int32                                         PlayerId;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           ReturnValue;                                       // 0x0004(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(IdentificationColorGlobalVariable_GetColorFromID) == 0x000004, "Wrong alignment on IdentificationColorGlobalVariable_GetColorFromID");
static_assert(sizeof(IdentificationColorGlobalVariable_GetColorFromID) == 0x000014, "Wrong size on IdentificationColorGlobalVariable_GetColorFromID");
static_assert(offsetof(IdentificationColorGlobalVariable_GetColorFromID, PlayerId) == 0x000000, "Member 'IdentificationColorGlobalVariable_GetColorFromID::PlayerId' has a wrong offset!");
static_assert(offsetof(IdentificationColorGlobalVariable_GetColorFromID, ReturnValue) == 0x000004, "Member 'IdentificationColorGlobalVariable_GetColorFromID::ReturnValue' has a wrong offset!");

// Function SCT.FCTCheckConsoleBansCallbackProxy.CheckConsoleBans
// 0x0010 (0x0010 - 0x0000)
struct FCTCheckConsoleBansCallbackProxy_CheckConsoleBans final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFCTCheckConsoleBansCallbackProxy*      ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCTCheckConsoleBansCallbackProxy_CheckConsoleBans) == 0x000008, "Wrong alignment on FCTCheckConsoleBansCallbackProxy_CheckConsoleBans");
static_assert(sizeof(FCTCheckConsoleBansCallbackProxy_CheckConsoleBans) == 0x000010, "Wrong size on FCTCheckConsoleBansCallbackProxy_CheckConsoleBans");
static_assert(offsetof(FCTCheckConsoleBansCallbackProxy_CheckConsoleBans, WorldContextObject) == 0x000000, "Member 'FCTCheckConsoleBansCallbackProxy_CheckConsoleBans::WorldContextObject' has a wrong offset!");
static_assert(offsetof(FCTCheckConsoleBansCallbackProxy_CheckConsoleBans, ReturnValue) == 0x000008, "Member 'FCTCheckConsoleBansCallbackProxy_CheckConsoleBans::ReturnValue' has a wrong offset!");

// Function SCT.InputSettingsActionSubComponent.SetGamepadAction
// 0x0028 (0x0028 - 0x0000)
struct InputSettingsActionSubComponent_SetGamepadAction final
{
public:
	class FName                                   SettingsName;                                      // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FInputChord                            Chord;                                             // 0x0008(0x0020)(Parm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InputSettingsActionSubComponent_SetGamepadAction) == 0x000008, "Wrong alignment on InputSettingsActionSubComponent_SetGamepadAction");
static_assert(sizeof(InputSettingsActionSubComponent_SetGamepadAction) == 0x000028, "Wrong size on InputSettingsActionSubComponent_SetGamepadAction");
static_assert(offsetof(InputSettingsActionSubComponent_SetGamepadAction, SettingsName) == 0x000000, "Member 'InputSettingsActionSubComponent_SetGamepadAction::SettingsName' has a wrong offset!");
static_assert(offsetof(InputSettingsActionSubComponent_SetGamepadAction, Chord) == 0x000008, "Member 'InputSettingsActionSubComponent_SetGamepadAction::Chord' has a wrong offset!");

// Function SCT.InputSettingsActionSubComponent.SetKeyboardAction
// 0x0028 (0x0028 - 0x0000)
struct InputSettingsActionSubComponent_SetKeyboardAction final
{
public:
	class FName                                   SettingsName;                                      // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FInputChord                            Chord;                                             // 0x0008(0x0020)(Parm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InputSettingsActionSubComponent_SetKeyboardAction) == 0x000008, "Wrong alignment on InputSettingsActionSubComponent_SetKeyboardAction");
static_assert(sizeof(InputSettingsActionSubComponent_SetKeyboardAction) == 0x000028, "Wrong size on InputSettingsActionSubComponent_SetKeyboardAction");
static_assert(offsetof(InputSettingsActionSubComponent_SetKeyboardAction, SettingsName) == 0x000000, "Member 'InputSettingsActionSubComponent_SetKeyboardAction::SettingsName' has a wrong offset!");
static_assert(offsetof(InputSettingsActionSubComponent_SetKeyboardAction, Chord) == 0x000008, "Member 'InputSettingsActionSubComponent_SetKeyboardAction::Chord' has a wrong offset!");

// Function SCT.InputSettingsActionSubComponent.GetGamepadAction
// 0x0030 (0x0030 - 0x0000)
struct InputSettingsActionSubComponent_GetGamepadAction final
{
public:
	class FName                                   SettingsName;                                      // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FInputActionKeyMapping                 ReturnValue;                                       // 0x0008(0x0028)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(InputSettingsActionSubComponent_GetGamepadAction) == 0x000008, "Wrong alignment on InputSettingsActionSubComponent_GetGamepadAction");
static_assert(sizeof(InputSettingsActionSubComponent_GetGamepadAction) == 0x000030, "Wrong size on InputSettingsActionSubComponent_GetGamepadAction");
static_assert(offsetof(InputSettingsActionSubComponent_GetGamepadAction, SettingsName) == 0x000000, "Member 'InputSettingsActionSubComponent_GetGamepadAction::SettingsName' has a wrong offset!");
static_assert(offsetof(InputSettingsActionSubComponent_GetGamepadAction, ReturnValue) == 0x000008, "Member 'InputSettingsActionSubComponent_GetGamepadAction::ReturnValue' has a wrong offset!");

// Function SCT.InputSettingsActionSubComponent.GetKeyboardAction
// 0x0030 (0x0030 - 0x0000)
struct InputSettingsActionSubComponent_GetKeyboardAction final
{
public:
	class FName                                   SettingsName;                                      // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FInputActionKeyMapping                 ReturnValue;                                       // 0x0008(0x0028)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(InputSettingsActionSubComponent_GetKeyboardAction) == 0x000008, "Wrong alignment on InputSettingsActionSubComponent_GetKeyboardAction");
static_assert(sizeof(InputSettingsActionSubComponent_GetKeyboardAction) == 0x000030, "Wrong size on InputSettingsActionSubComponent_GetKeyboardAction");
static_assert(offsetof(InputSettingsActionSubComponent_GetKeyboardAction, SettingsName) == 0x000000, "Member 'InputSettingsActionSubComponent_GetKeyboardAction::SettingsName' has a wrong offset!");
static_assert(offsetof(InputSettingsActionSubComponent_GetKeyboardAction, ReturnValue) == 0x000008, "Member 'InputSettingsActionSubComponent_GetKeyboardAction::ReturnValue' has a wrong offset!");

// Function SCT.InputSettingsActionSubComponent.GetRebindableActions
// 0x0010 (0x0010 - 0x0000)
struct InputSettingsActionSubComponent_GetRebindableActions final
{
public:
	TArray<struct FInputInformation>              ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(InputSettingsActionSubComponent_GetRebindableActions) == 0x000008, "Wrong alignment on InputSettingsActionSubComponent_GetRebindableActions");
static_assert(sizeof(InputSettingsActionSubComponent_GetRebindableActions) == 0x000010, "Wrong size on InputSettingsActionSubComponent_GetRebindableActions");
static_assert(offsetof(InputSettingsActionSubComponent_GetRebindableActions, ReturnValue) == 0x000000, "Member 'InputSettingsActionSubComponent_GetRebindableActions::ReturnValue' has a wrong offset!");

// Function SCT.InputSettingsActionSubComponent.IsKeyBound
// 0x0030 (0x0030 - 0x0000)
struct InputSettingsActionSubComponent_IsKeyBound final
{
public:
	class FName                                   Name_0;                                            // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FInputChord                            Key;                                               // 0x0008(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0028(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(InputSettingsActionSubComponent_IsKeyBound) == 0x000008, "Wrong alignment on InputSettingsActionSubComponent_IsKeyBound");
static_assert(sizeof(InputSettingsActionSubComponent_IsKeyBound) == 0x000030, "Wrong size on InputSettingsActionSubComponent_IsKeyBound");
static_assert(offsetof(InputSettingsActionSubComponent_IsKeyBound, Name_0) == 0x000000, "Member 'InputSettingsActionSubComponent_IsKeyBound::Name_0' has a wrong offset!");
static_assert(offsetof(InputSettingsActionSubComponent_IsKeyBound, Key) == 0x000008, "Member 'InputSettingsActionSubComponent_IsKeyBound::Key' has a wrong offset!");
static_assert(offsetof(InputSettingsActionSubComponent_IsKeyBound, ReturnValue) == 0x000028, "Member 'InputSettingsActionSubComponent_IsKeyBound::ReturnValue' has a wrong offset!");

// Function SCT.SetCloudStringDataCallbackProxy.SetCloudRecordValue
// 0x0030 (0x0030 - 0x0000)
struct SetCloudStringDataCallbackProxy_SetCloudRecordValue final
{
public:
	EUserRecordType                               UserRecord;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 FieldName;                                         // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 NewValue;                                          // 0x0018(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USetCloudStringDataCallbackProxy*       ReturnValue;                                       // 0x0028(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SetCloudStringDataCallbackProxy_SetCloudRecordValue) == 0x000008, "Wrong alignment on SetCloudStringDataCallbackProxy_SetCloudRecordValue");
static_assert(sizeof(SetCloudStringDataCallbackProxy_SetCloudRecordValue) == 0x000030, "Wrong size on SetCloudStringDataCallbackProxy_SetCloudRecordValue");
static_assert(offsetof(SetCloudStringDataCallbackProxy_SetCloudRecordValue, UserRecord) == 0x000000, "Member 'SetCloudStringDataCallbackProxy_SetCloudRecordValue::UserRecord' has a wrong offset!");
static_assert(offsetof(SetCloudStringDataCallbackProxy_SetCloudRecordValue, FieldName) == 0x000008, "Member 'SetCloudStringDataCallbackProxy_SetCloudRecordValue::FieldName' has a wrong offset!");
static_assert(offsetof(SetCloudStringDataCallbackProxy_SetCloudRecordValue, NewValue) == 0x000018, "Member 'SetCloudStringDataCallbackProxy_SetCloudRecordValue::NewValue' has a wrong offset!");
static_assert(offsetof(SetCloudStringDataCallbackProxy_SetCloudRecordValue, ReturnValue) == 0x000028, "Member 'SetCloudStringDataCallbackProxy_SetCloudRecordValue::ReturnValue' has a wrong offset!");

// Function SCT.InputSettingsAxesSubComponent.GetInformation
// 0x0058 (0x0058 - 0x0000)
struct InputSettingsAxesSubComponent_GetInformation final
{
public:
	class FName                                   SettingsName;                                      // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FInputInformationAxis                  ReturnValue;                                       // 0x0008(0x0050)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(InputSettingsAxesSubComponent_GetInformation) == 0x000008, "Wrong alignment on InputSettingsAxesSubComponent_GetInformation");
static_assert(sizeof(InputSettingsAxesSubComponent_GetInformation) == 0x000058, "Wrong size on InputSettingsAxesSubComponent_GetInformation");
static_assert(offsetof(InputSettingsAxesSubComponent_GetInformation, SettingsName) == 0x000000, "Member 'InputSettingsAxesSubComponent_GetInformation::SettingsName' has a wrong offset!");
static_assert(offsetof(InputSettingsAxesSubComponent_GetInformation, ReturnValue) == 0x000008, "Member 'InputSettingsAxesSubComponent_GetInformation::ReturnValue' has a wrong offset!");

// Function SCT.InputSettingsAxesSubComponent.GetRebindableAxesKeys
// 0x0010 (0x0010 - 0x0000)
struct InputSettingsAxesSubComponent_GetRebindableAxesKeys final
{
public:
	TArray<class FName>                           ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(InputSettingsAxesSubComponent_GetRebindableAxesKeys) == 0x000008, "Wrong alignment on InputSettingsAxesSubComponent_GetRebindableAxesKeys");
static_assert(sizeof(InputSettingsAxesSubComponent_GetRebindableAxesKeys) == 0x000010, "Wrong size on InputSettingsAxesSubComponent_GetRebindableAxesKeys");
static_assert(offsetof(InputSettingsAxesSubComponent_GetRebindableAxesKeys, ReturnValue) == 0x000000, "Member 'InputSettingsAxesSubComponent_GetRebindableAxesKeys::ReturnValue' has a wrong offset!");

// Function SCT.InputSettingsAxesSubComponent.SetKeyboardAxis
// 0x0028 (0x0028 - 0x0000)
struct InputSettingsAxesSubComponent_SetKeyboardAxis final
{
public:
	class FName                                   SettingsName;                                      // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FInputChord                            Chord;                                             // 0x0008(0x0020)(Parm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InputSettingsAxesSubComponent_SetKeyboardAxis) == 0x000008, "Wrong alignment on InputSettingsAxesSubComponent_SetKeyboardAxis");
static_assert(sizeof(InputSettingsAxesSubComponent_SetKeyboardAxis) == 0x000028, "Wrong size on InputSettingsAxesSubComponent_SetKeyboardAxis");
static_assert(offsetof(InputSettingsAxesSubComponent_SetKeyboardAxis, SettingsName) == 0x000000, "Member 'InputSettingsAxesSubComponent_SetKeyboardAxis::SettingsName' has a wrong offset!");
static_assert(offsetof(InputSettingsAxesSubComponent_SetKeyboardAxis, Chord) == 0x000008, "Member 'InputSettingsAxesSubComponent_SetKeyboardAxis::Chord' has a wrong offset!");

// Function SCT.InputSettingsAxesSubComponent.GetKeyboardAxis
// 0x0030 (0x0030 - 0x0000)
struct InputSettingsAxesSubComponent_GetKeyboardAxis final
{
public:
	class FName                                   SettingsName;                                      // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FInputAxisKeyMapping                   ReturnValue;                                       // 0x0008(0x0028)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(InputSettingsAxesSubComponent_GetKeyboardAxis) == 0x000008, "Wrong alignment on InputSettingsAxesSubComponent_GetKeyboardAxis");
static_assert(sizeof(InputSettingsAxesSubComponent_GetKeyboardAxis) == 0x000030, "Wrong size on InputSettingsAxesSubComponent_GetKeyboardAxis");
static_assert(offsetof(InputSettingsAxesSubComponent_GetKeyboardAxis, SettingsName) == 0x000000, "Member 'InputSettingsAxesSubComponent_GetKeyboardAxis::SettingsName' has a wrong offset!");
static_assert(offsetof(InputSettingsAxesSubComponent_GetKeyboardAxis, ReturnValue) == 0x000008, "Member 'InputSettingsAxesSubComponent_GetKeyboardAxis::ReturnValue' has a wrong offset!");

// Function SCT.InputSettingsAxesSubComponent.IsKeyBound
// 0x0030 (0x0030 - 0x0000)
struct InputSettingsAxesSubComponent_IsKeyBound final
{
public:
	class FName                                   Name_0;                                            // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FInputChord                            Key;                                               // 0x0008(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0028(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(InputSettingsAxesSubComponent_IsKeyBound) == 0x000008, "Wrong alignment on InputSettingsAxesSubComponent_IsKeyBound");
static_assert(sizeof(InputSettingsAxesSubComponent_IsKeyBound) == 0x000030, "Wrong size on InputSettingsAxesSubComponent_IsKeyBound");
static_assert(offsetof(InputSettingsAxesSubComponent_IsKeyBound, Name_0) == 0x000000, "Member 'InputSettingsAxesSubComponent_IsKeyBound::Name_0' has a wrong offset!");
static_assert(offsetof(InputSettingsAxesSubComponent_IsKeyBound, Key) == 0x000008, "Member 'InputSettingsAxesSubComponent_IsKeyBound::Key' has a wrong offset!");
static_assert(offsetof(InputSettingsAxesSubComponent_IsKeyBound, ReturnValue) == 0x000028, "Member 'InputSettingsAxesSubComponent_IsKeyBound::ReturnValue' has a wrong offset!");

// Function SCT.InputSettingsToggleSubComponent.GetRebindableToggleKeys
// 0x0010 (0x0010 - 0x0000)
struct InputSettingsToggleSubComponent_GetRebindableToggleKeys final
{
public:
	TArray<class FName>                           ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(InputSettingsToggleSubComponent_GetRebindableToggleKeys) == 0x000008, "Wrong alignment on InputSettingsToggleSubComponent_GetRebindableToggleKeys");
static_assert(sizeof(InputSettingsToggleSubComponent_GetRebindableToggleKeys) == 0x000010, "Wrong size on InputSettingsToggleSubComponent_GetRebindableToggleKeys");
static_assert(offsetof(InputSettingsToggleSubComponent_GetRebindableToggleKeys, ReturnValue) == 0x000000, "Member 'InputSettingsToggleSubComponent_GetRebindableToggleKeys::ReturnValue' has a wrong offset!");

// Function SCT.InputSettingsToggleSubComponent.SetToggle
// 0x000C (0x000C - 0x0000)
struct InputSettingsToggleSubComponent_SetToggle final
{
public:
	class FName                                   SettingsName;                                      // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Value;                                             // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(InputSettingsToggleSubComponent_SetToggle) == 0x000004, "Wrong alignment on InputSettingsToggleSubComponent_SetToggle");
static_assert(sizeof(InputSettingsToggleSubComponent_SetToggle) == 0x00000C, "Wrong size on InputSettingsToggleSubComponent_SetToggle");
static_assert(offsetof(InputSettingsToggleSubComponent_SetToggle, SettingsName) == 0x000000, "Member 'InputSettingsToggleSubComponent_SetToggle::SettingsName' has a wrong offset!");
static_assert(offsetof(InputSettingsToggleSubComponent_SetToggle, Value) == 0x000008, "Member 'InputSettingsToggleSubComponent_SetToggle::Value' has a wrong offset!");

// Function SCT.InputSettingsToggleSubComponent.GetInformation
// 0x0040 (0x0040 - 0x0000)
struct InputSettingsToggleSubComponent_GetInformation final
{
public:
	class FName                                   SettingsName;                                      // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FInputInformationToggle                ReturnValue;                                       // 0x0008(0x0038)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(InputSettingsToggleSubComponent_GetInformation) == 0x000008, "Wrong alignment on InputSettingsToggleSubComponent_GetInformation");
static_assert(sizeof(InputSettingsToggleSubComponent_GetInformation) == 0x000040, "Wrong size on InputSettingsToggleSubComponent_GetInformation");
static_assert(offsetof(InputSettingsToggleSubComponent_GetInformation, SettingsName) == 0x000000, "Member 'InputSettingsToggleSubComponent_GetInformation::SettingsName' has a wrong offset!");
static_assert(offsetof(InputSettingsToggleSubComponent_GetInformation, ReturnValue) == 0x000008, "Member 'InputSettingsToggleSubComponent_GetInformation::ReturnValue' has a wrong offset!");

// Function SCT.InputSettingsToggleSubComponent.GetToggle
// 0x000C (0x000C - 0x0000)
struct InputSettingsToggleSubComponent_GetToggle final
{
public:
	class FName                                   SettingsName;                                      // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(InputSettingsToggleSubComponent_GetToggle) == 0x000004, "Wrong alignment on InputSettingsToggleSubComponent_GetToggle");
static_assert(sizeof(InputSettingsToggleSubComponent_GetToggle) == 0x00000C, "Wrong size on InputSettingsToggleSubComponent_GetToggle");
static_assert(offsetof(InputSettingsToggleSubComponent_GetToggle, SettingsName) == 0x000000, "Member 'InputSettingsToggleSubComponent_GetToggle::SettingsName' has a wrong offset!");
static_assert(offsetof(InputSettingsToggleSubComponent_GetToggle, ReturnValue) == 0x000008, "Member 'InputSettingsToggleSubComponent_GetToggle::ReturnValue' has a wrong offset!");

// Function SCT.SkillcheckController.ClientCreateSkillcheck
// 0x0008 (0x0008 - 0x0000)
struct SkillcheckController_ClientCreateSkillcheck final
{
public:
	TSubclassOf<class USkillcheckWidget>          WidgetType;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SkillcheckController_ClientCreateSkillcheck) == 0x000008, "Wrong alignment on SkillcheckController_ClientCreateSkillcheck");
static_assert(sizeof(SkillcheckController_ClientCreateSkillcheck) == 0x000008, "Wrong size on SkillcheckController_ClientCreateSkillcheck");
static_assert(offsetof(SkillcheckController_ClientCreateSkillcheck, WidgetType) == 0x000000, "Member 'SkillcheckController_ClientCreateSkillcheck::WidgetType' has a wrong offset!");

// Function SCT.SkillcheckController.ServerRegister
// 0x0008 (0x0008 - 0x0000)
struct SkillcheckController_ServerRegister final
{
public:
	class ASkillcheckManager*                     Manager;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SkillcheckController_ServerRegister) == 0x000008, "Wrong alignment on SkillcheckController_ServerRegister");
static_assert(sizeof(SkillcheckController_ServerRegister) == 0x000008, "Wrong size on SkillcheckController_ServerRegister");
static_assert(offsetof(SkillcheckController_ServerRegister, Manager) == 0x000000, "Member 'SkillcheckController_ServerRegister::Manager' has a wrong offset!");

// Function SCT.SkillcheckController.ServerUnregister
// 0x0008 (0x0008 - 0x0000)
struct SkillcheckController_ServerUnregister final
{
public:
	class ASkillcheckManager*                     Manager;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SkillcheckController_ServerUnregister) == 0x000008, "Wrong alignment on SkillcheckController_ServerUnregister");
static_assert(sizeof(SkillcheckController_ServerUnregister) == 0x000008, "Wrong size on SkillcheckController_ServerUnregister");
static_assert(offsetof(SkillcheckController_ServerUnregister, Manager) == 0x000000, "Member 'SkillcheckController_ServerUnregister::Manager' has a wrong offset!");

// Function SCT.InteractionComponentCosmeticBase.GetInteractionComponent
// 0x0008 (0x0008 - 0x0000)
struct InteractionComponentCosmeticBase_GetInteractionComponent final
{
public:
	class UInteractionComponent*                  ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InteractionComponentCosmeticBase_GetInteractionComponent) == 0x000008, "Wrong alignment on InteractionComponentCosmeticBase_GetInteractionComponent");
static_assert(sizeof(InteractionComponentCosmeticBase_GetInteractionComponent) == 0x000008, "Wrong size on InteractionComponentCosmeticBase_GetInteractionComponent");
static_assert(offsetof(InteractionComponentCosmeticBase_GetInteractionComponent, ReturnValue) == 0x000000, "Member 'InteractionComponentCosmeticBase_GetInteractionComponent::ReturnValue' has a wrong offset!");

// Function SCT.InteractionCoopDispatcher.AddReceiver
// 0x0008 (0x0008 - 0x0000)
struct InteractionCoopDispatcher_AddReceiver final
{
public:
	class UInteractionCoopReceiver*               Receiver_0;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InteractionCoopDispatcher_AddReceiver) == 0x000008, "Wrong alignment on InteractionCoopDispatcher_AddReceiver");
static_assert(sizeof(InteractionCoopDispatcher_AddReceiver) == 0x000008, "Wrong size on InteractionCoopDispatcher_AddReceiver");
static_assert(offsetof(InteractionCoopDispatcher_AddReceiver, Receiver_0) == 0x000000, "Member 'InteractionCoopDispatcher_AddReceiver::Receiver_0' has a wrong offset!");

// Function SCT.InteractionCoopReceiver.K2_DispatcherRegistered
// 0x0008 (0x0008 - 0x0000)
struct InteractionCoopReceiver_K2_DispatcherRegistered final
{
public:
	const class UInteractionCoopDispatcher*       Dispatcher;                                        // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InteractionCoopReceiver_K2_DispatcherRegistered) == 0x000008, "Wrong alignment on InteractionCoopReceiver_K2_DispatcherRegistered");
static_assert(sizeof(InteractionCoopReceiver_K2_DispatcherRegistered) == 0x000008, "Wrong size on InteractionCoopReceiver_K2_DispatcherRegistered");
static_assert(offsetof(InteractionCoopReceiver_K2_DispatcherRegistered, Dispatcher) == 0x000000, "Member 'InteractionCoopReceiver_K2_DispatcherRegistered::Dispatcher' has a wrong offset!");

// Function SCT.InteractionCoopReceiver.K2_DispatcherUnregistered
// 0x0008 (0x0008 - 0x0000)
struct InteractionCoopReceiver_K2_DispatcherUnregistered final
{
public:
	const class UInteractionCoopDispatcher*       Dispatcher;                                        // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InteractionCoopReceiver_K2_DispatcherUnregistered) == 0x000008, "Wrong alignment on InteractionCoopReceiver_K2_DispatcherUnregistered");
static_assert(sizeof(InteractionCoopReceiver_K2_DispatcherUnregistered) == 0x000008, "Wrong size on InteractionCoopReceiver_K2_DispatcherUnregistered");
static_assert(offsetof(InteractionCoopReceiver_K2_DispatcherUnregistered, Dispatcher) == 0x000000, "Member 'InteractionCoopReceiver_K2_DispatcherUnregistered::Dispatcher' has a wrong offset!");

// Function SCT.InteractionCoopReceiver.TrySetState
// 0x0002 (0x0002 - 0x0000)
struct InteractionCoopReceiver_TrySetState final
{
public:
	EInteractionCoopReceiverState                 NewState;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InteractionCoopReceiver_TrySetState) == 0x000001, "Wrong alignment on InteractionCoopReceiver_TrySetState");
static_assert(sizeof(InteractionCoopReceiver_TrySetState) == 0x000002, "Wrong size on InteractionCoopReceiver_TrySetState");
static_assert(offsetof(InteractionCoopReceiver_TrySetState, NewState) == 0x000000, "Member 'InteractionCoopReceiver_TrySetState::NewState' has a wrong offset!");
static_assert(offsetof(InteractionCoopReceiver_TrySetState, ReturnValue) == 0x000001, "Member 'InteractionCoopReceiver_TrySetState::ReturnValue' has a wrong offset!");

// Function SCT.InteractionCoopReceiver.K2_CanChangeState
// 0x0002 (0x0002 - 0x0000)
struct InteractionCoopReceiver_K2_CanChangeState final
{
public:
	EInteractionCoopReceiverState                 RequestedNewState;                                 // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InteractionCoopReceiver_K2_CanChangeState) == 0x000001, "Wrong alignment on InteractionCoopReceiver_K2_CanChangeState");
static_assert(sizeof(InteractionCoopReceiver_K2_CanChangeState) == 0x000002, "Wrong size on InteractionCoopReceiver_K2_CanChangeState");
static_assert(offsetof(InteractionCoopReceiver_K2_CanChangeState, RequestedNewState) == 0x000000, "Member 'InteractionCoopReceiver_K2_CanChangeState::RequestedNewState' has a wrong offset!");
static_assert(offsetof(InteractionCoopReceiver_K2_CanChangeState, ReturnValue) == 0x000001, "Member 'InteractionCoopReceiver_K2_CanChangeState::ReturnValue' has a wrong offset!");

// Function SCT.InteractionSkillcheckExtension.SetManager
// 0x0008 (0x0008 - 0x0000)
struct InteractionSkillcheckExtension_SetManager final
{
public:
	class ASkillcheckManager*                     Manager_0;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InteractionSkillcheckExtension_SetManager) == 0x000008, "Wrong alignment on InteractionSkillcheckExtension_SetManager");
static_assert(sizeof(InteractionSkillcheckExtension_SetManager) == 0x000008, "Wrong size on InteractionSkillcheckExtension_SetManager");
static_assert(offsetof(InteractionSkillcheckExtension_SetManager, Manager_0) == 0x000000, "Member 'InteractionSkillcheckExtension_SetManager::Manager_0' has a wrong offset!");

// Function SCT.InteractionSubComponentInterface.Ended
// 0x0038 (0x0038 - 0x0000)
struct InteractionSubComponentInterface_Ended final
{
public:
	struct FInteractionPayload                    Payload;                                           // 0x0000(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	bool                                          WasCancelled;                                      // 0x0030(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(InteractionSubComponentInterface_Ended) == 0x000008, "Wrong alignment on InteractionSubComponentInterface_Ended");
static_assert(sizeof(InteractionSubComponentInterface_Ended) == 0x000038, "Wrong size on InteractionSubComponentInterface_Ended");
static_assert(offsetof(InteractionSubComponentInterface_Ended, Payload) == 0x000000, "Member 'InteractionSubComponentInterface_Ended::Payload' has a wrong offset!");
static_assert(offsetof(InteractionSubComponentInterface_Ended, WasCancelled) == 0x000030, "Member 'InteractionSubComponentInterface_Ended::WasCancelled' has a wrong offset!");

// Function SCT.InteractionSubComponentInterface.SetInteractionOwner
// 0x0008 (0x0008 - 0x0000)
struct InteractionSubComponentInterface_SetInteractionOwner final
{
public:
	class UInteractionComponent*                  Component;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InteractionSubComponentInterface_SetInteractionOwner) == 0x000008, "Wrong alignment on InteractionSubComponentInterface_SetInteractionOwner");
static_assert(sizeof(InteractionSubComponentInterface_SetInteractionOwner) == 0x000008, "Wrong size on InteractionSubComponentInterface_SetInteractionOwner");
static_assert(offsetof(InteractionSubComponentInterface_SetInteractionOwner, Component) == 0x000000, "Member 'InteractionSubComponentInterface_SetInteractionOwner::Component' has a wrong offset!");

// Function SCT.InteractionSubComponentInterface.Started
// 0x0030 (0x0030 - 0x0000)
struct InteractionSubComponentInterface_Started final
{
public:
	struct FInteractionPayload                    Payload;                                           // 0x0000(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(InteractionSubComponentInterface_Started) == 0x000008, "Wrong alignment on InteractionSubComponentInterface_Started");
static_assert(sizeof(InteractionSubComponentInterface_Started) == 0x000030, "Wrong size on InteractionSubComponentInterface_Started");
static_assert(offsetof(InteractionSubComponentInterface_Started, Payload) == 0x000000, "Member 'InteractionSubComponentInterface_Started::Payload' has a wrong offset!");

// Function SCT.Inventory.AssignToSlot
// 0x0010 (0x0010 - 0x0000)
struct Inventory_AssignToSlot final
{
public:
	class UPower*                                 Power;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EInventorySlotID                              SlotId;                                            // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(Inventory_AssignToSlot) == 0x000008, "Wrong alignment on Inventory_AssignToSlot");
static_assert(sizeof(Inventory_AssignToSlot) == 0x000010, "Wrong size on Inventory_AssignToSlot");
static_assert(offsetof(Inventory_AssignToSlot, Power) == 0x000000, "Member 'Inventory_AssignToSlot::Power' has a wrong offset!");
static_assert(offsetof(Inventory_AssignToSlot, SlotId) == 0x000008, "Member 'Inventory_AssignToSlot::SlotId' has a wrong offset!");

// Function SCT.Inventory.CallOnInventoryChanged
// 0x00E0 (0x00E0 - 0x0000)
struct Inventory_CallOnInventoryChanged final
{
public:
	struct FGameplayAbilitySpec                   Spec;                                              // 0x0000(0x00E0)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(Inventory_CallOnInventoryChanged) == 0x000008, "Wrong alignment on Inventory_CallOnInventoryChanged");
static_assert(sizeof(Inventory_CallOnInventoryChanged) == 0x0000E0, "Wrong size on Inventory_CallOnInventoryChanged");
static_assert(offsetof(Inventory_CallOnInventoryChanged, Spec) == 0x000000, "Member 'Inventory_CallOnInventoryChanged::Spec' has a wrong offset!");

// Function SCT.Inventory.CallOnSlotAssigned
// 0x0010 (0x0010 - 0x0000)
struct Inventory_CallOnSlotAssigned final
{
public:
	class UPower*                                 PowerChanged;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EInventorySlotID                              SlotId;                                            // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(Inventory_CallOnSlotAssigned) == 0x000008, "Wrong alignment on Inventory_CallOnSlotAssigned");
static_assert(sizeof(Inventory_CallOnSlotAssigned) == 0x000010, "Wrong size on Inventory_CallOnSlotAssigned");
static_assert(offsetof(Inventory_CallOnSlotAssigned, PowerChanged) == 0x000000, "Member 'Inventory_CallOnSlotAssigned::PowerChanged' has a wrong offset!");
static_assert(offsetof(Inventory_CallOnSlotAssigned, SlotId) == 0x000008, "Member 'Inventory_CallOnSlotAssigned::SlotId' has a wrong offset!");

// Function SCT.Inventory.CallOnSlotCleared
// 0x0010 (0x0010 - 0x0000)
struct Inventory_CallOnSlotCleared final
{
public:
	class UPower*                                 PowerChanged;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EInventorySlotID                              SlotId;                                            // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(Inventory_CallOnSlotCleared) == 0x000008, "Wrong alignment on Inventory_CallOnSlotCleared");
static_assert(sizeof(Inventory_CallOnSlotCleared) == 0x000010, "Wrong size on Inventory_CallOnSlotCleared");
static_assert(offsetof(Inventory_CallOnSlotCleared, PowerChanged) == 0x000000, "Member 'Inventory_CallOnSlotCleared::PowerChanged' has a wrong offset!");
static_assert(offsetof(Inventory_CallOnSlotCleared, SlotId) == 0x000008, "Member 'Inventory_CallOnSlotCleared::SlotId' has a wrong offset!");

// Function SCT.Inventory.ClearSlot
// 0x0001 (0x0001 - 0x0000)
struct Inventory_ClearSlot final
{
public:
	EInventorySlotID                              SlotId;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Inventory_ClearSlot) == 0x000001, "Wrong alignment on Inventory_ClearSlot");
static_assert(sizeof(Inventory_ClearSlot) == 0x000001, "Wrong size on Inventory_ClearSlot");
static_assert(offsetof(Inventory_ClearSlot, SlotId) == 0x000000, "Member 'Inventory_ClearSlot::SlotId' has a wrong offset!");

// Function SCT.Inventory.ClientOnSlotAssigned
// 0x0010 (0x0010 - 0x0000)
struct Inventory_ClientOnSlotAssigned final
{
public:
	class UPower*                                 PowerChanged;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EInventorySlotID                              SlotId;                                            // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(Inventory_ClientOnSlotAssigned) == 0x000008, "Wrong alignment on Inventory_ClientOnSlotAssigned");
static_assert(sizeof(Inventory_ClientOnSlotAssigned) == 0x000010, "Wrong size on Inventory_ClientOnSlotAssigned");
static_assert(offsetof(Inventory_ClientOnSlotAssigned, PowerChanged) == 0x000000, "Member 'Inventory_ClientOnSlotAssigned::PowerChanged' has a wrong offset!");
static_assert(offsetof(Inventory_ClientOnSlotAssigned, SlotId) == 0x000008, "Member 'Inventory_ClientOnSlotAssigned::SlotId' has a wrong offset!");

// Function SCT.Inventory.ClientOnSlotCleared
// 0x0010 (0x0010 - 0x0000)
struct Inventory_ClientOnSlotCleared final
{
public:
	class UPower*                                 PowerChanged;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EInventorySlotID                              SlotId;                                            // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(Inventory_ClientOnSlotCleared) == 0x000008, "Wrong alignment on Inventory_ClientOnSlotCleared");
static_assert(sizeof(Inventory_ClientOnSlotCleared) == 0x000010, "Wrong size on Inventory_ClientOnSlotCleared");
static_assert(offsetof(Inventory_ClientOnSlotCleared, PowerChanged) == 0x000000, "Member 'Inventory_ClientOnSlotCleared::PowerChanged' has a wrong offset!");
static_assert(offsetof(Inventory_ClientOnSlotCleared, SlotId) == 0x000008, "Member 'Inventory_ClientOnSlotCleared::SlotId' has a wrong offset!");

// Function SCT.Inventory.DropPowerType
// 0x0018 (0x0018 - 0x0000)
struct Inventory_DropPowerType final
{
public:
	TSubclassOf<class UPower>                     PowerType;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                WorldPosition;                                     // 0x0008(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0014(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(Inventory_DropPowerType) == 0x000008, "Wrong alignment on Inventory_DropPowerType");
static_assert(sizeof(Inventory_DropPowerType) == 0x000018, "Wrong size on Inventory_DropPowerType");
static_assert(offsetof(Inventory_DropPowerType, PowerType) == 0x000000, "Member 'Inventory_DropPowerType::PowerType' has a wrong offset!");
static_assert(offsetof(Inventory_DropPowerType, WorldPosition) == 0x000008, "Member 'Inventory_DropPowerType::WorldPosition' has a wrong offset!");
static_assert(offsetof(Inventory_DropPowerType, ReturnValue) == 0x000014, "Member 'Inventory_DropPowerType::ReturnValue' has a wrong offset!");

// Function SCT.Inventory.DropSwapableIfPossible
// 0x0018 (0x0018 - 0x0000)
struct Inventory_DropSwapableIfPossible final
{
public:
	TSubclassOf<class UPower>                     PowerType;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                PickupPosition;                                    // 0x0008(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          TrueIfNone;                                        // 0x0014(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0015(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_16[0x2];                                       // 0x0016(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(Inventory_DropSwapableIfPossible) == 0x000008, "Wrong alignment on Inventory_DropSwapableIfPossible");
static_assert(sizeof(Inventory_DropSwapableIfPossible) == 0x000018, "Wrong size on Inventory_DropSwapableIfPossible");
static_assert(offsetof(Inventory_DropSwapableIfPossible, PowerType) == 0x000000, "Member 'Inventory_DropSwapableIfPossible::PowerType' has a wrong offset!");
static_assert(offsetof(Inventory_DropSwapableIfPossible, PickupPosition) == 0x000008, "Member 'Inventory_DropSwapableIfPossible::PickupPosition' has a wrong offset!");
static_assert(offsetof(Inventory_DropSwapableIfPossible, TrueIfNone) == 0x000014, "Member 'Inventory_DropSwapableIfPossible::TrueIfNone' has a wrong offset!");
static_assert(offsetof(Inventory_DropSwapableIfPossible, ReturnValue) == 0x000015, "Member 'Inventory_DropSwapableIfPossible::ReturnValue' has a wrong offset!");

// Function SCT.Inventory.GetCachedItem
// 0x0010 (0x0010 - 0x0000)
struct Inventory_GetCachedItem final
{
public:
	EInventorySlotID                              SlotId;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class UPower>                     ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Inventory_GetCachedItem) == 0x000008, "Wrong alignment on Inventory_GetCachedItem");
static_assert(sizeof(Inventory_GetCachedItem) == 0x000010, "Wrong size on Inventory_GetCachedItem");
static_assert(offsetof(Inventory_GetCachedItem, SlotId) == 0x000000, "Member 'Inventory_GetCachedItem::SlotId' has a wrong offset!");
static_assert(offsetof(Inventory_GetCachedItem, ReturnValue) == 0x000008, "Member 'Inventory_GetCachedItem::ReturnValue' has a wrong offset!");

// Function SCT.Inventory.OnAbilityGranted
// 0x0008 (0x0008 - 0x0000)
struct Inventory_OnAbilityGranted final
{
public:
	class UPower*                                 Power;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Inventory_OnAbilityGranted) == 0x000008, "Wrong alignment on Inventory_OnAbilityGranted");
static_assert(sizeof(Inventory_OnAbilityGranted) == 0x000008, "Wrong size on Inventory_OnAbilityGranted");
static_assert(offsetof(Inventory_OnAbilityGranted, Power) == 0x000000, "Member 'Inventory_OnAbilityGranted::Power' has a wrong offset!");

// Function SCT.Inventory.OnAbilityRemoved
// 0x00E0 (0x00E0 - 0x0000)
struct Inventory_OnAbilityRemoved final
{
public:
	struct FGameplayAbilitySpec                   AbilitySpec;                                       // 0x0000(0x00E0)(Parm, OutParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(Inventory_OnAbilityRemoved) == 0x000008, "Wrong alignment on Inventory_OnAbilityRemoved");
static_assert(sizeof(Inventory_OnAbilityRemoved) == 0x0000E0, "Wrong size on Inventory_OnAbilityRemoved");
static_assert(offsetof(Inventory_OnAbilityRemoved, AbilitySpec) == 0x000000, "Member 'Inventory_OnAbilityRemoved::AbilitySpec' has a wrong offset!");

// Function SCT.Inventory.RemovePower
// 0x0010 (0x0010 - 0x0000)
struct Inventory_RemovePower final
{
public:
	class UPower*                                 Power;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(Inventory_RemovePower) == 0x000008, "Wrong alignment on Inventory_RemovePower");
static_assert(sizeof(Inventory_RemovePower) == 0x000010, "Wrong size on Inventory_RemovePower");
static_assert(offsetof(Inventory_RemovePower, Power) == 0x000000, "Member 'Inventory_RemovePower::Power' has a wrong offset!");
static_assert(offsetof(Inventory_RemovePower, ReturnValue) == 0x000008, "Member 'Inventory_RemovePower::ReturnValue' has a wrong offset!");

// Function SCT.Inventory.RemovePowerAll
// 0x0010 (0x0010 - 0x0000)
struct Inventory_RemovePowerAll final
{
public:
	class UPower*                                 Power;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(Inventory_RemovePowerAll) == 0x000008, "Wrong alignment on Inventory_RemovePowerAll");
static_assert(sizeof(Inventory_RemovePowerAll) == 0x000010, "Wrong size on Inventory_RemovePowerAll");
static_assert(offsetof(Inventory_RemovePowerAll, Power) == 0x000000, "Member 'Inventory_RemovePowerAll::Power' has a wrong offset!");
static_assert(offsetof(Inventory_RemovePowerAll, ReturnValue) == 0x000008, "Member 'Inventory_RemovePowerAll::ReturnValue' has a wrong offset!");

// Function SCT.Inventory.RemovePowerStacks
// 0x0010 (0x0010 - 0x0000)
struct Inventory_RemovePowerStacks final
{
public:
	class UPower*                                 Power;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         StacksToRemove;                                    // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x000C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(Inventory_RemovePowerStacks) == 0x000008, "Wrong alignment on Inventory_RemovePowerStacks");
static_assert(sizeof(Inventory_RemovePowerStacks) == 0x000010, "Wrong size on Inventory_RemovePowerStacks");
static_assert(offsetof(Inventory_RemovePowerStacks, Power) == 0x000000, "Member 'Inventory_RemovePowerStacks::Power' has a wrong offset!");
static_assert(offsetof(Inventory_RemovePowerStacks, StacksToRemove) == 0x000008, "Member 'Inventory_RemovePowerStacks::StacksToRemove' has a wrong offset!");
static_assert(offsetof(Inventory_RemovePowerStacks, ReturnValue) == 0x00000C, "Member 'Inventory_RemovePowerStacks::ReturnValue' has a wrong offset!");

// Function SCT.Inventory.RemovePowerType
// 0x0010 (0x0010 - 0x0000)
struct Inventory_RemovePowerType final
{
public:
	TSubclassOf<class UPower>                     PowerType;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(Inventory_RemovePowerType) == 0x000008, "Wrong alignment on Inventory_RemovePowerType");
static_assert(sizeof(Inventory_RemovePowerType) == 0x000010, "Wrong size on Inventory_RemovePowerType");
static_assert(offsetof(Inventory_RemovePowerType, PowerType) == 0x000000, "Member 'Inventory_RemovePowerType::PowerType' has a wrong offset!");
static_assert(offsetof(Inventory_RemovePowerType, ReturnValue) == 0x000008, "Member 'Inventory_RemovePowerType::ReturnValue' has a wrong offset!");

// Function SCT.Inventory.RemovePowerTypeAll
// 0x0010 (0x0010 - 0x0000)
struct Inventory_RemovePowerTypeAll final
{
public:
	TSubclassOf<class UPower>                     PowerType;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(Inventory_RemovePowerTypeAll) == 0x000008, "Wrong alignment on Inventory_RemovePowerTypeAll");
static_assert(sizeof(Inventory_RemovePowerTypeAll) == 0x000010, "Wrong size on Inventory_RemovePowerTypeAll");
static_assert(offsetof(Inventory_RemovePowerTypeAll, PowerType) == 0x000000, "Member 'Inventory_RemovePowerTypeAll::PowerType' has a wrong offset!");
static_assert(offsetof(Inventory_RemovePowerTypeAll, ReturnValue) == 0x000008, "Member 'Inventory_RemovePowerTypeAll::ReturnValue' has a wrong offset!");

// Function SCT.Inventory.RemovePowerTypeStacks
// 0x0010 (0x0010 - 0x0000)
struct Inventory_RemovePowerTypeStacks final
{
public:
	TSubclassOf<class UPower>                     PowerType;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         StacksToRemove;                                    // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x000C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(Inventory_RemovePowerTypeStacks) == 0x000008, "Wrong alignment on Inventory_RemovePowerTypeStacks");
static_assert(sizeof(Inventory_RemovePowerTypeStacks) == 0x000010, "Wrong size on Inventory_RemovePowerTypeStacks");
static_assert(offsetof(Inventory_RemovePowerTypeStacks, PowerType) == 0x000000, "Member 'Inventory_RemovePowerTypeStacks::PowerType' has a wrong offset!");
static_assert(offsetof(Inventory_RemovePowerTypeStacks, StacksToRemove) == 0x000008, "Member 'Inventory_RemovePowerTypeStacks::StacksToRemove' has a wrong offset!");
static_assert(offsetof(Inventory_RemovePowerTypeStacks, ReturnValue) == 0x00000C, "Member 'Inventory_RemovePowerTypeStacks::ReturnValue' has a wrong offset!");

// Function SCT.Inventory.TryAddPower
// 0x0020 (0x0020 - 0x0000)
struct Inventory_TryAddPower final
{
public:
	TSubclassOf<class UPower>                     PowerType;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         StacksToAdd;                                       // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FPowerRuntimeData                      RuntimeData;                                       // 0x000C(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	int32                                         InputID;                                           // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(Inventory_TryAddPower) == 0x000008, "Wrong alignment on Inventory_TryAddPower");
static_assert(sizeof(Inventory_TryAddPower) == 0x000020, "Wrong size on Inventory_TryAddPower");
static_assert(offsetof(Inventory_TryAddPower, PowerType) == 0x000000, "Member 'Inventory_TryAddPower::PowerType' has a wrong offset!");
static_assert(offsetof(Inventory_TryAddPower, StacksToAdd) == 0x000008, "Member 'Inventory_TryAddPower::StacksToAdd' has a wrong offset!");
static_assert(offsetof(Inventory_TryAddPower, RuntimeData) == 0x00000C, "Member 'Inventory_TryAddPower::RuntimeData' has a wrong offset!");
static_assert(offsetof(Inventory_TryAddPower, InputID) == 0x000014, "Member 'Inventory_TryAddPower::InputID' has a wrong offset!");
static_assert(offsetof(Inventory_TryAddPower, ReturnValue) == 0x000018, "Member 'Inventory_TryAddPower::ReturnValue' has a wrong offset!");

// Function SCT.Inventory.TrySwapPower
// 0x0028 (0x0028 - 0x0000)
struct Inventory_TrySwapPower final
{
public:
	TSubclassOf<class UPower>                     PowerType;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         StacksToAdd;                                       // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                PickupPosition;                                    // 0x000C(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FPowerRuntimeData                      RuntimeData;                                       // 0x0018(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(Inventory_TrySwapPower) == 0x000008, "Wrong alignment on Inventory_TrySwapPower");
static_assert(sizeof(Inventory_TrySwapPower) == 0x000028, "Wrong size on Inventory_TrySwapPower");
static_assert(offsetof(Inventory_TrySwapPower, PowerType) == 0x000000, "Member 'Inventory_TrySwapPower::PowerType' has a wrong offset!");
static_assert(offsetof(Inventory_TrySwapPower, StacksToAdd) == 0x000008, "Member 'Inventory_TrySwapPower::StacksToAdd' has a wrong offset!");
static_assert(offsetof(Inventory_TrySwapPower, PickupPosition) == 0x00000C, "Member 'Inventory_TrySwapPower::PickupPosition' has a wrong offset!");
static_assert(offsetof(Inventory_TrySwapPower, RuntimeData) == 0x000018, "Member 'Inventory_TrySwapPower::RuntimeData' has a wrong offset!");
static_assert(offsetof(Inventory_TrySwapPower, ReturnValue) == 0x000020, "Member 'Inventory_TrySwapPower::ReturnValue' has a wrong offset!");

// Function SCT.Inventory.CanAddPower
// 0x0010 (0x0010 - 0x0000)
struct Inventory_CanAddPower final
{
public:
	TSubclassOf<class UPower>                     PowerType;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Stacks;                                            // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x000C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(Inventory_CanAddPower) == 0x000008, "Wrong alignment on Inventory_CanAddPower");
static_assert(sizeof(Inventory_CanAddPower) == 0x000010, "Wrong size on Inventory_CanAddPower");
static_assert(offsetof(Inventory_CanAddPower, PowerType) == 0x000000, "Member 'Inventory_CanAddPower::PowerType' has a wrong offset!");
static_assert(offsetof(Inventory_CanAddPower, Stacks) == 0x000008, "Member 'Inventory_CanAddPower::Stacks' has a wrong offset!");
static_assert(offsetof(Inventory_CanAddPower, ReturnValue) == 0x00000C, "Member 'Inventory_CanAddPower::ReturnValue' has a wrong offset!");

// Function SCT.Inventory.CanPickupUniqueItem
// 0x0010 (0x0010 - 0x0000)
struct Inventory_CanPickupUniqueItem final
{
public:
	TSubclassOf<class UPower>                     Power;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(Inventory_CanPickupUniqueItem) == 0x000008, "Wrong alignment on Inventory_CanPickupUniqueItem");
static_assert(sizeof(Inventory_CanPickupUniqueItem) == 0x000010, "Wrong size on Inventory_CanPickupUniqueItem");
static_assert(offsetof(Inventory_CanPickupUniqueItem, Power) == 0x000000, "Member 'Inventory_CanPickupUniqueItem::Power' has a wrong offset!");
static_assert(offsetof(Inventory_CanPickupUniqueItem, ReturnValue) == 0x000008, "Member 'Inventory_CanPickupUniqueItem::ReturnValue' has a wrong offset!");

// Function SCT.Inventory.ContainsPower
// 0x0010 (0x0010 - 0x0000)
struct Inventory_ContainsPower final
{
public:
	const class UPower*                           Power;                                             // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(Inventory_ContainsPower) == 0x000008, "Wrong alignment on Inventory_ContainsPower");
static_assert(sizeof(Inventory_ContainsPower) == 0x000010, "Wrong size on Inventory_ContainsPower");
static_assert(offsetof(Inventory_ContainsPower, Power) == 0x000000, "Member 'Inventory_ContainsPower::Power' has a wrong offset!");
static_assert(offsetof(Inventory_ContainsPower, ReturnValue) == 0x000008, "Member 'Inventory_ContainsPower::ReturnValue' has a wrong offset!");

// Function SCT.Inventory.ContainsPowerType
// 0x0010 (0x0010 - 0x0000)
struct Inventory_ContainsPowerType final
{
public:
	TSubclassOf<class UPower>                     PowerType;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(Inventory_ContainsPowerType) == 0x000008, "Wrong alignment on Inventory_ContainsPowerType");
static_assert(sizeof(Inventory_ContainsPowerType) == 0x000010, "Wrong size on Inventory_ContainsPowerType");
static_assert(offsetof(Inventory_ContainsPowerType, PowerType) == 0x000000, "Member 'Inventory_ContainsPowerType::PowerType' has a wrong offset!");
static_assert(offsetof(Inventory_ContainsPowerType, ReturnValue) == 0x000008, "Member 'Inventory_ContainsPowerType::ReturnValue' has a wrong offset!");

// Function SCT.Inventory.GetAllItems
// 0x0010 (0x0010 - 0x0000)
struct Inventory_GetAllItems final
{
public:
	TArray<struct FItemDetails>                   ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(Inventory_GetAllItems) == 0x000008, "Wrong alignment on Inventory_GetAllItems");
static_assert(sizeof(Inventory_GetAllItems) == 0x000010, "Wrong size on Inventory_GetAllItems");
static_assert(offsetof(Inventory_GetAllItems, ReturnValue) == 0x000000, "Member 'Inventory_GetAllItems::ReturnValue' has a wrong offset!");

// Function SCT.Inventory.GetAllPowers
// 0x0010 (0x0010 - 0x0000)
struct Inventory_GetAllPowers final
{
public:
	TArray<struct FPowerDetails>                  ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(Inventory_GetAllPowers) == 0x000008, "Wrong alignment on Inventory_GetAllPowers");
static_assert(sizeof(Inventory_GetAllPowers) == 0x000010, "Wrong size on Inventory_GetAllPowers");
static_assert(offsetof(Inventory_GetAllPowers, ReturnValue) == 0x000000, "Member 'Inventory_GetAllPowers::ReturnValue' has a wrong offset!");

// Function SCT.Inventory.GetAllSkills
// 0x0010 (0x0010 - 0x0000)
struct Inventory_GetAllSkills final
{
public:
	TArray<struct FSkillDetails>                  ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(Inventory_GetAllSkills) == 0x000008, "Wrong alignment on Inventory_GetAllSkills");
static_assert(sizeof(Inventory_GetAllSkills) == 0x000010, "Wrong size on Inventory_GetAllSkills");
static_assert(offsetof(Inventory_GetAllSkills, ReturnValue) == 0x000000, "Member 'Inventory_GetAllSkills::ReturnValue' has a wrong offset!");

// Function SCT.Inventory.GetCount
// 0x0004 (0x0004 - 0x0000)
struct Inventory_GetCount final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Inventory_GetCount) == 0x000004, "Wrong alignment on Inventory_GetCount");
static_assert(sizeof(Inventory_GetCount) == 0x000004, "Wrong size on Inventory_GetCount");
static_assert(offsetof(Inventory_GetCount, ReturnValue) == 0x000000, "Member 'Inventory_GetCount::ReturnValue' has a wrong offset!");

// Function SCT.Inventory.HasCachedItem
// 0x0002 (0x0002 - 0x0000)
struct Inventory_HasCachedItem final
{
public:
	EInventorySlotID                              SlotId;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Inventory_HasCachedItem) == 0x000001, "Wrong alignment on Inventory_HasCachedItem");
static_assert(sizeof(Inventory_HasCachedItem) == 0x000002, "Wrong size on Inventory_HasCachedItem");
static_assert(offsetof(Inventory_HasCachedItem, SlotId) == 0x000000, "Member 'Inventory_HasCachedItem::SlotId' has a wrong offset!");
static_assert(offsetof(Inventory_HasCachedItem, ReturnValue) == 0x000001, "Member 'Inventory_HasCachedItem::ReturnValue' has a wrong offset!");

// Function SCT.Inventory.HasUniqueItem
// 0x0001 (0x0001 - 0x0000)
struct Inventory_HasUniqueItem final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Inventory_HasUniqueItem) == 0x000001, "Wrong alignment on Inventory_HasUniqueItem");
static_assert(sizeof(Inventory_HasUniqueItem) == 0x000001, "Wrong size on Inventory_HasUniqueItem");
static_assert(offsetof(Inventory_HasUniqueItem, ReturnValue) == 0x000000, "Member 'Inventory_HasUniqueItem::ReturnValue' has a wrong offset!");

// Function SCT.Inventory.IsUniqueItem
// 0x0010 (0x0010 - 0x0000)
struct Inventory_IsUniqueItem final
{
public:
	TSubclassOf<class UPower>                     Power;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(Inventory_IsUniqueItem) == 0x000008, "Wrong alignment on Inventory_IsUniqueItem");
static_assert(sizeof(Inventory_IsUniqueItem) == 0x000010, "Wrong size on Inventory_IsUniqueItem");
static_assert(offsetof(Inventory_IsUniqueItem, Power) == 0x000000, "Member 'Inventory_IsUniqueItem::Power' has a wrong offset!");
static_assert(offsetof(Inventory_IsUniqueItem, ReturnValue) == 0x000008, "Member 'Inventory_IsUniqueItem::ReturnValue' has a wrong offset!");

// Function SCT.Inventory.TryGetPowerFromType
// 0x0010 (0x0010 - 0x0000)
struct Inventory_TryGetPowerFromType final
{
public:
	TSubclassOf<class UPower>                     PowerType;                                         // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPower*                                 ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Inventory_TryGetPowerFromType) == 0x000008, "Wrong alignment on Inventory_TryGetPowerFromType");
static_assert(sizeof(Inventory_TryGetPowerFromType) == 0x000010, "Wrong size on Inventory_TryGetPowerFromType");
static_assert(offsetof(Inventory_TryGetPowerFromType, PowerType) == 0x000000, "Member 'Inventory_TryGetPowerFromType::PowerType' has a wrong offset!");
static_assert(offsetof(Inventory_TryGetPowerFromType, ReturnValue) == 0x000008, "Member 'Inventory_TryGetPowerFromType::ReturnValue' has a wrong offset!");

// Function SCT.Inventory.TryGetPowerInSlot
// 0x0010 (0x0010 - 0x0000)
struct Inventory_TryGetPowerInSlot final
{
public:
	EInventorySlotID                              SlotId;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UPower*                                 ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Inventory_TryGetPowerInSlot) == 0x000008, "Wrong alignment on Inventory_TryGetPowerInSlot");
static_assert(sizeof(Inventory_TryGetPowerInSlot) == 0x000010, "Wrong size on Inventory_TryGetPowerInSlot");
static_assert(offsetof(Inventory_TryGetPowerInSlot, SlotId) == 0x000000, "Member 'Inventory_TryGetPowerInSlot::SlotId' has a wrong offset!");
static_assert(offsetof(Inventory_TryGetPowerInSlot, ReturnValue) == 0x000008, "Member 'Inventory_TryGetPowerInSlot::ReturnValue' has a wrong offset!");

// Function SCT.SymbolPuzzleComponent.AssignSeed
// 0x0004 (0x0004 - 0x0000)
struct SymbolPuzzleComponent_AssignSeed final
{
public:
	int32                                         Seed;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SymbolPuzzleComponent_AssignSeed) == 0x000004, "Wrong alignment on SymbolPuzzleComponent_AssignSeed");
static_assert(sizeof(SymbolPuzzleComponent_AssignSeed) == 0x000004, "Wrong size on SymbolPuzzleComponent_AssignSeed");
static_assert(offsetof(SymbolPuzzleComponent_AssignSeed, Seed) == 0x000000, "Member 'SymbolPuzzleComponent_AssignSeed::Seed' has a wrong offset!");

// Function SCT.SymbolPuzzleComponent.OnWidgetSymbolSelected
// 0x0004 (0x0004 - 0x0000)
struct SymbolPuzzleComponent_OnWidgetSymbolSelected final
{
public:
	int32                                         Index_0;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SymbolPuzzleComponent_OnWidgetSymbolSelected) == 0x000004, "Wrong alignment on SymbolPuzzleComponent_OnWidgetSymbolSelected");
static_assert(sizeof(SymbolPuzzleComponent_OnWidgetSymbolSelected) == 0x000004, "Wrong size on SymbolPuzzleComponent_OnWidgetSymbolSelected");
static_assert(offsetof(SymbolPuzzleComponent_OnWidgetSymbolSelected, Index_0) == 0x000000, "Member 'SymbolPuzzleComponent_OnWidgetSymbolSelected::Index_0' has a wrong offset!");

// Function SCT.SymbolPuzzleComponent.ServerSelectedSymbol
// 0x0004 (0x0004 - 0x0000)
struct SymbolPuzzleComponent_ServerSelectedSymbol final
{
public:
	int32                                         Index_0;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SymbolPuzzleComponent_ServerSelectedSymbol) == 0x000004, "Wrong alignment on SymbolPuzzleComponent_ServerSelectedSymbol");
static_assert(sizeof(SymbolPuzzleComponent_ServerSelectedSymbol) == 0x000004, "Wrong size on SymbolPuzzleComponent_ServerSelectedSymbol");
static_assert(offsetof(SymbolPuzzleComponent_ServerSelectedSymbol, Index_0) == 0x000000, "Member 'SymbolPuzzleComponent_ServerSelectedSymbol::Index_0' has a wrong offset!");

// Function SCT.SymbolPuzzleComponent.ToggleUI
// 0x0001 (0x0001 - 0x0000)
struct SymbolPuzzleComponent_ToggleUI final
{
public:
	bool                                          Toggle;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SymbolPuzzleComponent_ToggleUI) == 0x000001, "Wrong alignment on SymbolPuzzleComponent_ToggleUI");
static_assert(sizeof(SymbolPuzzleComponent_ToggleUI) == 0x000001, "Wrong size on SymbolPuzzleComponent_ToggleUI");
static_assert(offsetof(SymbolPuzzleComponent_ToggleUI, Toggle) == 0x000000, "Member 'SymbolPuzzleComponent_ToggleUI::Toggle' has a wrong offset!");

// Function SCT.SymbolPuzzleComponent.GetPuzzleWidget
// 0x0008 (0x0008 - 0x0000)
struct SymbolPuzzleComponent_GetPuzzleWidget final
{
public:
	class USymbolPuzzleWidget*                    ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SymbolPuzzleComponent_GetPuzzleWidget) == 0x000008, "Wrong alignment on SymbolPuzzleComponent_GetPuzzleWidget");
static_assert(sizeof(SymbolPuzzleComponent_GetPuzzleWidget) == 0x000008, "Wrong size on SymbolPuzzleComponent_GetPuzzleWidget");
static_assert(offsetof(SymbolPuzzleComponent_GetPuzzleWidget, ReturnValue) == 0x000000, "Member 'SymbolPuzzleComponent_GetPuzzleWidget::ReturnValue' has a wrong offset!");

// Function SCT.LevelVoteComponent.VoteOnLevel
// 0x0004 (0x0004 - 0x0000)
struct LevelVoteComponent_VoteOnLevel final
{
public:
	int32                                         LevelIndex;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LevelVoteComponent_VoteOnLevel) == 0x000004, "Wrong alignment on LevelVoteComponent_VoteOnLevel");
static_assert(sizeof(LevelVoteComponent_VoteOnLevel) == 0x000004, "Wrong size on LevelVoteComponent_VoteOnLevel");
static_assert(offsetof(LevelVoteComponent_VoteOnLevel, LevelIndex) == 0x000000, "Member 'LevelVoteComponent_VoteOnLevel::LevelIndex' has a wrong offset!");

// Function SCT.XboxGameSessionControllerGIS.ClientCreateGameSessionReservation
// 0x0030 (0x0030 - 0x0000)
struct XboxGameSessionControllerGIS_ClientCreateGameSessionReservation final
{
public:
	class APlayerController*                      PlayerController;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 GameSessionID;                                     // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FMatchEndData                          MatchEndData;                                      // 0x0018(0x0018)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(XboxGameSessionControllerGIS_ClientCreateGameSessionReservation) == 0x000008, "Wrong alignment on XboxGameSessionControllerGIS_ClientCreateGameSessionReservation");
static_assert(sizeof(XboxGameSessionControllerGIS_ClientCreateGameSessionReservation) == 0x000030, "Wrong size on XboxGameSessionControllerGIS_ClientCreateGameSessionReservation");
static_assert(offsetof(XboxGameSessionControllerGIS_ClientCreateGameSessionReservation, PlayerController) == 0x000000, "Member 'XboxGameSessionControllerGIS_ClientCreateGameSessionReservation::PlayerController' has a wrong offset!");
static_assert(offsetof(XboxGameSessionControllerGIS_ClientCreateGameSessionReservation, GameSessionID) == 0x000008, "Member 'XboxGameSessionControllerGIS_ClientCreateGameSessionReservation::GameSessionID' has a wrong offset!");
static_assert(offsetof(XboxGameSessionControllerGIS_ClientCreateGameSessionReservation, MatchEndData) == 0x000018, "Member 'XboxGameSessionControllerGIS_ClientCreateGameSessionReservation::MatchEndData' has a wrong offset!");

// Function SCT.XboxGameSessionControllerGIS.ClientCreateNewGameSession
// 0x0008 (0x0008 - 0x0000)
struct XboxGameSessionControllerGIS_ClientCreateNewGameSession final
{
public:
	class APlayerController*                      PlayerController;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(XboxGameSessionControllerGIS_ClientCreateNewGameSession) == 0x000008, "Wrong alignment on XboxGameSessionControllerGIS_ClientCreateNewGameSession");
static_assert(sizeof(XboxGameSessionControllerGIS_ClientCreateNewGameSession) == 0x000008, "Wrong size on XboxGameSessionControllerGIS_ClientCreateNewGameSession");
static_assert(offsetof(XboxGameSessionControllerGIS_ClientCreateNewGameSession, PlayerController) == 0x000000, "Member 'XboxGameSessionControllerGIS_ClientCreateNewGameSession::PlayerController' has a wrong offset!");

// Function SCT.XboxGameSessionControllerGIS.ClientFinishGameSession
// 0x0018 (0x0018 - 0x0000)
struct XboxGameSessionControllerGIS_ClientFinishGameSession final
{
public:
	class APlayerController*                      PlayerController;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 GameSessionID;                                     // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(XboxGameSessionControllerGIS_ClientFinishGameSession) == 0x000008, "Wrong alignment on XboxGameSessionControllerGIS_ClientFinishGameSession");
static_assert(sizeof(XboxGameSessionControllerGIS_ClientFinishGameSession) == 0x000018, "Wrong size on XboxGameSessionControllerGIS_ClientFinishGameSession");
static_assert(offsetof(XboxGameSessionControllerGIS_ClientFinishGameSession, PlayerController) == 0x000000, "Member 'XboxGameSessionControllerGIS_ClientFinishGameSession::PlayerController' has a wrong offset!");
static_assert(offsetof(XboxGameSessionControllerGIS_ClientFinishGameSession, GameSessionID) == 0x000008, "Member 'XboxGameSessionControllerGIS_ClientFinishGameSession::GameSessionID' has a wrong offset!");

// Function SCT.XboxGameSessionControllerGIS.ClientHasGameSession
// 0x0001 (0x0001 - 0x0000)
struct XboxGameSessionControllerGIS_ClientHasGameSession final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(XboxGameSessionControllerGIS_ClientHasGameSession) == 0x000001, "Wrong alignment on XboxGameSessionControllerGIS_ClientHasGameSession");
static_assert(sizeof(XboxGameSessionControllerGIS_ClientHasGameSession) == 0x000001, "Wrong size on XboxGameSessionControllerGIS_ClientHasGameSession");
static_assert(offsetof(XboxGameSessionControllerGIS_ClientHasGameSession, ReturnValue) == 0x000000, "Member 'XboxGameSessionControllerGIS_ClientHasGameSession::ReturnValue' has a wrong offset!");

// Function SCT.XboxGameSessionControllerGIS.ClientJoinGameSession
// 0x0018 (0x0018 - 0x0000)
struct XboxGameSessionControllerGIS_ClientJoinGameSession final
{
public:
	class APlayerController*                      PlayerController;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 GameSessionID;                                     // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(XboxGameSessionControllerGIS_ClientJoinGameSession) == 0x000008, "Wrong alignment on XboxGameSessionControllerGIS_ClientJoinGameSession");
static_assert(sizeof(XboxGameSessionControllerGIS_ClientJoinGameSession) == 0x000018, "Wrong size on XboxGameSessionControllerGIS_ClientJoinGameSession");
static_assert(offsetof(XboxGameSessionControllerGIS_ClientJoinGameSession, PlayerController) == 0x000000, "Member 'XboxGameSessionControllerGIS_ClientJoinGameSession::PlayerController' has a wrong offset!");
static_assert(offsetof(XboxGameSessionControllerGIS_ClientJoinGameSession, GameSessionID) == 0x000008, "Member 'XboxGameSessionControllerGIS_ClientJoinGameSession::GameSessionID' has a wrong offset!");

// Function SCT.XboxGameSessionControllerGIS.ClientLeaveGameSession
// 0x0008 (0x0008 - 0x0000)
struct XboxGameSessionControllerGIS_ClientLeaveGameSession final
{
public:
	class APlayerController*                      PlayerController;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(XboxGameSessionControllerGIS_ClientLeaveGameSession) == 0x000008, "Wrong alignment on XboxGameSessionControllerGIS_ClientLeaveGameSession");
static_assert(sizeof(XboxGameSessionControllerGIS_ClientLeaveGameSession) == 0x000008, "Wrong size on XboxGameSessionControllerGIS_ClientLeaveGameSession");
static_assert(offsetof(XboxGameSessionControllerGIS_ClientLeaveGameSession, PlayerController) == 0x000000, "Member 'XboxGameSessionControllerGIS_ClientLeaveGameSession::PlayerController' has a wrong offset!");

// Function SCT.XboxGameSessionControllerGIS.ClientReceiveServerClientStateData
// 0x0020 (0x0020 - 0x0000)
struct XboxGameSessionControllerGIS_ClientReceiveServerClientStateData final
{
public:
	struct FXboxGameSessionControllerClientStateData XboxGameSessionControllerClientStateData;          // 0x0000(0x0020)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(XboxGameSessionControllerGIS_ClientReceiveServerClientStateData) == 0x000008, "Wrong alignment on XboxGameSessionControllerGIS_ClientReceiveServerClientStateData");
static_assert(sizeof(XboxGameSessionControllerGIS_ClientReceiveServerClientStateData) == 0x000020, "Wrong size on XboxGameSessionControllerGIS_ClientReceiveServerClientStateData");
static_assert(offsetof(XboxGameSessionControllerGIS_ClientReceiveServerClientStateData, XboxGameSessionControllerClientStateData) == 0x000000, "Member 'XboxGameSessionControllerGIS_ClientReceiveServerClientStateData::XboxGameSessionControllerClientStateData' has a wrong offset!");

// Function SCT.XboxGameSessionControllerGIS.RunClientCommand
// 0x0040 (0x0040 - 0x0000)
struct XboxGameSessionControllerGIS_RunClientCommand final
{
public:
	class APlayerController*                      PlayerController;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EXboxGameSessionClientCommand                 ClientCommand;                                     // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FXboxGameSessionCommandData            CommandData;                                       // 0x0010(0x0030)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(XboxGameSessionControllerGIS_RunClientCommand) == 0x000008, "Wrong alignment on XboxGameSessionControllerGIS_RunClientCommand");
static_assert(sizeof(XboxGameSessionControllerGIS_RunClientCommand) == 0x000040, "Wrong size on XboxGameSessionControllerGIS_RunClientCommand");
static_assert(offsetof(XboxGameSessionControllerGIS_RunClientCommand, PlayerController) == 0x000000, "Member 'XboxGameSessionControllerGIS_RunClientCommand::PlayerController' has a wrong offset!");
static_assert(offsetof(XboxGameSessionControllerGIS_RunClientCommand, ClientCommand) == 0x000008, "Member 'XboxGameSessionControllerGIS_RunClientCommand::ClientCommand' has a wrong offset!");
static_assert(offsetof(XboxGameSessionControllerGIS_RunClientCommand, CommandData) == 0x000010, "Member 'XboxGameSessionControllerGIS_RunClientCommand::CommandData' has a wrong offset!");

// Function SCT.XboxGameSessionControllerGIS.ServerClientJoinGameSession
// 0x0008 (0x0008 - 0x0000)
struct XboxGameSessionControllerGIS_ServerClientJoinGameSession final
{
public:
	class APlayerController*                      PlayerController;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(XboxGameSessionControllerGIS_ServerClientJoinGameSession) == 0x000008, "Wrong alignment on XboxGameSessionControllerGIS_ServerClientJoinGameSession");
static_assert(sizeof(XboxGameSessionControllerGIS_ServerClientJoinGameSession) == 0x000008, "Wrong size on XboxGameSessionControllerGIS_ServerClientJoinGameSession");
static_assert(offsetof(XboxGameSessionControllerGIS_ServerClientJoinGameSession, PlayerController) == 0x000000, "Member 'XboxGameSessionControllerGIS_ServerClientJoinGameSession::PlayerController' has a wrong offset!");

// Function SCT.XboxGameSessionControllerGIS.ServerEndGameSession
// 0x0018 (0x0018 - 0x0000)
struct XboxGameSessionControllerGIS_ServerEndGameSession final
{
public:
	struct FMatchEndData                          MatchEndData;                                      // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(XboxGameSessionControllerGIS_ServerEndGameSession) == 0x000008, "Wrong alignment on XboxGameSessionControllerGIS_ServerEndGameSession");
static_assert(sizeof(XboxGameSessionControllerGIS_ServerEndGameSession) == 0x000018, "Wrong size on XboxGameSessionControllerGIS_ServerEndGameSession");
static_assert(offsetof(XboxGameSessionControllerGIS_ServerEndGameSession, MatchEndData) == 0x000000, "Member 'XboxGameSessionControllerGIS_ServerEndGameSession::MatchEndData' has a wrong offset!");

// Function SCT.XboxGameSessionControllerGIS.ServerProcessCommandResult
// 0x0040 (0x0040 - 0x0000)
struct XboxGameSessionControllerGIS_ServerProcessCommandResult final
{
public:
	class APlayerController*                      PlayerController;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EXboxGameSessionServerCommandResult           CommandResult;                                     // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FXboxGameSessionCommandData            CommandData;                                       // 0x0010(0x0030)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(XboxGameSessionControllerGIS_ServerProcessCommandResult) == 0x000008, "Wrong alignment on XboxGameSessionControllerGIS_ServerProcessCommandResult");
static_assert(sizeof(XboxGameSessionControllerGIS_ServerProcessCommandResult) == 0x000040, "Wrong size on XboxGameSessionControllerGIS_ServerProcessCommandResult");
static_assert(offsetof(XboxGameSessionControllerGIS_ServerProcessCommandResult, PlayerController) == 0x000000, "Member 'XboxGameSessionControllerGIS_ServerProcessCommandResult::PlayerController' has a wrong offset!");
static_assert(offsetof(XboxGameSessionControllerGIS_ServerProcessCommandResult, CommandResult) == 0x000008, "Member 'XboxGameSessionControllerGIS_ServerProcessCommandResult::CommandResult' has a wrong offset!");
static_assert(offsetof(XboxGameSessionControllerGIS_ServerProcessCommandResult, CommandData) == 0x000010, "Member 'XboxGameSessionControllerGIS_ServerProcessCommandResult::CommandData' has a wrong offset!");

// Function SCT.XboxGameSessionControllerGIS.ServerRemoveClient
// 0x0008 (0x0008 - 0x0000)
struct XboxGameSessionControllerGIS_ServerRemoveClient final
{
public:
	class APlayerController*                      PlayerController;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(XboxGameSessionControllerGIS_ServerRemoveClient) == 0x000008, "Wrong alignment on XboxGameSessionControllerGIS_ServerRemoveClient");
static_assert(sizeof(XboxGameSessionControllerGIS_ServerRemoveClient) == 0x000008, "Wrong size on XboxGameSessionControllerGIS_ServerRemoveClient");
static_assert(offsetof(XboxGameSessionControllerGIS_ServerRemoveClient, PlayerController) == 0x000000, "Member 'XboxGameSessionControllerGIS_ServerRemoveClient::PlayerController' has a wrong offset!");

// Function SCT.MatchmakerLanguageData.GetKeyAt
// 0x0018 (0x0018 - 0x0000)
struct MatchmakerLanguageData_GetKeyAt final
{
public:
	int32                                         Index_0;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MatchmakerLanguageData_GetKeyAt) == 0x000008, "Wrong alignment on MatchmakerLanguageData_GetKeyAt");
static_assert(sizeof(MatchmakerLanguageData_GetKeyAt) == 0x000018, "Wrong size on MatchmakerLanguageData_GetKeyAt");
static_assert(offsetof(MatchmakerLanguageData_GetKeyAt, Index_0) == 0x000000, "Member 'MatchmakerLanguageData_GetKeyAt::Index_0' has a wrong offset!");
static_assert(offsetof(MatchmakerLanguageData_GetKeyAt, ReturnValue) == 0x000008, "Member 'MatchmakerLanguageData_GetKeyAt::ReturnValue' has a wrong offset!");

// Function SCT.MatchmakerLanguageData.GetKeyIndex
// 0x0018 (0x0018 - 0x0000)
struct MatchmakerLanguageData_GetKeyIndex final
{
public:
	class FString                                 Key;                                               // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MatchmakerLanguageData_GetKeyIndex) == 0x000008, "Wrong alignment on MatchmakerLanguageData_GetKeyIndex");
static_assert(sizeof(MatchmakerLanguageData_GetKeyIndex) == 0x000018, "Wrong size on MatchmakerLanguageData_GetKeyIndex");
static_assert(offsetof(MatchmakerLanguageData_GetKeyIndex, Key) == 0x000000, "Member 'MatchmakerLanguageData_GetKeyIndex::Key' has a wrong offset!");
static_assert(offsetof(MatchmakerLanguageData_GetKeyIndex, ReturnValue) == 0x000010, "Member 'MatchmakerLanguageData_GetKeyIndex::ReturnValue' has a wrong offset!");

// Function SCT.MatchmakerLanguageData.PopuplateComboBoxString
// 0x0008 (0x0008 - 0x0000)
struct MatchmakerLanguageData_PopuplateComboBoxString final
{
public:
	class UComboBoxString*                        InComboBoxString;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MatchmakerLanguageData_PopuplateComboBoxString) == 0x000008, "Wrong alignment on MatchmakerLanguageData_PopuplateComboBoxString");
static_assert(sizeof(MatchmakerLanguageData_PopuplateComboBoxString) == 0x000008, "Wrong size on MatchmakerLanguageData_PopuplateComboBoxString");
static_assert(offsetof(MatchmakerLanguageData_PopuplateComboBoxString, InComboBoxString) == 0x000000, "Member 'MatchmakerLanguageData_PopuplateComboBoxString::InComboBoxString' has a wrong offset!");

// Function SCT.MaterialCustomizationRowWidget.GenerateOptions
// 0x0020 (0x0020 - 0x0000)
struct MaterialCustomizationRowWidget_GenerateOptions final
{
public:
	TArray<class UMaterialInstance*>              InOptions;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    InClothingPrimitive;                               // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InMeshMaterialIndex;                               // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x001C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MaterialCustomizationRowWidget_GenerateOptions) == 0x000008, "Wrong alignment on MaterialCustomizationRowWidget_GenerateOptions");
static_assert(sizeof(MaterialCustomizationRowWidget_GenerateOptions) == 0x000020, "Wrong size on MaterialCustomizationRowWidget_GenerateOptions");
static_assert(offsetof(MaterialCustomizationRowWidget_GenerateOptions, InOptions) == 0x000000, "Member 'MaterialCustomizationRowWidget_GenerateOptions::InOptions' has a wrong offset!");
static_assert(offsetof(MaterialCustomizationRowWidget_GenerateOptions, InClothingPrimitive) == 0x000010, "Member 'MaterialCustomizationRowWidget_GenerateOptions::InClothingPrimitive' has a wrong offset!");
static_assert(offsetof(MaterialCustomizationRowWidget_GenerateOptions, InMeshMaterialIndex) == 0x000018, "Member 'MaterialCustomizationRowWidget_GenerateOptions::InMeshMaterialIndex' has a wrong offset!");
static_assert(offsetof(MaterialCustomizationRowWidget_GenerateOptions, ReturnValue) == 0x00001C, "Member 'MaterialCustomizationRowWidget_GenerateOptions::ReturnValue' has a wrong offset!");

// Function SCT.Modal.IsAirlockMenuVisible
// 0x0001 (0x0001 - 0x0000)
struct Modal_IsAirlockMenuVisible final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Modal_IsAirlockMenuVisible) == 0x000001, "Wrong alignment on Modal_IsAirlockMenuVisible");
static_assert(sizeof(Modal_IsAirlockMenuVisible) == 0x000001, "Wrong size on Modal_IsAirlockMenuVisible");
static_assert(offsetof(Modal_IsAirlockMenuVisible, ReturnValue) == 0x000000, "Member 'Modal_IsAirlockMenuVisible::ReturnValue' has a wrong offset!");

// Function SCT.Modal.IsCharacterMenuVisible
// 0x0001 (0x0001 - 0x0000)
struct Modal_IsCharacterMenuVisible final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Modal_IsCharacterMenuVisible) == 0x000001, "Wrong alignment on Modal_IsCharacterMenuVisible");
static_assert(sizeof(Modal_IsCharacterMenuVisible) == 0x000001, "Wrong size on Modal_IsCharacterMenuVisible");
static_assert(offsetof(Modal_IsCharacterMenuVisible, ReturnValue) == 0x000000, "Member 'Modal_IsCharacterMenuVisible::ReturnValue' has a wrong offset!");

// Function SCT.Modal.IsEmergencyMeetingVisible
// 0x0001 (0x0001 - 0x0000)
struct Modal_IsEmergencyMeetingVisible final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Modal_IsEmergencyMeetingVisible) == 0x000001, "Wrong alignment on Modal_IsEmergencyMeetingVisible");
static_assert(sizeof(Modal_IsEmergencyMeetingVisible) == 0x000001, "Wrong size on Modal_IsEmergencyMeetingVisible");
static_assert(offsetof(Modal_IsEmergencyMeetingVisible, ReturnValue) == 0x000000, "Member 'Modal_IsEmergencyMeetingVisible::ReturnValue' has a wrong offset!");

// Function SCT.Modal.IsEmoteWheelVisible
// 0x0001 (0x0001 - 0x0000)
struct Modal_IsEmoteWheelVisible final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Modal_IsEmoteWheelVisible) == 0x000001, "Wrong alignment on Modal_IsEmoteWheelVisible");
static_assert(sizeof(Modal_IsEmoteWheelVisible) == 0x000001, "Wrong size on Modal_IsEmoteWheelVisible");
static_assert(offsetof(Modal_IsEmoteWheelVisible, ReturnValue) == 0x000000, "Member 'Modal_IsEmoteWheelVisible::ReturnValue' has a wrong offset!");

// Function SCT.Modal.IsInGameMenuVisible
// 0x0001 (0x0001 - 0x0000)
struct Modal_IsInGameMenuVisible final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Modal_IsInGameMenuVisible) == 0x000001, "Wrong alignment on Modal_IsInGameMenuVisible");
static_assert(sizeof(Modal_IsInGameMenuVisible) == 0x000001, "Wrong size on Modal_IsInGameMenuVisible");
static_assert(offsetof(Modal_IsInGameMenuVisible, ReturnValue) == 0x000000, "Member 'Modal_IsInGameMenuVisible::ReturnValue' has a wrong offset!");

// Function SCT.Modal.IsItemWheelVisible
// 0x0001 (0x0001 - 0x0000)
struct Modal_IsItemWheelVisible final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Modal_IsItemWheelVisible) == 0x000001, "Wrong alignment on Modal_IsItemWheelVisible");
static_assert(sizeof(Modal_IsItemWheelVisible) == 0x000001, "Wrong size on Modal_IsItemWheelVisible");
static_assert(offsetof(Modal_IsItemWheelVisible, ReturnValue) == 0x000000, "Member 'Modal_IsItemWheelVisible::ReturnValue' has a wrong offset!");

// Function SCT.Modal.IsMapVotingVisible
// 0x0001 (0x0001 - 0x0000)
struct Modal_IsMapVotingVisible final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Modal_IsMapVotingVisible) == 0x000001, "Wrong alignment on Modal_IsMapVotingVisible");
static_assert(sizeof(Modal_IsMapVotingVisible) == 0x000001, "Wrong size on Modal_IsMapVotingVisible");
static_assert(offsetof(Modal_IsMapVotingVisible, ReturnValue) == 0x000000, "Member 'Modal_IsMapVotingVisible::ReturnValue' has a wrong offset!");

// Function SCT.Modal.IsPlayerListVisible
// 0x0001 (0x0001 - 0x0000)
struct Modal_IsPlayerListVisible final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Modal_IsPlayerListVisible) == 0x000001, "Wrong alignment on Modal_IsPlayerListVisible");
static_assert(sizeof(Modal_IsPlayerListVisible) == 0x000001, "Wrong size on Modal_IsPlayerListVisible");
static_assert(offsetof(Modal_IsPlayerListVisible, ReturnValue) == 0x000000, "Member 'Modal_IsPlayerListVisible::ReturnValue' has a wrong offset!");

// Function SCT.Modal.IsPuzzleMenuVisible
// 0x0001 (0x0001 - 0x0000)
struct Modal_IsPuzzleMenuVisible final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Modal_IsPuzzleMenuVisible) == 0x000001, "Wrong alignment on Modal_IsPuzzleMenuVisible");
static_assert(sizeof(Modal_IsPuzzleMenuVisible) == 0x000001, "Wrong size on Modal_IsPuzzleMenuVisible");
static_assert(offsetof(Modal_IsPuzzleMenuVisible, ReturnValue) == 0x000000, "Member 'Modal_IsPuzzleMenuVisible::ReturnValue' has a wrong offset!");

// Function SCT.Modal.IsSkillCheckMenuVisible
// 0x0001 (0x0001 - 0x0000)
struct Modal_IsSkillCheckMenuVisible final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Modal_IsSkillCheckMenuVisible) == 0x000001, "Wrong alignment on Modal_IsSkillCheckMenuVisible");
static_assert(sizeof(Modal_IsSkillCheckMenuVisible) == 0x000001, "Wrong size on Modal_IsSkillCheckMenuVisible");
static_assert(offsetof(Modal_IsSkillCheckMenuVisible, ReturnValue) == 0x000000, "Member 'Modal_IsSkillCheckMenuVisible::ReturnValue' has a wrong offset!");

// Function SCT.Modal.IsSpectatorHUDMenuVisible
// 0x0001 (0x0001 - 0x0000)
struct Modal_IsSpectatorHUDMenuVisible final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Modal_IsSpectatorHUDMenuVisible) == 0x000001, "Wrong alignment on Modal_IsSpectatorHUDMenuVisible");
static_assert(sizeof(Modal_IsSpectatorHUDMenuVisible) == 0x000001, "Wrong size on Modal_IsSpectatorHUDMenuVisible");
static_assert(offsetof(Modal_IsSpectatorHUDMenuVisible, ReturnValue) == 0x000000, "Member 'Modal_IsSpectatorHUDMenuVisible::ReturnValue' has a wrong offset!");

// Function SCT.Modal.IsThumbVoteMenuVisible
// 0x0001 (0x0001 - 0x0000)
struct Modal_IsThumbVoteMenuVisible final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Modal_IsThumbVoteMenuVisible) == 0x000001, "Wrong alignment on Modal_IsThumbVoteMenuVisible");
static_assert(sizeof(Modal_IsThumbVoteMenuVisible) == 0x000001, "Wrong size on Modal_IsThumbVoteMenuVisible");
static_assert(offsetof(Modal_IsThumbVoteMenuVisible, ReturnValue) == 0x000000, "Member 'Modal_IsThumbVoteMenuVisible::ReturnValue' has a wrong offset!");

// Function SCT.PartyListInterface.GetDebugPartyMembers
// 0x0010 (0x0010 - 0x0000)
struct PartyListInterface_GetDebugPartyMembers final
{
public:
	TArray<class FString>                         ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(PartyListInterface_GetDebugPartyMembers) == 0x000008, "Wrong alignment on PartyListInterface_GetDebugPartyMembers");
static_assert(sizeof(PartyListInterface_GetDebugPartyMembers) == 0x000010, "Wrong size on PartyListInterface_GetDebugPartyMembers");
static_assert(offsetof(PartyListInterface_GetDebugPartyMembers, ReturnValue) == 0x000000, "Member 'PartyListInterface_GetDebugPartyMembers::ReturnValue' has a wrong offset!");

// Function SCT.PartyListInterface.IsDebugMode
// 0x0001 (0x0001 - 0x0000)
struct PartyListInterface_IsDebugMode final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PartyListInterface_IsDebugMode) == 0x000001, "Wrong alignment on PartyListInterface_IsDebugMode");
static_assert(sizeof(PartyListInterface_IsDebugMode) == 0x000001, "Wrong size on PartyListInterface_IsDebugMode");
static_assert(offsetof(PartyListInterface_IsDebugMode, ReturnValue) == 0x000000, "Member 'PartyListInterface_IsDebugMode::ReturnValue' has a wrong offset!");

// Function SCT.PassengerLogGenerator.CanSpawn
// 0x0001 (0x0001 - 0x0000)
struct PassengerLogGenerator_CanSpawn final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PassengerLogGenerator_CanSpawn) == 0x000001, "Wrong alignment on PassengerLogGenerator_CanSpawn");
static_assert(sizeof(PassengerLogGenerator_CanSpawn) == 0x000001, "Wrong size on PassengerLogGenerator_CanSpawn");
static_assert(offsetof(PassengerLogGenerator_CanSpawn, ReturnValue) == 0x000000, "Member 'PassengerLogGenerator_CanSpawn::ReturnValue' has a wrong offset!");

// Function SCT.PassengerLogGenerator.GetDescriptionText
// 0x0018 (0x0018 - 0x0000)
struct PassengerLogGenerator_GetDescriptionText final
{
public:
	class FText                                   ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(PassengerLogGenerator_GetDescriptionText) == 0x000008, "Wrong alignment on PassengerLogGenerator_GetDescriptionText");
static_assert(sizeof(PassengerLogGenerator_GetDescriptionText) == 0x000018, "Wrong size on PassengerLogGenerator_GetDescriptionText");
static_assert(offsetof(PassengerLogGenerator_GetDescriptionText, ReturnValue) == 0x000000, "Member 'PassengerLogGenerator_GetDescriptionText::ReturnValue' has a wrong offset!");

// Function SCT.PassengerLogGenerator.GetInformation
// 0x0028 (0x0028 - 0x0000)
struct PassengerLogGenerator_GetInformation final
{
public:
	struct FPassengerLogInformation               ReturnValue;                                       // 0x0000(0x0028)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(PassengerLogGenerator_GetInformation) == 0x000008, "Wrong alignment on PassengerLogGenerator_GetInformation");
static_assert(sizeof(PassengerLogGenerator_GetInformation) == 0x000028, "Wrong size on PassengerLogGenerator_GetInformation");
static_assert(offsetof(PassengerLogGenerator_GetInformation, ReturnValue) == 0x000000, "Member 'PassengerLogGenerator_GetInformation::ReturnValue' has a wrong offset!");

// Function SCT.PassengerLogGenerator.LogShit
// 0x0010 (0x0010 - 0x0000)
struct PassengerLogGenerator_LogShit final
{
public:
	class FString                                 Msg;                                               // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PassengerLogGenerator_LogShit) == 0x000008, "Wrong alignment on PassengerLogGenerator_LogShit");
static_assert(sizeof(PassengerLogGenerator_LogShit) == 0x000010, "Wrong size on PassengerLogGenerator_LogShit");
static_assert(offsetof(PassengerLogGenerator_LogShit, Msg) == 0x000000, "Member 'PassengerLogGenerator_LogShit::Msg' has a wrong offset!");

// Function SCT.PassengerLogGenerator.Sabotage
// 0x0030 (0x0030 - 0x0000)
struct PassengerLogGenerator_Sabotage final
{
public:
	struct FInteractionPayload                    Payload;                                           // 0x0000(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(PassengerLogGenerator_Sabotage) == 0x000008, "Wrong alignment on PassengerLogGenerator_Sabotage");
static_assert(sizeof(PassengerLogGenerator_Sabotage) == 0x000030, "Wrong size on PassengerLogGenerator_Sabotage");
static_assert(offsetof(PassengerLogGenerator_Sabotage, Payload) == 0x000000, "Member 'PassengerLogGenerator_Sabotage::Payload' has a wrong offset!");

// Function SCT.PassengerLogGenerator.SetTargets
// 0x0010 (0x0010 - 0x0000)
struct PassengerLogGenerator_SetTargets final
{
public:
	TArray<int32>                                 Targets;                                           // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(PassengerLogGenerator_SetTargets) == 0x000008, "Wrong alignment on PassengerLogGenerator_SetTargets");
static_assert(sizeof(PassengerLogGenerator_SetTargets) == 0x000010, "Wrong size on PassengerLogGenerator_SetTargets");
static_assert(offsetof(PassengerLogGenerator_SetTargets, Targets) == 0x000000, "Member 'PassengerLogGenerator_SetTargets::Targets' has a wrong offset!");

// Function SCT.PassengerLogGenerator.GetContextObject
// 0x0008 (0x0008 - 0x0000)
struct PassengerLogGenerator_GetContextObject final
{
public:
	class UObject*                                ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PassengerLogGenerator_GetContextObject) == 0x000008, "Wrong alignment on PassengerLogGenerator_GetContextObject");
static_assert(sizeof(PassengerLogGenerator_GetContextObject) == 0x000008, "Wrong size on PassengerLogGenerator_GetContextObject");
static_assert(offsetof(PassengerLogGenerator_GetContextObject, ReturnValue) == 0x000000, "Member 'PassengerLogGenerator_GetContextObject::ReturnValue' has a wrong offset!");

// Function SCT.PassengerLogGenerator.GetPassengerLogGIS
// 0x0008 (0x0008 - 0x0000)
struct PassengerLogGenerator_GetPassengerLogGIS final
{
public:
	class UPassengerLogGIS*                       ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PassengerLogGenerator_GetPassengerLogGIS) == 0x000008, "Wrong alignment on PassengerLogGenerator_GetPassengerLogGIS");
static_assert(sizeof(PassengerLogGenerator_GetPassengerLogGIS) == 0x000008, "Wrong size on PassengerLogGenerator_GetPassengerLogGIS");
static_assert(offsetof(PassengerLogGenerator_GetPassengerLogGIS, ReturnValue) == 0x000000, "Member 'PassengerLogGenerator_GetPassengerLogGIS::ReturnValue' has a wrong offset!");

// Function SCT.PassengerLogGIS.GetRandom
// 0x0018 (0x0018 - 0x0000)
struct PassengerLogGIS_GetRandom final
{
public:
	TArray<int32>                                 bannedPlayers;                                     // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(PassengerLogGIS_GetRandom) == 0x000008, "Wrong alignment on PassengerLogGIS_GetRandom");
static_assert(sizeof(PassengerLogGIS_GetRandom) == 0x000018, "Wrong size on PassengerLogGIS_GetRandom");
static_assert(offsetof(PassengerLogGIS_GetRandom, bannedPlayers) == 0x000000, "Member 'PassengerLogGIS_GetRandom::bannedPlayers' has a wrong offset!");
static_assert(offsetof(PassengerLogGIS_GetRandom, ReturnValue) == 0x000010, "Member 'PassengerLogGIS_GetRandom::ReturnValue' has a wrong offset!");

// Function SCT.PassengerLogGIS.GetRandomPersonoid
// 0x0018 (0x0018 - 0x0000)
struct PassengerLogGIS_GetRandomPersonoid final
{
public:
	TArray<int32>                                 bannedPlayers;                                     // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(PassengerLogGIS_GetRandomPersonoid) == 0x000008, "Wrong alignment on PassengerLogGIS_GetRandomPersonoid");
static_assert(sizeof(PassengerLogGIS_GetRandomPersonoid) == 0x000018, "Wrong size on PassengerLogGIS_GetRandomPersonoid");
static_assert(offsetof(PassengerLogGIS_GetRandomPersonoid, bannedPlayers) == 0x000000, "Member 'PassengerLogGIS_GetRandomPersonoid::bannedPlayers' has a wrong offset!");
static_assert(offsetof(PassengerLogGIS_GetRandomPersonoid, ReturnValue) == 0x000010, "Member 'PassengerLogGIS_GetRandomPersonoid::ReturnValue' has a wrong offset!");

// Function SCT.PassengerLogGIS.GetRandomPlayers
// 0x0018 (0x0018 - 0x0000)
struct PassengerLogGIS_GetRandomPlayers final
{
public:
	int32                                         Personoids;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Residents;                                         // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<int32>                                 ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(PassengerLogGIS_GetRandomPlayers) == 0x000008, "Wrong alignment on PassengerLogGIS_GetRandomPlayers");
static_assert(sizeof(PassengerLogGIS_GetRandomPlayers) == 0x000018, "Wrong size on PassengerLogGIS_GetRandomPlayers");
static_assert(offsetof(PassengerLogGIS_GetRandomPlayers, Personoids) == 0x000000, "Member 'PassengerLogGIS_GetRandomPlayers::Personoids' has a wrong offset!");
static_assert(offsetof(PassengerLogGIS_GetRandomPlayers, Residents) == 0x000004, "Member 'PassengerLogGIS_GetRandomPlayers::Residents' has a wrong offset!");
static_assert(offsetof(PassengerLogGIS_GetRandomPlayers, ReturnValue) == 0x000008, "Member 'PassengerLogGIS_GetRandomPlayers::ReturnValue' has a wrong offset!");

// Function SCT.PassengerLogGIS.GetRandomResident
// 0x0018 (0x0018 - 0x0000)
struct PassengerLogGIS_GetRandomResident final
{
public:
	TArray<int32>                                 bannedPlayers;                                     // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(PassengerLogGIS_GetRandomResident) == 0x000008, "Wrong alignment on PassengerLogGIS_GetRandomResident");
static_assert(sizeof(PassengerLogGIS_GetRandomResident) == 0x000018, "Wrong size on PassengerLogGIS_GetRandomResident");
static_assert(offsetof(PassengerLogGIS_GetRandomResident, bannedPlayers) == 0x000000, "Member 'PassengerLogGIS_GetRandomResident::bannedPlayers' has a wrong offset!");
static_assert(offsetof(PassengerLogGIS_GetRandomResident, ReturnValue) == 0x000010, "Member 'PassengerLogGIS_GetRandomResident::ReturnValue' has a wrong offset!");

// Function SCT.PassengerLogGIS.GetAll
// 0x0010 (0x0010 - 0x0000)
struct PassengerLogGIS_GetAll final
{
public:
	TArray<int32>                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(PassengerLogGIS_GetAll) == 0x000008, "Wrong alignment on PassengerLogGIS_GetAll");
static_assert(sizeof(PassengerLogGIS_GetAll) == 0x000010, "Wrong size on PassengerLogGIS_GetAll");
static_assert(offsetof(PassengerLogGIS_GetAll, ReturnValue) == 0x000000, "Member 'PassengerLogGIS_GetAll::ReturnValue' has a wrong offset!");

// Function SCT.PassengerLogGIS.GetAllFromFaction
// 0x0018 (0x0018 - 0x0000)
struct PassengerLogGIS_GetAllFromFaction final
{
public:
	EPlayerFaction                                Faction;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<int32>                                 ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(PassengerLogGIS_GetAllFromFaction) == 0x000008, "Wrong alignment on PassengerLogGIS_GetAllFromFaction");
static_assert(sizeof(PassengerLogGIS_GetAllFromFaction) == 0x000018, "Wrong size on PassengerLogGIS_GetAllFromFaction");
static_assert(offsetof(PassengerLogGIS_GetAllFromFaction, Faction) == 0x000000, "Member 'PassengerLogGIS_GetAllFromFaction::Faction' has a wrong offset!");
static_assert(offsetof(PassengerLogGIS_GetAllFromFaction, ReturnValue) == 0x000008, "Member 'PassengerLogGIS_GetAllFromFaction::ReturnValue' has a wrong offset!");

// Function SCT.PersonoidInformationComponent.HaveAllPersonoidsReplicated
// 0x0010 (0x0010 - 0x0000)
struct PersonoidInformationComponent_HaveAllPersonoidsReplicated final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(PersonoidInformationComponent_HaveAllPersonoidsReplicated) == 0x000008, "Wrong alignment on PersonoidInformationComponent_HaveAllPersonoidsReplicated");
static_assert(sizeof(PersonoidInformationComponent_HaveAllPersonoidsReplicated) == 0x000010, "Wrong size on PersonoidInformationComponent_HaveAllPersonoidsReplicated");
static_assert(offsetof(PersonoidInformationComponent_HaveAllPersonoidsReplicated, WorldContextObject) == 0x000000, "Member 'PersonoidInformationComponent_HaveAllPersonoidsReplicated::WorldContextObject' has a wrong offset!");
static_assert(offsetof(PersonoidInformationComponent_HaveAllPersonoidsReplicated, ReturnValue) == 0x000008, "Member 'PersonoidInformationComponent_HaveAllPersonoidsReplicated::ReturnValue' has a wrong offset!");

// Function SCT.PersonoidInformationComponent.ReplicatedPersonoidsInformationNum
// 0x0010 (0x0010 - 0x0000)
struct PersonoidInformationComponent_ReplicatedPersonoidsInformationNum final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(PersonoidInformationComponent_ReplicatedPersonoidsInformationNum) == 0x000008, "Wrong alignment on PersonoidInformationComponent_ReplicatedPersonoidsInformationNum");
static_assert(sizeof(PersonoidInformationComponent_ReplicatedPersonoidsInformationNum) == 0x000010, "Wrong size on PersonoidInformationComponent_ReplicatedPersonoidsInformationNum");
static_assert(offsetof(PersonoidInformationComponent_ReplicatedPersonoidsInformationNum, WorldContextObject) == 0x000000, "Member 'PersonoidInformationComponent_ReplicatedPersonoidsInformationNum::WorldContextObject' has a wrong offset!");
static_assert(offsetof(PersonoidInformationComponent_ReplicatedPersonoidsInformationNum, ReturnValue) == 0x000008, "Member 'PersonoidInformationComponent_ReplicatedPersonoidsInformationNum::ReturnValue' has a wrong offset!");

// Function SCT.PersonoidInformationComponent.GetFaction
// 0x0008 (0x0008 - 0x0000)
struct PersonoidInformationComponent_GetFaction final
{
public:
	int32                                         PlayerId;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPlayerFaction                                ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(PersonoidInformationComponent_GetFaction) == 0x000004, "Wrong alignment on PersonoidInformationComponent_GetFaction");
static_assert(sizeof(PersonoidInformationComponent_GetFaction) == 0x000008, "Wrong size on PersonoidInformationComponent_GetFaction");
static_assert(offsetof(PersonoidInformationComponent_GetFaction, PlayerId) == 0x000000, "Member 'PersonoidInformationComponent_GetFaction::PlayerId' has a wrong offset!");
static_assert(offsetof(PersonoidInformationComponent_GetFaction, ReturnValue) == 0x000004, "Member 'PersonoidInformationComponent_GetFaction::ReturnValue' has a wrong offset!");

// Function SCT.PlayerHapticsComponent.Initialize
// 0x0018 (0x0018 - 0x0000)
struct PlayerHapticsComponent_Initialize final
{
public:
	const class APlayerController*                InPlayerController;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class USoundSubmix*                     InPadTactileMix;                                   // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class USoundSubmix*                     InPadAudioMix;                                     // 0x0010(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerHapticsComponent_Initialize) == 0x000008, "Wrong alignment on PlayerHapticsComponent_Initialize");
static_assert(sizeof(PlayerHapticsComponent_Initialize) == 0x000018, "Wrong size on PlayerHapticsComponent_Initialize");
static_assert(offsetof(PlayerHapticsComponent_Initialize, InPlayerController) == 0x000000, "Member 'PlayerHapticsComponent_Initialize::InPlayerController' has a wrong offset!");
static_assert(offsetof(PlayerHapticsComponent_Initialize, InPadTactileMix) == 0x000008, "Member 'PlayerHapticsComponent_Initialize::InPadTactileMix' has a wrong offset!");
static_assert(offsetof(PlayerHapticsComponent_Initialize, InPadAudioMix) == 0x000010, "Member 'PlayerHapticsComponent_Initialize::InPadAudioMix' has a wrong offset!");

// Function SCT.PlayerHapticsComponent.ResetKeyHaptics
// 0x0008 (0x0008 - 0x0000)
struct PlayerHapticsComponent_ResetKeyHaptics final
{
public:
	class FName                                   ActionName;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerHapticsComponent_ResetKeyHaptics) == 0x000004, "Wrong alignment on PlayerHapticsComponent_ResetKeyHaptics");
static_assert(sizeof(PlayerHapticsComponent_ResetKeyHaptics) == 0x000008, "Wrong size on PlayerHapticsComponent_ResetKeyHaptics");
static_assert(offsetof(PlayerHapticsComponent_ResetKeyHaptics, ActionName) == 0x000000, "Member 'PlayerHapticsComponent_ResetKeyHaptics::ActionName' has a wrong offset!");

// Function SCT.PlayerHapticsComponent.ResistKeyPress
// 0x0014 (0x0014 - 0x0000)
struct PlayerHapticsComponent_ResistKeyPress final
{
public:
	class FName                                   ActionName;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PressRangeStart;                                   // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PressRangeEnd;                                     // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Strength;                                          // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerHapticsComponent_ResistKeyPress) == 0x000004, "Wrong alignment on PlayerHapticsComponent_ResistKeyPress");
static_assert(sizeof(PlayerHapticsComponent_ResistKeyPress) == 0x000014, "Wrong size on PlayerHapticsComponent_ResistKeyPress");
static_assert(offsetof(PlayerHapticsComponent_ResistKeyPress, ActionName) == 0x000000, "Member 'PlayerHapticsComponent_ResistKeyPress::ActionName' has a wrong offset!");
static_assert(offsetof(PlayerHapticsComponent_ResistKeyPress, PressRangeStart) == 0x000008, "Member 'PlayerHapticsComponent_ResistKeyPress::PressRangeStart' has a wrong offset!");
static_assert(offsetof(PlayerHapticsComponent_ResistKeyPress, PressRangeEnd) == 0x00000C, "Member 'PlayerHapticsComponent_ResistKeyPress::PressRangeEnd' has a wrong offset!");
static_assert(offsetof(PlayerHapticsComponent_ResistKeyPress, Strength) == 0x000010, "Member 'PlayerHapticsComponent_ResistKeyPress::Strength' has a wrong offset!");

// Function SCT.PlayerHapticsComponent.RumbleKey
// 0x0014 (0x0014 - 0x0000)
struct PlayerHapticsComponent_RumbleKey final
{
public:
	class FName                                   ActionName;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PressRangeStart;                                   // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Frequency;                                         // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Amplitude;                                         // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerHapticsComponent_RumbleKey) == 0x000004, "Wrong alignment on PlayerHapticsComponent_RumbleKey");
static_assert(sizeof(PlayerHapticsComponent_RumbleKey) == 0x000014, "Wrong size on PlayerHapticsComponent_RumbleKey");
static_assert(offsetof(PlayerHapticsComponent_RumbleKey, ActionName) == 0x000000, "Member 'PlayerHapticsComponent_RumbleKey::ActionName' has a wrong offset!");
static_assert(offsetof(PlayerHapticsComponent_RumbleKey, PressRangeStart) == 0x000008, "Member 'PlayerHapticsComponent_RumbleKey::PressRangeStart' has a wrong offset!");
static_assert(offsetof(PlayerHapticsComponent_RumbleKey, Frequency) == 0x00000C, "Member 'PlayerHapticsComponent_RumbleKey::Frequency' has a wrong offset!");
static_assert(offsetof(PlayerHapticsComponent_RumbleKey, Amplitude) == 0x000010, "Member 'PlayerHapticsComponent_RumbleKey::Amplitude' has a wrong offset!");

// Function SCT.PlayerInfoGIS.AddCollaborationScore
// 0x0008 (0x0008 - 0x0000)
struct PlayerInfoGIS_AddCollaborationScore final
{
public:
	int32                                         PlayerId;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Score;                                             // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerInfoGIS_AddCollaborationScore) == 0x000004, "Wrong alignment on PlayerInfoGIS_AddCollaborationScore");
static_assert(sizeof(PlayerInfoGIS_AddCollaborationScore) == 0x000008, "Wrong size on PlayerInfoGIS_AddCollaborationScore");
static_assert(offsetof(PlayerInfoGIS_AddCollaborationScore, PlayerId) == 0x000000, "Member 'PlayerInfoGIS_AddCollaborationScore::PlayerId' has a wrong offset!");
static_assert(offsetof(PlayerInfoGIS_AddCollaborationScore, Score) == 0x000004, "Member 'PlayerInfoGIS_AddCollaborationScore::Score' has a wrong offset!");

// Function SCT.PlayerInfoGIS.AddDeceptionScore
// 0x0008 (0x0008 - 0x0000)
struct PlayerInfoGIS_AddDeceptionScore final
{
public:
	int32                                         PlayerId;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Score;                                             // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerInfoGIS_AddDeceptionScore) == 0x000004, "Wrong alignment on PlayerInfoGIS_AddDeceptionScore");
static_assert(sizeof(PlayerInfoGIS_AddDeceptionScore) == 0x000008, "Wrong size on PlayerInfoGIS_AddDeceptionScore");
static_assert(offsetof(PlayerInfoGIS_AddDeceptionScore, PlayerId) == 0x000000, "Member 'PlayerInfoGIS_AddDeceptionScore::PlayerId' has a wrong offset!");
static_assert(offsetof(PlayerInfoGIS_AddDeceptionScore, Score) == 0x000004, "Member 'PlayerInfoGIS_AddDeceptionScore::Score' has a wrong offset!");

// Function SCT.PlayerInfoGIS.AddDeductionScore
// 0x0008 (0x0008 - 0x0000)
struct PlayerInfoGIS_AddDeductionScore final
{
public:
	int32                                         PlayerId;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Score;                                             // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerInfoGIS_AddDeductionScore) == 0x000004, "Wrong alignment on PlayerInfoGIS_AddDeductionScore");
static_assert(sizeof(PlayerInfoGIS_AddDeductionScore) == 0x000008, "Wrong size on PlayerInfoGIS_AddDeductionScore");
static_assert(offsetof(PlayerInfoGIS_AddDeductionScore, PlayerId) == 0x000000, "Member 'PlayerInfoGIS_AddDeductionScore::PlayerId' has a wrong offset!");
static_assert(offsetof(PlayerInfoGIS_AddDeductionScore, Score) == 0x000004, "Member 'PlayerInfoGIS_AddDeductionScore::Score' has a wrong offset!");

// Function SCT.PlayerInfoGIS.AddEndScenarioScore
// 0x0008 (0x0008 - 0x0000)
struct PlayerInfoGIS_AddEndScenarioScore final
{
public:
	int32                                         PlayerId;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Score;                                             // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerInfoGIS_AddEndScenarioScore) == 0x000004, "Wrong alignment on PlayerInfoGIS_AddEndScenarioScore");
static_assert(sizeof(PlayerInfoGIS_AddEndScenarioScore) == 0x000008, "Wrong size on PlayerInfoGIS_AddEndScenarioScore");
static_assert(offsetof(PlayerInfoGIS_AddEndScenarioScore, PlayerId) == 0x000000, "Member 'PlayerInfoGIS_AddEndScenarioScore::PlayerId' has a wrong offset!");
static_assert(offsetof(PlayerInfoGIS_AddEndScenarioScore, Score) == 0x000004, "Member 'PlayerInfoGIS_AddEndScenarioScore::Score' has a wrong offset!");

// Function SCT.PlayerInfoGIS.AddProgressionScore
// 0x0008 (0x0008 - 0x0000)
struct PlayerInfoGIS_AddProgressionScore final
{
public:
	int32                                         PlayerId;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Score;                                             // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerInfoGIS_AddProgressionScore) == 0x000004, "Wrong alignment on PlayerInfoGIS_AddProgressionScore");
static_assert(sizeof(PlayerInfoGIS_AddProgressionScore) == 0x000008, "Wrong size on PlayerInfoGIS_AddProgressionScore");
static_assert(offsetof(PlayerInfoGIS_AddProgressionScore, PlayerId) == 0x000000, "Member 'PlayerInfoGIS_AddProgressionScore::PlayerId' has a wrong offset!");
static_assert(offsetof(PlayerInfoGIS_AddProgressionScore, Score) == 0x000004, "Member 'PlayerInfoGIS_AddProgressionScore::Score' has a wrong offset!");

// Function SCT.PlayerInfoGIS.AddSabotageScore
// 0x0008 (0x0008 - 0x0000)
struct PlayerInfoGIS_AddSabotageScore final
{
public:
	int32                                         PlayerId;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Score;                                             // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerInfoGIS_AddSabotageScore) == 0x000004, "Wrong alignment on PlayerInfoGIS_AddSabotageScore");
static_assert(sizeof(PlayerInfoGIS_AddSabotageScore) == 0x000008, "Wrong size on PlayerInfoGIS_AddSabotageScore");
static_assert(offsetof(PlayerInfoGIS_AddSabotageScore, PlayerId) == 0x000000, "Member 'PlayerInfoGIS_AddSabotageScore::PlayerId' has a wrong offset!");
static_assert(offsetof(PlayerInfoGIS_AddSabotageScore, Score) == 0x000004, "Member 'PlayerInfoGIS_AddSabotageScore::Score' has a wrong offset!");

// Function SCT.PlayerInfoGIS.AddScoreEntry
// 0x000C (0x000C - 0x0000)
struct PlayerInfoGIS_AddScoreEntry final
{
public:
	int32                                         PlayerId;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   RowName;                                           // 0x0004(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerInfoGIS_AddScoreEntry) == 0x000004, "Wrong alignment on PlayerInfoGIS_AddScoreEntry");
static_assert(sizeof(PlayerInfoGIS_AddScoreEntry) == 0x00000C, "Wrong size on PlayerInfoGIS_AddScoreEntry");
static_assert(offsetof(PlayerInfoGIS_AddScoreEntry, PlayerId) == 0x000000, "Member 'PlayerInfoGIS_AddScoreEntry::PlayerId' has a wrong offset!");
static_assert(offsetof(PlayerInfoGIS_AddScoreEntry, RowName) == 0x000004, "Member 'PlayerInfoGIS_AddScoreEntry::RowName' has a wrong offset!");

// Function SCT.PlayerInfoGIS.AddTotalPersonoidScore
// 0x0008 (0x0008 - 0x0000)
struct PlayerInfoGIS_AddTotalPersonoidScore final
{
public:
	int32                                         PlayerId;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Score;                                             // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerInfoGIS_AddTotalPersonoidScore) == 0x000004, "Wrong alignment on PlayerInfoGIS_AddTotalPersonoidScore");
static_assert(sizeof(PlayerInfoGIS_AddTotalPersonoidScore) == 0x000008, "Wrong size on PlayerInfoGIS_AddTotalPersonoidScore");
static_assert(offsetof(PlayerInfoGIS_AddTotalPersonoidScore, PlayerId) == 0x000000, "Member 'PlayerInfoGIS_AddTotalPersonoidScore::PlayerId' has a wrong offset!");
static_assert(offsetof(PlayerInfoGIS_AddTotalPersonoidScore, Score) == 0x000004, "Member 'PlayerInfoGIS_AddTotalPersonoidScore::Score' has a wrong offset!");

// Function SCT.PlayerInfoGIS.AddTotalResidentScore
// 0x0008 (0x0008 - 0x0000)
struct PlayerInfoGIS_AddTotalResidentScore final
{
public:
	int32                                         PlayerId;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Score;                                             // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerInfoGIS_AddTotalResidentScore) == 0x000004, "Wrong alignment on PlayerInfoGIS_AddTotalResidentScore");
static_assert(sizeof(PlayerInfoGIS_AddTotalResidentScore) == 0x000008, "Wrong size on PlayerInfoGIS_AddTotalResidentScore");
static_assert(offsetof(PlayerInfoGIS_AddTotalResidentScore, PlayerId) == 0x000000, "Member 'PlayerInfoGIS_AddTotalResidentScore::PlayerId' has a wrong offset!");
static_assert(offsetof(PlayerInfoGIS_AddTotalResidentScore, Score) == 0x000004, "Member 'PlayerInfoGIS_AddTotalResidentScore::Score' has a wrong offset!");

// Function SCT.PlayerInfoGIS.GetAgenda
// 0x0010 (0x0010 - 0x0000)
struct PlayerInfoGIS_GetAgenda final
{
public:
	int32                                         PlayerId;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UAgendaObject*                          ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerInfoGIS_GetAgenda) == 0x000008, "Wrong alignment on PlayerInfoGIS_GetAgenda");
static_assert(sizeof(PlayerInfoGIS_GetAgenda) == 0x000010, "Wrong size on PlayerInfoGIS_GetAgenda");
static_assert(offsetof(PlayerInfoGIS_GetAgenda, PlayerId) == 0x000000, "Member 'PlayerInfoGIS_GetAgenda::PlayerId' has a wrong offset!");
static_assert(offsetof(PlayerInfoGIS_GetAgenda, ReturnValue) == 0x000008, "Member 'PlayerInfoGIS_GetAgenda::ReturnValue' has a wrong offset!");

// Function SCT.PlayerInfoGIS.GetAllPlayerData
// 0x0010 (0x0010 - 0x0000)
struct PlayerInfoGIS_GetAllPlayerData final
{
public:
	TArray<struct FPlayerData>                    ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerInfoGIS_GetAllPlayerData) == 0x000008, "Wrong alignment on PlayerInfoGIS_GetAllPlayerData");
static_assert(sizeof(PlayerInfoGIS_GetAllPlayerData) == 0x000010, "Wrong size on PlayerInfoGIS_GetAllPlayerData");
static_assert(offsetof(PlayerInfoGIS_GetAllPlayerData, ReturnValue) == 0x000000, "Member 'PlayerInfoGIS_GetAllPlayerData::ReturnValue' has a wrong offset!");

// Function SCT.PlayerInfoGIS.GetCharacterVariant
// 0x0010 (0x0010 - 0x0000)
struct PlayerInfoGIS_GetCharacterVariant final
{
public:
	int32                                         PlayerId;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UClass*                                 ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerInfoGIS_GetCharacterVariant) == 0x000008, "Wrong alignment on PlayerInfoGIS_GetCharacterVariant");
static_assert(sizeof(PlayerInfoGIS_GetCharacterVariant) == 0x000010, "Wrong size on PlayerInfoGIS_GetCharacterVariant");
static_assert(offsetof(PlayerInfoGIS_GetCharacterVariant, PlayerId) == 0x000000, "Member 'PlayerInfoGIS_GetCharacterVariant::PlayerId' has a wrong offset!");
static_assert(offsetof(PlayerInfoGIS_GetCharacterVariant, ReturnValue) == 0x000008, "Member 'PlayerInfoGIS_GetCharacterVariant::ReturnValue' has a wrong offset!");

// Function SCT.PlayerInfoGIS.GetDownvotedPlayers
// 0x0018 (0x0018 - 0x0000)
struct PlayerInfoGIS_GetDownvotedPlayers final
{
public:
	int32                                         TargetPlayer;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<int32>                                 ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerInfoGIS_GetDownvotedPlayers) == 0x000008, "Wrong alignment on PlayerInfoGIS_GetDownvotedPlayers");
static_assert(sizeof(PlayerInfoGIS_GetDownvotedPlayers) == 0x000018, "Wrong size on PlayerInfoGIS_GetDownvotedPlayers");
static_assert(offsetof(PlayerInfoGIS_GetDownvotedPlayers, TargetPlayer) == 0x000000, "Member 'PlayerInfoGIS_GetDownvotedPlayers::TargetPlayer' has a wrong offset!");
static_assert(offsetof(PlayerInfoGIS_GetDownvotedPlayers, ReturnValue) == 0x000008, "Member 'PlayerInfoGIS_GetDownvotedPlayers::ReturnValue' has a wrong offset!");

// Function SCT.PlayerInfoGIS.GetFate
// 0x0010 (0x0010 - 0x0000)
struct PlayerInfoGIS_GetFate final
{
public:
	const class APawn*                            Pawn;                                              // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFate                                         ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(PlayerInfoGIS_GetFate) == 0x000008, "Wrong alignment on PlayerInfoGIS_GetFate");
static_assert(sizeof(PlayerInfoGIS_GetFate) == 0x000010, "Wrong size on PlayerInfoGIS_GetFate");
static_assert(offsetof(PlayerInfoGIS_GetFate, Pawn) == 0x000000, "Member 'PlayerInfoGIS_GetFate::Pawn' has a wrong offset!");
static_assert(offsetof(PlayerInfoGIS_GetFate, ReturnValue) == 0x000008, "Member 'PlayerInfoGIS_GetFate::ReturnValue' has a wrong offset!");

// Function SCT.PlayerInfoGIS.GetHumanoidVariant
// 0x0010 (0x0010 - 0x0000)
struct PlayerInfoGIS_GetHumanoidVariant final
{
public:
	int32                                         PlayerId;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UClass*                                 ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerInfoGIS_GetHumanoidVariant) == 0x000008, "Wrong alignment on PlayerInfoGIS_GetHumanoidVariant");
static_assert(sizeof(PlayerInfoGIS_GetHumanoidVariant) == 0x000010, "Wrong size on PlayerInfoGIS_GetHumanoidVariant");
static_assert(offsetof(PlayerInfoGIS_GetHumanoidVariant, PlayerId) == 0x000000, "Member 'PlayerInfoGIS_GetHumanoidVariant::PlayerId' has a wrong offset!");
static_assert(offsetof(PlayerInfoGIS_GetHumanoidVariant, ReturnValue) == 0x000008, "Member 'PlayerInfoGIS_GetHumanoidVariant::ReturnValue' has a wrong offset!");

// Function SCT.PlayerInfoGIS.GetScore
// 0x0024 (0x0024 - 0x0000)
struct PlayerInfoGIS_GetScore final
{
public:
	int32                                         PlayerId;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FScore                                 ReturnValue;                                       // 0x0004(0x0020)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerInfoGIS_GetScore) == 0x000004, "Wrong alignment on PlayerInfoGIS_GetScore");
static_assert(sizeof(PlayerInfoGIS_GetScore) == 0x000024, "Wrong size on PlayerInfoGIS_GetScore");
static_assert(offsetof(PlayerInfoGIS_GetScore, PlayerId) == 0x000000, "Member 'PlayerInfoGIS_GetScore::PlayerId' has a wrong offset!");
static_assert(offsetof(PlayerInfoGIS_GetScore, ReturnValue) == 0x000004, "Member 'PlayerInfoGIS_GetScore::ReturnValue' has a wrong offset!");

// Function SCT.PlayerInfoGIS.GetUpvotedPlayers
// 0x0018 (0x0018 - 0x0000)
struct PlayerInfoGIS_GetUpvotedPlayers final
{
public:
	int32                                         TargetPlayer;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<int32>                                 ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerInfoGIS_GetUpvotedPlayers) == 0x000008, "Wrong alignment on PlayerInfoGIS_GetUpvotedPlayers");
static_assert(sizeof(PlayerInfoGIS_GetUpvotedPlayers) == 0x000018, "Wrong size on PlayerInfoGIS_GetUpvotedPlayers");
static_assert(offsetof(PlayerInfoGIS_GetUpvotedPlayers, TargetPlayer) == 0x000000, "Member 'PlayerInfoGIS_GetUpvotedPlayers::TargetPlayer' has a wrong offset!");
static_assert(offsetof(PlayerInfoGIS_GetUpvotedPlayers, ReturnValue) == 0x000008, "Member 'PlayerInfoGIS_GetUpvotedPlayers::ReturnValue' has a wrong offset!");

// Function SCT.PlayerInfoGIS.Kill
// 0x0014 (0x0014 - 0x0000)
struct PlayerInfoGIS_Kill final
{
public:
	int32                                         PlayerId;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDestiny                               Destiny;                                           // 0x0004(0x0010)(Parm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerInfoGIS_Kill) == 0x000004, "Wrong alignment on PlayerInfoGIS_Kill");
static_assert(sizeof(PlayerInfoGIS_Kill) == 0x000014, "Wrong size on PlayerInfoGIS_Kill");
static_assert(offsetof(PlayerInfoGIS_Kill, PlayerId) == 0x000000, "Member 'PlayerInfoGIS_Kill::PlayerId' has a wrong offset!");
static_assert(offsetof(PlayerInfoGIS_Kill, Destiny) == 0x000004, "Member 'PlayerInfoGIS_Kill::Destiny' has a wrong offset!");

// Function SCT.PlayerInfoGIS.KillWithFate
// 0x0008 (0x0008 - 0x0000)
struct PlayerInfoGIS_KillWithFate final
{
public:
	int32                                         PlayerId;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFate                                         Fate;                                              // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(PlayerInfoGIS_KillWithFate) == 0x000004, "Wrong alignment on PlayerInfoGIS_KillWithFate");
static_assert(sizeof(PlayerInfoGIS_KillWithFate) == 0x000008, "Wrong size on PlayerInfoGIS_KillWithFate");
static_assert(offsetof(PlayerInfoGIS_KillWithFate, PlayerId) == 0x000000, "Member 'PlayerInfoGIS_KillWithFate::PlayerId' has a wrong offset!");
static_assert(offsetof(PlayerInfoGIS_KillWithFate, Fate) == 0x000004, "Member 'PlayerInfoGIS_KillWithFate::Fate' has a wrong offset!");

// Function SCT.PlayerInfoGIS.RemoveGlobalData
// 0x0008 (0x0008 - 0x0000)
struct PlayerInfoGIS_RemoveGlobalData final
{
public:
	const class UTransitionDataEntry*             Key;                                               // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerInfoGIS_RemoveGlobalData) == 0x000008, "Wrong alignment on PlayerInfoGIS_RemoveGlobalData");
static_assert(sizeof(PlayerInfoGIS_RemoveGlobalData) == 0x000008, "Wrong size on PlayerInfoGIS_RemoveGlobalData");
static_assert(offsetof(PlayerInfoGIS_RemoveGlobalData, Key) == 0x000000, "Member 'PlayerInfoGIS_RemoveGlobalData::Key' has a wrong offset!");

// Function SCT.PlayerInfoGIS.RemovePlayerData
// 0x0010 (0x0010 - 0x0000)
struct PlayerInfoGIS_RemovePlayerData final
{
public:
	const class UTransitionDataEntry*             Key;                                               // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PlayerId;                                          // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(PlayerInfoGIS_RemovePlayerData) == 0x000008, "Wrong alignment on PlayerInfoGIS_RemovePlayerData");
static_assert(sizeof(PlayerInfoGIS_RemovePlayerData) == 0x000010, "Wrong size on PlayerInfoGIS_RemovePlayerData");
static_assert(offsetof(PlayerInfoGIS_RemovePlayerData, Key) == 0x000000, "Member 'PlayerInfoGIS_RemovePlayerData::Key' has a wrong offset!");
static_assert(offsetof(PlayerInfoGIS_RemovePlayerData, PlayerId) == 0x000008, "Member 'PlayerInfoGIS_RemovePlayerData::PlayerId' has a wrong offset!");

// Function SCT.PlayerInfoGIS.SaveGlobalBool
// 0x0010 (0x0010 - 0x0000)
struct PlayerInfoGIS_SaveGlobalBool final
{
public:
	const class UTransitionDataEntry*             Entry;                                             // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Value;                                             // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(PlayerInfoGIS_SaveGlobalBool) == 0x000008, "Wrong alignment on PlayerInfoGIS_SaveGlobalBool");
static_assert(sizeof(PlayerInfoGIS_SaveGlobalBool) == 0x000010, "Wrong size on PlayerInfoGIS_SaveGlobalBool");
static_assert(offsetof(PlayerInfoGIS_SaveGlobalBool, Entry) == 0x000000, "Member 'PlayerInfoGIS_SaveGlobalBool::Entry' has a wrong offset!");
static_assert(offsetof(PlayerInfoGIS_SaveGlobalBool, Value) == 0x000008, "Member 'PlayerInfoGIS_SaveGlobalBool::Value' has a wrong offset!");

// Function SCT.PlayerInfoGIS.SaveGlobalFloat
// 0x0010 (0x0010 - 0x0000)
struct PlayerInfoGIS_SaveGlobalFloat final
{
public:
	const class UTransitionDataEntry*             Entry;                                             // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Value;                                             // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(PlayerInfoGIS_SaveGlobalFloat) == 0x000008, "Wrong alignment on PlayerInfoGIS_SaveGlobalFloat");
static_assert(sizeof(PlayerInfoGIS_SaveGlobalFloat) == 0x000010, "Wrong size on PlayerInfoGIS_SaveGlobalFloat");
static_assert(offsetof(PlayerInfoGIS_SaveGlobalFloat, Entry) == 0x000000, "Member 'PlayerInfoGIS_SaveGlobalFloat::Entry' has a wrong offset!");
static_assert(offsetof(PlayerInfoGIS_SaveGlobalFloat, Value) == 0x000008, "Member 'PlayerInfoGIS_SaveGlobalFloat::Value' has a wrong offset!");

// Function SCT.PlayerInfoGIS.SaveGlobalInt
// 0x0010 (0x0010 - 0x0000)
struct PlayerInfoGIS_SaveGlobalInt final
{
public:
	const class UTransitionDataEntry*             Entry;                                             // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Value;                                             // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(PlayerInfoGIS_SaveGlobalInt) == 0x000008, "Wrong alignment on PlayerInfoGIS_SaveGlobalInt");
static_assert(sizeof(PlayerInfoGIS_SaveGlobalInt) == 0x000010, "Wrong size on PlayerInfoGIS_SaveGlobalInt");
static_assert(offsetof(PlayerInfoGIS_SaveGlobalInt, Entry) == 0x000000, "Member 'PlayerInfoGIS_SaveGlobalInt::Entry' has a wrong offset!");
static_assert(offsetof(PlayerInfoGIS_SaveGlobalInt, Value) == 0x000008, "Member 'PlayerInfoGIS_SaveGlobalInt::Value' has a wrong offset!");

// Function SCT.PlayerInfoGIS.SaveGlobalObject
// 0x0010 (0x0010 - 0x0000)
struct PlayerInfoGIS_SaveGlobalObject final
{
public:
	const class UTransitionDataEntry*             Entry;                                             // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UObject*                                Value;                                             // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerInfoGIS_SaveGlobalObject) == 0x000008, "Wrong alignment on PlayerInfoGIS_SaveGlobalObject");
static_assert(sizeof(PlayerInfoGIS_SaveGlobalObject) == 0x000010, "Wrong size on PlayerInfoGIS_SaveGlobalObject");
static_assert(offsetof(PlayerInfoGIS_SaveGlobalObject, Entry) == 0x000000, "Member 'PlayerInfoGIS_SaveGlobalObject::Entry' has a wrong offset!");
static_assert(offsetof(PlayerInfoGIS_SaveGlobalObject, Value) == 0x000008, "Member 'PlayerInfoGIS_SaveGlobalObject::Value' has a wrong offset!");

// Function SCT.PlayerInfoGIS.SavePlayerBool
// 0x0010 (0x0010 - 0x0000)
struct PlayerInfoGIS_SavePlayerBool final
{
public:
	const class UTransitionDataEntry*             Entry;                                             // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PlayerId;                                          // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Value;                                             // 0x000C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(PlayerInfoGIS_SavePlayerBool) == 0x000008, "Wrong alignment on PlayerInfoGIS_SavePlayerBool");
static_assert(sizeof(PlayerInfoGIS_SavePlayerBool) == 0x000010, "Wrong size on PlayerInfoGIS_SavePlayerBool");
static_assert(offsetof(PlayerInfoGIS_SavePlayerBool, Entry) == 0x000000, "Member 'PlayerInfoGIS_SavePlayerBool::Entry' has a wrong offset!");
static_assert(offsetof(PlayerInfoGIS_SavePlayerBool, PlayerId) == 0x000008, "Member 'PlayerInfoGIS_SavePlayerBool::PlayerId' has a wrong offset!");
static_assert(offsetof(PlayerInfoGIS_SavePlayerBool, Value) == 0x00000C, "Member 'PlayerInfoGIS_SavePlayerBool::Value' has a wrong offset!");

// Function SCT.PlayerInfoGIS.SavePlayerFloat
// 0x0010 (0x0010 - 0x0000)
struct PlayerInfoGIS_SavePlayerFloat final
{
public:
	const class UTransitionDataEntry*             Entry;                                             // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PlayerId;                                          // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Value;                                             // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerInfoGIS_SavePlayerFloat) == 0x000008, "Wrong alignment on PlayerInfoGIS_SavePlayerFloat");
static_assert(sizeof(PlayerInfoGIS_SavePlayerFloat) == 0x000010, "Wrong size on PlayerInfoGIS_SavePlayerFloat");
static_assert(offsetof(PlayerInfoGIS_SavePlayerFloat, Entry) == 0x000000, "Member 'PlayerInfoGIS_SavePlayerFloat::Entry' has a wrong offset!");
static_assert(offsetof(PlayerInfoGIS_SavePlayerFloat, PlayerId) == 0x000008, "Member 'PlayerInfoGIS_SavePlayerFloat::PlayerId' has a wrong offset!");
static_assert(offsetof(PlayerInfoGIS_SavePlayerFloat, Value) == 0x00000C, "Member 'PlayerInfoGIS_SavePlayerFloat::Value' has a wrong offset!");

// Function SCT.PlayerInfoGIS.SavePlayerInt
// 0x0010 (0x0010 - 0x0000)
struct PlayerInfoGIS_SavePlayerInt final
{
public:
	const class UTransitionDataEntry*             Entry;                                             // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PlayerId;                                          // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Value;                                             // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerInfoGIS_SavePlayerInt) == 0x000008, "Wrong alignment on PlayerInfoGIS_SavePlayerInt");
static_assert(sizeof(PlayerInfoGIS_SavePlayerInt) == 0x000010, "Wrong size on PlayerInfoGIS_SavePlayerInt");
static_assert(offsetof(PlayerInfoGIS_SavePlayerInt, Entry) == 0x000000, "Member 'PlayerInfoGIS_SavePlayerInt::Entry' has a wrong offset!");
static_assert(offsetof(PlayerInfoGIS_SavePlayerInt, PlayerId) == 0x000008, "Member 'PlayerInfoGIS_SavePlayerInt::PlayerId' has a wrong offset!");
static_assert(offsetof(PlayerInfoGIS_SavePlayerInt, Value) == 0x00000C, "Member 'PlayerInfoGIS_SavePlayerInt::Value' has a wrong offset!");

// Function SCT.PlayerInfoGIS.SavePlayerObject
// 0x0018 (0x0018 - 0x0000)
struct PlayerInfoGIS_SavePlayerObject final
{
public:
	const class UTransitionDataEntry*             Entry;                                             // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PlayerId;                                          // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                Value;                                             // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerInfoGIS_SavePlayerObject) == 0x000008, "Wrong alignment on PlayerInfoGIS_SavePlayerObject");
static_assert(sizeof(PlayerInfoGIS_SavePlayerObject) == 0x000018, "Wrong size on PlayerInfoGIS_SavePlayerObject");
static_assert(offsetof(PlayerInfoGIS_SavePlayerObject, Entry) == 0x000000, "Member 'PlayerInfoGIS_SavePlayerObject::Entry' has a wrong offset!");
static_assert(offsetof(PlayerInfoGIS_SavePlayerObject, PlayerId) == 0x000008, "Member 'PlayerInfoGIS_SavePlayerObject::PlayerId' has a wrong offset!");
static_assert(offsetof(PlayerInfoGIS_SavePlayerObject, Value) == 0x000010, "Member 'PlayerInfoGIS_SavePlayerObject::Value' has a wrong offset!");

// Function SCT.PlayerInfoGIS.ContainsGlobalData
// 0x0010 (0x0010 - 0x0000)
struct PlayerInfoGIS_ContainsGlobalData final
{
public:
	const class UTransitionDataEntry*             Key;                                               // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(PlayerInfoGIS_ContainsGlobalData) == 0x000008, "Wrong alignment on PlayerInfoGIS_ContainsGlobalData");
static_assert(sizeof(PlayerInfoGIS_ContainsGlobalData) == 0x000010, "Wrong size on PlayerInfoGIS_ContainsGlobalData");
static_assert(offsetof(PlayerInfoGIS_ContainsGlobalData, Key) == 0x000000, "Member 'PlayerInfoGIS_ContainsGlobalData::Key' has a wrong offset!");
static_assert(offsetof(PlayerInfoGIS_ContainsGlobalData, ReturnValue) == 0x000008, "Member 'PlayerInfoGIS_ContainsGlobalData::ReturnValue' has a wrong offset!");

// Function SCT.PlayerInfoGIS.ContainsPlayerData
// 0x0010 (0x0010 - 0x0000)
struct PlayerInfoGIS_ContainsPlayerData final
{
public:
	const class UTransitionDataEntry*             Key;                                               // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PlayerId;                                          // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x000C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(PlayerInfoGIS_ContainsPlayerData) == 0x000008, "Wrong alignment on PlayerInfoGIS_ContainsPlayerData");
static_assert(sizeof(PlayerInfoGIS_ContainsPlayerData) == 0x000010, "Wrong size on PlayerInfoGIS_ContainsPlayerData");
static_assert(offsetof(PlayerInfoGIS_ContainsPlayerData, Key) == 0x000000, "Member 'PlayerInfoGIS_ContainsPlayerData::Key' has a wrong offset!");
static_assert(offsetof(PlayerInfoGIS_ContainsPlayerData, PlayerId) == 0x000008, "Member 'PlayerInfoGIS_ContainsPlayerData::PlayerId' has a wrong offset!");
static_assert(offsetof(PlayerInfoGIS_ContainsPlayerData, ReturnValue) == 0x00000C, "Member 'PlayerInfoGIS_ContainsPlayerData::ReturnValue' has a wrong offset!");

// Function SCT.PlayerInfoGIS.LoadGlobalBool
// 0x0010 (0x0010 - 0x0000)
struct PlayerInfoGIS_LoadGlobalBool final
{
public:
	const class UTransitionDataEntry*             Key;                                               // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Value;                                             // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0009(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x6];                                        // 0x000A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(PlayerInfoGIS_LoadGlobalBool) == 0x000008, "Wrong alignment on PlayerInfoGIS_LoadGlobalBool");
static_assert(sizeof(PlayerInfoGIS_LoadGlobalBool) == 0x000010, "Wrong size on PlayerInfoGIS_LoadGlobalBool");
static_assert(offsetof(PlayerInfoGIS_LoadGlobalBool, Key) == 0x000000, "Member 'PlayerInfoGIS_LoadGlobalBool::Key' has a wrong offset!");
static_assert(offsetof(PlayerInfoGIS_LoadGlobalBool, Value) == 0x000008, "Member 'PlayerInfoGIS_LoadGlobalBool::Value' has a wrong offset!");
static_assert(offsetof(PlayerInfoGIS_LoadGlobalBool, ReturnValue) == 0x000009, "Member 'PlayerInfoGIS_LoadGlobalBool::ReturnValue' has a wrong offset!");

// Function SCT.PlayerInfoGIS.LoadGlobalFloat
// 0x0010 (0x0010 - 0x0000)
struct PlayerInfoGIS_LoadGlobalFloat final
{
public:
	const class UTransitionDataEntry*             Key;                                               // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Value;                                             // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x000C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(PlayerInfoGIS_LoadGlobalFloat) == 0x000008, "Wrong alignment on PlayerInfoGIS_LoadGlobalFloat");
static_assert(sizeof(PlayerInfoGIS_LoadGlobalFloat) == 0x000010, "Wrong size on PlayerInfoGIS_LoadGlobalFloat");
static_assert(offsetof(PlayerInfoGIS_LoadGlobalFloat, Key) == 0x000000, "Member 'PlayerInfoGIS_LoadGlobalFloat::Key' has a wrong offset!");
static_assert(offsetof(PlayerInfoGIS_LoadGlobalFloat, Value) == 0x000008, "Member 'PlayerInfoGIS_LoadGlobalFloat::Value' has a wrong offset!");
static_assert(offsetof(PlayerInfoGIS_LoadGlobalFloat, ReturnValue) == 0x00000C, "Member 'PlayerInfoGIS_LoadGlobalFloat::ReturnValue' has a wrong offset!");

// Function SCT.PlayerInfoGIS.LoadGlobalInt
// 0x0010 (0x0010 - 0x0000)
struct PlayerInfoGIS_LoadGlobalInt final
{
public:
	const class UTransitionDataEntry*             Key;                                               // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Value;                                             // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x000C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(PlayerInfoGIS_LoadGlobalInt) == 0x000008, "Wrong alignment on PlayerInfoGIS_LoadGlobalInt");
static_assert(sizeof(PlayerInfoGIS_LoadGlobalInt) == 0x000010, "Wrong size on PlayerInfoGIS_LoadGlobalInt");
static_assert(offsetof(PlayerInfoGIS_LoadGlobalInt, Key) == 0x000000, "Member 'PlayerInfoGIS_LoadGlobalInt::Key' has a wrong offset!");
static_assert(offsetof(PlayerInfoGIS_LoadGlobalInt, Value) == 0x000008, "Member 'PlayerInfoGIS_LoadGlobalInt::Value' has a wrong offset!");
static_assert(offsetof(PlayerInfoGIS_LoadGlobalInt, ReturnValue) == 0x00000C, "Member 'PlayerInfoGIS_LoadGlobalInt::ReturnValue' has a wrong offset!");

// Function SCT.PlayerInfoGIS.LoadGlobalObject
// 0x0018 (0x0018 - 0x0000)
struct PlayerInfoGIS_LoadGlobalObject final
{
public:
	const class UTransitionDataEntry*             Key;                                               // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UObject*                                Value;                                             // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(PlayerInfoGIS_LoadGlobalObject) == 0x000008, "Wrong alignment on PlayerInfoGIS_LoadGlobalObject");
static_assert(sizeof(PlayerInfoGIS_LoadGlobalObject) == 0x000018, "Wrong size on PlayerInfoGIS_LoadGlobalObject");
static_assert(offsetof(PlayerInfoGIS_LoadGlobalObject, Key) == 0x000000, "Member 'PlayerInfoGIS_LoadGlobalObject::Key' has a wrong offset!");
static_assert(offsetof(PlayerInfoGIS_LoadGlobalObject, Value) == 0x000008, "Member 'PlayerInfoGIS_LoadGlobalObject::Value' has a wrong offset!");
static_assert(offsetof(PlayerInfoGIS_LoadGlobalObject, ReturnValue) == 0x000010, "Member 'PlayerInfoGIS_LoadGlobalObject::ReturnValue' has a wrong offset!");

// Function SCT.PlayerInfoGIS.LoadPlayerBool
// 0x0010 (0x0010 - 0x0000)
struct PlayerInfoGIS_LoadPlayerBool final
{
public:
	const class UTransitionDataEntry*             Key;                                               // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PlayerId;                                          // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Value;                                             // 0x000C(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x000D(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E[0x2];                                        // 0x000E(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(PlayerInfoGIS_LoadPlayerBool) == 0x000008, "Wrong alignment on PlayerInfoGIS_LoadPlayerBool");
static_assert(sizeof(PlayerInfoGIS_LoadPlayerBool) == 0x000010, "Wrong size on PlayerInfoGIS_LoadPlayerBool");
static_assert(offsetof(PlayerInfoGIS_LoadPlayerBool, Key) == 0x000000, "Member 'PlayerInfoGIS_LoadPlayerBool::Key' has a wrong offset!");
static_assert(offsetof(PlayerInfoGIS_LoadPlayerBool, PlayerId) == 0x000008, "Member 'PlayerInfoGIS_LoadPlayerBool::PlayerId' has a wrong offset!");
static_assert(offsetof(PlayerInfoGIS_LoadPlayerBool, Value) == 0x00000C, "Member 'PlayerInfoGIS_LoadPlayerBool::Value' has a wrong offset!");
static_assert(offsetof(PlayerInfoGIS_LoadPlayerBool, ReturnValue) == 0x00000D, "Member 'PlayerInfoGIS_LoadPlayerBool::ReturnValue' has a wrong offset!");

// Function SCT.PlayerInfoGIS.LoadPlayerFloat
// 0x0018 (0x0018 - 0x0000)
struct PlayerInfoGIS_LoadPlayerFloat final
{
public:
	const class UTransitionDataEntry*             Key;                                               // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PlayerId;                                          // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Value;                                             // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(PlayerInfoGIS_LoadPlayerFloat) == 0x000008, "Wrong alignment on PlayerInfoGIS_LoadPlayerFloat");
static_assert(sizeof(PlayerInfoGIS_LoadPlayerFloat) == 0x000018, "Wrong size on PlayerInfoGIS_LoadPlayerFloat");
static_assert(offsetof(PlayerInfoGIS_LoadPlayerFloat, Key) == 0x000000, "Member 'PlayerInfoGIS_LoadPlayerFloat::Key' has a wrong offset!");
static_assert(offsetof(PlayerInfoGIS_LoadPlayerFloat, PlayerId) == 0x000008, "Member 'PlayerInfoGIS_LoadPlayerFloat::PlayerId' has a wrong offset!");
static_assert(offsetof(PlayerInfoGIS_LoadPlayerFloat, Value) == 0x00000C, "Member 'PlayerInfoGIS_LoadPlayerFloat::Value' has a wrong offset!");
static_assert(offsetof(PlayerInfoGIS_LoadPlayerFloat, ReturnValue) == 0x000010, "Member 'PlayerInfoGIS_LoadPlayerFloat::ReturnValue' has a wrong offset!");

// Function SCT.PlayerInfoGIS.LoadPlayerInt
// 0x0018 (0x0018 - 0x0000)
struct PlayerInfoGIS_LoadPlayerInt final
{
public:
	const class UTransitionDataEntry*             Key;                                               // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PlayerId;                                          // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Value;                                             // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(PlayerInfoGIS_LoadPlayerInt) == 0x000008, "Wrong alignment on PlayerInfoGIS_LoadPlayerInt");
static_assert(sizeof(PlayerInfoGIS_LoadPlayerInt) == 0x000018, "Wrong size on PlayerInfoGIS_LoadPlayerInt");
static_assert(offsetof(PlayerInfoGIS_LoadPlayerInt, Key) == 0x000000, "Member 'PlayerInfoGIS_LoadPlayerInt::Key' has a wrong offset!");
static_assert(offsetof(PlayerInfoGIS_LoadPlayerInt, PlayerId) == 0x000008, "Member 'PlayerInfoGIS_LoadPlayerInt::PlayerId' has a wrong offset!");
static_assert(offsetof(PlayerInfoGIS_LoadPlayerInt, Value) == 0x00000C, "Member 'PlayerInfoGIS_LoadPlayerInt::Value' has a wrong offset!");
static_assert(offsetof(PlayerInfoGIS_LoadPlayerInt, ReturnValue) == 0x000010, "Member 'PlayerInfoGIS_LoadPlayerInt::ReturnValue' has a wrong offset!");

// Function SCT.PlayerInfoGIS.LoadPlayerObject
// 0x0020 (0x0020 - 0x0000)
struct PlayerInfoGIS_LoadPlayerObject final
{
public:
	const class UTransitionDataEntry*             Key;                                               // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PlayerId;                                          // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                Value;                                             // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(PlayerInfoGIS_LoadPlayerObject) == 0x000008, "Wrong alignment on PlayerInfoGIS_LoadPlayerObject");
static_assert(sizeof(PlayerInfoGIS_LoadPlayerObject) == 0x000020, "Wrong size on PlayerInfoGIS_LoadPlayerObject");
static_assert(offsetof(PlayerInfoGIS_LoadPlayerObject, Key) == 0x000000, "Member 'PlayerInfoGIS_LoadPlayerObject::Key' has a wrong offset!");
static_assert(offsetof(PlayerInfoGIS_LoadPlayerObject, PlayerId) == 0x000008, "Member 'PlayerInfoGIS_LoadPlayerObject::PlayerId' has a wrong offset!");
static_assert(offsetof(PlayerInfoGIS_LoadPlayerObject, Value) == 0x000010, "Member 'PlayerInfoGIS_LoadPlayerObject::Value' has a wrong offset!");
static_assert(offsetof(PlayerInfoGIS_LoadPlayerObject, ReturnValue) == 0x000018, "Member 'PlayerInfoGIS_LoadPlayerObject::ReturnValue' has a wrong offset!");

// Function SCT.PlayerListWidget.PlayerStateAdded
// 0x0008 (0x0008 - 0x0000)
struct PlayerListWidget_PlayerStateAdded final
{
public:
	class ASCTPlayerState*                        PlayerState;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerListWidget_PlayerStateAdded) == 0x000008, "Wrong alignment on PlayerListWidget_PlayerStateAdded");
static_assert(sizeof(PlayerListWidget_PlayerStateAdded) == 0x000008, "Wrong size on PlayerListWidget_PlayerStateAdded");
static_assert(offsetof(PlayerListWidget_PlayerStateAdded, PlayerState) == 0x000000, "Member 'PlayerListWidget_PlayerStateAdded::PlayerState' has a wrong offset!");

// Function SCT.PlayerListWidget.PlayerStateRemoved
// 0x0008 (0x0008 - 0x0000)
struct PlayerListWidget_PlayerStateRemoved final
{
public:
	class ASCTPlayerState*                        PlayerState;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerListWidget_PlayerStateRemoved) == 0x000008, "Wrong alignment on PlayerListWidget_PlayerStateRemoved");
static_assert(sizeof(PlayerListWidget_PlayerStateRemoved) == 0x000008, "Wrong size on PlayerListWidget_PlayerStateRemoved");
static_assert(offsetof(PlayerListWidget_PlayerStateRemoved, PlayerState) == 0x000000, "Member 'PlayerListWidget_PlayerStateRemoved::PlayerState' has a wrong offset!");

// Function SCT.PlayerProfileUserWidget.FindLevelFromExperience
// 0x0020 (0x0020 - 0x0000)
struct PlayerProfileUserWidget_FindLevelFromExperience final
{
public:
	int32                                         CurrentExperience;                                 // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<int32>                                 LevelRequirements;                                 // 0x0008(0x0010)(ConstParm, Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         OutLevel;                                          // 0x0018(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OutPercentToNextLevel;                             // 0x001C(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerProfileUserWidget_FindLevelFromExperience) == 0x000008, "Wrong alignment on PlayerProfileUserWidget_FindLevelFromExperience");
static_assert(sizeof(PlayerProfileUserWidget_FindLevelFromExperience) == 0x000020, "Wrong size on PlayerProfileUserWidget_FindLevelFromExperience");
static_assert(offsetof(PlayerProfileUserWidget_FindLevelFromExperience, CurrentExperience) == 0x000000, "Member 'PlayerProfileUserWidget_FindLevelFromExperience::CurrentExperience' has a wrong offset!");
static_assert(offsetof(PlayerProfileUserWidget_FindLevelFromExperience, LevelRequirements) == 0x000008, "Member 'PlayerProfileUserWidget_FindLevelFromExperience::LevelRequirements' has a wrong offset!");
static_assert(offsetof(PlayerProfileUserWidget_FindLevelFromExperience, OutLevel) == 0x000018, "Member 'PlayerProfileUserWidget_FindLevelFromExperience::OutLevel' has a wrong offset!");
static_assert(offsetof(PlayerProfileUserWidget_FindLevelFromExperience, OutPercentToNextLevel) == 0x00001C, "Member 'PlayerProfileUserWidget_FindLevelFromExperience::OutPercentToNextLevel' has a wrong offset!");

// Function SCT.PlayerStateEvent.Broadcast
// 0x0008 (0x0008 - 0x0000)
struct PlayerStateEvent_Broadcast final
{
public:
	class ASCTPlayerState*                        PlayerState;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerStateEvent_Broadcast) == 0x000008, "Wrong alignment on PlayerStateEvent_Broadcast");
static_assert(sizeof(PlayerStateEvent_Broadcast) == 0x000008, "Wrong size on PlayerStateEvent_Broadcast");
static_assert(offsetof(PlayerStateEvent_Broadcast, PlayerState) == 0x000000, "Member 'PlayerStateEvent_Broadcast::PlayerState' has a wrong offset!");

// Function SCT.PowerRuntimeDataCacher.CacheRuntimeData
// 0x0008 (0x0008 - 0x0000)
struct PowerRuntimeDataCacher_CacheRuntimeData final
{
public:
	struct FPowerRuntimeData                      RuntimeData;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(PowerRuntimeDataCacher_CacheRuntimeData) == 0x000004, "Wrong alignment on PowerRuntimeDataCacher_CacheRuntimeData");
static_assert(sizeof(PowerRuntimeDataCacher_CacheRuntimeData) == 0x000008, "Wrong size on PowerRuntimeDataCacher_CacheRuntimeData");
static_assert(offsetof(PowerRuntimeDataCacher_CacheRuntimeData, RuntimeData) == 0x000000, "Member 'PowerRuntimeDataCacher_CacheRuntimeData::RuntimeData' has a wrong offset!");

// Function SCT.PS5GameStatsGIS.AddStat
// 0x0010 (0x0010 - 0x0000)
struct PS5GameStatsGIS_AddStat final
{
public:
	class APlayerController*                      InPlayerController;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   InStatName;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PS5GameStatsGIS_AddStat) == 0x000008, "Wrong alignment on PS5GameStatsGIS_AddStat");
static_assert(sizeof(PS5GameStatsGIS_AddStat) == 0x000010, "Wrong size on PS5GameStatsGIS_AddStat");
static_assert(offsetof(PS5GameStatsGIS_AddStat, InPlayerController) == 0x000000, "Member 'PS5GameStatsGIS_AddStat::InPlayerController' has a wrong offset!");
static_assert(offsetof(PS5GameStatsGIS_AddStat, InStatName) == 0x000008, "Member 'PS5GameStatsGIS_AddStat::InStatName' has a wrong offset!");

// Function SCT.PS5GameStatsGIS.AddStatByPlayerID
// 0x000C (0x000C - 0x0000)
struct PS5GameStatsGIS_AddStatByPlayerID final
{
public:
	int32                                         InPlayerID;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   InStatName;                                        // 0x0004(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PS5GameStatsGIS_AddStatByPlayerID) == 0x000004, "Wrong alignment on PS5GameStatsGIS_AddStatByPlayerID");
static_assert(sizeof(PS5GameStatsGIS_AddStatByPlayerID) == 0x00000C, "Wrong size on PS5GameStatsGIS_AddStatByPlayerID");
static_assert(offsetof(PS5GameStatsGIS_AddStatByPlayerID, InPlayerID) == 0x000000, "Member 'PS5GameStatsGIS_AddStatByPlayerID::InPlayerID' has a wrong offset!");
static_assert(offsetof(PS5GameStatsGIS_AddStatByPlayerID, InStatName) == 0x000004, "Member 'PS5GameStatsGIS_AddStatByPlayerID::InStatName' has a wrong offset!");

// Function SCT.PS5GameStatsGIS.RunClientCommand
// 0x0018 (0x0018 - 0x0000)
struct PS5GameStatsGIS_RunClientCommand final
{
public:
	class APlayerController*                      InPlayerController;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPS5GameStatsClientCommand                    InClientCommand;                                   // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPS5GameStatsCommandData               InCommandData;                                     // 0x000C(0x0008)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(PS5GameStatsGIS_RunClientCommand) == 0x000008, "Wrong alignment on PS5GameStatsGIS_RunClientCommand");
static_assert(sizeof(PS5GameStatsGIS_RunClientCommand) == 0x000018, "Wrong size on PS5GameStatsGIS_RunClientCommand");
static_assert(offsetof(PS5GameStatsGIS_RunClientCommand, InPlayerController) == 0x000000, "Member 'PS5GameStatsGIS_RunClientCommand::InPlayerController' has a wrong offset!");
static_assert(offsetof(PS5GameStatsGIS_RunClientCommand, InClientCommand) == 0x000008, "Member 'PS5GameStatsGIS_RunClientCommand::InClientCommand' has a wrong offset!");
static_assert(offsetof(PS5GameStatsGIS_RunClientCommand, InCommandData) == 0x00000C, "Member 'PS5GameStatsGIS_RunClientCommand::InCommandData' has a wrong offset!");

// Function SCT.PS5MatchControllerGIS.CancelMatches
// 0x0010 (0x0010 - 0x0000)
struct PS5MatchControllerGIS_CancelMatches final
{
public:
	class APlayerController*                      PlayerController;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(PS5MatchControllerGIS_CancelMatches) == 0x000008, "Wrong alignment on PS5MatchControllerGIS_CancelMatches");
static_assert(sizeof(PS5MatchControllerGIS_CancelMatches) == 0x000010, "Wrong size on PS5MatchControllerGIS_CancelMatches");
static_assert(offsetof(PS5MatchControllerGIS_CancelMatches, PlayerController) == 0x000000, "Member 'PS5MatchControllerGIS_CancelMatches::PlayerController' has a wrong offset!");
static_assert(offsetof(PS5MatchControllerGIS_CancelMatches, ReturnValue) == 0x000008, "Member 'PS5MatchControllerGIS_CancelMatches::ReturnValue' has a wrong offset!");

// Function SCT.PS5MatchControllerGIS.ClientCreateNewMatch
// 0x0008 (0x0008 - 0x0000)
struct PS5MatchControllerGIS_ClientCreateNewMatch final
{
public:
	class APlayerController*                      PlayerController;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PS5MatchControllerGIS_ClientCreateNewMatch) == 0x000008, "Wrong alignment on PS5MatchControllerGIS_ClientCreateNewMatch");
static_assert(sizeof(PS5MatchControllerGIS_ClientCreateNewMatch) == 0x000008, "Wrong size on PS5MatchControllerGIS_ClientCreateNewMatch");
static_assert(offsetof(PS5MatchControllerGIS_ClientCreateNewMatch, PlayerController) == 0x000000, "Member 'PS5MatchControllerGIS_ClientCreateNewMatch::PlayerController' has a wrong offset!");

// Function SCT.PS5MatchControllerGIS.ClientFinishMatch
// 0x0018 (0x0018 - 0x0000)
struct PS5MatchControllerGIS_ClientFinishMatch final
{
public:
	class APlayerController*                      PlayerController;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 MatchID;                                           // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PS5MatchControllerGIS_ClientFinishMatch) == 0x000008, "Wrong alignment on PS5MatchControllerGIS_ClientFinishMatch");
static_assert(sizeof(PS5MatchControllerGIS_ClientFinishMatch) == 0x000018, "Wrong size on PS5MatchControllerGIS_ClientFinishMatch");
static_assert(offsetof(PS5MatchControllerGIS_ClientFinishMatch, PlayerController) == 0x000000, "Member 'PS5MatchControllerGIS_ClientFinishMatch::PlayerController' has a wrong offset!");
static_assert(offsetof(PS5MatchControllerGIS_ClientFinishMatch, MatchID) == 0x000008, "Member 'PS5MatchControllerGIS_ClientFinishMatch::MatchID' has a wrong offset!");

// Function SCT.PS5MatchControllerGIS.ClientHasMatch
// 0x0001 (0x0001 - 0x0000)
struct PS5MatchControllerGIS_ClientHasMatch final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PS5MatchControllerGIS_ClientHasMatch) == 0x000001, "Wrong alignment on PS5MatchControllerGIS_ClientHasMatch");
static_assert(sizeof(PS5MatchControllerGIS_ClientHasMatch) == 0x000001, "Wrong size on PS5MatchControllerGIS_ClientHasMatch");
static_assert(offsetof(PS5MatchControllerGIS_ClientHasMatch, ReturnValue) == 0x000000, "Member 'PS5MatchControllerGIS_ClientHasMatch::ReturnValue' has a wrong offset!");

// Function SCT.PS5MatchControllerGIS.ClientJoinMatch
// 0x0018 (0x0018 - 0x0000)
struct PS5MatchControllerGIS_ClientJoinMatch final
{
public:
	class APlayerController*                      PlayerController;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 MatchID;                                           // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PS5MatchControllerGIS_ClientJoinMatch) == 0x000008, "Wrong alignment on PS5MatchControllerGIS_ClientJoinMatch");
static_assert(sizeof(PS5MatchControllerGIS_ClientJoinMatch) == 0x000018, "Wrong size on PS5MatchControllerGIS_ClientJoinMatch");
static_assert(offsetof(PS5MatchControllerGIS_ClientJoinMatch, PlayerController) == 0x000000, "Member 'PS5MatchControllerGIS_ClientJoinMatch::PlayerController' has a wrong offset!");
static_assert(offsetof(PS5MatchControllerGIS_ClientJoinMatch, MatchID) == 0x000008, "Member 'PS5MatchControllerGIS_ClientJoinMatch::MatchID' has a wrong offset!");

// Function SCT.PS5MatchControllerGIS.ClientLeaveMatch
// 0x0008 (0x0008 - 0x0000)
struct PS5MatchControllerGIS_ClientLeaveMatch final
{
public:
	class APlayerController*                      PlayerController;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PS5MatchControllerGIS_ClientLeaveMatch) == 0x000008, "Wrong alignment on PS5MatchControllerGIS_ClientLeaveMatch");
static_assert(sizeof(PS5MatchControllerGIS_ClientLeaveMatch) == 0x000008, "Wrong size on PS5MatchControllerGIS_ClientLeaveMatch");
static_assert(offsetof(PS5MatchControllerGIS_ClientLeaveMatch, PlayerController) == 0x000000, "Member 'PS5MatchControllerGIS_ClientLeaveMatch::PlayerController' has a wrong offset!");

// Function SCT.PS5MatchControllerGIS.ClientReceiveServerClientStateData
// 0x0020 (0x0020 - 0x0000)
struct PS5MatchControllerGIS_ClientReceiveServerClientStateData final
{
public:
	struct FPS5MatchControllerClientStateData     PS5MatchControllerClientStateData;                 // 0x0000(0x0020)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(PS5MatchControllerGIS_ClientReceiveServerClientStateData) == 0x000008, "Wrong alignment on PS5MatchControllerGIS_ClientReceiveServerClientStateData");
static_assert(sizeof(PS5MatchControllerGIS_ClientReceiveServerClientStateData) == 0x000020, "Wrong size on PS5MatchControllerGIS_ClientReceiveServerClientStateData");
static_assert(offsetof(PS5MatchControllerGIS_ClientReceiveServerClientStateData, PS5MatchControllerClientStateData) == 0x000000, "Member 'PS5MatchControllerGIS_ClientReceiveServerClientStateData::PS5MatchControllerClientStateData' has a wrong offset!");

// Function SCT.PS5MatchControllerGIS.ClientReportMatchEnd
// 0x0030 (0x0030 - 0x0000)
struct PS5MatchControllerGIS_ClientReportMatchEnd final
{
public:
	class APlayerController*                      PlayerController;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 MatchID;                                           // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FMatchEndData                          MatchEndData;                                      // 0x0018(0x0018)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(PS5MatchControllerGIS_ClientReportMatchEnd) == 0x000008, "Wrong alignment on PS5MatchControllerGIS_ClientReportMatchEnd");
static_assert(sizeof(PS5MatchControllerGIS_ClientReportMatchEnd) == 0x000030, "Wrong size on PS5MatchControllerGIS_ClientReportMatchEnd");
static_assert(offsetof(PS5MatchControllerGIS_ClientReportMatchEnd, PlayerController) == 0x000000, "Member 'PS5MatchControllerGIS_ClientReportMatchEnd::PlayerController' has a wrong offset!");
static_assert(offsetof(PS5MatchControllerGIS_ClientReportMatchEnd, MatchID) == 0x000008, "Member 'PS5MatchControllerGIS_ClientReportMatchEnd::MatchID' has a wrong offset!");
static_assert(offsetof(PS5MatchControllerGIS_ClientReportMatchEnd, MatchEndData) == 0x000018, "Member 'PS5MatchControllerGIS_ClientReportMatchEnd::MatchEndData' has a wrong offset!");

// Function SCT.PS5MatchControllerGIS.ClientResetActivity
// 0x0008 (0x0008 - 0x0000)
struct PS5MatchControllerGIS_ClientResetActivity final
{
public:
	class APlayerController*                      PlayerController;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PS5MatchControllerGIS_ClientResetActivity) == 0x000008, "Wrong alignment on PS5MatchControllerGIS_ClientResetActivity");
static_assert(sizeof(PS5MatchControllerGIS_ClientResetActivity) == 0x000008, "Wrong size on PS5MatchControllerGIS_ClientResetActivity");
static_assert(offsetof(PS5MatchControllerGIS_ClientResetActivity, PlayerController) == 0x000000, "Member 'PS5MatchControllerGIS_ClientResetActivity::PlayerController' has a wrong offset!");

// Function SCT.PS5MatchControllerGIS.ClientSaveMatch
// 0x0018 (0x0018 - 0x0000)
struct PS5MatchControllerGIS_ClientSaveMatch final
{
public:
	class APlayerController*                      PlayerController;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 MatchID;                                           // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PS5MatchControllerGIS_ClientSaveMatch) == 0x000008, "Wrong alignment on PS5MatchControllerGIS_ClientSaveMatch");
static_assert(sizeof(PS5MatchControllerGIS_ClientSaveMatch) == 0x000018, "Wrong size on PS5MatchControllerGIS_ClientSaveMatch");
static_assert(offsetof(PS5MatchControllerGIS_ClientSaveMatch, PlayerController) == 0x000000, "Member 'PS5MatchControllerGIS_ClientSaveMatch::PlayerController' has a wrong offset!");
static_assert(offsetof(PS5MatchControllerGIS_ClientSaveMatch, MatchID) == 0x000008, "Member 'PS5MatchControllerGIS_ClientSaveMatch::MatchID' has a wrong offset!");

// Function SCT.PS5MatchControllerGIS.ClientShowReviewMatchDialog
// 0x0008 (0x0008 - 0x0000)
struct PS5MatchControllerGIS_ClientShowReviewMatchDialog final
{
public:
	class APlayerController*                      PlayerController;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PS5MatchControllerGIS_ClientShowReviewMatchDialog) == 0x000008, "Wrong alignment on PS5MatchControllerGIS_ClientShowReviewMatchDialog");
static_assert(sizeof(PS5MatchControllerGIS_ClientShowReviewMatchDialog) == 0x000008, "Wrong size on PS5MatchControllerGIS_ClientShowReviewMatchDialog");
static_assert(offsetof(PS5MatchControllerGIS_ClientShowReviewMatchDialog, PlayerController) == 0x000000, "Member 'PS5MatchControllerGIS_ClientShowReviewMatchDialog::PlayerController' has a wrong offset!");

// Function SCT.PS5MatchControllerGIS.ClientUpdateClientStates
// 0x0030 (0x0030 - 0x0000)
struct PS5MatchControllerGIS_ClientUpdateClientStates final
{
public:
	class APlayerController*                      PlayerController;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 MatchID;                                           // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FMatchEndData                          MatchData;                                         // 0x0018(0x0018)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(PS5MatchControllerGIS_ClientUpdateClientStates) == 0x000008, "Wrong alignment on PS5MatchControllerGIS_ClientUpdateClientStates");
static_assert(sizeof(PS5MatchControllerGIS_ClientUpdateClientStates) == 0x000030, "Wrong size on PS5MatchControllerGIS_ClientUpdateClientStates");
static_assert(offsetof(PS5MatchControllerGIS_ClientUpdateClientStates, PlayerController) == 0x000000, "Member 'PS5MatchControllerGIS_ClientUpdateClientStates::PlayerController' has a wrong offset!");
static_assert(offsetof(PS5MatchControllerGIS_ClientUpdateClientStates, MatchID) == 0x000008, "Member 'PS5MatchControllerGIS_ClientUpdateClientStates::MatchID' has a wrong offset!");
static_assert(offsetof(PS5MatchControllerGIS_ClientUpdateClientStates, MatchData) == 0x000018, "Member 'PS5MatchControllerGIS_ClientUpdateClientStates::MatchData' has a wrong offset!");

// Function SCT.PS5MatchControllerGIS.ClientUpdateDetailsEndMatch
// 0x0030 (0x0030 - 0x0000)
struct PS5MatchControllerGIS_ClientUpdateDetailsEndMatch final
{
public:
	class APlayerController*                      PlayerController;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 MatchID;                                           // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FMatchEndData                          MatchEndData;                                      // 0x0018(0x0018)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(PS5MatchControllerGIS_ClientUpdateDetailsEndMatch) == 0x000008, "Wrong alignment on PS5MatchControllerGIS_ClientUpdateDetailsEndMatch");
static_assert(sizeof(PS5MatchControllerGIS_ClientUpdateDetailsEndMatch) == 0x000030, "Wrong size on PS5MatchControllerGIS_ClientUpdateDetailsEndMatch");
static_assert(offsetof(PS5MatchControllerGIS_ClientUpdateDetailsEndMatch, PlayerController) == 0x000000, "Member 'PS5MatchControllerGIS_ClientUpdateDetailsEndMatch::PlayerController' has a wrong offset!");
static_assert(offsetof(PS5MatchControllerGIS_ClientUpdateDetailsEndMatch, MatchID) == 0x000008, "Member 'PS5MatchControllerGIS_ClientUpdateDetailsEndMatch::MatchID' has a wrong offset!");
static_assert(offsetof(PS5MatchControllerGIS_ClientUpdateDetailsEndMatch, MatchEndData) == 0x000018, "Member 'PS5MatchControllerGIS_ClientUpdateDetailsEndMatch::MatchEndData' has a wrong offset!");

// Function SCT.PS5MatchControllerGIS.ClientUpdateInitialMatchDetails
// 0x0018 (0x0018 - 0x0000)
struct PS5MatchControllerGIS_ClientUpdateInitialMatchDetails final
{
public:
	class APlayerController*                      PlayerController;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 MatchID;                                           // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PS5MatchControllerGIS_ClientUpdateInitialMatchDetails) == 0x000008, "Wrong alignment on PS5MatchControllerGIS_ClientUpdateInitialMatchDetails");
static_assert(sizeof(PS5MatchControllerGIS_ClientUpdateInitialMatchDetails) == 0x000018, "Wrong size on PS5MatchControllerGIS_ClientUpdateInitialMatchDetails");
static_assert(offsetof(PS5MatchControllerGIS_ClientUpdateInitialMatchDetails, PlayerController) == 0x000000, "Member 'PS5MatchControllerGIS_ClientUpdateInitialMatchDetails::PlayerController' has a wrong offset!");
static_assert(offsetof(PS5MatchControllerGIS_ClientUpdateInitialMatchDetails, MatchID) == 0x000008, "Member 'PS5MatchControllerGIS_ClientUpdateInitialMatchDetails::MatchID' has a wrong offset!");

// Function SCT.PS5MatchControllerGIS.ClientUpdateStatusStartMatch
// 0x0018 (0x0018 - 0x0000)
struct PS5MatchControllerGIS_ClientUpdateStatusStartMatch final
{
public:
	class APlayerController*                      PlayerController;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 MatchID;                                           // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PS5MatchControllerGIS_ClientUpdateStatusStartMatch) == 0x000008, "Wrong alignment on PS5MatchControllerGIS_ClientUpdateStatusStartMatch");
static_assert(sizeof(PS5MatchControllerGIS_ClientUpdateStatusStartMatch) == 0x000018, "Wrong size on PS5MatchControllerGIS_ClientUpdateStatusStartMatch");
static_assert(offsetof(PS5MatchControllerGIS_ClientUpdateStatusStartMatch, PlayerController) == 0x000000, "Member 'PS5MatchControllerGIS_ClientUpdateStatusStartMatch::PlayerController' has a wrong offset!");
static_assert(offsetof(PS5MatchControllerGIS_ClientUpdateStatusStartMatch, MatchID) == 0x000008, "Member 'PS5MatchControllerGIS_ClientUpdateStatusStartMatch::MatchID' has a wrong offset!");

// Function SCT.PS5MatchControllerGIS.LoadData
// 0x0008 (0x0008 - 0x0000)
struct PS5MatchControllerGIS_LoadData final
{
public:
	class UObject*                                Context;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PS5MatchControllerGIS_LoadData) == 0x000008, "Wrong alignment on PS5MatchControllerGIS_LoadData");
static_assert(sizeof(PS5MatchControllerGIS_LoadData) == 0x000008, "Wrong size on PS5MatchControllerGIS_LoadData");
static_assert(offsetof(PS5MatchControllerGIS_LoadData, Context) == 0x000000, "Member 'PS5MatchControllerGIS_LoadData::Context' has a wrong offset!");

// Function SCT.PS5MatchControllerGIS.RunClientCommand
// 0x0040 (0x0040 - 0x0000)
struct PS5MatchControllerGIS_RunClientCommand final
{
public:
	class APlayerController*                      PlayerController;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPS5MatchClientCommand                        ClientCommand;                                     // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPS5MatchCommandData                   CommandData;                                       // 0x0010(0x0030)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(PS5MatchControllerGIS_RunClientCommand) == 0x000008, "Wrong alignment on PS5MatchControllerGIS_RunClientCommand");
static_assert(sizeof(PS5MatchControllerGIS_RunClientCommand) == 0x000040, "Wrong size on PS5MatchControllerGIS_RunClientCommand");
static_assert(offsetof(PS5MatchControllerGIS_RunClientCommand, PlayerController) == 0x000000, "Member 'PS5MatchControllerGIS_RunClientCommand::PlayerController' has a wrong offset!");
static_assert(offsetof(PS5MatchControllerGIS_RunClientCommand, ClientCommand) == 0x000008, "Member 'PS5MatchControllerGIS_RunClientCommand::ClientCommand' has a wrong offset!");
static_assert(offsetof(PS5MatchControllerGIS_RunClientCommand, CommandData) == 0x000010, "Member 'PS5MatchControllerGIS_RunClientCommand::CommandData' has a wrong offset!");

// Function SCT.PS5MatchControllerGIS.ServerClientJoinMatch
// 0x0008 (0x0008 - 0x0000)
struct PS5MatchControllerGIS_ServerClientJoinMatch final
{
public:
	class APlayerController*                      PlayerController;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PS5MatchControllerGIS_ServerClientJoinMatch) == 0x000008, "Wrong alignment on PS5MatchControllerGIS_ServerClientJoinMatch");
static_assert(sizeof(PS5MatchControllerGIS_ServerClientJoinMatch) == 0x000008, "Wrong size on PS5MatchControllerGIS_ServerClientJoinMatch");
static_assert(offsetof(PS5MatchControllerGIS_ServerClientJoinMatch, PlayerController) == 0x000000, "Member 'PS5MatchControllerGIS_ServerClientJoinMatch::PlayerController' has a wrong offset!");

// Function SCT.PS5MatchControllerGIS.ServerEndMatch
// 0x0018 (0x0018 - 0x0000)
struct PS5MatchControllerGIS_ServerEndMatch final
{
public:
	struct FMatchEndData                          MatchEndData;                                      // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(PS5MatchControllerGIS_ServerEndMatch) == 0x000008, "Wrong alignment on PS5MatchControllerGIS_ServerEndMatch");
static_assert(sizeof(PS5MatchControllerGIS_ServerEndMatch) == 0x000018, "Wrong size on PS5MatchControllerGIS_ServerEndMatch");
static_assert(offsetof(PS5MatchControllerGIS_ServerEndMatch, MatchEndData) == 0x000000, "Member 'PS5MatchControllerGIS_ServerEndMatch::MatchEndData' has a wrong offset!");

// Function SCT.PS5MatchControllerGIS.ServerProcessCommandResult
// 0x0040 (0x0040 - 0x0000)
struct PS5MatchControllerGIS_ServerProcessCommandResult final
{
public:
	class APlayerController*                      PlayerController;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPS5MatchServerCommandResult                  CommandResult;                                     // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPS5MatchCommandData                   CommandData;                                       // 0x0010(0x0030)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(PS5MatchControllerGIS_ServerProcessCommandResult) == 0x000008, "Wrong alignment on PS5MatchControllerGIS_ServerProcessCommandResult");
static_assert(sizeof(PS5MatchControllerGIS_ServerProcessCommandResult) == 0x000040, "Wrong size on PS5MatchControllerGIS_ServerProcessCommandResult");
static_assert(offsetof(PS5MatchControllerGIS_ServerProcessCommandResult, PlayerController) == 0x000000, "Member 'PS5MatchControllerGIS_ServerProcessCommandResult::PlayerController' has a wrong offset!");
static_assert(offsetof(PS5MatchControllerGIS_ServerProcessCommandResult, CommandResult) == 0x000008, "Member 'PS5MatchControllerGIS_ServerProcessCommandResult::CommandResult' has a wrong offset!");
static_assert(offsetof(PS5MatchControllerGIS_ServerProcessCommandResult, CommandData) == 0x000010, "Member 'PS5MatchControllerGIS_ServerProcessCommandResult::CommandData' has a wrong offset!");

// Function SCT.PS5MatchControllerGIS.ServerRemoveClient
// 0x0008 (0x0008 - 0x0000)
struct PS5MatchControllerGIS_ServerRemoveClient final
{
public:
	class APlayerController*                      PlayerController;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PS5MatchControllerGIS_ServerRemoveClient) == 0x000008, "Wrong alignment on PS5MatchControllerGIS_ServerRemoveClient");
static_assert(sizeof(PS5MatchControllerGIS_ServerRemoveClient) == 0x000008, "Wrong size on PS5MatchControllerGIS_ServerRemoveClient");
static_assert(offsetof(PS5MatchControllerGIS_ServerRemoveClient, PlayerController) == 0x000000, "Member 'PS5MatchControllerGIS_ServerRemoveClient::PlayerController' has a wrong offset!");

// Function SCT.GetCloudStringDataCallbackProxy.GetCloudRecordValue
// 0x0020 (0x0020 - 0x0000)
struct GetCloudStringDataCallbackProxy_GetCloudRecordValue final
{
public:
	EUserRecordType                               UserRecord;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 FieldName;                                         // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UGetCloudStringDataCallbackProxy*       ReturnValue;                                       // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GetCloudStringDataCallbackProxy_GetCloudRecordValue) == 0x000008, "Wrong alignment on GetCloudStringDataCallbackProxy_GetCloudRecordValue");
static_assert(sizeof(GetCloudStringDataCallbackProxy_GetCloudRecordValue) == 0x000020, "Wrong size on GetCloudStringDataCallbackProxy_GetCloudRecordValue");
static_assert(offsetof(GetCloudStringDataCallbackProxy_GetCloudRecordValue, UserRecord) == 0x000000, "Member 'GetCloudStringDataCallbackProxy_GetCloudRecordValue::UserRecord' has a wrong offset!");
static_assert(offsetof(GetCloudStringDataCallbackProxy_GetCloudRecordValue, FieldName) == 0x000008, "Member 'GetCloudStringDataCallbackProxy_GetCloudRecordValue::FieldName' has a wrong offset!");
static_assert(offsetof(GetCloudStringDataCallbackProxy_GetCloudRecordValue, ReturnValue) == 0x000018, "Member 'GetCloudStringDataCallbackProxy_GetCloudRecordValue::ReturnValue' has a wrong offset!");

// Function SCT.SCTGameInstance.DoPendingXboxLogin
// 0x0001 (0x0001 - 0x0000)
struct SCTGameInstance_DoPendingXboxLogin final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SCTGameInstance_DoPendingXboxLogin) == 0x000001, "Wrong alignment on SCTGameInstance_DoPendingXboxLogin");
static_assert(sizeof(SCTGameInstance_DoPendingXboxLogin) == 0x000001, "Wrong size on SCTGameInstance_DoPendingXboxLogin");
static_assert(offsetof(SCTGameInstance_DoPendingXboxLogin, ReturnValue) == 0x000000, "Member 'SCTGameInstance_DoPendingXboxLogin::ReturnValue' has a wrong offset!");

// Function SCT.SCTGameInstance.GetCurrentXboxControllerID
// 0x0004 (0x0004 - 0x0000)
struct SCTGameInstance_GetCurrentXboxControllerID final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SCTGameInstance_GetCurrentXboxControllerID) == 0x000004, "Wrong alignment on SCTGameInstance_GetCurrentXboxControllerID");
static_assert(sizeof(SCTGameInstance_GetCurrentXboxControllerID) == 0x000004, "Wrong size on SCTGameInstance_GetCurrentXboxControllerID");
static_assert(offsetof(SCTGameInstance_GetCurrentXboxControllerID, ReturnValue) == 0x000000, "Member 'SCTGameInstance_GetCurrentXboxControllerID::ReturnValue' has a wrong offset!");

// Function SCT.SCTGameInstance.GetLastControllerType
// 0x0001 (0x0001 - 0x0000)
struct SCTGameInstance_GetLastControllerType final
{
public:
	ESCTControllerType                            ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SCTGameInstance_GetLastControllerType) == 0x000001, "Wrong alignment on SCTGameInstance_GetLastControllerType");
static_assert(sizeof(SCTGameInstance_GetLastControllerType) == 0x000001, "Wrong size on SCTGameInstance_GetLastControllerType");
static_assert(offsetof(SCTGameInstance_GetLastControllerType, ReturnValue) == 0x000000, "Member 'SCTGameInstance_GetLastControllerType::ReturnValue' has a wrong offset!");

// Function SCT.SCTGameInstance.HasPendingXboxLogin
// 0x0001 (0x0001 - 0x0000)
struct SCTGameInstance_HasPendingXboxLogin final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SCTGameInstance_HasPendingXboxLogin) == 0x000001, "Wrong alignment on SCTGameInstance_HasPendingXboxLogin");
static_assert(sizeof(SCTGameInstance_HasPendingXboxLogin) == 0x000001, "Wrong size on SCTGameInstance_HasPendingXboxLogin");
static_assert(offsetof(SCTGameInstance_HasPendingXboxLogin, ReturnValue) == 0x000000, "Member 'SCTGameInstance_HasPendingXboxLogin::ReturnValue' has a wrong offset!");

// Function SCT.SCTGameInstance.IsXboxUserLoggedIn
// 0x0001 (0x0001 - 0x0000)
struct SCTGameInstance_IsXboxUserLoggedIn final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SCTGameInstance_IsXboxUserLoggedIn) == 0x000001, "Wrong alignment on SCTGameInstance_IsXboxUserLoggedIn");
static_assert(sizeof(SCTGameInstance_IsXboxUserLoggedIn) == 0x000001, "Wrong size on SCTGameInstance_IsXboxUserLoggedIn");
static_assert(offsetof(SCTGameInstance_IsXboxUserLoggedIn, ReturnValue) == 0x000000, "Member 'SCTGameInstance_IsXboxUserLoggedIn::ReturnValue' has a wrong offset!");

// Function SCT.SCTGameInstance.K2_OnControllerConnectionStateChanged
// 0x000C (0x000C - 0x0000)
struct SCTGameInstance_K2_OnControllerConnectionStateChanged final
{
public:
	bool                                          Connected;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         UserId;                                            // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ControllerId;                                      // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SCTGameInstance_K2_OnControllerConnectionStateChanged) == 0x000004, "Wrong alignment on SCTGameInstance_K2_OnControllerConnectionStateChanged");
static_assert(sizeof(SCTGameInstance_K2_OnControllerConnectionStateChanged) == 0x00000C, "Wrong size on SCTGameInstance_K2_OnControllerConnectionStateChanged");
static_assert(offsetof(SCTGameInstance_K2_OnControllerConnectionStateChanged, Connected) == 0x000000, "Member 'SCTGameInstance_K2_OnControllerConnectionStateChanged::Connected' has a wrong offset!");
static_assert(offsetof(SCTGameInstance_K2_OnControllerConnectionStateChanged, UserId) == 0x000004, "Member 'SCTGameInstance_K2_OnControllerConnectionStateChanged::UserId' has a wrong offset!");
static_assert(offsetof(SCTGameInstance_K2_OnControllerConnectionStateChanged, ControllerId) == 0x000008, "Member 'SCTGameInstance_K2_OnControllerConnectionStateChanged::ControllerId' has a wrong offset!");

// Function SCT.SCTGameInstance.OnLevelRemovedFromWorld
// 0x0010 (0x0010 - 0x0000)
struct SCTGameInstance_OnLevelRemovedFromWorld final
{
public:
	class ULevel*                                 InLevel;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UWorld*                                 InWorld;                                           // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SCTGameInstance_OnLevelRemovedFromWorld) == 0x000008, "Wrong alignment on SCTGameInstance_OnLevelRemovedFromWorld");
static_assert(sizeof(SCTGameInstance_OnLevelRemovedFromWorld) == 0x000010, "Wrong size on SCTGameInstance_OnLevelRemovedFromWorld");
static_assert(offsetof(SCTGameInstance_OnLevelRemovedFromWorld, InLevel) == 0x000000, "Member 'SCTGameInstance_OnLevelRemovedFromWorld::InLevel' has a wrong offset!");
static_assert(offsetof(SCTGameInstance_OnLevelRemovedFromWorld, InWorld) == 0x000008, "Member 'SCTGameInstance_OnLevelRemovedFromWorld::InWorld' has a wrong offset!");

// Function SCT.SCTGameInstance.OpenIntermediateLevel
// 0x0004 (0x0004 - 0x0000)
struct SCTGameInstance_OpenIntermediateLevel final
{
public:
	int32                                         Index_0;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SCTGameInstance_OpenIntermediateLevel) == 0x000004, "Wrong alignment on SCTGameInstance_OpenIntermediateLevel");
static_assert(sizeof(SCTGameInstance_OpenIntermediateLevel) == 0x000004, "Wrong size on SCTGameInstance_OpenIntermediateLevel");
static_assert(offsetof(SCTGameInstance_OpenIntermediateLevel, Index_0) == 0x000000, "Member 'SCTGameInstance_OpenIntermediateLevel::Index_0' has a wrong offset!");

// Function SCT.SCTGameInstance.UpdateControllerType
// 0x0018 (0x0018 - 0x0000)
struct SCTGameInstance_UpdateControllerType final
{
public:
	struct FKey                                   LastKeyPressed;                                    // 0x0000(0x0018)(Parm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SCTGameInstance_UpdateControllerType) == 0x000008, "Wrong alignment on SCTGameInstance_UpdateControllerType");
static_assert(sizeof(SCTGameInstance_UpdateControllerType) == 0x000018, "Wrong size on SCTGameInstance_UpdateControllerType");
static_assert(offsetof(SCTGameInstance_UpdateControllerType, LastKeyPressed) == 0x000000, "Member 'SCTGameInstance_UpdateControllerType::LastKeyPressed' has a wrong offset!");

// Function SCT.SCTGameMode.DisableEndConditionInDevelopment
// 0x0001 (0x0001 - 0x0000)
struct SCTGameMode_DisableEndConditionInDevelopment final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SCTGameMode_DisableEndConditionInDevelopment) == 0x000001, "Wrong alignment on SCTGameMode_DisableEndConditionInDevelopment");
static_assert(sizeof(SCTGameMode_DisableEndConditionInDevelopment) == 0x000001, "Wrong size on SCTGameMode_DisableEndConditionInDevelopment");
static_assert(offsetof(SCTGameMode_DisableEndConditionInDevelopment, ReturnValue) == 0x000000, "Member 'SCTGameMode_DisableEndConditionInDevelopment::ReturnValue' has a wrong offset!");

// Function SCT.SCTGameMode.EndMatchWithCondition
// 0x0001 (0x0001 - 0x0000)
struct SCTGameMode_EndMatchWithCondition final
{
public:
	EEndConditions                                EndCondition;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SCTGameMode_EndMatchWithCondition) == 0x000001, "Wrong alignment on SCTGameMode_EndMatchWithCondition");
static_assert(sizeof(SCTGameMode_EndMatchWithCondition) == 0x000001, "Wrong size on SCTGameMode_EndMatchWithCondition");
static_assert(offsetof(SCTGameMode_EndMatchWithCondition, EndCondition) == 0x000000, "Member 'SCTGameMode_EndMatchWithCondition::EndCondition' has a wrong offset!");

// Function SCT.SCTGameMode.GetAllAlivePersonoids
// 0x0010 (0x0010 - 0x0000)
struct SCTGameMode_GetAllAlivePersonoids final
{
public:
	TArray<class ASCTPlayerState*>                ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(SCTGameMode_GetAllAlivePersonoids) == 0x000008, "Wrong alignment on SCTGameMode_GetAllAlivePersonoids");
static_assert(sizeof(SCTGameMode_GetAllAlivePersonoids) == 0x000010, "Wrong size on SCTGameMode_GetAllAlivePersonoids");
static_assert(offsetof(SCTGameMode_GetAllAlivePersonoids, ReturnValue) == 0x000000, "Member 'SCTGameMode_GetAllAlivePersonoids::ReturnValue' has a wrong offset!");

// Function SCT.SCTGameMode.GetAllAlivePlayers
// 0x0010 (0x0010 - 0x0000)
struct SCTGameMode_GetAllAlivePlayers final
{
public:
	TArray<class ASCTPlayerState*>                ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(SCTGameMode_GetAllAlivePlayers) == 0x000008, "Wrong alignment on SCTGameMode_GetAllAlivePlayers");
static_assert(sizeof(SCTGameMode_GetAllAlivePlayers) == 0x000010, "Wrong size on SCTGameMode_GetAllAlivePlayers");
static_assert(offsetof(SCTGameMode_GetAllAlivePlayers, ReturnValue) == 0x000000, "Member 'SCTGameMode_GetAllAlivePlayers::ReturnValue' has a wrong offset!");

// Function SCT.SCTGameMode.GetAllAliveResidents
// 0x0010 (0x0010 - 0x0000)
struct SCTGameMode_GetAllAliveResidents final
{
public:
	TArray<class ASCTPlayerState*>                ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(SCTGameMode_GetAllAliveResidents) == 0x000008, "Wrong alignment on SCTGameMode_GetAllAliveResidents");
static_assert(sizeof(SCTGameMode_GetAllAliveResidents) == 0x000010, "Wrong size on SCTGameMode_GetAllAliveResidents");
static_assert(offsetof(SCTGameMode_GetAllAliveResidents, ReturnValue) == 0x000000, "Member 'SCTGameMode_GetAllAliveResidents::ReturnValue' has a wrong offset!");

// Function SCT.SCTGameMode.GetAllDeadPlayers
// 0x0010 (0x0010 - 0x0000)
struct SCTGameMode_GetAllDeadPlayers final
{
public:
	TArray<class ASCTPlayerState*>                ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(SCTGameMode_GetAllDeadPlayers) == 0x000008, "Wrong alignment on SCTGameMode_GetAllDeadPlayers");
static_assert(sizeof(SCTGameMode_GetAllDeadPlayers) == 0x000010, "Wrong size on SCTGameMode_GetAllDeadPlayers");
static_assert(offsetof(SCTGameMode_GetAllDeadPlayers, ReturnValue) == 0x000000, "Member 'SCTGameMode_GetAllDeadPlayers::ReturnValue' has a wrong offset!");

// Function SCT.SCTGameMode.GetAllPersonoids
// 0x0010 (0x0010 - 0x0000)
struct SCTGameMode_GetAllPersonoids final
{
public:
	TArray<class ASCTPlayerState*>                ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(SCTGameMode_GetAllPersonoids) == 0x000008, "Wrong alignment on SCTGameMode_GetAllPersonoids");
static_assert(sizeof(SCTGameMode_GetAllPersonoids) == 0x000010, "Wrong size on SCTGameMode_GetAllPersonoids");
static_assert(offsetof(SCTGameMode_GetAllPersonoids, ReturnValue) == 0x000000, "Member 'SCTGameMode_GetAllPersonoids::ReturnValue' has a wrong offset!");

// Function SCT.SCTGameMode.GetAllResidents
// 0x0010 (0x0010 - 0x0000)
struct SCTGameMode_GetAllResidents final
{
public:
	TArray<class ASCTPlayerState*>                ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(SCTGameMode_GetAllResidents) == 0x000008, "Wrong alignment on SCTGameMode_GetAllResidents");
static_assert(sizeof(SCTGameMode_GetAllResidents) == 0x000010, "Wrong size on SCTGameMode_GetAllResidents");
static_assert(offsetof(SCTGameMode_GetAllResidents, ReturnValue) == 0x000000, "Member 'SCTGameMode_GetAllResidents::ReturnValue' has a wrong offset!");

// Function SCT.SCTGameMode.GiveScore
// 0x0010 (0x0010 - 0x0000)
struct SCTGameMode_GiveScore final
{
public:
	class FName                                   ScoreName;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ASCTPlayerState*                        PlayerState;                                       // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SCTGameMode_GiveScore) == 0x000008, "Wrong alignment on SCTGameMode_GiveScore");
static_assert(sizeof(SCTGameMode_GiveScore) == 0x000010, "Wrong size on SCTGameMode_GiveScore");
static_assert(offsetof(SCTGameMode_GiveScore, ScoreName) == 0x000000, "Member 'SCTGameMode_GiveScore::ScoreName' has a wrong offset!");
static_assert(offsetof(SCTGameMode_GiveScore, PlayerState) == 0x000008, "Member 'SCTGameMode_GiveScore::PlayerState' has a wrong offset!");

// Function SCT.SCTGameMode.K2_OnCharacterDestiny
// 0x0028 (0x0028 - 0x0000)
struct SCTGameMode_K2_OnCharacterDestiny final
{
public:
	class AHumanoidCharacter*                     HumanoidCharacter;                                 // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AController*                            Controller;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDestiny                               Destiny;                                           // 0x0010(0x0010)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          IsPersonoid;                                       // 0x0020(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SCTGameMode_K2_OnCharacterDestiny) == 0x000008, "Wrong alignment on SCTGameMode_K2_OnCharacterDestiny");
static_assert(sizeof(SCTGameMode_K2_OnCharacterDestiny) == 0x000028, "Wrong size on SCTGameMode_K2_OnCharacterDestiny");
static_assert(offsetof(SCTGameMode_K2_OnCharacterDestiny, HumanoidCharacter) == 0x000000, "Member 'SCTGameMode_K2_OnCharacterDestiny::HumanoidCharacter' has a wrong offset!");
static_assert(offsetof(SCTGameMode_K2_OnCharacterDestiny, Controller) == 0x000008, "Member 'SCTGameMode_K2_OnCharacterDestiny::Controller' has a wrong offset!");
static_assert(offsetof(SCTGameMode_K2_OnCharacterDestiny, Destiny) == 0x000010, "Member 'SCTGameMode_K2_OnCharacterDestiny::Destiny' has a wrong offset!");
static_assert(offsetof(SCTGameMode_K2_OnCharacterDestiny, IsPersonoid) == 0x000020, "Member 'SCTGameMode_K2_OnCharacterDestiny::IsPersonoid' has a wrong offset!");

// Function SCT.SCTGameMode.OnCharacterDestiny
// 0x0028 (0x0028 - 0x0000)
struct SCTGameMode_OnCharacterDestiny final
{
public:
	class AHumanoidCharacter*                     HumanoidCharacter;                                 // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AController*                            Controller;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDestiny                               Destiny;                                           // 0x0010(0x0010)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          IsPersonoid;                                       // 0x0020(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SCTGameMode_OnCharacterDestiny) == 0x000008, "Wrong alignment on SCTGameMode_OnCharacterDestiny");
static_assert(sizeof(SCTGameMode_OnCharacterDestiny) == 0x000028, "Wrong size on SCTGameMode_OnCharacterDestiny");
static_assert(offsetof(SCTGameMode_OnCharacterDestiny, HumanoidCharacter) == 0x000000, "Member 'SCTGameMode_OnCharacterDestiny::HumanoidCharacter' has a wrong offset!");
static_assert(offsetof(SCTGameMode_OnCharacterDestiny, Controller) == 0x000008, "Member 'SCTGameMode_OnCharacterDestiny::Controller' has a wrong offset!");
static_assert(offsetof(SCTGameMode_OnCharacterDestiny, Destiny) == 0x000010, "Member 'SCTGameMode_OnCharacterDestiny::Destiny' has a wrong offset!");
static_assert(offsetof(SCTGameMode_OnCharacterDestiny, IsPersonoid) == 0x000020, "Member 'SCTGameMode_OnCharacterDestiny::IsPersonoid' has a wrong offset!");

// Function SCT.SCTGameMode.OnReceivedGenderPreference
// 0x0010 (0x0010 - 0x0000)
struct SCTGameMode_OnReceivedGenderPreference final
{
public:
	ECustomizationSavedGender                     GenderSettings;                                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ASCTPlayerController*                   PlayerController;                                  // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SCTGameMode_OnReceivedGenderPreference) == 0x000008, "Wrong alignment on SCTGameMode_OnReceivedGenderPreference");
static_assert(sizeof(SCTGameMode_OnReceivedGenderPreference) == 0x000010, "Wrong size on SCTGameMode_OnReceivedGenderPreference");
static_assert(offsetof(SCTGameMode_OnReceivedGenderPreference, GenderSettings) == 0x000000, "Member 'SCTGameMode_OnReceivedGenderPreference::GenderSettings' has a wrong offset!");
static_assert(offsetof(SCTGameMode_OnReceivedGenderPreference, PlayerController) == 0x000008, "Member 'SCTGameMode_OnReceivedGenderPreference::PlayerController' has a wrong offset!");

// Function SCT.SCTGameMode.Respawn
// 0x0004 (0x0004 - 0x0000)
struct SCTGameMode_Respawn final
{
public:
	int32                                         PlayerId;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SCTGameMode_Respawn) == 0x000004, "Wrong alignment on SCTGameMode_Respawn");
static_assert(sizeof(SCTGameMode_Respawn) == 0x000004, "Wrong size on SCTGameMode_Respawn");
static_assert(offsetof(SCTGameMode_Respawn, PlayerId) == 0x000000, "Member 'SCTGameMode_Respawn::PlayerId' has a wrong offset!");

// Function SCT.SCTGameState.SetEmergencyMeetingInProgress
// 0x0001 (0x0001 - 0x0000)
struct SCTGameState_SetEmergencyMeetingInProgress final
{
public:
	bool                                          InProgress;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SCTGameState_SetEmergencyMeetingInProgress) == 0x000001, "Wrong alignment on SCTGameState_SetEmergencyMeetingInProgress");
static_assert(sizeof(SCTGameState_SetEmergencyMeetingInProgress) == 0x000001, "Wrong size on SCTGameState_SetEmergencyMeetingInProgress");
static_assert(offsetof(SCTGameState_SetEmergencyMeetingInProgress, InProgress) == 0x000000, "Member 'SCTGameState_SetEmergencyMeetingInProgress::InProgress' has a wrong offset!");

// Function SCT.SCTGameState.SetPS5MatchControllerClientStateData
// 0x0020 (0x0020 - 0x0000)
struct SCTGameState_SetPS5MatchControllerClientStateData final
{
public:
	struct FPS5MatchControllerClientStateData     InPS5MatchControllerClientStateData;               // 0x0000(0x0020)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(SCTGameState_SetPS5MatchControllerClientStateData) == 0x000008, "Wrong alignment on SCTGameState_SetPS5MatchControllerClientStateData");
static_assert(sizeof(SCTGameState_SetPS5MatchControllerClientStateData) == 0x000020, "Wrong size on SCTGameState_SetPS5MatchControllerClientStateData");
static_assert(offsetof(SCTGameState_SetPS5MatchControllerClientStateData, InPS5MatchControllerClientStateData) == 0x000000, "Member 'SCTGameState_SetPS5MatchControllerClientStateData::InPS5MatchControllerClientStateData' has a wrong offset!");

// Function SCT.SCTGameState.SetPS5MatchID
// 0x0010 (0x0010 - 0x0000)
struct SCTGameState_SetPS5MatchID final
{
public:
	class FString                                 InMatchID;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SCTGameState_SetPS5MatchID) == 0x000008, "Wrong alignment on SCTGameState_SetPS5MatchID");
static_assert(sizeof(SCTGameState_SetPS5MatchID) == 0x000010, "Wrong size on SCTGameState_SetPS5MatchID");
static_assert(offsetof(SCTGameState_SetPS5MatchID, InMatchID) == 0x000000, "Member 'SCTGameState_SetPS5MatchID::InMatchID' has a wrong offset!");

// Function SCT.SCTGameState.SetTimesHasTravelled
// 0x0004 (0x0004 - 0x0000)
struct SCTGameState_SetTimesHasTravelled final
{
public:
	int32                                         TimesTravelled;                                    // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SCTGameState_SetTimesHasTravelled) == 0x000004, "Wrong alignment on SCTGameState_SetTimesHasTravelled");
static_assert(sizeof(SCTGameState_SetTimesHasTravelled) == 0x000004, "Wrong size on SCTGameState_SetTimesHasTravelled");
static_assert(offsetof(SCTGameState_SetTimesHasTravelled, TimesTravelled) == 0x000000, "Member 'SCTGameState_SetTimesHasTravelled::TimesTravelled' has a wrong offset!");

// Function SCT.SCTGameState.SetXboxGameSessionControllerClientStateData
// 0x0020 (0x0020 - 0x0000)
struct SCTGameState_SetXboxGameSessionControllerClientStateData final
{
public:
	struct FXboxGameSessionControllerClientStateData InXboxGameSessionControllerClientStateData;        // 0x0000(0x0020)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(SCTGameState_SetXboxGameSessionControllerClientStateData) == 0x000008, "Wrong alignment on SCTGameState_SetXboxGameSessionControllerClientStateData");
static_assert(sizeof(SCTGameState_SetXboxGameSessionControllerClientStateData) == 0x000020, "Wrong size on SCTGameState_SetXboxGameSessionControllerClientStateData");
static_assert(offsetof(SCTGameState_SetXboxGameSessionControllerClientStateData, InXboxGameSessionControllerClientStateData) == 0x000000, "Member 'SCTGameState_SetXboxGameSessionControllerClientStateData::InXboxGameSessionControllerClientStateData' has a wrong offset!");

// Function SCT.SCTGameState.SetXboxGameSessionID
// 0x0010 (0x0010 - 0x0000)
struct SCTGameState_SetXboxGameSessionID final
{
public:
	class FString                                 InGameSessionID;                                   // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SCTGameState_SetXboxGameSessionID) == 0x000008, "Wrong alignment on SCTGameState_SetXboxGameSessionID");
static_assert(sizeof(SCTGameState_SetXboxGameSessionID) == 0x000010, "Wrong size on SCTGameState_SetXboxGameSessionID");
static_assert(offsetof(SCTGameState_SetXboxGameSessionID, InGameSessionID) == 0x000000, "Member 'SCTGameState_SetXboxGameSessionID::InGameSessionID' has a wrong offset!");

// Function SCT.SCTGameState.GetNumberOfTimesHasTravelled
// 0x0004 (0x0004 - 0x0000)
struct SCTGameState_GetNumberOfTimesHasTravelled final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SCTGameState_GetNumberOfTimesHasTravelled) == 0x000004, "Wrong alignment on SCTGameState_GetNumberOfTimesHasTravelled");
static_assert(sizeof(SCTGameState_GetNumberOfTimesHasTravelled) == 0x000004, "Wrong size on SCTGameState_GetNumberOfTimesHasTravelled");
static_assert(offsetof(SCTGameState_GetNumberOfTimesHasTravelled, ReturnValue) == 0x000000, "Member 'SCTGameState_GetNumberOfTimesHasTravelled::ReturnValue' has a wrong offset!");

// Function SCT.SCTGameState.GetPS5MatchID
// 0x0010 (0x0010 - 0x0000)
struct SCTGameState_GetPS5MatchID final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SCTGameState_GetPS5MatchID) == 0x000008, "Wrong alignment on SCTGameState_GetPS5MatchID");
static_assert(sizeof(SCTGameState_GetPS5MatchID) == 0x000010, "Wrong size on SCTGameState_GetPS5MatchID");
static_assert(offsetof(SCTGameState_GetPS5MatchID, ReturnValue) == 0x000000, "Member 'SCTGameState_GetPS5MatchID::ReturnValue' has a wrong offset!");

// Function SCT.SCTGameState.GetXboxGameSessionID
// 0x0010 (0x0010 - 0x0000)
struct SCTGameState_GetXboxGameSessionID final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SCTGameState_GetXboxGameSessionID) == 0x000008, "Wrong alignment on SCTGameState_GetXboxGameSessionID");
static_assert(sizeof(SCTGameState_GetXboxGameSessionID) == 0x000010, "Wrong size on SCTGameState_GetXboxGameSessionID");
static_assert(offsetof(SCTGameState_GetXboxGameSessionID, ReturnValue) == 0x000000, "Member 'SCTGameState_GetXboxGameSessionID::ReturnValue' has a wrong offset!");

// Function SCT.SCTGameState.HasTravelledBefore
// 0x0001 (0x0001 - 0x0000)
struct SCTGameState_HasTravelledBefore final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SCTGameState_HasTravelledBefore) == 0x000001, "Wrong alignment on SCTGameState_HasTravelledBefore");
static_assert(sizeof(SCTGameState_HasTravelledBefore) == 0x000001, "Wrong size on SCTGameState_HasTravelledBefore");
static_assert(offsetof(SCTGameState_HasTravelledBefore, ReturnValue) == 0x000000, "Member 'SCTGameState_HasTravelledBefore::ReturnValue' has a wrong offset!");

// Function SCT.SCTGameState.IsBackfillLevel
// 0x0001 (0x0001 - 0x0000)
struct SCTGameState_IsBackfillLevel final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SCTGameState_IsBackfillLevel) == 0x000001, "Wrong alignment on SCTGameState_IsBackfillLevel");
static_assert(sizeof(SCTGameState_IsBackfillLevel) == 0x000001, "Wrong size on SCTGameState_IsBackfillLevel");
static_assert(offsetof(SCTGameState_IsBackfillLevel, ReturnValue) == 0x000000, "Member 'SCTGameState_IsBackfillLevel::ReturnValue' has a wrong offset!");

// Function SCT.SCTGameState.IsFirstLevel
// 0x0001 (0x0001 - 0x0000)
struct SCTGameState_IsFirstLevel final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SCTGameState_IsFirstLevel) == 0x000001, "Wrong alignment on SCTGameState_IsFirstLevel");
static_assert(sizeof(SCTGameState_IsFirstLevel) == 0x000001, "Wrong size on SCTGameState_IsFirstLevel");
static_assert(offsetof(SCTGameState_IsFirstLevel, ReturnValue) == 0x000000, "Member 'SCTGameState_IsFirstLevel::ReturnValue' has a wrong offset!");

// Function SCT.SCTGameState_Match.MatchEnded
// 0x0018 (0x0018 - 0x0000)
struct SCTGameState_Match_MatchEnded final
{
public:
	struct FMatchEndData                          EndData;                                           // 0x0000(0x0018)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(SCTGameState_Match_MatchEnded) == 0x000008, "Wrong alignment on SCTGameState_Match_MatchEnded");
static_assert(sizeof(SCTGameState_Match_MatchEnded) == 0x000018, "Wrong size on SCTGameState_Match_MatchEnded");
static_assert(offsetof(SCTGameState_Match_MatchEnded, EndData) == 0x000000, "Member 'SCTGameState_Match_MatchEnded::EndData' has a wrong offset!");

// Function SCT.SCTGameState_Match.SetMatchEndState
// 0x0018 (0x0018 - 0x0000)
struct SCTGameState_Match_SetMatchEndState final
{
public:
	struct FMatchEndData                          EndData;                                           // 0x0000(0x0018)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(SCTGameState_Match_SetMatchEndState) == 0x000008, "Wrong alignment on SCTGameState_Match_SetMatchEndState");
static_assert(sizeof(SCTGameState_Match_SetMatchEndState) == 0x000018, "Wrong size on SCTGameState_Match_SetMatchEndState");
static_assert(offsetof(SCTGameState_Match_SetMatchEndState, EndData) == 0x000000, "Member 'SCTGameState_Match_SetMatchEndState::EndData' has a wrong offset!");

// Function SCT.GetCloudIntDataCallbackProxy.GetCloudRecordValue
// 0x0020 (0x0020 - 0x0000)
struct GetCloudIntDataCallbackProxy_GetCloudRecordValue final
{
public:
	EUserRecordType                               UserRecord;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 FieldName;                                         // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UGetCloudIntDataCallbackProxy*          ReturnValue;                                       // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GetCloudIntDataCallbackProxy_GetCloudRecordValue) == 0x000008, "Wrong alignment on GetCloudIntDataCallbackProxy_GetCloudRecordValue");
static_assert(sizeof(GetCloudIntDataCallbackProxy_GetCloudRecordValue) == 0x000020, "Wrong size on GetCloudIntDataCallbackProxy_GetCloudRecordValue");
static_assert(offsetof(GetCloudIntDataCallbackProxy_GetCloudRecordValue, UserRecord) == 0x000000, "Member 'GetCloudIntDataCallbackProxy_GetCloudRecordValue::UserRecord' has a wrong offset!");
static_assert(offsetof(GetCloudIntDataCallbackProxy_GetCloudRecordValue, FieldName) == 0x000008, "Member 'GetCloudIntDataCallbackProxy_GetCloudRecordValue::FieldName' has a wrong offset!");
static_assert(offsetof(GetCloudIntDataCallbackProxy_GetCloudRecordValue, ReturnValue) == 0x000018, "Member 'GetCloudIntDataCallbackProxy_GetCloudRecordValue::ReturnValue' has a wrong offset!");

// Function SCT.SCTGameState_Warmup.OnClientGoodbyeTick
// 0x0004 (0x0004 - 0x0000)
struct SCTGameState_Warmup_OnClientGoodbyeTick final
{
public:
	int32                                         TimeLeft;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SCTGameState_Warmup_OnClientGoodbyeTick) == 0x000004, "Wrong alignment on SCTGameState_Warmup_OnClientGoodbyeTick");
static_assert(sizeof(SCTGameState_Warmup_OnClientGoodbyeTick) == 0x000004, "Wrong size on SCTGameState_Warmup_OnClientGoodbyeTick");
static_assert(offsetof(SCTGameState_Warmup_OnClientGoodbyeTick, TimeLeft) == 0x000000, "Member 'SCTGameState_Warmup_OnClientGoodbyeTick::TimeLeft' has a wrong offset!");

// Function SCT.SCTGameUserSettings.GetSCTGameUserSettings
// 0x0008 (0x0008 - 0x0000)
struct SCTGameUserSettings_GetSCTGameUserSettings final
{
public:
	class USCTGameUserSettings*                   ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SCTGameUserSettings_GetSCTGameUserSettings) == 0x000008, "Wrong alignment on SCTGameUserSettings_GetSCTGameUserSettings");
static_assert(sizeof(SCTGameUserSettings_GetSCTGameUserSettings) == 0x000008, "Wrong size on SCTGameUserSettings_GetSCTGameUserSettings");
static_assert(offsetof(SCTGameUserSettings_GetSCTGameUserSettings, ReturnValue) == 0x000000, "Member 'SCTGameUserSettings_GetSCTGameUserSettings::ReturnValue' has a wrong offset!");

// Function SCT.SCTGameUserSettings.GetMasterSoundVolume
// 0x0004 (0x0004 - 0x0000)
struct SCTGameUserSettings_GetMasterSoundVolume final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SCTGameUserSettings_GetMasterSoundVolume) == 0x000004, "Wrong alignment on SCTGameUserSettings_GetMasterSoundVolume");
static_assert(sizeof(SCTGameUserSettings_GetMasterSoundVolume) == 0x000004, "Wrong size on SCTGameUserSettings_GetMasterSoundVolume");
static_assert(offsetof(SCTGameUserSettings_GetMasterSoundVolume, ReturnValue) == 0x000000, "Member 'SCTGameUserSettings_GetMasterSoundVolume::ReturnValue' has a wrong offset!");

// Function SCT.SCTGameUserSettings.SetMasterSoundVolume
// 0x0004 (0x0004 - 0x0000)
struct SCTGameUserSettings_SetMasterSoundVolume final
{
public:
	float                                         Volume;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SCTGameUserSettings_SetMasterSoundVolume) == 0x000004, "Wrong alignment on SCTGameUserSettings_SetMasterSoundVolume");
static_assert(sizeof(SCTGameUserSettings_SetMasterSoundVolume) == 0x000004, "Wrong size on SCTGameUserSettings_SetMasterSoundVolume");
static_assert(offsetof(SCTGameUserSettings_SetMasterSoundVolume, Volume) == 0x000000, "Member 'SCTGameUserSettings_SetMasterSoundVolume::Volume' has a wrong offset!");

// Function SCT.SCTKeySelector.SetActionMapping
// 0x0020 (0x0020 - 0x0000)
struct SCTKeySelector_SetActionMapping final
{
public:
	struct FInputChord                            Chord;                                             // 0x0000(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SCTKeySelector_SetActionMapping) == 0x000008, "Wrong alignment on SCTKeySelector_SetActionMapping");
static_assert(sizeof(SCTKeySelector_SetActionMapping) == 0x000020, "Wrong size on SCTKeySelector_SetActionMapping");
static_assert(offsetof(SCTKeySelector_SetActionMapping, Chord) == 0x000000, "Member 'SCTKeySelector_SetActionMapping::Chord' has a wrong offset!");

// Function SCT.SCTKeySelector.SetGamepadStyle
// 0x0020 (0x0020 - 0x0000)
struct SCTKeySelector_SetGamepadStyle final
{
public:
	struct FInputChord                            Chord;                                             // 0x0000(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SCTKeySelector_SetGamepadStyle) == 0x000008, "Wrong alignment on SCTKeySelector_SetGamepadStyle");
static_assert(sizeof(SCTKeySelector_SetGamepadStyle) == 0x000020, "Wrong size on SCTKeySelector_SetGamepadStyle");
static_assert(offsetof(SCTKeySelector_SetGamepadStyle, Chord) == 0x000000, "Member 'SCTKeySelector_SetGamepadStyle::Chord' has a wrong offset!");

// Function SCT.SCTKeySelector.SetKeyboardStyle
// 0x0020 (0x0020 - 0x0000)
struct SCTKeySelector_SetKeyboardStyle final
{
public:
	struct FInputChord                            Chord;                                             // 0x0000(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SCTKeySelector_SetKeyboardStyle) == 0x000008, "Wrong alignment on SCTKeySelector_SetKeyboardStyle");
static_assert(sizeof(SCTKeySelector_SetKeyboardStyle) == 0x000020, "Wrong size on SCTKeySelector_SetKeyboardStyle");
static_assert(offsetof(SCTKeySelector_SetKeyboardStyle, Chord) == 0x000000, "Member 'SCTKeySelector_SetKeyboardStyle::Chord' has a wrong offset!");

// Function SCT.SCTKismetArrayLibrary.Array_ShuffleFromSeed
// 0x0018 (0x0018 - 0x0000)
struct SCTKismetArrayLibrary_Array_ShuffleFromSeed final
{
public:
	TArray<int32>                                 TargetArray;                                       // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	int32                                         Seed;                                              // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SCTKismetArrayLibrary_Array_ShuffleFromSeed) == 0x000008, "Wrong alignment on SCTKismetArrayLibrary_Array_ShuffleFromSeed");
static_assert(sizeof(SCTKismetArrayLibrary_Array_ShuffleFromSeed) == 0x000018, "Wrong size on SCTKismetArrayLibrary_Array_ShuffleFromSeed");
static_assert(offsetof(SCTKismetArrayLibrary_Array_ShuffleFromSeed, TargetArray) == 0x000000, "Member 'SCTKismetArrayLibrary_Array_ShuffleFromSeed::TargetArray' has a wrong offset!");
static_assert(offsetof(SCTKismetArrayLibrary_Array_ShuffleFromSeed, Seed) == 0x000010, "Member 'SCTKismetArrayLibrary_Array_ShuffleFromSeed::Seed' has a wrong offset!");

// Function SCT.SCTLoadingScreenWidget.Start
// 0x0010 (0x0010 - 0x0000)
struct SCTLoadingScreenWidget_Start final
{
public:
	class FString                                 PendingURL;                                        // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SCTLoadingScreenWidget_Start) == 0x000008, "Wrong alignment on SCTLoadingScreenWidget_Start");
static_assert(sizeof(SCTLoadingScreenWidget_Start) == 0x000010, "Wrong size on SCTLoadingScreenWidget_Start");
static_assert(offsetof(SCTLoadingScreenWidget_Start, PendingURL) == 0x000000, "Member 'SCTLoadingScreenWidget_Start::PendingURL' has a wrong offset!");

// Function SCT.GetUserPresenceStatusCallbackProxy.GetPresenceStatusByUserId
// 0x0020 (0x0020 - 0x0000)
struct GetUserPresenceStatusCallbackProxy_GetPresenceStatusByUserId final
{
public:
	class FString                                 UserId;                                            // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAccelByteGIS*                          AccelByteGIS;                                      // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UGetUserPresenceStatusCallbackProxy*    ReturnValue;                                       // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GetUserPresenceStatusCallbackProxy_GetPresenceStatusByUserId) == 0x000008, "Wrong alignment on GetUserPresenceStatusCallbackProxy_GetPresenceStatusByUserId");
static_assert(sizeof(GetUserPresenceStatusCallbackProxy_GetPresenceStatusByUserId) == 0x000020, "Wrong size on GetUserPresenceStatusCallbackProxy_GetPresenceStatusByUserId");
static_assert(offsetof(GetUserPresenceStatusCallbackProxy_GetPresenceStatusByUserId, UserId) == 0x000000, "Member 'GetUserPresenceStatusCallbackProxy_GetPresenceStatusByUserId::UserId' has a wrong offset!");
static_assert(offsetof(GetUserPresenceStatusCallbackProxy_GetPresenceStatusByUserId, AccelByteGIS) == 0x000010, "Member 'GetUserPresenceStatusCallbackProxy_GetPresenceStatusByUserId::AccelByteGIS' has a wrong offset!");
static_assert(offsetof(GetUserPresenceStatusCallbackProxy_GetPresenceStatusByUserId, ReturnValue) == 0x000018, "Member 'GetUserPresenceStatusCallbackProxy_GetPresenceStatusByUserId::ReturnValue' has a wrong offset!");

// Function SCT.SCTPlayerController.AchievementGrantedError
// 0x0010 (0x0010 - 0x0000)
struct SCTPlayerController_AchievementGrantedError final
{
public:
	class FString                                 Message;                                           // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SCTPlayerController_AchievementGrantedError) == 0x000008, "Wrong alignment on SCTPlayerController_AchievementGrantedError");
static_assert(sizeof(SCTPlayerController_AchievementGrantedError) == 0x000010, "Wrong size on SCTPlayerController_AchievementGrantedError");
static_assert(offsetof(SCTPlayerController_AchievementGrantedError, Message) == 0x000000, "Member 'SCTPlayerController_AchievementGrantedError::Message' has a wrong offset!");

// Function SCT.SCTPlayerController.AchievementGrantedSucceeded
// 0x0018 (0x0018 - 0x0000)
struct SCTPlayerController_AchievementGrantedSucceeded final
{
public:
	class UFCTAchievement*                        AchievementInfo;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Message;                                           // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SCTPlayerController_AchievementGrantedSucceeded) == 0x000008, "Wrong alignment on SCTPlayerController_AchievementGrantedSucceeded");
static_assert(sizeof(SCTPlayerController_AchievementGrantedSucceeded) == 0x000018, "Wrong size on SCTPlayerController_AchievementGrantedSucceeded");
static_assert(offsetof(SCTPlayerController_AchievementGrantedSucceeded, AchievementInfo) == 0x000000, "Member 'SCTPlayerController_AchievementGrantedSucceeded::AchievementInfo' has a wrong offset!");
static_assert(offsetof(SCTPlayerController_AchievementGrantedSucceeded, Message) == 0x000008, "Member 'SCTPlayerController_AchievementGrantedSucceeded::Message' has a wrong offset!");

// Function SCT.SCTPlayerController.ClientGetSessionID
// 0x0010 (0x0010 - 0x0000)
struct SCTPlayerController_ClientGetSessionID final
{
public:
	class FString                                 SessionID;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SCTPlayerController_ClientGetSessionID) == 0x000008, "Wrong alignment on SCTPlayerController_ClientGetSessionID");
static_assert(sizeof(SCTPlayerController_ClientGetSessionID) == 0x000010, "Wrong size on SCTPlayerController_ClientGetSessionID");
static_assert(offsetof(SCTPlayerController_ClientGetSessionID, SessionID) == 0x000000, "Member 'SCTPlayerController_ClientGetSessionID::SessionID' has a wrong offset!");

// Function SCT.SCTPlayerController.ClientOnGrantedPassengerLogInformation
// 0x0028 (0x0028 - 0x0000)
struct SCTPlayerController_ClientOnGrantedPassengerLogInformation final
{
public:
	struct FPassengerLogInformation               LogInformation;                                    // 0x0000(0x0028)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(SCTPlayerController_ClientOnGrantedPassengerLogInformation) == 0x000008, "Wrong alignment on SCTPlayerController_ClientOnGrantedPassengerLogInformation");
static_assert(sizeof(SCTPlayerController_ClientOnGrantedPassengerLogInformation) == 0x000028, "Wrong size on SCTPlayerController_ClientOnGrantedPassengerLogInformation");
static_assert(offsetof(SCTPlayerController_ClientOnGrantedPassengerLogInformation, LogInformation) == 0x000000, "Member 'SCTPlayerController_ClientOnGrantedPassengerLogInformation::LogInformation' has a wrong offset!");

// Function SCT.SCTPlayerController.GrantAchievement
// 0x0008 (0x0008 - 0x0000)
struct SCTPlayerController_GrantAchievement final
{
public:
	class FName                                   AchievementName;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SCTPlayerController_GrantAchievement) == 0x000004, "Wrong alignment on SCTPlayerController_GrantAchievement");
static_assert(sizeof(SCTPlayerController_GrantAchievement) == 0x000008, "Wrong size on SCTPlayerController_GrantAchievement");
static_assert(offsetof(SCTPlayerController_GrantAchievement, AchievementName) == 0x000000, "Member 'SCTPlayerController_GrantAchievement::AchievementName' has a wrong offset!");

// Function SCT.SCTPlayerController.HandlePushToTalkSharedChannel
// 0x0001 (0x0001 - 0x0000)
struct SCTPlayerController_HandlePushToTalkSharedChannel final
{
public:
	bool                                          IsPressed;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SCTPlayerController_HandlePushToTalkSharedChannel) == 0x000001, "Wrong alignment on SCTPlayerController_HandlePushToTalkSharedChannel");
static_assert(sizeof(SCTPlayerController_HandlePushToTalkSharedChannel) == 0x000001, "Wrong size on SCTPlayerController_HandlePushToTalkSharedChannel");
static_assert(offsetof(SCTPlayerController_HandlePushToTalkSharedChannel, IsPressed) == 0x000000, "Member 'SCTPlayerController_HandlePushToTalkSharedChannel::IsPressed' has a wrong offset!");

// Function SCT.SCTPlayerController.K2_OnGrantedPassengerLogInformation
// 0x0028 (0x0028 - 0x0000)
struct SCTPlayerController_K2_OnGrantedPassengerLogInformation final
{
public:
	struct FPassengerLogInformation               LogInformation;                                    // 0x0000(0x0028)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(SCTPlayerController_K2_OnGrantedPassengerLogInformation) == 0x000008, "Wrong alignment on SCTPlayerController_K2_OnGrantedPassengerLogInformation");
static_assert(sizeof(SCTPlayerController_K2_OnGrantedPassengerLogInformation) == 0x000028, "Wrong size on SCTPlayerController_K2_OnGrantedPassengerLogInformation");
static_assert(offsetof(SCTPlayerController_K2_OnGrantedPassengerLogInformation, LogInformation) == 0x000000, "Member 'SCTPlayerController_K2_OnGrantedPassengerLogInformation::LogInformation' has a wrong offset!");

// Function SCT.SCTPlayerController.K2_PreClientTravel
// 0x0018 (0x0018 - 0x0000)
struct SCTPlayerController_K2_PreClientTravel final
{
public:
	class FString                                 PendingURL;                                        // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETravelType                                   TravelType;                                        // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsSeamlessTravel;                                 // 0x0011(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12[0x6];                                       // 0x0012(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SCTPlayerController_K2_PreClientTravel) == 0x000008, "Wrong alignment on SCTPlayerController_K2_PreClientTravel");
static_assert(sizeof(SCTPlayerController_K2_PreClientTravel) == 0x000018, "Wrong size on SCTPlayerController_K2_PreClientTravel");
static_assert(offsetof(SCTPlayerController_K2_PreClientTravel, PendingURL) == 0x000000, "Member 'SCTPlayerController_K2_PreClientTravel::PendingURL' has a wrong offset!");
static_assert(offsetof(SCTPlayerController_K2_PreClientTravel, TravelType) == 0x000010, "Member 'SCTPlayerController_K2_PreClientTravel::TravelType' has a wrong offset!");
static_assert(offsetof(SCTPlayerController_K2_PreClientTravel, bIsSeamlessTravel) == 0x000011, "Member 'SCTPlayerController_K2_PreClientTravel::bIsSeamlessTravel' has a wrong offset!");

// Function SCT.SCTPlayerController.OnSkillcheckGamepadAxis
// 0x0004 (0x0004 - 0x0000)
struct SCTPlayerController_OnSkillcheckGamepadAxis final
{
public:
	float                                         Val;                                               // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SCTPlayerController_OnSkillcheckGamepadAxis) == 0x000004, "Wrong alignment on SCTPlayerController_OnSkillcheckGamepadAxis");
static_assert(sizeof(SCTPlayerController_OnSkillcheckGamepadAxis) == 0x000004, "Wrong size on SCTPlayerController_OnSkillcheckGamepadAxis");
static_assert(offsetof(SCTPlayerController_OnSkillcheckGamepadAxis, Val) == 0x000000, "Member 'SCTPlayerController_OnSkillcheckGamepadAxis::Val' has a wrong offset!");

// Function SCT.SCTPlayerController.QuitToMainMenu
// 0x0018 (0x0018 - 0x0000)
struct SCTPlayerController_QuitToMainMenu final
{
public:
	class FText                                   Reason;                                            // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(SCTPlayerController_QuitToMainMenu) == 0x000008, "Wrong alignment on SCTPlayerController_QuitToMainMenu");
static_assert(sizeof(SCTPlayerController_QuitToMainMenu) == 0x000018, "Wrong size on SCTPlayerController_QuitToMainMenu");
static_assert(offsetof(SCTPlayerController_QuitToMainMenu, Reason) == 0x000000, "Member 'SCTPlayerController_QuitToMainMenu::Reason' has a wrong offset!");

// Function SCT.SCTPlayerController.RunPS5GameStatsClientCommand
// 0x000C (0x000C - 0x0000)
struct SCTPlayerController_RunPS5GameStatsClientCommand final
{
public:
	EPS5GameStatsClientCommand                    ClientCommand;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPS5GameStatsCommandData               CommandData;                                       // 0x0004(0x0008)(Parm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(SCTPlayerController_RunPS5GameStatsClientCommand) == 0x000004, "Wrong alignment on SCTPlayerController_RunPS5GameStatsClientCommand");
static_assert(sizeof(SCTPlayerController_RunPS5GameStatsClientCommand) == 0x00000C, "Wrong size on SCTPlayerController_RunPS5GameStatsClientCommand");
static_assert(offsetof(SCTPlayerController_RunPS5GameStatsClientCommand, ClientCommand) == 0x000000, "Member 'SCTPlayerController_RunPS5GameStatsClientCommand::ClientCommand' has a wrong offset!");
static_assert(offsetof(SCTPlayerController_RunPS5GameStatsClientCommand, CommandData) == 0x000004, "Member 'SCTPlayerController_RunPS5GameStatsClientCommand::CommandData' has a wrong offset!");

// Function SCT.SCTPlayerController.RunPS5MatchClientCommand
// 0x0038 (0x0038 - 0x0000)
struct SCTPlayerController_RunPS5MatchClientCommand final
{
public:
	EPS5MatchClientCommand                        ClientCommand;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPS5MatchCommandData                   CommandData;                                       // 0x0008(0x0030)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(SCTPlayerController_RunPS5MatchClientCommand) == 0x000008, "Wrong alignment on SCTPlayerController_RunPS5MatchClientCommand");
static_assert(sizeof(SCTPlayerController_RunPS5MatchClientCommand) == 0x000038, "Wrong size on SCTPlayerController_RunPS5MatchClientCommand");
static_assert(offsetof(SCTPlayerController_RunPS5MatchClientCommand, ClientCommand) == 0x000000, "Member 'SCTPlayerController_RunPS5MatchClientCommand::ClientCommand' has a wrong offset!");
static_assert(offsetof(SCTPlayerController_RunPS5MatchClientCommand, CommandData) == 0x000008, "Member 'SCTPlayerController_RunPS5MatchClientCommand::CommandData' has a wrong offset!");

// Function SCT.SCTPlayerController.RunXboxGameSessionClientCommand
// 0x0038 (0x0038 - 0x0000)
struct SCTPlayerController_RunXboxGameSessionClientCommand final
{
public:
	EXboxGameSessionClientCommand                 ClientCommand;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FXboxGameSessionCommandData            CommandData;                                       // 0x0008(0x0030)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(SCTPlayerController_RunXboxGameSessionClientCommand) == 0x000008, "Wrong alignment on SCTPlayerController_RunXboxGameSessionClientCommand");
static_assert(sizeof(SCTPlayerController_RunXboxGameSessionClientCommand) == 0x000038, "Wrong size on SCTPlayerController_RunXboxGameSessionClientCommand");
static_assert(offsetof(SCTPlayerController_RunXboxGameSessionClientCommand, ClientCommand) == 0x000000, "Member 'SCTPlayerController_RunXboxGameSessionClientCommand::ClientCommand' has a wrong offset!");
static_assert(offsetof(SCTPlayerController_RunXboxGameSessionClientCommand, CommandData) == 0x000008, "Member 'SCTPlayerController_RunXboxGameSessionClientCommand::CommandData' has a wrong offset!");

// Function SCT.SCTPlayerController.ServerPS5MatchCommand
// 0x0038 (0x0038 - 0x0000)
struct SCTPlayerController_ServerPS5MatchCommand final
{
public:
	EPS5MatchServerCommandResult                  CommandResult;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPS5MatchCommandData                   CommandData;                                       // 0x0008(0x0030)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(SCTPlayerController_ServerPS5MatchCommand) == 0x000008, "Wrong alignment on SCTPlayerController_ServerPS5MatchCommand");
static_assert(sizeof(SCTPlayerController_ServerPS5MatchCommand) == 0x000038, "Wrong size on SCTPlayerController_ServerPS5MatchCommand");
static_assert(offsetof(SCTPlayerController_ServerPS5MatchCommand, CommandResult) == 0x000000, "Member 'SCTPlayerController_ServerPS5MatchCommand::CommandResult' has a wrong offset!");
static_assert(offsetof(SCTPlayerController_ServerPS5MatchCommand, CommandData) == 0x000008, "Member 'SCTPlayerController_ServerPS5MatchCommand::CommandData' has a wrong offset!");

// Function SCT.SCTPlayerController.ServerSetAccelByteBlockingList
// 0x0010 (0x0010 - 0x0000)
struct SCTPlayerController_ServerSetAccelByteBlockingList final
{
public:
	TArray<class FString>                         BlockedByAccelByteIDs;                             // 0x0000(0x0010)(ConstParm, Parm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(SCTPlayerController_ServerSetAccelByteBlockingList) == 0x000008, "Wrong alignment on SCTPlayerController_ServerSetAccelByteBlockingList");
static_assert(sizeof(SCTPlayerController_ServerSetAccelByteBlockingList) == 0x000010, "Wrong size on SCTPlayerController_ServerSetAccelByteBlockingList");
static_assert(offsetof(SCTPlayerController_ServerSetAccelByteBlockingList, BlockedByAccelByteIDs) == 0x000000, "Member 'SCTPlayerController_ServerSetAccelByteBlockingList::BlockedByAccelByteIDs' has a wrong offset!");

// Function SCT.SCTPlayerController.ServerSetAccelByteBlockList
// 0x0010 (0x0010 - 0x0000)
struct SCTPlayerController_ServerSetAccelByteBlockList final
{
public:
	TArray<class FString>                         BlockedAccelByteIDs;                               // 0x0000(0x0010)(ConstParm, Parm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(SCTPlayerController_ServerSetAccelByteBlockList) == 0x000008, "Wrong alignment on SCTPlayerController_ServerSetAccelByteBlockList");
static_assert(sizeof(SCTPlayerController_ServerSetAccelByteBlockList) == 0x000010, "Wrong size on SCTPlayerController_ServerSetAccelByteBlockList");
static_assert(offsetof(SCTPlayerController_ServerSetAccelByteBlockList, BlockedAccelByteIDs) == 0x000000, "Member 'SCTPlayerController_ServerSetAccelByteBlockList::BlockedAccelByteIDs' has a wrong offset!");

// Function SCT.SCTPlayerController.ServerSetAccelByteDisallowList
// 0x0010 (0x0010 - 0x0000)
struct SCTPlayerController_ServerSetAccelByteDisallowList final
{
public:
	TArray<class FString>                         DisallowedAccelByteIDs;                            // 0x0000(0x0010)(ConstParm, Parm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(SCTPlayerController_ServerSetAccelByteDisallowList) == 0x000008, "Wrong alignment on SCTPlayerController_ServerSetAccelByteDisallowList");
static_assert(sizeof(SCTPlayerController_ServerSetAccelByteDisallowList) == 0x000010, "Wrong size on SCTPlayerController_ServerSetAccelByteDisallowList");
static_assert(offsetof(SCTPlayerController_ServerSetAccelByteDisallowList, DisallowedAccelByteIDs) == 0x000000, "Member 'SCTPlayerController_ServerSetAccelByteDisallowList::DisallowedAccelByteIDs' has a wrong offset!");

// Function SCT.SCTPlayerController.ServerSetAccelByteID
// 0x0010 (0x0010 - 0x0000)
struct SCTPlayerController_ServerSetAccelByteID final
{
public:
	class FString                                 InAccelByteID;                                     // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SCTPlayerController_ServerSetAccelByteID) == 0x000008, "Wrong alignment on SCTPlayerController_ServerSetAccelByteID");
static_assert(sizeof(SCTPlayerController_ServerSetAccelByteID) == 0x000010, "Wrong size on SCTPlayerController_ServerSetAccelByteID");
static_assert(offsetof(SCTPlayerController_ServerSetAccelByteID, InAccelByteID) == 0x000000, "Member 'SCTPlayerController_ServerSetAccelByteID::InAccelByteID' has a wrong offset!");

// Function SCT.SCTPlayerController.ServerSetSonyBlockList
// 0x0010 (0x0010 - 0x0000)
struct SCTPlayerController_ServerSetSonyBlockList final
{
public:
	TArray<class FString>                         BlockedPSNIDs;                                     // 0x0000(0x0010)(ConstParm, Parm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(SCTPlayerController_ServerSetSonyBlockList) == 0x000008, "Wrong alignment on SCTPlayerController_ServerSetSonyBlockList");
static_assert(sizeof(SCTPlayerController_ServerSetSonyBlockList) == 0x000010, "Wrong size on SCTPlayerController_ServerSetSonyBlockList");
static_assert(offsetof(SCTPlayerController_ServerSetSonyBlockList, BlockedPSNIDs) == 0x000000, "Member 'SCTPlayerController_ServerSetSonyBlockList::BlockedPSNIDs' has a wrong offset!");

// Function SCT.SCTPlayerController.ServerSetSonyInfo
// 0x0018 (0x0018 - 0x0000)
struct SCTPlayerController_ServerSetSonyInfo final
{
public:
	class FString                                 PSNID;                                             // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInRunningOnPS5;                                   // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SCTPlayerController_ServerSetSonyInfo) == 0x000008, "Wrong alignment on SCTPlayerController_ServerSetSonyInfo");
static_assert(sizeof(SCTPlayerController_ServerSetSonyInfo) == 0x000018, "Wrong size on SCTPlayerController_ServerSetSonyInfo");
static_assert(offsetof(SCTPlayerController_ServerSetSonyInfo, PSNID) == 0x000000, "Member 'SCTPlayerController_ServerSetSonyInfo::PSNID' has a wrong offset!");
static_assert(offsetof(SCTPlayerController_ServerSetSonyInfo, bInRunningOnPS5) == 0x000010, "Member 'SCTPlayerController_ServerSetSonyInfo::bInRunningOnPS5' has a wrong offset!");

// Function SCT.SCTPlayerController.ServerSetSteamUserID
// 0x0010 (0x0010 - 0x0000)
struct SCTPlayerController_ServerSetSteamUserID final
{
public:
	class FString                                 UserId;                                            // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SCTPlayerController_ServerSetSteamUserID) == 0x000008, "Wrong alignment on SCTPlayerController_ServerSetSteamUserID");
static_assert(sizeof(SCTPlayerController_ServerSetSteamUserID) == 0x000010, "Wrong size on SCTPlayerController_ServerSetSteamUserID");
static_assert(offsetof(SCTPlayerController_ServerSetSteamUserID, UserId) == 0x000000, "Member 'SCTPlayerController_ServerSetSteamUserID::UserId' has a wrong offset!");

// Function SCT.SCTPlayerController.ServerSetXboxBlockList
// 0x0010 (0x0010 - 0x0000)
struct SCTPlayerController_ServerSetXboxBlockList final
{
public:
	TArray<class FString>                         BlockedXboxLiveIDs;                                // 0x0000(0x0010)(ConstParm, Parm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(SCTPlayerController_ServerSetXboxBlockList) == 0x000008, "Wrong alignment on SCTPlayerController_ServerSetXboxBlockList");
static_assert(sizeof(SCTPlayerController_ServerSetXboxBlockList) == 0x000010, "Wrong size on SCTPlayerController_ServerSetXboxBlockList");
static_assert(offsetof(SCTPlayerController_ServerSetXboxBlockList, BlockedXboxLiveIDs) == 0x000000, "Member 'SCTPlayerController_ServerSetXboxBlockList::BlockedXboxLiveIDs' has a wrong offset!");

// Function SCT.SCTPlayerController.ServerSetXboxDisallowList
// 0x0010 (0x0010 - 0x0000)
struct SCTPlayerController_ServerSetXboxDisallowList final
{
public:
	TArray<class FString>                         DisallowedXboxLiveIDs;                             // 0x0000(0x0010)(ConstParm, Parm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(SCTPlayerController_ServerSetXboxDisallowList) == 0x000008, "Wrong alignment on SCTPlayerController_ServerSetXboxDisallowList");
static_assert(sizeof(SCTPlayerController_ServerSetXboxDisallowList) == 0x000010, "Wrong size on SCTPlayerController_ServerSetXboxDisallowList");
static_assert(offsetof(SCTPlayerController_ServerSetXboxDisallowList, DisallowedXboxLiveIDs) == 0x000000, "Member 'SCTPlayerController_ServerSetXboxDisallowList::DisallowedXboxLiveIDs' has a wrong offset!");

// Function SCT.SCTPlayerController.ServerSetXboxInfo
// 0x0010 (0x0010 - 0x0000)
struct SCTPlayerController_ServerSetXboxInfo final
{
public:
	class FString                                 XboxLiveID;                                        // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SCTPlayerController_ServerSetXboxInfo) == 0x000008, "Wrong alignment on SCTPlayerController_ServerSetXboxInfo");
static_assert(sizeof(SCTPlayerController_ServerSetXboxInfo) == 0x000010, "Wrong size on SCTPlayerController_ServerSetXboxInfo");
static_assert(offsetof(SCTPlayerController_ServerSetXboxInfo, XboxLiveID) == 0x000000, "Member 'SCTPlayerController_ServerSetXboxInfo::XboxLiveID' has a wrong offset!");

// Function SCT.SCTPlayerController.ServerXboxGameSessionCommand
// 0x0038 (0x0038 - 0x0000)
struct SCTPlayerController_ServerXboxGameSessionCommand final
{
public:
	EXboxGameSessionServerCommandResult           CommandResult;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FXboxGameSessionCommandData            CommandData;                                       // 0x0008(0x0030)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(SCTPlayerController_ServerXboxGameSessionCommand) == 0x000008, "Wrong alignment on SCTPlayerController_ServerXboxGameSessionCommand");
static_assert(sizeof(SCTPlayerController_ServerXboxGameSessionCommand) == 0x000038, "Wrong size on SCTPlayerController_ServerXboxGameSessionCommand");
static_assert(offsetof(SCTPlayerController_ServerXboxGameSessionCommand, CommandResult) == 0x000000, "Member 'SCTPlayerController_ServerXboxGameSessionCommand::CommandResult' has a wrong offset!");
static_assert(offsetof(SCTPlayerController_ServerXboxGameSessionCommand, CommandData) == 0x000008, "Member 'SCTPlayerController_ServerXboxGameSessionCommand::CommandData' has a wrong offset!");

// Function SCT.SCTPlayerController.SetAirlockWidget
// 0x0001 (0x0001 - 0x0000)
struct SCTPlayerController_SetAirlockWidget final
{
public:
	bool                                          bIsVisible;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SCTPlayerController_SetAirlockWidget) == 0x000001, "Wrong alignment on SCTPlayerController_SetAirlockWidget");
static_assert(sizeof(SCTPlayerController_SetAirlockWidget) == 0x000001, "Wrong size on SCTPlayerController_SetAirlockWidget");
static_assert(offsetof(SCTPlayerController_SetAirlockWidget, bIsVisible) == 0x000000, "Member 'SCTPlayerController_SetAirlockWidget::bIsVisible' has a wrong offset!");

// Function SCT.SCTPlayerController.SetEmergencyWidget
// 0x0001 (0x0001 - 0x0000)
struct SCTPlayerController_SetEmergencyWidget final
{
public:
	bool                                          bIsVisible;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SCTPlayerController_SetEmergencyWidget) == 0x000001, "Wrong alignment on SCTPlayerController_SetEmergencyWidget");
static_assert(sizeof(SCTPlayerController_SetEmergencyWidget) == 0x000001, "Wrong size on SCTPlayerController_SetEmergencyWidget");
static_assert(offsetof(SCTPlayerController_SetEmergencyWidget, bIsVisible) == 0x000000, "Member 'SCTPlayerController_SetEmergencyWidget::bIsVisible' has a wrong offset!");

// Function SCT.SCTPlayerController.SetMapVotingWidget
// 0x0001 (0x0001 - 0x0000)
struct SCTPlayerController_SetMapVotingWidget final
{
public:
	bool                                          bIsVisible;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SCTPlayerController_SetMapVotingWidget) == 0x000001, "Wrong alignment on SCTPlayerController_SetMapVotingWidget");
static_assert(sizeof(SCTPlayerController_SetMapVotingWidget) == 0x000001, "Wrong size on SCTPlayerController_SetMapVotingWidget");
static_assert(offsetof(SCTPlayerController_SetMapVotingWidget, bIsVisible) == 0x000000, "Member 'SCTPlayerController_SetMapVotingWidget::bIsVisible' has a wrong offset!");

// Function SCT.SCTPlayerController.SetPlayerListWidget
// 0x0001 (0x0001 - 0x0000)
struct SCTPlayerController_SetPlayerListWidget final
{
public:
	bool                                          bIsVisible;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SCTPlayerController_SetPlayerListWidget) == 0x000001, "Wrong alignment on SCTPlayerController_SetPlayerListWidget");
static_assert(sizeof(SCTPlayerController_SetPlayerListWidget) == 0x000001, "Wrong size on SCTPlayerController_SetPlayerListWidget");
static_assert(offsetof(SCTPlayerController_SetPlayerListWidget, bIsVisible) == 0x000000, "Member 'SCTPlayerController_SetPlayerListWidget::bIsVisible' has a wrong offset!");

// Function SCT.SCTPlayerController.SetVOIPCommunication
// 0x0001 (0x0001 - 0x0000)
struct SCTPlayerController_SetVOIPCommunication final
{
public:
	bool                                          Enable;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SCTPlayerController_SetVOIPCommunication) == 0x000001, "Wrong alignment on SCTPlayerController_SetVOIPCommunication");
static_assert(sizeof(SCTPlayerController_SetVOIPCommunication) == 0x000001, "Wrong size on SCTPlayerController_SetVOIPCommunication");
static_assert(offsetof(SCTPlayerController_SetVOIPCommunication, Enable) == 0x000000, "Member 'SCTPlayerController_SetVOIPCommunication::Enable' has a wrong offset!");

// Function SCT.SCTPlayerController.GetAccelbyteID
// 0x0010 (0x0010 - 0x0000)
struct SCTPlayerController_GetAccelbyteID final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SCTPlayerController_GetAccelbyteID) == 0x000008, "Wrong alignment on SCTPlayerController_GetAccelbyteID");
static_assert(sizeof(SCTPlayerController_GetAccelbyteID) == 0x000010, "Wrong size on SCTPlayerController_GetAccelbyteID");
static_assert(offsetof(SCTPlayerController_GetAccelbyteID, ReturnValue) == 0x000000, "Member 'SCTPlayerController_GetAccelbyteID::ReturnValue' has a wrong offset!");

// Function SCT.SCTPlayerController.GetModal
// 0x0008 (0x0008 - 0x0000)
struct SCTPlayerController_GetModal final
{
public:
	class UModal*                                 ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SCTPlayerController_GetModal) == 0x000008, "Wrong alignment on SCTPlayerController_GetModal");
static_assert(sizeof(SCTPlayerController_GetModal) == 0x000008, "Wrong size on SCTPlayerController_GetModal");
static_assert(offsetof(SCTPlayerController_GetModal, ReturnValue) == 0x000000, "Member 'SCTPlayerController_GetModal::ReturnValue' has a wrong offset!");

// Function SCT.SCTPlayerController.GetSymbolPuzzleComponent
// 0x0008 (0x0008 - 0x0000)
struct SCTPlayerController_GetSymbolPuzzleComponent final
{
public:
	class USymbolPuzzleComponent*                 ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SCTPlayerController_GetSymbolPuzzleComponent) == 0x000008, "Wrong alignment on SCTPlayerController_GetSymbolPuzzleComponent");
static_assert(sizeof(SCTPlayerController_GetSymbolPuzzleComponent) == 0x000008, "Wrong size on SCTPlayerController_GetSymbolPuzzleComponent");
static_assert(offsetof(SCTPlayerController_GetSymbolPuzzleComponent, ReturnValue) == 0x000000, "Member 'SCTPlayerController_GetSymbolPuzzleComponent::ReturnValue' has a wrong offset!");

// Function SCT.SCTPlayerController.GetWidgetOrganizer
// 0x0008 (0x0008 - 0x0000)
struct SCTPlayerController_GetWidgetOrganizer final
{
public:
	class UWidgetOrganizer*                       ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SCTPlayerController_GetWidgetOrganizer) == 0x000008, "Wrong alignment on SCTPlayerController_GetWidgetOrganizer");
static_assert(sizeof(SCTPlayerController_GetWidgetOrganizer) == 0x000008, "Wrong size on SCTPlayerController_GetWidgetOrganizer");
static_assert(offsetof(SCTPlayerController_GetWidgetOrganizer, ReturnValue) == 0x000000, "Member 'SCTPlayerController_GetWidgetOrganizer::ReturnValue' has a wrong offset!");

// Function SCT.SCTPlayerController_Match.Server_ProxyVoteOnLevel
// 0x0004 (0x0004 - 0x0000)
struct SCTPlayerController_Match_Server_ProxyVoteOnLevel final
{
public:
	int32                                         LevelIndex;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SCTPlayerController_Match_Server_ProxyVoteOnLevel) == 0x000004, "Wrong alignment on SCTPlayerController_Match_Server_ProxyVoteOnLevel");
static_assert(sizeof(SCTPlayerController_Match_Server_ProxyVoteOnLevel) == 0x000004, "Wrong size on SCTPlayerController_Match_Server_ProxyVoteOnLevel");
static_assert(offsetof(SCTPlayerController_Match_Server_ProxyVoteOnLevel, LevelIndex) == 0x000000, "Member 'SCTPlayerController_Match_Server_ProxyVoteOnLevel::LevelIndex' has a wrong offset!");

// Function SCT.SCTPlayerController_Warmup.Server_ApplyCustomGameSettings
// 0x0034 (0x0034 - 0x0000)
struct SCTPlayerController_Warmup_Server_ApplyCustomGameSettings final
{
public:
	struct FCustomGameSettings                    CustomSettings;                                    // 0x0000(0x0034)(ConstParm, Parm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(SCTPlayerController_Warmup_Server_ApplyCustomGameSettings) == 0x000004, "Wrong alignment on SCTPlayerController_Warmup_Server_ApplyCustomGameSettings");
static_assert(sizeof(SCTPlayerController_Warmup_Server_ApplyCustomGameSettings) == 0x000034, "Wrong size on SCTPlayerController_Warmup_Server_ApplyCustomGameSettings");
static_assert(offsetof(SCTPlayerController_Warmup_Server_ApplyCustomGameSettings, CustomSettings) == 0x000000, "Member 'SCTPlayerController_Warmup_Server_ApplyCustomGameSettings::CustomSettings' has a wrong offset!");

// Function SCT.SCTPlayerState.GrantPassengerLog
// 0x0028 (0x0028 - 0x0000)
struct SCTPlayerState_GrantPassengerLog final
{
public:
	struct FPassengerLogInformation               PassengerLogInformation;                           // 0x0000(0x0028)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(SCTPlayerState_GrantPassengerLog) == 0x000008, "Wrong alignment on SCTPlayerState_GrantPassengerLog");
static_assert(sizeof(SCTPlayerState_GrantPassengerLog) == 0x000028, "Wrong size on SCTPlayerState_GrantPassengerLog");
static_assert(offsetof(SCTPlayerState_GrantPassengerLog, PassengerLogInformation) == 0x000000, "Member 'SCTPlayerState_GrantPassengerLog::PassengerLogInformation' has a wrong offset!");

// Function SCT.SCTPlayerState.GetLatestPassengerLog
// 0x0028 (0x0028 - 0x0000)
struct SCTPlayerState_GetLatestPassengerLog final
{
public:
	struct FPassengerLogInformation               ReturnValue;                                       // 0x0000(0x0028)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(SCTPlayerState_GetLatestPassengerLog) == 0x000008, "Wrong alignment on SCTPlayerState_GetLatestPassengerLog");
static_assert(sizeof(SCTPlayerState_GetLatestPassengerLog) == 0x000028, "Wrong size on SCTPlayerState_GetLatestPassengerLog");
static_assert(offsetof(SCTPlayerState_GetLatestPassengerLog, ReturnValue) == 0x000000, "Member 'SCTPlayerState_GetLatestPassengerLog::ReturnValue' has a wrong offset!");

// Function SCT.SCTPlayerState.GetVoteSum
// 0x0004 (0x0004 - 0x0000)
struct SCTPlayerState_GetVoteSum final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SCTPlayerState_GetVoteSum) == 0x000004, "Wrong alignment on SCTPlayerState_GetVoteSum");
static_assert(sizeof(SCTPlayerState_GetVoteSum) == 0x000004, "Wrong size on SCTPlayerState_GetVoteSum");
static_assert(offsetof(SCTPlayerState_GetVoteSum, ReturnValue) == 0x000000, "Member 'SCTPlayerState_GetVoteSum::ReturnValue' has a wrong offset!");

// Function SCT.SCTPlayerState.HasPassengerLog
// 0x0001 (0x0001 - 0x0000)
struct SCTPlayerState_HasPassengerLog final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SCTPlayerState_HasPassengerLog) == 0x000001, "Wrong alignment on SCTPlayerState_HasPassengerLog");
static_assert(sizeof(SCTPlayerState_HasPassengerLog) == 0x000001, "Wrong size on SCTPlayerState_HasPassengerLog");
static_assert(offsetof(SCTPlayerState_HasPassengerLog, ReturnValue) == 0x000000, "Member 'SCTPlayerState_HasPassengerLog::ReturnValue' has a wrong offset!");

// Function SCT.SCTWidgetComponent.K2_InitWidget
// 0x0008 (0x0008 - 0x0000)
struct SCTWidgetComponent_K2_InitWidget final
{
public:
	class UWidget*                                InitializedWidget;                                 // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SCTWidgetComponent_K2_InitWidget) == 0x000008, "Wrong alignment on SCTWidgetComponent_K2_InitWidget");
static_assert(sizeof(SCTWidgetComponent_K2_InitWidget) == 0x000008, "Wrong size on SCTWidgetComponent_K2_InitWidget");
static_assert(offsetof(SCTWidgetComponent_K2_InitWidget, InitializedWidget) == 0x000000, "Member 'SCTWidgetComponent_K2_InitWidget::InitializedWidget' has a wrong offset!");

// Function SCT.SettingsObject.K2_Revert
// 0x0008 (0x0008 - 0x0000)
struct SettingsObject_K2_Revert final
{
public:
	const class USettingsObject*                  CachedData;                                        // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SettingsObject_K2_Revert) == 0x000008, "Wrong alignment on SettingsObject_K2_Revert");
static_assert(sizeof(SettingsObject_K2_Revert) == 0x000008, "Wrong size on SettingsObject_K2_Revert");
static_assert(offsetof(SettingsObject_K2_Revert, CachedData) == 0x000000, "Member 'SettingsObject_K2_Revert::CachedData' has a wrong offset!");

// Function SCT.SteamUserIDChanged.Broadcast
// 0x0018 (0x0018 - 0x0000)
struct SteamUserIDChanged_Broadcast final
{
public:
	class FString                                 SteamID;                                           // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PlayerId;                                          // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SteamUserIDChanged_Broadcast) == 0x000008, "Wrong alignment on SteamUserIDChanged_Broadcast");
static_assert(sizeof(SteamUserIDChanged_Broadcast) == 0x000018, "Wrong size on SteamUserIDChanged_Broadcast");
static_assert(offsetof(SteamUserIDChanged_Broadcast, SteamID) == 0x000000, "Member 'SteamUserIDChanged_Broadcast::SteamID' has a wrong offset!");
static_assert(offsetof(SteamUserIDChanged_Broadcast, PlayerId) == 0x000010, "Member 'SteamUserIDChanged_Broadcast::PlayerId' has a wrong offset!");

// Function SCT.SubMenuUserWidget.AddMenuItemWithEvent
// 0x0038 (0x0038 - 0x0000)
struct SubMenuUserWidget_AddMenuItemWithEvent final
{
public:
	class FText                                   Title;                                             // 0x0000(0x0018)(Parm, NativeAccessSpecifierPublic)
	TDelegate<void()>                             InOnPressed;                                       // 0x0018(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	float                                         Width;                                             // 0x0028(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class USubMenuSelectionButtonUserWidget*      ReturnValue;                                       // 0x0030(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SubMenuUserWidget_AddMenuItemWithEvent) == 0x000008, "Wrong alignment on SubMenuUserWidget_AddMenuItemWithEvent");
static_assert(sizeof(SubMenuUserWidget_AddMenuItemWithEvent) == 0x000038, "Wrong size on SubMenuUserWidget_AddMenuItemWithEvent");
static_assert(offsetof(SubMenuUserWidget_AddMenuItemWithEvent, Title) == 0x000000, "Member 'SubMenuUserWidget_AddMenuItemWithEvent::Title' has a wrong offset!");
static_assert(offsetof(SubMenuUserWidget_AddMenuItemWithEvent, InOnPressed) == 0x000018, "Member 'SubMenuUserWidget_AddMenuItemWithEvent::InOnPressed' has a wrong offset!");
static_assert(offsetof(SubMenuUserWidget_AddMenuItemWithEvent, Width) == 0x000028, "Member 'SubMenuUserWidget_AddMenuItemWithEvent::Width' has a wrong offset!");
static_assert(offsetof(SubMenuUserWidget_AddMenuItemWithEvent, ReturnValue) == 0x000030, "Member 'SubMenuUserWidget_AddMenuItemWithEvent::ReturnValue' has a wrong offset!");

// Function SCT.SymbolPuzzleWidget.ReceivedSeed
// 0x0004 (0x0004 - 0x0000)
struct SymbolPuzzleWidget_ReceivedSeed final
{
public:
	int32                                         Seed;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SymbolPuzzleWidget_ReceivedSeed) == 0x000004, "Wrong alignment on SymbolPuzzleWidget_ReceivedSeed");
static_assert(sizeof(SymbolPuzzleWidget_ReceivedSeed) == 0x000004, "Wrong size on SymbolPuzzleWidget_ReceivedSeed");
static_assert(offsetof(SymbolPuzzleWidget_ReceivedSeed, Seed) == 0x000000, "Member 'SymbolPuzzleWidget_ReceivedSeed::Seed' has a wrong offset!");

// Function SCT.SymbolPuzzleWidget.SymbolSelected
// 0x0004 (0x0004 - 0x0000)
struct SymbolPuzzleWidget_SymbolSelected final
{
public:
	int32                                         Index_0;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SymbolPuzzleWidget_SymbolSelected) == 0x000004, "Wrong alignment on SymbolPuzzleWidget_SymbolSelected");
static_assert(sizeof(SymbolPuzzleWidget_SymbolSelected) == 0x000004, "Wrong size on SymbolPuzzleWidget_SymbolSelected");
static_assert(offsetof(SymbolPuzzleWidget_SymbolSelected, Index_0) == 0x000000, "Member 'SymbolPuzzleWidget_SymbolSelected::Index_0' has a wrong offset!");

// Function SCT.ThumbsVoteInfoComponent.DownVote
// 0x0004 (0x0004 - 0x0000)
struct ThumbsVoteInfoComponent_DownVote final
{
public:
	int32                                         PlayerId;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ThumbsVoteInfoComponent_DownVote) == 0x000004, "Wrong alignment on ThumbsVoteInfoComponent_DownVote");
static_assert(sizeof(ThumbsVoteInfoComponent_DownVote) == 0x000004, "Wrong size on ThumbsVoteInfoComponent_DownVote");
static_assert(offsetof(ThumbsVoteInfoComponent_DownVote, PlayerId) == 0x000000, "Member 'ThumbsVoteInfoComponent_DownVote::PlayerId' has a wrong offset!");

// Function SCT.ThumbsVoteInfoComponent.RemoveVotes
// 0x0004 (0x0004 - 0x0000)
struct ThumbsVoteInfoComponent_RemoveVotes final
{
public:
	int32                                         Player;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ThumbsVoteInfoComponent_RemoveVotes) == 0x000004, "Wrong alignment on ThumbsVoteInfoComponent_RemoveVotes");
static_assert(sizeof(ThumbsVoteInfoComponent_RemoveVotes) == 0x000004, "Wrong size on ThumbsVoteInfoComponent_RemoveVotes");
static_assert(offsetof(ThumbsVoteInfoComponent_RemoveVotes, Player) == 0x000000, "Member 'ThumbsVoteInfoComponent_RemoveVotes::Player' has a wrong offset!");

// Function SCT.ThumbsVoteInfoComponent.Server_SetVotes
// 0x0030 (0x0030 - 0x0000)
struct ThumbsVoteInfoComponent_Server_SetVotes final
{
public:
	TArray<int32>                                 RemovedVotes;                                      // 0x0000(0x0010)(ConstParm, Parm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	TArray<int32>                                 UpVotes;                                           // 0x0010(0x0010)(ConstParm, Parm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	TArray<int32>                                 DownVotes;                                         // 0x0020(0x0010)(ConstParm, Parm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(ThumbsVoteInfoComponent_Server_SetVotes) == 0x000008, "Wrong alignment on ThumbsVoteInfoComponent_Server_SetVotes");
static_assert(sizeof(ThumbsVoteInfoComponent_Server_SetVotes) == 0x000030, "Wrong size on ThumbsVoteInfoComponent_Server_SetVotes");
static_assert(offsetof(ThumbsVoteInfoComponent_Server_SetVotes, RemovedVotes) == 0x000000, "Member 'ThumbsVoteInfoComponent_Server_SetVotes::RemovedVotes' has a wrong offset!");
static_assert(offsetof(ThumbsVoteInfoComponent_Server_SetVotes, UpVotes) == 0x000010, "Member 'ThumbsVoteInfoComponent_Server_SetVotes::UpVotes' has a wrong offset!");
static_assert(offsetof(ThumbsVoteInfoComponent_Server_SetVotes, DownVotes) == 0x000020, "Member 'ThumbsVoteInfoComponent_Server_SetVotes::DownVotes' has a wrong offset!");

// Function SCT.ThumbsVoteInfoComponent.UpVote
// 0x0004 (0x0004 - 0x0000)
struct ThumbsVoteInfoComponent_UpVote final
{
public:
	int32                                         PlayerId;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ThumbsVoteInfoComponent_UpVote) == 0x000004, "Wrong alignment on ThumbsVoteInfoComponent_UpVote");
static_assert(sizeof(ThumbsVoteInfoComponent_UpVote) == 0x000004, "Wrong size on ThumbsVoteInfoComponent_UpVote");
static_assert(offsetof(ThumbsVoteInfoComponent_UpVote, PlayerId) == 0x000000, "Member 'ThumbsVoteInfoComponent_UpVote::PlayerId' has a wrong offset!");

// Function SCT.ThumbsVoteInfoComponent.GetAllOtherThumbsVoteComponents
// 0x0010 (0x0010 - 0x0000)
struct ThumbsVoteInfoComponent_GetAllOtherThumbsVoteComponents final
{
public:
	TArray<class UThumbsVoteInfoComponent*>       ReturnValue;                                       // 0x0000(0x0010)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(ThumbsVoteInfoComponent_GetAllOtherThumbsVoteComponents) == 0x000008, "Wrong alignment on ThumbsVoteInfoComponent_GetAllOtherThumbsVoteComponents");
static_assert(sizeof(ThumbsVoteInfoComponent_GetAllOtherThumbsVoteComponents) == 0x000010, "Wrong size on ThumbsVoteInfoComponent_GetAllOtherThumbsVoteComponents");
static_assert(offsetof(ThumbsVoteInfoComponent_GetAllOtherThumbsVoteComponents, ReturnValue) == 0x000000, "Member 'ThumbsVoteInfoComponent_GetAllOtherThumbsVoteComponents::ReturnValue' has a wrong offset!");

// Function SCT.ThumbsVoteInfoComponent.GetOwnerPlayerID
// 0x0004 (0x0004 - 0x0000)
struct ThumbsVoteInfoComponent_GetOwnerPlayerID final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ThumbsVoteInfoComponent_GetOwnerPlayerID) == 0x000004, "Wrong alignment on ThumbsVoteInfoComponent_GetOwnerPlayerID");
static_assert(sizeof(ThumbsVoteInfoComponent_GetOwnerPlayerID) == 0x000004, "Wrong size on ThumbsVoteInfoComponent_GetOwnerPlayerID");
static_assert(offsetof(ThumbsVoteInfoComponent_GetOwnerPlayerID, ReturnValue) == 0x000000, "Member 'ThumbsVoteInfoComponent_GetOwnerPlayerID::ReturnValue' has a wrong offset!");

// Function SCT.ThumbsVoteInfoComponent.HasDownvotedPlayer
// 0x0008 (0x0008 - 0x0000)
struct ThumbsVoteInfoComponent_HasDownvotedPlayer final
{
public:
	int32                                         Player;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ThumbsVoteInfoComponent_HasDownvotedPlayer) == 0x000004, "Wrong alignment on ThumbsVoteInfoComponent_HasDownvotedPlayer");
static_assert(sizeof(ThumbsVoteInfoComponent_HasDownvotedPlayer) == 0x000008, "Wrong size on ThumbsVoteInfoComponent_HasDownvotedPlayer");
static_assert(offsetof(ThumbsVoteInfoComponent_HasDownvotedPlayer, Player) == 0x000000, "Member 'ThumbsVoteInfoComponent_HasDownvotedPlayer::Player' has a wrong offset!");
static_assert(offsetof(ThumbsVoteInfoComponent_HasDownvotedPlayer, ReturnValue) == 0x000004, "Member 'ThumbsVoteInfoComponent_HasDownvotedPlayer::ReturnValue' has a wrong offset!");

// Function SCT.ThumbsVoteInfoComponent.HasUpvotedPlayer
// 0x0008 (0x0008 - 0x0000)
struct ThumbsVoteInfoComponent_HasUpvotedPlayer final
{
public:
	int32                                         Player;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ThumbsVoteInfoComponent_HasUpvotedPlayer) == 0x000004, "Wrong alignment on ThumbsVoteInfoComponent_HasUpvotedPlayer");
static_assert(sizeof(ThumbsVoteInfoComponent_HasUpvotedPlayer) == 0x000008, "Wrong size on ThumbsVoteInfoComponent_HasUpvotedPlayer");
static_assert(offsetof(ThumbsVoteInfoComponent_HasUpvotedPlayer, Player) == 0x000000, "Member 'ThumbsVoteInfoComponent_HasUpvotedPlayer::Player' has a wrong offset!");
static_assert(offsetof(ThumbsVoteInfoComponent_HasUpvotedPlayer, ReturnValue) == 0x000004, "Member 'ThumbsVoteInfoComponent_HasUpvotedPlayer::ReturnValue' has a wrong offset!");

// Function SCT.UserDataCallbackProxy.GetUserData
// 0x0008 (0x0008 - 0x0000)
struct UserDataCallbackProxy_GetUserData final
{
public:
	class UUserDataCallbackProxy*                 ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UserDataCallbackProxy_GetUserData) == 0x000008, "Wrong alignment on UserDataCallbackProxy_GetUserData");
static_assert(sizeof(UserDataCallbackProxy_GetUserData) == 0x000008, "Wrong size on UserDataCallbackProxy_GetUserData");
static_assert(offsetof(UserDataCallbackProxy_GetUserData, ReturnValue) == 0x000000, "Member 'UserDataCallbackProxy_GetUserData::ReturnValue' has a wrong offset!");

// Function SCT.FCTAuthUpdateUserCallbackProxy.UpdateUser
// 0x0038 (0x0038 - 0x0000)
struct FCTAuthUpdateUserCallbackProxy_UpdateUser final
{
public:
	class FString                                 DisplayName;                                       // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 BirthDate;                                         // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Email;                                             // 0x0020(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFCTAuthUpdateUserCallbackProxy*        ReturnValue;                                       // 0x0030(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCTAuthUpdateUserCallbackProxy_UpdateUser) == 0x000008, "Wrong alignment on FCTAuthUpdateUserCallbackProxy_UpdateUser");
static_assert(sizeof(FCTAuthUpdateUserCallbackProxy_UpdateUser) == 0x000038, "Wrong size on FCTAuthUpdateUserCallbackProxy_UpdateUser");
static_assert(offsetof(FCTAuthUpdateUserCallbackProxy_UpdateUser, DisplayName) == 0x000000, "Member 'FCTAuthUpdateUserCallbackProxy_UpdateUser::DisplayName' has a wrong offset!");
static_assert(offsetof(FCTAuthUpdateUserCallbackProxy_UpdateUser, BirthDate) == 0x000010, "Member 'FCTAuthUpdateUserCallbackProxy_UpdateUser::BirthDate' has a wrong offset!");
static_assert(offsetof(FCTAuthUpdateUserCallbackProxy_UpdateUser, Email) == 0x000020, "Member 'FCTAuthUpdateUserCallbackProxy_UpdateUser::Email' has a wrong offset!");
static_assert(offsetof(FCTAuthUpdateUserCallbackProxy_UpdateUser, ReturnValue) == 0x000030, "Member 'FCTAuthUpdateUserCallbackProxy_UpdateUser::ReturnValue' has a wrong offset!");

// Function SCT.GetCloudFloatDataCallbackProxy.GetCloudRecordValue
// 0x0020 (0x0020 - 0x0000)
struct GetCloudFloatDataCallbackProxy_GetCloudRecordValue final
{
public:
	EUserRecordType                               UserRecord;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 FieldName;                                         // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UGetCloudFloatDataCallbackProxy*        ReturnValue;                                       // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GetCloudFloatDataCallbackProxy_GetCloudRecordValue) == 0x000008, "Wrong alignment on GetCloudFloatDataCallbackProxy_GetCloudRecordValue");
static_assert(sizeof(GetCloudFloatDataCallbackProxy_GetCloudRecordValue) == 0x000020, "Wrong size on GetCloudFloatDataCallbackProxy_GetCloudRecordValue");
static_assert(offsetof(GetCloudFloatDataCallbackProxy_GetCloudRecordValue, UserRecord) == 0x000000, "Member 'GetCloudFloatDataCallbackProxy_GetCloudRecordValue::UserRecord' has a wrong offset!");
static_assert(offsetof(GetCloudFloatDataCallbackProxy_GetCloudRecordValue, FieldName) == 0x000008, "Member 'GetCloudFloatDataCallbackProxy_GetCloudRecordValue::FieldName' has a wrong offset!");
static_assert(offsetof(GetCloudFloatDataCallbackProxy_GetCloudRecordValue, ReturnValue) == 0x000018, "Member 'GetCloudFloatDataCallbackProxy_GetCloudRecordValue::ReturnValue' has a wrong offset!");

// Function SCT.SetCloudFloatDataCallbackProxy.SetCloudRecordValue
// 0x0028 (0x0028 - 0x0000)
struct SetCloudFloatDataCallbackProxy_SetCloudRecordValue final
{
public:
	EUserRecordType                               UserRecord;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 FieldName;                                         // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AddValue;                                          // 0x0018(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class USetCloudFloatDataCallbackProxy*        ReturnValue;                                       // 0x0020(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SetCloudFloatDataCallbackProxy_SetCloudRecordValue) == 0x000008, "Wrong alignment on SetCloudFloatDataCallbackProxy_SetCloudRecordValue");
static_assert(sizeof(SetCloudFloatDataCallbackProxy_SetCloudRecordValue) == 0x000028, "Wrong size on SetCloudFloatDataCallbackProxy_SetCloudRecordValue");
static_assert(offsetof(SetCloudFloatDataCallbackProxy_SetCloudRecordValue, UserRecord) == 0x000000, "Member 'SetCloudFloatDataCallbackProxy_SetCloudRecordValue::UserRecord' has a wrong offset!");
static_assert(offsetof(SetCloudFloatDataCallbackProxy_SetCloudRecordValue, FieldName) == 0x000008, "Member 'SetCloudFloatDataCallbackProxy_SetCloudRecordValue::FieldName' has a wrong offset!");
static_assert(offsetof(SetCloudFloatDataCallbackProxy_SetCloudRecordValue, AddValue) == 0x000018, "Member 'SetCloudFloatDataCallbackProxy_SetCloudRecordValue::AddValue' has a wrong offset!");
static_assert(offsetof(SetCloudFloatDataCallbackProxy_SetCloudRecordValue, ReturnValue) == 0x000020, "Member 'SetCloudFloatDataCallbackProxy_SetCloudRecordValue::ReturnValue' has a wrong offset!");

// Function SCT.CloudCustomizationDataCallbackProxy.GetPublicUserCustomizationRecordByGender
// 0x0020 (0x0020 - 0x0000)
struct CloudCustomizationDataCallbackProxy_GetPublicUserCustomizationRecordByGender final
{
public:
	class FString                                 UserId;                                            // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Male;                                              // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UCloudCustomizationDataCallbackProxy*   ReturnValue;                                       // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CloudCustomizationDataCallbackProxy_GetPublicUserCustomizationRecordByGender) == 0x000008, "Wrong alignment on CloudCustomizationDataCallbackProxy_GetPublicUserCustomizationRecordByGender");
static_assert(sizeof(CloudCustomizationDataCallbackProxy_GetPublicUserCustomizationRecordByGender) == 0x000020, "Wrong size on CloudCustomizationDataCallbackProxy_GetPublicUserCustomizationRecordByGender");
static_assert(offsetof(CloudCustomizationDataCallbackProxy_GetPublicUserCustomizationRecordByGender, UserId) == 0x000000, "Member 'CloudCustomizationDataCallbackProxy_GetPublicUserCustomizationRecordByGender::UserId' has a wrong offset!");
static_assert(offsetof(CloudCustomizationDataCallbackProxy_GetPublicUserCustomizationRecordByGender, Male) == 0x000010, "Member 'CloudCustomizationDataCallbackProxy_GetPublicUserCustomizationRecordByGender::Male' has a wrong offset!");
static_assert(offsetof(CloudCustomizationDataCallbackProxy_GetPublicUserCustomizationRecordByGender, ReturnValue) == 0x000018, "Member 'CloudCustomizationDataCallbackProxy_GetPublicUserCustomizationRecordByGender::ReturnValue' has a wrong offset!");

// Function SCT.CloudCustomizationDataCallbackProxy.GetPublicUserCustomizationRecordBySelectedGender
// 0x0018 (0x0018 - 0x0000)
struct CloudCustomizationDataCallbackProxy_GetPublicUserCustomizationRecordBySelectedGender final
{
public:
	class FString                                 UserId;                                            // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCloudCustomizationDataCallbackProxy*   ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CloudCustomizationDataCallbackProxy_GetPublicUserCustomizationRecordBySelectedGender) == 0x000008, "Wrong alignment on CloudCustomizationDataCallbackProxy_GetPublicUserCustomizationRecordBySelectedGender");
static_assert(sizeof(CloudCustomizationDataCallbackProxy_GetPublicUserCustomizationRecordBySelectedGender) == 0x000018, "Wrong size on CloudCustomizationDataCallbackProxy_GetPublicUserCustomizationRecordBySelectedGender");
static_assert(offsetof(CloudCustomizationDataCallbackProxy_GetPublicUserCustomizationRecordBySelectedGender, UserId) == 0x000000, "Member 'CloudCustomizationDataCallbackProxy_GetPublicUserCustomizationRecordBySelectedGender::UserId' has a wrong offset!");
static_assert(offsetof(CloudCustomizationDataCallbackProxy_GetPublicUserCustomizationRecordBySelectedGender, ReturnValue) == 0x000010, "Member 'CloudCustomizationDataCallbackProxy_GetPublicUserCustomizationRecordBySelectedGender::ReturnValue' has a wrong offset!");

// Function SCT.CloudCustomizationDataCallbackProxy.GetUserCustomizationRecordByGender
// 0x0010 (0x0010 - 0x0000)
struct CloudCustomizationDataCallbackProxy_GetUserCustomizationRecordByGender final
{
public:
	bool                                          Male;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UCloudCustomizationDataCallbackProxy*   ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CloudCustomizationDataCallbackProxy_GetUserCustomizationRecordByGender) == 0x000008, "Wrong alignment on CloudCustomizationDataCallbackProxy_GetUserCustomizationRecordByGender");
static_assert(sizeof(CloudCustomizationDataCallbackProxy_GetUserCustomizationRecordByGender) == 0x000010, "Wrong size on CloudCustomizationDataCallbackProxy_GetUserCustomizationRecordByGender");
static_assert(offsetof(CloudCustomizationDataCallbackProxy_GetUserCustomizationRecordByGender, Male) == 0x000000, "Member 'CloudCustomizationDataCallbackProxy_GetUserCustomizationRecordByGender::Male' has a wrong offset!");
static_assert(offsetof(CloudCustomizationDataCallbackProxy_GetUserCustomizationRecordByGender, ReturnValue) == 0x000008, "Member 'CloudCustomizationDataCallbackProxy_GetUserCustomizationRecordByGender::ReturnValue' has a wrong offset!");

// Function SCT.CloudCustomizationDataCallbackProxy.GetUserCustomizationRecordBySelectedGender
// 0x0008 (0x0008 - 0x0000)
struct CloudCustomizationDataCallbackProxy_GetUserCustomizationRecordBySelectedGender final
{
public:
	class UCloudCustomizationDataCallbackProxy*   ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CloudCustomizationDataCallbackProxy_GetUserCustomizationRecordBySelectedGender) == 0x000008, "Wrong alignment on CloudCustomizationDataCallbackProxy_GetUserCustomizationRecordBySelectedGender");
static_assert(sizeof(CloudCustomizationDataCallbackProxy_GetUserCustomizationRecordBySelectedGender) == 0x000008, "Wrong size on CloudCustomizationDataCallbackProxy_GetUserCustomizationRecordBySelectedGender");
static_assert(offsetof(CloudCustomizationDataCallbackProxy_GetUserCustomizationRecordBySelectedGender, ReturnValue) == 0x000000, "Member 'CloudCustomizationDataCallbackProxy_GetUserCustomizationRecordBySelectedGender::ReturnValue' has a wrong offset!");

// Function SCT.CloudCustomizationDataCallbackProxy.SetUserCustomizationRecord
// 0x0098 (0x0098 - 0x0000)
struct CloudCustomizationDataCallbackProxy_SetUserCustomizationRecord final
{
public:
	struct FCloudCustomizationPayload             MalePayload;                                       // 0x0000(0x0044)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	struct FCloudCustomizationPayload             FemalePayload;                                     // 0x0044(0x0044)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          MaleIsSelected;                                    // 0x0088(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_89[0x7];                                       // 0x0089(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UCloudCustomizationDataCallbackProxy*   ReturnValue;                                       // 0x0090(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CloudCustomizationDataCallbackProxy_SetUserCustomizationRecord) == 0x000008, "Wrong alignment on CloudCustomizationDataCallbackProxy_SetUserCustomizationRecord");
static_assert(sizeof(CloudCustomizationDataCallbackProxy_SetUserCustomizationRecord) == 0x000098, "Wrong size on CloudCustomizationDataCallbackProxy_SetUserCustomizationRecord");
static_assert(offsetof(CloudCustomizationDataCallbackProxy_SetUserCustomizationRecord, MalePayload) == 0x000000, "Member 'CloudCustomizationDataCallbackProxy_SetUserCustomizationRecord::MalePayload' has a wrong offset!");
static_assert(offsetof(CloudCustomizationDataCallbackProxy_SetUserCustomizationRecord, FemalePayload) == 0x000044, "Member 'CloudCustomizationDataCallbackProxy_SetUserCustomizationRecord::FemalePayload' has a wrong offset!");
static_assert(offsetof(CloudCustomizationDataCallbackProxy_SetUserCustomizationRecord, MaleIsSelected) == 0x000088, "Member 'CloudCustomizationDataCallbackProxy_SetUserCustomizationRecord::MaleIsSelected' has a wrong offset!");
static_assert(offsetof(CloudCustomizationDataCallbackProxy_SetUserCustomizationRecord, ReturnValue) == 0x000090, "Member 'CloudCustomizationDataCallbackProxy_SetUserCustomizationRecord::ReturnValue' has a wrong offset!");

// Function SCT.FCTUpdateUserProfileCustomAttributesCallbackProxy.UpdateUserProfileCustomAttributes
// 0x0010 (0x0010 - 0x0000)
struct FCTUpdateUserProfileCustomAttributesCallbackProxy_UpdateUserProfileCustomAttributes final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFCTUpdateUserProfileCustomAttributesCallbackProxy* ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCTUpdateUserProfileCustomAttributesCallbackProxy_UpdateUserProfileCustomAttributes) == 0x000008, "Wrong alignment on FCTUpdateUserProfileCustomAttributesCallbackProxy_UpdateUserProfileCustomAttributes");
static_assert(sizeof(FCTUpdateUserProfileCustomAttributesCallbackProxy_UpdateUserProfileCustomAttributes) == 0x000010, "Wrong size on FCTUpdateUserProfileCustomAttributesCallbackProxy_UpdateUserProfileCustomAttributes");
static_assert(offsetof(FCTUpdateUserProfileCustomAttributesCallbackProxy_UpdateUserProfileCustomAttributes, WorldContextObject) == 0x000000, "Member 'FCTUpdateUserProfileCustomAttributesCallbackProxy_UpdateUserProfileCustomAttributes::WorldContextObject' has a wrong offset!");
static_assert(offsetof(FCTUpdateUserProfileCustomAttributesCallbackProxy_UpdateUserProfileCustomAttributes, ReturnValue) == 0x000008, "Member 'FCTUpdateUserProfileCustomAttributesCallbackProxy_UpdateUserProfileCustomAttributes::ReturnValue' has a wrong offset!");

// Function SCT.UserInputSettings.GetFloatValue
// 0x0010 (0x0010 - 0x0000)
struct UserInputSettings_GetFloatValue final
{
public:
	class FName                                   InfoKey;                                           // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FallbackValue;                                     // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UserInputSettings_GetFloatValue) == 0x000004, "Wrong alignment on UserInputSettings_GetFloatValue");
static_assert(sizeof(UserInputSettings_GetFloatValue) == 0x000010, "Wrong size on UserInputSettings_GetFloatValue");
static_assert(offsetof(UserInputSettings_GetFloatValue, InfoKey) == 0x000000, "Member 'UserInputSettings_GetFloatValue::InfoKey' has a wrong offset!");
static_assert(offsetof(UserInputSettings_GetFloatValue, FallbackValue) == 0x000008, "Member 'UserInputSettings_GetFloatValue::FallbackValue' has a wrong offset!");
static_assert(offsetof(UserInputSettings_GetFloatValue, ReturnValue) == 0x00000C, "Member 'UserInputSettings_GetFloatValue::ReturnValue' has a wrong offset!");

// Function SCT.UserInputSettings.GetSubComponent
// 0x0010 (0x0010 - 0x0000)
struct UserInputSettings_GetSubComponent final
{
public:
	TSubclassOf<class UInputSettingsSubComponent> SubComponentType;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UInputSettingsSubComponent*             ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UserInputSettings_GetSubComponent) == 0x000008, "Wrong alignment on UserInputSettings_GetSubComponent");
static_assert(sizeof(UserInputSettings_GetSubComponent) == 0x000010, "Wrong size on UserInputSettings_GetSubComponent");
static_assert(offsetof(UserInputSettings_GetSubComponent, SubComponentType) == 0x000000, "Member 'UserInputSettings_GetSubComponent::SubComponentType' has a wrong offset!");
static_assert(offsetof(UserInputSettings_GetSubComponent, ReturnValue) == 0x000008, "Member 'UserInputSettings_GetSubComponent::ReturnValue' has a wrong offset!");

// Function SCT.UserInputSettings.SetFloatValue
// 0x000C (0x000C - 0x0000)
struct UserInputSettings_SetFloatValue final
{
public:
	class FName                                   InfoKey;                                           // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         NewValue;                                          // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UserInputSettings_SetFloatValue) == 0x000004, "Wrong alignment on UserInputSettings_SetFloatValue");
static_assert(sizeof(UserInputSettings_SetFloatValue) == 0x00000C, "Wrong size on UserInputSettings_SetFloatValue");
static_assert(offsetof(UserInputSettings_SetFloatValue, InfoKey) == 0x000000, "Member 'UserInputSettings_SetFloatValue::InfoKey' has a wrong offset!");
static_assert(offsetof(UserInputSettings_SetFloatValue, NewValue) == 0x000008, "Member 'UserInputSettings_SetFloatValue::NewValue' has a wrong offset!");

// Function SCT.UserInputSettings.IsKeyBound
// 0x0030 (0x0030 - 0x0000)
struct UserInputSettings_IsKeyBound final
{
public:
	class FName                                   Name_0;                                            // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FInputChord                            Key;                                               // 0x0008(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0028(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(UserInputSettings_IsKeyBound) == 0x000008, "Wrong alignment on UserInputSettings_IsKeyBound");
static_assert(sizeof(UserInputSettings_IsKeyBound) == 0x000030, "Wrong size on UserInputSettings_IsKeyBound");
static_assert(offsetof(UserInputSettings_IsKeyBound, Name_0) == 0x000000, "Member 'UserInputSettings_IsKeyBound::Name_0' has a wrong offset!");
static_assert(offsetof(UserInputSettings_IsKeyBound, Key) == 0x000008, "Member 'UserInputSettings_IsKeyBound::Key' has a wrong offset!");
static_assert(offsetof(UserInputSettings_IsKeyBound, ReturnValue) == 0x000028, "Member 'UserInputSettings_IsKeyBound::ReturnValue' has a wrong offset!");

// Function SCT.XboxUserPrivilegeManagerGIS.ClearCache
// 0x0001 (0x0001 - 0x0000)
struct XboxUserPrivilegeManagerGIS_ClearCache final
{
public:
	bool                                          bInClearUserCacheOnly;                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(XboxUserPrivilegeManagerGIS_ClearCache) == 0x000001, "Wrong alignment on XboxUserPrivilegeManagerGIS_ClearCache");
static_assert(sizeof(XboxUserPrivilegeManagerGIS_ClearCache) == 0x000001, "Wrong size on XboxUserPrivilegeManagerGIS_ClearCache");
static_assert(offsetof(XboxUserPrivilegeManagerGIS_ClearCache, bInClearUserCacheOnly) == 0x000000, "Member 'XboxUserPrivilegeManagerGIS_ClearCache::bInClearUserCacheOnly' has a wrong offset!");

// Function SCT.BlueprintXboxUserMultiplePrivilegeCheckerCallbackProxy.CheckMultipleCommunicationPrivileges
// 0x0030 (0x0030 - 0x0000)
struct BlueprintXboxUserMultiplePrivilegeCheckerCallbackProxy_CheckMultipleCommunicationPrivileges final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class APlayerController*                      InPlayerController;                                // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FString>                         InXboxLiveUserIDs;                                 // 0x0010(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          bInForceUpdate;                                    // 0x0020(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UBlueprintXboxUserMultiplePrivilegeCheckerCallbackProxy* ReturnValue;                                       // 0x0028(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BlueprintXboxUserMultiplePrivilegeCheckerCallbackProxy_CheckMultipleCommunicationPrivileges) == 0x000008, "Wrong alignment on BlueprintXboxUserMultiplePrivilegeCheckerCallbackProxy_CheckMultipleCommunicationPrivileges");
static_assert(sizeof(BlueprintXboxUserMultiplePrivilegeCheckerCallbackProxy_CheckMultipleCommunicationPrivileges) == 0x000030, "Wrong size on BlueprintXboxUserMultiplePrivilegeCheckerCallbackProxy_CheckMultipleCommunicationPrivileges");
static_assert(offsetof(BlueprintXboxUserMultiplePrivilegeCheckerCallbackProxy_CheckMultipleCommunicationPrivileges, WorldContextObject) == 0x000000, "Member 'BlueprintXboxUserMultiplePrivilegeCheckerCallbackProxy_CheckMultipleCommunicationPrivileges::WorldContextObject' has a wrong offset!");
static_assert(offsetof(BlueprintXboxUserMultiplePrivilegeCheckerCallbackProxy_CheckMultipleCommunicationPrivileges, InPlayerController) == 0x000008, "Member 'BlueprintXboxUserMultiplePrivilegeCheckerCallbackProxy_CheckMultipleCommunicationPrivileges::InPlayerController' has a wrong offset!");
static_assert(offsetof(BlueprintXboxUserMultiplePrivilegeCheckerCallbackProxy_CheckMultipleCommunicationPrivileges, InXboxLiveUserIDs) == 0x000010, "Member 'BlueprintXboxUserMultiplePrivilegeCheckerCallbackProxy_CheckMultipleCommunicationPrivileges::InXboxLiveUserIDs' has a wrong offset!");
static_assert(offsetof(BlueprintXboxUserMultiplePrivilegeCheckerCallbackProxy_CheckMultipleCommunicationPrivileges, bInForceUpdate) == 0x000020, "Member 'BlueprintXboxUserMultiplePrivilegeCheckerCallbackProxy_CheckMultipleCommunicationPrivileges::bInForceUpdate' has a wrong offset!");
static_assert(offsetof(BlueprintXboxUserMultiplePrivilegeCheckerCallbackProxy_CheckMultipleCommunicationPrivileges, ReturnValue) == 0x000028, "Member 'BlueprintXboxUserMultiplePrivilegeCheckerCallbackProxy_CheckMultipleCommunicationPrivileges::ReturnValue' has a wrong offset!");

}

