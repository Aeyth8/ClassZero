#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: CharacterSCTBP

#include "Basic.hpp"

#include "CharacterSCTBP_classes.hpp"
#include "CharacterSCTBP_parameters.hpp"


namespace SDK
{

// Function CharacterSCTBP.CharacterSCTBP_C.OnGrabbingActorChanged__DelegateSignature
// (Public, Delegate, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           NewGrabbingActor                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ACharacterSCTBP_C::OnGrabbingActorChanged__DelegateSignature(class AActor* NewGrabbingActor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterSCTBP_C", "OnGrabbingActorChanged__DelegateSignature");

	Params::CharacterSCTBP_C_OnGrabbingActorChanged__DelegateSignature Parms{};

	Parms.NewGrabbingActor = NewGrabbingActor;

	UObject::ProcessEvent(Func, &Parms);
}


// Function CharacterSCTBP.CharacterSCTBP_C.OnKillingActorChanged__DelegateSignature
// (Public, Delegate, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ACharacterSCT*                    NewKillingActor                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ACharacterSCTBP_C::OnKillingActorChanged__DelegateSignature(class ACharacterSCT* NewKillingActor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterSCTBP_C", "OnKillingActorChanged__DelegateSignature");

	Params::CharacterSCTBP_C_OnKillingActorChanged__DelegateSignature Parms{};

	Parms.NewKillingActor = NewKillingActor;

	UObject::ProcessEvent(Func, &Parms);
}


// Function CharacterSCTBP.CharacterSCTBP_C.OnBecameUnconscious__DelegateSignature
// (Public, Delegate, BlueprintCallable, BlueprintEvent)

void ACharacterSCTBP_C::OnBecameUnconscious__DelegateSignature()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterSCTBP_C", "OnBecameUnconscious__DelegateSignature");

	UObject::ProcessEvent(Func, nullptr);
}


// Function CharacterSCTBP.CharacterSCTBP_C.On_PIESetCustomization__DelegateSignature
// (Public, Delegate, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FString                           PlayerAccelByteID                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)

void ACharacterSCTBP_C::On_PIESetCustomization__DelegateSignature(const class FString& PlayerAccelByteID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterSCTBP_C", "On_PIESetCustomization__DelegateSignature");

	Params::CharacterSCTBP_C_On_PIESetCustomization__DelegateSignature Parms{};

	Parms.PlayerAccelByteID = std::move(PlayerAccelByteID);

	UObject::ProcessEvent(Func, &Parms);
}


// Function CharacterSCTBP.CharacterSCTBP_C.ExecuteUbergraph_CharacterSCTBP
// (Final, UbergraphFunction, HasDefaults)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ACharacterSCTBP_C::ExecuteUbergraph_CharacterSCTBP(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterSCTBP_C", "ExecuteUbergraph_CharacterSCTBP");

	Params::CharacterSCTBP_C_ExecuteUbergraph_CharacterSCTBP Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function CharacterSCTBP.CharacterSCTBP_C.Owner Show Coop Actor Waiting
// (Net, NetClient, BlueprintCallable, BlueprintEvent)

void ACharacterSCTBP_C::Owner_Show_Coop_Actor_Waiting()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterSCTBP_C", "Owner Show Coop Actor Waiting");

	UObject::ProcessEvent(Func, nullptr);
}


// Function CharacterSCTBP.CharacterSCTBP_C.Remove All Coop Actor Waiting And Skillchecks
// (Net, NetClient, BlueprintCallable, BlueprintEvent)

void ACharacterSCTBP_C::Remove_All_Coop_Actor_Waiting_And_Skillchecks()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterSCTBP_C", "Remove All Coop Actor Waiting And Skillchecks");

	UObject::ProcessEvent(Func, nullptr);
}


// Function CharacterSCTBP.CharacterSCTBP_C.Owner Coop Actor Show Waiting
// (Net, NetClient, BlueprintCallable, BlueprintEvent)

void ACharacterSCTBP_C::Owner_Coop_Actor_Show_Waiting()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterSCTBP_C", "Owner Coop Actor Show Waiting");

	UObject::ProcessEvent(Func, nullptr);
}


// Function CharacterSCTBP.CharacterSCTBP_C.Coop Actor Start ProgressBar
// (Net, NetClient, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ACoopActorSCT_C*                  CoopActor                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   Duration                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ACharacterSCTBP_C::Coop_Actor_Start_ProgressBar(class ACoopActorSCT_C* CoopActor, float Duration)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterSCTBP_C", "Coop Actor Start ProgressBar");

	Params::CharacterSCTBP_C_Coop_Actor_Start_ProgressBar Parms{};

	Parms.CoopActor = CoopActor;
	Parms.Duration = Duration;

	UObject::ProcessEvent(Func, &Parms);
}


// Function CharacterSCTBP.CharacterSCTBP_C.Start Skillcheck
// (Net, NetClient, BlueprintCallable, BlueprintEvent)

void ACharacterSCTBP_C::Start_Skillcheck()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterSCTBP_C", "Start Skillcheck");

	UObject::ProcessEvent(Func, nullptr);
}


// Function CharacterSCTBP.CharacterSCTBP_C.Failed Skillcheck
// (BlueprintCallable, BlueprintEvent)

void ACharacterSCTBP_C::Failed_Skillcheck()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterSCTBP_C", "Failed Skillcheck");

	UObject::ProcessEvent(Func, nullptr);
}


// Function CharacterSCTBP.CharacterSCTBP_C.Server_Fail Skillcheck
// (Net, NetServer, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ACoopActorSCT_C*                  Target                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ACharacterSCTBP_C::Server_Fail_Skillcheck(class ACoopActorSCT_C* Target)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterSCTBP_C", "Server_Fail Skillcheck");

	Params::CharacterSCTBP_C_Server_Fail_Skillcheck Parms{};

	Parms.Target = Target;

	UObject::ProcessEvent(Func, &Parms);
}


// Function CharacterSCTBP.CharacterSCTBP_C.Coop Actor Start Waiting
// (BlueprintCallable, BlueprintEvent)

void ACharacterSCTBP_C::Coop_Actor_Start_Waiting()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterSCTBP_C", "Coop Actor Start Waiting");

	UObject::ProcessEvent(Func, nullptr);
}


// Function CharacterSCTBP.CharacterSCTBP_C.Close Show Skillcheck Audio Gate
// (BlueprintCallable, BlueprintEvent)

void ACharacterSCTBP_C::Close_Show_Skillcheck_Audio_Gate()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterSCTBP_C", "Close Show Skillcheck Audio Gate");

	UObject::ProcessEvent(Func, nullptr);
}


// Function CharacterSCTBP.CharacterSCTBP_C.Hit By Champagne Bottle
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   Time                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ACharacterSCTBP_C::Hit_By_Champagne_Bottle(float Time)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterSCTBP_C", "Hit By Champagne Bottle");

	Params::CharacterSCTBP_C_Hit_By_Champagne_Bottle Parms{};

	Parms.Time = Time;

	UObject::ProcessEvent(Func, &Parms);
}


// Function CharacterSCTBP.CharacterSCTBP_C.Knock Unconscious
// (BlueprintCallable, BlueprintEvent)

void ACharacterSCTBP_C::Knock_Unconscious()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterSCTBP_C", "Knock Unconscious");

	UObject::ProcessEvent(Func, nullptr);
}


// Function CharacterSCTBP.CharacterSCTBP_C.Get Up From Champagne Knockout
// (BlueprintCallable, BlueprintEvent)

void ACharacterSCTBP_C::Get_Up_From_Champagne_Knockout()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterSCTBP_C", "Get Up From Champagne Knockout");

	UObject::ProcessEvent(Func, nullptr);
}


// Function CharacterSCTBP.CharacterSCTBP_C.Inventory Changed
// (BlueprintCallable, BlueprintEvent)

void ACharacterSCTBP_C::Inventory_Changed()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterSCTBP_C", "Inventory Changed");

	UObject::ProcessEvent(Func, nullptr);
}


// Function CharacterSCTBP.CharacterSCTBP_C.On State Changed
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// EOxygenState                            NewState                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ACharacterSCTBP_C::On_State_Changed(EOxygenState NewState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterSCTBP_C", "On State Changed");

	Params::CharacterSCTBP_C_On_State_Changed Parms{};

	Parms.NewState = NewState;

	UObject::ProcessEvent(Func, &Parms);
}


// Function CharacterSCTBP.CharacterSCTBP_C.Scan Player Start
// (Net, NetReliable, NetMulticast, BlueprintCallable, BlueprintEvent)

void ACharacterSCTBP_C::Scan_Player_Start()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterSCTBP_C", "Scan Player Start");

	UObject::ProcessEvent(Func, nullptr);
}


// Function CharacterSCTBP.CharacterSCTBP_C.Scan Player Stop
// (BlueprintCallable, BlueprintEvent)

void ACharacterSCTBP_C::Scan_Player_Stop()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterSCTBP_C", "Scan Player Stop");

	UObject::ProcessEvent(Func, nullptr);
}


// Function CharacterSCTBP.CharacterSCTBP_C.Engage Over Shoulder View
// (BlueprintCallable, BlueprintEvent)

void ACharacterSCTBP_C::Engage_Over_Shoulder_View()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterSCTBP_C", "Engage Over Shoulder View");

	UObject::ProcessEvent(Func, nullptr);
}


// Function CharacterSCTBP.CharacterSCTBP_C.Disengage Over Should View
// (BlueprintCallable, BlueprintEvent)

void ACharacterSCTBP_C::Disengage_Over_Should_View()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterSCTBP_C", "Disengage Over Should View");

	UObject::ProcessEvent(Func, nullptr);
}


// Function CharacterSCTBP.CharacterSCTBP_C.PIE LoginClient
// (BlueprintCallable, BlueprintEvent)

void ACharacterSCTBP_C::PIE_LoginClient()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterSCTBP_C", "PIE LoginClient");

	UObject::ProcessEvent(Func, nullptr);
}


// Function CharacterSCTBP.CharacterSCTBP_C.OnPIEClientLoggedIn
// (BlueprintCallable, BlueprintEvent)

void ACharacterSCTBP_C::OnPIEClientLoggedIn()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterSCTBP_C", "OnPIEClientLoggedIn");

	UObject::ProcessEvent(Func, nullptr);
}


// Function CharacterSCTBP.CharacterSCTBP_C.SetCustomizationPostOnSuccess
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FFCTCloudCustomizationGender     Customization                                          (BlueprintVisible, BlueprintReadOnly, Parm)
// bool                                    IsMale                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// class FString                           PlayerAccelByteID                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)

void ACharacterSCTBP_C::SetCustomizationPostOnSuccess(const struct FFCTCloudCustomizationGender& Customization, bool IsMale, const class FString& PlayerAccelByteID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterSCTBP_C", "SetCustomizationPostOnSuccess");

	Params::CharacterSCTBP_C_SetCustomizationPostOnSuccess Parms{};

	Parms.Customization = std::move(Customization);
	Parms.IsMale = IsMale;
	Parms.PlayerAccelByteID = std::move(PlayerAccelByteID);

	UObject::ProcessEvent(Func, &Parms);
}


// Function CharacterSCTBP.CharacterSCTBP_C.PIE_SetCustomization
// (BlueprintCallable, BlueprintEvent)

void ACharacterSCTBP_C::PIE_SetCustomization()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterSCTBP_C", "PIE_SetCustomization");

	UObject::ProcessEvent(Func, nullptr);
}


// Function CharacterSCTBP.CharacterSCTBP_C.Force Down
// (BlueprintCallable, BlueprintEvent)

void ACharacterSCTBP_C::Force_Down()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterSCTBP_C", "Force Down");

	UObject::ProcessEvent(Func, nullptr);
}


// Function CharacterSCTBP.CharacterSCTBP_C.Toggle Ice Gliding
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Activate                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ACharacterSCTBP_C::Toggle_Ice_Gliding(bool Activate)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterSCTBP_C", "Toggle Ice Gliding");

	Params::CharacterSCTBP_C_Toggle_Ice_Gliding Parms{};

	Parms.Activate = Activate;

	UObject::ProcessEvent(Func, &Parms);
}


// Function CharacterSCTBP.CharacterSCTBP_C.ReattachMesh
// (BlueprintCallable, BlueprintEvent)

void ACharacterSCTBP_C::ReattachMesh()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterSCTBP_C", "ReattachMesh");

	UObject::ProcessEvent(Func, nullptr);
}


// Function CharacterSCTBP.CharacterSCTBP_C.TryReattachMeshToCapsule
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Cancel                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ACharacterSCTBP_C::TryReattachMeshToCapsule(bool Cancel)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterSCTBP_C", "TryReattachMeshToCapsule");

	Params::CharacterSCTBP_C_TryReattachMeshToCapsule Parms{};

	Parms.Cancel = Cancel;

	UObject::ProcessEvent(Func, &Parms);
}


// Function CharacterSCTBP.CharacterSCTBP_C.K2_OnSetCustomization
// (Event, Public, BlueprintEvent)
// Parameters:
// class FString                           PlayerAccelByteID                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)

void ACharacterSCTBP_C::K2_OnSetCustomization(const class FString& PlayerAccelByteID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterSCTBP_C", "K2_OnSetCustomization");

	Params::CharacterSCTBP_C_K2_OnSetCustomization Parms{};

	Parms.PlayerAccelByteID = std::move(PlayerAccelByteID);

	UObject::ProcessEvent(Func, &Parms);
}


// Function CharacterSCTBP.CharacterSCTBP_C.MulticastPersonoidTransformation
// (Net, NetReliable, NetMulticast, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    ToPersonoid                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ACharacterSCTBP_C::MulticastPersonoidTransformation(bool ToPersonoid)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterSCTBP_C", "MulticastPersonoidTransformation");

	Params::CharacterSCTBP_C_MulticastPersonoidTransformation Parms{};

	Parms.ToPersonoid = ToPersonoid;

	UObject::ProcessEvent(Func, &Parms);
}


// Function CharacterSCTBP.CharacterSCTBP_C.ServerPersonoidTransformation
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    ToPersonoid                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ACharacterSCTBP_C::ServerPersonoidTransformation(bool ToPersonoid)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterSCTBP_C", "ServerPersonoidTransformation");

	Params::CharacterSCTBP_C_ServerPersonoidTransformation Parms{};

	Parms.ToPersonoid = ToPersonoid;

	UObject::ProcessEvent(Func, &Parms);
}


// Function CharacterSCTBP.CharacterSCTBP_C.PersonoidTransformationEffect
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    ToPersonoid                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// float                                   TransformDuration                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ACharacterSCTBP_C::PersonoidTransformationEffect(bool ToPersonoid, float TransformDuration)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterSCTBP_C", "PersonoidTransformationEffect");

	Params::CharacterSCTBP_C_PersonoidTransformationEffect Parms{};

	Parms.ToPersonoid = ToPersonoid;
	Parms.TransformDuration = TransformDuration;

	UObject::ProcessEvent(Func, &Parms);
}


// Function CharacterSCTBP.CharacterSCTBP_C.BndEvt__ContextStaticMesh1_K2Node_ComponentBoundEvent_0_ToggleHighlightEffect__DelegateSignature
// (BlueprintEvent)
// Parameters:
// bool                                    ShouldShow                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ACharacterSCTBP_C::BndEvt__ContextStaticMesh1_K2Node_ComponentBoundEvent_0_ToggleHighlightEffect__DelegateSignature(bool ShouldShow)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterSCTBP_C", "BndEvt__ContextStaticMesh1_K2Node_ComponentBoundEvent_0_ToggleHighlightEffect__DelegateSignature");

	Params::CharacterSCTBP_C_BndEvt__ContextStaticMesh1_K2Node_ComponentBoundEvent_0_ToggleHighlightEffect__DelegateSignature Parms{};

	Parms.ShouldShow = ShouldShow;

	UObject::ProcessEvent(Func, &Parms);
}


// Function CharacterSCTBP.CharacterSCTBP_C.K2_FellOutOfWorld
// (Event, Protected, BlueprintEvent)

void ACharacterSCTBP_C::K2_FellOutOfWorld()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterSCTBP_C", "K2_FellOutOfWorld");

	UObject::ProcessEvent(Func, nullptr);
}


// Function CharacterSCTBP.CharacterSCTBP_C.CameraWallTakePictureReroute
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ACameraWallSCTBP_C*               CameraWall                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FTransform                       CaptureTargetTransform                                 (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)

void ACharacterSCTBP_C::CameraWallTakePictureReroute(class ACameraWallSCTBP_C* CameraWall, const struct FTransform& CaptureTargetTransform)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterSCTBP_C", "CameraWallTakePictureReroute");

	Params::CharacterSCTBP_C_CameraWallTakePictureReroute Parms{};

	Parms.CameraWall = CameraWall;
	Parms.CaptureTargetTransform = std::move(CaptureTargetTransform);

	UObject::ProcessEvent(Func, &Parms);
}


// Function CharacterSCTBP.CharacterSCTBP_C.CameraWallEndFullScreenReroute
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ACameraWallSCTBP_C*               CameraWall                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ACharacterSCTBP_C::CameraWallEndFullScreenReroute(class ACameraWallSCTBP_C* CameraWall)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterSCTBP_C", "CameraWallEndFullScreenReroute");

	Params::CharacterSCTBP_C_CameraWallEndFullScreenReroute Parms{};

	Parms.CameraWall = CameraWall;

	UObject::ProcessEvent(Func, &Parms);
}


// Function CharacterSCTBP.CharacterSCTBP_C.Set Releasing Character To Null
// (BlueprintCallable, BlueprintEvent)

void ACharacterSCTBP_C::Set_Releasing_Character_To_Null()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterSCTBP_C", "Set Releasing Character To Null");

	UObject::ProcessEvent(Func, nullptr);
}


// Function CharacterSCTBP.CharacterSCTBP_C.Timer Disabling Character By Button
// (BlueprintCallable, BlueprintEvent)

void ACharacterSCTBP_C::Timer_Disabling_Character_By_Button()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterSCTBP_C", "Timer Disabling Character By Button");

	UObject::ProcessEvent(Func, nullptr);
}


// Function CharacterSCTBP.CharacterSCTBP_C.Out Of Oxygen
// (BlueprintCallable, BlueprintEvent)

void ACharacterSCTBP_C::Out_Of_Oxygen()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterSCTBP_C", "Out Of Oxygen");

	UObject::ProcessEvent(Func, nullptr);
}


// Function CharacterSCTBP.CharacterSCTBP_C.Emergency Camerashake
// (BlueprintCallable, BlueprintEvent)

void ACharacterSCTBP_C::Emergency_Camerashake()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterSCTBP_C", "Emergency Camerashake");

	UObject::ProcessEvent(Func, nullptr);
}


// Function CharacterSCTBP.CharacterSCTBP_C.Set Color For Name PlayerState
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// class ASCTPlayerState*                  PlayerState_0                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ACharacterSCTBP_C::Set_Color_For_Name_PlayerState(class ASCTPlayerState* PlayerState_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterSCTBP_C", "Set Color For Name PlayerState");

	Params::CharacterSCTBP_C_Set_Color_For_Name_PlayerState Parms{};

	Parms.PlayerState_0 = PlayerState_0;

	UObject::ProcessEvent(Func, &Parms);
}


// Function CharacterSCTBP.CharacterSCTBP_C.Set Color For Name
// (BlueprintCallable, BlueprintEvent)

void ACharacterSCTBP_C::Set_Color_For_Name()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterSCTBP_C", "Set Color For Name");

	UObject::ProcessEvent(Func, nullptr);
}


// Function CharacterSCTBP.CharacterSCTBP_C.OnSetActorVisible
// (BlueprintCallable, BlueprintEvent)

void ACharacterSCTBP_C::OnSetActorVisible()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterSCTBP_C", "OnSetActorVisible");

	UObject::ProcessEvent(Func, nullptr);
}


// Function CharacterSCTBP.CharacterSCTBP_C.ReceiveTick
// (Event, Public, BlueprintEvent)
// Parameters:
// float                                   DeltaSeconds                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ACharacterSCTBP_C::ReceiveTick(float DeltaSeconds)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterSCTBP_C", "ReceiveTick");

	Params::CharacterSCTBP_C_ReceiveTick Parms{};

	Parms.DeltaSeconds = DeltaSeconds;

	UObject::ProcessEvent(Func, &Parms);
}


// Function CharacterSCTBP.CharacterSCTBP_C.Owner_Unlock Achievement
// (Net, NetReliable, NetClient, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FString                           StatCode                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)

void ACharacterSCTBP_C::Owner_Unlock_Achievement(const class FString& StatCode)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterSCTBP_C", "Owner_Unlock Achievement");

	Params::CharacterSCTBP_C_Owner_Unlock_Achievement Parms{};

	Parms.StatCode = std::move(StatCode);

	UObject::ProcessEvent(Func, &Parms);
}


// Function CharacterSCTBP.CharacterSCTBP_C.Server_Unlock Achievement
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FString                           StatCode                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)

void ACharacterSCTBP_C::Server_Unlock_Achievement(const class FString& StatCode)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterSCTBP_C", "Server_Unlock Achievement");

	Params::CharacterSCTBP_C_Server_Unlock_Achievement Parms{};

	Parms.StatCode = std::move(StatCode);

	UObject::ProcessEvent(Func, &Parms);
}


// Function CharacterSCTBP.CharacterSCTBP_C.OnMoveSpeedChanged
// (Event, Protected, BlueprintEvent)
// Parameters:
// float                                   MovementSpeed                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ACharacterSCTBP_C::OnMoveSpeedChanged(float MovementSpeed)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterSCTBP_C", "OnMoveSpeedChanged");

	Params::CharacterSCTBP_C_OnMoveSpeedChanged Parms{};

	Parms.MovementSpeed = MovementSpeed;

	UObject::ProcessEvent(Func, &Parms);
}


// Function CharacterSCTBP.CharacterSCTBP_C.Owner_Post Message Self
// (Net, NetReliable, NetClient, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FText                             Text                                                   (BlueprintVisible, BlueprintReadOnly, Parm)

void ACharacterSCTBP_C::Owner_Post_Message_Self(const class FText& Text)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterSCTBP_C", "Owner_Post Message Self");

	Params::CharacterSCTBP_C_Owner_Post_Message_Self Parms{};

	Parms.Text = std::move(Text);

	UObject::ProcessEvent(Func, &Parms);
}


// Function CharacterSCTBP.CharacterSCTBP_C.ReceivePossessed
// (Event, Public, BlueprintEvent)
// Parameters:
// class AController*                      NewController                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ACharacterSCTBP_C::ReceivePossessed(class AController* NewController)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterSCTBP_C", "ReceivePossessed");

	Params::CharacterSCTBP_C_ReceivePossessed Parms{};

	Parms.NewController = NewController;

	UObject::ProcessEvent(Func, &Parms);
}


// Function CharacterSCTBP.CharacterSCTBP_C.K2_OnDestiny
// (Event, Protected, BlueprintEvent)
// Parameters:
// struct FDestiny                         Destiny                                                (BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)

void ACharacterSCTBP_C::K2_OnDestiny(const struct FDestiny& Destiny)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterSCTBP_C", "K2_OnDestiny");

	Params::CharacterSCTBP_C_K2_OnDestiny Parms{};

	Parms.Destiny = std::move(Destiny);

	UObject::ProcessEvent(Func, &Parms);
}


// Function CharacterSCTBP.CharacterSCTBP_C.K2_InitializeResident
// (Event, Public, BlueprintEvent)

void ACharacterSCTBP_C::K2_InitializeResident()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterSCTBP_C", "K2_InitializeResident");

	UObject::ProcessEvent(Func, nullptr);
}


// Function CharacterSCTBP.CharacterSCTBP_C.K2_InitializePersonoid
// (Event, Public, BlueprintEvent)

void ACharacterSCTBP_C::K2_InitializePersonoid()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterSCTBP_C", "K2_InitializePersonoid");

	UObject::ProcessEvent(Func, nullptr);
}


// Function CharacterSCTBP.CharacterSCTBP_C.InpAxisEvt_MoveForward_K2Node_InputAxisEvent_0
// (BlueprintEvent)
// Parameters:
// float                                   AxisValue                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ACharacterSCTBP_C::InpAxisEvt_MoveForward_K2Node_InputAxisEvent_0(float AxisValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterSCTBP_C", "InpAxisEvt_MoveForward_K2Node_InputAxisEvent_0");

	Params::CharacterSCTBP_C_InpAxisEvt_MoveForward_K2Node_InputAxisEvent_0 Parms{};

	Parms.AxisValue = AxisValue;

	UObject::ProcessEvent(Func, &Parms);
}


// Function CharacterSCTBP.CharacterSCTBP_C.K2_OnRepPlayerState
// (Event, Protected, BlueprintEvent)
// Parameters:
// bool                                    IsValid                                                (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ACharacterSCTBP_C::K2_OnRepPlayerState(const bool IsValid)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterSCTBP_C", "K2_OnRepPlayerState");

	Params::CharacterSCTBP_C_K2_OnRepPlayerState Parms{};

	Parms.IsValid = IsValid;

	UObject::ProcessEvent(Func, &Parms);
}


// Function CharacterSCTBP.CharacterSCTBP_C.BndEvt__ContextInputManager_K2Node_ComponentBoundEvent_0_InputChangedDelegate__DelegateSignature
// (HasOutParams, BlueprintEvent)
// Parameters:
// TArray<struct FBoundContextSpec>        SpecArray                                              (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, ContainsInstancedReference)

void ACharacterSCTBP_C::BndEvt__ContextInputManager_K2Node_ComponentBoundEvent_0_InputChangedDelegate__DelegateSignature(TArray<struct FBoundContextSpec>& SpecArray)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterSCTBP_C", "BndEvt__ContextInputManager_K2Node_ComponentBoundEvent_0_InputChangedDelegate__DelegateSignature");

	Params::CharacterSCTBP_C_BndEvt__ContextInputManager_K2Node_ComponentBoundEvent_0_InputChangedDelegate__DelegateSignature Parms{};

	Parms.SpecArray = std::move(SpecArray);

	UObject::ProcessEvent(Func, &Parms);

	SpecArray = std::move(Parms.SpecArray);
}


// Function CharacterSCTBP.CharacterSCTBP_C.ReceiveBeginPlay
// (Event, Protected, BlueprintEvent)

void ACharacterSCTBP_C::ReceiveBeginPlay()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterSCTBP_C", "ReceiveBeginPlay");

	UObject::ProcessEvent(Func, nullptr);
}


// Function CharacterSCTBP.CharacterSCTBP_C.Multi_Shield Cosmetics
// (Net, NetMulticast, BlueprintCallable, BlueprintEvent)

void ACharacterSCTBP_C::Multi_Shield_Cosmetics()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterSCTBP_C", "Multi_Shield Cosmetics");

	UObject::ProcessEvent(Func, nullptr);
}


// Function CharacterSCTBP.CharacterSCTBP_C.On Talking Spectator Channel
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    IsTalking                                              (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    IsLocallyControlled_0                                  (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ACharacterSCTBP_C::On_Talking_Spectator_Channel(const bool IsTalking, const bool IsLocallyControlled_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterSCTBP_C", "On Talking Spectator Channel");

	Params::CharacterSCTBP_C_On_Talking_Spectator_Channel Parms{};

	Parms.IsTalking = IsTalking;
	Parms.IsLocallyControlled_0 = IsLocallyControlled_0;

	UObject::ProcessEvent(Func, &Parms);
}


// Function CharacterSCTBP.CharacterSCTBP_C.On Talking Personoid Channel
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    IsTalking                                              (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    IsLocallyControlled_0                                  (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ACharacterSCTBP_C::On_Talking_Personoid_Channel(const bool IsTalking, const bool IsLocallyControlled_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterSCTBP_C", "On Talking Personoid Channel");

	Params::CharacterSCTBP_C_On_Talking_Personoid_Channel Parms{};

	Parms.IsTalking = IsTalking;
	Parms.IsLocallyControlled_0 = IsLocallyControlled_0;

	UObject::ProcessEvent(Func, &Parms);
}


// Function CharacterSCTBP.CharacterSCTBP_C.On Talking Local Channel
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    IsTalking                                              (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    IsLocallyControlled_0                                  (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ACharacterSCTBP_C::On_Talking_Local_Channel(const bool IsTalking, const bool IsLocallyControlled_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterSCTBP_C", "On Talking Local Channel");

	Params::CharacterSCTBP_C_On_Talking_Local_Channel Parms{};

	Parms.IsTalking = IsTalking;
	Parms.IsLocallyControlled_0 = IsLocallyControlled_0;

	UObject::ProcessEvent(Func, &Parms);
}


// Function CharacterSCTBP.CharacterSCTBP_C.DisplayAirlockWidgetBPI
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Show                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ACharacterSCTBP_C::DisplayAirlockWidgetBPI(bool Show)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterSCTBP_C", "DisplayAirlockWidgetBPI");

	Params::CharacterSCTBP_C_DisplayAirlockWidgetBPI Parms{};

	Parms.Show = Show;

	UObject::ProcessEvent(Func, &Parms);
}


// Function CharacterSCTBP.CharacterSCTBP_C.DecayAlcohol
// (BlueprintCallable, BlueprintEvent)

void ACharacterSCTBP_C::DecayAlcohol()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterSCTBP_C", "DecayAlcohol");

	UObject::ProcessEvent(Func, nullptr);
}


// Function CharacterSCTBP.CharacterSCTBP_C.AddAlcoholBPI
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   InputValue                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Delay                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ACharacterSCTBP_C::AddAlcoholBPI(float InputValue, bool Delay)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterSCTBP_C", "AddAlcoholBPI");

	Params::CharacterSCTBP_C_AddAlcoholBPI Parms{};

	Parms.InputValue = InputValue;
	Parms.Delay = Delay;

	UObject::ProcessEvent(Func, &Parms);
}


// Function CharacterSCTBP.CharacterSCTBP_C.TimerExpired
// (BlueprintCallable, BlueprintEvent)

void ACharacterSCTBP_C::TimerExpired()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterSCTBP_C", "TimerExpired");

	UObject::ProcessEvent(Func, nullptr);
}


// Function CharacterSCTBP.CharacterSCTBP_C.ForceLocation
// (BlueprintCallable, BlueprintEvent)

void ACharacterSCTBP_C::ForceLocation()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterSCTBP_C", "ForceLocation");

	UObject::ProcessEvent(Func, nullptr);
}


// Function CharacterSCTBP.CharacterSCTBP_C.AllReleaseCorpse
// (Net, NetReliable, NetMulticast, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           Target                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ACharacterSCTBP_C::AllReleaseCorpse(class AActor* Target)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterSCTBP_C", "AllReleaseCorpse");

	Params::CharacterSCTBP_C_AllReleaseCorpse Parms{};

	Parms.Target = Target;

	UObject::ProcessEvent(Func, &Parms);
}


// Function CharacterSCTBP.CharacterSCTBP_C.AllCarryCorpse
// (Net, NetReliable, NetMulticast, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           Target                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ACharacterSCTBP_C::AllCarryCorpse(class AActor* Target)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterSCTBP_C", "AllCarryCorpse");

	Params::CharacterSCTBP_C_AllCarryCorpse Parms{};

	Parms.Target = Target;

	UObject::ProcessEvent(Func, &Parms);
}


// Function CharacterSCTBP.CharacterSCTBP_C.CarryingCorpseBPI
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    InputValue                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ACharacterSCTBP_C::CarryingCorpseBPI(bool InputValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterSCTBP_C", "CarryingCorpseBPI");

	Params::CharacterSCTBP_C_CarryingCorpseBPI Parms{};

	Parms.InputValue = InputValue;

	UObject::ProcessEvent(Func, &Parms);
}


// Function CharacterSCTBP.CharacterSCTBP_C.BeingCarriedCorpseBPI
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    InputValue                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ACharacterSCTBP_C::BeingCarriedCorpseBPI(bool InputValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterSCTBP_C", "BeingCarriedCorpseBPI");

	Params::CharacterSCTBP_C_BeingCarriedCorpseBPI Parms{};

	Parms.InputValue = InputValue;

	UObject::ProcessEvent(Func, &Parms);
}


// Function CharacterSCTBP.CharacterSCTBP_C.ServerCarryCorpse
// (Net, NetServer, BlueprintCallable, BlueprintEvent)

void ACharacterSCTBP_C::ServerCarryCorpse()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterSCTBP_C", "ServerCarryCorpse");

	UObject::ProcessEvent(Func, nullptr);
}


// Function CharacterSCTBP.CharacterSCTBP_C.OwningTeleport
// (Net, HasOutParams, NetClient, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FRotator                         NewRotation                                            (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor)

void ACharacterSCTBP_C::OwningTeleport(const struct FRotator& NewRotation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterSCTBP_C", "OwningTeleport");

	Params::CharacterSCTBP_C_OwningTeleport Parms{};

	Parms.NewRotation = std::move(NewRotation);

	UObject::ProcessEvent(Func, &Parms);
}


// Function CharacterSCTBP.CharacterSCTBP_C.TeleportLocationRotationBPI
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FVector                          TargetLocation                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FRotator                         TargetRotation                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ACharacterSCTBP_C::TeleportLocationRotationBPI(const struct FVector& TargetLocation, const struct FRotator& TargetRotation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterSCTBP_C", "TeleportLocationRotationBPI");

	Params::CharacterSCTBP_C_TeleportLocationRotationBPI Parms{};

	Parms.TargetLocation = std::move(TargetLocation);
	Parms.TargetRotation = std::move(TargetRotation);

	UObject::ProcessEvent(Func, &Parms);
}


// Function CharacterSCTBP.CharacterSCTBP_C.EnableIK&AimDelayBPI
// (Public, BlueprintCallable, BlueprintEvent)

void ACharacterSCTBP_C::EnableIK_AimDelayBPI()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterSCTBP_C", "EnableIK&AimDelayBPI");

	UObject::ProcessEvent(Func, nullptr);
}


// Function CharacterSCTBP.CharacterSCTBP_C.ServerForceRagdoll
// (Net, NetServer, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    To_Ragdoll                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ACharacterSCTBP_C::ServerForceRagdoll(bool To_Ragdoll)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterSCTBP_C", "ServerForceRagdoll");

	Params::CharacterSCTBP_C_ServerForceRagdoll Parms{};

	Parms.To_Ragdoll = To_Ragdoll;

	UObject::ProcessEvent(Func, &Parms);
}


// Function CharacterSCTBP.CharacterSCTBP_C.LaunchRagdollBPI
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FVector                          TargetLocation                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          Direction                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ACharacterSCTBP_C::LaunchRagdollBPI(const struct FVector& TargetLocation, const struct FVector& Direction)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterSCTBP_C", "LaunchRagdollBPI");

	Params::CharacterSCTBP_C_LaunchRagdollBPI Parms{};

	Parms.TargetLocation = std::move(TargetLocation);
	Parms.Direction = std::move(Direction);

	UObject::ProcessEvent(Func, &Parms);
}


// Function CharacterSCTBP.CharacterSCTBP_C.SetCharacterRotationBPI
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// ERPC_Enum                               RPC                                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    EnableRotationOverride                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// struct FRotator                         Rotation                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ACharacterSCTBP_C::SetCharacterRotationBPI(ERPC_Enum RPC, bool EnableRotationOverride, const struct FRotator& Rotation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterSCTBP_C", "SetCharacterRotationBPI");

	Params::CharacterSCTBP_C_SetCharacterRotationBPI Parms{};

	Parms.RPC = RPC;
	Parms.EnableRotationOverride = EnableRotationOverride;
	Parms.Rotation = std::move(Rotation);

	UObject::ProcessEvent(Func, &Parms);
}


// Function CharacterSCTBP.CharacterSCTBP_C.EnableIKandAimOffsetBPI
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Enable                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ACharacterSCTBP_C::EnableIKandAimOffsetBPI(bool Enable)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterSCTBP_C", "EnableIKandAimOffsetBPI");

	Params::CharacterSCTBP_C_EnableIKandAimOffsetBPI Parms{};

	Parms.Enable = Enable;

	UObject::ProcessEvent(Func, &Parms);
}


// Function CharacterSCTBP.CharacterSCTBP_C.SetAimingStateBPI
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Aiming                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// uint8                                   AimType                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ACharacterSCTBP_C::SetAimingStateBPI(bool Aiming, uint8 AimType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterSCTBP_C", "SetAimingStateBPI");

	Params::CharacterSCTBP_C_SetAimingStateBPI Parms{};

	Parms.Aiming = Aiming;
	Parms.AimType = AimType;

	UObject::ProcessEvent(Func, &Parms);
}


// Function CharacterSCTBP.CharacterSCTBP_C.RagdollCharacterBPI
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    ToRagdoll                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// float                                   Duration                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          OptionalImpulse                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Force                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ACharacterSCTBP_C::RagdollCharacterBPI(bool ToRagdoll, float Duration, const struct FVector& OptionalImpulse, bool Force)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterSCTBP_C", "RagdollCharacterBPI");

	Params::CharacterSCTBP_C_RagdollCharacterBPI Parms{};

	Parms.ToRagdoll = ToRagdoll;
	Parms.Duration = Duration;
	Parms.OptionalImpulse = std::move(OptionalImpulse);
	Parms.Force = Force;

	UObject::ProcessEvent(Func, &Parms);
}


// Function CharacterSCTBP.CharacterSCTBP_C.OnLanded
// (Event, Public, HasOutParams, BlueprintEvent)
// Parameters:
// struct FHitResult                       Hit                                                    (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference)

void ACharacterSCTBP_C::OnLanded(const struct FHitResult& Hit)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterSCTBP_C", "OnLanded");

	Params::CharacterSCTBP_C_OnLanded Parms{};

	Parms.Hit = std::move(Hit);

	UObject::ProcessEvent(Func, &Parms);
}


// Function CharacterSCTBP.CharacterSCTBP_C.K2_OnEndCrouch
// (Event, Public, BlueprintEvent)
// Parameters:
// float                                   HalfHeightAdjust                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   ScaledHalfHeightAdjust                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ACharacterSCTBP_C::K2_OnEndCrouch(float HalfHeightAdjust, float ScaledHalfHeightAdjust)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterSCTBP_C", "K2_OnEndCrouch");

	Params::CharacterSCTBP_C_K2_OnEndCrouch Parms{};

	Parms.HalfHeightAdjust = HalfHeightAdjust;
	Parms.ScaledHalfHeightAdjust = ScaledHalfHeightAdjust;

	UObject::ProcessEvent(Func, &Parms);
}


// Function CharacterSCTBP.CharacterSCTBP_C.K2_OnStartCrouch
// (Event, Public, BlueprintEvent)
// Parameters:
// float                                   HalfHeightAdjust                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   ScaledHalfHeightAdjust                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ACharacterSCTBP_C::K2_OnStartCrouch(float HalfHeightAdjust, float ScaledHalfHeightAdjust)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterSCTBP_C", "K2_OnStartCrouch");

	Params::CharacterSCTBP_C_K2_OnStartCrouch Parms{};

	Parms.HalfHeightAdjust = HalfHeightAdjust;
	Parms.ScaledHalfHeightAdjust = ScaledHalfHeightAdjust;

	UObject::ProcessEvent(Func, &Parms);
}


// Function CharacterSCTBP.CharacterSCTBP_C.K2_OnMovementModeChanged
// (Event, Public, BlueprintEvent)
// Parameters:
// Engine::EMovementMode                   PrevMovementMode                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// Engine::EMovementMode                   NewMovementMode                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// uint8                                   PrevCustomMode                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// uint8                                   NewCustomMode                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ACharacterSCTBP_C::K2_OnMovementModeChanged(Engine::EMovementMode PrevMovementMode, Engine::EMovementMode NewMovementMode, uint8 PrevCustomMode, uint8 NewCustomMode)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterSCTBP_C", "K2_OnMovementModeChanged");

	Params::CharacterSCTBP_C_K2_OnMovementModeChanged Parms{};

	Parms.PrevMovementMode = PrevMovementMode;
	Parms.NewMovementMode = NewMovementMode;
	Parms.PrevCustomMode = PrevCustomMode;
	Parms.NewCustomMode = NewCustomMode;

	UObject::ProcessEvent(Func, &Parms);
}


// Function CharacterSCTBP.CharacterSCTBP_C.Multi_Get Killed By Overdose
// (Net, NetMulticast, BlueprintCallable, BlueprintEvent)

void ACharacterSCTBP_C::Multi_Get_Killed_By_Overdose()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterSCTBP_C", "Multi_Get Killed By Overdose");

	UObject::ProcessEvent(Func, nullptr);
}


// Function CharacterSCTBP.CharacterSCTBP_C.Reset Do Once Fire Score
// (BlueprintCallable, BlueprintEvent)

void ACharacterSCTBP_C::Reset_Do_Once_Fire_Score()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterSCTBP_C", "Reset Do Once Fire Score");

	UObject::ProcessEvent(Func, nullptr);
}


// Function CharacterSCTBP.CharacterSCTBP_C.Push Player
// (BlueprintCallable, BlueprintEvent)

void ACharacterSCTBP_C::Push_Player()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterSCTBP_C", "Push Player");

	UObject::ProcessEvent(Func, nullptr);
}


// Function CharacterSCTBP.CharacterSCTBP_C.Remove Burning Cosmetics
// (Net, NetClient, BlueprintCallable, BlueprintEvent)

void ACharacterSCTBP_C::Remove_Burning_Cosmetics()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterSCTBP_C", "Remove Burning Cosmetics");

	UObject::ProcessEvent(Func, nullptr);
}


// Function CharacterSCTBP.CharacterSCTBP_C.Show Burning Cosmetics
// (Net, NetClient, BlueprintCallable, BlueprintEvent)

void ACharacterSCTBP_C::Show_Burning_Cosmetics()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterSCTBP_C", "Show Burning Cosmetics");

	UObject::ProcessEvent(Func, nullptr);
}


// Function CharacterSCTBP.CharacterSCTBP_C.Force Extinguish
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    NoExtinguishAudio_0                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ACharacterSCTBP_C::Force_Extinguish(bool NoExtinguishAudio_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterSCTBP_C", "Force Extinguish");

	Params::CharacterSCTBP_C_Force_Extinguish Parms{};

	Parms.NoExtinguishAudio_0 = NoExtinguishAudio_0;

	UObject::ProcessEvent(Func, &Parms);
}


// Function CharacterSCTBP.CharacterSCTBP_C.Remove Downed Death Timer
// (Net, NetReliable, NetClient, BlueprintCallable, BlueprintEvent)

void ACharacterSCTBP_C::Remove_Downed_Death_Timer()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterSCTBP_C", "Remove Downed Death Timer");

	UObject::ProcessEvent(Func, nullptr);
}


// Function CharacterSCTBP.CharacterSCTBP_C.Show Downed Death Timer
// (Net, NetReliable, NetClient, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   Duration                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FString                           Description                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// class FText                             DescriptionText                                        (BlueprintVisible, BlueprintReadOnly, Parm)

void ACharacterSCTBP_C::Show_Downed_Death_Timer(float Duration, const class FString& Description, const class FText& DescriptionText)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterSCTBP_C", "Show Downed Death Timer");

	Params::CharacterSCTBP_C_Show_Downed_Death_Timer Parms{};

	Parms.Duration = Duration;
	Parms.Description = std::move(Description);
	Parms.DescriptionText = std::move(DescriptionText);

	UObject::ProcessEvent(Func, &Parms);
}


// Function CharacterSCTBP.CharacterSCTBP_C.Remove Freezing Cosmetics
// (Net, NetReliable, NetClient, BlueprintCallable, BlueprintEvent)

void ACharacterSCTBP_C::Remove_Freezing_Cosmetics()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterSCTBP_C", "Remove Freezing Cosmetics");

	UObject::ProcessEvent(Func, nullptr);
}


// Function CharacterSCTBP.CharacterSCTBP_C.Show Freezing Cosmetics
// (Net, NetReliable, NetClient, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   Duration                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ACharacterSCTBP_C::Show_Freezing_Cosmetics(float Duration)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterSCTBP_C", "Show Freezing Cosmetics");

	Params::CharacterSCTBP_C_Show_Freezing_Cosmetics Parms{};

	Parms.Duration = Duration;

	UObject::ProcessEvent(Func, &Parms);
}


// Function CharacterSCTBP.CharacterSCTBP_C.Remove Drowning Cosmetics
// (Net, NetReliable, NetClient, BlueprintCallable, BlueprintEvent)

void ACharacterSCTBP_C::Remove_Drowning_Cosmetics()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterSCTBP_C", "Remove Drowning Cosmetics");

	UObject::ProcessEvent(Func, nullptr);
}


// Function CharacterSCTBP.CharacterSCTBP_C.Showe Drowning Cosmetics
// (Net, NetReliable, NetClient, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   Duration                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ACharacterSCTBP_C::Showe_Drowning_Cosmetics(float Duration)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterSCTBP_C", "Showe Drowning Cosmetics");

	Params::CharacterSCTBP_C_Showe_Drowning_Cosmetics Parms{};

	Parms.Duration = Duration;

	UObject::ProcessEvent(Func, &Parms);
}


// Function CharacterSCTBP.CharacterSCTBP_C.Extinguish Hit Character Do Once Reset
// (BlueprintCallable, BlueprintEvent)

void ACharacterSCTBP_C::Extinguish_Hit_Character_Do_Once_Reset()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterSCTBP_C", "Extinguish Hit Character Do Once Reset");

	UObject::ProcessEvent(Func, nullptr);
}


// Function CharacterSCTBP.CharacterSCTBP_C.Extinguish Hit Character
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ACharacter*                       Character                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   Damage                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ACharacterSCTBP_C::Extinguish_Hit_Character(class ACharacter* Character, float Damage)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterSCTBP_C", "Extinguish Hit Character");

	Params::CharacterSCTBP_C_Extinguish_Hit_Character Parms{};

	Parms.Character = Character;
	Parms.Damage = Damage;

	UObject::ProcessEvent(Func, &Parms);
}


// Function CharacterSCTBP.CharacterSCTBP_C.Ignite Character
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   Duration                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ACharacterSCTBP_C::Ignite_Character(float Duration)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterSCTBP_C", "Ignite Character");

	Params::CharacterSCTBP_C_Ignite_Character Parms{};

	Parms.Duration = Duration;

	UObject::ProcessEvent(Func, &Parms);
}


// Function CharacterSCTBP.CharacterSCTBP_C.Die From Overdose
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FVector                          Optional_Impulse                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ACharacterSCTBP_C::Die_From_Overdose(const struct FVector& Optional_Impulse)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterSCTBP_C", "Die From Overdose");

	Params::CharacterSCTBP_C_Die_From_Overdose Parms{};

	Parms.Optional_Impulse = std::move(Optional_Impulse);

	UObject::ProcessEvent(Func, &Parms);
}


// Function CharacterSCTBP.CharacterSCTBP_C.Cancel Overdosed
// (Net, NetMulticast, BlueprintCallable, BlueprintEvent)

void ACharacterSCTBP_C::Cancel_Overdosed()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterSCTBP_C", "Cancel Overdosed");

	UObject::ProcessEvent(Func, nullptr);
}


// Function CharacterSCTBP.CharacterSCTBP_C.Begin Beging Overdosed
// (Net, NetMulticast, BlueprintCallable, BlueprintEvent)

void ACharacterSCTBP_C::Begin_Beging_Overdosed()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterSCTBP_C", "Begin Beging Overdosed");

	UObject::ProcessEvent(Func, nullptr);
}


// Function CharacterSCTBP.CharacterSCTBP_C.Killer Move Into Overdose Location
// (BlueprintCallable, BlueprintEvent)

void ACharacterSCTBP_C::Killer_Move_Into_Overdose_Location()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterSCTBP_C", "Killer Move Into Overdose Location");

	UObject::ProcessEvent(Func, nullptr);
}


// Function CharacterSCTBP.CharacterSCTBP_C.Cancel Being Coop Killed
// (BlueprintCallable, BlueprintEvent)

void ACharacterSCTBP_C::Cancel_Being_Coop_Killed()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterSCTBP_C", "Cancel Being Coop Killed");

	UObject::ProcessEvent(Func, nullptr);
}


// Function CharacterSCTBP.CharacterSCTBP_C.Die From Coop Kill
// (BlueprintCallable, BlueprintEvent)

void ACharacterSCTBP_C::Die_From_Coop_Kill()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterSCTBP_C", "Die From Coop Kill");

	UObject::ProcessEvent(Func, nullptr);
}


// Function CharacterSCTBP.CharacterSCTBP_C.Begin Being Coop Killed
// (BlueprintCallable, BlueprintEvent)

void ACharacterSCTBP_C::Begin_Being_Coop_Killed()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterSCTBP_C", "Begin Being Coop Killed");

	UObject::ProcessEvent(Func, nullptr);
}


// Function CharacterSCTBP.CharacterSCTBP_C.Grabber Move Into Grab Location
// (BlueprintCallable, BlueprintEvent)

void ACharacterSCTBP_C::Grabber_Move_Into_Grab_Location()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterSCTBP_C", "Grabber Move Into Grab Location");

	UObject::ProcessEvent(Func, nullptr);
}


// Function CharacterSCTBP.CharacterSCTBP_C.Stop Beging Grabbed
// (BlueprintCallable, BlueprintEvent)

void ACharacterSCTBP_C::Stop_Beging_Grabbed()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterSCTBP_C", "Stop Beging Grabbed");

	UObject::ProcessEvent(Func, nullptr);
}


// Function CharacterSCTBP.CharacterSCTBP_C.Begin Being Grabbed
// (BlueprintCallable, BlueprintEvent)

void ACharacterSCTBP_C::Begin_Being_Grabbed()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterSCTBP_C", "Begin Being Grabbed");

	UObject::ProcessEvent(Func, nullptr);
}


// Function CharacterSCTBP.CharacterSCTBP_C.OnStopCriticalGlobalOxygenHaptics
// (Net, NetClient, BlueprintCallable, BlueprintEvent)

void ACharacterSCTBP_C::OnStopCriticalGlobalOxygenHaptics()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterSCTBP_C", "OnStopCriticalGlobalOxygenHaptics");

	UObject::ProcessEvent(Func, nullptr);
}


// Function CharacterSCTBP.CharacterSCTBP_C.OnStartCriticalGlobalOxygenHaptics
// (Net, NetClient, BlueprintCallable, BlueprintEvent)

void ACharacterSCTBP_C::OnStartCriticalGlobalOxygenHaptics()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterSCTBP_C", "OnStartCriticalGlobalOxygenHaptics");

	UObject::ProcessEvent(Func, nullptr);
}


// Function CharacterSCTBP.CharacterSCTBP_C.Owner_Show Escaped Widget
// (Net, NetReliable, NetClient, BlueprintCallable, BlueprintEvent)

void ACharacterSCTBP_C::Owner_Show_Escaped_Widget()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterSCTBP_C", "Owner_Show Escaped Widget");

	UObject::ProcessEvent(Func, nullptr);
}


// Function CharacterSCTBP.CharacterSCTBP_C.Audio_Drop Carry Player
// (BlueprintCallable, BlueprintEvent)

void ACharacterSCTBP_C::Audio_Drop_Carry_Player()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterSCTBP_C", "Audio_Drop Carry Player");

	UObject::ProcessEvent(Func, nullptr);
}


// Function CharacterSCTBP.CharacterSCTBP_C.Audio_Carry Player
// (BlueprintCallable, BlueprintEvent)

void ACharacterSCTBP_C::Audio_Carry_Player()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterSCTBP_C", "Audio_Carry Player");

	UObject::ProcessEvent(Func, nullptr);
}


// Function CharacterSCTBP.CharacterSCTBP_C.K2_OnWetnessChanged
// (Event, Protected, BlueprintEvent)
// Parameters:
// float                                   Wetness                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ACharacterSCTBP_C::K2_OnWetnessChanged(float Wetness)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterSCTBP_C", "K2_OnWetnessChanged");

	Params::CharacterSCTBP_C_K2_OnWetnessChanged Parms{};

	Parms.Wetness = Wetness;

	UObject::ProcessEvent(Func, &Parms);
}


// Function CharacterSCTBP.CharacterSCTBP_C.Audio Play Jump
// (BlueprintCallable, BlueprintEvent)

void ACharacterSCTBP_C::Audio_Play_Jump()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterSCTBP_C", "Audio Play Jump");

	UObject::ProcessEvent(Func, nullptr);
}


// Function CharacterSCTBP.CharacterSCTBP_C.Audio Play Land
// (BlueprintCallable, BlueprintEvent)

void ACharacterSCTBP_C::Audio_Play_Land()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterSCTBP_C", "Audio Play Land");

	UObject::ProcessEvent(Func, nullptr);
}


// Function CharacterSCTBP.CharacterSCTBP_C.Audio Play Footstep New
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// class FString                           MovementType                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)

void ACharacterSCTBP_C::Audio_Play_Footstep_New(const class FString& MovementType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterSCTBP_C", "Audio Play Footstep New");

	Params::CharacterSCTBP_C_Audio_Play_Footstep_New Parms{};

	Parms.MovementType = std::move(MovementType);

	UObject::ProcessEvent(Func, &Parms);
}


// Function CharacterSCTBP.CharacterSCTBP_C.Audio Waiting Timer Stop
// (BlueprintCallable, BlueprintEvent)

void ACharacterSCTBP_C::Audio_Waiting_Timer_Stop()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterSCTBP_C", "Audio Waiting Timer Stop");

	UObject::ProcessEvent(Func, nullptr);
}


// Function CharacterSCTBP.CharacterSCTBP_C.WaitingAfterDelay
// (BlueprintCallable, BlueprintEvent)

void ACharacterSCTBP_C::WaitingAfterDelay()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterSCTBP_C", "WaitingAfterDelay");

	UObject::ProcessEvent(Func, nullptr);
}


// Function CharacterSCTBP.CharacterSCTBP_C.Audio Waiting Timer Start
// (Net, NetClient, BlueprintCallable, BlueprintEvent)

void ACharacterSCTBP_C::Audio_Waiting_Timer_Start()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterSCTBP_C", "Audio Waiting Timer Start");

	UObject::ProcessEvent(Func, nullptr);
}


// Function CharacterSCTBP.CharacterSCTBP_C.Audio Player On Fire
// (BlueprintCallable, BlueprintEvent)

void ACharacterSCTBP_C::Audio_Player_On_Fire()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterSCTBP_C", "Audio Player On Fire");

	UObject::ProcessEvent(Func, nullptr);
}


// Function CharacterSCTBP.CharacterSCTBP_C.Audio Drowning Stop
// (Net, NetMulticast, BlueprintCallable, BlueprintEvent)

void ACharacterSCTBP_C::Audio_Drowning_Stop()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterSCTBP_C", "Audio Drowning Stop");

	UObject::ProcessEvent(Func, nullptr);
}


// Function CharacterSCTBP.CharacterSCTBP_C.Audio Drowning Start
// (Net, NetMulticast, BlueprintCallable, BlueprintEvent)

void ACharacterSCTBP_C::Audio_Drowning_Start()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterSCTBP_C", "Audio Drowning Start");

	UObject::ProcessEvent(Func, nullptr);
}


// Function CharacterSCTBP.CharacterSCTBP_C.Set Switch Material
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// class FString                           Selection                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)

void ACharacterSCTBP_C::Set_Switch_Material(const class FString& Selection)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterSCTBP_C", "Set Switch Material");

	Params::CharacterSCTBP_C_Set_Switch_Material Parms{};

	Parms.Selection = std::move(Selection);

	UObject::ProcessEvent(Func, &Parms);
}


// Function CharacterSCTBP.CharacterSCTBP_C.Audio Freezing Stop
// (Net, NetMulticast, BlueprintCallable, BlueprintEvent)

void ACharacterSCTBP_C::Audio_Freezing_Stop()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterSCTBP_C", "Audio Freezing Stop");

	UObject::ProcessEvent(Func, nullptr);
}


// Function CharacterSCTBP.CharacterSCTBP_C.Audio Freezing Start
// (Net, NetMulticast, BlueprintCallable, BlueprintEvent)

void ACharacterSCTBP_C::Audio_Freezing_Start()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterSCTBP_C", "Audio Freezing Start");

	UObject::ProcessEvent(Func, nullptr);
}


// Function CharacterSCTBP.CharacterSCTBP_C.Owner_Score Widget
// (Net, NetReliable, NetClient, BlueprintCallable, BlueprintEvent)
// Parameters:
// E_ScoreCategories                       E_ScoreCategory                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   Points                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ACharacterSCTBP_C::Owner_Score_Widget(E_ScoreCategories E_ScoreCategory, int32 Points)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterSCTBP_C", "Owner_Score Widget");

	Params::CharacterSCTBP_C_Owner_Score_Widget Parms{};

	Parms.E_ScoreCategory = E_ScoreCategory;
	Parms.Points = Points;

	UObject::ProcessEvent(Func, &Parms);
}


// Function CharacterSCTBP.CharacterSCTBP_C.BndEvt__AbilitySystemComponent_K2Node_ComponentBoundEvent_1_PowerInputChangedDelegate__DelegateSignature
// (BlueprintEvent)
// Parameters:
// class UPower*                           Power                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ACharacterSCTBP_C::BndEvt__AbilitySystemComponent_K2Node_ComponentBoundEvent_1_PowerInputChangedDelegate__DelegateSignature(class UPower* Power)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterSCTBP_C", "BndEvt__AbilitySystemComponent_K2Node_ComponentBoundEvent_1_PowerInputChangedDelegate__DelegateSignature");

	Params::CharacterSCTBP_C_BndEvt__AbilitySystemComponent_K2Node_ComponentBoundEvent_1_PowerInputChangedDelegate__DelegateSignature Parms{};

	Parms.Power = Power;

	UObject::ProcessEvent(Func, &Parms);
}


// Function CharacterSCTBP.CharacterSCTBP_C.BndEvt__AbilitySystemComponent_K2Node_ComponentBoundEvent_0_PowerInputChangedDelegate__DelegateSignature
// (BlueprintEvent)
// Parameters:
// class UPower*                           Power                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ACharacterSCTBP_C::BndEvt__AbilitySystemComponent_K2Node_ComponentBoundEvent_0_PowerInputChangedDelegate__DelegateSignature(class UPower* Power)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterSCTBP_C", "BndEvt__AbilitySystemComponent_K2Node_ComponentBoundEvent_0_PowerInputChangedDelegate__DelegateSignature");

	Params::CharacterSCTBP_C_BndEvt__AbilitySystemComponent_K2Node_ComponentBoundEvent_0_PowerInputChangedDelegate__DelegateSignature Parms{};

	Parms.Power = Power;

	UObject::ProcessEvent(Func, &Parms);
}


// Function CharacterSCTBP.CharacterSCTBP_C.Owner_Audio_Auto Post Ak Comp At Location
// (Net, NetClient, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UAkAudioEvent*                    AkEvent                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          Location                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ACharacterSCTBP_C::Owner_Audio_Auto_Post_Ak_Comp_At_Location(class UAkAudioEvent* AkEvent, const struct FVector& Location)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterSCTBP_C", "Owner_Audio_Auto Post Ak Comp At Location");

	Params::CharacterSCTBP_C_Owner_Audio_Auto_Post_Ak_Comp_At_Location Parms{};

	Parms.AkEvent = AkEvent;
	Parms.Location = std::move(Location);

	UObject::ProcessEvent(Func, &Parms);
}


// Function CharacterSCTBP.CharacterSCTBP_C.Audio push player
// (Net, NetMulticast, BlueprintCallable, BlueprintEvent)

void ACharacterSCTBP_C::Audio_push_player()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterSCTBP_C", "Audio push player");

	UObject::ProcessEvent(Func, nullptr);
}


// Function CharacterSCTBP.CharacterSCTBP_C.Audio Drunk
// (Net, NetClient, BlueprintCallable, BlueprintEvent)

void ACharacterSCTBP_C::Audio_Drunk()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterSCTBP_C", "Audio Drunk");

	UObject::ProcessEvent(Func, nullptr);
}


// Function CharacterSCTBP.CharacterSCTBP_C.Multicast Audio Pickup
// (Net, NetMulticast, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UAkAudioEvent*                    AkEvent                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ACharacterSCTBP_C::Multicast_Audio_Pickup(class UAkAudioEvent* AkEvent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterSCTBP_C", "Multicast Audio Pickup");

	Params::CharacterSCTBP_C_Multicast_Audio_Pickup Parms{};

	Parms.AkEvent = AkEvent;

	UObject::ProcessEvent(Func, &Parms);
}


// Function CharacterSCTBP.CharacterSCTBP_C.Audio Stop Drinking
// (BlueprintCallable, BlueprintEvent)

void ACharacterSCTBP_C::Audio_Stop_Drinking()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterSCTBP_C", "Audio Stop Drinking");

	UObject::ProcessEvent(Func, nullptr);
}


// Function CharacterSCTBP.CharacterSCTBP_C.Audio Drinking
// (BlueprintCallable, BlueprintEvent)

void ACharacterSCTBP_C::Audio_Drinking()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterSCTBP_C", "Audio Drinking");

	UObject::ProcessEvent(Func, nullptr);
}


// Function CharacterSCTBP.CharacterSCTBP_C.Audio Fire Extinguished
// (Net, NetMulticast, BlueprintCallable, BlueprintEvent)

void ACharacterSCTBP_C::Audio_Fire_Extinguished()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterSCTBP_C", "Audio Fire Extinguished");

	UObject::ProcessEvent(Func, nullptr);
}


// Function CharacterSCTBP.CharacterSCTBP_C.Audio Hit By Extinguisher
// (Net, NetMulticast, BlueprintCallable, BlueprintEvent)

void ACharacterSCTBP_C::Audio_Hit_By_Extinguisher()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterSCTBP_C", "Audio Hit By Extinguisher");

	UObject::ProcessEvent(Func, nullptr);
}


// Function CharacterSCTBP.CharacterSCTBP_C.Owner_Audio_Play Event On This Character
// (Net, NetReliable, NetClient, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UAkAudioEvent*                    AkEvent                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ACharacterSCTBP_C::Owner_Audio_Play_Event_On_This_Character(class UAkAudioEvent* AkEvent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterSCTBP_C", "Owner_Audio_Play Event On This Character");

	Params::CharacterSCTBP_C_Owner_Audio_Play_Event_On_This_Character Parms{};

	Parms.AkEvent = AkEvent;

	UObject::ProcessEvent(Func, &Parms);
}


// Function CharacterSCTBP.CharacterSCTBP_C.Audio Coop Kill Begin Stop
// (BlueprintCallable, BlueprintEvent)

void ACharacterSCTBP_C::Audio_Coop_Kill_Begin_Stop()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterSCTBP_C", "Audio Coop Kill Begin Stop");

	UObject::ProcessEvent(Func, nullptr);
}


// Function CharacterSCTBP.CharacterSCTBP_C.Audio release player
// (Net, NetMulticast, BlueprintCallable, BlueprintEvent)

void ACharacterSCTBP_C::Audio_release_player()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterSCTBP_C", "Audio release player");

	UObject::ProcessEvent(Func, nullptr);
}


// Function CharacterSCTBP.CharacterSCTBP_C.Audio grab player
// (Net, NetMulticast, BlueprintCallable, BlueprintEvent)

void ACharacterSCTBP_C::Audio_grab_player()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterSCTBP_C", "Audio grab player");

	UObject::ProcessEvent(Func, nullptr);
}


// Function CharacterSCTBP.CharacterSCTBP_C.No SubMaterial_sub2
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    MaxWet                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ACharacterSCTBP_C::No_SubMaterial_sub2(bool MaxWet)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterSCTBP_C", "No SubMaterial_sub2");

	Params::CharacterSCTBP_C_No_SubMaterial_sub2 Parms{};

	Parms.MaxWet = MaxWet;

	UObject::ProcessEvent(Func, &Parms);
}


// Function CharacterSCTBP.CharacterSCTBP_C.Liquid
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    MaxWet                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ACharacterSCTBP_C::Liquid(bool MaxWet)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterSCTBP_C", "Liquid");

	Params::CharacterSCTBP_C_Liquid Parms{};

	Parms.MaxWet = MaxWet;

	UObject::ProcessEvent(Func, &Parms);
}


// Function CharacterSCTBP.CharacterSCTBP_C.No SubMaterial
// (BlueprintCallable, BlueprintEvent)

void ACharacterSCTBP_C::No_SubMaterial()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterSCTBP_C", "No SubMaterial");

	UObject::ProcessEvent(Func, nullptr);
}


// Function CharacterSCTBP.CharacterSCTBP_C.Glass
// (BlueprintCallable, BlueprintEvent)

void ACharacterSCTBP_C::Glass()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterSCTBP_C", "Glass");

	UObject::ProcessEvent(Func, nullptr);
}


// Function CharacterSCTBP.CharacterSCTBP_C.ClearFootstepCountTimer
// (BlueprintCallable, BlueprintEvent)

void ACharacterSCTBP_C::ClearFootstepCountTimer()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterSCTBP_C", "ClearFootstepCountTimer");

	UObject::ProcessEvent(Func, nullptr);
}


// Function CharacterSCTBP.CharacterSCTBP_C.DecrementFootstepCount
// (BlueprintCallable, BlueprintEvent)

void ACharacterSCTBP_C::DecrementFootstepCount()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterSCTBP_C", "DecrementFootstepCount");

	UObject::ProcessEvent(Func, nullptr);
}


// Function CharacterSCTBP.CharacterSCTBP_C.TriggerFootstepRunning
// (BlueprintCallable, BlueprintEvent)

void ACharacterSCTBP_C::TriggerFootstepRunning()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterSCTBP_C", "TriggerFootstepRunning");

	UObject::ProcessEvent(Func, nullptr);
}


// Function CharacterSCTBP.CharacterSCTBP_C.TriggerFootstepsSneaking
// (BlueprintCallable, BlueprintEvent)

void ACharacterSCTBP_C::TriggerFootstepsSneaking()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterSCTBP_C", "TriggerFootstepsSneaking");

	UObject::ProcessEvent(Func, nullptr);
}


// Function CharacterSCTBP.CharacterSCTBP_C.Reset Coop Kill End
// (BlueprintCallable, BlueprintEvent)

void ACharacterSCTBP_C::Reset_Coop_Kill_End()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterSCTBP_C", "Reset Coop Kill End");

	UObject::ProcessEvent(Func, nullptr);
}


// Function CharacterSCTBP.CharacterSCTBP_C.Reset Coop Kill Begin
// (BlueprintCallable, BlueprintEvent)

void ACharacterSCTBP_C::Reset_Coop_Kill_Begin()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterSCTBP_C", "Reset Coop Kill Begin");

	UObject::ProcessEvent(Func, nullptr);
}


// Function CharacterSCTBP.CharacterSCTBP_C.Audio Coop Kill End
// (BlueprintCallable, BlueprintEvent)

void ACharacterSCTBP_C::Audio_Coop_Kill_End()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterSCTBP_C", "Audio Coop Kill End");

	UObject::ProcessEvent(Func, nullptr);
}


// Function CharacterSCTBP.CharacterSCTBP_C.Audio Coop Kill Begin
// (BlueprintCallable, BlueprintEvent)

void ACharacterSCTBP_C::Audio_Coop_Kill_Begin()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterSCTBP_C", "Audio Coop Kill Begin");

	UObject::ProcessEvent(Func, nullptr);
}


// Function CharacterSCTBP.CharacterSCTBP_C.Audio Take Drink
// (BlueprintCallable, BlueprintEvent)

void ACharacterSCTBP_C::Audio_Take_Drink()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterSCTBP_C", "Audio Take Drink");

	UObject::ProcessEvent(Func, nullptr);
}


// Function CharacterSCTBP.CharacterSCTBP_C.Audio Play Footstep
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Sneak                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ACharacterSCTBP_C::Audio_Play_Footstep(bool Sneak)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterSCTBP_C", "Audio Play Footstep");

	Params::CharacterSCTBP_C_Audio_Play_Footstep Parms{};

	Parms.Sneak = Sneak;

	UObject::ProcessEvent(Func, &Parms);
}


// Function CharacterSCTBP.CharacterSCTBP_C.Hacky Hack Close Symbol Puzzle
// (BlueprintCallable, BlueprintEvent)

void ACharacterSCTBP_C::Hacky_Hack_Close_Symbol_Puzzle()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterSCTBP_C", "Hacky Hack Close Symbol Puzzle");

	UObject::ProcessEvent(Func, nullptr);
}


// Function CharacterSCTBP.CharacterSCTBP_C.Server_SymbolPuzzleClosed
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)

void ACharacterSCTBP_C::Server_SymbolPuzzleClosed()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterSCTBP_C", "Server_SymbolPuzzleClosed");

	UObject::ProcessEvent(Func, nullptr);
}


// Function CharacterSCTBP.CharacterSCTBP_C.Owner_Close Symbol Puzzle
// (Net, NetReliable, NetClient, BlueprintCallable, BlueprintEvent)

void ACharacterSCTBP_C::Owner_Close_Symbol_Puzzle()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterSCTBP_C", "Owner_Close Symbol Puzzle");

	UObject::ProcessEvent(Func, nullptr);
}


// Function CharacterSCTBP.CharacterSCTBP_C.Remove All Waiting For Partner Widget
// (Net, NetClient, BlueprintCallable, BlueprintEvent)

void ACharacterSCTBP_C::Remove_All_Waiting_For_Partner_Widget()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterSCTBP_C", "Remove All Waiting For Partner Widget");

	UObject::ProcessEvent(Func, nullptr);
}


// Function CharacterSCTBP.CharacterSCTBP_C.Show Waiting For Partner Widget
// (Net, NetClient, BlueprintCallable, BlueprintEvent)

void ACharacterSCTBP_C::Show_Waiting_For_Partner_Widget()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterSCTBP_C", "Show Waiting For Partner Widget");

	UObject::ProcessEvent(Func, nullptr);
}


// Function CharacterSCTBP.CharacterSCTBP_C.Close Symbol Puzzle For All
// (Net, NetMulticast, BlueprintCallable, BlueprintEvent)

void ACharacterSCTBP_C::Close_Symbol_Puzzle_For_All()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterSCTBP_C", "Close Symbol Puzzle For All");

	UObject::ProcessEvent(Func, nullptr);
}


// Function CharacterSCTBP.CharacterSCTBP_C.Close Symbol Puzzle
// (BlueprintCallable, BlueprintEvent)

void ACharacterSCTBP_C::Close_Symbol_Puzzle()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterSCTBP_C", "Close Symbol Puzzle");

	UObject::ProcessEvent(Func, nullptr);
}


// Function CharacterSCTBP.CharacterSCTBP_C.Server_Symbol Puzzle Solved
// (Net, NetServer, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Number1                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ACharacterSCTBP_C::Server_Symbol_Puzzle_Solved(bool Number1)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterSCTBP_C", "Server_Symbol Puzzle Solved");

	Params::CharacterSCTBP_C_Server_Symbol_Puzzle_Solved Parms{};

	Parms.Number1 = Number1;

	UObject::ProcessEvent(Func, &Parms);
}


// Function CharacterSCTBP.CharacterSCTBP_C.Server Picked Up Audio
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UAkAudioEvent*                    AK_Event                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ACharacterSCTBP_C::Server_Picked_Up_Audio(class UAkAudioEvent* AK_Event)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterSCTBP_C", "Server Picked Up Audio");

	Params::CharacterSCTBP_C_Server_Picked_Up_Audio Parms{};

	Parms.AK_Event = AK_Event;

	UObject::ProcessEvent(Func, &Parms);
}


// Function CharacterSCTBP.CharacterSCTBP_C.Owner_Show Empty Picked Up Widget
// (Net, NetReliable, NetClient, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UContextStaticMeshComponent*      ContextStaticMesh                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ACharacterSCTBP_C::Owner_Show_Empty_Picked_Up_Widget(class UContextStaticMeshComponent* ContextStaticMesh)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterSCTBP_C", "Owner_Show Empty Picked Up Widget");

	Params::CharacterSCTBP_C_Owner_Show_Empty_Picked_Up_Widget Parms{};

	Parms.ContextStaticMesh = ContextStaticMesh;

	UObject::ProcessEvent(Func, &Parms);
}


// Function CharacterSCTBP.CharacterSCTBP_C.Owner_Show Picked Up Widget
// (Net, NetReliable, NetClient, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UPowerData*                       PowerData                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    InventoryFull                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// class UContextStaticMeshComponent*      ContextStaticMesh                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ACharacterSCTBP_C::Owner_Show_Picked_Up_Widget(class UPowerData* PowerData, bool InventoryFull, class UContextStaticMeshComponent* ContextStaticMesh)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterSCTBP_C", "Owner_Show Picked Up Widget");

	Params::CharacterSCTBP_C_Owner_Show_Picked_Up_Widget Parms{};

	Parms.PowerData = PowerData;
	Parms.InventoryFull = InventoryFull;
	Parms.ContextStaticMesh = ContextStaticMesh;

	UObject::ProcessEvent(Func, &Parms);
}


// Function CharacterSCTBP.CharacterSCTBP_C.Owner_Update Equipment Slot Widget
// (Net, NetReliable, NetClient, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UPower*                           Power                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ACharacterSCTBP_C::Owner_Update_Equipment_Slot_Widget(class UPower* Power)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterSCTBP_C", "Owner_Update Equipment Slot Widget");

	Params::CharacterSCTBP_C_Owner_Update_Equipment_Slot_Widget Parms{};

	Parms.Power = Power;

	UObject::ProcessEvent(Func, &Parms);
}


// Function CharacterSCTBP.CharacterSCTBP_C.Equip Item
// (Net, NetServer, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UPower*                           Power                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// EInventorySlotID                        SlotId                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ACharacterSCTBP_C::Equip_Item(class UPower* Power, EInventorySlotID SlotId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterSCTBP_C", "Equip Item");

	Params::CharacterSCTBP_C_Equip_Item Parms{};

	Parms.Power = Power;
	Parms.SlotId = SlotId;

	UObject::ProcessEvent(Func, &Parms);
}


// Function CharacterSCTBP.CharacterSCTBP_C.SetDestinyBPI
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// EFate                                   Fate                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          Impulse                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ACharacterSCTBP_C::SetDestinyBPI(EFate Fate, const struct FVector& Impulse)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterSCTBP_C", "SetDestinyBPI");

	Params::CharacterSCTBP_C_SetDestinyBPI Parms{};

	Parms.Fate = Fate;
	Parms.Impulse = std::move(Impulse);

	UObject::ProcessEvent(Func, &Parms);
}


// Function CharacterSCTBP.CharacterSCTBP_C.PassengerLogVoteBPI
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           AirlockTarget                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class ACharacter*                       TargetCharacter                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class ACharacter*                       VotingCharacter                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ACharacterSCTBP_C::PassengerLogVoteBPI(class AActor* AirlockTarget, class ACharacter* TargetCharacter, class ACharacter* VotingCharacter)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterSCTBP_C", "PassengerLogVoteBPI");

	Params::CharacterSCTBP_C_PassengerLogVoteBPI Parms{};

	Parms.AirlockTarget = AirlockTarget;
	Parms.TargetCharacter = TargetCharacter;
	Parms.VotingCharacter = VotingCharacter;

	UObject::ProcessEvent(Func, &Parms);
}


// Function CharacterSCTBP.CharacterSCTBP_C.ServerPassengerLogVote
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           AirlockTarget                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class ACharacter*                       TargetCharacter                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class ACharacter*                       VotingCharacter                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ACharacterSCTBP_C::ServerPassengerLogVote(class AActor* AirlockTarget, class ACharacter* TargetCharacter, class ACharacter* VotingCharacter)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterSCTBP_C", "ServerPassengerLogVote");

	Params::CharacterSCTBP_C_ServerPassengerLogVote Parms{};

	Parms.AirlockTarget = AirlockTarget;
	Parms.TargetCharacter = TargetCharacter;
	Parms.VotingCharacter = VotingCharacter;

	UObject::ProcessEvent(Func, &Parms);
}


// Function CharacterSCTBP.CharacterSCTBP_C.ServerTrustVote
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           TargetAirlock                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Yes                                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// class ACharacter*                       VotingCharacter                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ACharacterSCTBP_C::ServerTrustVote(class AActor* TargetAirlock, bool Yes, class ACharacter* VotingCharacter)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterSCTBP_C", "ServerTrustVote");

	Params::CharacterSCTBP_C_ServerTrustVote Parms{};

	Parms.TargetAirlock = TargetAirlock;
	Parms.Yes = Yes;
	Parms.VotingCharacter = VotingCharacter;

	UObject::ProcessEvent(Func, &Parms);
}


// Function CharacterSCTBP.CharacterSCTBP_C.TrustVoteBPI
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           TargetAirlock                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Yes                                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// class ACharacter*                       VotingCharacter                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ACharacterSCTBP_C::TrustVoteBPI(class AActor* TargetAirlock, bool Yes, class ACharacter* VotingCharacter)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterSCTBP_C", "TrustVoteBPI");

	Params::CharacterSCTBP_C_TrustVoteBPI Parms{};

	Parms.TargetAirlock = TargetAirlock;
	Parms.Yes = Yes;
	Parms.VotingCharacter = VotingCharacter;

	UObject::ProcessEvent(Func, &Parms);
}


// Function CharacterSCTBP.CharacterSCTBP_C.ServerEliminationVote
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           TargetAirlock                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class ACharacter*                       Character                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class ACharacter*                       VotingCharacter                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ACharacterSCTBP_C::ServerEliminationVote(class AActor* TargetAirlock, class ACharacter* Character, class ACharacter* VotingCharacter)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterSCTBP_C", "ServerEliminationVote");

	Params::CharacterSCTBP_C_ServerEliminationVote Parms{};

	Parms.TargetAirlock = TargetAirlock;
	Parms.Character = Character;
	Parms.VotingCharacter = VotingCharacter;

	UObject::ProcessEvent(Func, &Parms);
}


// Function CharacterSCTBP.CharacterSCTBP_C.EliminationVoteBPI
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           AirlockTarget                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class ACharacter*                       VotedCharacter                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class ACharacter*                       VotingCharacter                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ACharacterSCTBP_C::EliminationVoteBPI(class AActor* AirlockTarget, class ACharacter* VotedCharacter, class ACharacter* VotingCharacter)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterSCTBP_C", "EliminationVoteBPI");

	Params::CharacterSCTBP_C_EliminationVoteBPI Parms{};

	Parms.AirlockTarget = AirlockTarget;
	Parms.VotedCharacter = VotedCharacter;
	Parms.VotingCharacter = VotingCharacter;

	UObject::ProcessEvent(Func, &Parms);
}


// Function CharacterSCTBP.CharacterSCTBP_C.Stop Montaging
// (BlueprintCallable, BlueprintEvent)

void ACharacterSCTBP_C::Stop_Montaging()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterSCTBP_C", "Stop Montaging");

	UObject::ProcessEvent(Func, nullptr);
}


// Function CharacterSCTBP.CharacterSCTBP_C.Add Emotes To Emote Array
// (BlueprintCallable, BlueprintEvent)

void ACharacterSCTBP_C::Add_Emotes_To_Emote_Array()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterSCTBP_C", "Add Emotes To Emote Array");

	UObject::ProcessEvent(Func, nullptr);
}


// Function CharacterSCTBP.CharacterSCTBP_C.Multi_Emote
// (Net, NetMulticast, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FS_Emote                         Emote                                                  (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
// class ACharacterSCTBP_C*                Character                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ACharacterSCTBP_C::Multi_Emote(const struct FS_Emote& Emote, class ACharacterSCTBP_C* Character)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterSCTBP_C", "Multi_Emote");

	Params::CharacterSCTBP_C_Multi_Emote Parms{};

	Parms.Emote = std::move(Emote);
	Parms.Character = Character;

	UObject::ProcessEvent(Func, &Parms);
}


// Function CharacterSCTBP.CharacterSCTBP_C.Reset Emote Cooldown
// (BlueprintCallable, BlueprintEvent)

void ACharacterSCTBP_C::Reset_Emote_Cooldown()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterSCTBP_C", "Reset Emote Cooldown");

	UObject::ProcessEvent(Func, nullptr);
}


// Function CharacterSCTBP.CharacterSCTBP_C.Server_Emote
// (Net, NetServer, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FS_Emote                         Emote                                                  (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)

void ACharacterSCTBP_C::Server_Emote(const struct FS_Emote& Emote)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterSCTBP_C", "Server_Emote");

	Params::CharacterSCTBP_C_Server_Emote Parms{};

	Parms.Emote = std::move(Emote);

	UObject::ProcessEvent(Func, &Parms);
}


// Function CharacterSCTBP.CharacterSCTBP_C.Run Emote
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   EmoteIntInWheel                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ACharacterSCTBP_C::Run_Emote(int32 EmoteIntInWheel)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterSCTBP_C", "Run Emote");

	Params::CharacterSCTBP_C_Run_Emote Parms{};

	Parms.EmoteIntInWheel = EmoteIntInWheel;

	UObject::ProcessEvent(Func, &Parms);
}


// Function CharacterSCTBP.CharacterSCTBP_C.Remove Emote Components
// (BlueprintCallable, BlueprintEvent)

void ACharacterSCTBP_C::Remove_Emote_Components()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterSCTBP_C", "Remove Emote Components");

	UObject::ProcessEvent(Func, nullptr);
}


// Function CharacterSCTBP.CharacterSCTBP_C.Add Emote Component
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// E_Emotes                                Emote                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ACharacterSCTBP_C::Add_Emote_Component(E_Emotes Emote)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterSCTBP_C", "Add Emote Component");

	Params::CharacterSCTBP_C_Add_Emote_Component Parms{};

	Parms.Emote = Emote;

	UObject::ProcessEvent(Func, &Parms);
}


// Function CharacterSCTBP.CharacterSCTBP_C.AnimNotifyIdleEntryStateBPI
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// EIdleEntryState                         IdleEntryState                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ACharacterSCTBP_C::AnimNotifyIdleEntryStateBPI(EIdleEntryState IdleEntryState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterSCTBP_C", "AnimNotifyIdleEntryStateBPI");

	Params::CharacterSCTBP_C_AnimNotifyIdleEntryStateBPI Parms{};

	Parms.IdleEntryState = IdleEntryState;

	UObject::ProcessEvent(Func, &Parms);
}


// Function CharacterSCTBP.CharacterSCTBP_C.AnimNotifyTurnInPlaceBPI
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UAnimMontage*                     TurnInPlaceMontage                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    ShouldTurnInPlace                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    TurningInPlace                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    TurningRight                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ACharacterSCTBP_C::AnimNotifyTurnInPlaceBPI(class UAnimMontage* TurnInPlaceMontage, bool ShouldTurnInPlace, bool TurningInPlace, bool TurningRight)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterSCTBP_C", "AnimNotifyTurnInPlaceBPI");

	Params::CharacterSCTBP_C_AnimNotifyTurnInPlaceBPI Parms{};

	Parms.TurnInPlaceMontage = TurnInPlaceMontage;
	Parms.ShouldTurnInPlace = ShouldTurnInPlace;
	Parms.TurningInPlace = TurningInPlace;
	Parms.TurningRight = TurningRight;

	UObject::ProcessEvent(Func, &Parms);
}


// Function CharacterSCTBP.CharacterSCTBP_C.AnimNotifyPivotBPI
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FPivotParams                     PivotParameters                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ACharacterSCTBP_C::AnimNotifyPivotBPI(const struct FPivotParams& PivotParameters)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterSCTBP_C", "AnimNotifyPivotBPI");

	Params::CharacterSCTBP_C_AnimNotifyPivotBPI Parms{};

	Parms.PivotParameters = std::move(PivotParameters);

	UObject::ProcessEvent(Func, &Parms);
}


// Function CharacterSCTBP.CharacterSCTBP_C.PlayGetUpAnimBPI
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    FaceDown                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ACharacterSCTBP_C::PlayGetUpAnimBPI(bool FaceDown)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterSCTBP_C", "PlayGetUpAnimBPI");

	Params::CharacterSCTBP_C_PlayGetUpAnimBPI Parms{};

	Parms.FaceDown = FaceDown;

	UObject::ProcessEvent(Func, &Parms);
}


// Function CharacterSCTBP.CharacterSCTBP_C.SavePoseSnapshotBPI
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FName                             PoseName                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ACharacterSCTBP_C::SavePoseSnapshotBPI(class FName PoseName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterSCTBP_C", "SavePoseSnapshotBPI");

	Params::CharacterSCTBP_C_SavePoseSnapshotBPI Parms{};

	Parms.PoseName = PoseName;

	UObject::ProcessEvent(Func, &Parms);
}


// Function CharacterSCTBP.CharacterSCTBP_C.SetGaitBPI
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// EGait                                   NewGait                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ACharacterSCTBP_C::SetGaitBPI(EGait NewGait)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterSCTBP_C", "SetGaitBPI");

	Params::CharacterSCTBP_C_SetGaitBPI Parms{};

	Parms.NewGait = NewGait;

	UObject::ProcessEvent(Func, &Parms);
}


// Function CharacterSCTBP.CharacterSCTBP_C.SetMovementModeBPI
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// MovementMode::EMovementMode             NewMovementMode                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ACharacterSCTBP_C::SetMovementModeBPI(MovementMode::EMovementMode NewMovementMode)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterSCTBP_C", "SetMovementModeBPI");

	Params::CharacterSCTBP_C_SetMovementModeBPI Parms{};

	Parms.NewMovementMode = NewMovementMode;

	UObject::ProcessEvent(Func, &Parms);
}


// Function CharacterSCTBP.CharacterSCTBP_C.SetAimingBPI
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Aiming                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// uint8                                   AimType                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ACharacterSCTBP_C::SetAimingBPI(bool Aiming, uint8 AimType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterSCTBP_C", "SetAimingBPI");

	Params::CharacterSCTBP_C_SetAimingBPI Parms{};

	Parms.Aiming = Aiming;
	Parms.AimType = AimType;

	UObject::ProcessEvent(Func, &Parms);
}


// Function CharacterSCTBP.CharacterSCTBP_C.PlayEmoteBPI
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// uint8                                   EmoteID                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ACharacterSCTBP_C::PlayEmoteBPI(uint8 EmoteID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterSCTBP_C", "PlayEmoteBPI");

	Params::CharacterSCTBP_C_PlayEmoteBPI Parms{};

	Parms.EmoteID = EmoteID;

	UObject::ProcessEvent(Func, &Parms);
}


// Function CharacterSCTBP.CharacterSCTBP_C.ToRagdollBPI
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    ToRagdoll                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// struct FVector                          OptionalImpulse                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Force                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ACharacterSCTBP_C::ToRagdollBPI(bool ToRagdoll, const struct FVector& OptionalImpulse, bool Force)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterSCTBP_C", "ToRagdollBPI");

	Params::CharacterSCTBP_C_ToRagdollBPI Parms{};

	Parms.ToRagdoll = ToRagdoll;
	Parms.OptionalImpulse = std::move(OptionalImpulse);
	Parms.Force = Force;

	UObject::ProcessEvent(Func, &Parms);
}


// Function CharacterSCTBP.CharacterSCTBP_C.ReinitBPI
// (Public, BlueprintCallable, BlueprintEvent)

void ACharacterSCTBP_C::ReinitBPI()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterSCTBP_C", "ReinitBPI");

	UObject::ProcessEvent(Func, nullptr);
}


// Function CharacterSCTBP.CharacterSCTBP_C.ShouldSprintBPI
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    ShouldSprint                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ACharacterSCTBP_C::ShouldSprintBPI(bool ShouldSprint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterSCTBP_C", "ShouldSprintBPI");

	Params::CharacterSCTBP_C_ShouldSprintBPI Parms{};

	Parms.ShouldSprint = ShouldSprint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function CharacterSCTBP.CharacterSCTBP_C.LandedBPI
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FHitResult                       Hit                                                    (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, ContainsInstancedReference)

void ACharacterSCTBP_C::LandedBPI(const struct FHitResult& Hit)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterSCTBP_C", "LandedBPI");

	Params::CharacterSCTBP_C_LandedBPI Parms{};

	Parms.Hit = std::move(Hit);

	UObject::ProcessEvent(Func, &Parms);
}


// Function CharacterSCTBP.CharacterSCTBP_C.SetStanceBPI
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// EStance                                 NewStance                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ACharacterSCTBP_C::SetStanceBPI(EStance NewStance)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterSCTBP_C", "SetStanceBPI");

	Params::CharacterSCTBP_C_SetStanceBPI Parms{};

	Parms.NewStance = NewStance;

	UObject::ProcessEvent(Func, &Parms);
}


// Function CharacterSCTBP.CharacterSCTBP_C.MovementModeChangedBPI
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// Engine::EMovementMode                   PrevMovementMode                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// Engine::EMovementMode                   NewMovementMode                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// uint8                                   PrevCustomMode                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// uint8                                   NewCustomMode                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ACharacterSCTBP_C::MovementModeChangedBPI(Engine::EMovementMode PrevMovementMode, Engine::EMovementMode NewMovementMode, uint8 PrevCustomMode, uint8 NewCustomMode)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterSCTBP_C", "MovementModeChangedBPI");

	Params::CharacterSCTBP_C_MovementModeChangedBPI Parms{};

	Parms.PrevMovementMode = PrevMovementMode;
	Parms.NewMovementMode = NewMovementMode;
	Parms.PrevCustomMode = PrevCustomMode;
	Parms.NewCustomMode = NewCustomMode;

	UObject::ProcessEvent(Func, &Parms);
}


// Function CharacterSCTBP.CharacterSCTBP_C.AddCharacterRotationBPI
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FRotator                         AddAmount                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ACharacterSCTBP_C::AddCharacterRotationBPI(const struct FRotator& AddAmount)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterSCTBP_C", "AddCharacterRotationBPI");

	Params::CharacterSCTBP_C_AddCharacterRotationBPI Parms{};

	Parms.AddAmount = std::move(AddAmount);

	UObject::ProcessEvent(Func, &Parms);
}


// Function CharacterSCTBP.CharacterSCTBP_C.LogOutBPI
// (Public, BlueprintCallable, BlueprintEvent)

void ACharacterSCTBP_C::LogOutBPI()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterSCTBP_C", "LogOutBPI");

	UObject::ProcessEvent(Func, nullptr);
}


// Function CharacterSCTBP.CharacterSCTBP_C.InitiateAirlockSequenceBPI
// (Public, BlueprintCallable, BlueprintEvent)

void ACharacterSCTBP_C::InitiateAirlockSequenceBPI()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterSCTBP_C", "InitiateAirlockSequenceBPI");

	UObject::ProcessEvent(Func, nullptr);
}


// Function CharacterSCTBP.CharacterSCTBP_C.StartElevatorBPI
// (Public, BlueprintCallable, BlueprintEvent)

void ACharacterSCTBP_C::StartElevatorBPI()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterSCTBP_C", "StartElevatorBPI");

	UObject::ProcessEvent(Func, nullptr);
}


// Function CharacterSCTBP.CharacterSCTBP_C.OnSuccess_29AD0CAB4DB0BF046014A39EE29FD9A9
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FFCTCloudCustomizationGender     Payload                                                (BlueprintVisible, BlueprintReadOnly, Parm)
// bool                                    IsMale                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// int32                                   Code                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FString                           Message                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)

void ACharacterSCTBP_C::OnSuccess_29AD0CAB4DB0BF046014A39EE29FD9A9(const struct FFCTCloudCustomizationGender& Payload, bool IsMale, int32 Code, const class FString& Message)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterSCTBP_C", "OnSuccess_29AD0CAB4DB0BF046014A39EE29FD9A9");

	Params::CharacterSCTBP_C_OnSuccess_29AD0CAB4DB0BF046014A39EE29FD9A9 Parms{};

	Parms.Payload = std::move(Payload);
	Parms.IsMale = IsMale;
	Parms.Code = Code;
	Parms.Message = std::move(Message);

	UObject::ProcessEvent(Func, &Parms);
}


// Function CharacterSCTBP.CharacterSCTBP_C.OnError_29AD0CAB4DB0BF046014A39EE29FD9A9
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   Code                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FString                           Message                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)

void ACharacterSCTBP_C::OnError_29AD0CAB4DB0BF046014A39EE29FD9A9(int32 Code, const class FString& Message)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterSCTBP_C", "OnError_29AD0CAB4DB0BF046014A39EE29FD9A9");

	Params::CharacterSCTBP_C_OnError_29AD0CAB4DB0BF046014A39EE29FD9A9 Parms{};

	Parms.Code = Code;
	Parms.Message = std::move(Message);

	UObject::ProcessEvent(Func, &Parms);
}


// Function CharacterSCTBP.CharacterSCTBP_C.OnSuccess_302DBEE4465F643C3F8F1F978FCF93E2
// (HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FAccelByteUserPresenceData       Payload                                                (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// int32                                   Code                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FString                           Message                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)

void ACharacterSCTBP_C::OnSuccess_302DBEE4465F643C3F8F1F978FCF93E2(const struct FAccelByteUserPresenceData& Payload, int32 Code, const class FString& Message)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterSCTBP_C", "OnSuccess_302DBEE4465F643C3F8F1F978FCF93E2");

	Params::CharacterSCTBP_C_OnSuccess_302DBEE4465F643C3F8F1F978FCF93E2 Parms{};

	Parms.Payload = std::move(Payload);
	Parms.Code = Code;
	Parms.Message = std::move(Message);

	UObject::ProcessEvent(Func, &Parms);
}


// Function CharacterSCTBP.CharacterSCTBP_C.OnError_302DBEE4465F643C3F8F1F978FCF93E2
// (HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FAccelByteUserPresenceData       Payload                                                (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// int32                                   Code                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FString                           Message                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)

void ACharacterSCTBP_C::OnError_302DBEE4465F643C3F8F1F978FCF93E2(const struct FAccelByteUserPresenceData& Payload, int32 Code, const class FString& Message)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterSCTBP_C", "OnError_302DBEE4465F643C3F8F1F978FCF93E2");

	Params::CharacterSCTBP_C_OnError_302DBEE4465F643C3F8F1F978FCF93E2 Parms{};

	Parms.Payload = std::move(Payload);
	Parms.Code = Code;
	Parms.Message = std::move(Message);

	UObject::ProcessEvent(Func, &Parms);
}


// Function CharacterSCTBP.CharacterSCTBP_C.OnSuccess_1233531A41373DBD3993A09096D388D3
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FFCTCloudCustomizationGender     Payload                                                (BlueprintVisible, BlueprintReadOnly, Parm)
// bool                                    IsMale                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// int32                                   Code                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FString                           Message                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)

void ACharacterSCTBP_C::OnSuccess_1233531A41373DBD3993A09096D388D3(const struct FFCTCloudCustomizationGender& Payload, bool IsMale, int32 Code, const class FString& Message)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterSCTBP_C", "OnSuccess_1233531A41373DBD3993A09096D388D3");

	Params::CharacterSCTBP_C_OnSuccess_1233531A41373DBD3993A09096D388D3 Parms{};

	Parms.Payload = std::move(Payload);
	Parms.IsMale = IsMale;
	Parms.Code = Code;
	Parms.Message = std::move(Message);

	UObject::ProcessEvent(Func, &Parms);
}


// Function CharacterSCTBP.CharacterSCTBP_C.OnError_1233531A41373DBD3993A09096D388D3
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   Code                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FString                           Message                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)

void ACharacterSCTBP_C::OnError_1233531A41373DBD3993A09096D388D3(int32 Code, const class FString& Message)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterSCTBP_C", "OnError_1233531A41373DBD3993A09096D388D3");

	Params::CharacterSCTBP_C_OnError_1233531A41373DBD3993A09096D388D3 Parms{};

	Parms.Code = Code;
	Parms.Message = std::move(Message);

	UObject::ProcessEvent(Func, &Parms);
}


// Function CharacterSCTBP.CharacterSCTBP_C.Success_30EC041F4468C700F95F6F84503617E3
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// class UFCTAchievement*                  AchievementInfo                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FString                           Message                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)

void ACharacterSCTBP_C::Success_30EC041F4468C700F95F6F84503617E3(class UFCTAchievement* AchievementInfo, const class FString& Message)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterSCTBP_C", "Success_30EC041F4468C700F95F6F84503617E3");

	Params::CharacterSCTBP_C_Success_30EC041F4468C700F95F6F84503617E3 Parms{};

	Parms.AchievementInfo = AchievementInfo;
	Parms.Message = std::move(Message);

	UObject::ProcessEvent(Func, &Parms);
}


// Function CharacterSCTBP.CharacterSCTBP_C.OnError_30EC041F4468C700F95F6F84503617E3
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// class FString                           Message                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)

void ACharacterSCTBP_C::OnError_30EC041F4468C700F95F6F84503617E3(const class FString& Message)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterSCTBP_C", "OnError_30EC041F4468C700F95F6F84503617E3");

	Params::CharacterSCTBP_C_OnError_30EC041F4468C700F95F6F84503617E3 Parms{};

	Parms.Message = std::move(Message);

	UObject::ProcessEvent(Func, &Parms);
}


// Function CharacterSCTBP.CharacterSCTBP_C.InpActEvt_Crouch_K2Node_InputActionEvent_0
// (BlueprintEvent)
// Parameters:
// struct FKey                             Key                                                    (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)

void ACharacterSCTBP_C::InpActEvt_Crouch_K2Node_InputActionEvent_0(const struct FKey& Key)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterSCTBP_C", "InpActEvt_Crouch_K2Node_InputActionEvent_0");

	Params::CharacterSCTBP_C_InpActEvt_Crouch_K2Node_InputActionEvent_0 Parms{};

	Parms.Key = std::move(Key);

	UObject::ProcessEvent(Func, &Parms);
}


// Function CharacterSCTBP.CharacterSCTBP_C.InpActEvt_Crouch_K2Node_InputActionEvent_1
// (BlueprintEvent)
// Parameters:
// struct FKey                             Key                                                    (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)

void ACharacterSCTBP_C::InpActEvt_Crouch_K2Node_InputActionEvent_1(const struct FKey& Key)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterSCTBP_C", "InpActEvt_Crouch_K2Node_InputActionEvent_1");

	Params::CharacterSCTBP_C_InpActEvt_Crouch_K2Node_InputActionEvent_1 Parms{};

	Parms.Key = std::move(Key);

	UObject::ProcessEvent(Func, &Parms);
}


// Function CharacterSCTBP.CharacterSCTBP_C.OnCompleted_F6F4253F4EB102CB8BB478860CDBED32
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// class FName                             NotifyName                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ACharacterSCTBP_C::OnCompleted_F6F4253F4EB102CB8BB478860CDBED32(class FName NotifyName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterSCTBP_C", "OnCompleted_F6F4253F4EB102CB8BB478860CDBED32");

	Params::CharacterSCTBP_C_OnCompleted_F6F4253F4EB102CB8BB478860CDBED32 Parms{};

	Parms.NotifyName = NotifyName;

	UObject::ProcessEvent(Func, &Parms);
}


// Function CharacterSCTBP.CharacterSCTBP_C.OnBlendOut_F6F4253F4EB102CB8BB478860CDBED32
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// class FName                             NotifyName                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ACharacterSCTBP_C::OnBlendOut_F6F4253F4EB102CB8BB478860CDBED32(class FName NotifyName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterSCTBP_C", "OnBlendOut_F6F4253F4EB102CB8BB478860CDBED32");

	Params::CharacterSCTBP_C_OnBlendOut_F6F4253F4EB102CB8BB478860CDBED32 Parms{};

	Parms.NotifyName = NotifyName;

	UObject::ProcessEvent(Func, &Parms);
}


// Function CharacterSCTBP.CharacterSCTBP_C.OnInterrupted_F6F4253F4EB102CB8BB478860CDBED32
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// class FName                             NotifyName                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ACharacterSCTBP_C::OnInterrupted_F6F4253F4EB102CB8BB478860CDBED32(class FName NotifyName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterSCTBP_C", "OnInterrupted_F6F4253F4EB102CB8BB478860CDBED32");

	Params::CharacterSCTBP_C_OnInterrupted_F6F4253F4EB102CB8BB478860CDBED32 Parms{};

	Parms.NotifyName = NotifyName;

	UObject::ProcessEvent(Func, &Parms);
}


// Function CharacterSCTBP.CharacterSCTBP_C.OnNotifyBegin_F6F4253F4EB102CB8BB478860CDBED32
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// class FName                             NotifyName                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ACharacterSCTBP_C::OnNotifyBegin_F6F4253F4EB102CB8BB478860CDBED32(class FName NotifyName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterSCTBP_C", "OnNotifyBegin_F6F4253F4EB102CB8BB478860CDBED32");

	Params::CharacterSCTBP_C_OnNotifyBegin_F6F4253F4EB102CB8BB478860CDBED32 Parms{};

	Parms.NotifyName = NotifyName;

	UObject::ProcessEvent(Func, &Parms);
}


// Function CharacterSCTBP.CharacterSCTBP_C.OnNotifyEnd_F6F4253F4EB102CB8BB478860CDBED32
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// class FName                             NotifyName                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ACharacterSCTBP_C::OnNotifyEnd_F6F4253F4EB102CB8BB478860CDBED32(class FName NotifyName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterSCTBP_C", "OnNotifyEnd_F6F4253F4EB102CB8BB478860CDBED32");

	Params::CharacterSCTBP_C_OnNotifyEnd_F6F4253F4EB102CB8BB478860CDBED32 Parms{};

	Parms.NotifyName = NotifyName;

	UObject::ProcessEvent(Func, &Parms);
}


// Function CharacterSCTBP.CharacterSCTBP_C.ScannerVisuals__UpdateFunc
// (BlueprintEvent)

void ACharacterSCTBP_C::ScannerVisuals__UpdateFunc()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterSCTBP_C", "ScannerVisuals__UpdateFunc");

	UObject::ProcessEvent(Func, nullptr);
}


// Function CharacterSCTBP.CharacterSCTBP_C.ScannerVisuals__FinishedFunc
// (BlueprintEvent)

void ACharacterSCTBP_C::ScannerVisuals__FinishedFunc()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterSCTBP_C", "ScannerVisuals__FinishedFunc");

	UObject::ProcessEvent(Func, nullptr);
}


// Function CharacterSCTBP.CharacterSCTBP_C.ScannerScale__UpdateFunc
// (BlueprintEvent)

void ACharacterSCTBP_C::ScannerScale__UpdateFunc()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterSCTBP_C", "ScannerScale__UpdateFunc");

	UObject::ProcessEvent(Func, nullptr);
}


// Function CharacterSCTBP.CharacterSCTBP_C.ScannerScale__FinishedFunc
// (BlueprintEvent)

void ACharacterSCTBP_C::ScannerScale__FinishedFunc()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterSCTBP_C", "ScannerScale__FinishedFunc");

	UObject::ProcessEvent(Func, nullptr);
}


// Function CharacterSCTBP.CharacterSCTBP_C.CameraOffset__UpdateFunc
// (BlueprintEvent)

void ACharacterSCTBP_C::CameraOffset__UpdateFunc()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterSCTBP_C", "CameraOffset__UpdateFunc");

	UObject::ProcessEvent(Func, nullptr);
}


// Function CharacterSCTBP.CharacterSCTBP_C.CameraOffset__FinishedFunc
// (BlueprintEvent)

void ACharacterSCTBP_C::CameraOffset__FinishedFunc()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterSCTBP_C", "CameraOffset__FinishedFunc");

	UObject::ProcessEvent(Func, nullptr);
}


// Function CharacterSCTBP.CharacterSCTBP_C.PersonoidTransformationTimeline__UpdateFunc
// (BlueprintEvent)

void ACharacterSCTBP_C::PersonoidTransformationTimeline__UpdateFunc()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterSCTBP_C", "PersonoidTransformationTimeline__UpdateFunc");

	UObject::ProcessEvent(Func, nullptr);
}


// Function CharacterSCTBP.CharacterSCTBP_C.PersonoidTransformationTimeline__FinishedFunc
// (BlueprintEvent)

void ACharacterSCTBP_C::PersonoidTransformationTimeline__FinishedFunc()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterSCTBP_C", "PersonoidTransformationTimeline__FinishedFunc");

	UObject::ProcessEvent(Func, nullptr);
}


// Function CharacterSCTBP.CharacterSCTBP_C.FireIntensity2__UpdateFunc
// (BlueprintEvent)

void ACharacterSCTBP_C::FireIntensity2__UpdateFunc()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterSCTBP_C", "FireIntensity2__UpdateFunc");

	UObject::ProcessEvent(Func, nullptr);
}


// Function CharacterSCTBP.CharacterSCTBP_C.FireIntensity2__FinishedFunc
// (BlueprintEvent)

void ACharacterSCTBP_C::FireIntensity2__FinishedFunc()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterSCTBP_C", "FireIntensity2__FinishedFunc");

	UObject::ProcessEvent(Func, nullptr);
}


// Function CharacterSCTBP.CharacterSCTBP_C.FireIntensity__UpdateFunc
// (BlueprintEvent)

void ACharacterSCTBP_C::FireIntensity__UpdateFunc()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterSCTBP_C", "FireIntensity__UpdateFunc");

	UObject::ProcessEvent(Func, nullptr);
}


// Function CharacterSCTBP.CharacterSCTBP_C.FireIntensity__FinishedFunc
// (BlueprintEvent)

void ACharacterSCTBP_C::FireIntensity__FinishedFunc()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterSCTBP_C", "FireIntensity__FinishedFunc");

	UObject::ProcessEvent(Func, nullptr);
}


// Function CharacterSCTBP.CharacterSCTBP_C.Frost Intensity__UpdateFunc
// (BlueprintEvent)

void ACharacterSCTBP_C::Frost_Intensity__UpdateFunc()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterSCTBP_C", "Frost Intensity__UpdateFunc");

	UObject::ProcessEvent(Func, nullptr);
}


// Function CharacterSCTBP.CharacterSCTBP_C.Frost Intensity__FinishedFunc
// (BlueprintEvent)

void ACharacterSCTBP_C::Frost_Intensity__FinishedFunc()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterSCTBP_C", "Frost Intensity__FinishedFunc");

	UObject::ProcessEvent(Func, nullptr);
}


// Function CharacterSCTBP.CharacterSCTBP_C.UserConstructionScript
// (Event, Public, BlueprintCallable, BlueprintEvent)

void ACharacterSCTBP_C::UserConstructionScript()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterSCTBP_C", "UserConstructionScript");

	UObject::ProcessEvent(Func, nullptr);
}


// Function CharacterSCTBP.CharacterSCTBP_C.OxygenLow
// (Public, BlueprintCallable, BlueprintEvent)

void ACharacterSCTBP_C::OxygenLow()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterSCTBP_C", "OxygenLow");

	UObject::ProcessEvent(Func, nullptr);
}


// Function CharacterSCTBP.CharacterSCTBP_C.OxygenNormal
// (Public, BlueprintCallable, BlueprintEvent)

void ACharacterSCTBP_C::OxygenNormal()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterSCTBP_C", "OxygenNormal");

	UObject::ProcessEvent(Func, nullptr);
}


// Function CharacterSCTBP.CharacterSCTBP_C.OxygenEmpty
// (Public, BlueprintCallable, BlueprintEvent)

void ACharacterSCTBP_C::OxygenEmpty()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterSCTBP_C", "OxygenEmpty");

	UObject::ProcessEvent(Func, nullptr);
}


// Function CharacterSCTBP.CharacterSCTBP_C.RemoveAllInteractionWidgets
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void ACharacterSCTBP_C::RemoveAllInteractionWidgets()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterSCTBP_C", "RemoveAllInteractionWidgets");

	UObject::ProcessEvent(Func, nullptr);
}


// Function CharacterSCTBP.CharacterSCTBP_C.PrintInteractionSpec
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UActorComponent*                  ContextStaticMesh                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FString                           Description                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// struct FKey                             Key                                                    (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, HasGetValueTypeHash)

void ACharacterSCTBP_C::PrintInteractionSpec(class UActorComponent* ContextStaticMesh, const class FString& Description, const struct FKey& Key)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterSCTBP_C", "PrintInteractionSpec");

	Params::CharacterSCTBP_C_PrintInteractionSpec Parms{};

	Parms.ContextStaticMesh = ContextStaticMesh;
	Parms.Description = std::move(Description);
	Parms.Key = std::move(Key);

	UObject::ProcessEvent(Func, &Parms);
}


// Function CharacterSCTBP.CharacterSCTBP_C.CreateNewWidgetForWorldInteraction
// (Public, BlueprintCallable, BlueprintEvent)

void ACharacterSCTBP_C::CreateNewWidgetForWorldInteraction()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterSCTBP_C", "CreateNewWidgetForWorldInteraction");

	UObject::ProcessEvent(Func, nullptr);
}


// Function CharacterSCTBP.CharacterSCTBP_C.ReturnSplitSpecVariables
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// struct FBoundContextSpec                BoundContextSpec                                       (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, ContainsInstancedReference)
// class UContextStaticMeshComponent*      Target                                                 (Parm, OutParm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FKey                             Key                                                    (Parm, OutParm, HasGetValueTypeHash)

void ACharacterSCTBP_C::ReturnSplitSpecVariables(const struct FBoundContextSpec& BoundContextSpec, class UContextStaticMeshComponent** Target, struct FKey* Key)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterSCTBP_C", "ReturnSplitSpecVariables");

	Params::CharacterSCTBP_C_ReturnSplitSpecVariables Parms{};

	Parms.BoundContextSpec = std::move(BoundContextSpec);

	UObject::ProcessEvent(Func, &Parms);

	if (Target != nullptr)
		*Target = Parms.Target;

	if (Key != nullptr)
		*Key = std::move(Parms.Key);
}


// Function CharacterSCTBP.CharacterSCTBP_C.CreateCustomizations
// (Public, BlueprintCallable, BlueprintEvent)

void ACharacterSCTBP_C::CreateCustomizations()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterSCTBP_C", "CreateCustomizations");

	UObject::ProcessEvent(Func, nullptr);
}


// Function CharacterSCTBP.CharacterSCTBP_C.Initialization
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void ACharacterSCTBP_C::Initialization()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterSCTBP_C", "Initialization");

	UObject::ProcessEvent(Func, nullptr);
}


// Function CharacterSCTBP.CharacterSCTBP_C.Set Name Billboard
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FString                           NewName                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)

void ACharacterSCTBP_C::Set_Name_Billboard(const class FString& NewName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterSCTBP_C", "Set Name Billboard");

	Params::CharacterSCTBP_C_Set_Name_Billboard Parms{};

	Parms.NewName = std::move(NewName);

	UObject::ProcessEvent(Func, &Parms);
}


// Function CharacterSCTBP.CharacterSCTBP_C.Low Oxygen Warning Stop
// (Public, BlueprintCallable, BlueprintEvent)

void ACharacterSCTBP_C::Low_Oxygen_Warning_Stop()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterSCTBP_C", "Low Oxygen Warning Stop");

	UObject::ProcessEvent(Func, nullptr);
}


// Function CharacterSCTBP.CharacterSCTBP_C.LowOxygenWarningStart
// (Public, BlueprintCallable, BlueprintEvent)

void ACharacterSCTBP_C::LowOxygenWarningStart()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterSCTBP_C", "LowOxygenWarningStart");

	UObject::ProcessEvent(Func, nullptr);
}


// Function CharacterSCTBP.CharacterSCTBP_C.InitializePersonoid
// (Public, BlueprintCallable, BlueprintEvent)

void ACharacterSCTBP_C::InitializePersonoid()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterSCTBP_C", "InitializePersonoid");

	UObject::ProcessEvent(Func, nullptr);
}


// Function CharacterSCTBP.CharacterSCTBP_C.InitializeResident
// (Public, BlueprintCallable, BlueprintEvent)

void ACharacterSCTBP_C::InitializeResident()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterSCTBP_C", "InitializeResident");

	UObject::ProcessEvent(Func, nullptr);
}


// Function CharacterSCTBP.CharacterSCTBP_C.OnRep_OnFire
// (BlueprintCallable, BlueprintEvent)

void ACharacterSCTBP_C::OnRep_OnFire()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterSCTBP_C", "OnRep_OnFire");

	UObject::ProcessEvent(Func, nullptr);
}


// Function CharacterSCTBP.CharacterSCTBP_C.CreateNewInteractionWidget
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FBoundContextSpec                BoundContextSpec                                       (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, ContainsInstancedReference)
// class UWorldInteractableWI_C*           Widget                                                 (Parm, OutParm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ACharacterSCTBP_C::CreateNewInteractionWidget(const struct FBoundContextSpec& BoundContextSpec, class UWorldInteractableWI_C** Widget)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterSCTBP_C", "CreateNewInteractionWidget");

	Params::CharacterSCTBP_C_CreateNewInteractionWidget Parms{};

	Parms.BoundContextSpec = std::move(BoundContextSpec);

	UObject::ProcessEvent(Func, &Parms);

	if (Widget != nullptr)
		*Widget = Parms.Widget;
}


// Function CharacterSCTBP.CharacterSCTBP_C.AddEntryToInteractionWidget
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FBoundContextSpec                BoundContextSpec                                       (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, ContainsInstancedReference)
// class UWorldInteractableWI_C*           WorldInteractableWidget                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ACharacterSCTBP_C::AddEntryToInteractionWidget(const struct FBoundContextSpec& BoundContextSpec, class UWorldInteractableWI_C* WorldInteractableWidget)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterSCTBP_C", "AddEntryToInteractionWidget");

	Params::CharacterSCTBP_C_AddEntryToInteractionWidget Parms{};

	Parms.BoundContextSpec = std::move(BoundContextSpec);
	Parms.WorldInteractableWidget = WorldInteractableWidget;

	UObject::ProcessEvent(Func, &Parms);
}


// Function CharacterSCTBP.CharacterSCTBP_C.AddKeysToInteractionMap
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FBoundContextSpec                BoundContextSpec                                       (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, ContainsInstancedReference)

void ACharacterSCTBP_C::AddKeysToInteractionMap(const struct FBoundContextSpec& BoundContextSpec)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterSCTBP_C", "AddKeysToInteractionMap");

	Params::CharacterSCTBP_C_AddKeysToInteractionMap Parms{};

	Parms.BoundContextSpec = std::move(BoundContextSpec);

	UObject::ProcessEvent(Func, &Parms);
}


// Function CharacterSCTBP.CharacterSCTBP_C.RebuildContextUI
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<struct FBoundContextSpec>        InputPin                                               (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, ContainsInstancedReference)

void ACharacterSCTBP_C::RebuildContextUI(TArray<struct FBoundContextSpec>& InputPin)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterSCTBP_C", "RebuildContextUI");

	Params::CharacterSCTBP_C_RebuildContextUI Parms{};

	Parms.InputPin = std::move(InputPin);

	UObject::ProcessEvent(Func, &Parms);

	InputPin = std::move(Parms.InputPin);
}


// Function CharacterSCTBP.CharacterSCTBP_C.GetNameOfPhysMatBelow
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UPhysicalMaterial*                PhysMat                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ACharacterSCTBP_C::GetNameOfPhysMatBelow(class UPhysicalMaterial** PhysMat)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterSCTBP_C", "GetNameOfPhysMatBelow");

	Params::CharacterSCTBP_C_GetNameOfPhysMatBelow Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (PhysMat != nullptr)
		*PhysMat = Parms.PhysMat;
}


// Function CharacterSCTBP.CharacterSCTBP_C.SetRenderCustomDepthCustom
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    On                                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ACharacterSCTBP_C::SetRenderCustomDepthCustom(bool On)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterSCTBP_C", "SetRenderCustomDepthCustom");

	Params::CharacterSCTBP_C_SetRenderCustomDepthCustom Parms{};

	Parms.On = On;

	UObject::ProcessEvent(Func, &Parms);
}


// Function CharacterSCTBP.CharacterSCTBP_C.BecomeUnconscious
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FVector                          Optional_Impulse                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Force                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ACharacterSCTBP_C::BecomeUnconscious(const struct FVector& Optional_Impulse, bool Force)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterSCTBP_C", "BecomeUnconscious");

	Params::CharacterSCTBP_C_BecomeUnconscious Parms{};

	Parms.Optional_Impulse = std::move(Optional_Impulse);
	Parms.Force = Force;

	UObject::ProcessEvent(Func, &Parms);
}


// Function CharacterSCTBP.CharacterSCTBP_C.Become Conscious
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Force                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ACharacterSCTBP_C::Become_Conscious(bool Force)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterSCTBP_C", "Become Conscious");

	Params::CharacterSCTBP_C_Become_Conscious Parms{};

	Parms.Force = Force;

	UObject::ProcessEvent(Func, &Parms);
}


// Function CharacterSCTBP.CharacterSCTBP_C.GetAliveTemp
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<class ACharacter*>               AlivePlayers                                           (Parm, OutParm)

void ACharacterSCTBP_C::GetAliveTemp(TArray<class ACharacter*>* AlivePlayers)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterSCTBP_C", "GetAliveTemp");

	Params::CharacterSCTBP_C_GetAliveTemp Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (AlivePlayers != nullptr)
		*AlivePlayers = std::move(Parms.AlivePlayers);
}


// Function CharacterSCTBP.CharacterSCTBP_C.CreateCharacterIntroWidget
// (Public, BlueprintCallable, BlueprintEvent)

void ACharacterSCTBP_C::CreateCharacterIntroWidget()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterSCTBP_C", "CreateCharacterIntroWidget");

	UObject::ProcessEvent(Func, nullptr);
}


// Function CharacterSCTBP.CharacterSCTBP_C.ScoreForAirlockVote
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ACharacter*                       VotedCharacter                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class ACharacter*                       VotingCharacter                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ACharacterSCTBP_C::ScoreForAirlockVote(class ACharacter* VotedCharacter, class ACharacter* VotingCharacter)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterSCTBP_C", "ScoreForAirlockVote");

	Params::CharacterSCTBP_C_ScoreForAirlockVote Parms{};

	Parms.VotedCharacter = VotedCharacter;
	Parms.VotingCharacter = VotingCharacter;

	UObject::ProcessEvent(Func, &Parms);
}


// Function CharacterSCTBP.CharacterSCTBP_C.OnRep_AlcoholPercent
// (BlueprintCallable, BlueprintEvent)

void ACharacterSCTBP_C::OnRep_AlcoholPercent()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterSCTBP_C", "OnRep_AlcoholPercent");

	UObject::ProcessEvent(Func, nullptr);
}


// Function CharacterSCTBP.CharacterSCTBP_C.GenerateSineWave
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// float                                   Period                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

float ACharacterSCTBP_C::GenerateSineWave(float Period)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterSCTBP_C", "GenerateSineWave");

	Params::CharacterSCTBP_C_GenerateSineWave Parms{};

	Parms.Period = Period;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function CharacterSCTBP.CharacterSCTBP_C.HandleNameChanged
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FString                           NewName                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)

void ACharacterSCTBP_C::HandleNameChanged(const class FString& NewName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterSCTBP_C", "HandleNameChanged");

	Params::CharacterSCTBP_C_HandleNameChanged Parms{};

	Parms.NewName = std::move(NewName);

	UObject::ProcessEvent(Func, &Parms);
}


// Function CharacterSCTBP.CharacterSCTBP_C.UpdateItemWheelEntry
// (Public, BlueprintCallable, BlueprintEvent)

void ACharacterSCTBP_C::UpdateItemWheelEntry()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterSCTBP_C", "UpdateItemWheelEntry");

	UObject::ProcessEvent(Func, nullptr);
}


// Function CharacterSCTBP.CharacterSCTBP_C.GetAllOtherPlayers
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<class APlayerState*>             AllPlayersExceptSelf_0                                 (Parm, OutParm)

void ACharacterSCTBP_C::GetAllOtherPlayers(TArray<class APlayerState*>* AllPlayersExceptSelf_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterSCTBP_C", "GetAllOtherPlayers");

	Params::CharacterSCTBP_C_GetAllOtherPlayers Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (AllPlayersExceptSelf_0 != nullptr)
		*AllPlayersExceptSelf_0 = std::move(Parms.AllPlayersExceptSelf_0);
}


// Function CharacterSCTBP.CharacterSCTBP_C.GetHiddenAgenda
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FText                             HiddenAgenda                                           (Parm, OutParm)

void ACharacterSCTBP_C::GetHiddenAgenda(class FText* HiddenAgenda)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterSCTBP_C", "GetHiddenAgenda");

	Params::CharacterSCTBP_C_GetHiddenAgenda Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (HiddenAgenda != nullptr)
		*HiddenAgenda = std::move(Parms.HiddenAgenda);
}


// Function CharacterSCTBP.CharacterSCTBP_C.Hidden_ParticipateInCoopKill
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FText                             HiddenAgenda                                           (Parm, OutParm)

void ACharacterSCTBP_C::Hidden_ParticipateInCoopKill(class FText* HiddenAgenda)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterSCTBP_C", "Hidden_ParticipateInCoopKill");

	Params::CharacterSCTBP_C_Hidden_ParticipateInCoopKill Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (HiddenAgenda != nullptr)
		*HiddenAgenda = std::move(Parms.HiddenAgenda);
}


// Function CharacterSCTBP.CharacterSCTBP_C.Hidden_ScanAPlayer
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FText                             HiddenAgenda                                           (Parm, OutParm)

void ACharacterSCTBP_C::Hidden_ScanAPlayer(class FText* HiddenAgenda)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterSCTBP_C", "Hidden_ScanAPlayer");

	Params::CharacterSCTBP_C_Hidden_ScanAPlayer Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (HiddenAgenda != nullptr)
		*HiddenAgenda = std::move(Parms.HiddenAgenda);
}


// Function CharacterSCTBP.CharacterSCTBP_C.Hidden_MakeSureIsEliminated
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FText                             HiddenAgenda                                           (Parm, OutParm)

void ACharacterSCTBP_C::Hidden_MakeSureIsEliminated(class FText* HiddenAgenda)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterSCTBP_C", "Hidden_MakeSureIsEliminated");

	Params::CharacterSCTBP_C_Hidden_MakeSureIsEliminated Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (HiddenAgenda != nullptr)
		*HiddenAgenda = std::move(Parms.HiddenAgenda);
}


// Function CharacterSCTBP.CharacterSCTBP_C.Hidden_MakeSureIsTheMostDownVoted
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FText                             HiddenAgenda                                           (Parm, OutParm)

void ACharacterSCTBP_C::Hidden_MakeSureIsTheMostDownVoted(class FText* HiddenAgenda)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterSCTBP_C", "Hidden_MakeSureIsTheMostDownVoted");

	Params::CharacterSCTBP_C_Hidden_MakeSureIsTheMostDownVoted Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (HiddenAgenda != nullptr)
		*HiddenAgenda = std::move(Parms.HiddenAgenda);
}


// Function CharacterSCTBP.CharacterSCTBP_C.Hidden_Hit5WithBottle
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FText                             HiddenAgenda                                           (Parm, OutParm)

void ACharacterSCTBP_C::Hidden_Hit5WithBottle(class FText* HiddenAgenda)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterSCTBP_C", "Hidden_Hit5WithBottle");

	Params::CharacterSCTBP_C_Hidden_Hit5WithBottle Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (HiddenAgenda != nullptr)
		*HiddenAgenda = std::move(Parms.HiddenAgenda);
}


// Function CharacterSCTBP.CharacterSCTBP_C.GetRandomPlayerThatIsNotSelf
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class APlayerState*                     Output                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ACharacterSCTBP_C::GetRandomPlayerThatIsNotSelf(class APlayerState** Output)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterSCTBP_C", "GetRandomPlayerThatIsNotSelf");

	Params::CharacterSCTBP_C_GetRandomPlayerThatIsNotSelf Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Output != nullptr)
		*Output = Parms.Output;
}


// Function CharacterSCTBP.CharacterSCTBP_C.OnRep_Drowned
// (HasDefaults, BlueprintCallable, BlueprintEvent)

void ACharacterSCTBP_C::OnRep_Drowned()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterSCTBP_C", "OnRep_Drowned");

	UObject::ProcessEvent(Func, nullptr);
}


// Function CharacterSCTBP.CharacterSCTBP_C.SetDrowned
// (Public, BlueprintCallable, BlueprintEvent)

void ACharacterSCTBP_C::SetDrowned()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterSCTBP_C", "SetDrowned");

	UObject::ProcessEvent(Func, nullptr);
}


// Function CharacterSCTBP.CharacterSCTBP_C.OnRep_InteractingAnim
// (BlueprintCallable, BlueprintEvent)

void ACharacterSCTBP_C::OnRep_InteractingAnim()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterSCTBP_C", "OnRep_InteractingAnim");

	UObject::ProcessEvent(Func, nullptr);
}


// Function CharacterSCTBP.CharacterSCTBP_C.LowOxygenAnimState
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    LowOxygen                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ACharacterSCTBP_C::LowOxygenAnimState(bool LowOxygen)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterSCTBP_C", "LowOxygenAnimState");

	Params::CharacterSCTBP_C_LowOxygenAnimState Parms{};

	Parms.LowOxygen = LowOxygen;

	UObject::ProcessEvent(Func, &Parms);
}


// Function CharacterSCTBP.CharacterSCTBP_C.Emergency
// (Public, BlueprintCallable, BlueprintEvent)

void ACharacterSCTBP_C::Emergency()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterSCTBP_C", "Emergency");

	UObject::ProcessEvent(Func, nullptr);
}


// Function CharacterSCTBP.CharacterSCTBP_C.IsNewMatTheOldMat
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class UPhysicalMaterial*                PhysMat                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    IsTheSame                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ACharacterSCTBP_C::IsNewMatTheOldMat(class UPhysicalMaterial* PhysMat, bool* IsTheSame)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterSCTBP_C", "IsNewMatTheOldMat");

	Params::CharacterSCTBP_C_IsNewMatTheOldMat Parms{};

	Parms.PhysMat = PhysMat;

	UObject::ProcessEvent(Func, &Parms);

	if (IsTheSame != nullptr)
		*IsTheSame = Parms.IsTheSame;
}


// Function CharacterSCTBP.CharacterSCTBP_C.FadePlayerUI
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Show                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ACharacterSCTBP_C::FadePlayerUI(bool Show)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterSCTBP_C", "FadePlayerUI");

	Params::CharacterSCTBP_C_FadePlayerUI Parms{};

	Parms.Show = Show;

	UObject::ProcessEvent(Func, &Parms);
}


// Function CharacterSCTBP.CharacterSCTBP_C.OnRep_IsFrozen
// (BlueprintCallable, BlueprintEvent)

void ACharacterSCTBP_C::OnRep_IsFrozen()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterSCTBP_C", "OnRep_IsFrozen");

	UObject::ProcessEvent(Func, nullptr);
}


// Function CharacterSCTBP.CharacterSCTBP_C.setBurned
// (Public, BlueprintCallable, BlueprintEvent)

void ACharacterSCTBP_C::SetBurned()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterSCTBP_C", "setBurned");

	UObject::ProcessEvent(Func, nullptr);
}


// Function CharacterSCTBP.CharacterSCTBP_C.OnRep_beingGrabbed
// (BlueprintCallable, BlueprintEvent)

void ACharacterSCTBP_C::OnRep_beingGrabbed()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterSCTBP_C", "OnRep_beingGrabbed");

	UObject::ProcessEvent(Func, nullptr);
}


// Function CharacterSCTBP.CharacterSCTBP_C.OnRep_isGrabbing
// (BlueprintCallable, BlueprintEvent)

void ACharacterSCTBP_C::OnRep_isGrabbing()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterSCTBP_C", "OnRep_isGrabbing");

	UObject::ProcessEvent(Func, nullptr);
}


// Function CharacterSCTBP.CharacterSCTBP_C.OnRep_isPushing
// (BlueprintCallable, BlueprintEvent)

void ACharacterSCTBP_C::OnRep_isPushing()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterSCTBP_C", "OnRep_isPushing");

	UObject::ProcessEvent(Func, nullptr);
}


// Function CharacterSCTBP.CharacterSCTBP_C.OnRep_isOxygenPot
// (BlueprintCallable, BlueprintEvent)

void ACharacterSCTBP_C::OnRep_isOxygenPot()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterSCTBP_C", "OnRep_isOxygenPot");

	UObject::ProcessEvent(Func, nullptr);
}


// Function CharacterSCTBP.CharacterSCTBP_C.OnRep_isThrowing
// (BlueprintCallable, BlueprintEvent)

void ACharacterSCTBP_C::OnRep_isThrowing()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterSCTBP_C", "OnRep_isThrowing");

	UObject::ProcessEvent(Func, nullptr);
}


// Function CharacterSCTBP.CharacterSCTBP_C.UpdateItemSlotWidgetIfPowerNotValid
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// EInventorySlotID                        SlotId                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ACharacterSCTBP_C::UpdateItemSlotWidgetIfPowerNotValid(EInventorySlotID SlotId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterSCTBP_C", "UpdateItemSlotWidgetIfPowerNotValid");

	Params::CharacterSCTBP_C_UpdateItemSlotWidgetIfPowerNotValid Parms{};

	Parms.SlotId = SlotId;

	UObject::ProcessEvent(Func, &Parms);
}


// Function CharacterSCTBP.CharacterSCTBP_C.setElectrocuted
// (Public, BlueprintCallable, BlueprintEvent)

void ACharacterSCTBP_C::SetElectrocuted()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterSCTBP_C", "setElectrocuted");

	UObject::ProcessEvent(Func, nullptr);
}


// Function CharacterSCTBP.CharacterSCTBP_C.Audio Set Gender
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    IsMale                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ACharacterSCTBP_C::Audio_Set_Gender(bool IsMale)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterSCTBP_C", "Audio Set Gender");

	Params::CharacterSCTBP_C_Audio_Set_Gender Parms{};

	Parms.IsMale = IsMale;

	UObject::ProcessEvent(Func, &Parms);
}


// Function CharacterSCTBP.CharacterSCTBP_C.Audio Set Clothing Switch
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void ACharacterSCTBP_C::Audio_Set_Clothing_Switch()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterSCTBP_C", "Audio Set Clothing Switch");

	UObject::ProcessEvent(Func, nullptr);
}


// Function CharacterSCTBP.CharacterSCTBP_C.Audio Set Switch Movement Type
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FString                           MovementType                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)

void ACharacterSCTBP_C::Audio_Set_Switch_Movement_Type(const class FString& MovementType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterSCTBP_C", "Audio Set Switch Movement Type");

	Params::CharacterSCTBP_C_Audio_Set_Switch_Movement_Type Parms{};

	Parms.MovementType = std::move(MovementType);

	UObject::ProcessEvent(Func, &Parms);
}


// Function CharacterSCTBP.CharacterSCTBP_C.Audio Set Switch Surface Material
// (Public, BlueprintCallable, BlueprintEvent)

void ACharacterSCTBP_C::Audio_Set_Switch_Surface_Material()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterSCTBP_C", "Audio Set Switch Surface Material");

	UObject::ProcessEvent(Func, nullptr);
}


// Function CharacterSCTBP.CharacterSCTBP_C.Audio Set 3D RTPC
// (Public, BlueprintCallable, BlueprintEvent)

void ACharacterSCTBP_C::Audio_Set_3D_RTPC()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterSCTBP_C", "Audio Set 3D RTPC");

	UObject::ProcessEvent(Func, nullptr);
}


// Function CharacterSCTBP.CharacterSCTBP_C.Audio Set Wetness RTPC
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   Float                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ACharacterSCTBP_C::Audio_Set_Wetness_RTPC(float Float)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterSCTBP_C", "Audio Set Wetness RTPC");

	Params::CharacterSCTBP_C_Audio_Set_Wetness_RTPC Parms{};

	Parms.Float = Float;

	UObject::ProcessEvent(Func, &Parms);
}


// Function CharacterSCTBP.CharacterSCTBP_C.Audio Set Players Threat Levels RTPC
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   ThreatLevel                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class ACharacterSCTBP_C*                Character                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ACharacterSCTBP_C::Audio_Set_Players_Threat_Levels_RTPC(float ThreatLevel, class ACharacterSCTBP_C* Character)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterSCTBP_C", "Audio Set Players Threat Levels RTPC");

	Params::CharacterSCTBP_C_Audio_Set_Players_Threat_Levels_RTPC Parms{};

	Parms.ThreatLevel = ThreatLevel;
	Parms.Character = Character;

	UObject::ProcessEvent(Func, &Parms);
}


// Function CharacterSCTBP.CharacterSCTBP_C.Audio Killer Mode
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    On                                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ACharacterSCTBP_C::Audio_Killer_Mode(bool On)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterSCTBP_C", "Audio Killer Mode");

	Params::CharacterSCTBP_C_Audio_Killer_Mode Parms{};

	Parms.On = On;

	UObject::ProcessEvent(Func, &Parms);
}


// Function CharacterSCTBP.CharacterSCTBP_C.OnRep_AudioFootstep
// (BlueprintCallable, BlueprintEvent)

void ACharacterSCTBP_C::OnRep_AudioFootstep()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterSCTBP_C", "OnRep_AudioFootstep");

	UObject::ProcessEvent(Func, nullptr);
}


// Function CharacterSCTBP.CharacterSCTBP_C.SetGrabbingActor
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ACharacterSCTBP_C*                GrabbingActor                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ACharacterSCTBP_C::SetGrabbingActor(class ACharacterSCTBP_C* GrabbingActor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterSCTBP_C", "SetGrabbingActor");

	Params::CharacterSCTBP_C_SetGrabbingActor Parms{};

	Parms.GrabbingActor = GrabbingActor;

	UObject::ProcessEvent(Func, &Parms);
}


// Function CharacterSCTBP.CharacterSCTBP_C.SetGait
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   MoveSpeed                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ACharacterSCTBP_C::SetGait(float MoveSpeed)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterSCTBP_C", "SetGait");

	Params::CharacterSCTBP_C_SetGait Parms{};

	Parms.MoveSpeed = MoveSpeed;

	UObject::ProcessEvent(Func, &Parms);
}


// Function CharacterSCTBP.CharacterSCTBP_C.Set Customization Appearance
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FCloudCustomizationPayload       CustomizationPayload                                   (BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)

void ACharacterSCTBP_C::Set_Customization_Appearance(const struct FCloudCustomizationPayload& CustomizationPayload)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterSCTBP_C", "Set Customization Appearance");

	Params::CharacterSCTBP_C_Set_Customization_Appearance Parms{};

	Parms.CustomizationPayload = std::move(CustomizationPayload);

	UObject::ProcessEvent(Func, &Parms);
}


// Function CharacterSCTBP.CharacterSCTBP_C.SetCustomizationItem
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UObject*                          InMesh                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FCloudCustomizationSetting       CustomizationSetting                                   (BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)
// TArray<struct FPlayerCustomizationItem> CustomizationOptionsList                               (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// TArray<class UTexture2D*>               Masks                                                  (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)

void ACharacterSCTBP_C::SetCustomizationItem(class UObject* InMesh, const struct FCloudCustomizationSetting& CustomizationSetting, TArray<struct FPlayerCustomizationItem>& CustomizationOptionsList, TArray<class UTexture2D*>& Masks)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterSCTBP_C", "SetCustomizationItem");

	Params::CharacterSCTBP_C_SetCustomizationItem Parms{};

	Parms.InMesh = InMesh;
	Parms.CustomizationSetting = std::move(CustomizationSetting);
	Parms.CustomizationOptionsList = std::move(CustomizationOptionsList);
	Parms.Masks = std::move(Masks);

	UObject::ProcessEvent(Func, &Parms);

	CustomizationOptionsList = std::move(Parms.CustomizationOptionsList);
	Masks = std::move(Parms.Masks);
}


// Function CharacterSCTBP.CharacterSCTBP_C.Interaction Anim
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// E_interactionAnim                       Animation                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// E_interactionAnimState                  State                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ACharacterSCTBP_C::Interaction_Anim(E_interactionAnim Animation, E_interactionAnimState State)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterSCTBP_C", "Interaction Anim");

	Params::CharacterSCTBP_C_Interaction_Anim Parms{};

	Parms.Animation = Animation;
	Parms.State = State;

	UObject::ProcessEvent(Func, &Parms);
}


// Function CharacterSCTBP.CharacterSCTBP_C.InitializeCustomizationOptions
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    IsMale                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ACharacterSCTBP_C::InitializeCustomizationOptions(bool IsMale)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterSCTBP_C", "InitializeCustomizationOptions");

	Params::CharacterSCTBP_C_InitializeCustomizationOptions Parms{};

	Parms.IsMale = IsMale;

	UObject::ProcessEvent(Func, &Parms);
}


// Function CharacterSCTBP.CharacterSCTBP_C.ApplyCustomizationMasks
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FCloudCustomizationPayload       CustomizationPayload                                   (BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)

void ACharacterSCTBP_C::ApplyCustomizationMasks(const struct FCloudCustomizationPayload& CustomizationPayload)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterSCTBP_C", "ApplyCustomizationMasks");

	Params::CharacterSCTBP_C_ApplyCustomizationMasks Parms{};

	Parms.CustomizationPayload = std::move(CustomizationPayload);

	UObject::ProcessEvent(Func, &Parms);
}


// Function CharacterSCTBP.CharacterSCTBP_C.CosmeticsForMontage
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FS_Emote                         EmoteDetails                                           (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
// class AActor*                           OtherActor                                             (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ACharacterSCTBP_C::CosmeticsForMontage(const struct FS_Emote& EmoteDetails, const class AActor* OtherActor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterSCTBP_C", "CosmeticsForMontage");

	Params::CharacterSCTBP_C_CosmeticsForMontage Parms{};

	Parms.EmoteDetails = std::move(EmoteDetails);
	Parms.OtherActor = OtherActor;

	UObject::ProcessEvent(Func, &Parms);
}


// Function CharacterSCTBP.CharacterSCTBP_C.SetAndPlayEmoji
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FS_Emote                         EmoteDetails                                           (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)

void ACharacterSCTBP_C::SetAndPlayEmoji(const struct FS_Emote& EmoteDetails)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterSCTBP_C", "SetAndPlayEmoji");

	Params::CharacterSCTBP_C_SetAndPlayEmoji Parms{};

	Parms.EmoteDetails = std::move(EmoteDetails);

	UObject::ProcessEvent(Func, &Parms);
}


// Function CharacterSCTBP.CharacterSCTBP_C.StopMontage
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void ACharacterSCTBP_C::StopMontage()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterSCTBP_C", "StopMontage");

	UObject::ProcessEvent(Func, nullptr);
}


// Function CharacterSCTBP.CharacterSCTBP_C.InitializeNameBillboard
// (Public, BlueprintCallable, BlueprintEvent)

void ACharacterSCTBP_C::InitializeNameBillboard()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterSCTBP_C", "InitializeNameBillboard");

	UObject::ProcessEvent(Func, nullptr);
}


// Function CharacterSCTBP.CharacterSCTBP_C.OnIdentificationColorChanged
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class APlayerState*                     PlayerState_0                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FLinearColor                     Value                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ACharacterSCTBP_C::OnIdentificationColorChanged(class APlayerState* PlayerState_0, const struct FLinearColor& Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterSCTBP_C", "OnIdentificationColorChanged");

	Params::CharacterSCTBP_C_OnIdentificationColorChanged Parms{};

	Parms.PlayerState_0 = PlayerState_0;
	Parms.Value = std::move(Value);

	UObject::ProcessEvent(Func, &Parms);
}


// Function CharacterSCTBP.CharacterSCTBP_C.CharacterHasGATag
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// struct FGameplayTagContainer            Tags_0                                                 (BlueprintVisible, BlueprintReadOnly, Parm)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)

bool ACharacterSCTBP_C::CharacterHasGATag(const struct FGameplayTagContainer& Tags_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterSCTBP_C", "CharacterHasGATag");

	Params::CharacterSCTBP_C_CharacterHasGATag Parms{};

	Parms.Tags_0 = std::move(Tags_0);

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function CharacterSCTBP.CharacterSCTBP_C.Notify Character Widget Of Player State
// (Public, BlueprintCallable, BlueprintEvent)

void ACharacterSCTBP_C::Notify_Character_Widget_Of_Player_State()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterSCTBP_C", "Notify Character Widget Of Player State");

	UObject::ProcessEvent(Func, nullptr);
}


// Function CharacterSCTBP.CharacterSCTBP_C.SetOxygenState
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// EOxygenState                            Selection                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ACharacterSCTBP_C::SetOxygenState(EOxygenState Selection)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterSCTBP_C", "SetOxygenState");

	Params::CharacterSCTBP_C_SetOxygenState Parms{};

	Parms.Selection = Selection;

	UObject::ProcessEvent(Func, &Parms);
}


// Function CharacterSCTBP.CharacterSCTBP_C.OxygenCritical
// (Public, BlueprintCallable, BlueprintEvent)

void ACharacterSCTBP_C::OxygenCritical()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterSCTBP_C", "OxygenCritical");

	UObject::ProcessEvent(Func, nullptr);
}


// Function CharacterSCTBP.CharacterSCTBP_C.DropPassengerLogWithInfo
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void ACharacterSCTBP_C::DropPassengerLogWithInfo()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterSCTBP_C", "DropPassengerLogWithInfo");

	UObject::ProcessEvent(Func, nullptr);
}


// Function CharacterSCTBP.CharacterSCTBP_C.GrantScoreToKiller
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// EFate                                   Fate                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ACharacterSCTBP_C::GrantScoreToKiller(EFate Fate)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterSCTBP_C", "GrantScoreToKiller");

	Params::CharacterSCTBP_C_GrantScoreToKiller Parms{};

	Parms.Fate = Fate;

	UObject::ProcessEvent(Func, &Parms);
}


// Function CharacterSCTBP.CharacterSCTBP_C.UpdateFateAnalytics
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// EFate                                   Fate                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ACharacterSCTBP_C::UpdateFateAnalytics(EFate Fate)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterSCTBP_C", "UpdateFateAnalytics");

	Params::CharacterSCTBP_C_UpdateFateAnalytics Parms{};

	Parms.Fate = Fate;

	UObject::ProcessEvent(Func, &Parms);
}


// Function CharacterSCTBP.CharacterSCTBP_C.Set Character Configuration
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FFCTCloudCustomizationGender     Customization                                          (BlueprintVisible, BlueprintReadOnly, Parm)
// bool                                    IsMale                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ACharacterSCTBP_C::Set_Character_Configuration(const struct FFCTCloudCustomizationGender& Customization, bool IsMale)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterSCTBP_C", "Set Character Configuration");

	Params::CharacterSCTBP_C_Set_Character_Configuration Parms{};

	Parms.Customization = std::move(Customization);
	Parms.IsMale = IsMale;

	UObject::ProcessEvent(Func, &Parms);
}


// Function CharacterSCTBP.CharacterSCTBP_C.NewFunction_0
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Condition                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ACharacterSCTBP_C::NewFunction_0(bool Condition)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterSCTBP_C", "NewFunction_0");

	Params::CharacterSCTBP_C_NewFunction_0 Parms{};

	Parms.Condition = Condition;

	UObject::ProcessEvent(Func, &Parms);
}


// Function CharacterSCTBP.CharacterSCTBP_C.SetCoopKiller
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ACharacterSCT*                    New_Killing_Actor                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ACharacterSCTBP_C::SetCoopKiller(class ACharacterSCT* New_Killing_Actor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterSCTBP_C", "SetCoopKiller");

	Params::CharacterSCTBP_C_SetCoopKiller Parms{};

	Parms.New_Killing_Actor = New_Killing_Actor;

	UObject::ProcessEvent(Func, &Parms);
}


// Function CharacterSCTBP.CharacterSCTBP_C.SpawnCharacterCameraHider
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void ACharacterSCTBP_C::SpawnCharacterCameraHider()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterSCTBP_C", "SpawnCharacterCameraHider");

	UObject::ProcessEvent(Func, nullptr);
}


// Function CharacterSCTBP.CharacterSCTBP_C.setFrozen
// (Public, BlueprintCallable, BlueprintEvent)

void ACharacterSCTBP_C::SetFrozen()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterSCTBP_C", "setFrozen");

	UObject::ProcessEvent(Func, nullptr);
}


// Function CharacterSCTBP.CharacterSCTBP_C.GetCustomDepthMeshes
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// TArray<class UPrimitiveComponent*>      Meshes                                                 (Parm, OutParm, ContainsInstancedReference)

void ACharacterSCTBP_C::GetCustomDepthMeshes(TArray<class UPrimitiveComponent*>* Meshes)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterSCTBP_C", "GetCustomDepthMeshes");

	Params::CharacterSCTBP_C_GetCustomDepthMeshes Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Meshes != nullptr)
		*Meshes = std::move(Parms.Meshes);
}


// Function CharacterSCTBP.CharacterSCTBP_C.setDeadAnim
// (Public, BlueprintCallable, BlueprintEvent)

void ACharacterSCTBP_C::SetDeadAnim()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterSCTBP_C", "setDeadAnim");

	UObject::ProcessEvent(Func, nullptr);
}


// Function CharacterSCTBP.CharacterSCTBP_C.CreateMissingDynamicMaterials
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void ACharacterSCTBP_C::CreateMissingDynamicMaterials()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterSCTBP_C", "CreateMissingDynamicMaterials");

	UObject::ProcessEvent(Func, nullptr);
}


// Function CharacterSCTBP.CharacterSCTBP_C.IsInRecentlyPlayedWithList
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FString                           UserAccelByteId                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// struct FFCTFriendsList                  RecentlyPlayedWithList                                 (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// bool                                    InRecentlyPlayedWith                                   (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ACharacterSCTBP_C::IsInRecentlyPlayedWithList(const class FString& UserAccelByteId, const struct FFCTFriendsList& RecentlyPlayedWithList, bool* InRecentlyPlayedWith)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterSCTBP_C", "IsInRecentlyPlayedWithList");

	Params::CharacterSCTBP_C_IsInRecentlyPlayedWithList Parms{};

	Parms.UserAccelByteId = std::move(UserAccelByteId);
	Parms.RecentlyPlayedWithList = std::move(RecentlyPlayedWithList);

	UObject::ProcessEvent(Func, &Parms);

	if (InRecentlyPlayedWith != nullptr)
		*InRecentlyPlayedWith = Parms.InRecentlyPlayedWith;
}


// Function CharacterSCTBP.CharacterSCTBP_C.Vivox Talker Event Bindings
// (Public, BlueprintCallable, BlueprintEvent)

void ACharacterSCTBP_C::Vivox_Talker_Event_Bindings()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterSCTBP_C", "Vivox Talker Event Bindings");

	UObject::ProcessEvent(Func, nullptr);
}


// Function CharacterSCTBP.CharacterSCTBP_C.PrintCustomizationError
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FString                           UserId                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// int32                                   Code                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FString                           Message                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// bool                                    bSuccess                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// float                                   DisplayDuration                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ACharacterSCTBP_C::PrintCustomizationError(const class FString& UserId, int32 Code, const class FString& Message, bool bSuccess, float DisplayDuration)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterSCTBP_C", "PrintCustomizationError");

	Params::CharacterSCTBP_C_PrintCustomizationError Parms{};

	Parms.UserId = std::move(UserId);
	Parms.Code = Code;
	Parms.Message = std::move(Message);
	Parms.bSuccess = bSuccess;
	Parms.DisplayDuration = DisplayDuration;

	UObject::ProcessEvent(Func, &Parms);
}


// Function CharacterSCTBP.CharacterSCTBP_C.GetGamepadAxis
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// struct FVector2D                        ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

struct FVector2D ACharacterSCTBP_C::GetGamepadAxis()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterSCTBP_C", "GetGamepadAxis");

	Params::CharacterSCTBP_C_GetGamepadAxis Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function CharacterSCTBP.CharacterSCTBP_C.GetMouseAxis
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// struct FVector2D                        ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

struct FVector2D ACharacterSCTBP_C::GetMouseAxis()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterSCTBP_C", "GetMouseAxis");

	Params::CharacterSCTBP_C_GetMouseAxis Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function CharacterSCTBP.CharacterSCTBP_C.UpdatePlatformIcon
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FString                           PlatformId                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)

void ACharacterSCTBP_C::UpdatePlatformIcon(const class FString& PlatformId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterSCTBP_C", "UpdatePlatformIcon");

	Params::CharacterSCTBP_C_UpdatePlatformIcon Parms{};

	Parms.PlatformId = std::move(PlatformId);

	UObject::ProcessEvent(Func, &Parms);
}


// Function CharacterSCTBP.CharacterSCTBP_C.GetPlatformTexture
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FString                           Selection                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// class UTexture2D*                       IconTexture                                            (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ACharacterSCTBP_C::GetPlatformTexture(const class FString& Selection, class UTexture2D** IconTexture)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterSCTBP_C", "GetPlatformTexture");

	Params::CharacterSCTBP_C_GetPlatformTexture Parms{};

	Parms.Selection = std::move(Selection);

	UObject::ProcessEvent(Func, &Parms);

	if (IconTexture != nullptr)
		*IconTexture = Parms.IconTexture;
}


// Function CharacterSCTBP.CharacterSCTBP_C.ToggleCharacterVisibility
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bNewVisibility                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ACharacterSCTBP_C::ToggleCharacterVisibility(bool bNewVisibility)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterSCTBP_C", "ToggleCharacterVisibility");

	Params::CharacterSCTBP_C_ToggleCharacterVisibility Parms{};

	Parms.bNewVisibility = bNewVisibility;

	UObject::ProcessEvent(Func, &Parms);
}


// Function CharacterSCTBP.CharacterSCTBP_C.EnableCharacterVisibilityInPIE
// (Public, BlueprintCallable, BlueprintEvent)

void ACharacterSCTBP_C::EnableCharacterVisibilityInPIE()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterSCTBP_C", "EnableCharacterVisibilityInPIE");

	UObject::ProcessEvent(Func, nullptr);
}


// Function CharacterSCTBP.CharacterSCTBP_C.GetCloseCharactersOnDeath
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<class ACharacterSCTBP_C*>        Characters                                             (Parm, OutParm)

void ACharacterSCTBP_C::GetCloseCharactersOnDeath(TArray<class ACharacterSCTBP_C*>* Characters)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterSCTBP_C", "GetCloseCharactersOnDeath");

	Params::CharacterSCTBP_C_GetCloseCharactersOnDeath Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Characters != nullptr)
		*Characters = std::move(Parms.Characters);
}


// Function CharacterSCTBP.CharacterSCTBP_C.TryRemoveShieldGE
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    WasShielded                                            (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ACharacterSCTBP_C::TryRemoveShieldGE(bool* WasShielded)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterSCTBP_C", "TryRemoveShieldGE");

	Params::CharacterSCTBP_C_TryRemoveShieldGE Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (WasShielded != nullptr)
		*WasShielded = Parms.WasShielded;
}


// Function CharacterSCTBP.CharacterSCTBP_C.GetEssentialValuesBPI
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FVector                          InVelocity                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    InIsMoving                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    InHasMovementInput                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    InIsAiming                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// uint8                                   InAimType                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   InDirection                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   InCharacterRotationDifference                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   InVelocityDifference                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   InAimYawDelta                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   InAimYawRate                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FRotator                         InCharacterRotation                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// struct FRotator                         InLookingRotation                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// struct FRotator                         InLastVelocityRotation                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// struct FRotator                         InLastMovementInputRotation                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    InCarryingCorpse                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    InBeingCarriedCorpse                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// float                                   InAlcoholPercent                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          Velocity                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    IsMoving                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    HasMovementInput                                       (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    IsAiming                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
// uint8                                   AimType                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   Direction                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   CharacterRotationDifference                            (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   VelocityDifference                                     (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   AimYawDelta                                            (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   AimYawRate                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FRotator                         CharacterRotation                                      (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
// struct FRotator                         LookingRotation                                        (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
// struct FRotator                         LastVelocityRotation                                   (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
// struct FRotator                         LastMovementInputRotation                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    CarryingCorpse                                         (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    BeingCarriedCorpse                                     (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
// float                                   AlcoholPercent_0                                       (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ACharacterSCTBP_C::GetEssentialValuesBPI(const struct FVector& InVelocity, bool InIsMoving, bool InHasMovementInput, bool InIsAiming, uint8 InAimType, float InDirection, float InCharacterRotationDifference, float InVelocityDifference, float InAimYawDelta, float InAimYawRate, const struct FRotator& InCharacterRotation, const struct FRotator& InLookingRotation, const struct FRotator& InLastVelocityRotation, const struct FRotator& InLastMovementInputRotation, bool InCarryingCorpse, bool InBeingCarriedCorpse, float InAlcoholPercent, struct FVector* Velocity, bool* IsMoving, bool* HasMovementInput, bool* IsAiming, uint8* AimType, float* Direction, float* CharacterRotationDifference, float* VelocityDifference, float* AimYawDelta, float* AimYawRate, struct FRotator* CharacterRotation, struct FRotator* LookingRotation, struct FRotator* LastVelocityRotation, struct FRotator* LastMovementInputRotation, bool* CarryingCorpse, bool* BeingCarriedCorpse, float* AlcoholPercent_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterSCTBP_C", "GetEssentialValuesBPI");

	Params::CharacterSCTBP_C_GetEssentialValuesBPI Parms{};

	Parms.InVelocity = std::move(InVelocity);
	Parms.InIsMoving = InIsMoving;
	Parms.InHasMovementInput = InHasMovementInput;
	Parms.InIsAiming = InIsAiming;
	Parms.InAimType = InAimType;
	Parms.InDirection = InDirection;
	Parms.InCharacterRotationDifference = InCharacterRotationDifference;
	Parms.InVelocityDifference = InVelocityDifference;
	Parms.InAimYawDelta = InAimYawDelta;
	Parms.InAimYawRate = InAimYawRate;
	Parms.InCharacterRotation = std::move(InCharacterRotation);
	Parms.InLookingRotation = std::move(InLookingRotation);
	Parms.InLastVelocityRotation = std::move(InLastVelocityRotation);
	Parms.InLastMovementInputRotation = std::move(InLastMovementInputRotation);
	Parms.InCarryingCorpse = InCarryingCorpse;
	Parms.InBeingCarriedCorpse = InBeingCarriedCorpse;
	Parms.InAlcoholPercent = InAlcoholPercent;

	UObject::ProcessEvent(Func, &Parms);

	if (Velocity != nullptr)
		*Velocity = std::move(Parms.Velocity);

	if (IsMoving != nullptr)
		*IsMoving = Parms.IsMoving;

	if (HasMovementInput != nullptr)
		*HasMovementInput = Parms.HasMovementInput;

	if (IsAiming != nullptr)
		*IsAiming = Parms.IsAiming;

	if (AimType != nullptr)
		*AimType = Parms.AimType;

	if (Direction != nullptr)
		*Direction = Parms.Direction;

	if (CharacterRotationDifference != nullptr)
		*CharacterRotationDifference = Parms.CharacterRotationDifference;

	if (VelocityDifference != nullptr)
		*VelocityDifference = Parms.VelocityDifference;

	if (AimYawDelta != nullptr)
		*AimYawDelta = Parms.AimYawDelta;

	if (AimYawRate != nullptr)
		*AimYawRate = Parms.AimYawRate;

	if (CharacterRotation != nullptr)
		*CharacterRotation = std::move(Parms.CharacterRotation);

	if (LookingRotation != nullptr)
		*LookingRotation = std::move(Parms.LookingRotation);

	if (LastVelocityRotation != nullptr)
		*LastVelocityRotation = std::move(Parms.LastVelocityRotation);

	if (LastMovementInputRotation != nullptr)
		*LastMovementInputRotation = std::move(Parms.LastMovementInputRotation);

	if (CarryingCorpse != nullptr)
		*CarryingCorpse = Parms.CarryingCorpse;

	if (BeingCarriedCorpse != nullptr)
		*BeingCarriedCorpse = Parms.BeingCarriedCorpse;

	if (AlcoholPercent_0 != nullptr)
		*AlcoholPercent_0 = Parms.AlcoholPercent_0;
}


// Function CharacterSCTBP.CharacterSCTBP_C.GetSetupValuesBPI
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   InCrouchSpeed                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   InWalkSpeed                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   InRunSpeed                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   InSprintSpeed                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    InFemale                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// float                                   CrouchSpeed                                            (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   WalkSpeed                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   RunSpeed                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   SprintSpeed                                            (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Female_0                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ACharacterSCTBP_C::GetSetupValuesBPI(float InCrouchSpeed, float InWalkSpeed, float InRunSpeed, float InSprintSpeed, bool InFemale, float* CrouchSpeed, float* WalkSpeed, float* RunSpeed, float* SprintSpeed, bool* Female_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterSCTBP_C", "GetSetupValuesBPI");

	Params::CharacterSCTBP_C_GetSetupValuesBPI Parms{};

	Parms.InCrouchSpeed = InCrouchSpeed;
	Parms.InWalkSpeed = InWalkSpeed;
	Parms.InRunSpeed = InRunSpeed;
	Parms.InSprintSpeed = InSprintSpeed;
	Parms.InFemale = InFemale;

	UObject::ProcessEvent(Func, &Parms);

	if (CrouchSpeed != nullptr)
		*CrouchSpeed = Parms.CrouchSpeed;

	if (WalkSpeed != nullptr)
		*WalkSpeed = Parms.WalkSpeed;

	if (RunSpeed != nullptr)
		*RunSpeed = Parms.RunSpeed;

	if (SprintSpeed != nullptr)
		*SprintSpeed = Parms.SprintSpeed;

	if (Female_0 != nullptr)
		*Female_0 = Parms.Female_0;
}


// Function CharacterSCTBP.CharacterSCTBP_C.GetPlayerNameBPI
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FString                           Name_0                                                 (Parm, OutParm, ZeroConstructor, HasGetValueTypeHash)

void ACharacterSCTBP_C::GetPlayerNameBPI(class FString* Name_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterSCTBP_C", "GetPlayerNameBPI");

	Params::CharacterSCTBP_C_GetPlayerNameBPI Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Name_0 != nullptr)
		*Name_0 = std::move(Parms.Name_0);
}


// Function CharacterSCTBP.CharacterSCTBP_C.IsPersonoidBPI
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    IsPersonoid                                            (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ACharacterSCTBP_C::IsPersonoidBPI(bool* IsPersonoid)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterSCTBP_C", "IsPersonoidBPI");

	Params::CharacterSCTBP_C_IsPersonoidBPI Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (IsPersonoid != nullptr)
		*IsPersonoid = Parms.IsPersonoid;
}


// Function CharacterSCTBP.CharacterSCTBP_C.GetHeldLogInfoBPI
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// EPassengerLogFactType                   FactType                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// TArray<struct FPlayerData>              Players                                                (Parm, OutParm)
// bool                                    HasLog                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ACharacterSCTBP_C::GetHeldLogInfoBPI(EPassengerLogFactType* FactType, TArray<struct FPlayerData>* Players, bool* HasLog)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterSCTBP_C", "GetHeldLogInfoBPI");

	Params::CharacterSCTBP_C_GetHeldLogInfoBPI Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (FactType != nullptr)
		*FactType = Parms.FactType;

	if (Players != nullptr)
		*Players = std::move(Parms.Players);

	if (HasLog != nullptr)
		*HasLog = Parms.HasLog;
}


// Function CharacterSCTBP.CharacterSCTBP_C.IsAliveBPI
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Alive                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ACharacterSCTBP_C::IsAliveBPI(bool* Alive)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterSCTBP_C", "IsAliveBPI");

	Params::CharacterSCTBP_C_IsAliveBPI Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Alive != nullptr)
		*Alive = Parms.Alive;
}


// Function CharacterSCTBP.CharacterSCTBP_C.IsFemaleBPI
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)

bool ACharacterSCTBP_C::IsFemaleBPI()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterSCTBP_C", "IsFemaleBPI");

	Params::CharacterSCTBP_C_IsFemaleBPI Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function CharacterSCTBP.CharacterSCTBP_C.GetAbilitySystemComponentBPI
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UAbilitySystemComponent*          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

class UAbilitySystemComponent* ACharacterSCTBP_C::GetAbilitySystemComponentBPI()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterSCTBP_C", "GetAbilitySystemComponentBPI");

	Params::CharacterSCTBP_C_GetAbilitySystemComponentBPI Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function CharacterSCTBP.CharacterSCTBP_C.GetPortrait
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UTexture2D*                       ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

class UTexture2D* ACharacterSCTBP_C::GetPortrait()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterSCTBP_C", "GetPortrait");

	Params::CharacterSCTBP_C_GetPortrait Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function CharacterSCTBP.CharacterSCTBP_C.GetHomingTargetBPI
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class USceneComponent*                  ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

class USceneComponent* ACharacterSCTBP_C::GetHomingTargetBPI()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterSCTBP_C", "GetHomingTargetBPI");

	Params::CharacterSCTBP_C_GetHomingTargetBPI Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function CharacterSCTBP.CharacterSCTBP_C.IsPlayerBlocked
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class APlayerState*                     Player                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    bLocked                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ACharacterSCTBP_C::IsPlayerBlocked(class APlayerState* Player, bool* bLocked)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterSCTBP_C", "IsPlayerBlocked");

	Params::CharacterSCTBP_C_IsPlayerBlocked Parms{};

	Parms.Player = Player;

	UObject::ProcessEvent(Func, &Parms);

	if (bLocked != nullptr)
		*bLocked = Parms.bLocked;
}


// Function CharacterSCTBP.CharacterSCTBP_C.IsPlayerConsoleCommunicationBlocked
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class APlayerState*                     Player                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    bLocked                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ACharacterSCTBP_C::IsPlayerConsoleCommunicationBlocked(class APlayerState* Player, bool* bLocked)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterSCTBP_C", "IsPlayerConsoleCommunicationBlocked");

	Params::CharacterSCTBP_C_IsPlayerConsoleCommunicationBlocked Parms{};

	Parms.Player = Player;

	UObject::ProcessEvent(Func, &Parms);

	if (bLocked != nullptr)
		*bLocked = Parms.bLocked;
}


// Function CharacterSCTBP.CharacterSCTBP_C.HitByExtinguisher
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ACharacter*                       Character                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   Damage                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// ExtinguisherTypes                       Extinguisher_Type                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Void                                                   (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ACharacterSCTBP_C::HitByExtinguisher(class ACharacter* Character, float Damage, ExtinguisherTypes Extinguisher_Type, bool* Void)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterSCTBP_C", "HitByExtinguisher");

	Params::CharacterSCTBP_C_HitByExtinguisher Parms{};

	Parms.Character = Character;
	Parms.Damage = Damage;
	Parms.Extinguisher_Type = Extinguisher_Type;

	UObject::ProcessEvent(Func, &Parms);

	if (Void != nullptr)
		*Void = Parms.Void;
}


// Function CharacterSCTBP.CharacterSCTBP_C.HitByFire
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Void                                                   (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ACharacterSCTBP_C::HitByFire(bool* Void)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterSCTBP_C", "HitByFire");

	Params::CharacterSCTBP_C_HitByFire Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Void != nullptr)
		*Void = Parms.Void;
}


// Function CharacterSCTBP.CharacterSCTBP_C.K2_CanCrouch
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)

bool ACharacterSCTBP_C::K2_CanCrouch() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterSCTBP_C", "K2_CanCrouch");

	Params::CharacterSCTBP_C_K2_CanCrouch Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function CharacterSCTBP.CharacterSCTBP_C.GetGrabbingActor
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// class ACharacterSCTBP_C*                GrabbingCharacter_0                                    (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ACharacterSCTBP_C::GetGrabbingActor(class ACharacterSCTBP_C** GrabbingCharacter_0) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterSCTBP_C", "GetGrabbingActor");

	Params::CharacterSCTBP_C_GetGrabbingActor Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (GrabbingCharacter_0 != nullptr)
		*GrabbingCharacter_0 = Parms.GrabbingCharacter_0;
}


// Function CharacterSCTBP.CharacterSCTBP_C.GetCoopKiller
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// class ACharacterSCT*                    CoopKiller_0                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ACharacterSCTBP_C::GetCoopKiller(class ACharacterSCT** CoopKiller_0) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterSCTBP_C", "GetCoopKiller");

	Params::CharacterSCTBP_C_GetCoopKiller Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (CoopKiller_0 != nullptr)
		*CoopKiller_0 = Parms.CoopKiller_0;
}


// Function CharacterSCTBP.CharacterSCTBP_C.GetAkComponent
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, Const)
// Parameters:
// class UAkComponent*                     AkComponent                                            (Parm, OutParm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ACharacterSCTBP_C::GetAkComponent(class UAkComponent** AkComponent) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterSCTBP_C", "GetAkComponent");

	Params::CharacterSCTBP_C_GetAkComponent Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (AkComponent != nullptr)
		*AkComponent = Parms.AkComponent;
}

}

